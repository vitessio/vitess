name: endtoend
on: [push, pull_request]
permissions: read-all

jobs:
  build:
    name: End-to-End Test
    strategy:
      matrix:
        os: ["ubuntu-24.04"]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.arch == 'amd64' && matrix.os || 'ubuntu-24.04-arm' }}
    env:
      ARCH: ${{ matrix.arch }}

    steps:
    - name: Skip CI
      run: |
        if [[ "${{ contains( github.event.pull_request.labels.*.name, 'Skip CI') }}" == "true" ]]; then
          echo "skipping CI due to the 'Skip CI' label"
          exit 1
        fi

    - name: Check if workflow needs to be skipped
      id: skip-workflow
      run: |
        skip='false'
        if [[ "${{ github.event.pull_request }}" == "" ]] && [[ "${{ github.ref }}" != "refs/heads/main" ]] && [[ ! "${{ github.ref }}" =~ ^refs/heads/release-[0-9]+\.[0-9]$ ]] && [[ ! "${{ github.ref }}" =~ "refs/tags/.*" ]]; then
          skip='true'
        fi
        echo "skip-workflow=${skip}" >> $GITHUB_OUTPUT

    - name: Print architecture
      run: uname -m

    - name: Check out code
      if: steps.skip-workflow.outputs.skip-workflow == 'false'
      uses: actions/checkout@v4
      with:
        persist-credentials: 'false'

    - name: Check for changes in relevant files
      if: steps.skip-workflow.outputs.skip-workflow == 'false'
      uses: dorny/paths-filter@v3
      id: changes
      with:
        token: ''
        filters: |
          end_to_end:
            - 'go/**/*.go'
            - 'test.go'
            - 'Makefile'
            - 'build.env'
            - 'go.sum'
            - 'go.mod'
            - 'proto/*.proto'
            - 'tools/**'
            - 'config/**'
            - 'bootstrap.sh'
            - '.github/workflows/endtoend.yml'

    - name: Set up Go
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Tune the OS
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      run: |
        sudo sysctl -w net.ipv4.ip_local_port_range="22768 65535"

    - name: Get dependencies (ARCH aware)
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      run: |
        if [ "$ARCH" = "arm64" ]; then
          wget https://github.com/ranimandepudi/vitess/releases/download/mysql-arm64-deb/mysql-server_8.0.35_arm64.deb
          wget https://github.com/ranimandepudi/vitess/releases/download/mysql-arm64-deb/libssl1.1_1.1.1f-1ubuntu2.16_arm64.deb
          wget https://github.com/ranimandepudi/vitess/releases/download/mysql-8.0.35-arm64-debs/libaio1_0.3.112-5_arm64.deb          
          sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.16_arm64.deb libaio1_0.3.112-5_arm64.deb
          sudo dpkg -i mysql-server_8.0.35_arm64.deb
          export PATH=$PATH:/usr/local/mysql/bin
        else 
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A8D3785C
          wget -c https://dev.mysql.com/get/mysql-apt-config_0.8.33-1_all.deb
          echo mysql-apt-config mysql-apt-config/select-server select mysql-8.0 | sudo debconf-set-selections
          sudo DEBIAN_FRONTEND="noninteractive" dpkg -i mysql-apt-config*
          sudo apt-get update
          sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd-client etcd-server curl git wget eatmydata xz-utils
        fi

        sudo service mysql stop
        sudo service etcd stop
        sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
        go mod download

    - name: Run make minimaltools
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      run: make minimaltools

    - name: Build
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      run: |
        NOVTADMINBUILD=1 make build

    - name: endtoend
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
      timeout-minutes: 30
      run: |
        export VTDATAROOT="/tmp/"
        eatmydata -- tools/e2e_test_runner.sh