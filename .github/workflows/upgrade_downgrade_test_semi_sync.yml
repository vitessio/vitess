name: Semi Sync Upgrade Downgrade Testing
on:
  push:
  pull_request:

concurrency:
  group: format('{0}-{1}', ${{ github.ref }}, 'Semi Sync Upgrade Downgrade Testing')
  cancel-in-progress: true

permissions: read-all

jobs:
  upgrade_downgrade_test_e2e:
    timeout-minutes: 60
    name: Run Semi Sync Upgrade Downgrade Test
    runs-on: gh-hosted-runners-16cores-1

    steps:
      - name: Skip CI
        run: |
          if [[ "${{contains( github.event.pull_request.labels.*.name, 'Skip CI')}}" == "true" ]]; then
            echo "skipping CI due to the 'Skip CI' label"
            exit 1
          fi

      - name: Check if workflow needs to be skipped
        id: skip-workflow
        run: |
          skip='false'
          if [[ "${{github.event.pull_request}}" ==  "" ]] && [[ "${{github.ref}}" != "refs/heads/main" ]] && [[ ! "${{github.ref}}" =~ ^refs/heads/release-[0-9]+\.[0-9]$ ]] && [[ ! "${{github.ref}}" =~ "refs/tags/.*" ]]; then
          skip='true'
          fi
          echo Skip ${skip}
          echo "skip-workflow=${skip}" >> $GITHUB_OUTPUT

      - name: Check out commit's code
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set output with latest release branch
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        id: output-previous-release-ref
        run: |
          previous_release_ref=$(./tools/get_previous_release.sh ${{github.base_ref}} ${{github.ref}})
          echo $previous_release_ref
          echo "previous_release_ref=${previous_release_ref}" >> $GITHUB_OUTPUT

      - name: Check for changes in relevant files
        if: steps.skip-workflow.outputs.skip-workflow == 'false'
        uses: dorny/paths-filter@v3.0.1
        id: changes
        with:
          token: ''
          filters: |
            end_to_end:
              - 'go/**'
              - 'go/**/*.go'
              - 'test.go'
              - 'Makefile'
              - 'build.env'
              - 'go.sum'
              - 'go.mod'
              - 'proto/*.proto'
              - 'tools/**'
              - 'config/**'
              - 'bootstrap.sh'
              - '.github/workflows/upgrade_downgrade_test_semi_sync.yml'

      - name: Set up Go
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.6

      - name: Set up python
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        uses: actions/setup-python@v5

      - name: Tune the OS
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          sudo sysctl -w net.ipv4.ip_local_port_range="22768 65535"

      - name: Get base dependencies
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata
          sudo service mysql stop
          sudo service etcd stop
          sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
          go mod download
          
          # install JUnit report formatter
          go install github.com/vitessio/go-junit-report@HEAD
          
          wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
          sudo apt-get install -y gnupg2
          sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
          sudo percona-release enable-only tools
          sudo apt-get update
          sudo apt-get install -y percona-xtrabackup-80

      # Checkout to the last release of Vitess
      - name: Check out other version's code (${{ steps.output-previous-release-ref.outputs.previous_release_ref }})
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.output-previous-release-ref.outputs.previous_release_ref }}

      - name: Get dependencies for the last release
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          go mod download

      - name: Building last release's binaries
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        timeout-minutes: 10
        run: |
          source build.env
          NOVTADMINBUILD=1 make build
          mkdir -p /tmp/vitess-build-other/
          cp -R bin /tmp/vitess-build-other/
          rm -Rf bin/*

      # Checkout to this build's commit
      - name: Check out commit's code
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        uses: actions/checkout@v4

      - name: Get dependencies for this commit
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          go mod download

      - name: Building the binaries for this commit
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        timeout-minutes: 10
        run: |
          source build.env
          NOVTADMINBUILD=1 make build
          mkdir -p /tmp/vitess-build-current/
          cp -R bin /tmp/vitess-build-current/

      # Copy last releases vttablet
      - name: Copy last release's VTTablet
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          source build.env
          
          cp /tmp/vitess-build-other/bin/vttablet $PWD/bin/vttabletold
          vttabletold --version

      - name: Run semi sync tests
        if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.end_to_end == 'true'
        run: |
          rm -rf /tmp/vtdataroot
          mkdir -p /tmp/vtdataroot
          set -x
          source build.env
          go test -v -count=1 -run="" ./go/test/endtoend/reparent/semisync -alsologtostderr