name: Upgrade Downgrade Testing - Backups - E2E
on:
  push:
  pull_request:

concurrency:
  group: format('{0}-{1}', ${{ github.ref }}, 'Upgrade Downgrade Testing - Backups - E2E')
  cancel-in-progress: true

jobs:
  get_upgrade_downgrade_label:
    timeout-minutes: 10
    if: github.repository == 'vitessio/vitess'
    name: Get the Upgrade Downgrade pull request label
    runs-on: ubuntu-latest
    outputs:
      hasLabel: ${{ steps.check_label.outputs.hasLabel }}

    steps:
      - name: Check Label for PR
        if: github.event_name == 'pull_request'
        uses: Dreamcodeio/pr-has-label-action@master
        id: check_label
        with:
          label: Skip Upgrade Downgrade

  get_latest_release:
    if: always() && (github.event_name != 'pull_request' || needs.get_upgrade_downgrade_label.outputs.hasLabel != 'true')
    name: Get latest release
    runs-on: ubuntu-latest
    needs:
      - get_upgrade_downgrade_label
    outputs:
      latest_release: ${{ steps.output-latest-release-branch.outputs.latest_release_branch }}

    steps:
      - name: Check out to HEAD
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set output with latest release branch
        id: output-latest-release-branch
        run: |
          latest_release_branch=$(./tools/get_latest_release.sh ${{github.base_ref}})
          echo $latest_release_branch
          echo "::set-output name=latest_release_branch::${latest_release_branch}"

  upgrade_downgrade_test_e2e:
    timeout-minutes: 60
    if: always() && (needs.get_latest_release.result == 'success')
    name: Run Upgrade Downgrade Test
    runs-on: ubuntu-18.04
    needs:
      - get_upgrade_downgrade_label
      - get_latest_release

    steps:
    - name: Check out commit's code
      uses: actions/checkout@v2

    - name: Check for changes in relevant files
      uses: frouioui/paths-filter@main
      id: changes
      with:
        token: ''
        filters: |
          end_to_end:
            - 'go/**'
            - 'go/**/*.go'
            - 'test.go'
            - 'Makefile'
            - 'build.env'
            - 'go.[sumod]'
            - 'proto/*.proto'
            - 'tools/**'
            - 'config/**'
            - 'bootstrap.sh'

    - name: Set up Go
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/setup-go@v2
      with:
        go-version: 1.18.1

    - name: Set up python
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/setup-python@v2

    - name: Tune the OS
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range

    - name: Get base dependencies
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata
        sudo service mysql stop
        sudo service etcd stop
        sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
        go mod download

        # install JUnit report formatter
        go install github.com/jstemmer/go-junit-report@latest

        wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get install -y gnupg2
        sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get update
        sudo apt-get install percona-xtrabackup-24

    # Checkout to the last release of Vitess
    - name: Check out other version's code (${{ needs.get_latest_release.outputs.latest_release }})
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/checkout@v2
      with:
        ref: ${{ needs.get_latest_release.outputs.latest_release }}

    - name: Get dependencies for the last release
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        go mod download

    - name: Building last release's binaries
      if: steps.changes.outputs.end_to_end == 'true'
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-other/
        cp -R bin /tmp/vitess-build-other/
        rm -Rf bin/*

    # Checkout to this build's commit
    - name: Check out commit's code
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/checkout@v2

    - name: Get dependencies for this commit
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        go mod download

    - name: Building the binaries for this commit
      if: steps.changes.outputs.end_to_end == 'true'
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-current/
        cp -R bin /tmp/vitess-build-current/

    # Swap binaries, use last release's VTTablet
    - name: Use last release's VTTablet
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        source build.env

        rm -f $PWD/bin/vttablet
        cp /tmp/vitess-build-other/bin/vttablet $PWD/bin/vttablet
        vttablet --version

    # Run test with VTTablet at version N-1 and VTBackup at version N
    - name: Run backups tests (vttablet=N-1, vtbackup=N)
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        rm -rf /tmp/vtdataroot
        mkdir -p /tmp/vtdataroot
        set -x
        source build.env
        eatmydata -- go run test.go -skip-build -docker=false -print-log -follow -tag upgrade_downgrade_backups

    # Swap binaries again, use current version's VTTablet, and last release's VTBackup
    - name: Use current version VTTablet, and other version VTBackup
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        source build.env

        rm -f $PWD/bin/vtbackup $PWD/bin/vttablet
        cp /tmp/vitess-build-current/bin/vtbackup $PWD/bin/vtbackup
        cp /tmp/vitess-build-other/bin/vttablet $PWD/bin/vttablet
        vtbackup --version
        vttablet --version

    # Run test again with VTTablet at version N, and VTBackup at version N-1
    - name: Run backups tests (vttablet=N, vtbackup=N-1)
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        rm -rf /tmp/vtdataroot
        mkdir -p /tmp/vtdataroot
        set -x
        source build.env
        eatmydata -- go run test.go -skip-build -keep-data -docker=false -print-log -follow -tag upgrade_downgrade_backups
