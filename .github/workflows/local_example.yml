name: local_example
on: [push, pull_request]
jobs:

  build:
    name: Local example using ${{ matrix.topo }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        topo: [consul,etcd,k8s]

    steps:
    - name: Check if workflow needs to be skipped
      id: skip-workflow
      run: |
        skip='false'
        if [[ "${{github.event.pull_request}}" ==  "" ]] && [[ "${{github.ref}}" != "refs/heads/main" ]] && [[ ! "${{github.ref}}" =~ ^refs/heads/release-[0-9]+\.[0-9]$ ]] && [[ ! "${{github.ref}}" =~ "refs/tags/.*" ]]; then
          skip='true'
        fi
        echo Skip ${skip}
        echo "::set-output name=skip-workflow::${skip}"

    - name: Check out code
      if: steps.skip-workflow.outputs.skip-workflow == 'false'
      uses: actions/checkout@v2

    - name: Check for changes in relevant files
      if: steps.skip-workflow.outputs.skip-workflow == 'false'
      uses: frouioui/paths-filter@main
      id: changes
      with:
        token: ''
        filters: |
          examples:
            - 'go/**/*.go'
            - 'test.go'
            - 'Makefile'
            - 'build.env'
            - 'go.[sumod]'
            - 'proto/*.proto'
            - 'tools/**'
            - 'config/**'
            - 'bootstrap.sh'
            - 'examples/**'
            - '.github/workflows/local_example.yml'

    - name: Set up Go
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      uses: actions/setup-go@v2
      with:
        go-version: 1.18.5

    - name: Tune the OS
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      run: |
        echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range

    - name: Get dependencies
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      run: |
        if [ ${{matrix.os}} = "ubuntu-latest" ]; then
          # Setup MySQL 8.0
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29
          wget -c https://dev.mysql.com/get/mysql-apt-config_0.8.20-1_all.deb
          echo mysql-apt-config mysql-apt-config/select-server select mysql-8.0 | sudo debconf-set-selections
          sudo DEBIAN_FRONTEND="noninteractive" dpkg -i mysql-apt-config*
          sudo apt-get update

          # Install everything else we need, and configure
          sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata
          sudo service mysql stop
          sudo service etcd stop
          sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
        elif [ ${{matrix.os}} = "macos-latest" ]; then
          brew install mysql@5.7 make unzip etcd curl git wget
        fi
        go mod download

    - name: Run make minimaltools
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      run: |
        make minimaltools

    - name: Build
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      run: |
        make build

    - name: local_example
      if: steps.skip-workflow.outputs.skip-workflow == 'false' && steps.changes.outputs.examples == 'true'
      timeout-minutes: 30
      run: |
        export TOPO=${{matrix.topo}}
        if [ ${{matrix.os}} = "macos-latest" ]; then
          export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
        fi
        eatmydata -- go run test.go -print-log -follow -retry=1 local_example
