name: Update Golang Version

on:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC
  workflow_dispatch:

permissions: read-all

jobs:
  update_golang_version:
    if: github.repository == 'vitessio/vitess'
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        branch: [ main, release-19.0, release-18.0, release-17.0, release-16.0 ]
    name: Update Golang Version
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.0

      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}

      - name: Detect new version and update codebase
        env:
          GH_TOKEN: ${{ github.token }}
        id: detect-and-update
        run: |
          old_go_version=$(go run ./go/tools/go-upgrade/go-upgrade.go get go-version)
          echo "old-go-version=${old_go_version}" >> $GITHUB_OUTPUT

          if [ ${{ matrix.branch }} == "main" ]; then
            go run ./go/tools/go-upgrade/go-upgrade.go upgrade --workflow-update=false --main --allow-major-upgrade
          else
            go run ./go/tools/go-upgrade/go-upgrade.go upgrade --workflow-update=false
          fi

          output=$(git status -s)
          if [ -z "${output}" ]; then
            exit 0
          fi
          
          go_version=$(go run ./go/tools/go-upgrade/go-upgrade.go get go-version)
          bootstrap_version=$(go run ./go/tools/go-upgrade/go-upgrade.go get bootstrap-version)
          echo "go-version=${go_version}" >> $GITHUB_OUTPUT
          echo "bootstrap-version=${bootstrap_version}" >> $GITHUB_OUTPUT

          # Check if the PR already exists, if it does then do not create new PR.
          gh pr list -S "is:open [${{ matrix.branch }}] Upgrade the Golang version to go${go_version}" > out.txt 2>&1 | true
          if [ -s out.txt ]; then
            rm -f out.txt
            exit 0
          fi
          rm -f out.txt
          echo "create-pr=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.detect-and-update.outputs.create-pr == 'true'
        uses: peter-evans/create-pull-request@v4
        with:
          branch: "upgrade-go-to-${{steps.detect-and-update.outputs.go-version}}-on-${{ matrix.branch }}"
          commit-message: "bump go version to go${{steps.detect-and-update.outputs.go-version}}"
          signoff: true
          delete-branch: true
          title: "[${{ matrix.branch }}] Upgrade the Golang version to `go${{steps.detect-and-update.outputs.go-version}}`"
          body: |
            This Pull Request bumps the Golang version to `go${{steps.detect-and-update.outputs.go-version}}` and the bootstrap version to `${{steps.detect-and-update.outputs.bootstrap-version}}`.

            > Do not trust the bot blindly. A thorough code review must be done to ensure all the files have been correctly modified.

            There are a few manual steps remaining:
              - [ ] Make sure you update the Golang version used in the previous and next release branches for the Upgrade/Downgrade tests.
              - [ ] Build and Push the bootstrap images to Docker Hub, the bot cannot handle that.
              - [ ] Update the `./.github/workflows/*.yml` files with the newer Golang version, the bot cannot handle that due to permissions.
                - To accomplish this, run the following: `go run ./go/tools/go-upgrade/go-upgrade.go upgrade workflows --go-to=${{steps.detect-and-update.outputs.go-version}}`
          base: ${{ matrix.branch }}
          labels: |
            Skip CI
            go
            Benchmark me
            Component: General
            Type: CI/Build
