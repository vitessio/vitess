# Create global resources.
---
# create a single vttablet service
{{ include "vttablet-service" (tuple $.Values.pmm) }}
---
{{ if $.Values.pmm.enabled }}
# create the pmm service and stateful set
{{ include "pmm" (tuple $.Values.pmm $.Release.Namespace) }}
---
{{ end }}

{{ if $.Values.orchestrator.enabled }}

# create orchestrator global services and StatefulSet
{{ include "orchestrator" (tuple $.Values.orchestrator $.Values.vtctlclient $.Values.logtail) }}
---
# create orchestrator config map
{{ include "orchestrator-config" (tuple $.Values.orchestrator $.Release.Namespace $.Values.vttablet.enableHeartbeat $.Values.vtctlclient) }}
---
# create a Service per StatefulSet replica
{{ range $i := until (int $.Values.orchestrator.replicas) }}
{{ include "orchestrator-statefulset-service" (tuple $.Values.orchestrator $i) }}
---
{{ end }}

{{ end }}

# create an etcd cluster for the global topology
{{- $replicas := $.Values.topology.globalCell.replicas | default $.Values.etcd.replicas -}}
{{- $version := $.Values.topology.globalCell.version | default $.Values.etcd.version -}}
{{- $resources := $.Values.topology.globalCell.resources | default $.Values.etcd.resources -}}
{{- $clusterWide := $.Values.topology.globalCell.resources | default $.Values.etcd.clusterWide -}}

{{ include "etcd" (tuple "global" $replicas $version $resources $clusterWide) }}

# Create requested resources in each cell.
{{ range $cell := $.Values.topology.cells }}

---
# create an etcd cluster per cell
{{- $cellClean := include "clean-label" $cell.name -}}
{{- $replicas := $cell.etcd.replicas | default $.Values.etcd.replicas -}}
{{- $version := $cell.etcd.version | default $.Values.etcd.version -}}
{{- $resources := $cell.etcd.resources | default $.Values.etcd.resources -}}
{{- $clusterWide := $cell.etcd.clusterWide | default $.Values.etcd.clusterWide -}}

{{ include "etcd" (tuple $cellClean $replicas $version $resources $clusterWide) }}
---
# create one controller per cell
{{ include "vtctld" (tuple $.Values.topology $cell $.Values.vtctld $.Release.Namespace $.Values.config) }}
---
# create a pool of vtgates per cell
{{ include "vtgate" (tuple $.Values.topology $cell $.Values.vtgate $.Release.Namespace) }}

  # Tablets for keyspaces
  {{ range $keyspace := $cell.keyspaces }}

    # Keyspace initializations
    {{ include "keyspace" (tuple $cell $keyspace $.Values.vtctlclient $.Release.Namespace) }}

    {{ range $shard := $keyspace.shards }}

      {{ $totalTabletCount := len (include "tablet-count" $shard.tablets) }}
      # Shard initializations
      {{ include "shard" (tuple $cell $keyspace $shard $.Values.vtctlclient $.Release.Namespace $totalTabletCount) }}

      # Tablet initializations
      {{ range $tablet := $shard.tablets }}
        {{ include "vttablet" (tuple $.Values.topology $cell $keyspace $shard $tablet $.Values.vttablet $.Values.vtctlclient $.Release.Namespace $.Values.config $.Values.pmm $.Values.orchestrator $.Values.mysqlctld $.Values.logrotate $.Values.logtail $.Values.vtctl) }}
      {{ end }} # range $tablet
    {{ end }} # range $shard
  {{ end }} # range $keyspace

{{ end }} # range $cell

{{ range $job := $.Values.jobs }}
  {{ if eq $job.kind "vtctlclient" }}
    {{ include "vtctlclient-job" (tuple $job $.Values.vtctlclient $.Release.Namespace) }}
  {{ else }}
    {{ include "vtworker-job" (tuple $job $.Values.vtworker $.Release.Namespace) }}
  {{ end }}
{{ end }}
---
{{ with $.Values.config }}
# shared ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: vitess-cm
data:
  backup.backup_storage_implementation: {{ .backup.backup_storage_implementation }}
  backup.gcs_backup_storage_bucket: {{ .backup.gcs_backup_storage_bucket }}
  backup.gcs_backup_storage_root: {{ .backup.gcs_backup_storage_root }}
  backup.s3_backup_aws_region: {{ .backup.s3_backup_aws_region }}
  backup.s3_backup_storage_bucket: {{ .backup.s3_backup_storage_bucket }}
  backup.s3_backup_storage_root: {{ .backup.s3_backup_storage_root }}
  backup.s3_backup_server_side_encryption: {{ .backup.s3_backup_server_side_encryption }}

  db.flavor: {{ $.Values.vttablet.flavor }}
{{ end }} # end with config
