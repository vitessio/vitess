/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

func (c *cow) copyOnRewriteAST(n AST, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case BasicType:
		return c.copyOnRewriteBasicType(n, parent)
	case Bytes:
		return c.copyOnRewriteBytes(n, parent)
	case InterfaceContainer:
		return c.copyOnRewriteInterfaceContainer(n, parent)
	case InterfaceSlice:
		return c.copyOnRewriteInterfaceSlice(n, parent)
	case *Leaf:
		return c.copyOnRewriteRefOfLeaf(n, parent)
	case LeafSlice:
		return c.copyOnRewriteLeafSlice(n, parent)
	case *NoCloneType:
		return c.copyOnRewriteRefOfNoCloneType(n, parent)
	case *RefContainer:
		return c.copyOnRewriteRefOfRefContainer(n, parent)
	case *RefSliceContainer:
		return c.copyOnRewriteRefOfRefSliceContainer(n, parent)
	case *SubImpl:
		return c.copyOnRewriteRefOfSubImpl(n, parent)
	case ValueContainer:
		return c.copyOnRewriteValueContainer(n, parent)
	case ValueSliceContainer:
		return c.copyOnRewriteValueSliceContainer(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteBytes(n Bytes, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteInterfaceContainer(n InterfaceContainer, parent AST) (out AST, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteInterfaceSlice(n InterfaceSlice, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(InterfaceSlice, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteAST(el, n)
			res[x] = this.(AST)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLeaf(n *Leaf, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteLeafSlice(n LeafSlice, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(LeafSlice, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfLeaf(el, n)
			res[x] = this.(*Leaf)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNoCloneType(n *NoCloneType, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRefContainer(n *RefContainer, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ASTType, changedASTType := c.copyOnRewriteAST(n.ASTType, n)
		_ASTImplementationType, changedASTImplementationType := c.copyOnRewriteRefOfLeaf(n.ASTImplementationType, n)
		if changedASTType || changedASTImplementationType {
			res := *n
			res.ASTType, _ = _ASTType.(AST)
			res.ASTImplementationType, _ = _ASTImplementationType.(*Leaf)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRefSliceContainer(n *RefSliceContainer, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedASTElements bool
		_ASTElements := make([]AST, len(n.ASTElements))
		for x, el := range n.ASTElements {
			this, changed := c.copyOnRewriteAST(el, n)
			_ASTElements[x] = this.(AST)
			if changed {
				changedASTElements = true
			}
		}
		var changedASTImplementationElements bool
		_ASTImplementationElements := make([]*Leaf, len(n.ASTImplementationElements))
		for x, el := range n.ASTImplementationElements {
			this, changed := c.copyOnRewriteRefOfLeaf(el, n)
			_ASTImplementationElements[x] = this.(*Leaf)
			if changed {
				changedASTImplementationElements = true
			}
		}
		if changedASTElements || changedASTImplementationElements {
			res := *n
			res.ASTElements = _ASTElements
			res.ASTImplementationElements = _ASTImplementationElements
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubImpl(n *SubImpl, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_inner, changedinner := c.copyOnRewriteSubIface(n.inner, n)
		if changedinner {
			res := *n
			res.inner, _ = _inner.(SubIface)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteValueContainer(n ValueContainer, parent AST) (out AST, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ASTType, changedASTType := c.copyOnRewriteAST(n.ASTType, n)
		_ASTImplementationType, changedASTImplementationType := c.copyOnRewriteRefOfLeaf(n.ASTImplementationType, n)
		if changedASTType || changedASTImplementationType {
			res := n
			res.ASTType, _ = _ASTType.(AST)
			res.ASTImplementationType, _ = _ASTImplementationType.(*Leaf)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteValueSliceContainer(n ValueSliceContainer, parent AST) (out AST, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedASTElements bool
		_ASTElements := make([]AST, len(n.ASTElements))
		for x, el := range n.ASTElements {
			this, changed := c.copyOnRewriteAST(el, n)
			_ASTElements[x] = this.(AST)
			if changed {
				changedASTElements = true
			}
		}
		var changedASTImplementationElements bool
		_ASTImplementationElements := make([]*Leaf, len(n.ASTImplementationElements))
		for x, el := range n.ASTImplementationElements {
			this, changed := c.copyOnRewriteRefOfLeaf(el, n)
			_ASTImplementationElements[x] = this.(*Leaf)
			if changed {
				changedASTImplementationElements = true
			}
		}
		if changedASTElements || changedASTImplementationElements {
			res := n
			res.ASTElements = _ASTElements
			res.ASTImplementationElements = _ASTImplementationElements
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteSubIface(n SubIface, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *SubImpl:
		return c.copyOnRewriteRefOfSubImpl(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteBasicType(n BasicType, parent AST) (out AST, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteRefOfInterfaceContainer(n *InterfaceContainer, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfValueContainer(n *ValueContainer, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ASTType, changedASTType := c.copyOnRewriteAST(n.ASTType, n)
		_ASTImplementationType, changedASTImplementationType := c.copyOnRewriteRefOfLeaf(n.ASTImplementationType, n)
		if changedASTType || changedASTImplementationType {
			res := *n
			res.ASTType, _ = _ASTType.(AST)
			res.ASTImplementationType, _ = _ASTImplementationType.(*Leaf)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfValueSliceContainer(n *ValueSliceContainer, parent AST) (out AST, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedASTElements bool
		_ASTElements := make([]AST, len(n.ASTElements))
		for x, el := range n.ASTElements {
			this, changed := c.copyOnRewriteAST(el, n)
			_ASTElements[x] = this.(AST)
			if changed {
				changedASTElements = true
			}
		}
		var changedASTImplementationElements bool
		_ASTImplementationElements := make([]*Leaf, len(n.ASTImplementationElements))
		for x, el := range n.ASTImplementationElements {
			this, changed := c.copyOnRewriteRefOfLeaf(el, n)
			_ASTImplementationElements[x] = this.(*Leaf)
			if changed {
				changedASTImplementationElements = true
			}
		}
		if changedASTElements || changedASTImplementationElements {
			res := *n
			res.ASTElements = _ASTElements
			res.ASTImplementationElements = _ASTImplementationElements
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
