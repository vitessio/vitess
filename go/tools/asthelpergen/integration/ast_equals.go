/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

// EqualsAST does deep equals between the two objects.
func EqualsAST(inA, inB AST, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case BasicType:
		b, ok := inB.(BasicType)
		if !ok {
			return false
		}
		return a == b
	case Bytes:
		b, ok := inB.(Bytes)
		if !ok {
			return false
		}
		return EqualsBytes(a, b, f)
	case InterfaceContainer:
		b, ok := inB.(InterfaceContainer)
		if !ok {
			return false
		}
		return EqualsInterfaceContainer(a, b, f)
	case InterfaceSlice:
		b, ok := inB.(InterfaceSlice)
		if !ok {
			return false
		}
		return EqualsInterfaceSlice(a, b, f)
	case *Leaf:
		b, ok := inB.(*Leaf)
		if !ok {
			return false
		}
		return EqualsRefOfLeaf(a, b, f)
	case LeafSlice:
		b, ok := inB.(LeafSlice)
		if !ok {
			return false
		}
		return EqualsLeafSlice(a, b, f)
	case *NoCloneType:
		b, ok := inB.(*NoCloneType)
		if !ok {
			return false
		}
		return EqualsRefOfNoCloneType(a, b, f)
	case *RefContainer:
		b, ok := inB.(*RefContainer)
		if !ok {
			return false
		}
		return EqualsRefOfRefContainer(a, b, f)
	case *RefSliceContainer:
		b, ok := inB.(*RefSliceContainer)
		if !ok {
			return false
		}
		return EqualsRefOfRefSliceContainer(a, b, f)
	case *SubImpl:
		b, ok := inB.(*SubImpl)
		if !ok {
			return false
		}
		return EqualsRefOfSubImpl(a, b, f)
	case ValueContainer:
		b, ok := inB.(ValueContainer)
		if !ok {
			return false
		}
		return EqualsValueContainer(a, b, f)
	case ValueSliceContainer:
		b, ok := inB.(ValueSliceContainer)
		if !ok {
			return false
		}
		return EqualsValueSliceContainer(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsBytes does deep equals between the two objects.
func EqualsBytes(a, b Bytes, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsInterfaceContainer does deep equals between the two objects.
func EqualsInterfaceContainer(a, b InterfaceContainer, f ASTComparison) bool {
	return true
}

// EqualsInterfaceSlice does deep equals between the two objects.
func EqualsInterfaceSlice(a, b InterfaceSlice, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAST(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfLeaf does deep equals between the two objects.
func EqualsRefOfLeaf(a, b *Leaf, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsLeafSlice does deep equals between the two objects.
func EqualsLeafSlice(a, b LeafSlice, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfLeaf(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfNoCloneType does deep equals between the two objects.
func EqualsRefOfNoCloneType(a, b *NoCloneType, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsRefOfRefContainer does deep equals between the two objects.
func EqualsRefOfRefContainer(a, b *RefContainer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType, f) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType, f)
}

// EqualsRefOfRefSliceContainer does deep equals between the two objects.
func EqualsRefOfRefSliceContainer(a, b *RefSliceContainer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements, f) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements, f) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements, f)
}

// EqualsRefOfSubImpl does deep equals between the two objects.
func EqualsRefOfSubImpl(a, b *SubImpl, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSubIface(a.inner, b.inner, f) &&
		EqualsRefOfBool(a.field, b.field, f)
}

// EqualsValueContainer does deep equals between the two objects.
func EqualsValueContainer(a, b ValueContainer, f ASTComparison) bool {
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType, f) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType, f)
}

// EqualsValueSliceContainer does deep equals between the two objects.
func EqualsValueSliceContainer(a, b ValueSliceContainer, f ASTComparison) bool {
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements, f) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements, f) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements, f)
}

// EqualsSubIface does deep equals between the two objects.
func EqualsSubIface(inA, inB SubIface, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *SubImpl:
		b, ok := inB.(*SubImpl)
		if !ok {
			return false
		}
		return EqualsRefOfSubImpl(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsRefOfInterfaceContainer does deep equals between the two objects.
func EqualsRefOfInterfaceContainer(a, b *InterfaceContainer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsSliceOfAST does deep equals between the two objects.
func EqualsSliceOfAST(a, b []AST, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAST(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfInt does deep equals between the two objects.
func EqualsSliceOfInt(a, b []int, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfLeaf does deep equals between the two objects.
func EqualsSliceOfRefOfLeaf(a, b []*Leaf, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfLeaf(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfBool does deep equals between the two objects.
func EqualsRefOfBool(a, b *bool, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsRefOfValueContainer does deep equals between the two objects.
func EqualsRefOfValueContainer(a, b *ValueContainer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType, f) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType, f)
}

// EqualsRefOfValueSliceContainer does deep equals between the two objects.
func EqualsRefOfValueSliceContainer(a, b *ValueSliceContainer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements, f) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements, f) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements, f)
}
