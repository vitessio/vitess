/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

func VisitAST(in AST, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case BasicType:
		return VisitBasicType(in, f)
	case Bytes:
		return VisitBytes(in, f)
	case InterfaceContainer:
		return VisitInterfaceContainer(in, f)
	case InterfaceSlice:
		return VisitInterfaceSlice(in, f)
	case *Leaf:
		return VisitRefOfLeaf(in, f)
	case LeafSlice:
		return VisitLeafSlice(in, f)
	case *NoCloneType:
		return VisitRefOfNoCloneType(in, f)
	case *RefContainer:
		return VisitRefOfRefContainer(in, f)
	case *RefSliceContainer:
		return VisitRefOfRefSliceContainer(in, f)
	case *SubImpl:
		return VisitRefOfSubImpl(in, f)
	case ValueContainer:
		return VisitValueContainer(in, f)
	case ValueSliceContainer:
		return VisitValueSliceContainer(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitBytes(in Bytes, f Visit) error {
	_, err := f(in)
	return err
}
func VisitInterfaceContainer(in InterfaceContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitInterfaceSlice(in InterfaceSlice, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfLeaf(in *Leaf, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitLeafSlice(in LeafSlice, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfNoCloneType(in *NoCloneType, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfRefContainer(in *RefContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRefSliceContainer(in *RefSliceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfSubImpl(in *SubImpl, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSubIface(in.inner, f); err != nil {
		return err
	}
	return nil
}
func VisitValueContainer(in ValueContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitValueSliceContainer(in ValueSliceContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitSubIface(in SubIface, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *SubImpl:
		return VisitRefOfSubImpl(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitBasicType(in BasicType, f Visit) error {
	_, err := f(in)
	return err
}
func VisitRefOfInterfaceContainer(in *InterfaceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfValueContainer(in *ValueContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfValueSliceContainer(in *ValueSliceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
