/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by Sizegen. DO NOT EDIT.

package sqlparser

type cachedObject interface {
	CachedSize(alloc bool) int64
}

func (cached *AddColumns) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Columns []*vitess.io/vitess/go/vt/sqlparser.ColumnDefinition
	{
		size += int64(cap(cached.Columns)) * int64(8)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(true)
		}
	}
	// field First *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.First.CachedSize(true)
	// field After *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.After.CachedSize(true)
	return size
}
func (cached *AddConstraintDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field ConstraintDefinition *vitess.io/vitess/go/vt/sqlparser.ConstraintDefinition
	size += cached.ConstraintDefinition.CachedSize(true)
	return size
}
func (cached *AddIndexDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field IndexDefinition *vitess.io/vitess/go/vt/sqlparser.IndexDefinition
	size += cached.IndexDefinition.CachedSize(true)
	return size
}
func (cached *AliasedExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field As vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.As.CachedSize(false)
	return size
}
func (cached *AliasedTableExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.SimpleTableExpr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Partitions vitess.io/vitess/go/vt/sqlparser.Partitions
	{
		size += int64(cap(cached.Partitions)) * int64(40)
		for _, elem := range cached.Partitions {
			size += elem.CachedSize(false)
		}
	}
	// field As vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.As.CachedSize(false)
	// field Hints *vitess.io/vitess/go/vt/sqlparser.IndexHints
	size += cached.Hints.CachedSize(true)
	return size
}
func (cached *AlterCharset) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field CharacterSet string
	size += int64(len(cached.CharacterSet))
	// field Collate string
	size += int64(len(cached.Collate))
	return size
}
func (cached *AlterColumn) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Column *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.Column.CachedSize(true)
	// field DefaultVal vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.DefaultVal.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *AlterDatabase) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(49)
	}
	// field DBName vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.DBName.CachedSize(false)
	// field AlterOptions []vitess.io/vitess/go/vt/sqlparser.CollateAndCharset
	{
		size += int64(cap(cached.AlterOptions)) * int64(24)
		for _, elem := range cached.AlterOptions {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *AlterMigration) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field UUID string
	size += int64(len(cached.UUID))
	return size
}
func (cached *AlterTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(65)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field AlterOptions []vitess.io/vitess/go/vt/sqlparser.AlterOption
	{
		size += int64(cap(cached.AlterOptions)) * int64(16)
		for _, elem := range cached.AlterOptions {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field PartitionSpec *vitess.io/vitess/go/vt/sqlparser.PartitionSpec
	size += cached.PartitionSpec.CachedSize(true)
	return size
}
func (cached *AlterView) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(136)
	}
	// field ViewName vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.ViewName.CachedSize(false)
	// field Algorithm string
	size += int64(len(cached.Algorithm))
	// field Definer string
	size += int64(len(cached.Definer))
	// field Security string
	size += int64(len(cached.Security))
	// field Columns vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Columns)) * int64(40)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(false)
		}
	}
	// field Select vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Select.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field CheckOption string
	size += int64(len(cached.CheckOption))
	return size
}
func (cached *AlterVschema) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(80)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field VindexSpec *vitess.io/vitess/go/vt/sqlparser.VindexSpec
	size += cached.VindexSpec.CachedSize(true)
	// field VindexCols []vitess.io/vitess/go/vt/sqlparser.ColIdent
	{
		size += int64(cap(cached.VindexCols)) * int64(40)
		for _, elem := range cached.VindexCols {
			size += elem.CachedSize(false)
		}
	}
	// field AutoIncSpec *vitess.io/vitess/go/vt/sqlparser.AutoIncSpec
	size += cached.AutoIncSpec.CachedSize(true)
	return size
}
func (cached *AndExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Right vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Right.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *AutoIncSpec) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(72)
	}
	// field Column vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Column.CachedSize(false)
	// field Sequence vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Sequence.CachedSize(false)
	return size
}
func (cached *BinaryExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Right vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Right.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *BindVarNeeds) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(73)
	}
	// field NeedFunctionResult []string
	{
		size += int64(cap(cached.NeedFunctionResult)) * int64(16)
		for _, elem := range cached.NeedFunctionResult {
			size += int64(len(elem))
		}
	}
	// field NeedSystemVariable []string
	{
		size += int64(cap(cached.NeedSystemVariable)) * int64(16)
		for _, elem := range cached.NeedSystemVariable {
			size += int64(len(elem))
		}
	}
	// field NeedUserDefinedVariables []string
	{
		size += int64(cap(cached.NeedUserDefinedVariables)) * int64(16)
		for _, elem := range cached.NeedUserDefinedVariables {
			size += int64(len(elem))
		}
	}
	return size
}
func (cached *CallProc) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Name.CachedSize(false)
	// field Params vitess.io/vitess/go/vt/sqlparser.Exprs
	{
		size += int64(cap(cached.Params)) * int64(16)
		for _, elem := range cached.Params {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	return size
}
func (cached *CaseExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Whens []*vitess.io/vitess/go/vt/sqlparser.When
	{
		size += int64(cap(cached.Whens)) * int64(8)
		for _, elem := range cached.Whens {
			size += elem.CachedSize(true)
		}
	}
	// field Else vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Else.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ChangeColumn) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field OldColumn *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.OldColumn.CachedSize(true)
	// field NewColDefinition *vitess.io/vitess/go/vt/sqlparser.ColumnDefinition
	size += cached.NewColDefinition.CachedSize(true)
	// field First *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.First.CachedSize(true)
	// field After *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.After.CachedSize(true)
	return size
}
func (cached *CheckConstraintDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(17)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ColIdent) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field val string
	size += int64(len(cached.val))
	// field lowered string
	size += int64(len(cached.lowered))
	return size
}
func (cached *ColName) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(88)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Qualifier vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Qualifier.CachedSize(false)
	return size
}
func (cached *CollateAndCharset) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Value string
	size += int64(len(cached.Value))
	return size
}
func (cached *CollateExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Charset string
	size += int64(len(cached.Charset))
	return size
}
func (cached *ColumnDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(144)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Type vitess.io/vitess/go/vt/sqlparser.ColumnType
	size += cached.Type.CachedSize(false)
	return size
}
func (cached *ColumnType) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(104)
	}
	// field Type string
	size += int64(len(cached.Type))
	// field Options *vitess.io/vitess/go/vt/sqlparser.ColumnTypeOptions
	size += cached.Options.CachedSize(true)
	// field Length *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Length.CachedSize(true)
	// field Scale *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Scale.CachedSize(true)
	// field Charset string
	size += int64(len(cached.Charset))
	// field Collate string
	size += int64(len(cached.Collate))
	// field EnumValues []string
	{
		size += int64(cap(cached.EnumValues)) * int64(16)
		for _, elem := range cached.EnumValues {
			size += int64(len(elem))
		}
	}
	return size
}
func (cached *ColumnTypeOptions) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Null *bool
	size += int64(1)
	// field Default vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Default.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field OnUpdate vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.OnUpdate.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Comment *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Comment.CachedSize(true)
	return size
}
func (cached *ComparisonExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Right vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Right.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Escape vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Escape.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ConstraintDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Details vitess.io/vitess/go/vt/sqlparser.ConstraintInfo
	if cc, ok := cached.Details.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ConvertExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Type *vitess.io/vitess/go/vt/sqlparser.ConvertType
	size += cached.Type.CachedSize(true)
	return size
}
func (cached *ConvertType) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Type string
	size += int64(len(cached.Type))
	// field Length *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Length.CachedSize(true)
	// field Scale *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Scale.CachedSize(true)
	// field Charset string
	size += int64(len(cached.Charset))
	return size
}
func (cached *ConvertUsingExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Type string
	size += int64(len(cached.Type))
	return size
}
func (cached *CreateDatabase) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(73)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field DBName vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.DBName.CachedSize(false)
	// field CreateOptions []vitess.io/vitess/go/vt/sqlparser.CollateAndCharset
	{
		size += int64(cap(cached.CreateOptions)) * int64(24)
		for _, elem := range cached.CreateOptions {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *CreateTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(65)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field TableSpec *vitess.io/vitess/go/vt/sqlparser.TableSpec
	size += cached.TableSpec.CachedSize(true)
	// field OptLike *vitess.io/vitess/go/vt/sqlparser.OptLike
	size += cached.OptLike.CachedSize(true)
	return size
}
func (cached *CreateView) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(137)
	}
	// field ViewName vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.ViewName.CachedSize(false)
	// field Algorithm string
	size += int64(len(cached.Algorithm))
	// field Definer string
	size += int64(len(cached.Definer))
	// field Security string
	size += int64(len(cached.Security))
	// field Columns vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Columns)) * int64(40)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(false)
		}
	}
	// field Select vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Select.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field CheckOption string
	size += int64(len(cached.CheckOption))
	return size
}
func (cached *CurTimeFuncExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Fsp vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Fsp.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Default) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field ColName string
	size += int64(len(cached.ColName))
	return size
}
func (cached *Delete) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(144)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field Targets vitess.io/vitess/go/vt/sqlparser.TableNames
	{
		size += int64(cap(cached.Targets)) * int64(32)
		for _, elem := range cached.Targets {
			size += elem.CachedSize(false)
		}
	}
	// field TableExprs vitess.io/vitess/go/vt/sqlparser.TableExprs
	{
		size += int64(cap(cached.TableExprs)) * int64(16)
		for _, elem := range cached.TableExprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field Partitions vitess.io/vitess/go/vt/sqlparser.Partitions
	{
		size += int64(cap(cached.Partitions)) * int64(40)
		for _, elem := range cached.Partitions {
			size += elem.CachedSize(false)
		}
	}
	// field Where *vitess.io/vitess/go/vt/sqlparser.Where
	size += cached.Where.CachedSize(true)
	// field OrderBy vitess.io/vitess/go/vt/sqlparser.OrderBy
	{
		size += int64(cap(cached.OrderBy)) * int64(8)
		for _, elem := range cached.OrderBy {
			size += elem.CachedSize(true)
		}
	}
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	return size
}
func (cached *DerivedTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Select vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Select.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *DropColumn) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field Name *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.Name.CachedSize(true)
	return size
}
func (cached *DropDatabase) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(41)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field DBName vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.DBName.CachedSize(false)
	return size
}
func (cached *DropKey) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	return size
}
func (cached *DropTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(33)
	}
	// field FromTables vitess.io/vitess/go/vt/sqlparser.TableNames
	{
		size += int64(cap(cached.FromTables)) * int64(32)
		for _, elem := range cached.FromTables {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *DropView) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(25)
	}
	// field FromTables vitess.io/vitess/go/vt/sqlparser.TableNames
	{
		size += int64(cap(cached.FromTables)) * int64(32)
		for _, elem := range cached.FromTables {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *ExistsExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field Subquery *vitess.io/vitess/go/vt/sqlparser.Subquery
	size += cached.Subquery.CachedSize(true)
	return size
}
func (cached *ExplainStmt) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Statement vitess.io/vitess/go/vt/sqlparser.Statement
	if cc, ok := cached.Statement.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ExplainTab) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field Wild string
	size += int64(len(cached.Wild))
	return size
}
func (cached *Flush) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(58)
	}
	// field FlushOptions []string
	{
		size += int64(cap(cached.FlushOptions)) * int64(16)
		for _, elem := range cached.FlushOptions {
			size += int64(len(elem))
		}
	}
	// field TableNames vitess.io/vitess/go/vt/sqlparser.TableNames
	{
		size += int64(cap(cached.TableNames)) * int64(32)
		for _, elem := range cached.TableNames {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *ForeignKeyDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(96)
	}
	// field Source vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Source)) * int64(40)
		for _, elem := range cached.Source {
			size += elem.CachedSize(false)
		}
	}
	// field ReferencedTable vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.ReferencedTable.CachedSize(false)
	// field ReferencedColumns vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.ReferencedColumns)) * int64(40)
		for _, elem := range cached.ReferencedColumns {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *FuncExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(88)
	}
	// field Qualifier vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.Qualifier.CachedSize(false)
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Exprs vitess.io/vitess/go/vt/sqlparser.SelectExprs
	{
		size += int64(cap(cached.Exprs)) * int64(16)
		for _, elem := range cached.Exprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	return size
}
func (cached *GroupConcatExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(80)
	}
	// field Exprs vitess.io/vitess/go/vt/sqlparser.SelectExprs
	{
		size += int64(cap(cached.Exprs)) * int64(16)
		for _, elem := range cached.Exprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field OrderBy vitess.io/vitess/go/vt/sqlparser.OrderBy
	{
		size += int64(cap(cached.OrderBy)) * int64(8)
		for _, elem := range cached.OrderBy {
			size += elem.CachedSize(true)
		}
	}
	// field Separator string
	size += int64(len(cached.Separator))
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	return size
}
func (cached *IndexColumn) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(49)
	}
	// field Column vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Column.CachedSize(false)
	// field Length *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Length.CachedSize(true)
	return size
}
func (cached *IndexDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Info *vitess.io/vitess/go/vt/sqlparser.IndexInfo
	size += cached.Info.CachedSize(true)
	// field Columns []*vitess.io/vitess/go/vt/sqlparser.IndexColumn
	{
		size += int64(cap(cached.Columns)) * int64(8)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(true)
		}
	}
	// field Options []*vitess.io/vitess/go/vt/sqlparser.IndexOption
	{
		size += int64(cap(cached.Options)) * int64(8)
		for _, elem := range cached.Options {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *IndexHints) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Indexes []vitess.io/vitess/go/vt/sqlparser.ColIdent
	{
		size += int64(cap(cached.Indexes)) * int64(40)
		for _, elem := range cached.Indexes {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *IndexInfo) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(100)
	}
	// field Type string
	size += int64(len(cached.Type))
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field ConstraintName vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.ConstraintName.CachedSize(false)
	return size
}
func (cached *IndexOption) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Name string
	size += int64(len(cached.Name))
	// field Value *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Value.CachedSize(true)
	// field String string
	size += int64(len(cached.String))
	return size
}
func (cached *Insert) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(160)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field Partitions vitess.io/vitess/go/vt/sqlparser.Partitions
	{
		size += int64(cap(cached.Partitions)) * int64(40)
		for _, elem := range cached.Partitions {
			size += elem.CachedSize(false)
		}
	}
	// field Columns vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Columns)) * int64(40)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(false)
		}
	}
	// field Rows vitess.io/vitess/go/vt/sqlparser.InsertRows
	if cc, ok := cached.Rows.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field OnDup vitess.io/vitess/go/vt/sqlparser.OnDup
	{
		size += int64(cap(cached.OnDup)) * int64(8)
		for _, elem := range cached.OnDup {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *IntervalExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Unit string
	size += int64(len(cached.Unit))
	return size
}
func (cached *IsExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *JoinCondition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field On vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.On.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Using vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Using)) * int64(40)
		for _, elem := range cached.Using {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *JoinTableExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(80)
	}
	// field LeftExpr vitess.io/vitess/go/vt/sqlparser.TableExpr
	if cc, ok := cached.LeftExpr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field RightExpr vitess.io/vitess/go/vt/sqlparser.TableExpr
	if cc, ok := cached.RightExpr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Condition vitess.io/vitess/go/vt/sqlparser.JoinCondition
	size += cached.Condition.CachedSize(false)
	return size
}
func (cached *KeyState) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(1)
	}
	return size
}
func (cached *Limit) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Offset vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Offset.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Rowcount vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Rowcount.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Literal) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Val string
	size += int64(len(cached.Val))
	return size
}
func (cached *LockOption) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(1)
	}
	return size
}
func (cached *LockTables) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Tables vitess.io/vitess/go/vt/sqlparser.TableAndLockTypes
	{
		size += int64(cap(cached.Tables)) * int64(8)
		for _, elem := range cached.Tables {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *MatchExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(41)
	}
	// field Columns vitess.io/vitess/go/vt/sqlparser.SelectExprs
	{
		size += int64(cap(cached.Columns)) * int64(16)
		for _, elem := range cached.Columns {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ModifyColumn) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field NewColDefinition *vitess.io/vitess/go/vt/sqlparser.ColumnDefinition
	size += cached.NewColDefinition.CachedSize(true)
	// field First *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.First.CachedSize(true)
	// field After *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.After.CachedSize(true)
	return size
}
func (cached *Nextval) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *NotExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *OptLike) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field LikeTable vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.LikeTable.CachedSize(false)
	return size
}
func (cached *OrExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Right vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Right.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Order) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(17)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *OrderByOption) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Cols vitess.io/vitess/go/vt/sqlparser.Columns
	{
		size += int64(cap(cached.Cols)) * int64(40)
		for _, elem := range cached.Cols {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *ParenSelect) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Select vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Select.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ParenTableExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Exprs vitess.io/vitess/go/vt/sqlparser.TableExprs
	{
		size += int64(cap(cached.Exprs)) * int64(16)
		for _, elem := range cached.Exprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	return size
}
func (cached *ParsedQuery) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Query string
	size += int64(len(cached.Query))
	// field bindLocations []vitess.io/vitess/go/vt/sqlparser.bindLocation
	{
		size += int64(cap(cached.bindLocations)) * int64(16)
	}
	return size
}
func (cached *PartitionDefinition) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(57)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Limit vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Limit.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *PartitionSpec) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(112)
	}
	// field Names vitess.io/vitess/go/vt/sqlparser.Partitions
	{
		size += int64(cap(cached.Names)) * int64(40)
		for _, elem := range cached.Names {
			size += elem.CachedSize(false)
		}
	}
	// field Number *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Number.CachedSize(true)
	// field TableName vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.TableName.CachedSize(false)
	// field Definitions []*vitess.io/vitess/go/vt/sqlparser.PartitionDefinition
	{
		size += int64(cap(cached.Definitions)) * int64(8)
		for _, elem := range cached.Definitions {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *RangeCond) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field From vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.From.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field To vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.To.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Release) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	return size
}
func (cached *RenameIndex) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(80)
	}
	// field OldName vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.OldName.CachedSize(false)
	// field NewName vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.NewName.CachedSize(false)
	return size
}
func (cached *RenameTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field TablePairs []*vitess.io/vitess/go/vt/sqlparser.RenameTablePair
	{
		size += int64(cap(cached.TablePairs)) * int64(8)
		for _, elem := range cached.TablePairs {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *RenameTableName) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	return size
}
func (cached *RenameTablePair) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field FromTable vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.FromTable.CachedSize(false)
	// field ToTable vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.ToTable.CachedSize(false)
	return size
}
func (cached *RevertMigration) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field UUID string
	size += int64(len(cached.UUID))
	return size
}
func (cached *SRollback) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	return size
}
func (cached *Savepoint) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	return size
}
func (cached *Select) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(176)
	}
	// field Cache *bool
	size += int64(1)
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field SelectExprs vitess.io/vitess/go/vt/sqlparser.SelectExprs
	{
		size += int64(cap(cached.SelectExprs)) * int64(16)
		for _, elem := range cached.SelectExprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field From vitess.io/vitess/go/vt/sqlparser.TableExprs
	{
		size += int64(cap(cached.From)) * int64(16)
		for _, elem := range cached.From {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field Where *vitess.io/vitess/go/vt/sqlparser.Where
	size += cached.Where.CachedSize(true)
	// field GroupBy vitess.io/vitess/go/vt/sqlparser.GroupBy
	{
		size += int64(cap(cached.GroupBy)) * int64(16)
		for _, elem := range cached.GroupBy {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field Having *vitess.io/vitess/go/vt/sqlparser.Where
	size += cached.Having.CachedSize(true)
	// field OrderBy vitess.io/vitess/go/vt/sqlparser.OrderBy
	{
		size += int64(cap(cached.OrderBy)) * int64(8)
		for _, elem := range cached.OrderBy {
			size += elem.CachedSize(true)
		}
	}
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	// field Into *vitess.io/vitess/go/vt/sqlparser.SelectInto
	size += cached.Into.CachedSize(true)
	return size
}
func (cached *SelectInto) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(104)
	}
	// field FileName string
	size += int64(len(cached.FileName))
	// field Charset string
	size += int64(len(cached.Charset))
	// field FormatOption string
	size += int64(len(cached.FormatOption))
	// field ExportOption string
	size += int64(len(cached.ExportOption))
	// field Manifest string
	size += int64(len(cached.Manifest))
	// field Overwrite string
	size += int64(len(cached.Overwrite))
	return size
}
func (cached *Set) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field Exprs vitess.io/vitess/go/vt/sqlparser.SetExprs
	{
		size += int64(cap(cached.Exprs)) * int64(8)
		for _, elem := range cached.Exprs {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *SetExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *SetTransaction) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(72)
	}
	// field SQLNode vitess.io/vitess/go/vt/sqlparser.SQLNode
	if cc, ok := cached.SQLNode.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field Characteristics []vitess.io/vitess/go/vt/sqlparser.Characteristic
	{
		size += int64(cap(cached.Characteristics)) * int64(16)
		for _, elem := range cached.Characteristics {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	return size
}
func (cached *Show) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Internal vitess.io/vitess/go/vt/sqlparser.ShowInternal
	if cc, ok := cached.Internal.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ShowBasic) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Tbl vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Tbl.CachedSize(false)
	// field DbName vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.DbName.CachedSize(false)
	// field Filter *vitess.io/vitess/go/vt/sqlparser.ShowFilter
	size += cached.Filter.CachedSize(true)
	return size
}
func (cached *ShowCreate) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Op vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Op.CachedSize(false)
	return size
}
func (cached *ShowFilter) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Like string
	size += int64(len(cached.Like))
	// field Filter vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Filter.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ShowLegacy) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(128)
	}
	// field Extended string
	size += int64(len(cached.Extended))
	// field Type string
	size += int64(len(cached.Type))
	// field OnTable vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.OnTable.CachedSize(false)
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field ShowTablesOpt *vitess.io/vitess/go/vt/sqlparser.ShowTablesOpt
	size += cached.ShowTablesOpt.CachedSize(true)
	// field ShowCollationFilterOpt vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.ShowCollationFilterOpt.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ShowTablesOpt) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(40)
	}
	// field Full string
	size += int64(len(cached.Full))
	// field DbName string
	size += int64(len(cached.DbName))
	// field Filter *vitess.io/vitess/go/vt/sqlparser.ShowFilter
	size += cached.Filter.CachedSize(true)
	return size
}
func (cached *StarExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field TableName vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.TableName.CachedSize(false)
	return size
}
func (cached *Stream) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(72)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field SelectExpr vitess.io/vitess/go/vt/sqlparser.SelectExpr
	if cc, ok := cached.SelectExpr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	return size
}
func (cached *Subquery) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field Select vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Select.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *SubstrExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field Name *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.Name.CachedSize(true)
	// field StrVal *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.StrVal.CachedSize(true)
	// field From vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.From.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field To vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.To.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *TableAndLockType) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(17)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableExpr
	if cc, ok := cached.Table.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *TableIdent) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field v string
	size += int64(len(cached.v))
	return size
}
func (cached *TableName) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.Name.CachedSize(false)
	// field Qualifier vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.Qualifier.CachedSize(false)
	return size
}
func (cached *TableOption) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Name string
	size += int64(len(cached.Name))
	// field Value *vitess.io/vitess/go/vt/sqlparser.Literal
	size += cached.Value.CachedSize(true)
	// field String string
	size += int64(len(cached.String))
	// field Tables vitess.io/vitess/go/vt/sqlparser.TableNames
	{
		size += int64(cap(cached.Tables)) * int64(32)
		for _, elem := range cached.Tables {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *TableSpec) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(96)
	}
	// field Columns []*vitess.io/vitess/go/vt/sqlparser.ColumnDefinition
	{
		size += int64(cap(cached.Columns)) * int64(8)
		for _, elem := range cached.Columns {
			size += elem.CachedSize(true)
		}
	}
	// field Indexes []*vitess.io/vitess/go/vt/sqlparser.IndexDefinition
	{
		size += int64(cap(cached.Indexes)) * int64(8)
		for _, elem := range cached.Indexes {
			size += elem.CachedSize(true)
		}
	}
	// field Constraints []*vitess.io/vitess/go/vt/sqlparser.ConstraintDefinition
	{
		size += int64(cap(cached.Constraints)) * int64(8)
		for _, elem := range cached.Constraints {
			size += elem.CachedSize(true)
		}
	}
	// field Options vitess.io/vitess/go/vt/sqlparser.TableOptions
	{
		size += int64(cap(cached.Options)) * int64(8)
		for _, elem := range cached.Options {
			size += elem.CachedSize(true)
		}
	}
	return size
}
func (cached *TablespaceOperation) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(1)
	}
	return size
}
func (cached *TimestampFuncExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field Name string
	size += int64(len(cached.Name))
	// field Expr1 vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr1.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Expr2 vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr2.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Unit string
	size += int64(len(cached.Unit))
	return size
}
func (cached *TruncateTable) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	return size
}
func (cached *UnaryExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Union) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(73)
	}
	// field FirstStatement vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.FirstStatement.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field UnionSelects []*vitess.io/vitess/go/vt/sqlparser.UnionSelect
	{
		size += int64(cap(cached.UnionSelects)) * int64(8)
		for _, elem := range cached.UnionSelects {
			size += elem.CachedSize(true)
		}
	}
	// field OrderBy vitess.io/vitess/go/vt/sqlparser.OrderBy
	{
		size += int64(cap(cached.OrderBy)) * int64(8)
		for _, elem := range cached.OrderBy {
			size += elem.CachedSize(true)
		}
	}
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	return size
}
func (cached *UnionSelect) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Statement vitess.io/vitess/go/vt/sqlparser.SelectStatement
	if cc, ok := cached.Statement.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Update) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(120)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field TableExprs vitess.io/vitess/go/vt/sqlparser.TableExprs
	{
		size += int64(cap(cached.TableExprs)) * int64(16)
		for _, elem := range cached.TableExprs {
			if cc, ok := elem.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field Exprs vitess.io/vitess/go/vt/sqlparser.UpdateExprs
	{
		size += int64(cap(cached.Exprs)) * int64(8)
		for _, elem := range cached.Exprs {
			size += elem.CachedSize(true)
		}
	}
	// field Where *vitess.io/vitess/go/vt/sqlparser.Where
	size += cached.Where.CachedSize(true)
	// field OrderBy vitess.io/vitess/go/vt/sqlparser.OrderBy
	{
		size += int64(cap(cached.OrderBy)) * int64(8)
		for _, elem := range cached.OrderBy {
			size += elem.CachedSize(true)
		}
	}
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	return size
}
func (cached *UpdateExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Name *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.Name.CachedSize(true)
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Use) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field DBName vitess.io/vitess/go/vt/sqlparser.TableIdent
	size += cached.DBName.CachedSize(false)
	return size
}
func (cached *VStream) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(88)
	}
	// field Comments vitess.io/vitess/go/vt/sqlparser.Comments
	{
		size += int64(cap(cached.Comments)) * int64(16)
		for _, elem := range cached.Comments {
			size += int64(len(elem))
		}
	}
	// field SelectExpr vitess.io/vitess/go/vt/sqlparser.SelectExpr
	if cc, ok := cached.SelectExpr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Table vitess.io/vitess/go/vt/sqlparser.TableName
	size += cached.Table.CachedSize(false)
	// field Where *vitess.io/vitess/go/vt/sqlparser.Where
	size += cached.Where.CachedSize(true)
	// field Limit *vitess.io/vitess/go/vt/sqlparser.Limit
	size += cached.Limit.CachedSize(true)
	return size
}
func (cached *Validation) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(1)
	}
	return size
}
func (cached *ValuesFuncExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field Name *vitess.io/vitess/go/vt/sqlparser.ColName
	size += cached.Name.CachedSize(true)
	return size
}
func (cached *VindexParam) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(56)
	}
	// field Key vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Key.CachedSize(false)
	// field Val string
	size += int64(len(cached.Val))
	return size
}
func (cached *VindexSpec) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(104)
	}
	// field Name vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Name.CachedSize(false)
	// field Type vitess.io/vitess/go/vt/sqlparser.ColIdent
	size += cached.Type.CachedSize(false)
	// field Params []vitess.io/vitess/go/vt/sqlparser.VindexParam
	{
		size += int64(cap(cached.Params)) * int64(56)
		for _, elem := range cached.Params {
			size += elem.CachedSize(false)
		}
	}
	return size
}
func (cached *When) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Cond vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Cond.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Val vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Val.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *Where) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Expr vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Expr.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *XorExpr) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field Left vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Left.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field Right vitess.io/vitess/go/vt/sqlparser.Expr
	if cc, ok := cached.Right.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
