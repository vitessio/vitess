/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

// EqualsSQLNode does deep equals between the two objects.
func EqualsSQLNode(inA, inB SQLNode) bool {
	return EqualsSQLNodeS(inA, inB, DefaultEquality)
}

// EqualsSQLNodeS does deep equals between the two objects.
func EqualsSQLNodeS(inA, inB SQLNode, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AddColumns:
		b, ok := inB.(*AddColumns)
		if !ok {
			return false
		}
		return EqualsRefOfAddColumnsS(a, b, f)
	case *AddConstraintDefinition:
		b, ok := inB.(*AddConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddConstraintDefinitionS(a, b, f)
	case *AddIndexDefinition:
		b, ok := inB.(*AddIndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddIndexDefinitionS(a, b, f)
	case AlgorithmValue:
		b, ok := inB.(AlgorithmValue)
		if !ok {
			return false
		}
		return a == b
	case *AliasedExpr:
		b, ok := inB.(*AliasedExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedExprS(a, b, f)
	case *AliasedTableExpr:
		b, ok := inB.(*AliasedTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedTableExprS(a, b, f)
	case *AlterCharset:
		b, ok := inB.(*AlterCharset)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCharsetS(a, b, f)
	case *AlterCheck:
		b, ok := inB.(*AlterCheck)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCheckS(a, b, f)
	case *AlterColumn:
		b, ok := inB.(*AlterColumn)
		if !ok {
			return false
		}
		return EqualsRefOfAlterColumnS(a, b, f)
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabaseS(a, b, f)
	case *AlterIndex:
		b, ok := inB.(*AlterIndex)
		if !ok {
			return false
		}
		return EqualsRefOfAlterIndexS(a, b, f)
	case *AlterMigration:
		b, ok := inB.(*AlterMigration)
		if !ok {
			return false
		}
		return EqualsRefOfAlterMigrationS(a, b, f)
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTableS(a, b, f)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterViewS(a, b, f)
	case *AlterVschema:
		b, ok := inB.(*AlterVschema)
		if !ok {
			return false
		}
		return EqualsRefOfAlterVschemaS(a, b, f)
	case *AndExpr:
		b, ok := inB.(*AndExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAndExprS(a, b, f)
	case Argument:
		b, ok := inB.(Argument)
		if !ok {
			return false
		}
		return a == b
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExprS(a, b, f)
	case *AutoIncSpec:
		b, ok := inB.(*AutoIncSpec)
		if !ok {
			return false
		}
		return EqualsRefOfAutoIncSpecS(a, b, f)
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvgS(a, b, f)
	case *Begin:
		b, ok := inB.(*Begin)
		if !ok {
			return false
		}
		return EqualsRefOfBeginS(a, b, f)
	case *BetweenExpr:
		b, ok := inB.(*BetweenExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBetweenExprS(a, b, f)
	case *BinaryExpr:
		b, ok := inB.(*BinaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBinaryExprS(a, b, f)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAndS(a, b, f)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOrS(a, b, f)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXorS(a, b, f)
	case BoolVal:
		b, ok := inB.(BoolVal)
		if !ok {
			return false
		}
		return a == b
	case *CallProc:
		b, ok := inB.(*CallProc)
		if !ok {
			return false
		}
		return EqualsRefOfCallProcS(a, b, f)
	case *CaseExpr:
		b, ok := inB.(*CaseExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCaseExprS(a, b, f)
	case *CastExpr:
		b, ok := inB.(*CastExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCastExprS(a, b, f)
	case *ChangeColumn:
		b, ok := inB.(*ChangeColumn)
		if !ok {
			return false
		}
		return EqualsRefOfChangeColumnS(a, b, f)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExprS(a, b, f)
	case *CheckConstraintDefinition:
		b, ok := inB.(*CheckConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfCheckConstraintDefinitionS(a, b, f)
	case *ColName:
		b, ok := inB.(*ColName)
		if !ok {
			return false
		}
		return EqualsRefOfColNameS(a, b, f)
	case *CollateExpr:
		b, ok := inB.(*CollateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCollateExprS(a, b, f)
	case *ColumnDefinition:
		b, ok := inB.(*ColumnDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfColumnDefinitionS(a, b, f)
	case *ColumnType:
		b, ok := inB.(*ColumnType)
		if !ok {
			return false
		}
		return EqualsRefOfColumnTypeS(a, b, f)
	case Columns:
		b, ok := inB.(Columns)
		if !ok {
			return false
		}
		return EqualsColumnsS(a, b, f)
	case *CommentOnly:
		b, ok := inB.(*CommentOnly)
		if !ok {
			return false
		}
		return EqualsRefOfCommentOnlyS(a, b, f)
	case *Commit:
		b, ok := inB.(*Commit)
		if !ok {
			return false
		}
		return EqualsRefOfCommitS(a, b, f)
	case *CommonTableExpr:
		b, ok := inB.(*CommonTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCommonTableExprS(a, b, f)
	case *ComparisonExpr:
		b, ok := inB.(*ComparisonExpr)
		if !ok {
			return false
		}
		return EqualsRefOfComparisonExprS(a, b, f)
	case *ConstraintDefinition:
		b, ok := inB.(*ConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfConstraintDefinitionS(a, b, f)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExprS(a, b, f)
	case *ConvertType:
		b, ok := inB.(*ConvertType)
		if !ok {
			return false
		}
		return EqualsRefOfConvertTypeS(a, b, f)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExprS(a, b, f)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCountS(a, b, f)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStarS(a, b, f)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabaseS(a, b, f)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTableS(a, b, f)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateViewS(a, b, f)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExprS(a, b, f)
	case *DeallocateStmt:
		b, ok := inB.(*DeallocateStmt)
		if !ok {
			return false
		}
		return EqualsRefOfDeallocateStmtS(a, b, f)
	case *Default:
		b, ok := inB.(*Default)
		if !ok {
			return false
		}
		return EqualsRefOfDefaultS(a, b, f)
	case *Definer:
		b, ok := inB.(*Definer)
		if !ok {
			return false
		}
		return EqualsRefOfDefinerS(a, b, f)
	case *Delete:
		b, ok := inB.(*Delete)
		if !ok {
			return false
		}
		return EqualsRefOfDeleteS(a, b, f)
	case *DerivedTable:
		b, ok := inB.(*DerivedTable)
		if !ok {
			return false
		}
		return EqualsRefOfDerivedTableS(a, b, f)
	case *DropColumn:
		b, ok := inB.(*DropColumn)
		if !ok {
			return false
		}
		return EqualsRefOfDropColumnS(a, b, f)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabaseS(a, b, f)
	case *DropKey:
		b, ok := inB.(*DropKey)
		if !ok {
			return false
		}
		return EqualsRefOfDropKeyS(a, b, f)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTableS(a, b, f)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropViewS(a, b, f)
	case *ExecuteStmt:
		b, ok := inB.(*ExecuteStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExecuteStmtS(a, b, f)
	case *ExistsExpr:
		b, ok := inB.(*ExistsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExistsExprS(a, b, f)
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmtS(a, b, f)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTabS(a, b, f)
	case Exprs:
		b, ok := inB.(Exprs)
		if !ok {
			return false
		}
		return EqualsExprsS(a, b, f)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExprS(a, b, f)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExprS(a, b, f)
	case *ExtractedSubquery:
		b, ok := inB.(*ExtractedSubquery)
		if !ok {
			return false
		}
		return EqualsRefOfExtractedSubqueryS(a, b, f)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExprS(a, b, f)
	case *Flush:
		b, ok := inB.(*Flush)
		if !ok {
			return false
		}
		return EqualsRefOfFlushS(a, b, f)
	case *Force:
		b, ok := inB.(*Force)
		if !ok {
			return false
		}
		return EqualsRefOfForceS(a, b, f)
	case *ForeignKeyDefinition:
		b, ok := inB.(*ForeignKeyDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfForeignKeyDefinitionS(a, b, f)
	case *FrameClause:
		b, ok := inB.(*FrameClause)
		if !ok {
			return false
		}
		return EqualsRefOfFrameClauseS(a, b, f)
	case *FramePoint:
		b, ok := inB.(*FramePoint)
		if !ok {
			return false
		}
		return EqualsRefOfFramePointS(a, b, f)
	case *FromFirstLastClause:
		b, ok := inB.(*FromFirstLastClause)
		if !ok {
			return false
		}
		return EqualsRefOfFromFirstLastClauseS(a, b, f)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExprS(a, b, f)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExprS(a, b, f)
	case GroupBy:
		b, ok := inB.(GroupBy)
		if !ok {
			return false
		}
		return EqualsGroupByS(a, b, f)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExprS(a, b, f)
	case IdentifierCI:
		b, ok := inB.(IdentifierCI)
		if !ok {
			return false
		}
		return EqualsIdentifierCIS(a, b, f)
	case IdentifierCS:
		b, ok := inB.(IdentifierCS)
		if !ok {
			return false
		}
		return EqualsIdentifierCSS(a, b, f)
	case *IndexDefinition:
		b, ok := inB.(*IndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfIndexDefinitionS(a, b, f)
	case *IndexHint:
		b, ok := inB.(*IndexHint)
		if !ok {
			return false
		}
		return EqualsRefOfIndexHintS(a, b, f)
	case IndexHints:
		b, ok := inB.(IndexHints)
		if !ok {
			return false
		}
		return EqualsIndexHintsS(a, b, f)
	case *IndexInfo:
		b, ok := inB.(*IndexInfo)
		if !ok {
			return false
		}
		return EqualsRefOfIndexInfoS(a, b, f)
	case *Insert:
		b, ok := inB.(*Insert)
		if !ok {
			return false
		}
		return EqualsRefOfInsertS(a, b, f)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExprS(a, b, f)
	case *IntervalExpr:
		b, ok := inB.(*IntervalExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalExprS(a, b, f)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExprS(a, b, f)
	case *IntroducerExpr:
		b, ok := inB.(*IntroducerExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntroducerExprS(a, b, f)
	case *IsExpr:
		b, ok := inB.(*IsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIsExprS(a, b, f)
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExprS(a, b, f)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExprS(a, b, f)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExprS(a, b, f)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExprS(a, b, f)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExprS(a, b, f)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExprS(a, b, f)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExprS(a, b, f)
	case JSONObjectParam:
		b, ok := inB.(JSONObjectParam)
		if !ok {
			return false
		}
		return EqualsJSONObjectParamS(a, b, f)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExprS(a, b, f)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExprS(a, b, f)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExprS(a, b, f)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExprS(a, b, f)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExprS(a, b, f)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExprS(a, b, f)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExprS(a, b, f)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExprS(a, b, f)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExprS(a, b, f)
	case *JSONTableExpr:
		b, ok := inB.(*JSONTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONTableExprS(a, b, f)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExprS(a, b, f)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExprS(a, b, f)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExprS(a, b, f)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExprS(a, b, f)
	case *JoinCondition:
		b, ok := inB.(*JoinCondition)
		if !ok {
			return false
		}
		return EqualsRefOfJoinConditionS(a, b, f)
	case *JoinTableExpr:
		b, ok := inB.(*JoinTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJoinTableExprS(a, b, f)
	case *JtColumnDefinition:
		b, ok := inB.(*JtColumnDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfJtColumnDefinitionS(a, b, f)
	case *JtOnResponse:
		b, ok := inB.(*JtOnResponse)
		if !ok {
			return false
		}
		return EqualsRefOfJtOnResponseS(a, b, f)
	case *KeyState:
		b, ok := inB.(*KeyState)
		if !ok {
			return false
		}
		return EqualsRefOfKeyStateS(a, b, f)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExprS(a, b, f)
	case *Limit:
		b, ok := inB.(*Limit)
		if !ok {
			return false
		}
		return EqualsRefOfLimitS(a, b, f)
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Literal:
		b, ok := inB.(*Literal)
		if !ok {
			return false
		}
		return EqualsRefOfLiteralS(a, b, f)
	case *Load:
		b, ok := inB.(*Load)
		if !ok {
			return false
		}
		return EqualsRefOfLoadS(a, b, f)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExprS(a, b, f)
	case *LockOption:
		b, ok := inB.(*LockOption)
		if !ok {
			return false
		}
		return EqualsRefOfLockOptionS(a, b, f)
	case *LockTables:
		b, ok := inB.(*LockTables)
		if !ok {
			return false
		}
		return EqualsRefOfLockTablesS(a, b, f)
	case *LockingFunc:
		b, ok := inB.(*LockingFunc)
		if !ok {
			return false
		}
		return EqualsRefOfLockingFuncS(a, b, f)
	case MatchAction:
		b, ok := inB.(MatchAction)
		if !ok {
			return false
		}
		return a == b
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExprS(a, b, f)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMaxS(a, b, f)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExprS(a, b, f)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMinS(a, b, f)
	case *ModifyColumn:
		b, ok := inB.(*ModifyColumn)
		if !ok {
			return false
		}
		return EqualsRefOfModifyColumnS(a, b, f)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExprS(a, b, f)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindowS(a, b, f)
	case NamedWindows:
		b, ok := inB.(NamedWindows)
		if !ok {
			return false
		}
		return EqualsNamedWindowsS(a, b, f)
	case *Nextval:
		b, ok := inB.(*Nextval)
		if !ok {
			return false
		}
		return EqualsRefOfNextvalS(a, b, f)
	case *NotExpr:
		b, ok := inB.(*NotExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNotExprS(a, b, f)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExprS(a, b, f)
	case *NullTreatmentClause:
		b, ok := inB.(*NullTreatmentClause)
		if !ok {
			return false
		}
		return EqualsRefOfNullTreatmentClauseS(a, b, f)
	case *NullVal:
		b, ok := inB.(*NullVal)
		if !ok {
			return false
		}
		return EqualsRefOfNullValS(a, b, f)
	case *Offset:
		b, ok := inB.(*Offset)
		if !ok {
			return false
		}
		return EqualsRefOfOffsetS(a, b, f)
	case OnDup:
		b, ok := inB.(OnDup)
		if !ok {
			return false
		}
		return EqualsOnDupS(a, b, f)
	case *OptLike:
		b, ok := inB.(*OptLike)
		if !ok {
			return false
		}
		return EqualsRefOfOptLikeS(a, b, f)
	case *OrExpr:
		b, ok := inB.(*OrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfOrExprS(a, b, f)
	case *Order:
		b, ok := inB.(*Order)
		if !ok {
			return false
		}
		return EqualsRefOfOrderS(a, b, f)
	case OrderBy:
		b, ok := inB.(OrderBy)
		if !ok {
			return false
		}
		return EqualsOrderByS(a, b, f)
	case *OrderByOption:
		b, ok := inB.(*OrderByOption)
		if !ok {
			return false
		}
		return EqualsRefOfOrderByOptionS(a, b, f)
	case *OtherAdmin:
		b, ok := inB.(*OtherAdmin)
		if !ok {
			return false
		}
		return EqualsRefOfOtherAdminS(a, b, f)
	case *OtherRead:
		b, ok := inB.(*OtherRead)
		if !ok {
			return false
		}
		return EqualsRefOfOtherReadS(a, b, f)
	case *OverClause:
		b, ok := inB.(*OverClause)
		if !ok {
			return false
		}
		return EqualsRefOfOverClauseS(a, b, f)
	case *ParenTableExpr:
		b, ok := inB.(*ParenTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfParenTableExprS(a, b, f)
	case *ParsedComments:
		b, ok := inB.(*ParsedComments)
		if !ok {
			return false
		}
		return EqualsRefOfParsedCommentsS(a, b, f)
	case *PartitionDefinition:
		b, ok := inB.(*PartitionDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionDefinitionS(a, b, f)
	case *PartitionDefinitionOptions:
		b, ok := inB.(*PartitionDefinitionOptions)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionDefinitionOptionsS(a, b, f)
	case *PartitionEngine:
		b, ok := inB.(*PartitionEngine)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionEngineS(a, b, f)
	case *PartitionOption:
		b, ok := inB.(*PartitionOption)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionOptionS(a, b, f)
	case *PartitionSpec:
		b, ok := inB.(*PartitionSpec)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionSpecS(a, b, f)
	case *PartitionValueRange:
		b, ok := inB.(*PartitionValueRange)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionValueRangeS(a, b, f)
	case Partitions:
		b, ok := inB.(Partitions)
		if !ok {
			return false
		}
		return EqualsPartitionsS(a, b, f)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExprS(a, b, f)
	case *PrepareStmt:
		b, ok := inB.(*PrepareStmt)
		if !ok {
			return false
		}
		return EqualsRefOfPrepareStmtS(a, b, f)
	case ReferenceAction:
		b, ok := inB.(ReferenceAction)
		if !ok {
			return false
		}
		return a == b
	case *ReferenceDefinition:
		b, ok := inB.(*ReferenceDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfReferenceDefinitionS(a, b, f)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExprS(a, b, f)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExprS(a, b, f)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExprS(a, b, f)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExprS(a, b, f)
	case *Release:
		b, ok := inB.(*Release)
		if !ok {
			return false
		}
		return EqualsRefOfReleaseS(a, b, f)
	case *RenameColumn:
		b, ok := inB.(*RenameColumn)
		if !ok {
			return false
		}
		return EqualsRefOfRenameColumnS(a, b, f)
	case *RenameIndex:
		b, ok := inB.(*RenameIndex)
		if !ok {
			return false
		}
		return EqualsRefOfRenameIndexS(a, b, f)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableS(a, b, f)
	case *RenameTableName:
		b, ok := inB.(*RenameTableName)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableNameS(a, b, f)
	case *RevertMigration:
		b, ok := inB.(*RevertMigration)
		if !ok {
			return false
		}
		return EqualsRefOfRevertMigrationS(a, b, f)
	case *Rollback:
		b, ok := inB.(*Rollback)
		if !ok {
			return false
		}
		return EqualsRefOfRollbackS(a, b, f)
	case RootNode:
		b, ok := inB.(RootNode)
		if !ok {
			return false
		}
		return EqualsRootNodeS(a, b, f)
	case *SRollback:
		b, ok := inB.(*SRollback)
		if !ok {
			return false
		}
		return EqualsRefOfSRollbackS(a, b, f)
	case *Savepoint:
		b, ok := inB.(*Savepoint)
		if !ok {
			return false
		}
		return EqualsRefOfSavepointS(a, b, f)
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelectS(a, b, f)
	case SelectExprs:
		b, ok := inB.(SelectExprs)
		if !ok {
			return false
		}
		return EqualsSelectExprsS(a, b, f)
	case *SelectInto:
		b, ok := inB.(*SelectInto)
		if !ok {
			return false
		}
		return EqualsRefOfSelectIntoS(a, b, f)
	case *Set:
		b, ok := inB.(*Set)
		if !ok {
			return false
		}
		return EqualsRefOfSetS(a, b, f)
	case *SetExpr:
		b, ok := inB.(*SetExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSetExprS(a, b, f)
	case SetExprs:
		b, ok := inB.(SetExprs)
		if !ok {
			return false
		}
		return EqualsSetExprsS(a, b, f)
	case *Show:
		b, ok := inB.(*Show)
		if !ok {
			return false
		}
		return EqualsRefOfShowS(a, b, f)
	case *ShowBasic:
		b, ok := inB.(*ShowBasic)
		if !ok {
			return false
		}
		return EqualsRefOfShowBasicS(a, b, f)
	case *ShowCreate:
		b, ok := inB.(*ShowCreate)
		if !ok {
			return false
		}
		return EqualsRefOfShowCreateS(a, b, f)
	case *ShowFilter:
		b, ok := inB.(*ShowFilter)
		if !ok {
			return false
		}
		return EqualsRefOfShowFilterS(a, b, f)
	case *ShowMigrationLogs:
		b, ok := inB.(*ShowMigrationLogs)
		if !ok {
			return false
		}
		return EqualsRefOfShowMigrationLogsS(a, b, f)
	case *ShowOther:
		b, ok := inB.(*ShowOther)
		if !ok {
			return false
		}
		return EqualsRefOfShowOtherS(a, b, f)
	case *ShowThrottledApps:
		b, ok := inB.(*ShowThrottledApps)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottledAppsS(a, b, f)
	case *ShowThrottlerStatus:
		b, ok := inB.(*ShowThrottlerStatus)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottlerStatusS(a, b, f)
	case *StarExpr:
		b, ok := inB.(*StarExpr)
		if !ok {
			return false
		}
		return EqualsRefOfStarExprS(a, b, f)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStdS(a, b, f)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDevS(a, b, f)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPopS(a, b, f)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSampS(a, b, f)
	case *Stream:
		b, ok := inB.(*Stream)
		if !ok {
			return false
		}
		return EqualsRefOfStreamS(a, b, f)
	case *SubPartition:
		b, ok := inB.(*SubPartition)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartitionS(a, b, f)
	case *SubPartitionDefinition:
		b, ok := inB.(*SubPartitionDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartitionDefinitionS(a, b, f)
	case *SubPartitionDefinitionOptions:
		b, ok := inB.(*SubPartitionDefinitionOptions)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartitionDefinitionOptionsS(a, b, f)
	case SubPartitionDefinitions:
		b, ok := inB.(SubPartitionDefinitions)
		if !ok {
			return false
		}
		return EqualsSubPartitionDefinitionsS(a, b, f)
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubqueryS(a, b, f)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExprS(a, b, f)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSumS(a, b, f)
	case TableExprs:
		b, ok := inB.(TableExprs)
		if !ok {
			return false
		}
		return EqualsTableExprsS(a, b, f)
	case TableName:
		b, ok := inB.(TableName)
		if !ok {
			return false
		}
		return EqualsTableNameS(a, b, f)
	case TableNames:
		b, ok := inB.(TableNames)
		if !ok {
			return false
		}
		return EqualsTableNamesS(a, b, f)
	case TableOptions:
		b, ok := inB.(TableOptions)
		if !ok {
			return false
		}
		return EqualsTableOptionsS(a, b, f)
	case *TableSpec:
		b, ok := inB.(*TableSpec)
		if !ok {
			return false
		}
		return EqualsRefOfTableSpecS(a, b, f)
	case *TablespaceOperation:
		b, ok := inB.(*TablespaceOperation)
		if !ok {
			return false
		}
		return EqualsRefOfTablespaceOperationS(a, b, f)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExprS(a, b, f)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExprS(a, b, f)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTableS(a, b, f)
	case *UnaryExpr:
		b, ok := inB.(*UnaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUnaryExprS(a, b, f)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnionS(a, b, f)
	case *UnlockTables:
		b, ok := inB.(*UnlockTables)
		if !ok {
			return false
		}
		return EqualsRefOfUnlockTablesS(a, b, f)
	case *Update:
		b, ok := inB.(*Update)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateS(a, b, f)
	case *UpdateExpr:
		b, ok := inB.(*UpdateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateExprS(a, b, f)
	case UpdateExprs:
		b, ok := inB.(UpdateExprs)
		if !ok {
			return false
		}
		return EqualsUpdateExprsS(a, b, f)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExprS(a, b, f)
	case *Use:
		b, ok := inB.(*Use)
		if !ok {
			return false
		}
		return EqualsRefOfUseS(a, b, f)
	case *VStream:
		b, ok := inB.(*VStream)
		if !ok {
			return false
		}
		return EqualsRefOfVStreamS(a, b, f)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTupleS(a, b, f)
	case *Validation:
		b, ok := inB.(*Validation)
		if !ok {
			return false
		}
		return EqualsRefOfValidationS(a, b, f)
	case Values:
		b, ok := inB.(Values)
		if !ok {
			return false
		}
		return EqualsValuesS(a, b, f)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExprS(a, b, f)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPopS(a, b, f)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSampS(a, b, f)
	case *Variable:
		b, ok := inB.(*Variable)
		if !ok {
			return false
		}
		return EqualsRefOfVariableS(a, b, f)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVarianceS(a, b, f)
	case VindexParam:
		b, ok := inB.(VindexParam)
		if !ok {
			return false
		}
		return EqualsVindexParamS(a, b, f)
	case *VindexSpec:
		b, ok := inB.(*VindexSpec)
		if !ok {
			return false
		}
		return EqualsRefOfVindexSpecS(a, b, f)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExprS(a, b, f)
	case *When:
		b, ok := inB.(*When)
		if !ok {
			return false
		}
		return EqualsRefOfWhenS(a, b, f)
	case *Where:
		b, ok := inB.(*Where)
		if !ok {
			return false
		}
		return EqualsRefOfWhereS(a, b, f)
	case *WindowDefinition:
		b, ok := inB.(*WindowDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfWindowDefinitionS(a, b, f)
	case WindowDefinitions:
		b, ok := inB.(WindowDefinitions)
		if !ok {
			return false
		}
		return EqualsWindowDefinitionsS(a, b, f)
	case *WindowSpecification:
		b, ok := inB.(*WindowSpecification)
		if !ok {
			return false
		}
		return EqualsRefOfWindowSpecificationS(a, b, f)
	case *With:
		b, ok := inB.(*With)
		if !ok {
			return false
		}
		return EqualsRefOfWithS(a, b, f)
	case *XorExpr:
		b, ok := inB.(*XorExpr)
		if !ok {
			return false
		}
		return EqualsRefOfXorExprS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsRefOfAddColumns does deep equals between the two objects.
func EqualsRefOfAddColumns(a, b *AddColumns) bool {
	return EqualsRefOfAddColumnsS(a, b, DefaultEquality)
}

// EqualsRefOfAddColumnsS does deep equals between the two objects.
func EqualsRefOfAddColumnsS(a, b *AddColumns, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsSliceOfRefOfColumnDefinitionS(a.Columns, b.Columns, f) &&
		EqualsRefOfColNameS(a.After, b.After, f)
}

// EqualsRefOfAddConstraintDefinition does deep equals between the two objects.
func EqualsRefOfAddConstraintDefinition(a, b *AddConstraintDefinition) bool {
	return EqualsRefOfAddConstraintDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfAddConstraintDefinitionS does deep equals between the two objects.
func EqualsRefOfAddConstraintDefinitionS(a, b *AddConstraintDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfConstraintDefinitionS(a.ConstraintDefinition, b.ConstraintDefinition, f)
}

// EqualsRefOfAddIndexDefinition does deep equals between the two objects.
func EqualsRefOfAddIndexDefinition(a, b *AddIndexDefinition) bool {
	return EqualsRefOfAddIndexDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfAddIndexDefinitionS does deep equals between the two objects.
func EqualsRefOfAddIndexDefinitionS(a, b *AddIndexDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfIndexDefinitionS(a.IndexDefinition, b.IndexDefinition, f)
}

// EqualsRefOfAliasedExpr does deep equals between the two objects.
func EqualsRefOfAliasedExpr(a, b *AliasedExpr) bool {
	return EqualsRefOfAliasedExprS(a, b, DefaultEquality)
}

// EqualsRefOfAliasedExprS does deep equals between the two objects.
func EqualsRefOfAliasedExprS(a, b *AliasedExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsIdentifierCIS(a.As, b.As, f)
}

// EqualsRefOfAliasedTableExpr does deep equals between the two objects.
func EqualsRefOfAliasedTableExpr(a, b *AliasedTableExpr) bool {
	return EqualsRefOfAliasedTableExprS(a, b, DefaultEquality)
}

// EqualsRefOfAliasedTableExprS does deep equals between the two objects.
func EqualsRefOfAliasedTableExprS(a, b *AliasedTableExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSimpleTableExprS(a.Expr, b.Expr, f) &&
		EqualsPartitionsS(a.Partitions, b.Partitions, f) &&
		EqualsIdentifierCSS(a.As, b.As, f) &&
		EqualsIndexHintsS(a.Hints, b.Hints, f) &&
		EqualsColumnsS(a.Columns, b.Columns, f)
}

// EqualsRefOfAlterCharset does deep equals between the two objects.
func EqualsRefOfAlterCharset(a, b *AlterCharset) bool {
	return EqualsRefOfAlterCharsetS(a, b, DefaultEquality)
}

// EqualsRefOfAlterCharsetS does deep equals between the two objects.
func EqualsRefOfAlterCharsetS(a, b *AlterCharset, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.CharacterSet == b.CharacterSet &&
		a.Collate == b.Collate
}

// EqualsRefOfAlterCheck does deep equals between the two objects.
func EqualsRefOfAlterCheck(a, b *AlterCheck) bool {
	return EqualsRefOfAlterCheckS(a, b, DefaultEquality)
}

// EqualsRefOfAlterCheckS does deep equals between the two objects.
func EqualsRefOfAlterCheckS(a, b *AlterCheck, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enforced == b.Enforced &&
		EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfAlterColumn does deep equals between the two objects.
func EqualsRefOfAlterColumn(a, b *AlterColumn) bool {
	return EqualsRefOfAlterColumnS(a, b, DefaultEquality)
}

// EqualsRefOfAlterColumnS does deep equals between the two objects.
func EqualsRefOfAlterColumnS(a, b *AlterColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.DropDefault == b.DropDefault &&
		EqualsRefOfColNameS(a.Column, b.Column, f) &&
		EqualsExprS(a.DefaultVal, b.DefaultVal, f) &&
		EqualsRefOfBoolS(a.Invisible, b.Invisible, f)
}

// EqualsRefOfAlterDatabase does deep equals between the two objects.
func EqualsRefOfAlterDatabase(a, b *AlterDatabase) bool {
	return EqualsRefOfAlterDatabaseS(a, b, DefaultEquality)
}

// EqualsRefOfAlterDatabaseS does deep equals between the two objects.
func EqualsRefOfAlterDatabaseS(a, b *AlterDatabase, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UpdateDataDirectory == b.UpdateDataDirectory &&
		a.FullyParsed == b.FullyParsed &&
		EqualsIdentifierCSS(a.DBName, b.DBName, f) &&
		EqualsSliceOfDatabaseOptionS(a.AlterOptions, b.AlterOptions, f)
}

// EqualsRefOfAlterIndex does deep equals between the two objects.
func EqualsRefOfAlterIndex(a, b *AlterIndex) bool {
	return EqualsRefOfAlterIndexS(a, b, DefaultEquality)
}

// EqualsRefOfAlterIndexS does deep equals between the two objects.
func EqualsRefOfAlterIndexS(a, b *AlterIndex, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Invisible == b.Invisible &&
		EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfAlterMigration does deep equals between the two objects.
func EqualsRefOfAlterMigration(a, b *AlterMigration) bool {
	return EqualsRefOfAlterMigrationS(a, b, DefaultEquality)
}

// EqualsRefOfAlterMigrationS does deep equals between the two objects.
func EqualsRefOfAlterMigrationS(a, b *AlterMigration, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		a.Expire == b.Expire &&
		a.Shards == b.Shards &&
		a.Type == b.Type &&
		EqualsRefOfLiteralS(a.Ratio, b.Ratio, f)
}

// EqualsRefOfAlterTable does deep equals between the two objects.
func EqualsRefOfAlterTable(a, b *AlterTable) bool {
	return EqualsRefOfAlterTableS(a, b, DefaultEquality)
}

// EqualsRefOfAlterTableS does deep equals between the two objects.
func EqualsRefOfAlterTableS(a, b *AlterTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.FullyParsed == b.FullyParsed &&
		EqualsTableNameS(a.Table, b.Table, f) &&
		EqualsSliceOfAlterOptionS(a.AlterOptions, b.AlterOptions, f) &&
		EqualsRefOfPartitionSpecS(a.PartitionSpec, b.PartitionSpec, f) &&
		EqualsRefOfPartitionOptionS(a.PartitionOption, b.PartitionOption, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfAlterView does deep equals between the two objects.
func EqualsRefOfAlterView(a, b *AlterView) bool {
	return EqualsRefOfAlterViewS(a, b, DefaultEquality)
}

// EqualsRefOfAlterViewS does deep equals between the two objects.
func EqualsRefOfAlterViewS(a, b *AlterView, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Algorithm == b.Algorithm &&
		a.Security == b.Security &&
		a.CheckOption == b.CheckOption &&
		EqualsTableNameS(a.ViewName, b.ViewName, f) &&
		EqualsRefOfDefinerS(a.Definer, b.Definer, f) &&
		EqualsColumnsS(a.Columns, b.Columns, f) &&
		EqualsSelectStatementS(a.Select, b.Select, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfAlterVschema does deep equals between the two objects.
func EqualsRefOfAlterVschema(a, b *AlterVschema) bool {
	return EqualsRefOfAlterVschemaS(a, b, DefaultEquality)
}

// EqualsRefOfAlterVschemaS does deep equals between the two objects.
func EqualsRefOfAlterVschemaS(a, b *AlterVschema, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Action == b.Action &&
		EqualsTableNameS(a.Table, b.Table, f) &&
		EqualsRefOfVindexSpecS(a.VindexSpec, b.VindexSpec, f) &&
		EqualsSliceOfIdentifierCIS(a.VindexCols, b.VindexCols, f) &&
		EqualsRefOfAutoIncSpecS(a.AutoIncSpec, b.AutoIncSpec, f)
}

// EqualsRefOfAndExpr does deep equals between the two objects.
func EqualsRefOfAndExpr(a, b *AndExpr) bool {
	return EqualsRefOfAndExprS(a, b, DefaultEquality)
}

// EqualsRefOfAndExprS does deep equals between the two objects.
func EqualsRefOfAndExprS(a, b *AndExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.Right, b.Right, f)
}

// EqualsRefOfArgumentLessWindowExpr does deep equals between the two objects.
func EqualsRefOfArgumentLessWindowExpr(a, b *ArgumentLessWindowExpr) bool {
	return EqualsRefOfArgumentLessWindowExprS(a, b, DefaultEquality)
}

// EqualsRefOfArgumentLessWindowExprS does deep equals between the two objects.
func EqualsRefOfArgumentLessWindowExprS(a, b *ArgumentLessWindowExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfOverClauseS(a.OverClause, b.OverClause, f)
}

// EqualsRefOfAutoIncSpec does deep equals between the two objects.
func EqualsRefOfAutoIncSpec(a, b *AutoIncSpec) bool {
	return EqualsRefOfAutoIncSpecS(a, b, DefaultEquality)
}

// EqualsRefOfAutoIncSpecS does deep equals between the two objects.
func EqualsRefOfAutoIncSpecS(a, b *AutoIncSpec, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Column, b.Column, f) &&
		EqualsTableNameS(a.Sequence, b.Sequence, f)
}

// EqualsRefOfAvg does deep equals between the two objects.
func EqualsRefOfAvg(a, b *Avg) bool {
	return EqualsRefOfAvgS(a, b, DefaultEquality)
}

// EqualsRefOfAvgS does deep equals between the two objects.
func EqualsRefOfAvgS(a, b *Avg, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfBegin does deep equals between the two objects.
func EqualsRefOfBegin(a, b *Begin) bool {
	return EqualsRefOfBeginS(a, b, DefaultEquality)
}

// EqualsRefOfBeginS does deep equals between the two objects.
func EqualsRefOfBeginS(a, b *Begin, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfTxAccessModeS(a.TxAccessModes, b.TxAccessModes, f)
}

// EqualsRefOfBetweenExpr does deep equals between the two objects.
func EqualsRefOfBetweenExpr(a, b *BetweenExpr) bool {
	return EqualsRefOfBetweenExprS(a, b, DefaultEquality)
}

// EqualsRefOfBetweenExprS does deep equals between the two objects.
func EqualsRefOfBetweenExprS(a, b *BetweenExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsBetween == b.IsBetween &&
		EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.From, b.From, f) &&
		EqualsExprS(a.To, b.To, f)
}

// EqualsRefOfBinaryExpr does deep equals between the two objects.
func EqualsRefOfBinaryExpr(a, b *BinaryExpr) bool {
	return EqualsRefOfBinaryExprS(a, b, DefaultEquality)
}

// EqualsRefOfBinaryExprS does deep equals between the two objects.
func EqualsRefOfBinaryExprS(a, b *BinaryExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.Right, b.Right, f)
}

// EqualsRefOfBitAnd does deep equals between the two objects.
func EqualsRefOfBitAnd(a, b *BitAnd) bool {
	return EqualsRefOfBitAndS(a, b, DefaultEquality)
}

// EqualsRefOfBitAndS does deep equals between the two objects.
func EqualsRefOfBitAndS(a, b *BitAnd, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfBitOr does deep equals between the two objects.
func EqualsRefOfBitOr(a, b *BitOr) bool {
	return EqualsRefOfBitOrS(a, b, DefaultEquality)
}

// EqualsRefOfBitOrS does deep equals between the two objects.
func EqualsRefOfBitOrS(a, b *BitOr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfBitXor does deep equals between the two objects.
func EqualsRefOfBitXor(a, b *BitXor) bool {
	return EqualsRefOfBitXorS(a, b, DefaultEquality)
}

// EqualsRefOfBitXorS does deep equals between the two objects.
func EqualsRefOfBitXorS(a, b *BitXor, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfCallProc does deep equals between the two objects.
func EqualsRefOfCallProc(a, b *CallProc) bool {
	return EqualsRefOfCallProcS(a, b, DefaultEquality)
}

// EqualsRefOfCallProcS does deep equals between the two objects.
func EqualsRefOfCallProcS(a, b *CallProc, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.Name, b.Name, f) &&
		EqualsExprsS(a.Params, b.Params, f)
}

// EqualsRefOfCaseExpr does deep equals between the two objects.
func EqualsRefOfCaseExpr(a, b *CaseExpr) bool {
	return EqualsRefOfCaseExprS(a, b, DefaultEquality)
}

// EqualsRefOfCaseExprS does deep equals between the two objects.
func EqualsRefOfCaseExprS(a, b *CaseExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsSliceOfRefOfWhenS(a.Whens, b.Whens, f) &&
		EqualsExprS(a.Else, b.Else, f)
}

// EqualsRefOfCastExpr does deep equals between the two objects.
func EqualsRefOfCastExpr(a, b *CastExpr) bool {
	return EqualsRefOfCastExprS(a, b, DefaultEquality)
}

// EqualsRefOfCastExprS does deep equals between the two objects.
func EqualsRefOfCastExprS(a, b *CastExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Array == b.Array &&
		EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsRefOfConvertTypeS(a.Type, b.Type, f)
}

// EqualsRefOfChangeColumn does deep equals between the two objects.
func EqualsRefOfChangeColumn(a, b *ChangeColumn) bool {
	return EqualsRefOfChangeColumnS(a, b, DefaultEquality)
}

// EqualsRefOfChangeColumnS does deep equals between the two objects.
func EqualsRefOfChangeColumnS(a, b *ChangeColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsRefOfColNameS(a.OldColumn, b.OldColumn, f) &&
		EqualsRefOfColumnDefinitionS(a.NewColDefinition, b.NewColDefinition, f) &&
		EqualsRefOfColNameS(a.After, b.After, f)
}

// EqualsRefOfCharExpr does deep equals between the two objects.
func EqualsRefOfCharExpr(a, b *CharExpr) bool {
	return EqualsRefOfCharExprS(a, b, DefaultEquality)
}

// EqualsRefOfCharExprS does deep equals between the two objects.
func EqualsRefOfCharExprS(a, b *CharExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Charset == b.Charset &&
		EqualsExprsS(a.Exprs, b.Exprs, f)
}

// EqualsRefOfCheckConstraintDefinition does deep equals between the two objects.
func EqualsRefOfCheckConstraintDefinition(a, b *CheckConstraintDefinition) bool {
	return EqualsRefOfCheckConstraintDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfCheckConstraintDefinitionS does deep equals between the two objects.
func EqualsRefOfCheckConstraintDefinitionS(a, b *CheckConstraintDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enforced == b.Enforced &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfColName does deep equals between the two objects.
func EqualsRefOfColName(a, b *ColName) bool {
	return EqualsRefOfColNameS(a, b, DefaultEquality)
}

// EqualsRefOfColNameS does deep equals between the two objects.
func EqualsRefOfColNameS(a, b *ColName, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsTableNameS(a.Qualifier, b.Qualifier, f)
}

// EqualsRefOfCollateExpr does deep equals between the two objects.
func EqualsRefOfCollateExpr(a, b *CollateExpr) bool {
	return EqualsRefOfCollateExprS(a, b, DefaultEquality)
}

// EqualsRefOfCollateExprS does deep equals between the two objects.
func EqualsRefOfCollateExprS(a, b *CollateExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Collation == b.Collation &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfColumnDefinition does deep equals between the two objects.
func EqualsRefOfColumnDefinition(a, b *ColumnDefinition) bool {
	return EqualsRefOfColumnDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfColumnDefinitionS does deep equals between the two objects.
func EqualsRefOfColumnDefinitionS(a, b *ColumnDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsColumnTypeS(a.Type, b.Type, f)
}

// EqualsRefOfColumnType does deep equals between the two objects.
func EqualsRefOfColumnType(a, b *ColumnType) bool {
	return EqualsRefOfColumnTypeS(a, b, DefaultEquality)
}

// EqualsRefOfColumnTypeS does deep equals between the two objects.
func EqualsRefOfColumnTypeS(a, b *ColumnType, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.Unsigned == b.Unsigned &&
		a.Zerofill == b.Zerofill &&
		EqualsRefOfColumnTypeOptionsS(a.Options, b.Options, f) &&
		EqualsRefOfLiteralS(a.Length, b.Length, f) &&
		EqualsRefOfLiteralS(a.Scale, b.Scale, f) &&
		EqualsColumnCharsetS(a.Charset, b.Charset, f) &&
		EqualsSliceOfStringS(a.EnumValues, b.EnumValues, f)
}

// EqualsColumns does deep equals between the two objects.
func EqualsColumns(a, b Columns) bool {
	return EqualsColumnsS(a, b, DefaultEquality)
}

// EqualsColumnsS does deep equals between the two objects.
func EqualsColumnsS(a, b Columns, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCIS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfCommentOnly does deep equals between the two objects.
func EqualsRefOfCommentOnly(a, b *CommentOnly) bool {
	return EqualsRefOfCommentOnlyS(a, b, DefaultEquality)
}

// EqualsRefOfCommentOnlyS does deep equals between the two objects.
func EqualsRefOfCommentOnlyS(a, b *CommentOnly, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfStringS(a.Comments, b.Comments, f)
}

// EqualsRefOfCommit does deep equals between the two objects.
func EqualsRefOfCommit(a, b *Commit) bool {
	return EqualsRefOfCommitS(a, b, DefaultEquality)
}

// EqualsRefOfCommitS does deep equals between the two objects.
func EqualsRefOfCommitS(a, b *Commit, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfCommonTableExpr does deep equals between the two objects.
func EqualsRefOfCommonTableExpr(a, b *CommonTableExpr) bool {
	return EqualsRefOfCommonTableExprS(a, b, DefaultEquality)
}

// EqualsRefOfCommonTableExprS does deep equals between the two objects.
func EqualsRefOfCommonTableExprS(a, b *CommonTableExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCSS(a.ID, b.ID, f) &&
		EqualsColumnsS(a.Columns, b.Columns, f) &&
		EqualsRefOfSubqueryS(a.Subquery, b.Subquery, f)
}

// EqualsRefOfComparisonExpr does deep equals between the two objects.
func EqualsRefOfComparisonExpr(a, b *ComparisonExpr) bool {
	return EqualsRefOfComparisonExprS(a, b, DefaultEquality)
}

// EqualsRefOfComparisonExprS does deep equals between the two objects.
func EqualsRefOfComparisonExprS(a, b *ComparisonExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.Right, b.Right, f) &&
		EqualsExprS(a.Escape, b.Escape, f)
}

// EqualsRefOfConstraintDefinition does deep equals between the two objects.
func EqualsRefOfConstraintDefinition(a, b *ConstraintDefinition) bool {
	return EqualsRefOfConstraintDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfConstraintDefinitionS does deep equals between the two objects.
func EqualsRefOfConstraintDefinitionS(a, b *ConstraintDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsConstraintInfoS(a.Details, b.Details, f)
}

// EqualsRefOfConvertExpr does deep equals between the two objects.
func EqualsRefOfConvertExpr(a, b *ConvertExpr) bool {
	return EqualsRefOfConvertExprS(a, b, DefaultEquality)
}

// EqualsRefOfConvertExprS does deep equals between the two objects.
func EqualsRefOfConvertExprS(a, b *ConvertExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsRefOfConvertTypeS(a.Type, b.Type, f)
}

// EqualsRefOfConvertType does deep equals between the two objects.
func EqualsRefOfConvertType(a, b *ConvertType) bool {
	return EqualsRefOfConvertTypeS(a, b, DefaultEquality)
}

// EqualsRefOfConvertTypeS does deep equals between the two objects.
func EqualsRefOfConvertTypeS(a, b *ConvertType, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfLiteralS(a.Length, b.Length, f) &&
		EqualsRefOfLiteralS(a.Scale, b.Scale, f) &&
		EqualsColumnCharsetS(a.Charset, b.Charset, f)
}

// EqualsRefOfConvertUsingExpr does deep equals between the two objects.
func EqualsRefOfConvertUsingExpr(a, b *ConvertUsingExpr) bool {
	return EqualsRefOfConvertUsingExprS(a, b, DefaultEquality)
}

// EqualsRefOfConvertUsingExprS does deep equals between the two objects.
func EqualsRefOfConvertUsingExprS(a, b *ConvertUsingExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfCount does deep equals between the two objects.
func EqualsRefOfCount(a, b *Count) bool {
	return EqualsRefOfCountS(a, b, DefaultEquality)
}

// EqualsRefOfCountS does deep equals between the two objects.
func EqualsRefOfCountS(a, b *Count, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprsS(a.Args, b.Args, f)
}

// EqualsRefOfCountStar does deep equals between the two objects.
func EqualsRefOfCountStar(a, b *CountStar) bool {
	return EqualsRefOfCountStarS(a, b, DefaultEquality)
}

// EqualsRefOfCountStarS does deep equals between the two objects.
func EqualsRefOfCountStarS(a, b *CountStar, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfCreateDatabase does deep equals between the two objects.
func EqualsRefOfCreateDatabase(a, b *CreateDatabase) bool {
	return EqualsRefOfCreateDatabaseS(a, b, DefaultEquality)
}

// EqualsRefOfCreateDatabaseS does deep equals between the two objects.
func EqualsRefOfCreateDatabaseS(a, b *CreateDatabase, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfNotExists == b.IfNotExists &&
		a.FullyParsed == b.FullyParsed &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsIdentifierCSS(a.DBName, b.DBName, f) &&
		EqualsSliceOfDatabaseOptionS(a.CreateOptions, b.CreateOptions, f)
}

// EqualsRefOfCreateTable does deep equals between the two objects.
func EqualsRefOfCreateTable(a, b *CreateTable) bool {
	return EqualsRefOfCreateTableS(a, b, DefaultEquality)
}

// EqualsRefOfCreateTableS does deep equals between the two objects.
func EqualsRefOfCreateTableS(a, b *CreateTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Temp == b.Temp &&
		a.IfNotExists == b.IfNotExists &&
		a.FullyParsed == b.FullyParsed &&
		EqualsTableNameS(a.Table, b.Table, f) &&
		EqualsRefOfTableSpecS(a.TableSpec, b.TableSpec, f) &&
		EqualsRefOfOptLikeS(a.OptLike, b.OptLike, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfCreateView does deep equals between the two objects.
func EqualsRefOfCreateView(a, b *CreateView) bool {
	return EqualsRefOfCreateViewS(a, b, DefaultEquality)
}

// EqualsRefOfCreateViewS does deep equals between the two objects.
func EqualsRefOfCreateViewS(a, b *CreateView, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Algorithm == b.Algorithm &&
		a.Security == b.Security &&
		a.CheckOption == b.CheckOption &&
		a.IsReplace == b.IsReplace &&
		EqualsTableNameS(a.ViewName, b.ViewName, f) &&
		EqualsRefOfDefinerS(a.Definer, b.Definer, f) &&
		EqualsColumnsS(a.Columns, b.Columns, f) &&
		EqualsSelectStatementS(a.Select, b.Select, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfCurTimeFuncExpr does deep equals between the two objects.
func EqualsRefOfCurTimeFuncExpr(a, b *CurTimeFuncExpr) bool {
	return EqualsRefOfCurTimeFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfCurTimeFuncExprS does deep equals between the two objects.
func EqualsRefOfCurTimeFuncExprS(a, b *CurTimeFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsExprS(a.Fsp, b.Fsp, f)
}

// EqualsRefOfDeallocateStmt does deep equals between the two objects.
func EqualsRefOfDeallocateStmt(a, b *DeallocateStmt) bool {
	return EqualsRefOfDeallocateStmtS(a, b, DefaultEquality)
}

// EqualsRefOfDeallocateStmtS does deep equals between the two objects.
func EqualsRefOfDeallocateStmtS(a, b *DeallocateStmt, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfDefault does deep equals between the two objects.
func EqualsRefOfDefault(a, b *Default) bool {
	return EqualsRefOfDefaultS(a, b, DefaultEquality)
}

// EqualsRefOfDefaultS does deep equals between the two objects.
func EqualsRefOfDefaultS(a, b *Default, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.ColName == b.ColName
}

// EqualsRefOfDefiner does deep equals between the two objects.
func EqualsRefOfDefiner(a, b *Definer) bool {
	return EqualsRefOfDefinerS(a, b, DefaultEquality)
}

// EqualsRefOfDefinerS does deep equals between the two objects.
func EqualsRefOfDefinerS(a, b *Definer, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Address == b.Address
}

// EqualsRefOfDelete does deep equals between the two objects.
func EqualsRefOfDelete(a, b *Delete) bool {
	return EqualsRefOfDeleteS(a, b, DefaultEquality)
}

// EqualsRefOfDeleteS does deep equals between the two objects.
func EqualsRefOfDeleteS(a, b *Delete, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfWithS(a.With, b.With, f) &&
		a.Ignore == b.Ignore &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsTableNamesS(a.Targets, b.Targets, f) &&
		EqualsTableExprsS(a.TableExprs, b.TableExprs, f) &&
		EqualsPartitionsS(a.Partitions, b.Partitions, f) &&
		EqualsRefOfWhereS(a.Where, b.Where, f) &&
		EqualsOrderByS(a.OrderBy, b.OrderBy, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f)
}

// EqualsRefOfDerivedTable does deep equals between the two objects.
func EqualsRefOfDerivedTable(a, b *DerivedTable) bool {
	return EqualsRefOfDerivedTableS(a, b, DefaultEquality)
}

// EqualsRefOfDerivedTableS does deep equals between the two objects.
func EqualsRefOfDerivedTableS(a, b *DerivedTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Lateral == b.Lateral &&
		EqualsSelectStatementS(a.Select, b.Select, f)
}

// EqualsRefOfDropColumn does deep equals between the two objects.
func EqualsRefOfDropColumn(a, b *DropColumn) bool {
	return EqualsRefOfDropColumnS(a, b, DefaultEquality)
}

// EqualsRefOfDropColumnS does deep equals between the two objects.
func EqualsRefOfDropColumnS(a, b *DropColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColNameS(a.Name, b.Name, f)
}

// EqualsRefOfDropDatabase does deep equals between the two objects.
func EqualsRefOfDropDatabase(a, b *DropDatabase) bool {
	return EqualsRefOfDropDatabaseS(a, b, DefaultEquality)
}

// EqualsRefOfDropDatabaseS does deep equals between the two objects.
func EqualsRefOfDropDatabaseS(a, b *DropDatabase, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfExists == b.IfExists &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsIdentifierCSS(a.DBName, b.DBName, f)
}

// EqualsRefOfDropKey does deep equals between the two objects.
func EqualsRefOfDropKey(a, b *DropKey) bool {
	return EqualsRefOfDropKeyS(a, b, DefaultEquality)
}

// EqualsRefOfDropKeyS does deep equals between the two objects.
func EqualsRefOfDropKeyS(a, b *DropKey, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfDropTable does deep equals between the two objects.
func EqualsRefOfDropTable(a, b *DropTable) bool {
	return EqualsRefOfDropTableS(a, b, DefaultEquality)
}

// EqualsRefOfDropTableS does deep equals between the two objects.
func EqualsRefOfDropTableS(a, b *DropTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Temp == b.Temp &&
		a.IfExists == b.IfExists &&
		EqualsTableNamesS(a.FromTables, b.FromTables, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfDropView does deep equals between the two objects.
func EqualsRefOfDropView(a, b *DropView) bool {
	return EqualsRefOfDropViewS(a, b, DefaultEquality)
}

// EqualsRefOfDropViewS does deep equals between the two objects.
func EqualsRefOfDropViewS(a, b *DropView, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfExists == b.IfExists &&
		EqualsTableNamesS(a.FromTables, b.FromTables, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfExecuteStmt does deep equals between the two objects.
func EqualsRefOfExecuteStmt(a, b *ExecuteStmt) bool {
	return EqualsRefOfExecuteStmtS(a, b, DefaultEquality)
}

// EqualsRefOfExecuteStmtS does deep equals between the two objects.
func EqualsRefOfExecuteStmtS(a, b *ExecuteStmt, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsSliceOfRefOfVariableS(a.Arguments, b.Arguments, f)
}

// EqualsRefOfExistsExpr does deep equals between the two objects.
func EqualsRefOfExistsExpr(a, b *ExistsExpr) bool {
	return EqualsRefOfExistsExprS(a, b, DefaultEquality)
}

// EqualsRefOfExistsExprS does deep equals between the two objects.
func EqualsRefOfExistsExprS(a, b *ExistsExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfSubqueryS(a.Subquery, b.Subquery, f)
}

// EqualsRefOfExplainStmt does deep equals between the two objects.
func EqualsRefOfExplainStmt(a, b *ExplainStmt) bool {
	return EqualsRefOfExplainStmtS(a, b, DefaultEquality)
}

// EqualsRefOfExplainStmtS does deep equals between the two objects.
func EqualsRefOfExplainStmtS(a, b *ExplainStmt, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsStatementS(a.Statement, b.Statement, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfExplainTab does deep equals between the two objects.
func EqualsRefOfExplainTab(a, b *ExplainTab) bool {
	return EqualsRefOfExplainTabS(a, b, DefaultEquality)
}

// EqualsRefOfExplainTabS does deep equals between the two objects.
func EqualsRefOfExplainTabS(a, b *ExplainTab, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Wild == b.Wild &&
		EqualsTableNameS(a.Table, b.Table, f)
}

// EqualsExprs does deep equals between the two objects.
func EqualsExprs(a, b Exprs) bool {
	return EqualsExprsS(a, b, DefaultEquality)
}

// EqualsExprsS does deep equals between the two objects.
func EqualsExprsS(a, b Exprs, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfExtractFuncExpr does deep equals between the two objects.
func EqualsRefOfExtractFuncExpr(a, b *ExtractFuncExpr) bool {
	return EqualsRefOfExtractFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfExtractFuncExprS does deep equals between the two objects.
func EqualsRefOfExtractFuncExprS(a, b *ExtractFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IntervalTypes == b.IntervalTypes &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfExtractValueExpr does deep equals between the two objects.
func EqualsRefOfExtractValueExpr(a, b *ExtractValueExpr) bool {
	return EqualsRefOfExtractValueExprS(a, b, DefaultEquality)
}

// EqualsRefOfExtractValueExprS does deep equals between the two objects.
func EqualsRefOfExtractValueExprS(a, b *ExtractValueExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Fragment, b.Fragment, f) &&
		EqualsExprS(a.XPathExpr, b.XPathExpr, f)
}

// EqualsRefOfExtractedSubquery does deep equals between the two objects.
func EqualsRefOfExtractedSubquery(a, b *ExtractedSubquery) bool {
	return EqualsRefOfExtractedSubqueryS(a, b, DefaultEquality)
}

// EqualsRefOfExtractedSubqueryS does deep equals between the two objects.
func EqualsRefOfExtractedSubqueryS(a, b *ExtractedSubquery, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.OpCode == b.OpCode &&
		a.NeedsRewrite == b.NeedsRewrite &&
		a.hasValuesArg == b.hasValuesArg &&
		a.argName == b.argName &&
		EqualsExprS(a.Original, b.Original, f) &&
		EqualsRefOfSubqueryS(a.Subquery, b.Subquery, f) &&
		EqualsExprS(a.OtherSide, b.OtherSide, f) &&
		EqualsExprS(a.alternative, b.alternative, f)
}

// EqualsRefOfFirstOrLastValueExpr does deep equals between the two objects.
func EqualsRefOfFirstOrLastValueExpr(a, b *FirstOrLastValueExpr) bool {
	return EqualsRefOfFirstOrLastValueExprS(a, b, DefaultEquality)
}

// EqualsRefOfFirstOrLastValueExprS does deep equals between the two objects.
func EqualsRefOfFirstOrLastValueExprS(a, b *FirstOrLastValueExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsRefOfNullTreatmentClauseS(a.NullTreatmentClause, b.NullTreatmentClause, f) &&
		EqualsRefOfOverClauseS(a.OverClause, b.OverClause, f)
}

// EqualsRefOfFlush does deep equals between the two objects.
func EqualsRefOfFlush(a, b *Flush) bool {
	return EqualsRefOfFlushS(a, b, DefaultEquality)
}

// EqualsRefOfFlushS does deep equals between the two objects.
func EqualsRefOfFlushS(a, b *Flush, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLocal == b.IsLocal &&
		a.WithLock == b.WithLock &&
		a.ForExport == b.ForExport &&
		EqualsSliceOfStringS(a.FlushOptions, b.FlushOptions, f) &&
		EqualsTableNamesS(a.TableNames, b.TableNames, f)
}

// EqualsRefOfForce does deep equals between the two objects.
func EqualsRefOfForce(a, b *Force) bool {
	return EqualsRefOfForceS(a, b, DefaultEquality)
}

// EqualsRefOfForceS does deep equals between the two objects.
func EqualsRefOfForceS(a, b *Force, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfForeignKeyDefinition does deep equals between the two objects.
func EqualsRefOfForeignKeyDefinition(a, b *ForeignKeyDefinition) bool {
	return EqualsRefOfForeignKeyDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfForeignKeyDefinitionS does deep equals between the two objects.
func EqualsRefOfForeignKeyDefinitionS(a, b *ForeignKeyDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsColumnsS(a.Source, b.Source, f) &&
		EqualsIdentifierCIS(a.IndexName, b.IndexName, f) &&
		EqualsRefOfReferenceDefinitionS(a.ReferenceDefinition, b.ReferenceDefinition, f)
}

// EqualsRefOfFrameClause does deep equals between the two objects.
func EqualsRefOfFrameClause(a, b *FrameClause) bool {
	return EqualsRefOfFrameClauseS(a, b, DefaultEquality)
}

// EqualsRefOfFrameClauseS does deep equals between the two objects.
func EqualsRefOfFrameClauseS(a, b *FrameClause, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Unit == b.Unit &&
		EqualsRefOfFramePointS(a.Start, b.Start, f) &&
		EqualsRefOfFramePointS(a.End, b.End, f)
}

// EqualsRefOfFramePoint does deep equals between the two objects.
func EqualsRefOfFramePoint(a, b *FramePoint) bool {
	return EqualsRefOfFramePointS(a, b, DefaultEquality)
}

// EqualsRefOfFramePointS does deep equals between the two objects.
func EqualsRefOfFramePointS(a, b *FramePoint, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfFromFirstLastClause does deep equals between the two objects.
func EqualsRefOfFromFirstLastClause(a, b *FromFirstLastClause) bool {
	return EqualsRefOfFromFirstLastClauseS(a, b, DefaultEquality)
}

// EqualsRefOfFromFirstLastClauseS does deep equals between the two objects.
func EqualsRefOfFromFirstLastClauseS(a, b *FromFirstLastClause, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfFuncExpr does deep equals between the two objects.
func EqualsRefOfFuncExpr(a, b *FuncExpr) bool {
	return EqualsRefOfFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfFuncExprS does deep equals between the two objects.
func EqualsRefOfFuncExprS(a, b *FuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCSS(a.Qualifier, b.Qualifier, f) &&
		EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsSelectExprsS(a.Exprs, b.Exprs, f)
}

// EqualsRefOfGTIDFuncExpr does deep equals between the two objects.
func EqualsRefOfGTIDFuncExpr(a, b *GTIDFuncExpr) bool {
	return EqualsRefOfGTIDFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfGTIDFuncExprS does deep equals between the two objects.
func EqualsRefOfGTIDFuncExprS(a, b *GTIDFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Set1, b.Set1, f) &&
		EqualsExprS(a.Set2, b.Set2, f) &&
		EqualsExprS(a.Timeout, b.Timeout, f) &&
		EqualsExprS(a.Channel, b.Channel, f)
}

// EqualsGroupBy does deep equals between the two objects.
func EqualsGroupBy(a, b GroupBy) bool {
	return EqualsGroupByS(a, b, DefaultEquality)
}

// EqualsGroupByS does deep equals between the two objects.
func EqualsGroupByS(a, b GroupBy, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfGroupConcatExpr does deep equals between the two objects.
func EqualsRefOfGroupConcatExpr(a, b *GroupConcatExpr) bool {
	return EqualsRefOfGroupConcatExprS(a, b, DefaultEquality)
}

// EqualsRefOfGroupConcatExprS does deep equals between the two objects.
func EqualsRefOfGroupConcatExprS(a, b *GroupConcatExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		a.Separator == b.Separator &&
		EqualsExprsS(a.Exprs, b.Exprs, f) &&
		EqualsOrderByS(a.OrderBy, b.OrderBy, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f)
}

// EqualsIdentifierCI does deep equals between the two objects.
func EqualsIdentifierCI(a, b IdentifierCI) bool {
	return EqualsIdentifierCIS(a, b, DefaultEquality)
}

// EqualsIdentifierCIS does deep equals between the two objects.
func EqualsIdentifierCIS(a, b IdentifierCI, f ASTComparison) bool {
	return a.val == b.val &&
		a.lowered == b.lowered
}

// EqualsIdentifierCS does deep equals between the two objects.
func EqualsIdentifierCS(a, b IdentifierCS) bool {
	return EqualsIdentifierCSS(a, b, DefaultEquality)
}

// EqualsIdentifierCSS does deep equals between the two objects.
func EqualsIdentifierCSS(a, b IdentifierCS, f ASTComparison) bool {
	return a.v == b.v
}

// EqualsRefOfIndexDefinition does deep equals between the two objects.
func EqualsRefOfIndexDefinition(a, b *IndexDefinition) bool {
	return EqualsRefOfIndexDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfIndexDefinitionS does deep equals between the two objects.
func EqualsRefOfIndexDefinitionS(a, b *IndexDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfIndexInfoS(a.Info, b.Info, f) &&
		EqualsSliceOfRefOfIndexColumnS(a.Columns, b.Columns, f) &&
		EqualsSliceOfRefOfIndexOptionS(a.Options, b.Options, f)
}

// EqualsRefOfIndexHint does deep equals between the two objects.
func EqualsRefOfIndexHint(a, b *IndexHint) bool {
	return EqualsRefOfIndexHintS(a, b, DefaultEquality)
}

// EqualsRefOfIndexHintS does deep equals between the two objects.
func EqualsRefOfIndexHintS(a, b *IndexHint, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.ForType == b.ForType &&
		EqualsSliceOfIdentifierCIS(a.Indexes, b.Indexes, f)
}

// EqualsIndexHints does deep equals between the two objects.
func EqualsIndexHints(a, b IndexHints) bool {
	return EqualsIndexHintsS(a, b, DefaultEquality)
}

// EqualsIndexHintsS does deep equals between the two objects.
func EqualsIndexHintsS(a, b IndexHints, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexHintS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfIndexInfo does deep equals between the two objects.
func EqualsRefOfIndexInfo(a, b *IndexInfo) bool {
	return EqualsRefOfIndexInfoS(a, b, DefaultEquality)
}

// EqualsRefOfIndexInfoS does deep equals between the two objects.
func EqualsRefOfIndexInfoS(a, b *IndexInfo, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.Primary == b.Primary &&
		a.Spatial == b.Spatial &&
		a.Fulltext == b.Fulltext &&
		a.Unique == b.Unique &&
		EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsIdentifierCIS(a.ConstraintName, b.ConstraintName, f)
}

// EqualsRefOfInsert does deep equals between the two objects.
func EqualsRefOfInsert(a, b *Insert) bool {
	return EqualsRefOfInsertS(a, b, DefaultEquality)
}

// EqualsRefOfInsertS does deep equals between the two objects.
func EqualsRefOfInsertS(a, b *Insert, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Action == b.Action &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		a.Ignore == b.Ignore &&
		EqualsTableNameS(a.Table, b.Table, f) &&
		EqualsPartitionsS(a.Partitions, b.Partitions, f) &&
		EqualsColumnsS(a.Columns, b.Columns, f) &&
		EqualsInsertRowsS(a.Rows, b.Rows, f) &&
		EqualsOnDupS(a.OnDup, b.OnDup, f)
}

// EqualsRefOfInsertExpr does deep equals between the two objects.
func EqualsRefOfInsertExpr(a, b *InsertExpr) bool {
	return EqualsRefOfInsertExprS(a, b, DefaultEquality)
}

// EqualsRefOfInsertExprS does deep equals between the two objects.
func EqualsRefOfInsertExprS(a, b *InsertExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Str, b.Str, f) &&
		EqualsExprS(a.Pos, b.Pos, f) &&
		EqualsExprS(a.Len, b.Len, f) &&
		EqualsExprS(a.NewStr, b.NewStr, f)
}

// EqualsRefOfIntervalExpr does deep equals between the two objects.
func EqualsRefOfIntervalExpr(a, b *IntervalExpr) bool {
	return EqualsRefOfIntervalExprS(a, b, DefaultEquality)
}

// EqualsRefOfIntervalExprS does deep equals between the two objects.
func EqualsRefOfIntervalExprS(a, b *IntervalExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Unit == b.Unit &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfIntervalFuncExpr does deep equals between the two objects.
func EqualsRefOfIntervalFuncExpr(a, b *IntervalFuncExpr) bool {
	return EqualsRefOfIntervalFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfIntervalFuncExprS does deep equals between the two objects.
func EqualsRefOfIntervalFuncExprS(a, b *IntervalFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprsS(a.Exprs, b.Exprs, f)
}

// EqualsRefOfIntroducerExpr does deep equals between the two objects.
func EqualsRefOfIntroducerExpr(a, b *IntroducerExpr) bool {
	return EqualsRefOfIntroducerExprS(a, b, DefaultEquality)
}

// EqualsRefOfIntroducerExprS does deep equals between the two objects.
func EqualsRefOfIntroducerExprS(a, b *IntroducerExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.CharacterSet == b.CharacterSet &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfIsExpr does deep equals between the two objects.
func EqualsRefOfIsExpr(a, b *IsExpr) bool {
	return EqualsRefOfIsExprS(a, b, DefaultEquality)
}

// EqualsRefOfIsExprS does deep equals between the two objects.
func EqualsRefOfIsExprS(a, b *IsExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Left, b.Left, f) &&
		a.Right == b.Right
}

// EqualsRefOfJSONArrayExpr does deep equals between the two objects.
func EqualsRefOfJSONArrayExpr(a, b *JSONArrayExpr) bool {
	return EqualsRefOfJSONArrayExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONArrayExprS does deep equals between the two objects.
func EqualsRefOfJSONArrayExprS(a, b *JSONArrayExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprsS(a.Params, b.Params, f)
}

// EqualsRefOfJSONAttributesExpr does deep equals between the two objects.
func EqualsRefOfJSONAttributesExpr(a, b *JSONAttributesExpr) bool {
	return EqualsRefOfJSONAttributesExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONAttributesExprS does deep equals between the two objects.
func EqualsRefOfJSONAttributesExprS(a, b *JSONAttributesExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprS(a.Path, b.Path, f)
}

// EqualsRefOfJSONContainsExpr does deep equals between the two objects.
func EqualsRefOfJSONContainsExpr(a, b *JSONContainsExpr) bool {
	return EqualsRefOfJSONContainsExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONContainsExprS does deep equals between the two objects.
func EqualsRefOfJSONContainsExprS(a, b *JSONContainsExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Target, b.Target, f) &&
		EqualsExprS(a.Candidate, b.Candidate, f) &&
		EqualsSliceOfExprS(a.PathList, b.PathList, f)
}

// EqualsRefOfJSONContainsPathExpr does deep equals between the two objects.
func EqualsRefOfJSONContainsPathExpr(a, b *JSONContainsPathExpr) bool {
	return EqualsRefOfJSONContainsPathExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONContainsPathExprS does deep equals between the two objects.
func EqualsRefOfJSONContainsPathExprS(a, b *JSONContainsPathExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprS(a.OneOrAll, b.OneOrAll, f) &&
		EqualsSliceOfExprS(a.PathList, b.PathList, f)
}

// EqualsRefOfJSONExtractExpr does deep equals between the two objects.
func EqualsRefOfJSONExtractExpr(a, b *JSONExtractExpr) bool {
	return EqualsRefOfJSONExtractExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONExtractExprS does deep equals between the two objects.
func EqualsRefOfJSONExtractExprS(a, b *JSONExtractExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsSliceOfExprS(a.PathList, b.PathList, f)
}

// EqualsRefOfJSONKeysExpr does deep equals between the two objects.
func EqualsRefOfJSONKeysExpr(a, b *JSONKeysExpr) bool {
	return EqualsRefOfJSONKeysExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONKeysExprS does deep equals between the two objects.
func EqualsRefOfJSONKeysExprS(a, b *JSONKeysExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprS(a.Path, b.Path, f)
}

// EqualsRefOfJSONObjectExpr does deep equals between the two objects.
func EqualsRefOfJSONObjectExpr(a, b *JSONObjectExpr) bool {
	return EqualsRefOfJSONObjectExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONObjectExprS does deep equals between the two objects.
func EqualsRefOfJSONObjectExprS(a, b *JSONObjectExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfJSONObjectParamS(a.Params, b.Params, f)
}

// EqualsJSONObjectParam does deep equals between the two objects.
func EqualsJSONObjectParam(a, b JSONObjectParam) bool {
	return EqualsJSONObjectParamS(a, b, DefaultEquality)
}

// EqualsJSONObjectParamS does deep equals between the two objects.
func EqualsJSONObjectParamS(a, b JSONObjectParam, f ASTComparison) bool {
	return EqualsExprS(a.Key, b.Key, f) &&
		EqualsExprS(a.Value, b.Value, f)
}

// EqualsRefOfJSONOverlapsExpr does deep equals between the two objects.
func EqualsRefOfJSONOverlapsExpr(a, b *JSONOverlapsExpr) bool {
	return EqualsRefOfJSONOverlapsExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONOverlapsExprS does deep equals between the two objects.
func EqualsRefOfJSONOverlapsExprS(a, b *JSONOverlapsExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc1, b.JSONDoc1, f) &&
		EqualsExprS(a.JSONDoc2, b.JSONDoc2, f)
}

// EqualsRefOfJSONPrettyExpr does deep equals between the two objects.
func EqualsRefOfJSONPrettyExpr(a, b *JSONPrettyExpr) bool {
	return EqualsRefOfJSONPrettyExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONPrettyExprS does deep equals between the two objects.
func EqualsRefOfJSONPrettyExprS(a, b *JSONPrettyExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONVal, b.JSONVal, f)
}

// EqualsRefOfJSONQuoteExpr does deep equals between the two objects.
func EqualsRefOfJSONQuoteExpr(a, b *JSONQuoteExpr) bool {
	return EqualsRefOfJSONQuoteExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONQuoteExprS does deep equals between the two objects.
func EqualsRefOfJSONQuoteExprS(a, b *JSONQuoteExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.StringArg, b.StringArg, f)
}

// EqualsRefOfJSONRemoveExpr does deep equals between the two objects.
func EqualsRefOfJSONRemoveExpr(a, b *JSONRemoveExpr) bool {
	return EqualsRefOfJSONRemoveExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONRemoveExprS does deep equals between the two objects.
func EqualsRefOfJSONRemoveExprS(a, b *JSONRemoveExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprsS(a.PathList, b.PathList, f)
}

// EqualsRefOfJSONSchemaValidFuncExpr does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidFuncExpr(a, b *JSONSchemaValidFuncExpr) bool {
	return EqualsRefOfJSONSchemaValidFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONSchemaValidFuncExprS does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidFuncExprS(a, b *JSONSchemaValidFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Schema, b.Schema, f) &&
		EqualsExprS(a.Document, b.Document, f)
}

// EqualsRefOfJSONSchemaValidationReportFuncExpr does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidationReportFuncExpr(a, b *JSONSchemaValidationReportFuncExpr) bool {
	return EqualsRefOfJSONSchemaValidationReportFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONSchemaValidationReportFuncExprS does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidationReportFuncExprS(a, b *JSONSchemaValidationReportFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Schema, b.Schema, f) &&
		EqualsExprS(a.Document, b.Document, f)
}

// EqualsRefOfJSONSearchExpr does deep equals between the two objects.
func EqualsRefOfJSONSearchExpr(a, b *JSONSearchExpr) bool {
	return EqualsRefOfJSONSearchExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONSearchExprS does deep equals between the two objects.
func EqualsRefOfJSONSearchExprS(a, b *JSONSearchExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprS(a.OneOrAll, b.OneOrAll, f) &&
		EqualsExprS(a.SearchStr, b.SearchStr, f) &&
		EqualsExprS(a.EscapeChar, b.EscapeChar, f) &&
		EqualsSliceOfExprS(a.PathList, b.PathList, f)
}

// EqualsRefOfJSONStorageFreeExpr does deep equals between the two objects.
func EqualsRefOfJSONStorageFreeExpr(a, b *JSONStorageFreeExpr) bool {
	return EqualsRefOfJSONStorageFreeExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONStorageFreeExprS does deep equals between the two objects.
func EqualsRefOfJSONStorageFreeExprS(a, b *JSONStorageFreeExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONVal, b.JSONVal, f)
}

// EqualsRefOfJSONStorageSizeExpr does deep equals between the two objects.
func EqualsRefOfJSONStorageSizeExpr(a, b *JSONStorageSizeExpr) bool {
	return EqualsRefOfJSONStorageSizeExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONStorageSizeExprS does deep equals between the two objects.
func EqualsRefOfJSONStorageSizeExprS(a, b *JSONStorageSizeExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONVal, b.JSONVal, f)
}

// EqualsRefOfJSONTableExpr does deep equals between the two objects.
func EqualsRefOfJSONTableExpr(a, b *JSONTableExpr) bool {
	return EqualsRefOfJSONTableExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONTableExprS does deep equals between the two objects.
func EqualsRefOfJSONTableExprS(a, b *JSONTableExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsIdentifierCSS(a.Alias, b.Alias, f) &&
		EqualsExprS(a.Filter, b.Filter, f) &&
		EqualsSliceOfRefOfJtColumnDefinitionS(a.Columns, b.Columns, f)
}

// EqualsRefOfJSONUnquoteExpr does deep equals between the two objects.
func EqualsRefOfJSONUnquoteExpr(a, b *JSONUnquoteExpr) bool {
	return EqualsRefOfJSONUnquoteExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONUnquoteExprS does deep equals between the two objects.
func EqualsRefOfJSONUnquoteExprS(a, b *JSONUnquoteExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONValue, b.JSONValue, f)
}

// EqualsRefOfJSONValueExpr does deep equals between the two objects.
func EqualsRefOfJSONValueExpr(a, b *JSONValueExpr) bool {
	return EqualsRefOfJSONValueExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONValueExprS does deep equals between the two objects.
func EqualsRefOfJSONValueExprS(a, b *JSONValueExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprS(a.Path, b.Path, f) &&
		EqualsRefOfConvertTypeS(a.ReturningType, b.ReturningType, f) &&
		EqualsRefOfJtOnResponseS(a.EmptyOnResponse, b.EmptyOnResponse, f) &&
		EqualsRefOfJtOnResponseS(a.ErrorOnResponse, b.ErrorOnResponse, f)
}

// EqualsRefOfJSONValueMergeExpr does deep equals between the two objects.
func EqualsRefOfJSONValueMergeExpr(a, b *JSONValueMergeExpr) bool {
	return EqualsRefOfJSONValueMergeExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONValueMergeExprS does deep equals between the two objects.
func EqualsRefOfJSONValueMergeExprS(a, b *JSONValueMergeExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsExprsS(a.JSONDocList, b.JSONDocList, f)
}

// EqualsRefOfJSONValueModifierExpr does deep equals between the two objects.
func EqualsRefOfJSONValueModifierExpr(a, b *JSONValueModifierExpr) bool {
	return EqualsRefOfJSONValueModifierExprS(a, b, DefaultEquality)
}

// EqualsRefOfJSONValueModifierExprS does deep equals between the two objects.
func EqualsRefOfJSONValueModifierExprS(a, b *JSONValueModifierExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.JSONDoc, b.JSONDoc, f) &&
		EqualsSliceOfRefOfJSONObjectParamS(a.Params, b.Params, f)
}

// EqualsRefOfJoinCondition does deep equals between the two objects.
func EqualsRefOfJoinCondition(a, b *JoinCondition) bool {
	return EqualsRefOfJoinConditionS(a, b, DefaultEquality)
}

// EqualsRefOfJoinConditionS does deep equals between the two objects.
func EqualsRefOfJoinConditionS(a, b *JoinCondition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.On, b.On, f) &&
		EqualsColumnsS(a.Using, b.Using, f)
}

// EqualsRefOfJoinTableExpr does deep equals between the two objects.
func EqualsRefOfJoinTableExpr(a, b *JoinTableExpr) bool {
	return EqualsRefOfJoinTableExprS(a, b, DefaultEquality)
}

// EqualsRefOfJoinTableExprS does deep equals between the two objects.
func EqualsRefOfJoinTableExprS(a, b *JoinTableExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExprS(a.LeftExpr, b.LeftExpr, f) &&
		a.Join == b.Join &&
		EqualsTableExprS(a.RightExpr, b.RightExpr, f) &&
		EqualsRefOfJoinConditionS(a.Condition, b.Condition, f)
}

// EqualsRefOfJtColumnDefinition does deep equals between the two objects.
func EqualsRefOfJtColumnDefinition(a, b *JtColumnDefinition) bool {
	return EqualsRefOfJtColumnDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfJtColumnDefinitionS does deep equals between the two objects.
func EqualsRefOfJtColumnDefinitionS(a, b *JtColumnDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfJtOrdinalColDefS(a.JtOrdinal, b.JtOrdinal, f) &&
		EqualsRefOfJtPathColDefS(a.JtPath, b.JtPath, f) &&
		EqualsRefOfJtNestedPathColDefS(a.JtNestedPath, b.JtNestedPath, f)
}

// EqualsRefOfJtOnResponse does deep equals between the two objects.
func EqualsRefOfJtOnResponse(a, b *JtOnResponse) bool {
	return EqualsRefOfJtOnResponseS(a, b, DefaultEquality)
}

// EqualsRefOfJtOnResponseS does deep equals between the two objects.
func EqualsRefOfJtOnResponseS(a, b *JtOnResponse, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.ResponseType == b.ResponseType &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfKeyState does deep equals between the two objects.
func EqualsRefOfKeyState(a, b *KeyState) bool {
	return EqualsRefOfKeyStateS(a, b, DefaultEquality)
}

// EqualsRefOfKeyStateS does deep equals between the two objects.
func EqualsRefOfKeyStateS(a, b *KeyState, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enable == b.Enable
}

// EqualsRefOfLagLeadExpr does deep equals between the two objects.
func EqualsRefOfLagLeadExpr(a, b *LagLeadExpr) bool {
	return EqualsRefOfLagLeadExprS(a, b, DefaultEquality)
}

// EqualsRefOfLagLeadExprS does deep equals between the two objects.
func EqualsRefOfLagLeadExprS(a, b *LagLeadExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.N, b.N, f) &&
		EqualsExprS(a.Default, b.Default, f) &&
		EqualsRefOfOverClauseS(a.OverClause, b.OverClause, f) &&
		EqualsRefOfNullTreatmentClauseS(a.NullTreatmentClause, b.NullTreatmentClause, f)
}

// EqualsRefOfLimit does deep equals between the two objects.
func EqualsRefOfLimit(a, b *Limit) bool {
	return EqualsRefOfLimitS(a, b, DefaultEquality)
}

// EqualsRefOfLimitS does deep equals between the two objects.
func EqualsRefOfLimitS(a, b *Limit, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Offset, b.Offset, f) &&
		EqualsExprS(a.Rowcount, b.Rowcount, f)
}

// EqualsRefOfLiteral does deep equals between the two objects.
func EqualsRefOfLiteral(a, b *Literal) bool {
	return EqualsRefOfLiteralS(a, b, DefaultEquality)
}

// EqualsRefOfLiteralS does deep equals between the two objects.
func EqualsRefOfLiteralS(a, b *Literal, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Val == b.Val &&
		a.Type == b.Type
}

// EqualsRefOfLoad does deep equals between the two objects.
func EqualsRefOfLoad(a, b *Load) bool {
	return EqualsRefOfLoadS(a, b, DefaultEquality)
}

// EqualsRefOfLoadS does deep equals between the two objects.
func EqualsRefOfLoadS(a, b *Load, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfLocateExpr does deep equals between the two objects.
func EqualsRefOfLocateExpr(a, b *LocateExpr) bool {
	return EqualsRefOfLocateExprS(a, b, DefaultEquality)
}

// EqualsRefOfLocateExprS does deep equals between the two objects.
func EqualsRefOfLocateExprS(a, b *LocateExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.SubStr, b.SubStr, f) &&
		EqualsExprS(a.Str, b.Str, f) &&
		EqualsExprS(a.Pos, b.Pos, f)
}

// EqualsRefOfLockOption does deep equals between the two objects.
func EqualsRefOfLockOption(a, b *LockOption) bool {
	return EqualsRefOfLockOptionS(a, b, DefaultEquality)
}

// EqualsRefOfLockOptionS does deep equals between the two objects.
func EqualsRefOfLockOptionS(a, b *LockOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfLockTables does deep equals between the two objects.
func EqualsRefOfLockTables(a, b *LockTables) bool {
	return EqualsRefOfLockTablesS(a, b, DefaultEquality)
}

// EqualsRefOfLockTablesS does deep equals between the two objects.
func EqualsRefOfLockTablesS(a, b *LockTables, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableAndLockTypesS(a.Tables, b.Tables, f)
}

// EqualsRefOfLockingFunc does deep equals between the two objects.
func EqualsRefOfLockingFunc(a, b *LockingFunc) bool {
	return EqualsRefOfLockingFuncS(a, b, DefaultEquality)
}

// EqualsRefOfLockingFuncS does deep equals between the two objects.
func EqualsRefOfLockingFuncS(a, b *LockingFunc, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Name, b.Name, f) &&
		EqualsExprS(a.Timeout, b.Timeout, f)
}

// EqualsRefOfMatchExpr does deep equals between the two objects.
func EqualsRefOfMatchExpr(a, b *MatchExpr) bool {
	return EqualsRefOfMatchExprS(a, b, DefaultEquality)
}

// EqualsRefOfMatchExprS does deep equals between the two objects.
func EqualsRefOfMatchExprS(a, b *MatchExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfColNameS(a.Columns, b.Columns, f) &&
		EqualsExprS(a.Expr, b.Expr, f) &&
		a.Option == b.Option
}

// EqualsRefOfMax does deep equals between the two objects.
func EqualsRefOfMax(a, b *Max) bool {
	return EqualsRefOfMaxS(a, b, DefaultEquality)
}

// EqualsRefOfMaxS does deep equals between the two objects.
func EqualsRefOfMaxS(a, b *Max, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfMemberOfExpr does deep equals between the two objects.
func EqualsRefOfMemberOfExpr(a, b *MemberOfExpr) bool {
	return EqualsRefOfMemberOfExprS(a, b, DefaultEquality)
}

// EqualsRefOfMemberOfExprS does deep equals between the two objects.
func EqualsRefOfMemberOfExprS(a, b *MemberOfExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Value, b.Value, f) &&
		EqualsExprS(a.JSONArr, b.JSONArr, f)
}

// EqualsRefOfMin does deep equals between the two objects.
func EqualsRefOfMin(a, b *Min) bool {
	return EqualsRefOfMinS(a, b, DefaultEquality)
}

// EqualsRefOfMinS does deep equals between the two objects.
func EqualsRefOfMinS(a, b *Min, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfModifyColumn does deep equals between the two objects.
func EqualsRefOfModifyColumn(a, b *ModifyColumn) bool {
	return EqualsRefOfModifyColumnS(a, b, DefaultEquality)
}

// EqualsRefOfModifyColumnS does deep equals between the two objects.
func EqualsRefOfModifyColumnS(a, b *ModifyColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsRefOfColumnDefinitionS(a.NewColDefinition, b.NewColDefinition, f) &&
		EqualsRefOfColNameS(a.After, b.After, f)
}

// EqualsRefOfNTHValueExpr does deep equals between the two objects.
func EqualsRefOfNTHValueExpr(a, b *NTHValueExpr) bool {
	return EqualsRefOfNTHValueExprS(a, b, DefaultEquality)
}

// EqualsRefOfNTHValueExprS does deep equals between the two objects.
func EqualsRefOfNTHValueExprS(a, b *NTHValueExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.N, b.N, f) &&
		EqualsRefOfOverClauseS(a.OverClause, b.OverClause, f) &&
		EqualsRefOfFromFirstLastClauseS(a.FromFirstLastClause, b.FromFirstLastClause, f) &&
		EqualsRefOfNullTreatmentClauseS(a.NullTreatmentClause, b.NullTreatmentClause, f)
}

// EqualsRefOfNamedWindow does deep equals between the two objects.
func EqualsRefOfNamedWindow(a, b *NamedWindow) bool {
	return EqualsRefOfNamedWindowS(a, b, DefaultEquality)
}

// EqualsRefOfNamedWindowS does deep equals between the two objects.
func EqualsRefOfNamedWindowS(a, b *NamedWindow, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsWindowDefinitionsS(a.Windows, b.Windows, f)
}

// EqualsNamedWindows does deep equals between the two objects.
func EqualsNamedWindows(a, b NamedWindows) bool {
	return EqualsNamedWindowsS(a, b, DefaultEquality)
}

// EqualsNamedWindowsS does deep equals between the two objects.
func EqualsNamedWindowsS(a, b NamedWindows, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfNamedWindowS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfNextval does deep equals between the two objects.
func EqualsRefOfNextval(a, b *Nextval) bool {
	return EqualsRefOfNextvalS(a, b, DefaultEquality)
}

// EqualsRefOfNextvalS does deep equals between the two objects.
func EqualsRefOfNextvalS(a, b *Nextval, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfNotExpr does deep equals between the two objects.
func EqualsRefOfNotExpr(a, b *NotExpr) bool {
	return EqualsRefOfNotExprS(a, b, DefaultEquality)
}

// EqualsRefOfNotExprS does deep equals between the two objects.
func EqualsRefOfNotExprS(a, b *NotExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfNtileExpr does deep equals between the two objects.
func EqualsRefOfNtileExpr(a, b *NtileExpr) bool {
	return EqualsRefOfNtileExprS(a, b, DefaultEquality)
}

// EqualsRefOfNtileExprS does deep equals between the two objects.
func EqualsRefOfNtileExprS(a, b *NtileExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.N, b.N, f) &&
		EqualsRefOfOverClauseS(a.OverClause, b.OverClause, f)
}

// EqualsRefOfNullTreatmentClause does deep equals between the two objects.
func EqualsRefOfNullTreatmentClause(a, b *NullTreatmentClause) bool {
	return EqualsRefOfNullTreatmentClauseS(a, b, DefaultEquality)
}

// EqualsRefOfNullTreatmentClauseS does deep equals between the two objects.
func EqualsRefOfNullTreatmentClauseS(a, b *NullTreatmentClause, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfNullVal does deep equals between the two objects.
func EqualsRefOfNullVal(a, b *NullVal) bool {
	return EqualsRefOfNullValS(a, b, DefaultEquality)
}

// EqualsRefOfNullValS does deep equals between the two objects.
func EqualsRefOfNullValS(a, b *NullVal, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOffset does deep equals between the two objects.
func EqualsRefOfOffset(a, b *Offset) bool {
	return EqualsRefOfOffsetS(a, b, DefaultEquality)
}

// EqualsRefOfOffsetS does deep equals between the two objects.
func EqualsRefOfOffsetS(a, b *Offset, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.V == b.V &&
		a.Original == b.Original
}

// EqualsOnDup does deep equals between the two objects.
func EqualsOnDup(a, b OnDup) bool {
	return EqualsOnDupS(a, b, DefaultEquality)
}

// EqualsOnDupS does deep equals between the two objects.
func EqualsOnDupS(a, b OnDup, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfUpdateExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfOptLike does deep equals between the two objects.
func EqualsRefOfOptLike(a, b *OptLike) bool {
	return EqualsRefOfOptLikeS(a, b, DefaultEquality)
}

// EqualsRefOfOptLikeS does deep equals between the two objects.
func EqualsRefOfOptLikeS(a, b *OptLike, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.LikeTable, b.LikeTable, f)
}

// EqualsRefOfOrExpr does deep equals between the two objects.
func EqualsRefOfOrExpr(a, b *OrExpr) bool {
	return EqualsRefOfOrExprS(a, b, DefaultEquality)
}

// EqualsRefOfOrExprS does deep equals between the two objects.
func EqualsRefOfOrExprS(a, b *OrExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.Right, b.Right, f)
}

// EqualsRefOfOrder does deep equals between the two objects.
func EqualsRefOfOrder(a, b *Order) bool {
	return EqualsRefOfOrderS(a, b, DefaultEquality)
}

// EqualsRefOfOrderS does deep equals between the two objects.
func EqualsRefOfOrderS(a, b *Order, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		a.Direction == b.Direction
}

// EqualsOrderBy does deep equals between the two objects.
func EqualsOrderBy(a, b OrderBy) bool {
	return EqualsOrderByS(a, b, DefaultEquality)
}

// EqualsOrderByS does deep equals between the two objects.
func EqualsOrderByS(a, b OrderBy, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfOrderS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfOrderByOption does deep equals between the two objects.
func EqualsRefOfOrderByOption(a, b *OrderByOption) bool {
	return EqualsRefOfOrderByOptionS(a, b, DefaultEquality)
}

// EqualsRefOfOrderByOptionS does deep equals between the two objects.
func EqualsRefOfOrderByOptionS(a, b *OrderByOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsColumnsS(a.Cols, b.Cols, f)
}

// EqualsRefOfOtherAdmin does deep equals between the two objects.
func EqualsRefOfOtherAdmin(a, b *OtherAdmin) bool {
	return EqualsRefOfOtherAdminS(a, b, DefaultEquality)
}

// EqualsRefOfOtherAdminS does deep equals between the two objects.
func EqualsRefOfOtherAdminS(a, b *OtherAdmin, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOtherRead does deep equals between the two objects.
func EqualsRefOfOtherRead(a, b *OtherRead) bool {
	return EqualsRefOfOtherReadS(a, b, DefaultEquality)
}

// EqualsRefOfOtherReadS does deep equals between the two objects.
func EqualsRefOfOtherReadS(a, b *OtherRead, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOverClause does deep equals between the two objects.
func EqualsRefOfOverClause(a, b *OverClause) bool {
	return EqualsRefOfOverClauseS(a, b, DefaultEquality)
}

// EqualsRefOfOverClauseS does deep equals between the two objects.
func EqualsRefOfOverClauseS(a, b *OverClause, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.WindowName, b.WindowName, f) &&
		EqualsRefOfWindowSpecificationS(a.WindowSpec, b.WindowSpec, f)
}

// EqualsRefOfParenTableExpr does deep equals between the two objects.
func EqualsRefOfParenTableExpr(a, b *ParenTableExpr) bool {
	return EqualsRefOfParenTableExprS(a, b, DefaultEquality)
}

// EqualsRefOfParenTableExprS does deep equals between the two objects.
func EqualsRefOfParenTableExprS(a, b *ParenTableExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExprsS(a.Exprs, b.Exprs, f)
}

// EqualsRefOfParsedComments does deep equals between the two objects.
func EqualsRefOfParsedComments(a, b *ParsedComments) bool {
	return EqualsRefOfParsedCommentsS(a, b, DefaultEquality)
}

// EqualsRefOfParsedCommentsS does deep equals between the two objects.
func EqualsRefOfParsedCommentsS(a, b *ParsedComments, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsCommentsS(a.comments, b.comments, f)
}

// EqualsRefOfPartitionDefinition does deep equals between the two objects.
func EqualsRefOfPartitionDefinition(a, b *PartitionDefinition) bool {
	return EqualsRefOfPartitionDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionDefinitionS does deep equals between the two objects.
func EqualsRefOfPartitionDefinitionS(a, b *PartitionDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsRefOfPartitionDefinitionOptionsS(a.Options, b.Options, f)
}

// EqualsRefOfPartitionDefinitionOptions does deep equals between the two objects.
func EqualsRefOfPartitionDefinitionOptions(a, b *PartitionDefinitionOptions) bool {
	return EqualsRefOfPartitionDefinitionOptionsS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionDefinitionOptionsS does deep equals between the two objects.
func EqualsRefOfPartitionDefinitionOptionsS(a, b *PartitionDefinitionOptions, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TableSpace == b.TableSpace &&
		EqualsRefOfPartitionValueRangeS(a.ValueRange, b.ValueRange, f) &&
		EqualsRefOfLiteralS(a.Comment, b.Comment, f) &&
		EqualsRefOfPartitionEngineS(a.Engine, b.Engine, f) &&
		EqualsRefOfLiteralS(a.DataDirectory, b.DataDirectory, f) &&
		EqualsRefOfLiteralS(a.IndexDirectory, b.IndexDirectory, f) &&
		EqualsRefOfIntS(a.MaxRows, b.MaxRows, f) &&
		EqualsRefOfIntS(a.MinRows, b.MinRows, f) &&
		EqualsSubPartitionDefinitionsS(a.SubPartitionDefinitions, b.SubPartitionDefinitions, f)
}

// EqualsRefOfPartitionEngine does deep equals between the two objects.
func EqualsRefOfPartitionEngine(a, b *PartitionEngine) bool {
	return EqualsRefOfPartitionEngineS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionEngineS does deep equals between the two objects.
func EqualsRefOfPartitionEngineS(a, b *PartitionEngine, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Storage == b.Storage &&
		a.Name == b.Name
}

// EqualsRefOfPartitionOption does deep equals between the two objects.
func EqualsRefOfPartitionOption(a, b *PartitionOption) bool {
	return EqualsRefOfPartitionOptionS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionOptionS does deep equals between the two objects.
func EqualsRefOfPartitionOptionS(a, b *PartitionOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLinear == b.IsLinear &&
		a.KeyAlgorithm == b.KeyAlgorithm &&
		a.Partitions == b.Partitions &&
		a.Type == b.Type &&
		EqualsColumnsS(a.ColList, b.ColList, f) &&
		EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsRefOfSubPartitionS(a.SubPartition, b.SubPartition, f) &&
		EqualsSliceOfRefOfPartitionDefinitionS(a.Definitions, b.Definitions, f)
}

// EqualsRefOfPartitionSpec does deep equals between the two objects.
func EqualsRefOfPartitionSpec(a, b *PartitionSpec) bool {
	return EqualsRefOfPartitionSpecS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionSpecS does deep equals between the two objects.
func EqualsRefOfPartitionSpecS(a, b *PartitionSpec, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsAll == b.IsAll &&
		a.WithoutValidation == b.WithoutValidation &&
		a.Action == b.Action &&
		EqualsPartitionsS(a.Names, b.Names, f) &&
		EqualsRefOfLiteralS(a.Number, b.Number, f) &&
		EqualsTableNameS(a.TableName, b.TableName, f) &&
		EqualsSliceOfRefOfPartitionDefinitionS(a.Definitions, b.Definitions, f)
}

// EqualsRefOfPartitionValueRange does deep equals between the two objects.
func EqualsRefOfPartitionValueRange(a, b *PartitionValueRange) bool {
	return EqualsRefOfPartitionValueRangeS(a, b, DefaultEquality)
}

// EqualsRefOfPartitionValueRangeS does deep equals between the two objects.
func EqualsRefOfPartitionValueRangeS(a, b *PartitionValueRange, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Maxvalue == b.Maxvalue &&
		a.Type == b.Type &&
		EqualsValTupleS(a.Range, b.Range, f)
}

// EqualsPartitions does deep equals between the two objects.
func EqualsPartitions(a, b Partitions) bool {
	return EqualsPartitionsS(a, b, DefaultEquality)
}

// EqualsPartitionsS does deep equals between the two objects.
func EqualsPartitionsS(a, b Partitions, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCIS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfPerformanceSchemaFuncExpr does deep equals between the two objects.
func EqualsRefOfPerformanceSchemaFuncExpr(a, b *PerformanceSchemaFuncExpr) bool {
	return EqualsRefOfPerformanceSchemaFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfPerformanceSchemaFuncExprS does deep equals between the two objects.
func EqualsRefOfPerformanceSchemaFuncExprS(a, b *PerformanceSchemaFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Argument, b.Argument, f)
}

// EqualsRefOfPrepareStmt does deep equals between the two objects.
func EqualsRefOfPrepareStmt(a, b *PrepareStmt) bool {
	return EqualsRefOfPrepareStmtS(a, b, DefaultEquality)
}

// EqualsRefOfPrepareStmtS does deep equals between the two objects.
func EqualsRefOfPrepareStmtS(a, b *PrepareStmt, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsExprS(a.Statement, b.Statement, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfReferenceDefinition does deep equals between the two objects.
func EqualsRefOfReferenceDefinition(a, b *ReferenceDefinition) bool {
	return EqualsRefOfReferenceDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfReferenceDefinitionS does deep equals between the two objects.
func EqualsRefOfReferenceDefinitionS(a, b *ReferenceDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.ReferencedTable, b.ReferencedTable, f) &&
		EqualsColumnsS(a.ReferencedColumns, b.ReferencedColumns, f) &&
		a.Match == b.Match &&
		a.OnDelete == b.OnDelete &&
		a.OnUpdate == b.OnUpdate
}

// EqualsRefOfRegexpInstrExpr does deep equals between the two objects.
func EqualsRefOfRegexpInstrExpr(a, b *RegexpInstrExpr) bool {
	return EqualsRefOfRegexpInstrExprS(a, b, DefaultEquality)
}

// EqualsRefOfRegexpInstrExprS does deep equals between the two objects.
func EqualsRefOfRegexpInstrExprS(a, b *RegexpInstrExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.Pattern, b.Pattern, f) &&
		EqualsExprS(a.Position, b.Position, f) &&
		EqualsExprS(a.Occurrence, b.Occurrence, f) &&
		EqualsExprS(a.ReturnOption, b.ReturnOption, f) &&
		EqualsExprS(a.MatchType, b.MatchType, f)
}

// EqualsRefOfRegexpLikeExpr does deep equals between the two objects.
func EqualsRefOfRegexpLikeExpr(a, b *RegexpLikeExpr) bool {
	return EqualsRefOfRegexpLikeExprS(a, b, DefaultEquality)
}

// EqualsRefOfRegexpLikeExprS does deep equals between the two objects.
func EqualsRefOfRegexpLikeExprS(a, b *RegexpLikeExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.Pattern, b.Pattern, f) &&
		EqualsExprS(a.MatchType, b.MatchType, f)
}

// EqualsRefOfRegexpReplaceExpr does deep equals between the two objects.
func EqualsRefOfRegexpReplaceExpr(a, b *RegexpReplaceExpr) bool {
	return EqualsRefOfRegexpReplaceExprS(a, b, DefaultEquality)
}

// EqualsRefOfRegexpReplaceExprS does deep equals between the two objects.
func EqualsRefOfRegexpReplaceExprS(a, b *RegexpReplaceExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.Pattern, b.Pattern, f) &&
		EqualsExprS(a.Repl, b.Repl, f) &&
		EqualsExprS(a.Occurrence, b.Occurrence, f) &&
		EqualsExprS(a.Position, b.Position, f) &&
		EqualsExprS(a.MatchType, b.MatchType, f)
}

// EqualsRefOfRegexpSubstrExpr does deep equals between the two objects.
func EqualsRefOfRegexpSubstrExpr(a, b *RegexpSubstrExpr) bool {
	return EqualsRefOfRegexpSubstrExprS(a, b, DefaultEquality)
}

// EqualsRefOfRegexpSubstrExprS does deep equals between the two objects.
func EqualsRefOfRegexpSubstrExprS(a, b *RegexpSubstrExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsExprS(a.Pattern, b.Pattern, f) &&
		EqualsExprS(a.Occurrence, b.Occurrence, f) &&
		EqualsExprS(a.Position, b.Position, f) &&
		EqualsExprS(a.MatchType, b.MatchType, f)
}

// EqualsRefOfRelease does deep equals between the two objects.
func EqualsRefOfRelease(a, b *Release) bool {
	return EqualsRefOfReleaseS(a, b, DefaultEquality)
}

// EqualsRefOfReleaseS does deep equals between the two objects.
func EqualsRefOfReleaseS(a, b *Release, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfRenameColumn does deep equals between the two objects.
func EqualsRefOfRenameColumn(a, b *RenameColumn) bool {
	return EqualsRefOfRenameColumnS(a, b, DefaultEquality)
}

// EqualsRefOfRenameColumnS does deep equals between the two objects.
func EqualsRefOfRenameColumnS(a, b *RenameColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColNameS(a.OldName, b.OldName, f) &&
		EqualsRefOfColNameS(a.NewName, b.NewName, f)
}

// EqualsRefOfRenameIndex does deep equals between the two objects.
func EqualsRefOfRenameIndex(a, b *RenameIndex) bool {
	return EqualsRefOfRenameIndexS(a, b, DefaultEquality)
}

// EqualsRefOfRenameIndexS does deep equals between the two objects.
func EqualsRefOfRenameIndexS(a, b *RenameIndex, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.OldName, b.OldName, f) &&
		EqualsIdentifierCIS(a.NewName, b.NewName, f)
}

// EqualsRefOfRenameTable does deep equals between the two objects.
func EqualsRefOfRenameTable(a, b *RenameTable) bool {
	return EqualsRefOfRenameTableS(a, b, DefaultEquality)
}

// EqualsRefOfRenameTableS does deep equals between the two objects.
func EqualsRefOfRenameTableS(a, b *RenameTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfRenameTablePairS(a.TablePairs, b.TablePairs, f)
}

// EqualsRefOfRenameTableName does deep equals between the two objects.
func EqualsRefOfRenameTableName(a, b *RenameTableName) bool {
	return EqualsRefOfRenameTableNameS(a, b, DefaultEquality)
}

// EqualsRefOfRenameTableNameS does deep equals between the two objects.
func EqualsRefOfRenameTableNameS(a, b *RenameTableName, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.Table, b.Table, f)
}

// EqualsRefOfRevertMigration does deep equals between the two objects.
func EqualsRefOfRevertMigration(a, b *RevertMigration) bool {
	return EqualsRefOfRevertMigrationS(a, b, DefaultEquality)
}

// EqualsRefOfRevertMigrationS does deep equals between the two objects.
func EqualsRefOfRevertMigrationS(a, b *RevertMigration, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfRollback does deep equals between the two objects.
func EqualsRefOfRollback(a, b *Rollback) bool {
	return EqualsRefOfRollbackS(a, b, DefaultEquality)
}

// EqualsRefOfRollbackS does deep equals between the two objects.
func EqualsRefOfRollbackS(a, b *Rollback, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRootNode does deep equals between the two objects.
func EqualsRootNode(a, b RootNode) bool {
	return EqualsRootNodeS(a, b, DefaultEquality)
}

// EqualsRootNodeS does deep equals between the two objects.
func EqualsRootNodeS(a, b RootNode, f ASTComparison) bool {
	return EqualsSQLNodeS(a.SQLNode, b.SQLNode, f)
}

// EqualsRefOfSRollback does deep equals between the two objects.
func EqualsRefOfSRollback(a, b *SRollback) bool {
	return EqualsRefOfSRollbackS(a, b, DefaultEquality)
}

// EqualsRefOfSRollbackS does deep equals between the two objects.
func EqualsRefOfSRollbackS(a, b *SRollback, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfSavepoint does deep equals between the two objects.
func EqualsRefOfSavepoint(a, b *Savepoint) bool {
	return EqualsRefOfSavepointS(a, b, DefaultEquality)
}

// EqualsRefOfSavepointS does deep equals between the two objects.
func EqualsRefOfSavepointS(a, b *Savepoint, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfSelect does deep equals between the two objects.
func EqualsRefOfSelect(a, b *Select) bool {
	return EqualsRefOfSelectS(a, b, DefaultEquality)
}

// EqualsRefOfSelectS does deep equals between the two objects.
func EqualsRefOfSelectS(a, b *Select, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		a.StraightJoinHint == b.StraightJoinHint &&
		a.SQLCalcFoundRows == b.SQLCalcFoundRows &&
		EqualsRefOfBoolS(a.Cache, b.Cache, f) &&
		EqualsSliceOfTableExprS(a.From, b.From, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsSelectExprsS(a.SelectExprs, b.SelectExprs, f) &&
		EqualsRefOfWhereS(a.Where, b.Where, f) &&
		EqualsRefOfWithS(a.With, b.With, f) &&
		EqualsGroupByS(a.GroupBy, b.GroupBy, f) &&
		EqualsRefOfWhereS(a.Having, b.Having, f) &&
		EqualsNamedWindowsS(a.Windows, b.Windows, f) &&
		EqualsOrderByS(a.OrderBy, b.OrderBy, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f) &&
		a.Lock == b.Lock &&
		EqualsRefOfSelectIntoS(a.Into, b.Into, f)
}

// EqualsSelectExprs does deep equals between the two objects.
func EqualsSelectExprs(a, b SelectExprs) bool {
	return EqualsSelectExprsS(a, b, DefaultEquality)
}

// EqualsSelectExprsS does deep equals between the two objects.
func EqualsSelectExprsS(a, b SelectExprs, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsSelectExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfSelectInto does deep equals between the two objects.
func EqualsRefOfSelectInto(a, b *SelectInto) bool {
	return EqualsRefOfSelectIntoS(a, b, DefaultEquality)
}

// EqualsRefOfSelectIntoS does deep equals between the two objects.
func EqualsRefOfSelectIntoS(a, b *SelectInto, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.FileName == b.FileName &&
		a.FormatOption == b.FormatOption &&
		a.ExportOption == b.ExportOption &&
		a.Manifest == b.Manifest &&
		a.Overwrite == b.Overwrite &&
		a.Type == b.Type &&
		EqualsColumnCharsetS(a.Charset, b.Charset, f)
}

// EqualsRefOfSet does deep equals between the two objects.
func EqualsRefOfSet(a, b *Set) bool {
	return EqualsRefOfSetS(a, b, DefaultEquality)
}

// EqualsRefOfSetS does deep equals between the two objects.
func EqualsRefOfSetS(a, b *Set, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsSetExprsS(a.Exprs, b.Exprs, f)
}

// EqualsRefOfSetExpr does deep equals between the two objects.
func EqualsRefOfSetExpr(a, b *SetExpr) bool {
	return EqualsRefOfSetExprS(a, b, DefaultEquality)
}

// EqualsRefOfSetExprS does deep equals between the two objects.
func EqualsRefOfSetExprS(a, b *SetExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfVariableS(a.Var, b.Var, f) &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsSetExprs does deep equals between the two objects.
func EqualsSetExprs(a, b SetExprs) bool {
	return EqualsSetExprsS(a, b, DefaultEquality)
}

// EqualsSetExprsS does deep equals between the two objects.
func EqualsSetExprsS(a, b SetExprs, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfSetExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfShow does deep equals between the two objects.
func EqualsRefOfShow(a, b *Show) bool {
	return EqualsRefOfShowS(a, b, DefaultEquality)
}

// EqualsRefOfShowS does deep equals between the two objects.
func EqualsRefOfShowS(a, b *Show, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsShowInternalS(a.Internal, b.Internal, f)
}

// EqualsRefOfShowBasic does deep equals between the two objects.
func EqualsRefOfShowBasic(a, b *ShowBasic) bool {
	return EqualsRefOfShowBasicS(a, b, DefaultEquality)
}

// EqualsRefOfShowBasicS does deep equals between the two objects.
func EqualsRefOfShowBasicS(a, b *ShowBasic, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Full == b.Full &&
		a.Command == b.Command &&
		EqualsTableNameS(a.Tbl, b.Tbl, f) &&
		EqualsIdentifierCSS(a.DbName, b.DbName, f) &&
		EqualsRefOfShowFilterS(a.Filter, b.Filter, f)
}

// EqualsRefOfShowCreate does deep equals between the two objects.
func EqualsRefOfShowCreate(a, b *ShowCreate) bool {
	return EqualsRefOfShowCreateS(a, b, DefaultEquality)
}

// EqualsRefOfShowCreateS does deep equals between the two objects.
func EqualsRefOfShowCreateS(a, b *ShowCreate, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Command == b.Command &&
		EqualsTableNameS(a.Op, b.Op, f)
}

// EqualsRefOfShowFilter does deep equals between the two objects.
func EqualsRefOfShowFilter(a, b *ShowFilter) bool {
	return EqualsRefOfShowFilterS(a, b, DefaultEquality)
}

// EqualsRefOfShowFilterS does deep equals between the two objects.
func EqualsRefOfShowFilterS(a, b *ShowFilter, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Like == b.Like &&
		EqualsExprS(a.Filter, b.Filter, f)
}

// EqualsRefOfShowMigrationLogs does deep equals between the two objects.
func EqualsRefOfShowMigrationLogs(a, b *ShowMigrationLogs) bool {
	return EqualsRefOfShowMigrationLogsS(a, b, DefaultEquality)
}

// EqualsRefOfShowMigrationLogsS does deep equals between the two objects.
func EqualsRefOfShowMigrationLogsS(a, b *ShowMigrationLogs, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfShowOther does deep equals between the two objects.
func EqualsRefOfShowOther(a, b *ShowOther) bool {
	return EqualsRefOfShowOtherS(a, b, DefaultEquality)
}

// EqualsRefOfShowOtherS does deep equals between the two objects.
func EqualsRefOfShowOtherS(a, b *ShowOther, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Command == b.Command
}

// EqualsRefOfShowThrottledApps does deep equals between the two objects.
func EqualsRefOfShowThrottledApps(a, b *ShowThrottledApps) bool {
	return EqualsRefOfShowThrottledAppsS(a, b, DefaultEquality)
}

// EqualsRefOfShowThrottledAppsS does deep equals between the two objects.
func EqualsRefOfShowThrottledAppsS(a, b *ShowThrottledApps, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfShowThrottlerStatus does deep equals between the two objects.
func EqualsRefOfShowThrottlerStatus(a, b *ShowThrottlerStatus) bool {
	return EqualsRefOfShowThrottlerStatusS(a, b, DefaultEquality)
}

// EqualsRefOfShowThrottlerStatusS does deep equals between the two objects.
func EqualsRefOfShowThrottlerStatusS(a, b *ShowThrottlerStatus, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsCommentsS(a.Comments, b.Comments, f)
}

// EqualsRefOfStarExpr does deep equals between the two objects.
func EqualsRefOfStarExpr(a, b *StarExpr) bool {
	return EqualsRefOfStarExprS(a, b, DefaultEquality)
}

// EqualsRefOfStarExprS does deep equals between the two objects.
func EqualsRefOfStarExprS(a, b *StarExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.TableName, b.TableName, f)
}

// EqualsRefOfStd does deep equals between the two objects.
func EqualsRefOfStd(a, b *Std) bool {
	return EqualsRefOfStdS(a, b, DefaultEquality)
}

// EqualsRefOfStdS does deep equals between the two objects.
func EqualsRefOfStdS(a, b *Std, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfStdDev does deep equals between the two objects.
func EqualsRefOfStdDev(a, b *StdDev) bool {
	return EqualsRefOfStdDevS(a, b, DefaultEquality)
}

// EqualsRefOfStdDevS does deep equals between the two objects.
func EqualsRefOfStdDevS(a, b *StdDev, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfStdPop does deep equals between the two objects.
func EqualsRefOfStdPop(a, b *StdPop) bool {
	return EqualsRefOfStdPopS(a, b, DefaultEquality)
}

// EqualsRefOfStdPopS does deep equals between the two objects.
func EqualsRefOfStdPopS(a, b *StdPop, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfStdSamp does deep equals between the two objects.
func EqualsRefOfStdSamp(a, b *StdSamp) bool {
	return EqualsRefOfStdSampS(a, b, DefaultEquality)
}

// EqualsRefOfStdSampS does deep equals between the two objects.
func EqualsRefOfStdSampS(a, b *StdSamp, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfStream does deep equals between the two objects.
func EqualsRefOfStream(a, b *Stream) bool {
	return EqualsRefOfStreamS(a, b, DefaultEquality)
}

// EqualsRefOfStreamS does deep equals between the two objects.
func EqualsRefOfStreamS(a, b *Stream, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsSelectExprS(a.SelectExpr, b.SelectExpr, f) &&
		EqualsTableNameS(a.Table, b.Table, f)
}

// EqualsRefOfSubPartition does deep equals between the two objects.
func EqualsRefOfSubPartition(a, b *SubPartition) bool {
	return EqualsRefOfSubPartitionS(a, b, DefaultEquality)
}

// EqualsRefOfSubPartitionS does deep equals between the two objects.
func EqualsRefOfSubPartitionS(a, b *SubPartition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLinear == b.IsLinear &&
		a.KeyAlgorithm == b.KeyAlgorithm &&
		a.SubPartitions == b.SubPartitions &&
		a.Type == b.Type &&
		EqualsColumnsS(a.ColList, b.ColList, f) &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfSubPartitionDefinition does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinition(a, b *SubPartitionDefinition) bool {
	return EqualsRefOfSubPartitionDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfSubPartitionDefinitionS does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinitionS(a, b *SubPartitionDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsRefOfSubPartitionDefinitionOptionsS(a.Options, b.Options, f)
}

// EqualsRefOfSubPartitionDefinitionOptions does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinitionOptions(a, b *SubPartitionDefinitionOptions) bool {
	return EqualsRefOfSubPartitionDefinitionOptionsS(a, b, DefaultEquality)
}

// EqualsRefOfSubPartitionDefinitionOptionsS does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinitionOptionsS(a, b *SubPartitionDefinitionOptions, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TableSpace == b.TableSpace &&
		EqualsRefOfLiteralS(a.Comment, b.Comment, f) &&
		EqualsRefOfPartitionEngineS(a.Engine, b.Engine, f) &&
		EqualsRefOfLiteralS(a.DataDirectory, b.DataDirectory, f) &&
		EqualsRefOfLiteralS(a.IndexDirectory, b.IndexDirectory, f) &&
		EqualsRefOfIntS(a.MaxRows, b.MaxRows, f) &&
		EqualsRefOfIntS(a.MinRows, b.MinRows, f)
}

// EqualsSubPartitionDefinitions does deep equals between the two objects.
func EqualsSubPartitionDefinitions(a, b SubPartitionDefinitions) bool {
	return EqualsSubPartitionDefinitionsS(a, b, DefaultEquality)
}

// EqualsSubPartitionDefinitionsS does deep equals between the two objects.
func EqualsSubPartitionDefinitionsS(a, b SubPartitionDefinitions, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfSubPartitionDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfSubquery does deep equals between the two objects.
func EqualsRefOfSubquery(a, b *Subquery) bool {
	return EqualsRefOfSubqueryS(a, b, DefaultEquality)
}

// EqualsRefOfSubqueryS does deep equals between the two objects.
func EqualsRefOfSubqueryS(a, b *Subquery, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSelectStatementS(a.Select, b.Select, f)
}

// EqualsRefOfSubstrExpr does deep equals between the two objects.
func EqualsRefOfSubstrExpr(a, b *SubstrExpr) bool {
	return EqualsRefOfSubstrExprS(a, b, DefaultEquality)
}

// EqualsRefOfSubstrExprS does deep equals between the two objects.
func EqualsRefOfSubstrExprS(a, b *SubstrExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Name, b.Name, f) &&
		EqualsExprS(a.From, b.From, f) &&
		EqualsExprS(a.To, b.To, f)
}

// EqualsRefOfSum does deep equals between the two objects.
func EqualsRefOfSum(a, b *Sum) bool {
	return EqualsRefOfSumS(a, b, DefaultEquality)
}

// EqualsRefOfSumS does deep equals between the two objects.
func EqualsRefOfSumS(a, b *Sum, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsTableExprs does deep equals between the two objects.
func EqualsTableExprs(a, b TableExprs) bool {
	return EqualsTableExprsS(a, b, DefaultEquality)
}

// EqualsTableExprsS does deep equals between the two objects.
func EqualsTableExprsS(a, b TableExprs, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsTableName does deep equals between the two objects.
func EqualsTableName(a, b TableName) bool {
	return EqualsTableNameS(a, b, DefaultEquality)
}

// EqualsTableNameS does deep equals between the two objects.
func EqualsTableNameS(a, b TableName, f ASTComparison) bool {
	return EqualsIdentifierCSS(a.Name, b.Name, f) &&
		EqualsIdentifierCSS(a.Qualifier, b.Qualifier, f)
}

// EqualsTableNames does deep equals between the two objects.
func EqualsTableNames(a, b TableNames) bool {
	return EqualsTableNamesS(a, b, DefaultEquality)
}

// EqualsTableNamesS does deep equals between the two objects.
func EqualsTableNamesS(a, b TableNames, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableNameS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsTableOptions does deep equals between the two objects.
func EqualsTableOptions(a, b TableOptions) bool {
	return EqualsTableOptionsS(a, b, DefaultEquality)
}

// EqualsTableOptionsS does deep equals between the two objects.
func EqualsTableOptionsS(a, b TableOptions, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfTableOptionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfTableSpec does deep equals between the two objects.
func EqualsRefOfTableSpec(a, b *TableSpec) bool {
	return EqualsRefOfTableSpecS(a, b, DefaultEquality)
}

// EqualsRefOfTableSpecS does deep equals between the two objects.
func EqualsRefOfTableSpecS(a, b *TableSpec, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfColumnDefinitionS(a.Columns, b.Columns, f) &&
		EqualsSliceOfRefOfIndexDefinitionS(a.Indexes, b.Indexes, f) &&
		EqualsSliceOfRefOfConstraintDefinitionS(a.Constraints, b.Constraints, f) &&
		EqualsTableOptionsS(a.Options, b.Options, f) &&
		EqualsRefOfPartitionOptionS(a.PartitionOption, b.PartitionOption, f)
}

// EqualsRefOfTablespaceOperation does deep equals between the two objects.
func EqualsRefOfTablespaceOperation(a, b *TablespaceOperation) bool {
	return EqualsRefOfTablespaceOperationS(a, b, DefaultEquality)
}

// EqualsRefOfTablespaceOperationS does deep equals between the two objects.
func EqualsRefOfTablespaceOperationS(a, b *TablespaceOperation, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Import == b.Import
}

// EqualsRefOfTimestampFuncExpr does deep equals between the two objects.
func EqualsRefOfTimestampFuncExpr(a, b *TimestampFuncExpr) bool {
	return EqualsRefOfTimestampFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfTimestampFuncExprS does deep equals between the two objects.
func EqualsRefOfTimestampFuncExprS(a, b *TimestampFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Unit == b.Unit &&
		EqualsExprS(a.Expr1, b.Expr1, f) &&
		EqualsExprS(a.Expr2, b.Expr2, f)
}

// EqualsRefOfTrimFuncExpr does deep equals between the two objects.
func EqualsRefOfTrimFuncExpr(a, b *TrimFuncExpr) bool {
	return EqualsRefOfTrimFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfTrimFuncExprS does deep equals between the two objects.
func EqualsRefOfTrimFuncExprS(a, b *TrimFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TrimFuncType == b.TrimFuncType &&
		a.Type == b.Type &&
		EqualsExprS(a.TrimArg, b.TrimArg, f) &&
		EqualsExprS(a.StringArg, b.StringArg, f)
}

// EqualsRefOfTruncateTable does deep equals between the two objects.
func EqualsRefOfTruncateTable(a, b *TruncateTable) bool {
	return EqualsRefOfTruncateTableS(a, b, DefaultEquality)
}

// EqualsRefOfTruncateTableS does deep equals between the two objects.
func EqualsRefOfTruncateTableS(a, b *TruncateTable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.Table, b.Table, f)
}

// EqualsRefOfUnaryExpr does deep equals between the two objects.
func EqualsRefOfUnaryExpr(a, b *UnaryExpr) bool {
	return EqualsRefOfUnaryExprS(a, b, DefaultEquality)
}

// EqualsRefOfUnaryExprS does deep equals between the two objects.
func EqualsRefOfUnaryExprS(a, b *UnaryExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfUnion does deep equals between the two objects.
func EqualsRefOfUnion(a, b *Union) bool {
	return EqualsRefOfUnionS(a, b, DefaultEquality)
}

// EqualsRefOfUnionS does deep equals between the two objects.
func EqualsRefOfUnionS(a, b *Union, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsSelectStatementS(a.Left, b.Left, f) &&
		EqualsSelectStatementS(a.Right, b.Right, f) &&
		EqualsOrderByS(a.OrderBy, b.OrderBy, f) &&
		EqualsRefOfWithS(a.With, b.With, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f) &&
		a.Lock == b.Lock &&
		EqualsRefOfSelectIntoS(a.Into, b.Into, f)
}

// EqualsRefOfUnlockTables does deep equals between the two objects.
func EqualsRefOfUnlockTables(a, b *UnlockTables) bool {
	return EqualsRefOfUnlockTablesS(a, b, DefaultEquality)
}

// EqualsRefOfUnlockTablesS does deep equals between the two objects.
func EqualsRefOfUnlockTablesS(a, b *UnlockTables, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfUpdate does deep equals between the two objects.
func EqualsRefOfUpdate(a, b *Update) bool {
	return EqualsRefOfUpdateS(a, b, DefaultEquality)
}

// EqualsRefOfUpdateS does deep equals between the two objects.
func EqualsRefOfUpdateS(a, b *Update, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfWithS(a.With, b.With, f) &&
		EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		a.Ignore == b.Ignore &&
		EqualsTableExprsS(a.TableExprs, b.TableExprs, f) &&
		EqualsUpdateExprsS(a.Exprs, b.Exprs, f) &&
		EqualsRefOfWhereS(a.Where, b.Where, f) &&
		EqualsOrderByS(a.OrderBy, b.OrderBy, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f)
}

// EqualsRefOfUpdateExpr does deep equals between the two objects.
func EqualsRefOfUpdateExpr(a, b *UpdateExpr) bool {
	return EqualsRefOfUpdateExprS(a, b, DefaultEquality)
}

// EqualsRefOfUpdateExprS does deep equals between the two objects.
func EqualsRefOfUpdateExprS(a, b *UpdateExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColNameS(a.Name, b.Name, f) &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsUpdateExprs does deep equals between the two objects.
func EqualsUpdateExprs(a, b UpdateExprs) bool {
	return EqualsUpdateExprsS(a, b, DefaultEquality)
}

// EqualsUpdateExprsS does deep equals between the two objects.
func EqualsUpdateExprsS(a, b UpdateExprs, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfUpdateExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfUpdateXMLExpr does deep equals between the two objects.
func EqualsRefOfUpdateXMLExpr(a, b *UpdateXMLExpr) bool {
	return EqualsRefOfUpdateXMLExprS(a, b, DefaultEquality)
}

// EqualsRefOfUpdateXMLExprS does deep equals between the two objects.
func EqualsRefOfUpdateXMLExprS(a, b *UpdateXMLExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Target, b.Target, f) &&
		EqualsExprS(a.XPathExpr, b.XPathExpr, f) &&
		EqualsExprS(a.NewXML, b.NewXML, f)
}

// EqualsRefOfUse does deep equals between the two objects.
func EqualsRefOfUse(a, b *Use) bool {
	return EqualsRefOfUseS(a, b, DefaultEquality)
}

// EqualsRefOfUseS does deep equals between the two objects.
func EqualsRefOfUseS(a, b *Use, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCSS(a.DBName, b.DBName, f)
}

// EqualsRefOfVStream does deep equals between the two objects.
func EqualsRefOfVStream(a, b *VStream) bool {
	return EqualsRefOfVStreamS(a, b, DefaultEquality)
}

// EqualsRefOfVStreamS does deep equals between the two objects.
func EqualsRefOfVStreamS(a, b *VStream, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedCommentsS(a.Comments, b.Comments, f) &&
		EqualsSelectExprS(a.SelectExpr, b.SelectExpr, f) &&
		EqualsTableNameS(a.Table, b.Table, f) &&
		EqualsRefOfWhereS(a.Where, b.Where, f) &&
		EqualsRefOfLimitS(a.Limit, b.Limit, f)
}

// EqualsValTuple does deep equals between the two objects.
func EqualsValTuple(a, b ValTuple) bool {
	return EqualsValTupleS(a, b, DefaultEquality)
}

// EqualsValTupleS does deep equals between the two objects.
func EqualsValTupleS(a, b ValTuple, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfValidation does deep equals between the two objects.
func EqualsRefOfValidation(a, b *Validation) bool {
	return EqualsRefOfValidationS(a, b, DefaultEquality)
}

// EqualsRefOfValidationS does deep equals between the two objects.
func EqualsRefOfValidationS(a, b *Validation, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.With == b.With
}

// EqualsValues does deep equals between the two objects.
func EqualsValues(a, b Values) bool {
	return EqualsValuesS(a, b, DefaultEquality)
}

// EqualsValuesS does deep equals between the two objects.
func EqualsValuesS(a, b Values, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsValTupleS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfValuesFuncExpr does deep equals between the two objects.
func EqualsRefOfValuesFuncExpr(a, b *ValuesFuncExpr) bool {
	return EqualsRefOfValuesFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfValuesFuncExprS does deep equals between the two objects.
func EqualsRefOfValuesFuncExprS(a, b *ValuesFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColNameS(a.Name, b.Name, f)
}

// EqualsRefOfVarPop does deep equals between the two objects.
func EqualsRefOfVarPop(a, b *VarPop) bool {
	return EqualsRefOfVarPopS(a, b, DefaultEquality)
}

// EqualsRefOfVarPopS does deep equals between the two objects.
func EqualsRefOfVarPopS(a, b *VarPop, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfVarSamp does deep equals between the two objects.
func EqualsRefOfVarSamp(a, b *VarSamp) bool {
	return EqualsRefOfVarSampS(a, b, DefaultEquality)
}

// EqualsRefOfVarSampS does deep equals between the two objects.
func EqualsRefOfVarSampS(a, b *VarSamp, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsRefOfVariable does deep equals between the two objects.
func EqualsRefOfVariable(a, b *Variable) bool {
	return EqualsRefOfVariableS(a, b, DefaultEquality)
}

// EqualsRefOfVariableS does deep equals between the two objects.
func EqualsRefOfVariableS(a, b *Variable, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Scope == b.Scope &&
		EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfVariance does deep equals between the two objects.
func EqualsRefOfVariance(a, b *Variance) bool {
	return EqualsRefOfVarianceS(a, b, DefaultEquality)
}

// EqualsRefOfVarianceS does deep equals between the two objects.
func EqualsRefOfVarianceS(a, b *Variance, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Arg, b.Arg, f)
}

// EqualsVindexParam does deep equals between the two objects.
func EqualsVindexParam(a, b VindexParam) bool {
	return EqualsVindexParamS(a, b, DefaultEquality)
}

// EqualsVindexParamS does deep equals between the two objects.
func EqualsVindexParamS(a, b VindexParam, f ASTComparison) bool {
	return a.Val == b.Val &&
		EqualsIdentifierCIS(a.Key, b.Key, f)
}

// EqualsRefOfVindexSpec does deep equals between the two objects.
func EqualsRefOfVindexSpec(a, b *VindexSpec) bool {
	return EqualsRefOfVindexSpecS(a, b, DefaultEquality)
}

// EqualsRefOfVindexSpecS does deep equals between the two objects.
func EqualsRefOfVindexSpecS(a, b *VindexSpec, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsIdentifierCIS(a.Type, b.Type, f) &&
		EqualsSliceOfVindexParamS(a.Params, b.Params, f)
}

// EqualsRefOfWeightStringFuncExpr does deep equals between the two objects.
func EqualsRefOfWeightStringFuncExpr(a, b *WeightStringFuncExpr) bool {
	return EqualsRefOfWeightStringFuncExprS(a, b, DefaultEquality)
}

// EqualsRefOfWeightStringFuncExprS does deep equals between the two objects.
func EqualsRefOfWeightStringFuncExprS(a, b *WeightStringFuncExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Expr, b.Expr, f) &&
		EqualsRefOfConvertTypeS(a.As, b.As, f)
}

// EqualsRefOfWhen does deep equals between the two objects.
func EqualsRefOfWhen(a, b *When) bool {
	return EqualsRefOfWhenS(a, b, DefaultEquality)
}

// EqualsRefOfWhenS does deep equals between the two objects.
func EqualsRefOfWhenS(a, b *When, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Cond, b.Cond, f) &&
		EqualsExprS(a.Val, b.Val, f)
}

// EqualsRefOfWhere does deep equals between the two objects.
func EqualsRefOfWhere(a, b *Where) bool {
	return EqualsRefOfWhereS(a, b, DefaultEquality)
}

// EqualsRefOfWhereS does deep equals between the two objects.
func EqualsRefOfWhereS(a, b *Where, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExprS(a.Expr, b.Expr, f)
}

// EqualsRefOfWindowDefinition does deep equals between the two objects.
func EqualsRefOfWindowDefinition(a, b *WindowDefinition) bool {
	return EqualsRefOfWindowDefinitionS(a, b, DefaultEquality)
}

// EqualsRefOfWindowDefinitionS does deep equals between the two objects.
func EqualsRefOfWindowDefinitionS(a, b *WindowDefinition, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsRefOfWindowSpecificationS(a.WindowSpec, b.WindowSpec, f)
}

// EqualsWindowDefinitions does deep equals between the two objects.
func EqualsWindowDefinitions(a, b WindowDefinitions) bool {
	return EqualsWindowDefinitionsS(a, b, DefaultEquality)
}

// EqualsWindowDefinitionsS does deep equals between the two objects.
func EqualsWindowDefinitionsS(a, b WindowDefinitions, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfWindowDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfWindowSpecification does deep equals between the two objects.
func EqualsRefOfWindowSpecification(a, b *WindowSpecification) bool {
	return EqualsRefOfWindowSpecificationS(a, b, DefaultEquality)
}

// EqualsRefOfWindowSpecificationS does deep equals between the two objects.
func EqualsRefOfWindowSpecificationS(a, b *WindowSpecification, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsExprsS(a.PartitionClause, b.PartitionClause, f) &&
		EqualsOrderByS(a.OrderClause, b.OrderClause, f) &&
		EqualsRefOfFrameClauseS(a.FrameClause, b.FrameClause, f)
}

// EqualsRefOfWith does deep equals between the two objects.
func EqualsRefOfWith(a, b *With) bool {
	return EqualsRefOfWithS(a, b, DefaultEquality)
}

// EqualsRefOfWithS does deep equals between the two objects.
func EqualsRefOfWithS(a, b *With, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Recursive == b.Recursive &&
		EqualsSliceOfRefOfCommonTableExprS(a.ctes, b.ctes, f)
}

// EqualsRefOfXorExpr does deep equals between the two objects.
func EqualsRefOfXorExpr(a, b *XorExpr) bool {
	return EqualsRefOfXorExprS(a, b, DefaultEquality)
}

// EqualsRefOfXorExprS does deep equals between the two objects.
func EqualsRefOfXorExprS(a, b *XorExpr, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Left, b.Left, f) &&
		EqualsExprS(a.Right, b.Right, f)
}

// EqualsAggrFunc does deep equals between the two objects.
func EqualsAggrFunc(inA, inB AggrFunc) bool {
	return EqualsAggrFuncS(inA, inB, DefaultEquality)
}

// EqualsAggrFuncS does deep equals between the two objects.
func EqualsAggrFuncS(inA, inB AggrFunc, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvgS(a, b, f)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAndS(a, b, f)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOrS(a, b, f)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXorS(a, b, f)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCountS(a, b, f)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStarS(a, b, f)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExprS(a, b, f)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMaxS(a, b, f)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMinS(a, b, f)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStdS(a, b, f)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDevS(a, b, f)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPopS(a, b, f)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSampS(a, b, f)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSumS(a, b, f)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPopS(a, b, f)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSampS(a, b, f)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVarianceS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsAlterOption does deep equals between the two objects.
func EqualsAlterOption(inA, inB AlterOption) bool {
	return EqualsAlterOptionS(inA, inB, DefaultEquality)
}

// EqualsAlterOptionS does deep equals between the two objects.
func EqualsAlterOptionS(inA, inB AlterOption, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AddColumns:
		b, ok := inB.(*AddColumns)
		if !ok {
			return false
		}
		return EqualsRefOfAddColumnsS(a, b, f)
	case *AddConstraintDefinition:
		b, ok := inB.(*AddConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddConstraintDefinitionS(a, b, f)
	case *AddIndexDefinition:
		b, ok := inB.(*AddIndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddIndexDefinitionS(a, b, f)
	case AlgorithmValue:
		b, ok := inB.(AlgorithmValue)
		if !ok {
			return false
		}
		return a == b
	case *AlterCharset:
		b, ok := inB.(*AlterCharset)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCharsetS(a, b, f)
	case *AlterCheck:
		b, ok := inB.(*AlterCheck)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCheckS(a, b, f)
	case *AlterColumn:
		b, ok := inB.(*AlterColumn)
		if !ok {
			return false
		}
		return EqualsRefOfAlterColumnS(a, b, f)
	case *AlterIndex:
		b, ok := inB.(*AlterIndex)
		if !ok {
			return false
		}
		return EqualsRefOfAlterIndexS(a, b, f)
	case *ChangeColumn:
		b, ok := inB.(*ChangeColumn)
		if !ok {
			return false
		}
		return EqualsRefOfChangeColumnS(a, b, f)
	case *DropColumn:
		b, ok := inB.(*DropColumn)
		if !ok {
			return false
		}
		return EqualsRefOfDropColumnS(a, b, f)
	case *DropKey:
		b, ok := inB.(*DropKey)
		if !ok {
			return false
		}
		return EqualsRefOfDropKeyS(a, b, f)
	case *Force:
		b, ok := inB.(*Force)
		if !ok {
			return false
		}
		return EqualsRefOfForceS(a, b, f)
	case *KeyState:
		b, ok := inB.(*KeyState)
		if !ok {
			return false
		}
		return EqualsRefOfKeyStateS(a, b, f)
	case *LockOption:
		b, ok := inB.(*LockOption)
		if !ok {
			return false
		}
		return EqualsRefOfLockOptionS(a, b, f)
	case *ModifyColumn:
		b, ok := inB.(*ModifyColumn)
		if !ok {
			return false
		}
		return EqualsRefOfModifyColumnS(a, b, f)
	case *OrderByOption:
		b, ok := inB.(*OrderByOption)
		if !ok {
			return false
		}
		return EqualsRefOfOrderByOptionS(a, b, f)
	case *RenameColumn:
		b, ok := inB.(*RenameColumn)
		if !ok {
			return false
		}
		return EqualsRefOfRenameColumnS(a, b, f)
	case *RenameIndex:
		b, ok := inB.(*RenameIndex)
		if !ok {
			return false
		}
		return EqualsRefOfRenameIndexS(a, b, f)
	case *RenameTableName:
		b, ok := inB.(*RenameTableName)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableNameS(a, b, f)
	case TableOptions:
		b, ok := inB.(TableOptions)
		if !ok {
			return false
		}
		return EqualsTableOptionsS(a, b, f)
	case *TablespaceOperation:
		b, ok := inB.(*TablespaceOperation)
		if !ok {
			return false
		}
		return EqualsRefOfTablespaceOperationS(a, b, f)
	case *Validation:
		b, ok := inB.(*Validation)
		if !ok {
			return false
		}
		return EqualsRefOfValidationS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsCallable does deep equals between the two objects.
func EqualsCallable(inA, inB Callable) bool {
	return EqualsCallableS(inA, inB, DefaultEquality)
}

// EqualsCallableS does deep equals between the two objects.
func EqualsCallableS(inA, inB Callable, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExprS(a, b, f)
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvgS(a, b, f)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExprS(a, b, f)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExprS(a, b, f)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExprS(a, b, f)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCountS(a, b, f)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStarS(a, b, f)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExprS(a, b, f)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExprS(a, b, f)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExprS(a, b, f)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExprS(a, b, f)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExprS(a, b, f)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExprS(a, b, f)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExprS(a, b, f)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExprS(a, b, f)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExprS(a, b, f)
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExprS(a, b, f)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExprS(a, b, f)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExprS(a, b, f)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExprS(a, b, f)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExprS(a, b, f)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExprS(a, b, f)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExprS(a, b, f)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExprS(a, b, f)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExprS(a, b, f)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExprS(a, b, f)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExprS(a, b, f)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExprS(a, b, f)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExprS(a, b, f)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExprS(a, b, f)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExprS(a, b, f)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExprS(a, b, f)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExprS(a, b, f)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExprS(a, b, f)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExprS(a, b, f)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExprS(a, b, f)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExprS(a, b, f)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExprS(a, b, f)
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExprS(a, b, f)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMaxS(a, b, f)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExprS(a, b, f)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMinS(a, b, f)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExprS(a, b, f)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindowS(a, b, f)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExprS(a, b, f)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExprS(a, b, f)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExprS(a, b, f)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExprS(a, b, f)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExprS(a, b, f)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExprS(a, b, f)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExprS(a, b, f)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSumS(a, b, f)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExprS(a, b, f)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExprS(a, b, f)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExprS(a, b, f)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExprS(a, b, f)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExprS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsColTuple does deep equals between the two objects.
func EqualsColTuple(inA, inB ColTuple) bool {
	return EqualsColTupleS(inA, inB, DefaultEquality)
}

// EqualsColTupleS does deep equals between the two objects.
func EqualsColTupleS(inA, inB ColTuple, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubqueryS(a, b, f)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTupleS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsConstraintInfo does deep equals between the two objects.
func EqualsConstraintInfo(inA, inB ConstraintInfo) bool {
	return EqualsConstraintInfoS(inA, inB, DefaultEquality)
}

// EqualsConstraintInfoS does deep equals between the two objects.
func EqualsConstraintInfoS(inA, inB ConstraintInfo, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *CheckConstraintDefinition:
		b, ok := inB.(*CheckConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfCheckConstraintDefinitionS(a, b, f)
	case *ForeignKeyDefinition:
		b, ok := inB.(*ForeignKeyDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfForeignKeyDefinitionS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsDBDDLStatement does deep equals between the two objects.
func EqualsDBDDLStatement(inA, inB DBDDLStatement) bool {
	return EqualsDBDDLStatementS(inA, inB, DefaultEquality)
}

// EqualsDBDDLStatementS does deep equals between the two objects.
func EqualsDBDDLStatementS(inA, inB DBDDLStatement, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabaseS(a, b, f)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabaseS(a, b, f)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabaseS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsDDLStatement does deep equals between the two objects.
func EqualsDDLStatement(inA, inB DDLStatement) bool {
	return EqualsDDLStatementS(inA, inB, DefaultEquality)
}

// EqualsDDLStatementS does deep equals between the two objects.
func EqualsDDLStatementS(inA, inB DDLStatement, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTableS(a, b, f)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterViewS(a, b, f)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTableS(a, b, f)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateViewS(a, b, f)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTableS(a, b, f)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropViewS(a, b, f)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableS(a, b, f)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTableS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsExplain does deep equals between the two objects.
func EqualsExplain(inA, inB Explain) bool {
	return EqualsExplainS(inA, inB, DefaultEquality)
}

// EqualsExplainS does deep equals between the two objects.
func EqualsExplainS(inA, inB Explain, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmtS(a, b, f)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTabS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsExpr does deep equals between the two objects.
func EqualsExpr(inA, inB Expr) bool {
	return EqualsExprS(inA, inB, DefaultEquality)
}

// EqualsExprS does deep equals between the two objects.
func EqualsExprS(inA, inB Expr, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AndExpr:
		b, ok := inB.(*AndExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAndExprS(a, b, f)
	case Argument:
		b, ok := inB.(Argument)
		if !ok {
			return false
		}
		return a == b
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExprS(a, b, f)
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvgS(a, b, f)
	case *BetweenExpr:
		b, ok := inB.(*BetweenExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBetweenExprS(a, b, f)
	case *BinaryExpr:
		b, ok := inB.(*BinaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBinaryExprS(a, b, f)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAndS(a, b, f)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOrS(a, b, f)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXorS(a, b, f)
	case BoolVal:
		b, ok := inB.(BoolVal)
		if !ok {
			return false
		}
		return a == b
	case *CaseExpr:
		b, ok := inB.(*CaseExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCaseExprS(a, b, f)
	case *CastExpr:
		b, ok := inB.(*CastExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCastExprS(a, b, f)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExprS(a, b, f)
	case *ColName:
		b, ok := inB.(*ColName)
		if !ok {
			return false
		}
		return EqualsRefOfColNameS(a, b, f)
	case *CollateExpr:
		b, ok := inB.(*CollateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCollateExprS(a, b, f)
	case *ComparisonExpr:
		b, ok := inB.(*ComparisonExpr)
		if !ok {
			return false
		}
		return EqualsRefOfComparisonExprS(a, b, f)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExprS(a, b, f)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExprS(a, b, f)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCountS(a, b, f)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStarS(a, b, f)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExprS(a, b, f)
	case *Default:
		b, ok := inB.(*Default)
		if !ok {
			return false
		}
		return EqualsRefOfDefaultS(a, b, f)
	case *ExistsExpr:
		b, ok := inB.(*ExistsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExistsExprS(a, b, f)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExprS(a, b, f)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExprS(a, b, f)
	case *ExtractedSubquery:
		b, ok := inB.(*ExtractedSubquery)
		if !ok {
			return false
		}
		return EqualsRefOfExtractedSubqueryS(a, b, f)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExprS(a, b, f)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExprS(a, b, f)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExprS(a, b, f)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExprS(a, b, f)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExprS(a, b, f)
	case *IntervalExpr:
		b, ok := inB.(*IntervalExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalExprS(a, b, f)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExprS(a, b, f)
	case *IntroducerExpr:
		b, ok := inB.(*IntroducerExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntroducerExprS(a, b, f)
	case *IsExpr:
		b, ok := inB.(*IsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIsExprS(a, b, f)
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExprS(a, b, f)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExprS(a, b, f)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExprS(a, b, f)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExprS(a, b, f)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExprS(a, b, f)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExprS(a, b, f)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExprS(a, b, f)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExprS(a, b, f)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExprS(a, b, f)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExprS(a, b, f)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExprS(a, b, f)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExprS(a, b, f)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExprS(a, b, f)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExprS(a, b, f)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExprS(a, b, f)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExprS(a, b, f)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExprS(a, b, f)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExprS(a, b, f)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExprS(a, b, f)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExprS(a, b, f)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExprS(a, b, f)
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Literal:
		b, ok := inB.(*Literal)
		if !ok {
			return false
		}
		return EqualsRefOfLiteralS(a, b, f)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExprS(a, b, f)
	case *LockingFunc:
		b, ok := inB.(*LockingFunc)
		if !ok {
			return false
		}
		return EqualsRefOfLockingFuncS(a, b, f)
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExprS(a, b, f)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMaxS(a, b, f)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExprS(a, b, f)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMinS(a, b, f)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExprS(a, b, f)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindowS(a, b, f)
	case *NotExpr:
		b, ok := inB.(*NotExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNotExprS(a, b, f)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExprS(a, b, f)
	case *NullVal:
		b, ok := inB.(*NullVal)
		if !ok {
			return false
		}
		return EqualsRefOfNullValS(a, b, f)
	case *Offset:
		b, ok := inB.(*Offset)
		if !ok {
			return false
		}
		return EqualsRefOfOffsetS(a, b, f)
	case *OrExpr:
		b, ok := inB.(*OrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfOrExprS(a, b, f)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExprS(a, b, f)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExprS(a, b, f)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExprS(a, b, f)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExprS(a, b, f)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExprS(a, b, f)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStdS(a, b, f)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDevS(a, b, f)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPopS(a, b, f)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSampS(a, b, f)
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubqueryS(a, b, f)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExprS(a, b, f)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSumS(a, b, f)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExprS(a, b, f)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExprS(a, b, f)
	case *UnaryExpr:
		b, ok := inB.(*UnaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUnaryExprS(a, b, f)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExprS(a, b, f)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTupleS(a, b, f)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExprS(a, b, f)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPopS(a, b, f)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSampS(a, b, f)
	case *Variable:
		b, ok := inB.(*Variable)
		if !ok {
			return false
		}
		return EqualsRefOfVariableS(a, b, f)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVarianceS(a, b, f)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExprS(a, b, f)
	case *XorExpr:
		b, ok := inB.(*XorExpr)
		if !ok {
			return false
		}
		return EqualsRefOfXorExprS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsInsertRows does deep equals between the two objects.
func EqualsInsertRows(inA, inB InsertRows) bool {
	return EqualsInsertRowsS(inA, inB, DefaultEquality)
}

// EqualsInsertRowsS does deep equals between the two objects.
func EqualsInsertRowsS(inA, inB InsertRows, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelectS(a, b, f)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnionS(a, b, f)
	case Values:
		b, ok := inB.(Values)
		if !ok {
			return false
		}
		return EqualsValuesS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsSelectExpr does deep equals between the two objects.
func EqualsSelectExpr(inA, inB SelectExpr) bool {
	return EqualsSelectExprS(inA, inB, DefaultEquality)
}

// EqualsSelectExprS does deep equals between the two objects.
func EqualsSelectExprS(inA, inB SelectExpr, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AliasedExpr:
		b, ok := inB.(*AliasedExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedExprS(a, b, f)
	case *Nextval:
		b, ok := inB.(*Nextval)
		if !ok {
			return false
		}
		return EqualsRefOfNextvalS(a, b, f)
	case *StarExpr:
		b, ok := inB.(*StarExpr)
		if !ok {
			return false
		}
		return EqualsRefOfStarExprS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsSelectStatement does deep equals between the two objects.
func EqualsSelectStatement(inA, inB SelectStatement) bool {
	return EqualsSelectStatementS(inA, inB, DefaultEquality)
}

// EqualsSelectStatementS does deep equals between the two objects.
func EqualsSelectStatementS(inA, inB SelectStatement, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelectS(a, b, f)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnionS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsShowInternal does deep equals between the two objects.
func EqualsShowInternal(inA, inB ShowInternal) bool {
	return EqualsShowInternalS(inA, inB, DefaultEquality)
}

// EqualsShowInternalS does deep equals between the two objects.
func EqualsShowInternalS(inA, inB ShowInternal, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ShowBasic:
		b, ok := inB.(*ShowBasic)
		if !ok {
			return false
		}
		return EqualsRefOfShowBasicS(a, b, f)
	case *ShowCreate:
		b, ok := inB.(*ShowCreate)
		if !ok {
			return false
		}
		return EqualsRefOfShowCreateS(a, b, f)
	case *ShowOther:
		b, ok := inB.(*ShowOther)
		if !ok {
			return false
		}
		return EqualsRefOfShowOtherS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsSimpleTableExpr does deep equals between the two objects.
func EqualsSimpleTableExpr(inA, inB SimpleTableExpr) bool {
	return EqualsSimpleTableExprS(inA, inB, DefaultEquality)
}

// EqualsSimpleTableExprS does deep equals between the two objects.
func EqualsSimpleTableExprS(inA, inB SimpleTableExpr, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *DerivedTable:
		b, ok := inB.(*DerivedTable)
		if !ok {
			return false
		}
		return EqualsRefOfDerivedTableS(a, b, f)
	case TableName:
		b, ok := inB.(TableName)
		if !ok {
			return false
		}
		return EqualsTableNameS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsStatement does deep equals between the two objects.
func EqualsStatement(inA, inB Statement) bool {
	return EqualsStatementS(inA, inB, DefaultEquality)
}

// EqualsStatementS does deep equals between the two objects.
func EqualsStatementS(inA, inB Statement, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabaseS(a, b, f)
	case *AlterMigration:
		b, ok := inB.(*AlterMigration)
		if !ok {
			return false
		}
		return EqualsRefOfAlterMigrationS(a, b, f)
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTableS(a, b, f)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterViewS(a, b, f)
	case *AlterVschema:
		b, ok := inB.(*AlterVschema)
		if !ok {
			return false
		}
		return EqualsRefOfAlterVschemaS(a, b, f)
	case *Begin:
		b, ok := inB.(*Begin)
		if !ok {
			return false
		}
		return EqualsRefOfBeginS(a, b, f)
	case *CallProc:
		b, ok := inB.(*CallProc)
		if !ok {
			return false
		}
		return EqualsRefOfCallProcS(a, b, f)
	case *CommentOnly:
		b, ok := inB.(*CommentOnly)
		if !ok {
			return false
		}
		return EqualsRefOfCommentOnlyS(a, b, f)
	case *Commit:
		b, ok := inB.(*Commit)
		if !ok {
			return false
		}
		return EqualsRefOfCommitS(a, b, f)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabaseS(a, b, f)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTableS(a, b, f)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateViewS(a, b, f)
	case *DeallocateStmt:
		b, ok := inB.(*DeallocateStmt)
		if !ok {
			return false
		}
		return EqualsRefOfDeallocateStmtS(a, b, f)
	case *Delete:
		b, ok := inB.(*Delete)
		if !ok {
			return false
		}
		return EqualsRefOfDeleteS(a, b, f)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabaseS(a, b, f)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTableS(a, b, f)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropViewS(a, b, f)
	case *ExecuteStmt:
		b, ok := inB.(*ExecuteStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExecuteStmtS(a, b, f)
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmtS(a, b, f)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTabS(a, b, f)
	case *Flush:
		b, ok := inB.(*Flush)
		if !ok {
			return false
		}
		return EqualsRefOfFlushS(a, b, f)
	case *Insert:
		b, ok := inB.(*Insert)
		if !ok {
			return false
		}
		return EqualsRefOfInsertS(a, b, f)
	case *Load:
		b, ok := inB.(*Load)
		if !ok {
			return false
		}
		return EqualsRefOfLoadS(a, b, f)
	case *LockTables:
		b, ok := inB.(*LockTables)
		if !ok {
			return false
		}
		return EqualsRefOfLockTablesS(a, b, f)
	case *OtherAdmin:
		b, ok := inB.(*OtherAdmin)
		if !ok {
			return false
		}
		return EqualsRefOfOtherAdminS(a, b, f)
	case *OtherRead:
		b, ok := inB.(*OtherRead)
		if !ok {
			return false
		}
		return EqualsRefOfOtherReadS(a, b, f)
	case *PrepareStmt:
		b, ok := inB.(*PrepareStmt)
		if !ok {
			return false
		}
		return EqualsRefOfPrepareStmtS(a, b, f)
	case *Release:
		b, ok := inB.(*Release)
		if !ok {
			return false
		}
		return EqualsRefOfReleaseS(a, b, f)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableS(a, b, f)
	case *RevertMigration:
		b, ok := inB.(*RevertMigration)
		if !ok {
			return false
		}
		return EqualsRefOfRevertMigrationS(a, b, f)
	case *Rollback:
		b, ok := inB.(*Rollback)
		if !ok {
			return false
		}
		return EqualsRefOfRollbackS(a, b, f)
	case *SRollback:
		b, ok := inB.(*SRollback)
		if !ok {
			return false
		}
		return EqualsRefOfSRollbackS(a, b, f)
	case *Savepoint:
		b, ok := inB.(*Savepoint)
		if !ok {
			return false
		}
		return EqualsRefOfSavepointS(a, b, f)
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelectS(a, b, f)
	case *Set:
		b, ok := inB.(*Set)
		if !ok {
			return false
		}
		return EqualsRefOfSetS(a, b, f)
	case *Show:
		b, ok := inB.(*Show)
		if !ok {
			return false
		}
		return EqualsRefOfShowS(a, b, f)
	case *ShowMigrationLogs:
		b, ok := inB.(*ShowMigrationLogs)
		if !ok {
			return false
		}
		return EqualsRefOfShowMigrationLogsS(a, b, f)
	case *ShowThrottledApps:
		b, ok := inB.(*ShowThrottledApps)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottledAppsS(a, b, f)
	case *ShowThrottlerStatus:
		b, ok := inB.(*ShowThrottlerStatus)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottlerStatusS(a, b, f)
	case *Stream:
		b, ok := inB.(*Stream)
		if !ok {
			return false
		}
		return EqualsRefOfStreamS(a, b, f)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTableS(a, b, f)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnionS(a, b, f)
	case *UnlockTables:
		b, ok := inB.(*UnlockTables)
		if !ok {
			return false
		}
		return EqualsRefOfUnlockTablesS(a, b, f)
	case *Update:
		b, ok := inB.(*Update)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateS(a, b, f)
	case *Use:
		b, ok := inB.(*Use)
		if !ok {
			return false
		}
		return EqualsRefOfUseS(a, b, f)
	case *VStream:
		b, ok := inB.(*VStream)
		if !ok {
			return false
		}
		return EqualsRefOfVStreamS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsTableExpr does deep equals between the two objects.
func EqualsTableExpr(inA, inB TableExpr) bool {
	return EqualsTableExprS(inA, inB, DefaultEquality)
}

// EqualsTableExprS does deep equals between the two objects.
func EqualsTableExprS(inA, inB TableExpr, f ASTComparison) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AliasedTableExpr:
		b, ok := inB.(*AliasedTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedTableExprS(a, b, f)
	case *JSONTableExpr:
		b, ok := inB.(*JSONTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONTableExprS(a, b, f)
	case *JoinTableExpr:
		b, ok := inB.(*JoinTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJoinTableExprS(a, b, f)
	case *ParenTableExpr:
		b, ok := inB.(*ParenTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfParenTableExprS(a, b, f)
	default:
		// this should never happen
		return false
	}
}

// EqualsSliceOfRefOfColumnDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfColumnDefinition(a, b []*ColumnDefinition) bool {
	return EqualsSliceOfRefOfColumnDefinitionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfColumnDefinitionS does deep equals between the two objects.
func EqualsSliceOfRefOfColumnDefinitionS(a, b []*ColumnDefinition, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfColumnDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfBool does deep equals between the two objects.
func EqualsRefOfBool(a, b *bool) bool {
	return EqualsRefOfBoolS(a, b, DefaultEquality)
}

// EqualsRefOfBoolS does deep equals between the two objects.
func EqualsRefOfBoolS(a, b *bool, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsSliceOfDatabaseOption does deep equals between the two objects.
func EqualsSliceOfDatabaseOption(a, b []DatabaseOption) bool {
	return EqualsSliceOfDatabaseOptionS(a, b, DefaultEquality)
}

// EqualsSliceOfDatabaseOptionS does deep equals between the two objects.
func EqualsSliceOfDatabaseOptionS(a, b []DatabaseOption, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsDatabaseOptionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfAlterOption does deep equals between the two objects.
func EqualsSliceOfAlterOption(a, b []AlterOption) bool {
	return EqualsSliceOfAlterOptionS(a, b, DefaultEquality)
}

// EqualsSliceOfAlterOptionS does deep equals between the two objects.
func EqualsSliceOfAlterOptionS(a, b []AlterOption, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAlterOptionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfIdentifierCI does deep equals between the two objects.
func EqualsSliceOfIdentifierCI(a, b []IdentifierCI) bool {
	return EqualsSliceOfIdentifierCIS(a, b, DefaultEquality)
}

// EqualsSliceOfIdentifierCIS does deep equals between the two objects.
func EqualsSliceOfIdentifierCIS(a, b []IdentifierCI, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCIS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfTxAccessMode does deep equals between the two objects.
func EqualsSliceOfTxAccessMode(a, b []TxAccessMode) bool {
	return EqualsSliceOfTxAccessModeS(a, b, DefaultEquality)
}

// EqualsSliceOfTxAccessModeS does deep equals between the two objects.
func EqualsSliceOfTxAccessModeS(a, b []TxAccessMode, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfWhen does deep equals between the two objects.
func EqualsSliceOfRefOfWhen(a, b []*When) bool {
	return EqualsSliceOfRefOfWhenS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfWhenS does deep equals between the two objects.
func EqualsSliceOfRefOfWhenS(a, b []*When, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfWhenS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsColumnType does deep equals between the two objects.
func EqualsColumnType(a, b ColumnType) bool {
	return EqualsColumnTypeS(a, b, DefaultEquality)
}

// EqualsColumnTypeS does deep equals between the two objects.
func EqualsColumnTypeS(a, b ColumnType, f ASTComparison) bool {
	return a.Type == b.Type &&
		a.Unsigned == b.Unsigned &&
		a.Zerofill == b.Zerofill &&
		EqualsRefOfColumnTypeOptionsS(a.Options, b.Options, f) &&
		EqualsRefOfLiteralS(a.Length, b.Length, f) &&
		EqualsRefOfLiteralS(a.Scale, b.Scale, f) &&
		EqualsColumnCharsetS(a.Charset, b.Charset, f) &&
		EqualsSliceOfStringS(a.EnumValues, b.EnumValues, f)
}

// EqualsRefOfColumnTypeOptions does deep equals between the two objects.
func EqualsRefOfColumnTypeOptions(a, b *ColumnTypeOptions) bool {
	return EqualsRefOfColumnTypeOptionsS(a, b, DefaultEquality)
}

// EqualsRefOfColumnTypeOptionsS does deep equals between the two objects.
func EqualsRefOfColumnTypeOptionsS(a, b *ColumnTypeOptions, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Autoincrement == b.Autoincrement &&
		a.Collate == b.Collate &&
		EqualsRefOfBoolS(a.Null, b.Null, f) &&
		EqualsExprS(a.Default, b.Default, f) &&
		EqualsExprS(a.OnUpdate, b.OnUpdate, f) &&
		EqualsExprS(a.As, b.As, f) &&
		EqualsRefOfLiteralS(a.Comment, b.Comment, f) &&
		a.Storage == b.Storage &&
		EqualsRefOfReferenceDefinitionS(a.Reference, b.Reference, f) &&
		a.KeyOpt == b.KeyOpt &&
		EqualsRefOfBoolS(a.Invisible, b.Invisible, f) &&
		a.Format == b.Format &&
		EqualsRefOfLiteralS(a.EngineAttribute, b.EngineAttribute, f) &&
		EqualsRefOfLiteralS(a.SecondaryEngineAttribute, b.SecondaryEngineAttribute, f) &&
		EqualsRefOfLiteralS(a.SRID, b.SRID, f)
}

// EqualsColumnCharset does deep equals between the two objects.
func EqualsColumnCharset(a, b ColumnCharset) bool {
	return EqualsColumnCharsetS(a, b, DefaultEquality)
}

// EqualsColumnCharsetS does deep equals between the two objects.
func EqualsColumnCharsetS(a, b ColumnCharset, f ASTComparison) bool {
	return a.Name == b.Name &&
		a.Binary == b.Binary
}

// EqualsSliceOfString does deep equals between the two objects.
func EqualsSliceOfString(a, b []string) bool {
	return EqualsSliceOfStringS(a, b, DefaultEquality)
}

// EqualsSliceOfStringS does deep equals between the two objects.
func EqualsSliceOfStringS(a, b []string, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfVariable does deep equals between the two objects.
func EqualsSliceOfRefOfVariable(a, b []*Variable) bool {
	return EqualsSliceOfRefOfVariableS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfVariableS does deep equals between the two objects.
func EqualsSliceOfRefOfVariableS(a, b []*Variable, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfVariableS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfIdentifierCI does deep equals between the two objects.
func EqualsRefOfIdentifierCI(a, b *IdentifierCI) bool {
	return EqualsRefOfIdentifierCIS(a, b, DefaultEquality)
}

// EqualsRefOfIdentifierCIS does deep equals between the two objects.
func EqualsRefOfIdentifierCIS(a, b *IdentifierCI, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.val == b.val &&
		a.lowered == b.lowered
}

// EqualsRefOfIdentifierCS does deep equals between the two objects.
func EqualsRefOfIdentifierCS(a, b *IdentifierCS) bool {
	return EqualsRefOfIdentifierCSS(a, b, DefaultEquality)
}

// EqualsRefOfIdentifierCSS does deep equals between the two objects.
func EqualsRefOfIdentifierCSS(a, b *IdentifierCS, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsSliceOfRefOfIndexColumn does deep equals between the two objects.
func EqualsSliceOfRefOfIndexColumn(a, b []*IndexColumn) bool {
	return EqualsSliceOfRefOfIndexColumnS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfIndexColumnS does deep equals between the two objects.
func EqualsSliceOfRefOfIndexColumnS(a, b []*IndexColumn, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexColumnS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfIndexOption does deep equals between the two objects.
func EqualsSliceOfRefOfIndexOption(a, b []*IndexOption) bool {
	return EqualsSliceOfRefOfIndexOptionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfIndexOptionS does deep equals between the two objects.
func EqualsSliceOfRefOfIndexOptionS(a, b []*IndexOption, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexOptionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfExpr does deep equals between the two objects.
func EqualsSliceOfExpr(a, b []Expr) bool {
	return EqualsSliceOfExprS(a, b, DefaultEquality)
}

// EqualsSliceOfExprS does deep equals between the two objects.
func EqualsSliceOfExprS(a, b []Expr, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfJSONObjectParam does deep equals between the two objects.
func EqualsSliceOfRefOfJSONObjectParam(a, b []*JSONObjectParam) bool {
	return EqualsSliceOfRefOfJSONObjectParamS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfJSONObjectParamS does deep equals between the two objects.
func EqualsSliceOfRefOfJSONObjectParamS(a, b []*JSONObjectParam, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfJSONObjectParamS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfJSONObjectParam does deep equals between the two objects.
func EqualsRefOfJSONObjectParam(a, b *JSONObjectParam) bool {
	return EqualsRefOfJSONObjectParamS(a, b, DefaultEquality)
}

// EqualsRefOfJSONObjectParamS does deep equals between the two objects.
func EqualsRefOfJSONObjectParamS(a, b *JSONObjectParam, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Key, b.Key, f) &&
		EqualsExprS(a.Value, b.Value, f)
}

// EqualsSliceOfRefOfJtColumnDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfJtColumnDefinition(a, b []*JtColumnDefinition) bool {
	return EqualsSliceOfRefOfJtColumnDefinitionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfJtColumnDefinitionS does deep equals between the two objects.
func EqualsSliceOfRefOfJtColumnDefinitionS(a, b []*JtColumnDefinition, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfJtColumnDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfJtOrdinalColDef does deep equals between the two objects.
func EqualsRefOfJtOrdinalColDef(a, b *JtOrdinalColDef) bool {
	return EqualsRefOfJtOrdinalColDefS(a, b, DefaultEquality)
}

// EqualsRefOfJtOrdinalColDefS does deep equals between the two objects.
func EqualsRefOfJtOrdinalColDefS(a, b *JtOrdinalColDef, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Name, b.Name, f)
}

// EqualsRefOfJtPathColDef does deep equals between the two objects.
func EqualsRefOfJtPathColDef(a, b *JtPathColDef) bool {
	return EqualsRefOfJtPathColDefS(a, b, DefaultEquality)
}

// EqualsRefOfJtPathColDefS does deep equals between the two objects.
func EqualsRefOfJtPathColDefS(a, b *JtPathColDef, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.JtColExists == b.JtColExists &&
		EqualsIdentifierCIS(a.Name, b.Name, f) &&
		EqualsColumnTypeS(a.Type, b.Type, f) &&
		EqualsExprS(a.Path, b.Path, f) &&
		EqualsRefOfJtOnResponseS(a.EmptyOnResponse, b.EmptyOnResponse, f) &&
		EqualsRefOfJtOnResponseS(a.ErrorOnResponse, b.ErrorOnResponse, f)
}

// EqualsRefOfJtNestedPathColDef does deep equals between the two objects.
func EqualsRefOfJtNestedPathColDef(a, b *JtNestedPathColDef) bool {
	return EqualsRefOfJtNestedPathColDefS(a, b, DefaultEquality)
}

// EqualsRefOfJtNestedPathColDefS does deep equals between the two objects.
func EqualsRefOfJtNestedPathColDefS(a, b *JtNestedPathColDef, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprS(a.Path, b.Path, f) &&
		EqualsSliceOfRefOfJtColumnDefinitionS(a.Columns, b.Columns, f)
}

// EqualsTableAndLockTypes does deep equals between the two objects.
func EqualsTableAndLockTypes(a, b TableAndLockTypes) bool {
	return EqualsTableAndLockTypesS(a, b, DefaultEquality)
}

// EqualsTableAndLockTypesS does deep equals between the two objects.
func EqualsTableAndLockTypesS(a, b TableAndLockTypes, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfTableAndLockTypeS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfColName does deep equals between the two objects.
func EqualsSliceOfRefOfColName(a, b []*ColName) bool {
	return EqualsSliceOfRefOfColNameS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfColNameS does deep equals between the two objects.
func EqualsSliceOfRefOfColNameS(a, b []*ColName, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfColNameS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsComments does deep equals between the two objects.
func EqualsComments(a, b Comments) bool {
	return EqualsCommentsS(a, b, DefaultEquality)
}

// EqualsCommentsS does deep equals between the two objects.
func EqualsCommentsS(a, b Comments, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsRefOfInt does deep equals between the two objects.
func EqualsRefOfInt(a, b *int) bool {
	return EqualsRefOfIntS(a, b, DefaultEquality)
}

// EqualsRefOfIntS does deep equals between the two objects.
func EqualsRefOfIntS(a, b *int, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsSliceOfRefOfPartitionDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfPartitionDefinition(a, b []*PartitionDefinition) bool {
	return EqualsSliceOfRefOfPartitionDefinitionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfPartitionDefinitionS does deep equals between the two objects.
func EqualsSliceOfRefOfPartitionDefinitionS(a, b []*PartitionDefinition, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfPartitionDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfRenameTablePair does deep equals between the two objects.
func EqualsSliceOfRefOfRenameTablePair(a, b []*RenameTablePair) bool {
	return EqualsSliceOfRefOfRenameTablePairS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfRenameTablePairS does deep equals between the two objects.
func EqualsSliceOfRefOfRenameTablePairS(a, b []*RenameTablePair, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfRenameTablePairS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfRootNode does deep equals between the two objects.
func EqualsRefOfRootNode(a, b *RootNode) bool {
	return EqualsRefOfRootNodeS(a, b, DefaultEquality)
}

// EqualsRefOfRootNodeS does deep equals between the two objects.
func EqualsRefOfRootNodeS(a, b *RootNode, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSQLNodeS(a.SQLNode, b.SQLNode, f)
}

// EqualsSliceOfTableExpr does deep equals between the two objects.
func EqualsSliceOfTableExpr(a, b []TableExpr) bool {
	return EqualsSliceOfTableExprS(a, b, DefaultEquality)
}

// EqualsSliceOfTableExprS does deep equals between the two objects.
func EqualsSliceOfTableExprS(a, b []TableExpr, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfTableName does deep equals between the two objects.
func EqualsRefOfTableName(a, b *TableName) bool {
	return EqualsRefOfTableNameS(a, b, DefaultEquality)
}

// EqualsRefOfTableNameS does deep equals between the two objects.
func EqualsRefOfTableNameS(a, b *TableName, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCSS(a.Name, b.Name, f) &&
		EqualsIdentifierCSS(a.Qualifier, b.Qualifier, f)
}

// EqualsRefOfTableOption does deep equals between the two objects.
func EqualsRefOfTableOption(a, b *TableOption) bool {
	return EqualsRefOfTableOptionS(a, b, DefaultEquality)
}

// EqualsRefOfTableOptionS does deep equals between the two objects.
func EqualsRefOfTableOptionS(a, b *TableOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.String == b.String &&
		a.CaseSensitive == b.CaseSensitive &&
		EqualsRefOfLiteralS(a.Value, b.Value, f) &&
		EqualsTableNamesS(a.Tables, b.Tables, f)
}

// EqualsSliceOfRefOfIndexDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfIndexDefinition(a, b []*IndexDefinition) bool {
	return EqualsSliceOfRefOfIndexDefinitionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfIndexDefinitionS does deep equals between the two objects.
func EqualsSliceOfRefOfIndexDefinitionS(a, b []*IndexDefinition, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfConstraintDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfConstraintDefinition(a, b []*ConstraintDefinition) bool {
	return EqualsSliceOfRefOfConstraintDefinitionS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfConstraintDefinitionS does deep equals between the two objects.
func EqualsSliceOfRefOfConstraintDefinitionS(a, b []*ConstraintDefinition, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfConstraintDefinitionS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsRefOfVindexParam does deep equals between the two objects.
func EqualsRefOfVindexParam(a, b *VindexParam) bool {
	return EqualsRefOfVindexParamS(a, b, DefaultEquality)
}

// EqualsRefOfVindexParamS does deep equals between the two objects.
func EqualsRefOfVindexParamS(a, b *VindexParam, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Val == b.Val &&
		EqualsIdentifierCIS(a.Key, b.Key, f)
}

// EqualsSliceOfVindexParam does deep equals between the two objects.
func EqualsSliceOfVindexParam(a, b []VindexParam) bool {
	return EqualsSliceOfVindexParamS(a, b, DefaultEquality)
}

// EqualsSliceOfVindexParamS does deep equals between the two objects.
func EqualsSliceOfVindexParamS(a, b []VindexParam, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsVindexParamS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfCommonTableExpr does deep equals between the two objects.
func EqualsSliceOfRefOfCommonTableExpr(a, b []*CommonTableExpr) bool {
	return EqualsSliceOfRefOfCommonTableExprS(a, b, DefaultEquality)
}

// EqualsSliceOfRefOfCommonTableExprS does deep equals between the two objects.
func EqualsSliceOfRefOfCommonTableExprS(a, b []*CommonTableExpr, f ASTComparison) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfCommonTableExprS(a[i], b[i], f) {
			return false
		}
	}
	return true
}

// EqualsDatabaseOption does deep equals between the two objects.
func EqualsDatabaseOption(a, b DatabaseOption) bool {
	return EqualsDatabaseOptionS(a, b, DefaultEquality)
}

// EqualsDatabaseOptionS does deep equals between the two objects.
func EqualsDatabaseOptionS(a, b DatabaseOption, f ASTComparison) bool {
	return a.IsDefault == b.IsDefault &&
		a.Value == b.Value &&
		a.Type == b.Type
}

// EqualsRefOfColumnCharset does deep equals between the two objects.
func EqualsRefOfColumnCharset(a, b *ColumnCharset) bool {
	return EqualsRefOfColumnCharsetS(a, b, DefaultEquality)
}

// EqualsRefOfColumnCharsetS does deep equals between the two objects.
func EqualsRefOfColumnCharsetS(a, b *ColumnCharset, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Binary == b.Binary
}

// EqualsRefOfIndexColumn does deep equals between the two objects.
func EqualsRefOfIndexColumn(a, b *IndexColumn) bool {
	return EqualsRefOfIndexColumnS(a, b, DefaultEquality)
}

// EqualsRefOfIndexColumnS does deep equals between the two objects.
func EqualsRefOfIndexColumnS(a, b *IndexColumn, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCIS(a.Column, b.Column, f) &&
		EqualsRefOfLiteralS(a.Length, b.Length, f) &&
		EqualsExprS(a.Expression, b.Expression, f) &&
		a.Direction == b.Direction
}

// EqualsRefOfIndexOption does deep equals between the two objects.
func EqualsRefOfIndexOption(a, b *IndexOption) bool {
	return EqualsRefOfIndexOptionS(a, b, DefaultEquality)
}

// EqualsRefOfIndexOptionS does deep equals between the two objects.
func EqualsRefOfIndexOptionS(a, b *IndexOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.String == b.String &&
		EqualsRefOfLiteralS(a.Value, b.Value, f)
}

// EqualsRefOfTableAndLockType does deep equals between the two objects.
func EqualsRefOfTableAndLockType(a, b *TableAndLockType) bool {
	return EqualsRefOfTableAndLockTypeS(a, b, DefaultEquality)
}

// EqualsRefOfTableAndLockTypeS does deep equals between the two objects.
func EqualsRefOfTableAndLockTypeS(a, b *TableAndLockType, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExprS(a.Table, b.Table, f) &&
		a.Lock == b.Lock
}

// EqualsRefOfRenameTablePair does deep equals between the two objects.
func EqualsRefOfRenameTablePair(a, b *RenameTablePair) bool {
	return EqualsRefOfRenameTablePairS(a, b, DefaultEquality)
}

// EqualsRefOfRenameTablePairS does deep equals between the two objects.
func EqualsRefOfRenameTablePairS(a, b *RenameTablePair, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableNameS(a.FromTable, b.FromTable, f) &&
		EqualsTableNameS(a.ToTable, b.ToTable, f)
}

// EqualsRefOfDatabaseOption does deep equals between the two objects.
func EqualsRefOfDatabaseOption(a, b *DatabaseOption) bool {
	return EqualsRefOfDatabaseOptionS(a, b, DefaultEquality)
}

// EqualsRefOfDatabaseOptionS does deep equals between the two objects.
func EqualsRefOfDatabaseOptionS(a, b *DatabaseOption, f ASTComparison) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsDefault == b.IsDefault &&
		a.Value == b.Value &&
		a.Type == b.Type
}
