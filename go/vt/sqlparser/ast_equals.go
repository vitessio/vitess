/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

// EqualsSQLNode does deep equals between the two objects.
func EqualsSQLNode(inA, inB SQLNode) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case AccessMode:
		b, ok := inB.(AccessMode)
		if !ok {
			return false
		}
		return a == b
	case *AddColumns:
		b, ok := inB.(*AddColumns)
		if !ok {
			return false
		}
		return EqualsRefOfAddColumns(a, b)
	case *AddConstraintDefinition:
		b, ok := inB.(*AddConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddConstraintDefinition(a, b)
	case *AddIndexDefinition:
		b, ok := inB.(*AddIndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddIndexDefinition(a, b)
	case AlgorithmValue:
		b, ok := inB.(AlgorithmValue)
		if !ok {
			return false
		}
		return a == b
	case *AliasedExpr:
		b, ok := inB.(*AliasedExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedExpr(a, b)
	case *AliasedTableExpr:
		b, ok := inB.(*AliasedTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedTableExpr(a, b)
	case *AlterCharset:
		b, ok := inB.(*AlterCharset)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCharset(a, b)
	case *AlterCheck:
		b, ok := inB.(*AlterCheck)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCheck(a, b)
	case *AlterColumn:
		b, ok := inB.(*AlterColumn)
		if !ok {
			return false
		}
		return EqualsRefOfAlterColumn(a, b)
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabase(a, b)
	case *AlterIndex:
		b, ok := inB.(*AlterIndex)
		if !ok {
			return false
		}
		return EqualsRefOfAlterIndex(a, b)
	case *AlterMigration:
		b, ok := inB.(*AlterMigration)
		if !ok {
			return false
		}
		return EqualsRefOfAlterMigration(a, b)
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTable(a, b)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterView(a, b)
	case *AlterVschema:
		b, ok := inB.(*AlterVschema)
		if !ok {
			return false
		}
		return EqualsRefOfAlterVschema(a, b)
	case *AndExpr:
		b, ok := inB.(*AndExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAndExpr(a, b)
	case Argument:
		b, ok := inB.(Argument)
		if !ok {
			return false
		}
		return a == b
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExpr(a, b)
	case *AutoIncSpec:
		b, ok := inB.(*AutoIncSpec)
		if !ok {
			return false
		}
		return EqualsRefOfAutoIncSpec(a, b)
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvg(a, b)
	case *Begin:
		b, ok := inB.(*Begin)
		if !ok {
			return false
		}
		return EqualsRefOfBegin(a, b)
	case *BetweenExpr:
		b, ok := inB.(*BetweenExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBetweenExpr(a, b)
	case *BinaryExpr:
		b, ok := inB.(*BinaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBinaryExpr(a, b)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAnd(a, b)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOr(a, b)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXor(a, b)
	case BoolVal:
		b, ok := inB.(BoolVal)
		if !ok {
			return false
		}
		return a == b
	case *CallProc:
		b, ok := inB.(*CallProc)
		if !ok {
			return false
		}
		return EqualsRefOfCallProc(a, b)
	case *CaseExpr:
		b, ok := inB.(*CaseExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCaseExpr(a, b)
	case *CastExpr:
		b, ok := inB.(*CastExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCastExpr(a, b)
	case *ChangeColumn:
		b, ok := inB.(*ChangeColumn)
		if !ok {
			return false
		}
		return EqualsRefOfChangeColumn(a, b)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExpr(a, b)
	case *CheckConstraintDefinition:
		b, ok := inB.(*CheckConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfCheckConstraintDefinition(a, b)
	case *ColName:
		b, ok := inB.(*ColName)
		if !ok {
			return false
		}
		return EqualsRefOfColName(a, b)
	case *CollateExpr:
		b, ok := inB.(*CollateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCollateExpr(a, b)
	case *ColumnDefinition:
		b, ok := inB.(*ColumnDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfColumnDefinition(a, b)
	case *ColumnType:
		b, ok := inB.(*ColumnType)
		if !ok {
			return false
		}
		return EqualsRefOfColumnType(a, b)
	case Columns:
		b, ok := inB.(Columns)
		if !ok {
			return false
		}
		return EqualsColumns(a, b)
	case *CommentOnly:
		b, ok := inB.(*CommentOnly)
		if !ok {
			return false
		}
		return EqualsRefOfCommentOnly(a, b)
	case *Commit:
		b, ok := inB.(*Commit)
		if !ok {
			return false
		}
		return EqualsRefOfCommit(a, b)
	case *CommonTableExpr:
		b, ok := inB.(*CommonTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCommonTableExpr(a, b)
	case *ComparisonExpr:
		b, ok := inB.(*ComparisonExpr)
		if !ok {
			return false
		}
		return EqualsRefOfComparisonExpr(a, b)
	case *ConstraintDefinition:
		b, ok := inB.(*ConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfConstraintDefinition(a, b)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExpr(a, b)
	case *ConvertType:
		b, ok := inB.(*ConvertType)
		if !ok {
			return false
		}
		return EqualsRefOfConvertType(a, b)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExpr(a, b)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCount(a, b)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStar(a, b)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabase(a, b)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTable(a, b)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateView(a, b)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExpr(a, b)
	case *DeallocateStmt:
		b, ok := inB.(*DeallocateStmt)
		if !ok {
			return false
		}
		return EqualsRefOfDeallocateStmt(a, b)
	case *Default:
		b, ok := inB.(*Default)
		if !ok {
			return false
		}
		return EqualsRefOfDefault(a, b)
	case *Definer:
		b, ok := inB.(*Definer)
		if !ok {
			return false
		}
		return EqualsRefOfDefiner(a, b)
	case *Delete:
		b, ok := inB.(*Delete)
		if !ok {
			return false
		}
		return EqualsRefOfDelete(a, b)
	case *DerivedTable:
		b, ok := inB.(*DerivedTable)
		if !ok {
			return false
		}
		return EqualsRefOfDerivedTable(a, b)
	case *DropColumn:
		b, ok := inB.(*DropColumn)
		if !ok {
			return false
		}
		return EqualsRefOfDropColumn(a, b)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabase(a, b)
	case *DropKey:
		b, ok := inB.(*DropKey)
		if !ok {
			return false
		}
		return EqualsRefOfDropKey(a, b)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTable(a, b)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropView(a, b)
	case *ExecuteStmt:
		b, ok := inB.(*ExecuteStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExecuteStmt(a, b)
	case *ExistsExpr:
		b, ok := inB.(*ExistsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExistsExpr(a, b)
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmt(a, b)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTab(a, b)
	case Exprs:
		b, ok := inB.(Exprs)
		if !ok {
			return false
		}
		return EqualsExprs(a, b)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExpr(a, b)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExpr(a, b)
	case *ExtractedSubquery:
		b, ok := inB.(*ExtractedSubquery)
		if !ok {
			return false
		}
		return EqualsRefOfExtractedSubquery(a, b)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExpr(a, b)
	case *Flush:
		b, ok := inB.(*Flush)
		if !ok {
			return false
		}
		return EqualsRefOfFlush(a, b)
	case *Force:
		b, ok := inB.(*Force)
		if !ok {
			return false
		}
		return EqualsRefOfForce(a, b)
	case *ForeignKeyDefinition:
		b, ok := inB.(*ForeignKeyDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfForeignKeyDefinition(a, b)
	case *FrameClause:
		b, ok := inB.(*FrameClause)
		if !ok {
			return false
		}
		return EqualsRefOfFrameClause(a, b)
	case *FramePoint:
		b, ok := inB.(*FramePoint)
		if !ok {
			return false
		}
		return EqualsRefOfFramePoint(a, b)
	case *FromFirstLastClause:
		b, ok := inB.(*FromFirstLastClause)
		if !ok {
			return false
		}
		return EqualsRefOfFromFirstLastClause(a, b)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExpr(a, b)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExpr(a, b)
	case GroupBy:
		b, ok := inB.(GroupBy)
		if !ok {
			return false
		}
		return EqualsGroupBy(a, b)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExpr(a, b)
	case IdentifierCI:
		b, ok := inB.(IdentifierCI)
		if !ok {
			return false
		}
		return EqualsIdentifierCI(a, b)
	case IdentifierCS:
		b, ok := inB.(IdentifierCS)
		if !ok {
			return false
		}
		return EqualsIdentifierCS(a, b)
	case *IndexDefinition:
		b, ok := inB.(*IndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfIndexDefinition(a, b)
	case *IndexHint:
		b, ok := inB.(*IndexHint)
		if !ok {
			return false
		}
		return EqualsRefOfIndexHint(a, b)
	case IndexHints:
		b, ok := inB.(IndexHints)
		if !ok {
			return false
		}
		return EqualsIndexHints(a, b)
	case *IndexInfo:
		b, ok := inB.(*IndexInfo)
		if !ok {
			return false
		}
		return EqualsRefOfIndexInfo(a, b)
	case *Insert:
		b, ok := inB.(*Insert)
		if !ok {
			return false
		}
		return EqualsRefOfInsert(a, b)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExpr(a, b)
	case *IntervalExpr:
		b, ok := inB.(*IntervalExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalExpr(a, b)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExpr(a, b)
	case *IntroducerExpr:
		b, ok := inB.(*IntroducerExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntroducerExpr(a, b)
	case *IsExpr:
		b, ok := inB.(*IsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIsExpr(a, b)
	case IsolationLevel:
		b, ok := inB.(IsolationLevel)
		if !ok {
			return false
		}
		return a == b
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExpr(a, b)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExpr(a, b)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExpr(a, b)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExpr(a, b)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExpr(a, b)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExpr(a, b)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExpr(a, b)
	case JSONObjectParam:
		b, ok := inB.(JSONObjectParam)
		if !ok {
			return false
		}
		return EqualsJSONObjectParam(a, b)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExpr(a, b)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExpr(a, b)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExpr(a, b)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExpr(a, b)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExpr(a, b)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExpr(a, b)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExpr(a, b)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExpr(a, b)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExpr(a, b)
	case *JSONTableExpr:
		b, ok := inB.(*JSONTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONTableExpr(a, b)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExpr(a, b)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExpr(a, b)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExpr(a, b)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExpr(a, b)
	case *JoinCondition:
		b, ok := inB.(*JoinCondition)
		if !ok {
			return false
		}
		return EqualsRefOfJoinCondition(a, b)
	case *JoinTableExpr:
		b, ok := inB.(*JoinTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJoinTableExpr(a, b)
	case *JtColumnDefinition:
		b, ok := inB.(*JtColumnDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfJtColumnDefinition(a, b)
	case *JtOnResponse:
		b, ok := inB.(*JtOnResponse)
		if !ok {
			return false
		}
		return EqualsRefOfJtOnResponse(a, b)
	case *KeyState:
		b, ok := inB.(*KeyState)
		if !ok {
			return false
		}
		return EqualsRefOfKeyState(a, b)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExpr(a, b)
	case *Limit:
		b, ok := inB.(*Limit)
		if !ok {
			return false
		}
		return EqualsRefOfLimit(a, b)
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Literal:
		b, ok := inB.(*Literal)
		if !ok {
			return false
		}
		return EqualsRefOfLiteral(a, b)
	case *Load:
		b, ok := inB.(*Load)
		if !ok {
			return false
		}
		return EqualsRefOfLoad(a, b)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExpr(a, b)
	case *LockOption:
		b, ok := inB.(*LockOption)
		if !ok {
			return false
		}
		return EqualsRefOfLockOption(a, b)
	case *LockTables:
		b, ok := inB.(*LockTables)
		if !ok {
			return false
		}
		return EqualsRefOfLockTables(a, b)
	case *LockingFunc:
		b, ok := inB.(*LockingFunc)
		if !ok {
			return false
		}
		return EqualsRefOfLockingFunc(a, b)
	case MatchAction:
		b, ok := inB.(MatchAction)
		if !ok {
			return false
		}
		return a == b
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExpr(a, b)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMax(a, b)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExpr(a, b)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMin(a, b)
	case *ModifyColumn:
		b, ok := inB.(*ModifyColumn)
		if !ok {
			return false
		}
		return EqualsRefOfModifyColumn(a, b)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExpr(a, b)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindow(a, b)
	case NamedWindows:
		b, ok := inB.(NamedWindows)
		if !ok {
			return false
		}
		return EqualsNamedWindows(a, b)
	case *Nextval:
		b, ok := inB.(*Nextval)
		if !ok {
			return false
		}
		return EqualsRefOfNextval(a, b)
	case *NotExpr:
		b, ok := inB.(*NotExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNotExpr(a, b)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExpr(a, b)
	case *NullTreatmentClause:
		b, ok := inB.(*NullTreatmentClause)
		if !ok {
			return false
		}
		return EqualsRefOfNullTreatmentClause(a, b)
	case *NullVal:
		b, ok := inB.(*NullVal)
		if !ok {
			return false
		}
		return EqualsRefOfNullVal(a, b)
	case *Offset:
		b, ok := inB.(*Offset)
		if !ok {
			return false
		}
		return EqualsRefOfOffset(a, b)
	case OnDup:
		b, ok := inB.(OnDup)
		if !ok {
			return false
		}
		return EqualsOnDup(a, b)
	case *OptLike:
		b, ok := inB.(*OptLike)
		if !ok {
			return false
		}
		return EqualsRefOfOptLike(a, b)
	case *OrExpr:
		b, ok := inB.(*OrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfOrExpr(a, b)
	case *Order:
		b, ok := inB.(*Order)
		if !ok {
			return false
		}
		return EqualsRefOfOrder(a, b)
	case OrderBy:
		b, ok := inB.(OrderBy)
		if !ok {
			return false
		}
		return EqualsOrderBy(a, b)
	case *OrderByOption:
		b, ok := inB.(*OrderByOption)
		if !ok {
			return false
		}
		return EqualsRefOfOrderByOption(a, b)
	case *OtherAdmin:
		b, ok := inB.(*OtherAdmin)
		if !ok {
			return false
		}
		return EqualsRefOfOtherAdmin(a, b)
	case *OtherRead:
		b, ok := inB.(*OtherRead)
		if !ok {
			return false
		}
		return EqualsRefOfOtherRead(a, b)
	case *OverClause:
		b, ok := inB.(*OverClause)
		if !ok {
			return false
		}
		return EqualsRefOfOverClause(a, b)
	case *ParenTableExpr:
		b, ok := inB.(*ParenTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfParenTableExpr(a, b)
	case *ParsedComments:
		b, ok := inB.(*ParsedComments)
		if !ok {
			return false
		}
		return EqualsRefOfParsedComments(a, b)
	case *PartitionDefinition:
		b, ok := inB.(*PartitionDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionDefinition(a, b)
	case *PartitionDefinitionOptions:
		b, ok := inB.(*PartitionDefinitionOptions)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionDefinitionOptions(a, b)
	case *PartitionEngine:
		b, ok := inB.(*PartitionEngine)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionEngine(a, b)
	case *PartitionOption:
		b, ok := inB.(*PartitionOption)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionOption(a, b)
	case *PartitionSpec:
		b, ok := inB.(*PartitionSpec)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionSpec(a, b)
	case *PartitionValueRange:
		b, ok := inB.(*PartitionValueRange)
		if !ok {
			return false
		}
		return EqualsRefOfPartitionValueRange(a, b)
	case Partitions:
		b, ok := inB.(Partitions)
		if !ok {
			return false
		}
		return EqualsPartitions(a, b)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExpr(a, b)
	case *PrepareStmt:
		b, ok := inB.(*PrepareStmt)
		if !ok {
			return false
		}
		return EqualsRefOfPrepareStmt(a, b)
	case ReferenceAction:
		b, ok := inB.(ReferenceAction)
		if !ok {
			return false
		}
		return a == b
	case *ReferenceDefinition:
		b, ok := inB.(*ReferenceDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfReferenceDefinition(a, b)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExpr(a, b)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExpr(a, b)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExpr(a, b)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExpr(a, b)
	case *Release:
		b, ok := inB.(*Release)
		if !ok {
			return false
		}
		return EqualsRefOfRelease(a, b)
	case *RenameColumn:
		b, ok := inB.(*RenameColumn)
		if !ok {
			return false
		}
		return EqualsRefOfRenameColumn(a, b)
	case *RenameIndex:
		b, ok := inB.(*RenameIndex)
		if !ok {
			return false
		}
		return EqualsRefOfRenameIndex(a, b)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTable(a, b)
	case *RenameTableName:
		b, ok := inB.(*RenameTableName)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableName(a, b)
	case *RevertMigration:
		b, ok := inB.(*RevertMigration)
		if !ok {
			return false
		}
		return EqualsRefOfRevertMigration(a, b)
	case *Rollback:
		b, ok := inB.(*Rollback)
		if !ok {
			return false
		}
		return EqualsRefOfRollback(a, b)
	case RootNode:
		b, ok := inB.(RootNode)
		if !ok {
			return false
		}
		return EqualsRootNode(a, b)
	case *SRollback:
		b, ok := inB.(*SRollback)
		if !ok {
			return false
		}
		return EqualsRefOfSRollback(a, b)
	case *Savepoint:
		b, ok := inB.(*Savepoint)
		if !ok {
			return false
		}
		return EqualsRefOfSavepoint(a, b)
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelect(a, b)
	case SelectExprs:
		b, ok := inB.(SelectExprs)
		if !ok {
			return false
		}
		return EqualsSelectExprs(a, b)
	case *SelectInto:
		b, ok := inB.(*SelectInto)
		if !ok {
			return false
		}
		return EqualsRefOfSelectInto(a, b)
	case *Set:
		b, ok := inB.(*Set)
		if !ok {
			return false
		}
		return EqualsRefOfSet(a, b)
	case *SetExpr:
		b, ok := inB.(*SetExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSetExpr(a, b)
	case SetExprs:
		b, ok := inB.(SetExprs)
		if !ok {
			return false
		}
		return EqualsSetExprs(a, b)
	case *SetTransaction:
		b, ok := inB.(*SetTransaction)
		if !ok {
			return false
		}
		return EqualsRefOfSetTransaction(a, b)
	case *Show:
		b, ok := inB.(*Show)
		if !ok {
			return false
		}
		return EqualsRefOfShow(a, b)
	case *ShowBasic:
		b, ok := inB.(*ShowBasic)
		if !ok {
			return false
		}
		return EqualsRefOfShowBasic(a, b)
	case *ShowCreate:
		b, ok := inB.(*ShowCreate)
		if !ok {
			return false
		}
		return EqualsRefOfShowCreate(a, b)
	case *ShowFilter:
		b, ok := inB.(*ShowFilter)
		if !ok {
			return false
		}
		return EqualsRefOfShowFilter(a, b)
	case *ShowMigrationLogs:
		b, ok := inB.(*ShowMigrationLogs)
		if !ok {
			return false
		}
		return EqualsRefOfShowMigrationLogs(a, b)
	case *ShowOther:
		b, ok := inB.(*ShowOther)
		if !ok {
			return false
		}
		return EqualsRefOfShowOther(a, b)
	case *ShowThrottledApps:
		b, ok := inB.(*ShowThrottledApps)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottledApps(a, b)
	case *StarExpr:
		b, ok := inB.(*StarExpr)
		if !ok {
			return false
		}
		return EqualsRefOfStarExpr(a, b)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStd(a, b)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDev(a, b)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPop(a, b)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSamp(a, b)
	case *Stream:
		b, ok := inB.(*Stream)
		if !ok {
			return false
		}
		return EqualsRefOfStream(a, b)
	case *SubPartition:
		b, ok := inB.(*SubPartition)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartition(a, b)
	case *SubPartitionDefinition:
		b, ok := inB.(*SubPartitionDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartitionDefinition(a, b)
	case *SubPartitionDefinitionOptions:
		b, ok := inB.(*SubPartitionDefinitionOptions)
		if !ok {
			return false
		}
		return EqualsRefOfSubPartitionDefinitionOptions(a, b)
	case SubPartitionDefinitions:
		b, ok := inB.(SubPartitionDefinitions)
		if !ok {
			return false
		}
		return EqualsSubPartitionDefinitions(a, b)
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubquery(a, b)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExpr(a, b)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSum(a, b)
	case TableExprs:
		b, ok := inB.(TableExprs)
		if !ok {
			return false
		}
		return EqualsTableExprs(a, b)
	case TableName:
		b, ok := inB.(TableName)
		if !ok {
			return false
		}
		return EqualsTableName(a, b)
	case TableNames:
		b, ok := inB.(TableNames)
		if !ok {
			return false
		}
		return EqualsTableNames(a, b)
	case TableOptions:
		b, ok := inB.(TableOptions)
		if !ok {
			return false
		}
		return EqualsTableOptions(a, b)
	case *TableSpec:
		b, ok := inB.(*TableSpec)
		if !ok {
			return false
		}
		return EqualsRefOfTableSpec(a, b)
	case *TablespaceOperation:
		b, ok := inB.(*TablespaceOperation)
		if !ok {
			return false
		}
		return EqualsRefOfTablespaceOperation(a, b)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExpr(a, b)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExpr(a, b)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTable(a, b)
	case *UnaryExpr:
		b, ok := inB.(*UnaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUnaryExpr(a, b)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnion(a, b)
	case *UnlockTables:
		b, ok := inB.(*UnlockTables)
		if !ok {
			return false
		}
		return EqualsRefOfUnlockTables(a, b)
	case *Update:
		b, ok := inB.(*Update)
		if !ok {
			return false
		}
		return EqualsRefOfUpdate(a, b)
	case *UpdateExpr:
		b, ok := inB.(*UpdateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateExpr(a, b)
	case UpdateExprs:
		b, ok := inB.(UpdateExprs)
		if !ok {
			return false
		}
		return EqualsUpdateExprs(a, b)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExpr(a, b)
	case *Use:
		b, ok := inB.(*Use)
		if !ok {
			return false
		}
		return EqualsRefOfUse(a, b)
	case *VStream:
		b, ok := inB.(*VStream)
		if !ok {
			return false
		}
		return EqualsRefOfVStream(a, b)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTuple(a, b)
	case *Validation:
		b, ok := inB.(*Validation)
		if !ok {
			return false
		}
		return EqualsRefOfValidation(a, b)
	case Values:
		b, ok := inB.(Values)
		if !ok {
			return false
		}
		return EqualsValues(a, b)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExpr(a, b)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPop(a, b)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSamp(a, b)
	case *Variable:
		b, ok := inB.(*Variable)
		if !ok {
			return false
		}
		return EqualsRefOfVariable(a, b)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVariance(a, b)
	case VindexParam:
		b, ok := inB.(VindexParam)
		if !ok {
			return false
		}
		return EqualsVindexParam(a, b)
	case *VindexSpec:
		b, ok := inB.(*VindexSpec)
		if !ok {
			return false
		}
		return EqualsRefOfVindexSpec(a, b)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExpr(a, b)
	case *When:
		b, ok := inB.(*When)
		if !ok {
			return false
		}
		return EqualsRefOfWhen(a, b)
	case *Where:
		b, ok := inB.(*Where)
		if !ok {
			return false
		}
		return EqualsRefOfWhere(a, b)
	case *WindowDefinition:
		b, ok := inB.(*WindowDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfWindowDefinition(a, b)
	case WindowDefinitions:
		b, ok := inB.(WindowDefinitions)
		if !ok {
			return false
		}
		return EqualsWindowDefinitions(a, b)
	case *WindowSpecification:
		b, ok := inB.(*WindowSpecification)
		if !ok {
			return false
		}
		return EqualsRefOfWindowSpecification(a, b)
	case *With:
		b, ok := inB.(*With)
		if !ok {
			return false
		}
		return EqualsRefOfWith(a, b)
	case *XorExpr:
		b, ok := inB.(*XorExpr)
		if !ok {
			return false
		}
		return EqualsRefOfXorExpr(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsRefOfAddColumns does deep equals between the two objects.
func EqualsRefOfAddColumns(a, b *AddColumns) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsSliceOfRefOfColumnDefinition(a.Columns, b.Columns) &&
		EqualsRefOfColName(a.After, b.After)
}

// EqualsRefOfAddConstraintDefinition does deep equals between the two objects.
func EqualsRefOfAddConstraintDefinition(a, b *AddConstraintDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfConstraintDefinition(a.ConstraintDefinition, b.ConstraintDefinition)
}

// EqualsRefOfAddIndexDefinition does deep equals between the two objects.
func EqualsRefOfAddIndexDefinition(a, b *AddIndexDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfIndexDefinition(a.IndexDefinition, b.IndexDefinition)
}

// EqualsRefOfAliasedExpr does deep equals between the two objects.
func EqualsRefOfAliasedExpr(a, b *AliasedExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsIdentifierCI(a.As, b.As)
}

// EqualsRefOfAliasedTableExpr does deep equals between the two objects.
func EqualsRefOfAliasedTableExpr(a, b *AliasedTableExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSimpleTableExpr(a.Expr, b.Expr) &&
		EqualsPartitions(a.Partitions, b.Partitions) &&
		EqualsIdentifierCS(a.As, b.As) &&
		EqualsIndexHints(a.Hints, b.Hints) &&
		EqualsColumns(a.Columns, b.Columns)
}

// EqualsRefOfAlterCharset does deep equals between the two objects.
func EqualsRefOfAlterCharset(a, b *AlterCharset) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.CharacterSet == b.CharacterSet &&
		a.Collate == b.Collate
}

// EqualsRefOfAlterCheck does deep equals between the two objects.
func EqualsRefOfAlterCheck(a, b *AlterCheck) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enforced == b.Enforced &&
		EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfAlterColumn does deep equals between the two objects.
func EqualsRefOfAlterColumn(a, b *AlterColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.DropDefault == b.DropDefault &&
		EqualsRefOfColName(a.Column, b.Column) &&
		EqualsExpr(a.DefaultVal, b.DefaultVal) &&
		EqualsRefOfBool(a.Invisible, b.Invisible)
}

// EqualsRefOfAlterDatabase does deep equals between the two objects.
func EqualsRefOfAlterDatabase(a, b *AlterDatabase) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UpdateDataDirectory == b.UpdateDataDirectory &&
		a.FullyParsed == b.FullyParsed &&
		EqualsIdentifierCS(a.DBName, b.DBName) &&
		EqualsSliceOfDatabaseOption(a.AlterOptions, b.AlterOptions)
}

// EqualsRefOfAlterIndex does deep equals between the two objects.
func EqualsRefOfAlterIndex(a, b *AlterIndex) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Invisible == b.Invisible &&
		EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfAlterMigration does deep equals between the two objects.
func EqualsRefOfAlterMigration(a, b *AlterMigration) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		a.Expire == b.Expire &&
		a.Type == b.Type &&
		EqualsRefOfLiteral(a.Ratio, b.Ratio)
}

// EqualsRefOfAlterTable does deep equals between the two objects.
func EqualsRefOfAlterTable(a, b *AlterTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.FullyParsed == b.FullyParsed &&
		EqualsTableName(a.Table, b.Table) &&
		EqualsSliceOfAlterOption(a.AlterOptions, b.AlterOptions) &&
		EqualsRefOfPartitionSpec(a.PartitionSpec, b.PartitionSpec) &&
		EqualsRefOfPartitionOption(a.PartitionOption, b.PartitionOption) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfAlterView does deep equals between the two objects.
func EqualsRefOfAlterView(a, b *AlterView) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Algorithm == b.Algorithm &&
		a.Security == b.Security &&
		a.CheckOption == b.CheckOption &&
		EqualsTableName(a.ViewName, b.ViewName) &&
		EqualsRefOfDefiner(a.Definer, b.Definer) &&
		EqualsColumns(a.Columns, b.Columns) &&
		EqualsSelectStatement(a.Select, b.Select) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfAlterVschema does deep equals between the two objects.
func EqualsRefOfAlterVschema(a, b *AlterVschema) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Action == b.Action &&
		EqualsTableName(a.Table, b.Table) &&
		EqualsRefOfVindexSpec(a.VindexSpec, b.VindexSpec) &&
		EqualsSliceOfIdentifierCI(a.VindexCols, b.VindexCols) &&
		EqualsRefOfAutoIncSpec(a.AutoIncSpec, b.AutoIncSpec)
}

// EqualsRefOfAndExpr does deep equals between the two objects.
func EqualsRefOfAndExpr(a, b *AndExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.Right, b.Right)
}

// EqualsRefOfArgumentLessWindowExpr does deep equals between the two objects.
func EqualsRefOfArgumentLessWindowExpr(a, b *ArgumentLessWindowExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfOverClause(a.OverClause, b.OverClause)
}

// EqualsRefOfAutoIncSpec does deep equals between the two objects.
func EqualsRefOfAutoIncSpec(a, b *AutoIncSpec) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Column, b.Column) &&
		EqualsTableName(a.Sequence, b.Sequence)
}

// EqualsRefOfAvg does deep equals between the two objects.
func EqualsRefOfAvg(a, b *Avg) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfBegin does deep equals between the two objects.
func EqualsRefOfBegin(a, b *Begin) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfBetweenExpr does deep equals between the two objects.
func EqualsRefOfBetweenExpr(a, b *BetweenExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsBetween == b.IsBetween &&
		EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.From, b.From) &&
		EqualsExpr(a.To, b.To)
}

// EqualsRefOfBinaryExpr does deep equals between the two objects.
func EqualsRefOfBinaryExpr(a, b *BinaryExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.Right, b.Right)
}

// EqualsRefOfBitAnd does deep equals between the two objects.
func EqualsRefOfBitAnd(a, b *BitAnd) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfBitOr does deep equals between the two objects.
func EqualsRefOfBitOr(a, b *BitOr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfBitXor does deep equals between the two objects.
func EqualsRefOfBitXor(a, b *BitXor) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfCallProc does deep equals between the two objects.
func EqualsRefOfCallProc(a, b *CallProc) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.Name, b.Name) &&
		EqualsExprs(a.Params, b.Params)
}

// EqualsRefOfCaseExpr does deep equals between the two objects.
func EqualsRefOfCaseExpr(a, b *CaseExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsSliceOfRefOfWhen(a.Whens, b.Whens) &&
		EqualsExpr(a.Else, b.Else)
}

// EqualsRefOfCastExpr does deep equals between the two objects.
func EqualsRefOfCastExpr(a, b *CastExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Array == b.Array &&
		EqualsExpr(a.Expr, b.Expr) &&
		EqualsRefOfConvertType(a.Type, b.Type)
}

// EqualsRefOfChangeColumn does deep equals between the two objects.
func EqualsRefOfChangeColumn(a, b *ChangeColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsRefOfColName(a.OldColumn, b.OldColumn) &&
		EqualsRefOfColumnDefinition(a.NewColDefinition, b.NewColDefinition) &&
		EqualsRefOfColName(a.After, b.After)
}

// EqualsRefOfCharExpr does deep equals between the two objects.
func EqualsRefOfCharExpr(a, b *CharExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Charset == b.Charset &&
		EqualsExprs(a.Exprs, b.Exprs)
}

// EqualsRefOfCheckConstraintDefinition does deep equals between the two objects.
func EqualsRefOfCheckConstraintDefinition(a, b *CheckConstraintDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enforced == b.Enforced &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfColName does deep equals between the two objects.
func EqualsRefOfColName(a, b *ColName) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsTableName(a.Qualifier, b.Qualifier)
}

// EqualsRefOfCollateExpr does deep equals between the two objects.
func EqualsRefOfCollateExpr(a, b *CollateExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Collation == b.Collation &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfColumnDefinition does deep equals between the two objects.
func EqualsRefOfColumnDefinition(a, b *ColumnDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsColumnType(a.Type, b.Type)
}

// EqualsRefOfColumnType does deep equals between the two objects.
func EqualsRefOfColumnType(a, b *ColumnType) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.Unsigned == b.Unsigned &&
		a.Zerofill == b.Zerofill &&
		EqualsRefOfColumnTypeOptions(a.Options, b.Options) &&
		EqualsRefOfLiteral(a.Length, b.Length) &&
		EqualsRefOfLiteral(a.Scale, b.Scale) &&
		EqualsColumnCharset(a.Charset, b.Charset) &&
		EqualsSliceOfString(a.EnumValues, b.EnumValues)
}

// EqualsColumns does deep equals between the two objects.
func EqualsColumns(a, b Columns) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCI(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfCommentOnly does deep equals between the two objects.
func EqualsRefOfCommentOnly(a, b *CommentOnly) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfString(a.Comments, b.Comments)
}

// EqualsRefOfCommit does deep equals between the two objects.
func EqualsRefOfCommit(a, b *Commit) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfCommonTableExpr does deep equals between the two objects.
func EqualsRefOfCommonTableExpr(a, b *CommonTableExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCS(a.ID, b.ID) &&
		EqualsColumns(a.Columns, b.Columns) &&
		EqualsRefOfSubquery(a.Subquery, b.Subquery)
}

// EqualsRefOfComparisonExpr does deep equals between the two objects.
func EqualsRefOfComparisonExpr(a, b *ComparisonExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.Right, b.Right) &&
		EqualsExpr(a.Escape, b.Escape)
}

// EqualsRefOfConstraintDefinition does deep equals between the two objects.
func EqualsRefOfConstraintDefinition(a, b *ConstraintDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsConstraintInfo(a.Details, b.Details)
}

// EqualsRefOfConvertExpr does deep equals between the two objects.
func EqualsRefOfConvertExpr(a, b *ConvertExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsRefOfConvertType(a.Type, b.Type)
}

// EqualsRefOfConvertType does deep equals between the two objects.
func EqualsRefOfConvertType(a, b *ConvertType) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfLiteral(a.Length, b.Length) &&
		EqualsRefOfLiteral(a.Scale, b.Scale) &&
		EqualsColumnCharset(a.Charset, b.Charset)
}

// EqualsRefOfConvertUsingExpr does deep equals between the two objects.
func EqualsRefOfConvertUsingExpr(a, b *ConvertUsingExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfCount does deep equals between the two objects.
func EqualsRefOfCount(a, b *Count) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExprs(a.Args, b.Args)
}

// EqualsRefOfCountStar does deep equals between the two objects.
func EqualsRefOfCountStar(a, b *CountStar) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfCreateDatabase does deep equals between the two objects.
func EqualsRefOfCreateDatabase(a, b *CreateDatabase) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfNotExists == b.IfNotExists &&
		a.FullyParsed == b.FullyParsed &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsIdentifierCS(a.DBName, b.DBName) &&
		EqualsSliceOfDatabaseOption(a.CreateOptions, b.CreateOptions)
}

// EqualsRefOfCreateTable does deep equals between the two objects.
func EqualsRefOfCreateTable(a, b *CreateTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Temp == b.Temp &&
		a.IfNotExists == b.IfNotExists &&
		a.FullyParsed == b.FullyParsed &&
		EqualsTableName(a.Table, b.Table) &&
		EqualsRefOfTableSpec(a.TableSpec, b.TableSpec) &&
		EqualsRefOfOptLike(a.OptLike, b.OptLike) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfCreateView does deep equals between the two objects.
func EqualsRefOfCreateView(a, b *CreateView) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Algorithm == b.Algorithm &&
		a.Security == b.Security &&
		a.CheckOption == b.CheckOption &&
		a.IsReplace == b.IsReplace &&
		EqualsTableName(a.ViewName, b.ViewName) &&
		EqualsRefOfDefiner(a.Definer, b.Definer) &&
		EqualsColumns(a.Columns, b.Columns) &&
		EqualsSelectStatement(a.Select, b.Select) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfCurTimeFuncExpr does deep equals between the two objects.
func EqualsRefOfCurTimeFuncExpr(a, b *CurTimeFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsExpr(a.Fsp, b.Fsp)
}

// EqualsRefOfDeallocateStmt does deep equals between the two objects.
func EqualsRefOfDeallocateStmt(a, b *DeallocateStmt) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfDefault does deep equals between the two objects.
func EqualsRefOfDefault(a, b *Default) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.ColName == b.ColName
}

// EqualsRefOfDefiner does deep equals between the two objects.
func EqualsRefOfDefiner(a, b *Definer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Address == b.Address
}

// EqualsRefOfDelete does deep equals between the two objects.
func EqualsRefOfDelete(a, b *Delete) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfWith(a.With, b.With) &&
		a.Ignore == b.Ignore &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsTableNames(a.Targets, b.Targets) &&
		EqualsTableExprs(a.TableExprs, b.TableExprs) &&
		EqualsPartitions(a.Partitions, b.Partitions) &&
		EqualsRefOfWhere(a.Where, b.Where) &&
		EqualsOrderBy(a.OrderBy, b.OrderBy) &&
		EqualsRefOfLimit(a.Limit, b.Limit)
}

// EqualsRefOfDerivedTable does deep equals between the two objects.
func EqualsRefOfDerivedTable(a, b *DerivedTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Lateral == b.Lateral &&
		EqualsSelectStatement(a.Select, b.Select)
}

// EqualsRefOfDropColumn does deep equals between the two objects.
func EqualsRefOfDropColumn(a, b *DropColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColName(a.Name, b.Name)
}

// EqualsRefOfDropDatabase does deep equals between the two objects.
func EqualsRefOfDropDatabase(a, b *DropDatabase) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfExists == b.IfExists &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsIdentifierCS(a.DBName, b.DBName)
}

// EqualsRefOfDropKey does deep equals between the two objects.
func EqualsRefOfDropKey(a, b *DropKey) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfDropTable does deep equals between the two objects.
func EqualsRefOfDropTable(a, b *DropTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Temp == b.Temp &&
		a.IfExists == b.IfExists &&
		EqualsTableNames(a.FromTables, b.FromTables) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfDropView does deep equals between the two objects.
func EqualsRefOfDropView(a, b *DropView) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IfExists == b.IfExists &&
		EqualsTableNames(a.FromTables, b.FromTables) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfExecuteStmt does deep equals between the two objects.
func EqualsRefOfExecuteStmt(a, b *ExecuteStmt) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsSliceOfRefOfVariable(a.Arguments, b.Arguments)
}

// EqualsRefOfExistsExpr does deep equals between the two objects.
func EqualsRefOfExistsExpr(a, b *ExistsExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfSubquery(a.Subquery, b.Subquery)
}

// EqualsRefOfExplainStmt does deep equals between the two objects.
func EqualsRefOfExplainStmt(a, b *ExplainStmt) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsStatement(a.Statement, b.Statement)
}

// EqualsRefOfExplainTab does deep equals between the two objects.
func EqualsRefOfExplainTab(a, b *ExplainTab) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Wild == b.Wild &&
		EqualsTableName(a.Table, b.Table)
}

// EqualsExprs does deep equals between the two objects.
func EqualsExprs(a, b Exprs) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfExtractFuncExpr does deep equals between the two objects.
func EqualsRefOfExtractFuncExpr(a, b *ExtractFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IntervalTypes == b.IntervalTypes &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfExtractValueExpr does deep equals between the two objects.
func EqualsRefOfExtractValueExpr(a, b *ExtractValueExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Fragment, b.Fragment) &&
		EqualsExpr(a.XPathExpr, b.XPathExpr)
}

// EqualsRefOfExtractedSubquery does deep equals between the two objects.
func EqualsRefOfExtractedSubquery(a, b *ExtractedSubquery) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.OpCode == b.OpCode &&
		a.NeedsRewrite == b.NeedsRewrite &&
		a.hasValuesArg == b.hasValuesArg &&
		a.argName == b.argName &&
		EqualsExpr(a.Original, b.Original) &&
		EqualsRefOfSubquery(a.Subquery, b.Subquery) &&
		EqualsExpr(a.OtherSide, b.OtherSide) &&
		EqualsExpr(a.alternative, b.alternative)
}

// EqualsRefOfFirstOrLastValueExpr does deep equals between the two objects.
func EqualsRefOfFirstOrLastValueExpr(a, b *FirstOrLastValueExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Expr, b.Expr) &&
		EqualsRefOfNullTreatmentClause(a.NullTreatmentClause, b.NullTreatmentClause) &&
		EqualsRefOfOverClause(a.OverClause, b.OverClause)
}

// EqualsRefOfFlush does deep equals between the two objects.
func EqualsRefOfFlush(a, b *Flush) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLocal == b.IsLocal &&
		a.WithLock == b.WithLock &&
		a.ForExport == b.ForExport &&
		EqualsSliceOfString(a.FlushOptions, b.FlushOptions) &&
		EqualsTableNames(a.TableNames, b.TableNames)
}

// EqualsRefOfForce does deep equals between the two objects.
func EqualsRefOfForce(a, b *Force) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfForeignKeyDefinition does deep equals between the two objects.
func EqualsRefOfForeignKeyDefinition(a, b *ForeignKeyDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsColumns(a.Source, b.Source) &&
		EqualsIdentifierCI(a.IndexName, b.IndexName) &&
		EqualsRefOfReferenceDefinition(a.ReferenceDefinition, b.ReferenceDefinition)
}

// EqualsRefOfFrameClause does deep equals between the two objects.
func EqualsRefOfFrameClause(a, b *FrameClause) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Unit == b.Unit &&
		EqualsRefOfFramePoint(a.Start, b.Start) &&
		EqualsRefOfFramePoint(a.End, b.End)
}

// EqualsRefOfFramePoint does deep equals between the two objects.
func EqualsRefOfFramePoint(a, b *FramePoint) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfFromFirstLastClause does deep equals between the two objects.
func EqualsRefOfFromFirstLastClause(a, b *FromFirstLastClause) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfFuncExpr does deep equals between the two objects.
func EqualsRefOfFuncExpr(a, b *FuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCS(a.Qualifier, b.Qualifier) &&
		EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsSelectExprs(a.Exprs, b.Exprs)
}

// EqualsRefOfGTIDFuncExpr does deep equals between the two objects.
func EqualsRefOfGTIDFuncExpr(a, b *GTIDFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Set1, b.Set1) &&
		EqualsExpr(a.Set2, b.Set2) &&
		EqualsExpr(a.Timeout, b.Timeout) &&
		EqualsExpr(a.Channel, b.Channel)
}

// EqualsGroupBy does deep equals between the two objects.
func EqualsGroupBy(a, b GroupBy) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfGroupConcatExpr does deep equals between the two objects.
func EqualsRefOfGroupConcatExpr(a, b *GroupConcatExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		a.Separator == b.Separator &&
		EqualsExprs(a.Exprs, b.Exprs) &&
		EqualsOrderBy(a.OrderBy, b.OrderBy) &&
		EqualsRefOfLimit(a.Limit, b.Limit)
}

// EqualsIdentifierCI does deep equals between the two objects.
func EqualsIdentifierCI(a, b IdentifierCI) bool {
	return a.val == b.val &&
		a.lowered == b.lowered
}

// EqualsIdentifierCS does deep equals between the two objects.
func EqualsIdentifierCS(a, b IdentifierCS) bool {
	return a.v == b.v
}

// EqualsRefOfIndexDefinition does deep equals between the two objects.
func EqualsRefOfIndexDefinition(a, b *IndexDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfIndexInfo(a.Info, b.Info) &&
		EqualsSliceOfRefOfIndexColumn(a.Columns, b.Columns) &&
		EqualsSliceOfRefOfIndexOption(a.Options, b.Options)
}

// EqualsRefOfIndexHint does deep equals between the two objects.
func EqualsRefOfIndexHint(a, b *IndexHint) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.ForType == b.ForType &&
		EqualsSliceOfIdentifierCI(a.Indexes, b.Indexes)
}

// EqualsIndexHints does deep equals between the two objects.
func EqualsIndexHints(a, b IndexHints) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexHint(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfIndexInfo does deep equals between the two objects.
func EqualsRefOfIndexInfo(a, b *IndexInfo) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		a.Primary == b.Primary &&
		a.Spatial == b.Spatial &&
		a.Fulltext == b.Fulltext &&
		a.Unique == b.Unique &&
		EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsIdentifierCI(a.ConstraintName, b.ConstraintName)
}

// EqualsRefOfInsert does deep equals between the two objects.
func EqualsRefOfInsert(a, b *Insert) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Action == b.Action &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		a.Ignore == b.Ignore &&
		EqualsTableName(a.Table, b.Table) &&
		EqualsPartitions(a.Partitions, b.Partitions) &&
		EqualsColumns(a.Columns, b.Columns) &&
		EqualsInsertRows(a.Rows, b.Rows) &&
		EqualsOnDup(a.OnDup, b.OnDup)
}

// EqualsRefOfInsertExpr does deep equals between the two objects.
func EqualsRefOfInsertExpr(a, b *InsertExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Str, b.Str) &&
		EqualsExpr(a.Pos, b.Pos) &&
		EqualsExpr(a.Len, b.Len) &&
		EqualsExpr(a.NewStr, b.NewStr)
}

// EqualsRefOfIntervalExpr does deep equals between the two objects.
func EqualsRefOfIntervalExpr(a, b *IntervalExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Unit == b.Unit &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfIntervalFuncExpr does deep equals between the two objects.
func EqualsRefOfIntervalFuncExpr(a, b *IntervalFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExprs(a.Exprs, b.Exprs)
}

// EqualsRefOfIntroducerExpr does deep equals between the two objects.
func EqualsRefOfIntroducerExpr(a, b *IntroducerExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.CharacterSet == b.CharacterSet &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfIsExpr does deep equals between the two objects.
func EqualsRefOfIsExpr(a, b *IsExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Left, b.Left) &&
		a.Right == b.Right
}

// EqualsRefOfJSONArrayExpr does deep equals between the two objects.
func EqualsRefOfJSONArrayExpr(a, b *JSONArrayExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExprs(a.Params, b.Params)
}

// EqualsRefOfJSONAttributesExpr does deep equals between the two objects.
func EqualsRefOfJSONAttributesExpr(a, b *JSONAttributesExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExpr(a.Path, b.Path)
}

// EqualsRefOfJSONContainsExpr does deep equals between the two objects.
func EqualsRefOfJSONContainsExpr(a, b *JSONContainsExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Target, b.Target) &&
		EqualsExpr(a.Candidate, b.Candidate) &&
		EqualsSliceOfExpr(a.PathList, b.PathList)
}

// EqualsRefOfJSONContainsPathExpr does deep equals between the two objects.
func EqualsRefOfJSONContainsPathExpr(a, b *JSONContainsPathExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExpr(a.OneOrAll, b.OneOrAll) &&
		EqualsSliceOfExpr(a.PathList, b.PathList)
}

// EqualsRefOfJSONExtractExpr does deep equals between the two objects.
func EqualsRefOfJSONExtractExpr(a, b *JSONExtractExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsSliceOfExpr(a.PathList, b.PathList)
}

// EqualsRefOfJSONKeysExpr does deep equals between the two objects.
func EqualsRefOfJSONKeysExpr(a, b *JSONKeysExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExpr(a.Path, b.Path)
}

// EqualsRefOfJSONObjectExpr does deep equals between the two objects.
func EqualsRefOfJSONObjectExpr(a, b *JSONObjectExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfJSONObjectParam(a.Params, b.Params)
}

// EqualsJSONObjectParam does deep equals between the two objects.
func EqualsJSONObjectParam(a, b JSONObjectParam) bool {
	return EqualsExpr(a.Key, b.Key) &&
		EqualsExpr(a.Value, b.Value)
}

// EqualsRefOfJSONOverlapsExpr does deep equals between the two objects.
func EqualsRefOfJSONOverlapsExpr(a, b *JSONOverlapsExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc1, b.JSONDoc1) &&
		EqualsExpr(a.JSONDoc2, b.JSONDoc2)
}

// EqualsRefOfJSONPrettyExpr does deep equals between the two objects.
func EqualsRefOfJSONPrettyExpr(a, b *JSONPrettyExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONVal, b.JSONVal)
}

// EqualsRefOfJSONQuoteExpr does deep equals between the two objects.
func EqualsRefOfJSONQuoteExpr(a, b *JSONQuoteExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.StringArg, b.StringArg)
}

// EqualsRefOfJSONRemoveExpr does deep equals between the two objects.
func EqualsRefOfJSONRemoveExpr(a, b *JSONRemoveExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExprs(a.PathList, b.PathList)
}

// EqualsRefOfJSONSchemaValidFuncExpr does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidFuncExpr(a, b *JSONSchemaValidFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Schema, b.Schema) &&
		EqualsExpr(a.Document, b.Document)
}

// EqualsRefOfJSONSchemaValidationReportFuncExpr does deep equals between the two objects.
func EqualsRefOfJSONSchemaValidationReportFuncExpr(a, b *JSONSchemaValidationReportFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Schema, b.Schema) &&
		EqualsExpr(a.Document, b.Document)
}

// EqualsRefOfJSONSearchExpr does deep equals between the two objects.
func EqualsRefOfJSONSearchExpr(a, b *JSONSearchExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExpr(a.OneOrAll, b.OneOrAll) &&
		EqualsExpr(a.SearchStr, b.SearchStr) &&
		EqualsExpr(a.EscapeChar, b.EscapeChar) &&
		EqualsSliceOfExpr(a.PathList, b.PathList)
}

// EqualsRefOfJSONStorageFreeExpr does deep equals between the two objects.
func EqualsRefOfJSONStorageFreeExpr(a, b *JSONStorageFreeExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONVal, b.JSONVal)
}

// EqualsRefOfJSONStorageSizeExpr does deep equals between the two objects.
func EqualsRefOfJSONStorageSizeExpr(a, b *JSONStorageSizeExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONVal, b.JSONVal)
}

// EqualsRefOfJSONTableExpr does deep equals between the two objects.
func EqualsRefOfJSONTableExpr(a, b *JSONTableExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsIdentifierCS(a.Alias, b.Alias) &&
		EqualsExpr(a.Filter, b.Filter) &&
		EqualsSliceOfRefOfJtColumnDefinition(a.Columns, b.Columns)
}

// EqualsRefOfJSONUnquoteExpr does deep equals between the two objects.
func EqualsRefOfJSONUnquoteExpr(a, b *JSONUnquoteExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONValue, b.JSONValue)
}

// EqualsRefOfJSONValueExpr does deep equals between the two objects.
func EqualsRefOfJSONValueExpr(a, b *JSONValueExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExpr(a.Path, b.Path) &&
		EqualsRefOfConvertType(a.ReturningType, b.ReturningType) &&
		EqualsRefOfJtOnResponse(a.EmptyOnResponse, b.EmptyOnResponse) &&
		EqualsRefOfJtOnResponse(a.ErrorOnResponse, b.ErrorOnResponse)
}

// EqualsRefOfJSONValueMergeExpr does deep equals between the two objects.
func EqualsRefOfJSONValueMergeExpr(a, b *JSONValueMergeExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsExprs(a.JSONDocList, b.JSONDocList)
}

// EqualsRefOfJSONValueModifierExpr does deep equals between the two objects.
func EqualsRefOfJSONValueModifierExpr(a, b *JSONValueModifierExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.JSONDoc, b.JSONDoc) &&
		EqualsSliceOfRefOfJSONObjectParam(a.Params, b.Params)
}

// EqualsRefOfJoinCondition does deep equals between the two objects.
func EqualsRefOfJoinCondition(a, b *JoinCondition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.On, b.On) &&
		EqualsColumns(a.Using, b.Using)
}

// EqualsRefOfJoinTableExpr does deep equals between the two objects.
func EqualsRefOfJoinTableExpr(a, b *JoinTableExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExpr(a.LeftExpr, b.LeftExpr) &&
		a.Join == b.Join &&
		EqualsTableExpr(a.RightExpr, b.RightExpr) &&
		EqualsRefOfJoinCondition(a.Condition, b.Condition)
}

// EqualsRefOfJtColumnDefinition does deep equals between the two objects.
func EqualsRefOfJtColumnDefinition(a, b *JtColumnDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfJtOrdinalColDef(a.JtOrdinal, b.JtOrdinal) &&
		EqualsRefOfJtPathColDef(a.JtPath, b.JtPath) &&
		EqualsRefOfJtNestedPathColDef(a.JtNestedPath, b.JtNestedPath)
}

// EqualsRefOfJtOnResponse does deep equals between the two objects.
func EqualsRefOfJtOnResponse(a, b *JtOnResponse) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.ResponseType == b.ResponseType &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfKeyState does deep equals between the two objects.
func EqualsRefOfKeyState(a, b *KeyState) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Enable == b.Enable
}

// EqualsRefOfLagLeadExpr does deep equals between the two objects.
func EqualsRefOfLagLeadExpr(a, b *LagLeadExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.N, b.N) &&
		EqualsExpr(a.Default, b.Default) &&
		EqualsRefOfOverClause(a.OverClause, b.OverClause) &&
		EqualsRefOfNullTreatmentClause(a.NullTreatmentClause, b.NullTreatmentClause)
}

// EqualsRefOfLimit does deep equals between the two objects.
func EqualsRefOfLimit(a, b *Limit) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Offset, b.Offset) &&
		EqualsExpr(a.Rowcount, b.Rowcount)
}

// EqualsRefOfLiteral does deep equals between the two objects.
func EqualsRefOfLiteral(a, b *Literal) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Val == b.Val &&
		a.Type == b.Type
}

// EqualsRefOfLoad does deep equals between the two objects.
func EqualsRefOfLoad(a, b *Load) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfLocateExpr does deep equals between the two objects.
func EqualsRefOfLocateExpr(a, b *LocateExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.SubStr, b.SubStr) &&
		EqualsExpr(a.Str, b.Str) &&
		EqualsExpr(a.Pos, b.Pos)
}

// EqualsRefOfLockOption does deep equals between the two objects.
func EqualsRefOfLockOption(a, b *LockOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfLockTables does deep equals between the two objects.
func EqualsRefOfLockTables(a, b *LockTables) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableAndLockTypes(a.Tables, b.Tables)
}

// EqualsRefOfLockingFunc does deep equals between the two objects.
func EqualsRefOfLockingFunc(a, b *LockingFunc) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Name, b.Name) &&
		EqualsExpr(a.Timeout, b.Timeout)
}

// EqualsRefOfMatchExpr does deep equals between the two objects.
func EqualsRefOfMatchExpr(a, b *MatchExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfColName(a.Columns, b.Columns) &&
		EqualsExpr(a.Expr, b.Expr) &&
		a.Option == b.Option
}

// EqualsRefOfMax does deep equals between the two objects.
func EqualsRefOfMax(a, b *Max) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfMemberOfExpr does deep equals between the two objects.
func EqualsRefOfMemberOfExpr(a, b *MemberOfExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Value, b.Value) &&
		EqualsExpr(a.JSONArr, b.JSONArr)
}

// EqualsRefOfMin does deep equals between the two objects.
func EqualsRefOfMin(a, b *Min) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfModifyColumn does deep equals between the two objects.
func EqualsRefOfModifyColumn(a, b *ModifyColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.First == b.First &&
		EqualsRefOfColumnDefinition(a.NewColDefinition, b.NewColDefinition) &&
		EqualsRefOfColName(a.After, b.After)
}

// EqualsRefOfNTHValueExpr does deep equals between the two objects.
func EqualsRefOfNTHValueExpr(a, b *NTHValueExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.N, b.N) &&
		EqualsRefOfOverClause(a.OverClause, b.OverClause) &&
		EqualsRefOfFromFirstLastClause(a.FromFirstLastClause, b.FromFirstLastClause) &&
		EqualsRefOfNullTreatmentClause(a.NullTreatmentClause, b.NullTreatmentClause)
}

// EqualsRefOfNamedWindow does deep equals between the two objects.
func EqualsRefOfNamedWindow(a, b *NamedWindow) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsWindowDefinitions(a.Windows, b.Windows)
}

// EqualsNamedWindows does deep equals between the two objects.
func EqualsNamedWindows(a, b NamedWindows) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfNamedWindow(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfNextval does deep equals between the two objects.
func EqualsRefOfNextval(a, b *Nextval) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfNotExpr does deep equals between the two objects.
func EqualsRefOfNotExpr(a, b *NotExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfNtileExpr does deep equals between the two objects.
func EqualsRefOfNtileExpr(a, b *NtileExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.N, b.N) &&
		EqualsRefOfOverClause(a.OverClause, b.OverClause)
}

// EqualsRefOfNullTreatmentClause does deep equals between the two objects.
func EqualsRefOfNullTreatmentClause(a, b *NullTreatmentClause) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type
}

// EqualsRefOfNullVal does deep equals between the two objects.
func EqualsRefOfNullVal(a, b *NullVal) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOffset does deep equals between the two objects.
func EqualsRefOfOffset(a, b *Offset) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.V == b.V &&
		a.Original == b.Original
}

// EqualsOnDup does deep equals between the two objects.
func EqualsOnDup(a, b OnDup) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfUpdateExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfOptLike does deep equals between the two objects.
func EqualsRefOfOptLike(a, b *OptLike) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.LikeTable, b.LikeTable)
}

// EqualsRefOfOrExpr does deep equals between the two objects.
func EqualsRefOfOrExpr(a, b *OrExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.Right, b.Right)
}

// EqualsRefOfOrder does deep equals between the two objects.
func EqualsRefOfOrder(a, b *Order) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		a.Direction == b.Direction
}

// EqualsOrderBy does deep equals between the two objects.
func EqualsOrderBy(a, b OrderBy) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfOrder(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfOrderByOption does deep equals between the two objects.
func EqualsRefOfOrderByOption(a, b *OrderByOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsColumns(a.Cols, b.Cols)
}

// EqualsRefOfOtherAdmin does deep equals between the two objects.
func EqualsRefOfOtherAdmin(a, b *OtherAdmin) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOtherRead does deep equals between the two objects.
func EqualsRefOfOtherRead(a, b *OtherRead) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfOverClause does deep equals between the two objects.
func EqualsRefOfOverClause(a, b *OverClause) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.WindowName, b.WindowName) &&
		EqualsRefOfWindowSpecification(a.WindowSpec, b.WindowSpec)
}

// EqualsRefOfParenTableExpr does deep equals between the two objects.
func EqualsRefOfParenTableExpr(a, b *ParenTableExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExprs(a.Exprs, b.Exprs)
}

// EqualsRefOfParsedComments does deep equals between the two objects.
func EqualsRefOfParsedComments(a, b *ParsedComments) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsComments(a.comments, b.comments)
}

// EqualsRefOfPartitionDefinition does deep equals between the two objects.
func EqualsRefOfPartitionDefinition(a, b *PartitionDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsRefOfPartitionDefinitionOptions(a.Options, b.Options)
}

// EqualsRefOfPartitionDefinitionOptions does deep equals between the two objects.
func EqualsRefOfPartitionDefinitionOptions(a, b *PartitionDefinitionOptions) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TableSpace == b.TableSpace &&
		EqualsRefOfPartitionValueRange(a.ValueRange, b.ValueRange) &&
		EqualsRefOfLiteral(a.Comment, b.Comment) &&
		EqualsRefOfPartitionEngine(a.Engine, b.Engine) &&
		EqualsRefOfLiteral(a.DataDirectory, b.DataDirectory) &&
		EqualsRefOfLiteral(a.IndexDirectory, b.IndexDirectory) &&
		EqualsRefOfInt(a.MaxRows, b.MaxRows) &&
		EqualsRefOfInt(a.MinRows, b.MinRows) &&
		EqualsSubPartitionDefinitions(a.SubPartitionDefinitions, b.SubPartitionDefinitions)
}

// EqualsRefOfPartitionEngine does deep equals between the two objects.
func EqualsRefOfPartitionEngine(a, b *PartitionEngine) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Storage == b.Storage &&
		a.Name == b.Name
}

// EqualsRefOfPartitionOption does deep equals between the two objects.
func EqualsRefOfPartitionOption(a, b *PartitionOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLinear == b.IsLinear &&
		a.KeyAlgorithm == b.KeyAlgorithm &&
		a.Partitions == b.Partitions &&
		a.Type == b.Type &&
		EqualsColumns(a.ColList, b.ColList) &&
		EqualsExpr(a.Expr, b.Expr) &&
		EqualsRefOfSubPartition(a.SubPartition, b.SubPartition) &&
		EqualsSliceOfRefOfPartitionDefinition(a.Definitions, b.Definitions)
}

// EqualsRefOfPartitionSpec does deep equals between the two objects.
func EqualsRefOfPartitionSpec(a, b *PartitionSpec) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsAll == b.IsAll &&
		a.WithoutValidation == b.WithoutValidation &&
		a.Action == b.Action &&
		EqualsPartitions(a.Names, b.Names) &&
		EqualsRefOfLiteral(a.Number, b.Number) &&
		EqualsTableName(a.TableName, b.TableName) &&
		EqualsSliceOfRefOfPartitionDefinition(a.Definitions, b.Definitions)
}

// EqualsRefOfPartitionValueRange does deep equals between the two objects.
func EqualsRefOfPartitionValueRange(a, b *PartitionValueRange) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Maxvalue == b.Maxvalue &&
		a.Type == b.Type &&
		EqualsValTuple(a.Range, b.Range)
}

// EqualsPartitions does deep equals between the two objects.
func EqualsPartitions(a, b Partitions) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCI(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfPerformanceSchemaFuncExpr does deep equals between the two objects.
func EqualsRefOfPerformanceSchemaFuncExpr(a, b *PerformanceSchemaFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Argument, b.Argument)
}

// EqualsRefOfPrepareStmt does deep equals between the two objects.
func EqualsRefOfPrepareStmt(a, b *PrepareStmt) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsExpr(a.Statement, b.Statement) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfReferenceDefinition does deep equals between the two objects.
func EqualsRefOfReferenceDefinition(a, b *ReferenceDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.ReferencedTable, b.ReferencedTable) &&
		EqualsColumns(a.ReferencedColumns, b.ReferencedColumns) &&
		a.Match == b.Match &&
		a.OnDelete == b.OnDelete &&
		a.OnUpdate == b.OnUpdate
}

// EqualsRefOfRegexpInstrExpr does deep equals between the two objects.
func EqualsRefOfRegexpInstrExpr(a, b *RegexpInstrExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.Pattern, b.Pattern) &&
		EqualsExpr(a.Position, b.Position) &&
		EqualsExpr(a.Occurrence, b.Occurrence) &&
		EqualsExpr(a.ReturnOption, b.ReturnOption) &&
		EqualsExpr(a.MatchType, b.MatchType)
}

// EqualsRefOfRegexpLikeExpr does deep equals between the two objects.
func EqualsRefOfRegexpLikeExpr(a, b *RegexpLikeExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.Pattern, b.Pattern) &&
		EqualsExpr(a.MatchType, b.MatchType)
}

// EqualsRefOfRegexpReplaceExpr does deep equals between the two objects.
func EqualsRefOfRegexpReplaceExpr(a, b *RegexpReplaceExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.Pattern, b.Pattern) &&
		EqualsExpr(a.Repl, b.Repl) &&
		EqualsExpr(a.Occurrence, b.Occurrence) &&
		EqualsExpr(a.Position, b.Position) &&
		EqualsExpr(a.MatchType, b.MatchType)
}

// EqualsRefOfRegexpSubstrExpr does deep equals between the two objects.
func EqualsRefOfRegexpSubstrExpr(a, b *RegexpSubstrExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsExpr(a.Pattern, b.Pattern) &&
		EqualsExpr(a.Occurrence, b.Occurrence) &&
		EqualsExpr(a.Position, b.Position) &&
		EqualsExpr(a.MatchType, b.MatchType)
}

// EqualsRefOfRelease does deep equals between the two objects.
func EqualsRefOfRelease(a, b *Release) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfRenameColumn does deep equals between the two objects.
func EqualsRefOfRenameColumn(a, b *RenameColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColName(a.OldName, b.OldName) &&
		EqualsRefOfColName(a.NewName, b.NewName)
}

// EqualsRefOfRenameIndex does deep equals between the two objects.
func EqualsRefOfRenameIndex(a, b *RenameIndex) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.OldName, b.OldName) &&
		EqualsIdentifierCI(a.NewName, b.NewName)
}

// EqualsRefOfRenameTable does deep equals between the two objects.
func EqualsRefOfRenameTable(a, b *RenameTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfRenameTablePair(a.TablePairs, b.TablePairs)
}

// EqualsRefOfRenameTableName does deep equals between the two objects.
func EqualsRefOfRenameTableName(a, b *RenameTableName) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.Table, b.Table)
}

// EqualsRefOfRevertMigration does deep equals between the two objects.
func EqualsRefOfRevertMigration(a, b *RevertMigration) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfRollback does deep equals between the two objects.
func EqualsRefOfRollback(a, b *Rollback) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRootNode does deep equals between the two objects.
func EqualsRootNode(a, b RootNode) bool {
	return EqualsSQLNode(a.SQLNode, b.SQLNode)
}

// EqualsRefOfSRollback does deep equals between the two objects.
func EqualsRefOfSRollback(a, b *SRollback) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfSavepoint does deep equals between the two objects.
func EqualsRefOfSavepoint(a, b *Savepoint) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfSelect does deep equals between the two objects.
func EqualsRefOfSelect(a, b *Select) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		a.StraightJoinHint == b.StraightJoinHint &&
		a.SQLCalcFoundRows == b.SQLCalcFoundRows &&
		EqualsRefOfBool(a.Cache, b.Cache) &&
		EqualsSliceOfTableExpr(a.From, b.From) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsSelectExprs(a.SelectExprs, b.SelectExprs) &&
		EqualsRefOfWhere(a.Where, b.Where) &&
		EqualsRefOfWith(a.With, b.With) &&
		EqualsGroupBy(a.GroupBy, b.GroupBy) &&
		EqualsRefOfWhere(a.Having, b.Having) &&
		EqualsNamedWindows(a.Windows, b.Windows) &&
		EqualsOrderBy(a.OrderBy, b.OrderBy) &&
		EqualsRefOfLimit(a.Limit, b.Limit) &&
		a.Lock == b.Lock &&
		EqualsRefOfSelectInto(a.Into, b.Into)
}

// EqualsSelectExprs does deep equals between the two objects.
func EqualsSelectExprs(a, b SelectExprs) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsSelectExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfSelectInto does deep equals between the two objects.
func EqualsRefOfSelectInto(a, b *SelectInto) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.FileName == b.FileName &&
		a.FormatOption == b.FormatOption &&
		a.ExportOption == b.ExportOption &&
		a.Manifest == b.Manifest &&
		a.Overwrite == b.Overwrite &&
		a.Type == b.Type &&
		EqualsColumnCharset(a.Charset, b.Charset)
}

// EqualsRefOfSet does deep equals between the two objects.
func EqualsRefOfSet(a, b *Set) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsSetExprs(a.Exprs, b.Exprs)
}

// EqualsRefOfSetExpr does deep equals between the two objects.
func EqualsRefOfSetExpr(a, b *SetExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfVariable(a.Var, b.Var) &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsSetExprs does deep equals between the two objects.
func EqualsSetExprs(a, b SetExprs) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfSetExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfSetTransaction does deep equals between the two objects.
func EqualsRefOfSetTransaction(a, b *SetTransaction) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		a.Scope == b.Scope &&
		EqualsSliceOfCharacteristic(a.Characteristics, b.Characteristics)
}

// EqualsRefOfShow does deep equals between the two objects.
func EqualsRefOfShow(a, b *Show) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsShowInternal(a.Internal, b.Internal)
}

// EqualsRefOfShowBasic does deep equals between the two objects.
func EqualsRefOfShowBasic(a, b *ShowBasic) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Full == b.Full &&
		a.Command == b.Command &&
		EqualsTableName(a.Tbl, b.Tbl) &&
		EqualsIdentifierCS(a.DbName, b.DbName) &&
		EqualsRefOfShowFilter(a.Filter, b.Filter)
}

// EqualsRefOfShowCreate does deep equals between the two objects.
func EqualsRefOfShowCreate(a, b *ShowCreate) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Command == b.Command &&
		EqualsTableName(a.Op, b.Op)
}

// EqualsRefOfShowFilter does deep equals between the two objects.
func EqualsRefOfShowFilter(a, b *ShowFilter) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Like == b.Like &&
		EqualsExpr(a.Filter, b.Filter)
}

// EqualsRefOfShowMigrationLogs does deep equals between the two objects.
func EqualsRefOfShowMigrationLogs(a, b *ShowMigrationLogs) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.UUID == b.UUID &&
		EqualsRefOfParsedComments(a.Comments, b.Comments)
}

// EqualsRefOfShowOther does deep equals between the two objects.
func EqualsRefOfShowOther(a, b *ShowOther) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Command == b.Command
}

// EqualsRefOfShowThrottledApps does deep equals between the two objects.
func EqualsRefOfShowThrottledApps(a, b *ShowThrottledApps) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsComments(a.Comments, b.Comments)
}

// EqualsRefOfStarExpr does deep equals between the two objects.
func EqualsRefOfStarExpr(a, b *StarExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.TableName, b.TableName)
}

// EqualsRefOfStd does deep equals between the two objects.
func EqualsRefOfStd(a, b *Std) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfStdDev does deep equals between the two objects.
func EqualsRefOfStdDev(a, b *StdDev) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfStdPop does deep equals between the two objects.
func EqualsRefOfStdPop(a, b *StdPop) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfStdSamp does deep equals between the two objects.
func EqualsRefOfStdSamp(a, b *StdSamp) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfStream does deep equals between the two objects.
func EqualsRefOfStream(a, b *Stream) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsSelectExpr(a.SelectExpr, b.SelectExpr) &&
		EqualsTableName(a.Table, b.Table)
}

// EqualsRefOfSubPartition does deep equals between the two objects.
func EqualsRefOfSubPartition(a, b *SubPartition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsLinear == b.IsLinear &&
		a.KeyAlgorithm == b.KeyAlgorithm &&
		a.SubPartitions == b.SubPartitions &&
		a.Type == b.Type &&
		EqualsColumns(a.ColList, b.ColList) &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfSubPartitionDefinition does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinition(a, b *SubPartitionDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsRefOfSubPartitionDefinitionOptions(a.Options, b.Options)
}

// EqualsRefOfSubPartitionDefinitionOptions does deep equals between the two objects.
func EqualsRefOfSubPartitionDefinitionOptions(a, b *SubPartitionDefinitionOptions) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TableSpace == b.TableSpace &&
		EqualsRefOfLiteral(a.Comment, b.Comment) &&
		EqualsRefOfPartitionEngine(a.Engine, b.Engine) &&
		EqualsRefOfLiteral(a.DataDirectory, b.DataDirectory) &&
		EqualsRefOfLiteral(a.IndexDirectory, b.IndexDirectory) &&
		EqualsRefOfInt(a.MaxRows, b.MaxRows) &&
		EqualsRefOfInt(a.MinRows, b.MinRows)
}

// EqualsSubPartitionDefinitions does deep equals between the two objects.
func EqualsSubPartitionDefinitions(a, b SubPartitionDefinitions) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfSubPartitionDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfSubquery does deep equals between the two objects.
func EqualsRefOfSubquery(a, b *Subquery) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSelectStatement(a.Select, b.Select)
}

// EqualsRefOfSubstrExpr does deep equals between the two objects.
func EqualsRefOfSubstrExpr(a, b *SubstrExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Name, b.Name) &&
		EqualsExpr(a.From, b.From) &&
		EqualsExpr(a.To, b.To)
}

// EqualsRefOfSum does deep equals between the two objects.
func EqualsRefOfSum(a, b *Sum) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsExpr(a.Arg, b.Arg)
}

// EqualsTableExprs does deep equals between the two objects.
func EqualsTableExprs(a, b TableExprs) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsTableName does deep equals between the two objects.
func EqualsTableName(a, b TableName) bool {
	return EqualsIdentifierCS(a.Name, b.Name) &&
		EqualsIdentifierCS(a.Qualifier, b.Qualifier)
}

// EqualsTableNames does deep equals between the two objects.
func EqualsTableNames(a, b TableNames) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableName(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsTableOptions does deep equals between the two objects.
func EqualsTableOptions(a, b TableOptions) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfTableOption(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfTableSpec does deep equals between the two objects.
func EqualsRefOfTableSpec(a, b *TableSpec) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfRefOfColumnDefinition(a.Columns, b.Columns) &&
		EqualsSliceOfRefOfIndexDefinition(a.Indexes, b.Indexes) &&
		EqualsSliceOfRefOfConstraintDefinition(a.Constraints, b.Constraints) &&
		EqualsTableOptions(a.Options, b.Options) &&
		EqualsRefOfPartitionOption(a.PartitionOption, b.PartitionOption)
}

// EqualsRefOfTablespaceOperation does deep equals between the two objects.
func EqualsRefOfTablespaceOperation(a, b *TablespaceOperation) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Import == b.Import
}

// EqualsRefOfTimestampFuncExpr does deep equals between the two objects.
func EqualsRefOfTimestampFuncExpr(a, b *TimestampFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Unit == b.Unit &&
		EqualsExpr(a.Expr1, b.Expr1) &&
		EqualsExpr(a.Expr2, b.Expr2)
}

// EqualsRefOfTrimFuncExpr does deep equals between the two objects.
func EqualsRefOfTrimFuncExpr(a, b *TrimFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.TrimFuncType == b.TrimFuncType &&
		a.Type == b.Type &&
		EqualsExpr(a.TrimArg, b.TrimArg) &&
		EqualsExpr(a.StringArg, b.StringArg)
}

// EqualsRefOfTruncateTable does deep equals between the two objects.
func EqualsRefOfTruncateTable(a, b *TruncateTable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.Table, b.Table)
}

// EqualsRefOfUnaryExpr does deep equals between the two objects.
func EqualsRefOfUnaryExpr(a, b *UnaryExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Operator == b.Operator &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfUnion does deep equals between the two objects.
func EqualsRefOfUnion(a, b *Union) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Distinct == b.Distinct &&
		EqualsSelectStatement(a.Left, b.Left) &&
		EqualsSelectStatement(a.Right, b.Right) &&
		EqualsOrderBy(a.OrderBy, b.OrderBy) &&
		EqualsRefOfWith(a.With, b.With) &&
		EqualsRefOfLimit(a.Limit, b.Limit) &&
		a.Lock == b.Lock &&
		EqualsRefOfSelectInto(a.Into, b.Into)
}

// EqualsRefOfUnlockTables does deep equals between the two objects.
func EqualsRefOfUnlockTables(a, b *UnlockTables) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfUpdate does deep equals between the two objects.
func EqualsRefOfUpdate(a, b *Update) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfWith(a.With, b.With) &&
		EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		a.Ignore == b.Ignore &&
		EqualsTableExprs(a.TableExprs, b.TableExprs) &&
		EqualsUpdateExprs(a.Exprs, b.Exprs) &&
		EqualsRefOfWhere(a.Where, b.Where) &&
		EqualsOrderBy(a.OrderBy, b.OrderBy) &&
		EqualsRefOfLimit(a.Limit, b.Limit)
}

// EqualsRefOfUpdateExpr does deep equals between the two objects.
func EqualsRefOfUpdateExpr(a, b *UpdateExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColName(a.Name, b.Name) &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsUpdateExprs does deep equals between the two objects.
func EqualsUpdateExprs(a, b UpdateExprs) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfUpdateExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfUpdateXMLExpr does deep equals between the two objects.
func EqualsRefOfUpdateXMLExpr(a, b *UpdateXMLExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Target, b.Target) &&
		EqualsExpr(a.XPathExpr, b.XPathExpr) &&
		EqualsExpr(a.NewXML, b.NewXML)
}

// EqualsRefOfUse does deep equals between the two objects.
func EqualsRefOfUse(a, b *Use) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCS(a.DBName, b.DBName)
}

// EqualsRefOfVStream does deep equals between the two objects.
func EqualsRefOfVStream(a, b *VStream) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfParsedComments(a.Comments, b.Comments) &&
		EqualsSelectExpr(a.SelectExpr, b.SelectExpr) &&
		EqualsTableName(a.Table, b.Table) &&
		EqualsRefOfWhere(a.Where, b.Where) &&
		EqualsRefOfLimit(a.Limit, b.Limit)
}

// EqualsValTuple does deep equals between the two objects.
func EqualsValTuple(a, b ValTuple) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfValidation does deep equals between the two objects.
func EqualsRefOfValidation(a, b *Validation) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.With == b.With
}

// EqualsValues does deep equals between the two objects.
func EqualsValues(a, b Values) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsValTuple(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfValuesFuncExpr does deep equals between the two objects.
func EqualsRefOfValuesFuncExpr(a, b *ValuesFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsRefOfColName(a.Name, b.Name)
}

// EqualsRefOfVarPop does deep equals between the two objects.
func EqualsRefOfVarPop(a, b *VarPop) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfVarSamp does deep equals between the two objects.
func EqualsRefOfVarSamp(a, b *VarSamp) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsRefOfVariable does deep equals between the two objects.
func EqualsRefOfVariable(a, b *Variable) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Scope == b.Scope &&
		EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfVariance does deep equals between the two objects.
func EqualsRefOfVariance(a, b *Variance) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Arg, b.Arg)
}

// EqualsVindexParam does deep equals between the two objects.
func EqualsVindexParam(a, b VindexParam) bool {
	return a.Val == b.Val &&
		EqualsIdentifierCI(a.Key, b.Key)
}

// EqualsRefOfVindexSpec does deep equals between the two objects.
func EqualsRefOfVindexSpec(a, b *VindexSpec) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsIdentifierCI(a.Type, b.Type) &&
		EqualsSliceOfVindexParam(a.Params, b.Params)
}

// EqualsRefOfWeightStringFuncExpr does deep equals between the two objects.
func EqualsRefOfWeightStringFuncExpr(a, b *WeightStringFuncExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Expr, b.Expr) &&
		EqualsRefOfConvertType(a.As, b.As)
}

// EqualsRefOfWhen does deep equals between the two objects.
func EqualsRefOfWhen(a, b *When) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Cond, b.Cond) &&
		EqualsExpr(a.Val, b.Val)
}

// EqualsRefOfWhere does deep equals between the two objects.
func EqualsRefOfWhere(a, b *Where) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Type == b.Type &&
		EqualsExpr(a.Expr, b.Expr)
}

// EqualsRefOfWindowDefinition does deep equals between the two objects.
func EqualsRefOfWindowDefinition(a, b *WindowDefinition) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsRefOfWindowSpecification(a.WindowSpec, b.WindowSpec)
}

// EqualsWindowDefinitions does deep equals between the two objects.
func EqualsWindowDefinitions(a, b WindowDefinitions) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfWindowDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfWindowSpecification does deep equals between the two objects.
func EqualsRefOfWindowSpecification(a, b *WindowSpecification) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsExprs(a.PartitionClause, b.PartitionClause) &&
		EqualsOrderBy(a.OrderClause, b.OrderClause) &&
		EqualsRefOfFrameClause(a.FrameClause, b.FrameClause)
}

// EqualsRefOfWith does deep equals between the two objects.
func EqualsRefOfWith(a, b *With) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Recursive == b.Recursive &&
		EqualsSliceOfRefOfCommonTableExpr(a.ctes, b.ctes)
}

// EqualsRefOfXorExpr does deep equals between the two objects.
func EqualsRefOfXorExpr(a, b *XorExpr) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Left, b.Left) &&
		EqualsExpr(a.Right, b.Right)
}

// EqualsAggrFunc does deep equals between the two objects.
func EqualsAggrFunc(inA, inB AggrFunc) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvg(a, b)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAnd(a, b)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOr(a, b)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXor(a, b)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCount(a, b)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStar(a, b)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExpr(a, b)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMax(a, b)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMin(a, b)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStd(a, b)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDev(a, b)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPop(a, b)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSamp(a, b)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSum(a, b)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPop(a, b)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSamp(a, b)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVariance(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsAlterOption does deep equals between the two objects.
func EqualsAlterOption(inA, inB AlterOption) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AddColumns:
		b, ok := inB.(*AddColumns)
		if !ok {
			return false
		}
		return EqualsRefOfAddColumns(a, b)
	case *AddConstraintDefinition:
		b, ok := inB.(*AddConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddConstraintDefinition(a, b)
	case *AddIndexDefinition:
		b, ok := inB.(*AddIndexDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfAddIndexDefinition(a, b)
	case AlgorithmValue:
		b, ok := inB.(AlgorithmValue)
		if !ok {
			return false
		}
		return a == b
	case *AlterCharset:
		b, ok := inB.(*AlterCharset)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCharset(a, b)
	case *AlterCheck:
		b, ok := inB.(*AlterCheck)
		if !ok {
			return false
		}
		return EqualsRefOfAlterCheck(a, b)
	case *AlterColumn:
		b, ok := inB.(*AlterColumn)
		if !ok {
			return false
		}
		return EqualsRefOfAlterColumn(a, b)
	case *AlterIndex:
		b, ok := inB.(*AlterIndex)
		if !ok {
			return false
		}
		return EqualsRefOfAlterIndex(a, b)
	case *ChangeColumn:
		b, ok := inB.(*ChangeColumn)
		if !ok {
			return false
		}
		return EqualsRefOfChangeColumn(a, b)
	case *DropColumn:
		b, ok := inB.(*DropColumn)
		if !ok {
			return false
		}
		return EqualsRefOfDropColumn(a, b)
	case *DropKey:
		b, ok := inB.(*DropKey)
		if !ok {
			return false
		}
		return EqualsRefOfDropKey(a, b)
	case *Force:
		b, ok := inB.(*Force)
		if !ok {
			return false
		}
		return EqualsRefOfForce(a, b)
	case *KeyState:
		b, ok := inB.(*KeyState)
		if !ok {
			return false
		}
		return EqualsRefOfKeyState(a, b)
	case *LockOption:
		b, ok := inB.(*LockOption)
		if !ok {
			return false
		}
		return EqualsRefOfLockOption(a, b)
	case *ModifyColumn:
		b, ok := inB.(*ModifyColumn)
		if !ok {
			return false
		}
		return EqualsRefOfModifyColumn(a, b)
	case *OrderByOption:
		b, ok := inB.(*OrderByOption)
		if !ok {
			return false
		}
		return EqualsRefOfOrderByOption(a, b)
	case *RenameColumn:
		b, ok := inB.(*RenameColumn)
		if !ok {
			return false
		}
		return EqualsRefOfRenameColumn(a, b)
	case *RenameIndex:
		b, ok := inB.(*RenameIndex)
		if !ok {
			return false
		}
		return EqualsRefOfRenameIndex(a, b)
	case *RenameTableName:
		b, ok := inB.(*RenameTableName)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTableName(a, b)
	case TableOptions:
		b, ok := inB.(TableOptions)
		if !ok {
			return false
		}
		return EqualsTableOptions(a, b)
	case *TablespaceOperation:
		b, ok := inB.(*TablespaceOperation)
		if !ok {
			return false
		}
		return EqualsRefOfTablespaceOperation(a, b)
	case *Validation:
		b, ok := inB.(*Validation)
		if !ok {
			return false
		}
		return EqualsRefOfValidation(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsCallable does deep equals between the two objects.
func EqualsCallable(inA, inB Callable) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExpr(a, b)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExpr(a, b)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExpr(a, b)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExpr(a, b)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExpr(a, b)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExpr(a, b)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExpr(a, b)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExpr(a, b)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExpr(a, b)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExpr(a, b)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExpr(a, b)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExpr(a, b)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExpr(a, b)
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExpr(a, b)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExpr(a, b)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExpr(a, b)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExpr(a, b)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExpr(a, b)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExpr(a, b)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExpr(a, b)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExpr(a, b)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExpr(a, b)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExpr(a, b)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExpr(a, b)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExpr(a, b)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExpr(a, b)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExpr(a, b)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExpr(a, b)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExpr(a, b)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExpr(a, b)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExpr(a, b)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExpr(a, b)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExpr(a, b)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExpr(a, b)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExpr(a, b)
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExpr(a, b)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExpr(a, b)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExpr(a, b)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindow(a, b)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExpr(a, b)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExpr(a, b)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExpr(a, b)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExpr(a, b)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExpr(a, b)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExpr(a, b)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExpr(a, b)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExpr(a, b)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExpr(a, b)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExpr(a, b)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExpr(a, b)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExpr(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsCharacteristic does deep equals between the two objects.
func EqualsCharacteristic(inA, inB Characteristic) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case AccessMode:
		b, ok := inB.(AccessMode)
		if !ok {
			return false
		}
		return a == b
	case IsolationLevel:
		b, ok := inB.(IsolationLevel)
		if !ok {
			return false
		}
		return a == b
	default:
		// this should never happen
		return false
	}
}

// EqualsColTuple does deep equals between the two objects.
func EqualsColTuple(inA, inB ColTuple) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubquery(a, b)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTuple(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsConstraintInfo does deep equals between the two objects.
func EqualsConstraintInfo(inA, inB ConstraintInfo) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *CheckConstraintDefinition:
		b, ok := inB.(*CheckConstraintDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfCheckConstraintDefinition(a, b)
	case *ForeignKeyDefinition:
		b, ok := inB.(*ForeignKeyDefinition)
		if !ok {
			return false
		}
		return EqualsRefOfForeignKeyDefinition(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsDBDDLStatement does deep equals between the two objects.
func EqualsDBDDLStatement(inA, inB DBDDLStatement) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabase(a, b)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabase(a, b)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabase(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsDDLStatement does deep equals between the two objects.
func EqualsDDLStatement(inA, inB DDLStatement) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTable(a, b)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterView(a, b)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTable(a, b)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateView(a, b)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTable(a, b)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropView(a, b)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTable(a, b)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTable(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsExplain does deep equals between the two objects.
func EqualsExplain(inA, inB Explain) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmt(a, b)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTab(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsExpr does deep equals between the two objects.
func EqualsExpr(inA, inB Expr) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AndExpr:
		b, ok := inB.(*AndExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAndExpr(a, b)
	case Argument:
		b, ok := inB.(Argument)
		if !ok {
			return false
		}
		return a == b
	case *ArgumentLessWindowExpr:
		b, ok := inB.(*ArgumentLessWindowExpr)
		if !ok {
			return false
		}
		return EqualsRefOfArgumentLessWindowExpr(a, b)
	case *Avg:
		b, ok := inB.(*Avg)
		if !ok {
			return false
		}
		return EqualsRefOfAvg(a, b)
	case *BetweenExpr:
		b, ok := inB.(*BetweenExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBetweenExpr(a, b)
	case *BinaryExpr:
		b, ok := inB.(*BinaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfBinaryExpr(a, b)
	case *BitAnd:
		b, ok := inB.(*BitAnd)
		if !ok {
			return false
		}
		return EqualsRefOfBitAnd(a, b)
	case *BitOr:
		b, ok := inB.(*BitOr)
		if !ok {
			return false
		}
		return EqualsRefOfBitOr(a, b)
	case *BitXor:
		b, ok := inB.(*BitXor)
		if !ok {
			return false
		}
		return EqualsRefOfBitXor(a, b)
	case BoolVal:
		b, ok := inB.(BoolVal)
		if !ok {
			return false
		}
		return a == b
	case *CaseExpr:
		b, ok := inB.(*CaseExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCaseExpr(a, b)
	case *CastExpr:
		b, ok := inB.(*CastExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCastExpr(a, b)
	case *CharExpr:
		b, ok := inB.(*CharExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCharExpr(a, b)
	case *ColName:
		b, ok := inB.(*ColName)
		if !ok {
			return false
		}
		return EqualsRefOfColName(a, b)
	case *CollateExpr:
		b, ok := inB.(*CollateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCollateExpr(a, b)
	case *ComparisonExpr:
		b, ok := inB.(*ComparisonExpr)
		if !ok {
			return false
		}
		return EqualsRefOfComparisonExpr(a, b)
	case *ConvertExpr:
		b, ok := inB.(*ConvertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertExpr(a, b)
	case *ConvertUsingExpr:
		b, ok := inB.(*ConvertUsingExpr)
		if !ok {
			return false
		}
		return EqualsRefOfConvertUsingExpr(a, b)
	case *Count:
		b, ok := inB.(*Count)
		if !ok {
			return false
		}
		return EqualsRefOfCount(a, b)
	case *CountStar:
		b, ok := inB.(*CountStar)
		if !ok {
			return false
		}
		return EqualsRefOfCountStar(a, b)
	case *CurTimeFuncExpr:
		b, ok := inB.(*CurTimeFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfCurTimeFuncExpr(a, b)
	case *Default:
		b, ok := inB.(*Default)
		if !ok {
			return false
		}
		return EqualsRefOfDefault(a, b)
	case *ExistsExpr:
		b, ok := inB.(*ExistsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExistsExpr(a, b)
	case *ExtractFuncExpr:
		b, ok := inB.(*ExtractFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractFuncExpr(a, b)
	case *ExtractValueExpr:
		b, ok := inB.(*ExtractValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfExtractValueExpr(a, b)
	case *ExtractedSubquery:
		b, ok := inB.(*ExtractedSubquery)
		if !ok {
			return false
		}
		return EqualsRefOfExtractedSubquery(a, b)
	case *FirstOrLastValueExpr:
		b, ok := inB.(*FirstOrLastValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFirstOrLastValueExpr(a, b)
	case *FuncExpr:
		b, ok := inB.(*FuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfFuncExpr(a, b)
	case *GTIDFuncExpr:
		b, ok := inB.(*GTIDFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGTIDFuncExpr(a, b)
	case *GroupConcatExpr:
		b, ok := inB.(*GroupConcatExpr)
		if !ok {
			return false
		}
		return EqualsRefOfGroupConcatExpr(a, b)
	case *InsertExpr:
		b, ok := inB.(*InsertExpr)
		if !ok {
			return false
		}
		return EqualsRefOfInsertExpr(a, b)
	case *IntervalExpr:
		b, ok := inB.(*IntervalExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalExpr(a, b)
	case *IntervalFuncExpr:
		b, ok := inB.(*IntervalFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntervalFuncExpr(a, b)
	case *IntroducerExpr:
		b, ok := inB.(*IntroducerExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIntroducerExpr(a, b)
	case *IsExpr:
		b, ok := inB.(*IsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfIsExpr(a, b)
	case *JSONArrayExpr:
		b, ok := inB.(*JSONArrayExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONArrayExpr(a, b)
	case *JSONAttributesExpr:
		b, ok := inB.(*JSONAttributesExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONAttributesExpr(a, b)
	case *JSONContainsExpr:
		b, ok := inB.(*JSONContainsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsExpr(a, b)
	case *JSONContainsPathExpr:
		b, ok := inB.(*JSONContainsPathExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONContainsPathExpr(a, b)
	case *JSONExtractExpr:
		b, ok := inB.(*JSONExtractExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONExtractExpr(a, b)
	case *JSONKeysExpr:
		b, ok := inB.(*JSONKeysExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONKeysExpr(a, b)
	case *JSONObjectExpr:
		b, ok := inB.(*JSONObjectExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONObjectExpr(a, b)
	case *JSONOverlapsExpr:
		b, ok := inB.(*JSONOverlapsExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONOverlapsExpr(a, b)
	case *JSONPrettyExpr:
		b, ok := inB.(*JSONPrettyExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONPrettyExpr(a, b)
	case *JSONQuoteExpr:
		b, ok := inB.(*JSONQuoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONQuoteExpr(a, b)
	case *JSONRemoveExpr:
		b, ok := inB.(*JSONRemoveExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONRemoveExpr(a, b)
	case *JSONSchemaValidFuncExpr:
		b, ok := inB.(*JSONSchemaValidFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidFuncExpr(a, b)
	case *JSONSchemaValidationReportFuncExpr:
		b, ok := inB.(*JSONSchemaValidationReportFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSchemaValidationReportFuncExpr(a, b)
	case *JSONSearchExpr:
		b, ok := inB.(*JSONSearchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONSearchExpr(a, b)
	case *JSONStorageFreeExpr:
		b, ok := inB.(*JSONStorageFreeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageFreeExpr(a, b)
	case *JSONStorageSizeExpr:
		b, ok := inB.(*JSONStorageSizeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONStorageSizeExpr(a, b)
	case *JSONUnquoteExpr:
		b, ok := inB.(*JSONUnquoteExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONUnquoteExpr(a, b)
	case *JSONValueExpr:
		b, ok := inB.(*JSONValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueExpr(a, b)
	case *JSONValueMergeExpr:
		b, ok := inB.(*JSONValueMergeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueMergeExpr(a, b)
	case *JSONValueModifierExpr:
		b, ok := inB.(*JSONValueModifierExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONValueModifierExpr(a, b)
	case *LagLeadExpr:
		b, ok := inB.(*LagLeadExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLagLeadExpr(a, b)
	case ListArg:
		b, ok := inB.(ListArg)
		if !ok {
			return false
		}
		return a == b
	case *Literal:
		b, ok := inB.(*Literal)
		if !ok {
			return false
		}
		return EqualsRefOfLiteral(a, b)
	case *LocateExpr:
		b, ok := inB.(*LocateExpr)
		if !ok {
			return false
		}
		return EqualsRefOfLocateExpr(a, b)
	case *LockingFunc:
		b, ok := inB.(*LockingFunc)
		if !ok {
			return false
		}
		return EqualsRefOfLockingFunc(a, b)
	case *MatchExpr:
		b, ok := inB.(*MatchExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMatchExpr(a, b)
	case *Max:
		b, ok := inB.(*Max)
		if !ok {
			return false
		}
		return EqualsRefOfMax(a, b)
	case *MemberOfExpr:
		b, ok := inB.(*MemberOfExpr)
		if !ok {
			return false
		}
		return EqualsRefOfMemberOfExpr(a, b)
	case *Min:
		b, ok := inB.(*Min)
		if !ok {
			return false
		}
		return EqualsRefOfMin(a, b)
	case *NTHValueExpr:
		b, ok := inB.(*NTHValueExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNTHValueExpr(a, b)
	case *NamedWindow:
		b, ok := inB.(*NamedWindow)
		if !ok {
			return false
		}
		return EqualsRefOfNamedWindow(a, b)
	case *NotExpr:
		b, ok := inB.(*NotExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNotExpr(a, b)
	case *NtileExpr:
		b, ok := inB.(*NtileExpr)
		if !ok {
			return false
		}
		return EqualsRefOfNtileExpr(a, b)
	case *NullVal:
		b, ok := inB.(*NullVal)
		if !ok {
			return false
		}
		return EqualsRefOfNullVal(a, b)
	case *Offset:
		b, ok := inB.(*Offset)
		if !ok {
			return false
		}
		return EqualsRefOfOffset(a, b)
	case *OrExpr:
		b, ok := inB.(*OrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfOrExpr(a, b)
	case *PerformanceSchemaFuncExpr:
		b, ok := inB.(*PerformanceSchemaFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfPerformanceSchemaFuncExpr(a, b)
	case *RegexpInstrExpr:
		b, ok := inB.(*RegexpInstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpInstrExpr(a, b)
	case *RegexpLikeExpr:
		b, ok := inB.(*RegexpLikeExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpLikeExpr(a, b)
	case *RegexpReplaceExpr:
		b, ok := inB.(*RegexpReplaceExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpReplaceExpr(a, b)
	case *RegexpSubstrExpr:
		b, ok := inB.(*RegexpSubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfRegexpSubstrExpr(a, b)
	case *Std:
		b, ok := inB.(*Std)
		if !ok {
			return false
		}
		return EqualsRefOfStd(a, b)
	case *StdDev:
		b, ok := inB.(*StdDev)
		if !ok {
			return false
		}
		return EqualsRefOfStdDev(a, b)
	case *StdPop:
		b, ok := inB.(*StdPop)
		if !ok {
			return false
		}
		return EqualsRefOfStdPop(a, b)
	case *StdSamp:
		b, ok := inB.(*StdSamp)
		if !ok {
			return false
		}
		return EqualsRefOfStdSamp(a, b)
	case *Subquery:
		b, ok := inB.(*Subquery)
		if !ok {
			return false
		}
		return EqualsRefOfSubquery(a, b)
	case *SubstrExpr:
		b, ok := inB.(*SubstrExpr)
		if !ok {
			return false
		}
		return EqualsRefOfSubstrExpr(a, b)
	case *Sum:
		b, ok := inB.(*Sum)
		if !ok {
			return false
		}
		return EqualsRefOfSum(a, b)
	case *TimestampFuncExpr:
		b, ok := inB.(*TimestampFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTimestampFuncExpr(a, b)
	case *TrimFuncExpr:
		b, ok := inB.(*TrimFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfTrimFuncExpr(a, b)
	case *UnaryExpr:
		b, ok := inB.(*UnaryExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUnaryExpr(a, b)
	case *UpdateXMLExpr:
		b, ok := inB.(*UpdateXMLExpr)
		if !ok {
			return false
		}
		return EqualsRefOfUpdateXMLExpr(a, b)
	case ValTuple:
		b, ok := inB.(ValTuple)
		if !ok {
			return false
		}
		return EqualsValTuple(a, b)
	case *ValuesFuncExpr:
		b, ok := inB.(*ValuesFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfValuesFuncExpr(a, b)
	case *VarPop:
		b, ok := inB.(*VarPop)
		if !ok {
			return false
		}
		return EqualsRefOfVarPop(a, b)
	case *VarSamp:
		b, ok := inB.(*VarSamp)
		if !ok {
			return false
		}
		return EqualsRefOfVarSamp(a, b)
	case *Variable:
		b, ok := inB.(*Variable)
		if !ok {
			return false
		}
		return EqualsRefOfVariable(a, b)
	case *Variance:
		b, ok := inB.(*Variance)
		if !ok {
			return false
		}
		return EqualsRefOfVariance(a, b)
	case *WeightStringFuncExpr:
		b, ok := inB.(*WeightStringFuncExpr)
		if !ok {
			return false
		}
		return EqualsRefOfWeightStringFuncExpr(a, b)
	case *XorExpr:
		b, ok := inB.(*XorExpr)
		if !ok {
			return false
		}
		return EqualsRefOfXorExpr(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsInsertRows does deep equals between the two objects.
func EqualsInsertRows(inA, inB InsertRows) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelect(a, b)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnion(a, b)
	case Values:
		b, ok := inB.(Values)
		if !ok {
			return false
		}
		return EqualsValues(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsSelectExpr does deep equals between the two objects.
func EqualsSelectExpr(inA, inB SelectExpr) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AliasedExpr:
		b, ok := inB.(*AliasedExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedExpr(a, b)
	case *Nextval:
		b, ok := inB.(*Nextval)
		if !ok {
			return false
		}
		return EqualsRefOfNextval(a, b)
	case *StarExpr:
		b, ok := inB.(*StarExpr)
		if !ok {
			return false
		}
		return EqualsRefOfStarExpr(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsSelectStatement does deep equals between the two objects.
func EqualsSelectStatement(inA, inB SelectStatement) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelect(a, b)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnion(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsShowInternal does deep equals between the two objects.
func EqualsShowInternal(inA, inB ShowInternal) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *ShowBasic:
		b, ok := inB.(*ShowBasic)
		if !ok {
			return false
		}
		return EqualsRefOfShowBasic(a, b)
	case *ShowCreate:
		b, ok := inB.(*ShowCreate)
		if !ok {
			return false
		}
		return EqualsRefOfShowCreate(a, b)
	case *ShowOther:
		b, ok := inB.(*ShowOther)
		if !ok {
			return false
		}
		return EqualsRefOfShowOther(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsSimpleTableExpr does deep equals between the two objects.
func EqualsSimpleTableExpr(inA, inB SimpleTableExpr) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *DerivedTable:
		b, ok := inB.(*DerivedTable)
		if !ok {
			return false
		}
		return EqualsRefOfDerivedTable(a, b)
	case TableName:
		b, ok := inB.(TableName)
		if !ok {
			return false
		}
		return EqualsTableName(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsStatement does deep equals between the two objects.
func EqualsStatement(inA, inB Statement) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AlterDatabase:
		b, ok := inB.(*AlterDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfAlterDatabase(a, b)
	case *AlterMigration:
		b, ok := inB.(*AlterMigration)
		if !ok {
			return false
		}
		return EqualsRefOfAlterMigration(a, b)
	case *AlterTable:
		b, ok := inB.(*AlterTable)
		if !ok {
			return false
		}
		return EqualsRefOfAlterTable(a, b)
	case *AlterView:
		b, ok := inB.(*AlterView)
		if !ok {
			return false
		}
		return EqualsRefOfAlterView(a, b)
	case *AlterVschema:
		b, ok := inB.(*AlterVschema)
		if !ok {
			return false
		}
		return EqualsRefOfAlterVschema(a, b)
	case *Begin:
		b, ok := inB.(*Begin)
		if !ok {
			return false
		}
		return EqualsRefOfBegin(a, b)
	case *CallProc:
		b, ok := inB.(*CallProc)
		if !ok {
			return false
		}
		return EqualsRefOfCallProc(a, b)
	case *CommentOnly:
		b, ok := inB.(*CommentOnly)
		if !ok {
			return false
		}
		return EqualsRefOfCommentOnly(a, b)
	case *Commit:
		b, ok := inB.(*Commit)
		if !ok {
			return false
		}
		return EqualsRefOfCommit(a, b)
	case *CreateDatabase:
		b, ok := inB.(*CreateDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfCreateDatabase(a, b)
	case *CreateTable:
		b, ok := inB.(*CreateTable)
		if !ok {
			return false
		}
		return EqualsRefOfCreateTable(a, b)
	case *CreateView:
		b, ok := inB.(*CreateView)
		if !ok {
			return false
		}
		return EqualsRefOfCreateView(a, b)
	case *DeallocateStmt:
		b, ok := inB.(*DeallocateStmt)
		if !ok {
			return false
		}
		return EqualsRefOfDeallocateStmt(a, b)
	case *Delete:
		b, ok := inB.(*Delete)
		if !ok {
			return false
		}
		return EqualsRefOfDelete(a, b)
	case *DropDatabase:
		b, ok := inB.(*DropDatabase)
		if !ok {
			return false
		}
		return EqualsRefOfDropDatabase(a, b)
	case *DropTable:
		b, ok := inB.(*DropTable)
		if !ok {
			return false
		}
		return EqualsRefOfDropTable(a, b)
	case *DropView:
		b, ok := inB.(*DropView)
		if !ok {
			return false
		}
		return EqualsRefOfDropView(a, b)
	case *ExecuteStmt:
		b, ok := inB.(*ExecuteStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExecuteStmt(a, b)
	case *ExplainStmt:
		b, ok := inB.(*ExplainStmt)
		if !ok {
			return false
		}
		return EqualsRefOfExplainStmt(a, b)
	case *ExplainTab:
		b, ok := inB.(*ExplainTab)
		if !ok {
			return false
		}
		return EqualsRefOfExplainTab(a, b)
	case *Flush:
		b, ok := inB.(*Flush)
		if !ok {
			return false
		}
		return EqualsRefOfFlush(a, b)
	case *Insert:
		b, ok := inB.(*Insert)
		if !ok {
			return false
		}
		return EqualsRefOfInsert(a, b)
	case *Load:
		b, ok := inB.(*Load)
		if !ok {
			return false
		}
		return EqualsRefOfLoad(a, b)
	case *LockTables:
		b, ok := inB.(*LockTables)
		if !ok {
			return false
		}
		return EqualsRefOfLockTables(a, b)
	case *OtherAdmin:
		b, ok := inB.(*OtherAdmin)
		if !ok {
			return false
		}
		return EqualsRefOfOtherAdmin(a, b)
	case *OtherRead:
		b, ok := inB.(*OtherRead)
		if !ok {
			return false
		}
		return EqualsRefOfOtherRead(a, b)
	case *PrepareStmt:
		b, ok := inB.(*PrepareStmt)
		if !ok {
			return false
		}
		return EqualsRefOfPrepareStmt(a, b)
	case *Release:
		b, ok := inB.(*Release)
		if !ok {
			return false
		}
		return EqualsRefOfRelease(a, b)
	case *RenameTable:
		b, ok := inB.(*RenameTable)
		if !ok {
			return false
		}
		return EqualsRefOfRenameTable(a, b)
	case *RevertMigration:
		b, ok := inB.(*RevertMigration)
		if !ok {
			return false
		}
		return EqualsRefOfRevertMigration(a, b)
	case *Rollback:
		b, ok := inB.(*Rollback)
		if !ok {
			return false
		}
		return EqualsRefOfRollback(a, b)
	case *SRollback:
		b, ok := inB.(*SRollback)
		if !ok {
			return false
		}
		return EqualsRefOfSRollback(a, b)
	case *Savepoint:
		b, ok := inB.(*Savepoint)
		if !ok {
			return false
		}
		return EqualsRefOfSavepoint(a, b)
	case *Select:
		b, ok := inB.(*Select)
		if !ok {
			return false
		}
		return EqualsRefOfSelect(a, b)
	case *Set:
		b, ok := inB.(*Set)
		if !ok {
			return false
		}
		return EqualsRefOfSet(a, b)
	case *SetTransaction:
		b, ok := inB.(*SetTransaction)
		if !ok {
			return false
		}
		return EqualsRefOfSetTransaction(a, b)
	case *Show:
		b, ok := inB.(*Show)
		if !ok {
			return false
		}
		return EqualsRefOfShow(a, b)
	case *ShowMigrationLogs:
		b, ok := inB.(*ShowMigrationLogs)
		if !ok {
			return false
		}
		return EqualsRefOfShowMigrationLogs(a, b)
	case *ShowThrottledApps:
		b, ok := inB.(*ShowThrottledApps)
		if !ok {
			return false
		}
		return EqualsRefOfShowThrottledApps(a, b)
	case *Stream:
		b, ok := inB.(*Stream)
		if !ok {
			return false
		}
		return EqualsRefOfStream(a, b)
	case *TruncateTable:
		b, ok := inB.(*TruncateTable)
		if !ok {
			return false
		}
		return EqualsRefOfTruncateTable(a, b)
	case *Union:
		b, ok := inB.(*Union)
		if !ok {
			return false
		}
		return EqualsRefOfUnion(a, b)
	case *UnlockTables:
		b, ok := inB.(*UnlockTables)
		if !ok {
			return false
		}
		return EqualsRefOfUnlockTables(a, b)
	case *Update:
		b, ok := inB.(*Update)
		if !ok {
			return false
		}
		return EqualsRefOfUpdate(a, b)
	case *Use:
		b, ok := inB.(*Use)
		if !ok {
			return false
		}
		return EqualsRefOfUse(a, b)
	case *VStream:
		b, ok := inB.(*VStream)
		if !ok {
			return false
		}
		return EqualsRefOfVStream(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsTableExpr does deep equals between the two objects.
func EqualsTableExpr(inA, inB TableExpr) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *AliasedTableExpr:
		b, ok := inB.(*AliasedTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfAliasedTableExpr(a, b)
	case *JSONTableExpr:
		b, ok := inB.(*JSONTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJSONTableExpr(a, b)
	case *JoinTableExpr:
		b, ok := inB.(*JoinTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfJoinTableExpr(a, b)
	case *ParenTableExpr:
		b, ok := inB.(*ParenTableExpr)
		if !ok {
			return false
		}
		return EqualsRefOfParenTableExpr(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsSliceOfRefOfColumnDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfColumnDefinition(a, b []*ColumnDefinition) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfColumnDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfBool does deep equals between the two objects.
func EqualsRefOfBool(a, b *bool) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsSliceOfDatabaseOption does deep equals between the two objects.
func EqualsSliceOfDatabaseOption(a, b []DatabaseOption) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsDatabaseOption(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfAlterOption does deep equals between the two objects.
func EqualsSliceOfAlterOption(a, b []AlterOption) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAlterOption(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfIdentifierCI does deep equals between the two objects.
func EqualsSliceOfIdentifierCI(a, b []IdentifierCI) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsIdentifierCI(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfWhen does deep equals between the two objects.
func EqualsSliceOfRefOfWhen(a, b []*When) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfWhen(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsColumnType does deep equals between the two objects.
func EqualsColumnType(a, b ColumnType) bool {
	return a.Type == b.Type &&
		a.Unsigned == b.Unsigned &&
		a.Zerofill == b.Zerofill &&
		EqualsRefOfColumnTypeOptions(a.Options, b.Options) &&
		EqualsRefOfLiteral(a.Length, b.Length) &&
		EqualsRefOfLiteral(a.Scale, b.Scale) &&
		EqualsColumnCharset(a.Charset, b.Charset) &&
		EqualsSliceOfString(a.EnumValues, b.EnumValues)
}

// EqualsRefOfColumnTypeOptions does deep equals between the two objects.
func EqualsRefOfColumnTypeOptions(a, b *ColumnTypeOptions) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Autoincrement == b.Autoincrement &&
		a.Collate == b.Collate &&
		EqualsRefOfBool(a.Null, b.Null) &&
		EqualsExpr(a.Default, b.Default) &&
		EqualsExpr(a.OnUpdate, b.OnUpdate) &&
		EqualsExpr(a.As, b.As) &&
		EqualsRefOfLiteral(a.Comment, b.Comment) &&
		a.Storage == b.Storage &&
		EqualsRefOfReferenceDefinition(a.Reference, b.Reference) &&
		a.KeyOpt == b.KeyOpt &&
		EqualsRefOfBool(a.Invisible, b.Invisible) &&
		a.Format == b.Format &&
		EqualsRefOfLiteral(a.EngineAttribute, b.EngineAttribute) &&
		EqualsRefOfLiteral(a.SecondaryEngineAttribute, b.SecondaryEngineAttribute) &&
		EqualsRefOfLiteral(a.SRID, b.SRID)
}

// EqualsColumnCharset does deep equals between the two objects.
func EqualsColumnCharset(a, b ColumnCharset) bool {
	return a.Name == b.Name &&
		a.Binary == b.Binary
}

// EqualsSliceOfString does deep equals between the two objects.
func EqualsSliceOfString(a, b []string) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfVariable does deep equals between the two objects.
func EqualsSliceOfRefOfVariable(a, b []*Variable) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfVariable(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfIdentifierCI does deep equals between the two objects.
func EqualsRefOfIdentifierCI(a, b *IdentifierCI) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.val == b.val &&
		a.lowered == b.lowered
}

// EqualsRefOfIdentifierCS does deep equals between the two objects.
func EqualsRefOfIdentifierCS(a, b *IdentifierCS) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsSliceOfRefOfIndexColumn does deep equals between the two objects.
func EqualsSliceOfRefOfIndexColumn(a, b []*IndexColumn) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexColumn(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfIndexOption does deep equals between the two objects.
func EqualsSliceOfRefOfIndexOption(a, b []*IndexOption) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexOption(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfExpr does deep equals between the two objects.
func EqualsSliceOfExpr(a, b []Expr) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfJSONObjectParam does deep equals between the two objects.
func EqualsSliceOfRefOfJSONObjectParam(a, b []*JSONObjectParam) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfJSONObjectParam(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfJSONObjectParam does deep equals between the two objects.
func EqualsRefOfJSONObjectParam(a, b *JSONObjectParam) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Key, b.Key) &&
		EqualsExpr(a.Value, b.Value)
}

// EqualsSliceOfRefOfJtColumnDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfJtColumnDefinition(a, b []*JtColumnDefinition) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfJtColumnDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfJtOrdinalColDef does deep equals between the two objects.
func EqualsRefOfJtOrdinalColDef(a, b *JtOrdinalColDef) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Name, b.Name)
}

// EqualsRefOfJtPathColDef does deep equals between the two objects.
func EqualsRefOfJtPathColDef(a, b *JtPathColDef) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.JtColExists == b.JtColExists &&
		EqualsIdentifierCI(a.Name, b.Name) &&
		EqualsColumnType(a.Type, b.Type) &&
		EqualsExpr(a.Path, b.Path) &&
		EqualsRefOfJtOnResponse(a.EmptyOnResponse, b.EmptyOnResponse) &&
		EqualsRefOfJtOnResponse(a.ErrorOnResponse, b.ErrorOnResponse)
}

// EqualsRefOfJtNestedPathColDef does deep equals between the two objects.
func EqualsRefOfJtNestedPathColDef(a, b *JtNestedPathColDef) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsExpr(a.Path, b.Path) &&
		EqualsSliceOfRefOfJtColumnDefinition(a.Columns, b.Columns)
}

// EqualsTableAndLockTypes does deep equals between the two objects.
func EqualsTableAndLockTypes(a, b TableAndLockTypes) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfTableAndLockType(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfColName does deep equals between the two objects.
func EqualsSliceOfRefOfColName(a, b []*ColName) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfColName(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsComments does deep equals between the two objects.
func EqualsComments(a, b Comments) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsRefOfInt does deep equals between the two objects.
func EqualsRefOfInt(a, b *int) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsSliceOfRefOfPartitionDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfPartitionDefinition(a, b []*PartitionDefinition) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfPartitionDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfRenameTablePair does deep equals between the two objects.
func EqualsSliceOfRefOfRenameTablePair(a, b []*RenameTablePair) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfRenameTablePair(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfRootNode does deep equals between the two objects.
func EqualsRefOfRootNode(a, b *RootNode) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSQLNode(a.SQLNode, b.SQLNode)
}

// EqualsSliceOfTableExpr does deep equals between the two objects.
func EqualsSliceOfTableExpr(a, b []TableExpr) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsTableExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfCharacteristic does deep equals between the two objects.
func EqualsSliceOfCharacteristic(a, b []Characteristic) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsCharacteristic(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfTableName does deep equals between the two objects.
func EqualsRefOfTableName(a, b *TableName) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCS(a.Name, b.Name) &&
		EqualsIdentifierCS(a.Qualifier, b.Qualifier)
}

// EqualsRefOfTableOption does deep equals between the two objects.
func EqualsRefOfTableOption(a, b *TableOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.String == b.String &&
		a.CaseSensitive == b.CaseSensitive &&
		EqualsRefOfLiteral(a.Value, b.Value) &&
		EqualsTableNames(a.Tables, b.Tables)
}

// EqualsSliceOfRefOfIndexDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfIndexDefinition(a, b []*IndexDefinition) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfIndexDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfConstraintDefinition does deep equals between the two objects.
func EqualsSliceOfRefOfConstraintDefinition(a, b []*ConstraintDefinition) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfConstraintDefinition(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfVindexParam does deep equals between the two objects.
func EqualsRefOfVindexParam(a, b *VindexParam) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Val == b.Val &&
		EqualsIdentifierCI(a.Key, b.Key)
}

// EqualsSliceOfVindexParam does deep equals between the two objects.
func EqualsSliceOfVindexParam(a, b []VindexParam) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsVindexParam(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfCommonTableExpr does deep equals between the two objects.
func EqualsSliceOfRefOfCommonTableExpr(a, b []*CommonTableExpr) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfCommonTableExpr(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsDatabaseOption does deep equals between the two objects.
func EqualsDatabaseOption(a, b DatabaseOption) bool {
	return a.IsDefault == b.IsDefault &&
		a.Value == b.Value &&
		a.Type == b.Type
}

// EqualsRefOfColumnCharset does deep equals between the two objects.
func EqualsRefOfColumnCharset(a, b *ColumnCharset) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.Binary == b.Binary
}

// EqualsRefOfIndexColumn does deep equals between the two objects.
func EqualsRefOfIndexColumn(a, b *IndexColumn) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsIdentifierCI(a.Column, b.Column) &&
		EqualsRefOfLiteral(a.Length, b.Length) &&
		EqualsExpr(a.Expression, b.Expression) &&
		a.Direction == b.Direction
}

// EqualsRefOfIndexOption does deep equals between the two objects.
func EqualsRefOfIndexOption(a, b *IndexOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.Name == b.Name &&
		a.String == b.String &&
		EqualsRefOfLiteral(a.Value, b.Value)
}

// EqualsRefOfTableAndLockType does deep equals between the two objects.
func EqualsRefOfTableAndLockType(a, b *TableAndLockType) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableExpr(a.Table, b.Table) &&
		a.Lock == b.Lock
}

// EqualsRefOfRenameTablePair does deep equals between the two objects.
func EqualsRefOfRenameTablePair(a, b *RenameTablePair) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsTableName(a.FromTable, b.FromTable) &&
		EqualsTableName(a.ToTable, b.ToTable)
}

// EqualsRefOfDatabaseOption does deep equals between the two objects.
func EqualsRefOfDatabaseOption(a, b *DatabaseOption) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.IsDefault == b.IsDefault &&
		a.Value == b.Value &&
		a.Type == b.Type
}
