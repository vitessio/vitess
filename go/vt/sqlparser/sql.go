//line sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const DATABASES = 57449
const TABLES = 57450
const VITESS_KEYSPACES = 57451
const VITESS_SHARDS = 57452
const VSCHEMA_TABLES = 57453
const INTEGER = 57454
const CHARACTER = 57455
const CURRENT_TIMESTAMP = 57456
const DATABASE = 57457
const CURRENT_DATE = 57458
const CURRENT_TIME = 57459
const LOCALTIME = 57460
const LOCALTIMESTAMP = 57461
const UTC_DATE = 57462
const UTC_TIME = 57463
const UTC_TIMESTAMP = 57464
const REPLACE = 57465
const CONVERT = 57466
const CAST = 57467
const GROUP_CONCAT = 57468
const SEPARATOR = 57469
const MATCH = 57470
const AGAINST = 57471
const BOOLEAN = 57472
const LANGUAGE = 57473
const WITH = 57474
const QUERY = 57475
const EXPANSION = 57476
const UNUSED = 57477

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 15,
	5, 22,
	-2, 255,
	-1, 196,
	103, 318,
	-2, 314,
	-1, 197,
	103, 319,
	-2, 315,
	-1, 412,
	103, 321,
	-2, 317,
	-1, 550,
	5, 23,
	-2, 154,
	-1, 575,
	5, 23,
	-2, 274,
	-1, 691,
	5, 23,
	-2, 277,
}

const yyNprod = 430
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3557

var yyAct = [...]int{

	212, 355, 171, 509, 598, 197, 224, 191, 646, 476,
	406, 248, 623, 597, 411, 510, 354, 3, 35, 657,
	220, 543, 296, 474, 298, 610, 471, 536, 52, 506,
	491, 609, 167, 76, 473, 37, 440, 271, 276, 223,
	174, 192, 226, 180, 221, 284, 40, 214, 170, 189,
	30, 15, 193, 34, 189, 724, 422, 719, 723, 712,
	722, 718, 168, 711, 601, 42, 43, 44, 45, 300,
	420, 640, 189, 416, 189, 206, 199, 67, 189, 399,
	401, 527, 66, 32, 67, 553, 464, 303, 465, 175,
	176, 464, 464, 465, 465, 424, 519, 75, 518, 311,
	310, 60, 69, 70, 71, 517, 210, 200, 202, 72,
	55, 68, 344, 345, 662, 629, 312, 578, 547, 62,
	59, 698, 323, 322, 332, 333, 325, 326, 327, 328,
	329, 330, 331, 324, 466, 312, 334, 51, 522, 466,
	466, 334, 17, 18, 19, 20, 353, 400, 292, 419,
	421, 418, 554, 288, 324, 467, 309, 334, 291, 604,
	467, 467, 632, 635, 710, 21, 367, 492, 707, 561,
	323, 322, 332, 333, 325, 326, 327, 328, 329, 330,
	331, 324, 217, 272, 334, 699, 32, 447, 205, 314,
	189, 492, 189, 294, 423, 708, 189, 166, 311, 310,
	310, 445, 446, 444, 189, 606, 54, 52, 189, 52,
	278, 189, 668, 57, 189, 312, 312, 32, 672, 555,
	211, 176, 273, 313, 274, 213, 302, 443, 295, 315,
	53, 207, 58, 64, 61, 56, 63, 311, 310, 529,
	530, 531, 22, 23, 25, 24, 26, 480, 346, 347,
	348, 349, 350, 351, 312, 27, 28, 29, 407, 356,
	208, 695, 213, 311, 310, 342, 365, 36, 323, 322,
	332, 333, 325, 326, 327, 328, 329, 330, 331, 324,
	312, 52, 334, 311, 310, 290, 189, 644, 213, 193,
	397, 189, 664, 213, 189, 32, 394, 193, 290, 52,
	312, 409, 573, 403, 541, 537, 432, 434, 435, 189,
	644, 433, 189, 52, 541, 213, 413, 410, 384, 541,
	429, 430, 380, 436, 437, 577, 213, 557, 213, 441,
	427, 402, 408, 382, 383, 480, 213, 439, 17, 463,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 479, 481, 52, 405, 177,
	442, 438, 412, 17, 702, 570, 17, 356, 52, 494,
	485, 486, 52, 523, 482, 311, 310, 507, 478, 290,
	507, 390, 32, 306, 468, 469, 392, 705, 393, 612,
	272, 617, 312, 483, 484, 686, 428, 652, 653, 193,
	508, 52, 489, 32, 496, 511, 541, 32, 516, 704,
	32, 495, 513, 497, 498, 588, 684, 521, 499, 681,
	65, 685, 52, 412, 505, 520, 369, 370, 371, 372,
	373, 374, 375, 185, 680, 323, 322, 332, 333, 325,
	326, 327, 328, 329, 330, 331, 324, 682, 721, 334,
	525, 717, 683, 181, 182, 528, 441, 327, 328, 329,
	330, 331, 324, 184, 504, 334, 533, 534, 535, 503,
	38, 715, 539, 277, 669, 282, 615, 249, 31, 215,
	571, 532, 52, 550, 551, 552, 275, 442, 556, 414,
	549, 216, 305, 656, 563, 277, 564, 565, 566, 567,
	502, 169, 562, 178, 179, 172, 189, 540, 501, 31,
	675, 173, 674, 574, 575, 576, 31, 39, 36, 643,
	407, 560, 356, 583, 558, 190, 36, 659, 52, 189,
	308, 39, 189, 41, 33, 579, 1, 73, 572, 655,
	283, 591, 648, 651, 652, 653, 649, 584, 650, 654,
	52, 542, 240, 239, 241, 242, 243, 244, 589, 590,
	245, 587, 595, 52, 415, 592, 593, 47, 599, 600,
	526, 605, 478, 417, 198, 596, 189, 603, 500, 514,
	607, 487, 622, 52, 52, 511, 52, 52, 52, 616,
	608, 52, 381, 618, 625, 626, 246, 630, 631, 270,
	636, 637, 673, 634, 642, 559, 364, 490, 627, 628,
	225, 431, 236, 613, 233, 235, 641, 412, 234, 50,
	189, 660, 385, 391, 663, 316, 665, 666, 218, 511,
	398, 279, 647, 645, 611, 52, 661, 186, 569, 639,
	671, 697, 194, 389, 183, 14, 13, 31, 12, 11,
	189, 189, 189, 189, 584, 10, 9, 613, 689, 670,
	8, 189, 691, 687, 189, 7, 193, 690, 52, 694,
	52, 677, 6, 679, 696, 482, 676, 701, 678, 297,
	5, 297, 4, 16, 700, 356, 201, 613, 613, 613,
	613, 2, 0, 0, 0, 0, 0, 0, 709, 706,
	343, 613, 0, 0, 203, 0, 204, 0, 0, 716,
	209, 0, 713, 714, 0, 0, 0, 0, 0, 0,
	720, 247, 0, 0, 352, 0, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 366, 368, 368, 368, 368,
	368, 368, 368, 368, 376, 377, 378, 379, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 195, 0, 0,
	187, 297, 323, 322, 332, 333, 325, 326, 327, 328,
	329, 330, 331, 324, 0, 297, 334, 0, 187, 0,
	187, 0, 0, 0, 187, 0, 0, 0, 299, 0,
	299, 323, 322, 332, 333, 325, 326, 327, 328, 329,
	330, 331, 324, 0, 0, 334, 0, 0, 0, 0,
	60, 31, 281, 0, 544, 0, 0, 0, 289, 55,
	0, 0, 0, 0, 0, 357, 293, 0, 62, 59,
	301, 0, 0, 304, 0, 0, 307, 325, 326, 327,
	328, 329, 330, 331, 324, 0, 51, 334, 546, 0,
	648, 651, 652, 653, 649, 0, 650, 654, 311, 310,
	703, 512, 386, 31, 0, 0, 0, 0, 0, 194,
	0, 0, 0, 0, 0, 312, 0, 194, 0, 299,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 17,
	0, 0, 0, 0, 299, 0, 187, 0, 286, 0,
	60, 0, 187, 0, 0, 0, 166, 0, 396, 55,
	187, 0, 0, 0, 187, 54, 0, 187, 62, 59,
	187, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 32, 426, 0, 188, 0, 470, 53,
	299, 58, 64, 61, 56, 63, 548, 0, 318, 488,
	321, 0, 0, 493, 0, 0, 335, 336, 337, 338,
	339, 340, 341, 0, 319, 320, 317, 323, 322, 332,
	333, 325, 326, 327, 328, 329, 330, 331, 324, 194,
	0, 334, 515, 0, 0, 580, 581, 582, 0, 0,
	60, 0, 187, 0, 195, 0, 166, 286, 0, 55,
	404, 0, 195, 524, 404, 54, 0, 0, 62, 59,
	0, 0, 57, 0, 0, 187, 0, 0, 187, 0,
	0, 0, 0, 32, 0, 0, 188, 0, 0, 53,
	0, 58, 64, 61, 56, 63, 0, 0, 614, 0,
	0, 512, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 545, 477, 404, 633, 0, 0, 638,
	477, 477, 332, 333, 325, 326, 327, 328, 329, 330,
	331, 324, 658, 0, 334, 512, 166, 31, 477, 477,
	477, 477, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 477, 57, 0, 195, 0, 0, 0, 0, 299,
	0, 0, 614, 614, 614, 614, 0, 0, 0, 53,
	0, 58, 64, 61, 56, 63, 658, 0, 568, 0,
	0, 545, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 621, 0, 624, 624, 624,
	0, 0, 299, 322, 332, 333, 325, 326, 327, 328,
	329, 330, 331, 324, 477, 0, 334, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 477, 0, 257, 0, 0, 0, 62, 59, 0,
	0, 0, 187, 250, 251, 0, 299, 0, 0, 0,
	0, 0, 32, 0, 0, 196, 240, 239, 241, 242,
	243, 244, 0, 0, 245, 187, 0, 0, 187, 0,
	231, 0, 256, 0, 0, 0, 194, 0, 0, 692,
	0, 693, 0, 477, 0, 0, 0, 0, 0, 404,
	477, 0, 228, 229, 0, 0, 0, 0, 268, 0,
	230, 0, 0, 227, 232, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 166, 0, 0, 266, 0,
	0, 0, 0, 0, 54, 0, 0, 0, 0, 0,
	0, 57, 0, 258, 267, 264, 265, 262, 263, 261,
	260, 259, 269, 252, 253, 255, 0, 254, 53, 0,
	58, 64, 61, 56, 63, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 187, 187, 187,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	187, 195, 155, 142, 116, 157, 94, 108, 165, 109,
	110, 136, 82, 124, 60, 106, 0, 97, 78, 103,
	79, 95, 118, 55, 121, 93, 144, 127, 163, 0,
	131, 0, 62, 59, 0, 0, 120, 149, 122, 141,
	115, 137, 87, 130, 158, 107, 134, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	154, 105, 135, 77, 132, 0, 80, 83, 164, 152,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 119,
	123, 138, 113, 0, 0, 0, 0, 0, 0, 667,
	0, 98, 0, 129, 0, 0, 0, 84, 81, 117,
	0, 0, 0, 86, 0, 99, 139, 0, 150, 114,
	166, 153, 112, 111, 156, 159, 148, 96, 104, 54,
	102, 92, 151, 145, 146, 147, 57, 0, 90, 91,
	88, 89, 125, 126, 160, 161, 162, 140, 85, 0,
	0, 143, 128, 53, 0, 58, 64, 61, 56, 63,
	155, 142, 116, 157, 94, 108, 165, 109, 110, 136,
	82, 124, 60, 106, 0, 97, 78, 103, 79, 95,
	118, 55, 121, 93, 144, 127, 163, 0, 131, 0,
	62, 59, 0, 0, 120, 149, 122, 141, 115, 137,
	87, 130, 158, 107, 134, 32, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 154, 105,
	135, 77, 132, 0, 80, 83, 164, 152, 100, 101,
	0, 0, 0, 0, 0, 0, 0, 119, 123, 138,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 129, 0, 0, 0, 84, 81, 117, 0, 0,
	0, 86, 0, 99, 139, 0, 150, 114, 166, 153,
	112, 111, 156, 159, 148, 96, 104, 54, 102, 92,
	151, 145, 146, 147, 57, 0, 90, 91, 88, 89,
	125, 126, 160, 161, 162, 140, 85, 0, 0, 143,
	128, 53, 0, 58, 64, 61, 56, 63, 155, 142,
	116, 157, 94, 108, 165, 109, 110, 136, 82, 124,
	60, 106, 0, 97, 78, 103, 79, 95, 118, 55,
	121, 93, 144, 127, 163, 0, 131, 0, 62, 59,
	0, 0, 120, 149, 122, 141, 115, 137, 87, 130,
	158, 107, 134, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 154, 105, 135, 77,
	132, 0, 80, 83, 164, 152, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 119, 123, 138, 113, 0,
	0, 0, 0, 0, 0, 594, 0, 98, 0, 129,
	0, 0, 0, 84, 81, 117, 0, 0, 0, 86,
	0, 99, 139, 0, 150, 114, 166, 153, 112, 111,
	156, 159, 148, 96, 104, 54, 102, 92, 151, 145,
	146, 147, 57, 0, 90, 91, 88, 89, 125, 126,
	160, 161, 162, 140, 85, 0, 0, 143, 128, 53,
	0, 58, 64, 61, 56, 63, 155, 142, 116, 157,
	94, 108, 165, 109, 110, 136, 82, 124, 60, 106,
	0, 97, 78, 103, 79, 95, 118, 55, 121, 93,
	144, 127, 163, 0, 131, 0, 62, 59, 0, 0,
	120, 149, 122, 141, 115, 137, 87, 130, 158, 107,
	134, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 154, 105, 135, 77, 132, 0,
	80, 83, 164, 152, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 119, 123, 138, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 129, 0, 0,
	0, 84, 81, 117, 0, 0, 0, 86, 0, 99,
	139, 0, 150, 114, 166, 153, 112, 111, 156, 159,
	148, 96, 104, 54, 102, 92, 151, 145, 146, 147,
	57, 0, 90, 91, 88, 89, 125, 126, 160, 161,
	162, 140, 85, 0, 0, 143, 128, 53, 0, 58,
	64, 61, 56, 63, 155, 142, 116, 157, 94, 108,
	165, 109, 110, 136, 82, 124, 60, 106, 0, 97,
	78, 103, 79, 95, 118, 55, 121, 93, 144, 127,
	163, 0, 131, 0, 62, 59, 0, 0, 120, 149,
	122, 141, 115, 137, 87, 130, 158, 107, 134, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 154, 105, 135, 77, 132, 0, 80, 83,
	164, 152, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 119, 123, 138, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 129, 0, 0, 0, 84,
	81, 117, 0, 0, 0, 86, 0, 99, 139, 0,
	150, 114, 166, 153, 112, 111, 156, 159, 148, 96,
	104, 54, 102, 92, 151, 145, 146, 147, 57, 0,
	90, 91, 88, 89, 125, 126, 160, 161, 162, 140,
	85, 0, 0, 143, 128, 53, 0, 58, 64, 61,
	56, 63, 155, 142, 116, 157, 94, 108, 165, 109,
	110, 136, 82, 124, 60, 106, 0, 97, 78, 103,
	79, 95, 118, 55, 121, 93, 144, 127, 163, 0,
	131, 0, 62, 59, 0, 0, 120, 149, 122, 141,
	115, 137, 87, 130, 158, 107, 134, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	154, 105, 135, 77, 132, 0, 80, 83, 164, 152,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 119,
	123, 138, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 129, 0, 0, 0, 84, 81, 117,
	0, 0, 0, 86, 0, 99, 139, 0, 150, 114,
	166, 153, 112, 111, 156, 159, 148, 96, 104, 54,
	102, 92, 151, 145, 146, 147, 57, 0, 90, 91,
	88, 89, 125, 126, 160, 161, 162, 140, 85, 0,
	0, 143, 128, 53, 0, 58, 64, 61, 56, 63,
	155, 142, 116, 157, 94, 108, 165, 109, 110, 136,
	82, 124, 60, 106, 0, 97, 78, 103, 79, 95,
	118, 55, 121, 93, 144, 127, 163, 0, 131, 0,
	62, 59, 0, 0, 120, 149, 122, 141, 115, 137,
	87, 130, 158, 107, 134, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 154, 105,
	135, 77, 132, 0, 80, 83, 164, 152, 100, 101,
	0, 0, 0, 0, 0, 0, 0, 119, 123, 138,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 129, 0, 0, 0, 84, 81, 117, 0, 0,
	0, 86, 0, 99, 139, 0, 150, 114, 166, 153,
	112, 111, 156, 159, 148, 96, 104, 54, 102, 92,
	151, 145, 146, 147, 57, 0, 90, 91, 88, 89,
	125, 126, 160, 161, 162, 140, 85, 0, 0, 143,
	128, 53, 0, 58, 64, 61, 56, 63, 60, 0,
	0, 472, 0, 222, 0, 0, 0, 55, 0, 0,
	0, 0, 257, 0, 0, 0, 62, 59, 0, 0,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 196, 240, 239, 241, 242, 243,
	244, 0, 0, 245, 237, 238, 0, 0, 219, 231,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 475, 0, 0, 0, 268, 0, 230,
	0, 0, 227, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 266, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	57, 0, 258, 267, 264, 265, 262, 263, 261, 260,
	259, 269, 252, 253, 255, 0, 254, 53, 0, 58,
	64, 61, 56, 63, 60, 0, 0, 0, 0, 222,
	0, 0, 0, 55, 0, 0, 0, 0, 257, 0,
	0, 0, 62, 59, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
	196, 240, 239, 241, 242, 243, 244, 0, 0, 245,
	237, 238, 0, 0, 219, 231, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 475,
	0, 0, 0, 268, 0, 230, 0, 0, 227, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 266, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 57, 0, 258, 267,
	264, 265, 262, 263, 261, 260, 259, 269, 252, 253,
	255, 0, 254, 53, 0, 58, 64, 61, 56, 63,
	60, 0, 0, 0, 0, 222, 0, 0, 0, 55,
	0, 0, 0, 0, 257, 0, 0, 0, 62, 59,
	0, 0, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 213, 196, 240, 239, 241,
	242, 243, 244, 0, 0, 245, 237, 238, 0, 0,
	219, 231, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 0, 0, 0, 0, 268,
	0, 230, 0, 0, 227, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 266,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 0, 57, 0, 258, 267, 264, 265, 262, 263,
	261, 260, 259, 269, 252, 253, 255, 17, 254, 53,
	0, 58, 64, 61, 56, 63, 0, 0, 60, 0,
	0, 0, 0, 222, 0, 0, 0, 55, 0, 0,
	0, 0, 257, 0, 0, 0, 62, 59, 0, 0,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 196, 240, 239, 241, 242, 243,
	244, 0, 0, 245, 237, 238, 0, 0, 219, 231,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 0, 0, 0, 0, 268, 0, 230,
	0, 0, 227, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 266, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	57, 0, 258, 267, 264, 265, 262, 263, 261, 260,
	259, 269, 252, 253, 255, 0, 254, 53, 0, 58,
	64, 61, 56, 63, 60, 0, 0, 0, 0, 222,
	0, 0, 0, 55, 0, 0, 0, 0, 257, 0,
	0, 0, 62, 59, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
	196, 240, 239, 241, 242, 243, 244, 0, 0, 245,
	237, 238, 0, 0, 219, 231, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 0,
	0, 0, 0, 268, 0, 230, 0, 0, 227, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 266, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 57, 0, 258, 267,
	264, 265, 262, 263, 261, 260, 259, 269, 252, 253,
	255, 60, 254, 53, 0, 58, 64, 61, 56, 63,
	55, 0, 0, 0, 0, 257, 0, 0, 0, 62,
	59, 0, 0, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 196, 240, 239,
	241, 242, 243, 244, 0, 0, 245, 237, 238, 17,
	0, 0, 231, 0, 256, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 60, 0, 228, 229, 0, 0, 62, 59,
	268, 55, 230, 0, 0, 227, 232, 0, 0, 0,
	62, 59, 0, 32, 0, 0, 51, 166, 0, 0,
	266, 0, 0, 0, 0, 0, 54, 0, 51, 0,
	0, 387, 0, 57, 388, 258, 267, 264, 265, 262,
	263, 261, 260, 259, 269, 252, 253, 255, 60, 254,
	53, 0, 58, 64, 61, 56, 63, 55, 0, 0,
	60, 0, 0, 0, 285, 0, 62, 59, 0, 55,
	0, 0, 0, 0, 0, 0, 166, 0, 62, 59,
	0, 0, 0, 0, 51, 54, 0, 0, 166, 0,
	0, 0, 57, 0, 0, 0, 188, 54, 287, 0,
	0, 60, 0, 0, 57, 0, 0, 0, 0, 53,
	55, 58, 64, 61, 56, 63, 0, 0, 0, 62,
	59, 53, 0, 58, 64, 61, 56, 63, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 51, 0, 546,
	0, 55, 46, 0, 48, 0, 0, 0, 49, 0,
	62, 59, 0, 54, 0, 0, 166, 0, 0, 0,
	57, 0, 0, 0, 0, 54, 60, 0, 188, 0,
	287, 0, 57, 0, 280, 55, 0, 53, 0, 58,
	64, 61, 56, 63, 62, 59, 0, 0, 0, 53,
	0, 58, 64, 61, 56, 63, 0, 166, 0, 0,
	0, 0, 188, 0, 0, 0, 54, 60, 0, 0,
	0, 0, 0, 57, 0, 0, 55, 0, 0, 0,
	60, 0, 0, 0, 0, 62, 59, 0, 166, 55,
	53, 0, 58, 64, 61, 56, 63, 54, 62, 59,
	0, 0, 0, 51, 57, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 196, 0, 0, 0,
	55, 53, 166, 58, 64, 61, 56, 63, 0, 62,
	59, 54, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 58, 64, 61,
	56, 63, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 166, 0, 0, 57,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 53, 0, 58, 64,
	61, 56, 63, 0, 0, 0, 0, 166, 0, 53,
	0, 58, 64, 61, 56, 63, 54, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 58, 64, 61, 56, 63,
}
var yyPact = [...]int{

	136, -1000, -100, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 504, 512, -1000, -1000, -1000,
	-1000, -1000, 3201, -31, 0, -9, -2, 2265, -1000, -1000,
	526, 332, -1000, -1000, -1000, 489, 496, 489, 353, 484,
	416, -1000, -38, 3404, 515, 3373, -40, -5, 3404, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -3, 3404, -1000, 3404, -41,
	178, -41, 3404, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 353,
	173, 461, 2947, 2947, 461, -1000, -1000, -1000, -1000, -1000,
	453, -1000, -1000, 149, 3319, 446, 3213, 50, -1000, -1000,
	3404, 234, -1000, 83, -1000, 45, -1000, -1000, 3404, 126,
	175, 1525, 3404, 1525, -27, 3404, 470, 334, 3404, -1000,
	-1000, -1000, -1000, -1000, -1000, 522, 71, 172, -1000, 2947,
	891, -1000, 245, -1000, 8, -1000, -1000, 1182, 1182, 1182,
	1182, 1182, 1182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 245, 43, -1000, 2811,
	245, 245, 245, 245, 245, 245, 2947, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	271, -1000, 310, -1000, 416, 3145, 341, -1000, -1000, 357,
	3404, -1000, 3373, 32, -1000, 3285, -1000, -1000, 2117, 509,
	3373, 2947, 1969, 1525, 467, -45, -1000, -1000, -1000, -1000,
	-1000, 42, -1000, 3404, -1000, -1000, 3404, 1525, -1000, 361,
	2947, 2947, 244, 2947, 2947, 53, 3074, 167, 118, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 332, 498, 498, 41, 41, 41, 41,
	41, 84, 2401, 1969, 173, 284, 218, 2811, 2537, 2537,
	2947, 2947, 3360, 475, 120, 218, 3360, -1000, 173, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2537, 2537, 2537, 2537,
	2947, -1000, -1000, -1000, 475, 490, -1000, 438, 433, 2537,
	-1000, 331, 3373, 245, -1000, 3133, -1000, 247, -1000, -7,
	-14, -16, -1000, -1000, -1000, -1000, 504, 2947, -1000, 218,
	-1000, 35, -1000, -1000, -1000, 324, 3360, -1000, -33, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, 53,
	134, -1000, -1000, 177, -1000, -1000, 218, 218, -1000, 715,
	-1000, -1000, -1000, -1000, 167, 1182, 1182, 1182, 182, 715,
	686, 994, 1096, 41, 365, 365, 57, 57, 57, 57,
	57, 757, 757, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 173, 2537, 268, -1000, -1000, 803, 15, 245, -1000,
	2947, -1000, 173, 263, 263, 34, 198, 276, -1000, 2537,
	96, -1000, 2947, 173, -1000, 263, 173, 263, 263, -1000,
	3404, -1000, -1000, -1000, -1000, 355, -1000, 454, 328, 251,
	-1000, -1000, 2673, 173, 274, 14, 504, 245, 245, 245,
	489, 218, 1821, 3404, -1000, -1000, 3404, -1000, -1000, -1000,
	-1000, -1000, -1000, 182, 715, 349, -1000, 1182, 1182, -1000,
	263, 2537, -1000, -1000, 3254, -1000, -1000, 1673, 2537, 218,
	-1000, -1000, -1000, 39, 39, 39, -82, 3360, 253, 85,
	-1000, 2947, 133, -1000, -1000, -1000, -1000, -1000, -1000, 509,
	983, 449, -1000, 245, -1000, -1000, 360, 3360, 3360, 489,
	3360, 3360, 3360, -1000, -1000, 1525, -1000, -1000, 1182, 715,
	715, -1000, -1000, -1000, -1000, 12, 173, 173, 33, 173,
	173, 245, -1000, -73, -1000, 218, 2947, 507, 259, 503,
	-1000, -1000, -1000, 472, 893, 519, -1000, 245, -1000, 332,
	11, -1000, -1000, 241, -1000, 241, 241, -1000, 715, 1377,
	-1000, -1000, -1000, 156, -1000, 445, -1000, -1000, 1182, 173,
	163, 218, 499, 495, 983, 983, 983, 983, -1000, 395,
	380, -1000, 408, 377, 356, 3404, -1000, 236, 893, 3373,
	251, 173, 3360, -1000, 3360, -1000, -1000, -1000, 210, 39,
	36, -1000, -1000, -1000, 2947, 2947, 503, 315, 821, -1000,
	-1000, -1000, -1000, 370, -1000, 348, -1000, -1000, -1000, -1000,
	234, -1000, -1000, -1000, 38, 139, -1000, 173, 17, -91,
	218, 196, 2947, 2947, -1000, -1000, -1000, 442, 173, -1000,
	415, -87, -94, 218, 218, 39, -1000, -1000, 412, -1000,
	-1000, -89, -92, -96, -1000,
}
var yyPgo = [...]int{

	0, 691, 16, 51, 683, 50, 682, 680, 672, 665,
	660, 656, 655, 649, 648, 646, 645, 46, 644, 470,
	38, 643, 43, 641, 639, 27, 34, 26, 23, 9,
	638, 19, 31, 25, 634, 633, 8, 632, 637, 631,
	389, 630, 12, 10, 628, 44, 625, 623, 39, 20,
	622, 618, 615, 614, 612, 611, 36, 1, 3, 11,
	15, 610, 42, 6, 607, 30, 606, 605, 604, 602,
	18, 599, 37, 592, 2, 47, 581, 579, 29, 7,
	41, 578, 420, 188, 574, 573, 570, 567, 564, 69,
	5, 596, 24, 21, 551, 721, 14, 45, 540, 539,
	32, 22, 4, 13, 537, 536, 534, 477, 0, 533,
	166,
}
var yyR1 = [...]int{

	0, 105, 106, 106, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	4, 4, 5, 5, 6, 6, 7, 8, 9, 10,
	10, 10, 11, 11, 11, 12, 13, 13, 13, 14,
	104, 104, 104, 15, 16, 16, 109, 17, 18, 18,
	19, 19, 19, 22, 22, 22, 20, 20, 21, 21,
	27, 27, 26, 26, 28, 28, 28, 28, 94, 94,
	94, 93, 93, 30, 30, 31, 31, 32, 32, 33,
	33, 33, 40, 34, 34, 34, 34, 99, 99, 98,
	98, 98, 97, 97, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 37, 39, 39, 38, 38, 41, 41,
	41, 41, 42, 42, 43, 43, 29, 29, 29, 29,
	29, 29, 45, 45, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 55, 55, 55, 55,
	55, 55, 46, 46, 46, 46, 46, 46, 46, 25,
	25, 56, 56, 56, 62, 57, 57, 102, 102, 102,
	102, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	53, 53, 53, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 52, 52, 52, 52, 52, 52, 52, 52,
	110, 110, 54, 54, 54, 54, 23, 23, 23, 23,
	23, 103, 103, 103, 103, 103, 103, 103, 103, 66,
	66, 24, 24, 64, 64, 65, 67, 67, 63, 63,
	63, 48, 48, 48, 48, 48, 48, 48, 50, 50,
	50, 68, 68, 69, 69, 70, 70, 71, 71, 72,
	73, 73, 73, 74, 74, 74, 74, 75, 75, 75,
	76, 76, 47, 47, 47, 47, 47, 47, 77, 77,
	77, 77, 78, 78, 58, 58, 60, 60, 59, 61,
	79, 79, 80, 81, 81, 83, 83, 84, 84, 82,
	82, 85, 85, 85, 85, 85, 85, 86, 86, 87,
	87, 87, 88, 88, 91, 91, 92, 92, 95, 95,
	96, 96, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 107, 108, 100, 101, 101, 101,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 7, 10,
	3, 3, 1, 3, 6, 7, 8, 7, 3, 5,
	8, 4, 6, 7, 4, 5, 4, 5, 5, 3,
	1, 1, 1, 3, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 1, 1, 1, 3, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 2, 4, 5, 7, 2, 4, 6, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	1, 3, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -105, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -3, -4, 6, 7, 8,
	9, 29, 106, 107, 109, 108, 110, 119, 120, 121,
	-5, -107, 50, -106, 153, -70, 14, -70, -19, 5,
	-17, -109, -17, -17, -17, -17, 111, -87, 113, 117,
	-91, 53, -90, 146, 122, 26, 151, 129, 148, 36,
	17, 150, 35, 152, 149, -82, 113, 115, 111, 111,
	112, 113, 111, -104, 53, -89, -90, 66, 21, 23,
	69, 101, 15, 70, 100, 141, 106, 45, 133, 134,
	131, 132, 124, 28, 9, 24, 120, 20, 94, 108,
	73, 74, 123, 22, 121, 64, 18, 48, 10, 12,
	13, 116, 115, 85, 112, 43, 7, 102, 25, 82,
	39, 27, 41, 83, 16, 135, 136, 30, 145, 96,
	46, 33, 67, 62, 49, 65, 14, 44, 84, 109,
	140, 42, 6, 144, 29, 126, 127, 128, 119, 40,
	111, 125, 72, 114, 63, 5, 117, 8, 47, 118,
	137, 138, 139, 31, 71, 11, 113, -100, -100, -19,
	-2, -74, 16, 15, -74, -5, -3, 6, 19, 20,
	-22, 37, 38, -18, -82, -40, -38, -95, 53, -90,
	10, -79, -80, -63, -91, -95, 53, -90, -84, 116,
	112, -38, 111, -38, -38, -83, 116, 53, -83, -38,
	-100, -5, -108, 52, -75, 18, 30, -29, -44, 67,
	-49, -45, 22, -48, -63, -61, -62, 101, 90, 91,
	98, 68, 102, -53, -51, -52, -54, 63, 64, 55,
	54, 56, 57, 58, 59, 62, -91, -95, -59, -107,
	41, 42, 141, 142, 145, 143, 70, 31, 131, 139,
	138, 137, 135, 136, 133, 134, 116, 132, 96, 140,
	-71, -72, -29, -75, -17, 33, -20, 20, 61, -39,
	25, -38, 29, -98, -97, 21, -95, 55, 103, -38,
	51, 75, 103, -38, 67, 53, -101, -107, -92, -91,
	-89, -38, -101, 114, -38, 22, 49, -38, 8, 85,
	66, 65, 82, 51, 17, -29, -46, 85, 67, 83,
	84, 69, 87, 86, 97, 90, 91, 92, 93, 94,
	95, 96, 88, 89, 100, 75, 76, 77, 78, 79,
	80, 81, -62, -107, 104, 105, -49, -49, -49, -49,
	-49, -49, -107, 103, -2, -57, -29, -107, -107, -107,
	-107, -107, -107, -107, -66, -29, -107, -110, -107, -110,
	-110, -110, -110, -110, -110, -110, -107, -107, -107, -107,
	51, -73, 23, 24, -22, -50, -91, 56, 59, -21,
	40, -47, 29, 31, -2, -107, -38, -79, -41, 47,
	115, 48, -97, -96, -95, -89, -43, 11, -80, -29,
	-92, -96, -89, -101, 22, -88, 118, -85, 109, 107,
	28, 108, 14, 152, 53, -38, -38, -101, 35, -29,
	-29, -55, 62, 67, 63, 64, -29, -29, -45, -49,
	-56, -59, -62, 60, 85, 83, 84, 69, -49, -49,
	-49, -49, -49, -49, -49, -49, -49, -49, -49, -49,
	-49, -49, -49, -102, 53, 55, 101, 122, -48, -48,
	-91, -27, 20, -26, -28, 92, -29, -95, -92, -108,
	51, -108, -2, -26, -26, -29, -29, -76, -91, -20,
	-64, -65, 71, -91, -108, -26, -27, -26, -26, -72,
	-81, 18, 10, 31, 31, -26, -78, 49, -79, -58,
	-60, -59, -107, -2, -77, -91, -43, 112, 112, 112,
	-70, -29, 103, 49, -91, -100, -86, 114, 36, 62,
	63, 64, -56, -49, -49, -49, -25, 123, 66, -108,
	-26, 51, -94, -93, 21, -91, 55, 103, -107, -29,
	-108, -108, -108, 51, 118, 21, -108, 51, -26, -67,
	-65, 73, -29, -108, -108, -108, -108, -108, -38, -30,
	10, 26, -78, 51, -108, -108, -108, 51, 103, -70,
	-107, -107, -107, -74, -92, -38, -38, -25, 66, -49,
	-49, -108, -28, -93, 92, -96, -27, -103, -102, -103,
	-103, 146, -91, -70, 74, -29, 72, -43, -31, -32,
	-33, -34, -40, -62, -107, 27, -60, 31, -2, -107,
	-91, -91, -74, -42, -91, -42, -42, -101, -49, 103,
	-108, -108, 129, -107, -102, 130, -108, -108, -107, -24,
	144, -29, -68, 12, 51, -35, -36, -37, 39, 43,
	45, 40, 41, 42, 46, -99, 21, -31, -107, 8,
	-58, -2, 103, -108, 51, -108, -108, 92, 56, 29,
	-49, -108, 55, -69, 13, 15, -32, -33, -32, -33,
	39, 39, 39, 44, 39, 44, 39, -36, -95, -108,
	-79, -108, -91, -91, -108, 51, -102, -23, 85, 149,
	-29, -57, 49, 49, 39, 39, -102, 130, 56, -108,
	147, 46, 150, -29, -29, 29, -108, 36, 148, 151,
	-102, 36, 149, 150, 151,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, -2, 255, 46, 46, 46,
	46, 46, 309, 299, 0, 0, 0, 0, 426, 426,
	0, 0, 424, 1, 3, 263, 0, 263, 0, 50,
	53, 48, 299, 0, 0, 0, 297, 0, 422, 310,
	311, 314, 315, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 423, 0, 0, 300, 0, 295,
	0, 295, 0, 426, 40, 41, 42, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 422, 44, 45, 0,
	0, 267, 0, 0, 267, 21, 22, 46, 51, 52,
	56, 54, 55, 47, 0, 0, 89, 106, 318, 319,
	0, 28, 290, 0, 238, 0, -2, -2, 0, 0,
	0, 427, 0, 427, 0, 0, 0, 0, 0, 39,
	43, 20, 23, 425, 16, 0, 0, 264, 116, 0,
	121, 124, 0, 161, 162, 163, 164, 0, 0, 0,
	0, 0, 0, 186, 187, 188, 189, 122, 123, 241,
	242, 243, 244, 245, 246, 247, 238, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 229, 0, 210, 210,
	210, 210, 210, 210, 210, 210, 0, 0, 0, 0,
	256, 257, 260, 17, 53, 0, 58, 57, 49, 0,
	0, 105, 0, 108, 90, 0, 92, 93, 0, 114,
	0, 0, 0, 427, 0, 312, 31, 428, 429, 316,
	317, 0, 34, 0, 36, 296, 0, 427, 268, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 143, 144, 145, 146,
	147, 148, 135, 0, 0, 0, 180, 181, 182, 183,
	184, 0, 60, 0, 0, 0, 155, 0, 0, 0,
	0, 0, 0, 56, 0, 230, 0, 202, 0, 203,
	204, 205, 206, 207, 208, 209, 0, 60, 0, 0,
	0, 259, 261, 262, 56, 0, 248, 0, 0, 0,
	59, 282, 0, 0, 273, 0, 104, 114, 82, 0,
	0, 0, 91, 107, 320, 321, 255, 0, 291, 292,
	239, 0, -2, 29, 298, 0, 0, 426, 307, 301,
	302, 303, 304, 305, 306, 35, 37, 38, 0, 117,
	118, 120, 136, 0, 138, 140, 265, 266, 125, 126,
	127, 151, 152, 153, 0, 0, 0, 0, 149, 131,
	0, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 179, 157, 158, 159, 160, 177, 178,
	185, 0, 0, 61, 62, 64, 68, 0, 239, 154,
	0, 288, 0, 0, 0, 0, 0, 0, 270, 0,
	236, 233, 0, 0, 211, 0, 0, 0, 0, 258,
	0, 293, 294, 249, 250, 73, 24, 0, 282, 272,
	284, 286, 0, 0, 0, 278, 255, 0, 0, 0,
	263, 115, 0, 0, 313, 32, 0, 308, 269, 137,
	139, 141, 128, 149, 132, 0, 129, 0, 0, 190,
	0, 0, 65, 69, 0, 71, 72, 0, 60, 156,
	-2, 193, 194, 0, 0, 0, 0, 0, 255, 0,
	234, 0, 0, 201, 212, 213, 214, 215, 18, 114,
	0, 0, 25, 0, 287, -2, 0, 0, 0, 263,
	0, 0, 0, 27, 240, 427, 33, 130, 0, 150,
	133, 191, 63, 70, 66, 0, 0, 0, 221, 0,
	0, 0, 271, 231, 200, 237, 0, 251, 74, 75,
	77, 78, 79, 87, 0, 0, 285, 0, 276, 0,
	280, 279, 26, 0, 112, 0, 0, 30, 134, 0,
	192, 195, 222, 0, 226, 0, 196, 197, 0, 0,
	0, 235, 253, 0, 0, 0, 0, 0, 94, 0,
	0, 97, 0, 0, 0, 0, 88, 0, 0, 0,
	275, 0, 0, 109, 0, 110, 111, 67, 0, 0,
	216, 199, 232, 19, 0, 0, 76, 83, 0, 86,
	95, 96, 98, 0, 100, 0, 102, 103, 80, 81,
	283, -2, 281, 113, 223, 0, 227, 0, 0, 0,
	254, 252, 0, 0, 99, 101, 224, 0, 0, 198,
	0, 0, 0, 84, 85, 0, 228, 217, 0, 220,
	225, 218, 0, 0, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 153,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:229
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:237
		{
			uni := yyDollar[1].selStmt.(*Union)
			uni.OrderBy = yyDollar[2].orderBy
			uni.Limit = yyDollar[3].limit
			uni.Lock = yyDollar[4].str
			yyVAL.selStmt = uni
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:245
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 19:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:252
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:258
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:262
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:270
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:274
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:281
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:291
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:303
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:309
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:315
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:321
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:325
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:330
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:340
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:345
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:351
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:357
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:365
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:370
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:390
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:418
		{
			yyVAL.statement = &Other{}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Other{}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:427
		{
			setAllowComments(yylex, true)
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:431
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:437
		{
			yyVAL.bytes2 = nil
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:441
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:447
		{
			yyVAL.str = UnionStr
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = UnionAllStr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:455
		{
			yyVAL.str = UnionDistinctStr
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:468
		{
			yyVAL.str = SQLCacheStr
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:473
		{
			yyVAL.str = ""
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:477
		{
			yyVAL.str = DistinctStr
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:482
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.str = StraightJoinHint
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:491
		{
			yyVAL.selectExprs = nil
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:501
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:505
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:519
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:523
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:528
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:536
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:548
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:552
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:558
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:562
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:576
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:580
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:586
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:599
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:603
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:607
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:611
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:616
		{
			yyVAL.empty = struct{}{}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:618
		{
			yyVAL.empty = struct{}{}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:621
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:629
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:636
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:642
		{
			yyVAL.str = JoinStr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:646
		{
			yyVAL.str = JoinStr
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:650
		{
			yyVAL.str = JoinStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:654
		{
			yyVAL.str = StraightJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:660
		{
			yyVAL.str = LeftJoinStr
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.str = LeftJoinStr
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:668
		{
			yyVAL.str = RightJoinStr
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:672
		{
			yyVAL.str = RightJoinStr
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:678
		{
			yyVAL.str = NaturalJoinStr
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:682
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:692
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:711
		{
			yyVAL.indexHints = nil
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:715
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:719
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:723
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:733
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.expr = nil
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:742
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:752
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:756
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:764
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:774
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:788
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:792
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:796
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:800
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:804
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:808
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:812
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:816
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:820
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:824
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.str = IsNullStr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.str = IsNotNullStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.str = IsTrueStr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.str = IsNotTrueStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:850
		{
			yyVAL.str = IsFalseStr
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.str = IsNotFalseStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.str = EqualStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = LessThanStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.str = GreaterThanStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = LessEqualStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = GreaterEqualStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.str = NotEqualStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:889
		{
			yyVAL.expr = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:907
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:913
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:923
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1027
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1057
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.str = BooleanModeStr
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = QueryExpansionStr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.expr = nil
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.str = string("")
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.expr = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.expr = &NullVal{}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.exprs = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.orderBy = nil
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = AscScr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.str = AscScr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = DescScr
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.limit = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = ForUpdateStr
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = ShareModeStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1473
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1486
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.updateExprs = nil
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.byt = 0
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.byt = 1
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = IgnoreStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			decNesting(yylex)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1791
		{
			forceEOF(yylex)
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1796
		{
			forceEOF(yylex)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			forceEOF(yylex)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
