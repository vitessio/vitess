//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const BIT_LITERAL = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const INTERVAL = 57431
const JSON_EXTRACT_OP = 57432
const JSON_UNQUOTE_EXTRACT_OP = 57433
const CREATE = 57434
const ALTER = 57435
const DROP = 57436
const RENAME = 57437
const ANALYZE = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const SHOW = 57448
const DESCRIBE = 57449
const EXPLAIN = 57450
const DATE = 57451
const ESCAPE = 57452
const REPAIR = 57453
const OPTIMIZE = 57454
const TRUNCATE = 57455
const MAXVALUE = 57456
const PARTITION = 57457
const REORGANIZE = 57458
const LESS = 57459
const THAN = 57460
const BIT = 57461
const TINYINT = 57462
const SMALLINT = 57463
const MEDIUMINT = 57464
const INT = 57465
const INTEGER = 57466
const BIGINT = 57467
const INTNUM = 57468
const REAL = 57469
const DOUBLE = 57470
const FLOAT_TYPE = 57471
const DECIMAL = 57472
const NUMERIC = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const NAMES = 57505
const CHARSET = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 264,
	77, 559,
	106, 559,
	-2, 39,
	-1, 266,
	77, 581,
	106, 581,
	-2, 41,
	-1, 271,
	106, 460,
	-2, 456,
	-1, 272,
	106, 461,
	-2, 457,
	-1, 548,
	5, 22,
	-2, 407,
	-1, 582,
	106, 463,
	-2, 459,
	-1, 735,
	5, 23,
	-2, 284,
	-1, 827,
	5, 23,
	-2, 408,
	-1, 900,
	5, 22,
	-2, 410,
	-1, 967,
	5, 23,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 7594

var yyAct = [...]int{

	332, 38, 975, 507, 842, 305, 300, 263, 723, 444,
	608, 724, 877, 380, 381, 3, 272, 442, 621, 573,
	585, 905, 680, 397, 331, 602, 690, 789, 797, 687,
	704, 294, 581, 720, 237, 231, 584, 594, 657, 38,
	354, 759, 63, 303, 360, 267, 135, 242, 141, 135,
	274, 44, 257, 236, 384, 140, 617, 369, 246, 268,
	43, 253, 1003, 48, 994, 251, 292, 1000, 135, 135,
	232, 233, 234, 235, 135, 252, 260, 989, 998, 993,
	988, 637, 890, 936, 50, 51, 52, 53, 278, 953,
	755, 601, 913, 609, 959, 635, 978, 473, 472, 482,
	483, 475, 476, 477, 478, 479, 480, 481, 474, 931,
	929, 484, 847, 848, 849, 997, 995, 976, 779, 284,
	641, 850, 806, 625, 951, 596, 285, 391, 776, 634,
	307, 569, 571, 280, 778, 125, 126, 126, 461, 460,
	596, 878, 135, 450, 135, 128, 129, 130, 135, 445,
	738, 275, 737, 281, 135, 462, 943, 736, 276, 519,
	137, 127, 496, 497, 880, 921, 749, 830, 390, 801,
	689, 742, 506, 462, 291, 401, 289, 631, 636, 629,
	856, 474, 256, 760, 484, 882, 329, 886, 484, 881,
	459, 879, 807, 400, 892, 705, 884, 609, 447, 639,
	642, 705, 570, 813, 753, 883, 971, 362, 808, 979,
	885, 887, 61, 595, 290, 460, 598, 952, 593, 950,
	592, 599, 777, 633, 775, 461, 460, 917, 595, 916,
	857, 462, 987, 768, 461, 460, 767, 632, 392, 851,
	269, 894, 462, 38, 477, 478, 479, 480, 481, 474,
	287, 462, 484, 41, 461, 460, 756, 357, 382, 638,
	681, 464, 682, 660, 534, 535, 664, 135, 982, 962,
	640, 462, 394, 915, 135, 135, 135, 766, 443, 63,
	662, 663, 661, 443, 650, 652, 653, 984, 293, 651,
	945, 293, 356, 855, 63, 463, 135, 293, 135, 63,
	449, 135, 493, 495, 135, 844, 135, 358, 461, 460,
	750, 461, 460, 457, 683, 498, 499, 500, 501, 502,
	503, 504, 455, 910, 909, 462, 795, 293, 462, 441,
	505, 862, 861, 509, 510, 511, 512, 513, 514, 515,
	286, 518, 520, 520, 520, 520, 520, 520, 520, 520,
	528, 529, 530, 531, 782, 783, 784, 859, 858, 829,
	293, 451, 695, 293, 549, 367, 293, 955, 257, 257,
	257, 257, 268, 275, 551, 954, 63, 45, 548, 403,
	402, 135, 852, 382, 135, 135, 135, 135, 256, 695,
	257, 536, 721, 822, 398, 135, 398, 567, 19, 135,
	366, 825, 135, 575, 268, 367, 135, 135, 860, 795,
	574, 580, 586, 743, 795, 390, 19, 538, 574, 63,
	532, 546, 367, 547, 537, 582, 610, 611, 612, 577,
	553, 19, 555, 494, 795, 563, 604, 605, 606, 607,
	572, 899, 41, 552, 578, 554, 124, 565, 566, 396,
	367, 614, 615, 616, 589, 443, 41, 846, 398, 623,
	41, 603, 135, 622, 396, 243, 746, 135, 618, 396,
	135, 63, 645, 656, 613, 41, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 55, 658, 769, 619, 620, 38, 250, 256, 256,
	256, 256, 521, 522, 523, 524, 525, 526, 527, 41,
	509, 731, 721, 256, 453, 17, 694, 560, 558, 734,
	256, 63, 561, 559, 567, 371, 374, 375, 376, 372,
	582, 373, 377, 544, 562, 63, 375, 376, 733, 557,
	684, 685, 556, 247, 248, 996, 540, 992, 726, 781,
	38, 646, 268, 269, 722, 991, 361, 718, 717, 709,
	702, 761, 241, 692, 727, 752, 63, 399, 713, 359,
	973, 730, 725, 712, 696, 972, 475, 476, 477, 478,
	479, 480, 481, 474, 295, 269, 484, 707, 396, 396,
	897, 747, 627, 823, 586, 741, 296, 919, 659, 452,
	379, 63, 244, 245, 361, 744, 716, 238, 320, 319,
	322, 323, 324, 325, 715, 757, 758, 321, 326, 965,
	239, 45, 964, 939, 574, 739, 940, 443, 914, 458,
	47, 748, 49, 389, 735, 42, 1, 630, 974, 841,
	591, 396, 63, 63, 771, 443, 583, 273, 54, 590,
	765, 949, 762, 763, 764, 912, 597, 754, 600, 845,
	970, 63, 780, 751, 772, 406, 407, 405, 409, 786,
	787, 788, 408, 371, 374, 375, 376, 372, 404, 373,
	377, 697, 698, 732, 138, 701, 658, 378, 383, 393,
	796, 686, 624, 396, 56, 802, 774, 773, 628, 708,
	785, 710, 711, 279, 492, 706, 714, 262, 728, 63,
	533, 353, 963, 938, 719, 811, 516, 703, 473, 472,
	482, 483, 475, 476, 477, 478, 479, 480, 481, 474,
	306, 135, 484, 269, 812, 649, 729, 834, 835, 836,
	318, 315, 317, 316, 539, 545, 466, 304, 298, 568,
	792, 255, 838, 586, 793, 586, 824, 790, 363, 63,
	63, 370, 63, 63, 804, 805, 840, 368, 809, 254,
	821, 396, 935, 815, 837, 816, 817, 818, 819, 977,
	839, 543, 831, 20, 46, 249, 135, 16, 15, 14,
	135, 13, 659, 826, 827, 828, 63, 869, 870, 853,
	854, 24, 297, 355, 12, 11, 10, 9, 8, 7,
	865, 694, 770, 396, 867, 63, 6, 5, 4, 240,
	18, 889, 872, 257, 2, 582, 726, 873, 0, 901,
	888, 396, 876, 0, 875, 330, 896, 898, 0, 135,
	0, 895, 0, 900, 0, 0, 63, 63, 0, 586,
	725, 63, 63, 63, 0, 0, 63, 907, 908, 794,
	744, 871, 891, 465, 443, 133, 904, 0, 230, 911,
	0, 0, 0, 810, 0, 920, 0, 0, 0, 799,
	63, 918, 0, 0, 0, 0, 0, 133, 133, 270,
	0, 934, 0, 133, 0, 0, 508, 0, 0, 0,
	726, 927, 38, 517, 924, 925, 0, 926, 941, 0,
	928, 0, 930, 0, 0, 948, 942, 0, 0, 0,
	956, 0, 0, 0, 725, 0, 0, 63, 0, 396,
	396, 838, 396, 843, 0, 0, 958, 0, 63, 0,
	0, 960, 0, 922, 923, 0, 268, 0, 966, 0,
	0, 0, 0, 256, 0, 932, 933, 0, 0, 0,
	63, 133, 63, 133, 579, 0, 866, 133, 0, 981,
	0, 0, 944, 133, 946, 947, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 799, 0, 990, 396, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 999, 0,
	0, 0, 961, 0, 0, 0, 1001, 0, 132, 967,
	0, 0, 0, 0, 0, 0, 902, 903, 0, 0,
	0, 906, 906, 906, 647, 648, 396, 654, 655, 0,
	0, 261, 0, 0, 0, 0, 277, 19, 39, 21,
	22, 983, 0, 0, 986, 0, 0, 0, 0, 0,
	396, 0, 0, 0, 0, 33, 0, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 1004, 1005,
	0, 0, 0, 508, 0, 0, 699, 700, 32, 0,
	0, 41, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 133, 386, 133, 355, 843, 0, 0,
	0, 0, 0, 0, 282, 0, 283, 0, 396, 0,
	288, 0, 0, 0, 0, 133, 261, 133, 0, 0,
	133, 0, 0, 133, 0, 456, 0, 269, 0, 0,
	968, 0, 969, 0, 0, 0, 0, 0, 740, 0,
	25, 26, 28, 27, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 34, 35, 0, 0, 36,
	37, 29, 468, 985, 471, 0, 0, 0, 0, 0,
	485, 486, 487, 488, 489, 490, 491, 0, 469, 470,
	467, 473, 472, 482, 483, 475, 476, 477, 478, 479,
	480, 481, 474, 0, 0, 484, 0, 0, 0, 0,
	133, 0, 270, 133, 133, 133, 133, 293, 0, 0,
	0, 0, 0, 0, 564, 0, 0, 0, 133, 0,
	0, 386, 40, 0, 0, 133, 133, 0, 0, 365,
	0, 0, 0, 0, 270, 0, 0, 456, 388, 0,
	0, 0, 0, 473, 472, 482, 483, 475, 476, 477,
	478, 479, 480, 481, 474, 0, 0, 484, 446, 803,
	448, 0, 0, 261, 412, 0, 454, 0, 0, 814,
	472, 482, 483, 475, 476, 477, 478, 479, 480, 481,
	474, 133, 0, 484, 0, 0, 133, 424, 0, 133,
	508, 0, 0, 0, 0, 832, 833, 429, 430, 431,
	432, 433, 434, 435, 0, 436, 437, 438, 439, 440,
	425, 426, 427, 428, 410, 411, 0, 0, 413, 0,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 456, 550, 0, 0, 693, 693, 0, 0,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 693, 693, 693, 693, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 893, 791, 693,
	0, 0, 270, 473, 472, 482, 483, 475, 476, 477,
	478, 479, 480, 481, 474, 0, 0, 484, 473, 472,
	482, 483, 475, 476, 477, 478, 479, 480, 481, 474,
	0, 0, 484, 482, 483, 475, 476, 477, 478, 479,
	480, 481, 474, 0, 626, 484, 0, 0, 0, 643,
	0, 0, 644, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 85, 0, 0, 104, 92, 0, 0, 937, 473,
	472, 482, 483, 475, 476, 477, 478, 479, 480, 481,
	474, 0, 62, 484, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 473, 472, 482,
	483, 475, 476, 477, 478, 479, 480, 481, 474, 0,
	0, 484, 0, 0, 693, 0, 0, 0, 980, 508,
	0, 0, 0, 0, 0, 136, 0, 0, 693, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	133, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 0, 0, 118, 119, 120, 93,
	71, 0, 0, 0, 0, 133, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 64, 0, 84, 121,
	100, 79, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 0, 0, 0, 0, 456, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 820, 0, 0, 0, 0, 0, 219,
	209, 182, 221, 160, 174, 229, 175, 176, 203, 148,
	190, 96, 172, 0, 163, 143, 169, 144, 161, 184,
	77, 187, 159, 211, 193, 227, 85, 198, 0, 104,
	92, 0, 0, 186, 213, 188, 208, 181, 204, 153,
	197, 222, 173, 201, 0, 0, 0, 62, 863, 587,
	588, 0, 864, 0, 0, 0, 72, 0, 200, 218,
	171, 202, 142, 199, 0, 146, 149, 228, 216, 166,
	167, 745, 0, 0, 0, 0, 270, 0, 185, 189,
	205, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 196, 0, 0, 0, 150, 147, 0, 183,
	0, 0, 0, 152, 0, 165, 206, 0, 214, 180,
	136, 217, 178, 177, 220, 223, 99, 212, 162, 170,
	73, 168, 103, 97, 0, 195, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 145, 0, 105, 114, 123, 158,
	215, 118, 119, 120, 93, 71, 156, 157, 154, 155,
	191, 192, 224, 225, 226, 207, 151, 0, 0, 210,
	194, 64, 0, 84, 121, 100, 79, 115, 219, 209,
	182, 221, 160, 174, 229, 175, 176, 203, 148, 190,
	96, 172, 0, 163, 143, 169, 144, 161, 184, 77,
	187, 159, 211, 193, 227, 85, 198, 0, 104, 92,
	0, 0, 186, 213, 188, 208, 181, 204, 153, 197,
	222, 173, 201, 0, 0, 0, 62, 0, 587, 588,
	0, 0, 0, 0, 0, 72, 0, 200, 218, 171,
	202, 142, 199, 0, 146, 149, 228, 216, 166, 167,
	0, 0, 0, 0, 0, 0, 0, 185, 189, 205,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 196, 0, 0, 0, 150, 147, 0, 183, 0,
	0, 0, 152, 0, 165, 206, 0, 214, 180, 136,
	217, 178, 177, 220, 223, 99, 212, 162, 170, 73,
	168, 103, 97, 0, 195, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 145, 0, 105, 114, 123, 158, 215,
	118, 119, 120, 93, 71, 156, 157, 154, 155, 191,
	192, 224, 225, 226, 207, 151, 0, 0, 210, 194,
	64, 0, 84, 121, 100, 79, 115, 219, 209, 182,
	221, 160, 174, 229, 175, 176, 203, 148, 190, 96,
	172, 0, 163, 143, 169, 144, 161, 184, 77, 187,
	159, 211, 193, 227, 85, 198, 0, 104, 92, 0,
	0, 186, 213, 188, 208, 181, 204, 153, 197, 222,
	173, 201, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 200, 218, 171, 202,
	142, 199, 0, 146, 149, 228, 216, 166, 167, 0,
	0, 0, 0, 0, 0, 0, 185, 189, 205, 179,
	0, 0, 0, 0, 0, 0, 957, 0, 164, 0,
	196, 0, 0, 0, 150, 147, 0, 183, 0, 0,
	0, 152, 0, 165, 206, 0, 214, 180, 136, 217,
	178, 177, 220, 223, 99, 212, 162, 170, 73, 168,
	103, 97, 0, 195, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 145, 0, 105, 114, 123, 158, 215, 118,
	119, 120, 93, 71, 156, 157, 154, 155, 191, 192,
	224, 225, 226, 207, 151, 0, 0, 210, 194, 64,
	0, 84, 121, 100, 79, 115, 219, 209, 182, 221,
	160, 174, 229, 175, 176, 203, 148, 190, 96, 172,
	0, 163, 143, 169, 144, 161, 184, 77, 187, 159,
	211, 193, 227, 85, 198, 0, 104, 92, 0, 0,
	186, 213, 188, 208, 181, 204, 153, 197, 222, 173,
	201, 41, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 200, 218, 171, 202, 142,
	199, 0, 146, 149, 228, 216, 166, 167, 0, 0,
	0, 0, 0, 0, 0, 185, 189, 205, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 196,
	0, 0, 0, 150, 147, 0, 183, 0, 0, 0,
	152, 0, 165, 206, 0, 214, 180, 136, 217, 178,
	177, 220, 223, 99, 212, 162, 170, 73, 168, 103,
	97, 0, 195, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 145, 0, 105, 114, 123, 158, 215, 118, 119,
	120, 93, 71, 156, 157, 154, 155, 191, 192, 224,
	225, 226, 207, 151, 0, 0, 210, 194, 64, 0,
	84, 121, 100, 79, 115, 219, 209, 182, 221, 160,
	174, 229, 175, 176, 203, 148, 190, 96, 172, 0,
	163, 143, 169, 144, 161, 184, 77, 187, 159, 211,
	193, 227, 85, 198, 0, 104, 92, 0, 0, 186,
	213, 188, 208, 181, 204, 153, 197, 222, 173, 201,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 200, 218, 171, 202, 142, 199,
	0, 146, 149, 228, 216, 166, 167, 0, 0, 0,
	0, 0, 0, 0, 185, 189, 205, 179, 0, 0,
	0, 0, 0, 0, 874, 0, 164, 0, 196, 0,
	0, 0, 150, 147, 0, 183, 0, 0, 0, 152,
	0, 165, 206, 0, 214, 180, 136, 217, 178, 177,
	220, 223, 99, 212, 162, 170, 73, 168, 103, 97,
	0, 195, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	145, 0, 105, 114, 123, 158, 215, 118, 119, 120,
	93, 71, 156, 157, 154, 155, 191, 192, 224, 225,
	226, 207, 151, 0, 0, 210, 194, 64, 0, 84,
	121, 100, 79, 115, 219, 209, 182, 221, 160, 174,
	229, 175, 176, 203, 148, 190, 96, 172, 0, 163,
	143, 169, 144, 161, 184, 77, 187, 159, 211, 193,
	227, 85, 198, 0, 104, 92, 0, 0, 186, 213,
	188, 208, 181, 204, 153, 197, 222, 173, 201, 0,
	0, 0, 62, 0, 395, 0, 0, 0, 0, 0,
	0, 72, 0, 200, 218, 171, 202, 142, 199, 0,
	146, 149, 228, 216, 166, 167, 0, 0, 0, 0,
	0, 0, 0, 185, 189, 205, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 196, 0, 0,
	0, 150, 147, 0, 183, 0, 0, 0, 152, 0,
	165, 206, 0, 214, 180, 136, 217, 178, 177, 220,
	223, 99, 212, 162, 170, 73, 168, 103, 97, 0,
	195, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 145,
	0, 105, 114, 123, 158, 215, 118, 119, 120, 93,
	71, 156, 157, 154, 155, 191, 192, 224, 225, 226,
	207, 151, 0, 0, 210, 194, 64, 0, 84, 121,
	100, 79, 115, 219, 209, 182, 221, 160, 174, 229,
	175, 176, 203, 148, 190, 96, 172, 0, 163, 143,
	169, 144, 161, 184, 77, 187, 159, 211, 193, 227,
	85, 198, 0, 104, 92, 0, 0, 186, 213, 188,
	208, 181, 204, 153, 197, 222, 173, 201, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 200, 218, 171, 202, 142, 199, 0, 146,
	149, 228, 216, 166, 167, 0, 0, 0, 0, 0,
	0, 0, 185, 189, 205, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 196, 0, 0, 0,
	150, 147, 0, 183, 0, 0, 0, 152, 0, 165,
	206, 0, 214, 180, 136, 217, 178, 177, 220, 223,
	99, 212, 162, 170, 73, 168, 103, 97, 0, 195,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 145, 0,
	105, 114, 123, 158, 215, 118, 119, 120, 93, 71,
	156, 157, 154, 155, 191, 192, 224, 225, 226, 207,
	151, 0, 0, 210, 194, 64, 0, 84, 121, 100,
	79, 115, 219, 209, 182, 221, 160, 174, 229, 175,
	176, 203, 148, 190, 96, 172, 0, 163, 143, 169,
	144, 161, 184, 77, 187, 159, 211, 193, 227, 85,
	198, 0, 104, 92, 0, 0, 186, 213, 188, 208,
	181, 204, 153, 197, 222, 173, 201, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 200, 218, 171, 202, 142, 199, 0, 146, 149,
	228, 216, 166, 167, 0, 0, 0, 0, 0, 0,
	0, 185, 189, 205, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 196, 0, 0, 0, 150,
	147, 0, 183, 0, 0, 0, 152, 0, 165, 206,
	0, 214, 180, 136, 217, 178, 177, 220, 223, 99,
	212, 162, 170, 73, 168, 103, 97, 0, 195, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 145, 0, 105,
	114, 123, 158, 215, 118, 119, 120, 93, 71, 156,
	157, 154, 155, 191, 192, 224, 225, 226, 207, 151,
	0, 0, 210, 194, 64, 0, 84, 121, 100, 79,
	115, 219, 209, 182, 221, 160, 174, 229, 175, 176,
	203, 148, 190, 96, 172, 0, 163, 143, 169, 144,
	161, 184, 77, 187, 159, 211, 193, 227, 85, 198,
	0, 104, 92, 0, 0, 186, 213, 188, 208, 181,
	204, 153, 197, 222, 173, 201, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	200, 218, 171, 202, 142, 199, 0, 146, 149, 228,
	216, 166, 167, 0, 0, 0, 0, 0, 0, 0,
	185, 189, 205, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 196, 0, 0, 0, 150, 147,
	0, 183, 0, 0, 0, 152, 0, 165, 206, 0,
	214, 180, 136, 217, 178, 177, 220, 223, 99, 212,
	162, 170, 73, 168, 103, 97, 0, 195, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 145, 0, 105, 114,
	123, 158, 215, 118, 119, 120, 93, 71, 156, 157,
	154, 155, 191, 192, 224, 225, 226, 207, 151, 0,
	0, 210, 194, 64, 0, 84, 121, 100, 79, 115,
	219, 209, 182, 221, 160, 174, 229, 175, 176, 203,
	148, 190, 96, 172, 0, 163, 143, 169, 144, 161,
	184, 77, 187, 159, 211, 193, 227, 85, 198, 0,
	104, 92, 0, 0, 186, 213, 188, 208, 181, 204,
	153, 197, 222, 173, 201, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 200,
	218, 171, 202, 142, 199, 0, 146, 149, 228, 216,
	166, 167, 0, 0, 0, 0, 0, 0, 0, 185,
	189, 205, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 196, 0, 0, 0, 150, 147, 0,
	183, 0, 0, 0, 152, 0, 165, 206, 0, 214,
	180, 136, 217, 178, 177, 220, 223, 99, 212, 162,
	170, 73, 168, 103, 97, 0, 195, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 145, 0, 105, 114, 123,
	158, 215, 118, 119, 120, 93, 71, 156, 157, 154,
	155, 191, 192, 224, 225, 226, 207, 151, 0, 0,
	210, 194, 64, 0, 84, 121, 100, 79, 115, 96,
	0, 0, 688, 0, 302, 0, 0, 0, 77, 0,
	301, 0, 0, 340, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 271, 320, 319, 322, 323,
	324, 325, 0, 0, 72, 321, 326, 327, 328, 0,
	0, 299, 313, 0, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 691, 0, 0, 0,
	351, 0, 312, 0, 0, 308, 309, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 349, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 341, 350, 347, 348, 345, 346,
	344, 343, 342, 352, 335, 336, 338, 0, 337, 64,
	0, 84, 121, 100, 79, 115, 96, 0, 0, 0,
	0, 302, 0, 0, 0, 77, 0, 301, 0, 0,
	340, 85, 0, 0, 104, 92, 0, 0, 0, 0,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 271, 320, 319, 322, 323, 324, 325, 0,
	0, 72, 321, 326, 327, 328, 0, 0, 299, 313,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 691, 0, 0, 0, 351, 0, 312,
	0, 0, 308, 309, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 349, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 0, 0, 118, 119, 120, 93,
	71, 341, 350, 347, 348, 345, 346, 344, 343, 342,
	352, 335, 336, 338, 0, 337, 64, 0, 84, 121,
	100, 79, 115, 96, 0, 0, 0, 0, 302, 0,
	0, 0, 77, 0, 301, 0, 0, 340, 85, 0,
	0, 104, 92, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 293, 271,
	320, 319, 322, 323, 324, 325, 0, 0, 72, 321,
	326, 327, 328, 0, 0, 299, 313, 0, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	0, 0, 0, 0, 351, 0, 312, 0, 0, 308,
	309, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 349, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 0, 0, 118, 119, 120, 93, 71, 341, 350,
	347, 348, 345, 346, 344, 343, 342, 352, 335, 336,
	338, 19, 337, 64, 0, 84, 121, 100, 79, 115,
	0, 0, 96, 0, 0, 0, 0, 302, 0, 0,
	0, 77, 0, 301, 0, 0, 340, 85, 0, 0,
	104, 92, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 271, 320,
	319, 322, 323, 324, 325, 0, 0, 72, 321, 326,
	327, 328, 0, 0, 299, 313, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 0,
	0, 0, 0, 351, 0, 312, 0, 0, 308, 309,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 349, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 93, 71, 341, 350, 347,
	348, 345, 346, 344, 343, 342, 352, 335, 336, 338,
	0, 337, 64, 0, 84, 121, 100, 79, 115, 96,
	0, 0, 0, 0, 302, 0, 0, 0, 77, 0,
	301, 0, 0, 340, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 271, 320, 319, 322, 323,
	324, 325, 0, 0, 72, 321, 326, 327, 328, 0,
	0, 299, 313, 0, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 0, 0, 0, 0,
	351, 0, 312, 0, 0, 308, 309, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 349, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 341, 350, 347, 348, 345, 346,
	344, 343, 342, 352, 335, 336, 338, 96, 337, 64,
	0, 84, 121, 100, 79, 115, 77, 0, 0, 0,
	0, 340, 85, 0, 0, 104, 92, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 271, 320, 319, 322, 323, 324, 325,
	0, 0, 72, 321, 326, 327, 328, 0, 0, 0,
	313, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 0, 0, 0, 0, 351, 0,
	312, 0, 0, 308, 309, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 349,
	0, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 1002, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 0, 0, 118, 119, 120,
	93, 71, 341, 350, 347, 348, 345, 346, 344, 343,
	342, 352, 335, 336, 338, 96, 337, 64, 0, 84,
	121, 100, 79, 115, 77, 0, 0, 0, 0, 340,
	85, 0, 0, 104, 92, 0, 0, 0, 0, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 271, 320, 319, 322, 323, 324, 325, 0, 0,
	72, 321, 326, 327, 328, 0, 0, 0, 313, 0,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 0, 0, 0, 0, 351, 0, 312, 0,
	0, 308, 309, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 349, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 93, 71,
	341, 350, 347, 348, 345, 346, 344, 343, 342, 352,
	335, 336, 338, 0, 337, 64, 0, 84, 121, 100,
	79, 115, 96, 0, 0, 0, 798, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	800, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 461, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	96, 0, 118, 119, 120, 93, 71, 0, 0, 77,
	0, 0, 0, 0, 0, 85, 0, 0, 104, 92,
	0, 0, 64, 0, 84, 121, 100, 79, 115, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 57,
	0, 0, 0, 60, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 0, 0,
	118, 119, 120, 93, 71, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	64, 0, 84, 121, 100, 79, 115, 77, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 0, 0, 118, 119,
	120, 93, 71, 0, 0, 19, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 64, 0,
	84, 121, 100, 79, 115, 77, 0, 0, 0, 0,
	0, 85, 0, 0, 104, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 96, 0, 118, 119, 120, 93,
	71, 0, 0, 77, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 0, 0, 64, 0, 84, 121,
	100, 79, 115, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 541, 0, 0, 542, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 0, 0, 118, 119, 120, 93, 71, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	385, 0, 0, 0, 64, 77, 84, 121, 100, 79,
	115, 85, 0, 0, 104, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 387, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 96, 0, 118, 119, 120, 93,
	71, 0, 0, 77, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 0, 0, 64, 0, 84, 121,
	100, 79, 115, 0, 0, 0, 0, 41, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	800, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	96, 0, 118, 119, 120, 93, 71, 0, 0, 77,
	0, 0, 0, 0, 0, 85, 0, 0, 104, 92,
	0, 0, 64, 0, 84, 121, 100, 79, 115, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 387, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 96, 0,
	118, 119, 120, 93, 71, 0, 364, 77, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	64, 0, 84, 121, 100, 79, 115, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	259, 0, 0, 105, 114, 123, 0, 96, 118, 119,
	120, 93, 71, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 85, 0, 0, 104, 92, 0, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 96, 0, 118, 119, 120,
	93, 71, 0, 0, 77, 0, 0, 0, 0, 0,
	85, 0, 0, 104, 92, 0, 0, 64, 0, 84,
	121, 100, 79, 115, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 136, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 96, 0, 118, 119, 120, 93, 71,
	0, 0, 77, 0, 0, 0, 0, 0, 85, 0,
	0, 104, 92, 0, 0, 64, 0, 84, 121, 100,
	79, 115, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 96, 0, 118, 119, 120, 93, 71, 0, 0,
	77, 0, 0, 0, 0, 0, 85, 0, 0, 104,
	92, 0, 0, 64, 0, 84, 121, 100, 79, 115,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	73, 0, 103, 97, 0, 0, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 0, 0, 105, 114, 123, 96,
	0, 118, 119, 120, 93, 71, 0, 0, 77, 0,
	0, 0, 0, 0, 85, 0, 0, 104, 92, 0,
	0, 64, 0, 84, 121, 100, 79, 115, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 96, 0, 118,
	119, 120, 93, 71, 0, 0, 77, 0, 0, 0,
	0, 0, 85, 0, 0, 104, 92, 0, 0, 64,
	0, 84, 121, 100, 79, 115, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 265, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 0, 0, 118, 119, 120,
	266, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 84,
	121, 100, 79, 115,
}
var yyPact = [...]int{

	1031, -1000, -144, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 607, 625, -1000,
	-1000, -1000, -1000, -1000, 441, 5123, 19, 47, 31, 6758,
	46, 3485, 7232, -1000, -1000, -1000, -1000, -1000, 425, -1000,
	-1000, -1000, -1000, -1000, 591, 605, 459, 583, 506, -1000,
	18, 5967, 6600, 7390, -1000, 320, 43, 7232, -103, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 39, 7232, -1000, 7232, 7, 287,
	7, 7232, -1000, 70, -1000, -1000, -1000, 7232, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 245, 566, 4422, 4422,
	607, -1000, 425, -1000, -1000, -1000, 536, -1000, -1000, 146,
	6441, 371, 486, -1000, -1000, -1000, 579, 5479, 5809, 7232,
	117, -1000, 2689, 345, -1000, 538, -1000, -1000, 116, -1000,
	69, -1000, -1000, 328, -1000, 1161, 276, 2291, 33, 7232,
	129, 7232, 2291, 26, 7232, 577, 465, 7232, -1000, 3286,
	364, -1000, -1000, -1000, -1000, 621, 103, 244, -1000, 4422,
	1093, 406, 406, -1000, -1000, 55, -1000, -1000, 4778, 4778,
	4778, 4778, 4778, 4778, 4778, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406,
	66, -1000, 4235, 406, 406, 406, 406, 406, 406, 4422,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 369, -1000, 241, 591, 245, 506, 5637,
	493, -1000, -1000, 392, 7232, -1000, 7074, 5967, 5967, 5967,
	5967, -1000, 503, 500, -1000, 479, 478, 495, 7232, -1000,
	314, 245, 5479, 84, -1000, 6283, -1000, -1000, 613, 5967,
	7232, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7074, -1000,
	4422, 3087, 1893, 98, 152, -82, -1000, -1000, 411, -1000,
	411, 411, 411, 411, -63, -63, -63, -63, -1000, -1000,
	-1000, -1000, -1000, 424, -1000, 411, 411, 411, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 418, 418, 418, 413,
	413, 2, -1000, -1000, -1000, 7232, -1000, 570, 67, -1000,
	7232, 364, -1000, 7232, 2291, -1000, -1000, -1000, -1000, 516,
	4422, 4422, 220, 4422, 4422, 89, 4778, 203, 195, 4778,
	4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778, 4778,
	4778, 4778, 4778, 4778, 207, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 261, -1000, 425, 554, 554, 86, 86,
	86, 86, 86, 86, 1419, 3672, 3087, 311, 158, 4235,
	3859, 3859, 4422, 4422, 3859, 584, 122, 158, 6916, -1000,
	245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3859, 3859,
	3859, 3859, 4422, -1000, -1000, -1000, 566, -1000, 584, 596,
	-1000, 527, 526, 3859, -1000, 463, 7074, 406, -1000, 5301,
	-1000, 407, 486, 462, 634, -1000, -1000, -1000, -1000, 499,
	-1000, 480, -1000, -1000, -1000, -1000, -1000, 245, -1000, 42,
	37, 35, -1000, 607, 4422, 399, -1000, -1000, -1000, 158,
	-1000, 65, -1000, 362, 1694, -1000, -1000, -1000, -1000, -1000,
	-1000, 416, 564, 113, 257, -1000, -1000, 537, -1000, 140,
	-84, -1000, -1000, 200, -63, -63, -1000, -1000, 81, 532,
	81, 81, 81, 222, -1000, -1000, -1000, -1000, 180, -1000,
	-1000, -1000, 177, -1000, 444, 6916, 2291, -1000, -1000, 107,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -14, -1000, 2291, -1000, 513, 89, 147, -1000,
	-1000, 290, -1000, -1000, 158, 158, 1371, -1000, -1000, -1000,
	-1000, 203, 4778, 4778, 4778, 630, 1371, 1310, 1323, 1181,
	86, 150, 150, 82, 82, 82, 82, 82, 484, 484,
	-1000, -1000, -1000, 245, -1000, -1000, -1000, 245, 3859, 358,
	-1000, -1000, 4965, 63, 406, 4422, -1000, 275, 275, 71,
	187, 275, 3859, 128, -1000, 4422, 245, -1000, 275, 245,
	275, 275, -1000, -1000, 7232, -1000, -1000, -1000, -1000, 383,
	-1000, 567, 343, 350, -1000, -1000, 4046, 245, 308, 61,
	607, 4422, 4422, -1000, -1000, -1000, 406, 406, 406, 591,
	158, -1000, 2888, 1893, -1000, 1893, 6916, -1000, 252, -1000,
	-1000, 408, 57, -1000, -1000, -1000, 330, 81, 81, -1000,
	240, 127, -1000, -1000, -1000, 306, -1000, 357, 280, 7232,
	-1000, -1000, -1000, 7232, -1000, -1000, -1000, -1000, -1000, 6916,
	-1000, -1000, -1000, -1000, -1000, -1000, 630, 1371, 1295, -1000,
	4778, 4778, -1000, -1000, 275, 3859, -1000, -1000, 6125, -1000,
	-1000, 2490, 3859, 158, -1000, -1000, 38, 207, 38, -115,
	363, 118, -1000, 4422, 167, -1000, -1000, -1000, -1000, -1000,
	-1000, 613, 5967, 563, -1000, 406, -1000, -1000, 410, 6916,
	6916, 591, 158, 158, 6916, 6916, 6916, -1000, -1000, 1694,
	-1000, 272, -1000, 411, -1000, -78, 620, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 218,
	173, -1000, 171, 2291, -1000, -1000, 572, -1000, 4778, 1371,
	1371, -1000, -1000, -1000, -1000, 59, 245, 245, 411, 411,
	-1000, 411, 413, -1000, 411, -31, 411, -32, 245, 245,
	406, -112, -1000, 158, 4422, 611, 354, 618, -1000, 406,
	-1000, 425, 50, -1000, -1000, 239, -1000, 239, 239, -1000,
	6916, -1000, 97, -1000, -93, -1000, 323, 315, -1000, 406,
	1371, 2092, -1000, -1000, -1000, 41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4778, 245, 214, 158, 609, 604,
	7074, 350, 245, 6916, -1000, 6916, -1000, -1000, -1000, 144,
	548, -1000, 543, -1000, -1000, -1000, -15, -1000, -1000, -1000,
	9, -1000, -1000, -1000, 4422, 4422, 345, -1000, -1000, -1000,
	-1000, 213, -1000, -1000, 236, -1000, 6916, 245, 34, -124,
	158, 338, -1000, -1000, -15, 524, -1000, 511, -120, -138,
	-1000, -18, -1000, 509, -1000, -20, -122, 406, -134, 4600,
	-140, 1155, 245, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 824, 14, 515, 820, 819, 818, 817, 816, 809,
	808, 807, 806, 805, 804, 801, 791, 789, 788, 787,
	63, 785, 784, 783, 44, 781, 58, 779, 772, 27,
	170, 29, 26, 563, 770, 13, 75, 61, 769, 76,
	767, 57, 761, 978, 758, 751, 749, 21, 19, 748,
	747, 746, 745, 43, 6, 744, 743, 742, 741, 740,
	735, 38, 3, 8, 24, 11, 730, 130, 5, 717,
	30, 716, 715, 713, 712, 51, 711, 40, 710, 34,
	31, 708, 33, 7, 707, 45, 706, 446, 704, 119,
	703, 698, 697, 696, 694, 692, 23, 16, 186, 9,
	28, 690, 689, 835, 32, 54, 688, 687, 35, 17,
	22, 12, 684, 678, 672, 668, 667, 666, 665, 25,
	663, 660, 659, 10, 41, 658, 657, 56, 18, 656,
	655, 651, 650, 50, 649, 37, 648, 647, 646, 36,
	20, 640, 4, 639, 638, 2, 637, 636, 635, 0,
	66, 633, 632, 159,
}
var yyR1 = [...]int{

	0, 147, 148, 148, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 151, 151, 39, 39, 9, 9, 84,
	84, 84, 102, 102, 10, 10, 10, 10, 15, 136,
	137, 137, 137, 133, 113, 113, 113, 116, 116, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 117, 117, 117, 117, 117, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	132, 132, 119, 119, 127, 127, 128, 128, 128, 125,
	125, 126, 126, 129, 129, 129, 120, 120, 120, 120,
	120, 120, 122, 122, 130, 130, 123, 123, 123, 124,
	124, 131, 131, 131, 131, 131, 121, 121, 134, 141,
	141, 141, 141, 135, 135, 143, 143, 142, 138, 138,
	138, 139, 139, 139, 140, 140, 140, 11, 11, 11,
	11, 11, 146, 144, 144, 145, 145, 12, 13, 13,
	13, 14, 14, 16, 112, 112, 112, 17, 18, 18,
	19, 19, 19, 19, 19, 152, 20, 21, 21, 22,
	22, 22, 26, 26, 26, 24, 24, 25, 25, 31,
	31, 30, 30, 32, 32, 32, 32, 101, 101, 101,
	100, 100, 34, 34, 35, 35, 36, 36, 37, 37,
	37, 45, 38, 38, 38, 38, 107, 107, 106, 106,
	106, 105, 105, 40, 40, 40, 40, 41, 41, 41,
	41, 42, 42, 44, 44, 43, 43, 46, 46, 46,
	46, 47, 47, 48, 48, 33, 33, 33, 33, 33,
	33, 33, 88, 88, 50, 50, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 60, 60, 60, 60,
	60, 60, 51, 51, 51, 51, 51, 51, 51, 29,
	29, 61, 61, 61, 67, 62, 62, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 58, 58,
	58, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	57, 57, 57, 57, 57, 57, 57, 57, 153, 153,
	59, 59, 59, 59, 27, 27, 27, 27, 27, 110,
	110, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 71, 71, 28, 28, 69, 69,
	70, 72, 72, 68, 68, 68, 53, 53, 53, 53,
	53, 53, 53, 53, 55, 55, 55, 73, 73, 74,
	74, 75, 75, 76, 76, 77, 78, 78, 78, 79,
	79, 79, 79, 80, 80, 80, 52, 52, 52, 52,
	52, 52, 81, 81, 81, 81, 82, 82, 63, 63,
	65, 65, 64, 66, 83, 83, 85, 86, 86, 89,
	89, 90, 90, 87, 87, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 92, 92, 92, 93,
	93, 94, 94, 94, 95, 95, 98, 98, 99, 99,
	103, 103, 104, 104, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 149, 150, 108, 109, 109, 109,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 5, 5, 3, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -147, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 109, 110, 112, 111, 130,
	113, 123, 47, 24, 124, 125, 128, 129, -149, 7,
	191, 50, -148, 204, -75, 14, -22, 5, -20, -152,
	-20, -20, -20, -20, -136, 50, -94, 116, 67, 114,
	120, -98, 53, -97, 197, 142, 136, 163, 155, 153,
	156, 181, 62, 126, 151, 147, 145, 26, 168, 202,
	146, 140, 141, 167, 199, 32, 134, 166, 162, 165,
	139, 161, 36, 180, 158, 148, 17, 129, 132, 122,
	201, 144, 133, 128, 35, 172, 138, 159, 135, 149,
	150, 164, 137, 160, 173, 203, 157, 154, 177, 178,
	179, 200, 152, 174, -87, 116, 118, 114, 114, 115,
	116, 114, -43, -103, 53, -97, 116, 114, -112, 53,
	-96, -97, 68, 21, 23, 170, 71, 103, 15, 72,
	102, 192, 109, 45, 184, 185, 182, 183, 175, 28,
	9, 24, 124, 20, 96, 111, 75, 76, 127, 22,
	125, 66, 18, 48, 10, 12, 13, 119, 118, 87,
	115, 43, 7, 105, 25, 84, 39, 27, 41, 85,
	16, 186, 187, 30, 196, 131, 98, 46, 33, 69,
	64, 49, 67, 14, 44, 86, 112, 191, 42, 6,
	195, 29, 123, 40, 114, 176, 74, 117, 65, 5,
	120, 8, 47, 121, 188, 189, 190, 31, 73, 11,
	-103, -108, -108, -108, -108, -108, -2, -79, 16, 15,
	-5, -3, -149, 6, 19, 20, -26, 37, 38, -21,
	-87, -35, -36, -37, -38, -45, -67, -149, -43, 10,
	-39, -43, -84, -83, 181, 156, 180, -85, -68, -98,
	-103, 53, -97, -137, -133, 53, 115, -43, 191, -90,
	119, 114, -43, -43, -89, 119, 53, -89, -43, 106,
	-39, -108, -150, 52, -80, 18, 30, -33, -49, 69,
	-54, 28, 22, -53, -50, -68, -66, -67, 103, 104,
	92, 93, 100, 70, 105, -58, -56, -57, -59, 55,
	54, 63, 56, 57, 58, 59, 64, 65, 66, -98,
	-103, -64, -149, 41, 42, 192, 193, 196, 194, 72,
	31, 182, 190, 189, 188, 186, 187, 184, 185, 119,
	183, 98, 191, -76, -77, -33, -75, -2, -20, 33,
	-24, 20, 61, -44, 25, -43, 29, 51, -40, -41,
	-42, 39, 43, 45, 40, 41, 42, 46, -107, 21,
	-35, -2, -149, -106, -105, 21, -103, 55, -43, -151,
	51, 10, 121, -102, -99, 55, -98, -96, 51, 29,
	77, 106, 52, 51, -113, -116, -118, -117, -114, -115,
	153, 154, 103, 157, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 126, 149, 150, 151, 152, 136,
	137, 138, 139, 140, 141, 142, 144, 145, 146, 147,
	148, 53, -109, -149, -99, 116, -43, 69, -43, -109,
	117, -39, 22, 49, -43, -104, -103, -96, 8, 87,
	68, 67, 84, 51, 17, -33, -51, 87, 69, 85,
	86, 71, 89, 88, 99, 92, 93, 94, 95, 96,
	97, 98, 90, 91, 102, 77, 78, 79, 80, 81,
	82, 83, -88, -149, -67, -149, 107, 108, -54, -54,
	-54, -54, -54, -54, -54, -149, 106, -62, -33, -149,
	-149, -149, -149, -149, -149, -149, -71, -33, -149, -153,
	-149, -153, -153, -153, -153, -153, -153, -153, -149, -149,
	-149, -149, 51, -78, 23, 24, -79, -150, -26, -55,
	-98, 56, 59, -25, 40, -52, 29, 31, -2, -149,
	-43, -83, -36, -37, -36, -37, 39, 39, 39, 44,
	39, 44, 39, -41, -103, -150, -150, -2, -46, 47,
	118, 48, -105, -48, 11, -35, -43, -108, -85, -33,
	-99, -104, -96, -138, -139, -140, -99, 55, 56, -133,
	-134, -141, 122, 120, -135, 115, 27, -129, 64, 69,
	-125, 173, -119, 50, -119, -119, -119, -119, -123, 156,
	-123, -123, -123, 50, -119, -119, -119, -127, 50, -127,
	-127, -128, 50, -128, -95, 121, -43, 22, -91, 112,
	-146, 110, 170, 156, 62, 28, 111, 14, 192, 132,
	203, 53, 133, -43, -43, -109, 35, -33, -33, -60,
	64, 69, 65, 66, -33, -33, -54, -61, -64, -67,
	60, 87, 85, 86, 71, -54, -54, -54, -54, -54,
	-54, -54, -54, -54, -54, -54, -54, -54, -54, -54,
	-110, 53, 55, 53, -53, -53, -98, -31, 20, -30,
	-32, 94, -33, -103, -99, 51, -150, -30, -30, -33,
	-33, -30, -24, -69, -70, 73, -98, -150, -30, -31,
	-30, -30, -77, -80, -86, 18, 10, 31, 31, -30,
	-82, 49, -83, -63, -65, -64, -149, -2, -81, -98,
	-48, 49, 49, 39, 39, -150, 115, 115, 115, -75,
	-33, -48, 106, 51, -140, 77, 50, 27, -135, 53,
	53, -120, 28, 64, -126, 174, 56, -123, -123, -124,
	102, 29, -124, -124, -124, -132, 55, 56, 56, 49,
	-98, -109, -108, -92, -93, 117, 21, 115, 27, 132,
	-109, 36, 64, 65, 66, -61, -54, -54, -54, -29,
	127, 68, -150, -150, -30, 51, -101, -100, 21, -98,
	55, 106, -149, -33, -150, -150, 51, 121, 21, -150,
	-30, -72, -70, 75, -33, -150, -150, -150, -150, -150,
	-43, -34, 10, 26, -82, 51, -150, -150, -150, 51,
	106, -75, -33, -33, -149, -149, -149, -79, -99, -139,
	-140, -143, -142, -98, 53, -122, 49, 55, 56, 57,
	64, 182, 52, -124, -124, 53, 53, 103, 52, 51,
	51, 52, 51, -43, -43, -108, -98, -29, 68, -54,
	-54, -150, -32, -100, 94, -104, -31, -111, 103, 153,
	126, 151, 147, 167, 158, 172, 149, 173, -110, -111,
	197, -75, 76, -33, 74, -48, -35, 27, -65, 31,
	-2, -149, -98, -98, -79, -47, -98, -47, -47, 52,
	51, -119, -130, 170, 8, 55, 56, 56, -109, 25,
	-54, 106, -150, -150, -119, -119, -119, -128, -119, 141,
	-119, 141, -150, -150, -149, -28, 195, -33, -73, 12,
	8, -63, -2, 106, -150, 51, -150, -150, -142, -131,
	122, 27, 120, 182, 52, 52, -149, 94, -123, 53,
	-54, -150, 55, -74, 13, 15, -83, -150, -98, -98,
	-121, 62, 27, 27, -144, -145, 132, -27, 87, 200,
	-33, -62, 55, -150, 51, -98, -150, 198, 46, 201,
	-145, 31, 36, 199, 202, 134, 36, 135, 200, -149,
	201, -54, 131, 202, -150, -150,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 391, 0, 175,
	175, 175, 175, 175, 0, 451, 433, 0, 0, 0,
	0, 0, 169, 615, 615, 615, 615, 615, 0, 28,
	29, 613, 1, 3, 399, 0, 0, 179, 182, 177,
	433, 0, 0, 0, 44, 0, 0, 606, 0, 431,
	452, 453, 456, 457, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 607, 608,
	609, 610, 611, 612, 0, 0, 434, 0, 429, 0,
	429, 0, 162, 235, 460, 461, 606, 0, 615, 164,
	165, 166, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	168, 170, 171, 172, 173, 174, 22, 403, 0, 0,
	391, 24, 0, 175, 180, 181, 185, 183, 184, 176,
	0, 0, 204, 206, 207, 208, 216, 0, 218, 0,
	0, 35, 0, 38, -2, 558, -2, 424, 0, 373,
	0, -2, -2, 0, 50, 0, 0, 616, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 0, 161, 0,
	163, 167, 23, 614, 18, 0, 0, 400, 245, 0,
	250, 252, 0, 287, 288, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 317, 376,
	377, 378, 379, 380, 381, 382, 383, 254, 255, 373,
	0, 423, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 338, 338, 338, 338, 338, 338, 338, 338, 0,
	0, 0, 0, 392, 393, 396, 399, 22, 182, 0,
	187, 186, 178, 0, 0, 234, 0, 0, 0, 0,
	0, 223, 0, 0, 226, 0, 0, 0, 0, 217,
	0, 22, 0, 237, 219, 0, 221, 222, 243, 0,
	0, 33, 34, 615, 42, 43, 458, 459, 0, 40,
	0, 0, 138, 0, 103, 99, 55, 56, 92, 58,
	92, 92, 92, 92, 116, 116, 116, 116, 84, 85,
	86, 87, 88, 0, 71, 92, 92, 92, 75, 59,
	60, 61, 62, 63, 64, 65, 94, 94, 94, 96,
	96, 454, 46, 617, 618, 0, 48, 0, 0, 150,
	0, 158, 430, 0, 616, 236, 462, 463, 404, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 276,
	277, 278, 251, 0, 265, 0, 0, 0, 307, 308,
	309, 310, 311, 312, 0, 189, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 185, 0, 365, 0, 330,
	0, 331, 332, 333, 334, 335, 336, 337, 0, 189,
	0, 0, 0, 395, 397, 398, 403, 25, 185, 0,
	384, 0, 0, 0, 188, 416, 0, 0, -2, 0,
	233, 243, 205, 212, 0, 215, 224, 225, 227, 0,
	229, 0, 231, 232, 209, 210, 284, 22, 211, 0,
	0, 0, 220, 391, 0, 243, 36, 37, 425, 426,
	374, 0, -2, 49, 139, 141, 144, 145, 146, 51,
	52, 0, 0, 0, 0, 133, 134, 106, 104, 0,
	101, 100, 57, 0, 116, 116, 78, 79, 119, 0,
	119, 119, 119, 0, 72, 73, 74, 66, 0, 67,
	68, 69, 0, 70, 0, 0, 616, 432, 615, 446,
	151, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 0, 157, 616, 160, 0, 246, 247, 249,
	266, 0, 268, 270, 401, 402, 256, 257, 281, 282,
	283, 0, 0, 0, 0, 279, 261, 0, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	306, 349, 350, 0, 304, 305, 313, 0, 0, 190,
	191, 193, 197, 0, 374, 0, 422, 0, 0, 0,
	0, 0, 0, 371, 368, 0, 0, 339, 0, 0,
	0, 0, 394, 19, 0, 427, 428, 385, 386, 202,
	26, 0, 416, 406, 418, 420, 0, 22, 0, 412,
	391, 0, 0, 228, 230, -2, 0, 0, 0, 399,
	244, 32, 0, 0, 142, 0, 0, 129, 0, 131,
	132, 112, 0, 105, 54, 102, 0, 119, 119, 80,
	0, 0, 81, 82, 83, 0, 90, 0, 0, 0,
	455, 47, 147, 0, 615, 447, 448, 449, 450, 0,
	159, 405, 267, 269, 271, 258, 279, 262, 0, 259,
	0, 0, 253, 318, 0, 0, 194, 198, 0, 200,
	201, 0, 189, 286, 321, 322, 0, 0, 0, 0,
	391, 0, 369, 0, 0, 329, 340, 341, 342, 343,
	20, 243, 0, 0, 27, 0, 421, -2, 0, 0,
	0, 399, 213, 214, 0, 0, 0, 31, 375, 140,
	143, 0, 135, 92, 130, 114, 0, 107, 108, 109,
	110, 111, 93, 76, 77, 120, 117, 118, 89, 0,
	0, 97, 0, 616, 148, 149, 0, 260, 0, 280,
	263, 319, 192, 199, 195, 0, 0, 0, 92, 92,
	354, 92, 96, 357, 92, 359, 92, 362, 0, 0,
	0, 366, 328, 372, 0, 387, 203, 0, 419, 0,
	-2, 0, 414, 413, 30, 0, 241, 0, 0, 128,
	0, 137, 121, 115, 0, 91, 0, 0, 45, 0,
	264, 0, 320, 323, 351, 116, 355, 356, 358, 360,
	361, 363, 325, 324, 0, 0, 0, 370, 389, 0,
	0, 409, 22, 0, 238, 0, 239, 240, 136, 126,
	0, 123, 125, 113, 95, 98, 0, 196, 352, 353,
	344, 327, 367, 21, 0, 0, 417, -2, 415, 242,
	53, 0, 122, 124, 0, 153, 0, 0, 0, 0,
	390, 388, 127, 152, 0, 0, 326, 0, 0, 0,
	154, 0, 345, 0, 348, 0, 346, 0, 0, 0,
	0, 0, 0, 347, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	50, 52, 94, 92, 51, 93, 106, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 204,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:273
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:278
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:279
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:302
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:327
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:348
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:359
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:381
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:397
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:405
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:411
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:415
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:436
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:441
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[7].tableName}, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:456
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:463
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:470
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:475
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:485
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:496
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:659
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:669
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:678
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:682
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:700
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:717
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:740
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:769
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:774
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:783
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:787
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:791
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:796
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:805
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:809
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:813
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:817
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:826
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:836
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:846
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:870
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:880
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:885
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:905
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:909
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:929
		{
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[4].tableName}, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:933
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Tables: TableNames{yyDollar[4].tableName}, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:938
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[4].tableName}, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[3].tableName.ToViewName()}, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:947
		{
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[4].tableName}, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:953
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:963
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:969
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:973
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:979
		{
			yyVAL.statement = &DDL{Action: RenameStr, Tables: TableNames{yyDollar[3].tableName}, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:985
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:993
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Tables: TableNames{yyDollar[5].tableName}, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:998
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Tables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Tables: TableNames{yyDollar[3].tableName}}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Tables: TableNames{yyDollar[2].tableName}}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &DDL{Action: AnalyzeStr, Tables: yyDollar[3].tableNames}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1027
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1036
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1084
		{
			setAllowComments(yylex, true)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.bytes2 = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = UnionStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = UnionAllStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = UnionDistinctStr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = SQLCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = DistinctStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.str = StraightJoinHint
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.selectExprs = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.empty = struct{}{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.empty = struct{}{}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = JoinStr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.str = JoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.str = JoinStr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = StraightJoinStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.str = LeftJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = LeftJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = RightJoinStr
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = RightJoinStr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = NaturalJoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.indexHints = nil
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.expr = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = ""
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.str = IsNullStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.str = IsNotNullStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.str = IsTrueStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.str = IsNotTrueStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.str = IsFalseStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = IsNotFalseStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = EqualStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = LessThanStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = GreaterThanStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.str = LessEqualStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.str = GreaterEqualStr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.str = NotEqualStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1680
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 325:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 326:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = BooleanModeStr
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = QueryExpansionStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = nil
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.str = string("")
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &NullVal{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.exprs = nil
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.expr = nil
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.orderBy = nil
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.str = AscScr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.str = AscScr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.str = DescScr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.limit = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.str = ForUpdateStr
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.str = ShareModeStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2151
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2164
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.updateExprs = nil
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.byt = 0
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.byt = 1
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.str = IgnoreStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2521
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			decNesting(yylex)
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2535
		{
			forceEOF(yylex)
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2540
		{
			forceEOF(yylex)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			forceEOF(yylex)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
