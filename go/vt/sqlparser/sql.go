//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const VINDEX = 57464
const VINDEXES = 57465
const STATUS = 57466
const VARIABLES = 57467
const BIT = 57468
const TINYINT = 57469
const SMALLINT = 57470
const MEDIUMINT = 57471
const INT = 57472
const INTEGER = 57473
const BIGINT = 57474
const INTNUM = 57475
const REAL = 57476
const DOUBLE = 57477
const FLOAT_TYPE = 57478
const DECIMAL = 57479
const NUMERIC = 57480
const TIME = 57481
const TIMESTAMP = 57482
const DATETIME = 57483
const YEAR = 57484
const CHAR = 57485
const VARCHAR = 57486
const BOOL = 57487
const CHARACTER = 57488
const VARBINARY = 57489
const NCHAR = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const NULLX = 57501
const AUTO_INCREMENT = 57502
const APPROXNUM = 57503
const SIGNED = 57504
const UNSIGNED = 57505
const ZEROFILL = 57506
const DATABASES = 57507
const TABLES = 57508
const VITESS_KEYSPACES = 57509
const VITESS_SHARDS = 57510
const VITESS_TABLETS = 57511
const VSCHEMA_TABLES = 57512
const NAMES = 57513
const CHARSET = 57514
const GLOBAL = 57515
const SESSION = 57516
const CURRENT_TIMESTAMP = 57517
const DATABASE = 57518
const CURRENT_DATE = 57519
const CURRENT_TIME = 57520
const LOCALTIME = 57521
const LOCALTIMESTAMP = 57522
const UTC_DATE = 57523
const UTC_TIME = 57524
const UTC_TIMESTAMP = 57525
const REPLACE = 57526
const CONVERT = 57527
const CAST = 57528
const GROUP_CONCAT = 57529
const SEPARATOR = 57530
const MATCH = 57531
const AGAINST = 57532
const BOOLEAN = 57533
const LANGUAGE = 57534
const WITH = 57535
const QUERY = 57536
const EXPANSION = 57537
const UNUSED = 57538

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 202,
	79, 631,
	108, 631,
	-2, 47,
	-1, 203,
	79, 605,
	108, 605,
	-2, 48,
	-1, 204,
	79, 595,
	108, 595,
	-2, 42,
	-1, 206,
	79, 619,
	108, 619,
	-2, 44,
	-1, 210,
	108, 496,
	-2, 492,
	-1, 211,
	108, 497,
	-2, 493,
	-1, 638,
	108, 499,
	-2, 495,
	-1, 779,
	5, 22,
	-2, 443,
	-1, 793,
	5, 23,
	-2, 320,
	-1, 967,
	5, 23,
	-2, 444,
	-1, 1015,
	5, 22,
	-2, 446,
	-1, 1061,
	5, 23,
	-2, 447,
}

const yyPrivate = 57344

const yyLast = 8494

var yyAct = [...]int{

	380, 38, 1053, 565, 379, 885, 353, 908, 198, 664,
	624, 886, 641, 677, 882, 943, 973, 173, 432, 429,
	44, 736, 743, 782, 430, 3, 746, 856, 240, 848,
	242, 640, 637, 797, 760, 818, 713, 650, 238, 38,
	167, 785, 342, 402, 408, 213, 348, 178, 201, 434,
	603, 351, 193, 189, 745, 418, 182, 673, 43, 1084,
	207, 1075, 1081, 172, 1070, 1079, 1074, 1069, 956, 1008,
	217, 187, 1030, 814, 188, 168, 169, 170, 171, 913,
	914, 915, 340, 657, 985, 233, 665, 48, 916, 1003,
	693, 1056, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 691, 1036, 542, 1001, 50, 51,
	52, 53, 334, 335, 1078, 223, 1076, 1054, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	838, 697, 542, 604, 224, 625, 627, 219, 658, 135,
	690, 136, 492, 136, 497, 220, 235, 1028, 237, 138,
	139, 140, 239, 239, 239, 239, 849, 239, 239, 796,
	795, 794, 748, 215, 239, 577, 835, 234, 236, 147,
	137, 1046, 837, 652, 554, 555, 993, 970, 860, 38,
	801, 564, 450, 228, 819, 542, 517, 652, 687, 692,
	685, 331, 332, 333, 431, 336, 337, 404, 520, 761,
	449, 808, 339, 405, 958, 720, 207, 626, 444, 695,
	698, 494, 1057, 665, 917, 214, 153, 239, 922, 718,
	719, 717, 239, 232, 532, 518, 1049, 542, 1068, 446,
	812, 239, 239, 239, 239, 239, 239, 239, 239, 689,
	163, 520, 1029, 1027, 944, 410, 535, 536, 537, 538,
	539, 532, 654, 688, 542, 491, 226, 655, 989, 504,
	496, 502, 836, 651, 834, 988, 946, 406, 923, 505,
	506, 507, 508, 509, 510, 511, 512, 651, 694, 761,
	867, 872, 649, 648, 41, 827, 519, 518, 826, 696,
	148, 522, 815, 948, 716, 952, 150, 947, 1063, 945,
	211, 156, 152, 520, 950, 533, 534, 535, 536, 537,
	538, 539, 532, 949, 1039, 542, 592, 593, 951, 953,
	987, 866, 154, 865, 825, 158, 63, 521, 519, 518,
	145, 921, 737, 145, 738, 239, 239, 345, 403, 519,
	518, 1065, 341, 519, 518, 520, 910, 809, 149, 739,
	551, 553, 145, 145, 1019, 341, 520, 490, 145, 230,
	520, 225, 519, 518, 841, 842, 843, 151, 157, 159,
	160, 161, 162, 513, 514, 165, 164, 214, 563, 520,
	341, 567, 568, 569, 570, 571, 572, 573, 1032, 576,
	578, 578, 578, 578, 578, 578, 578, 578, 586, 587,
	588, 589, 1031, 556, 557, 558, 559, 560, 561, 562,
	706, 708, 709, 1019, 1020, 707, 193, 193, 193, 193,
	193, 207, 594, 606, 519, 518, 982, 981, 902, 341,
	883, 960, 431, 443, 628, 918, 145, 443, 145, 355,
	193, 520, 145, 969, 341, 854, 341, 751, 145, 965,
	207, 415, 63, 63, 63, 63, 623, 63, 63, 631,
	928, 927, 881, 596, 63, 925, 924, 751, 341, 45,
	608, 609, 783, 611, 666, 667, 668, 415, 341, 636,
	642, 638, 619, 452, 451, 629, 634, 145, 595, 630,
	607, 192, 633, 610, 145, 145, 145, 783, 645, 926,
	19, 63, 239, 679, 414, 854, 441, 19, 854, 854,
	523, 802, 621, 622, 415, 590, 41, 63, 179, 145,
	659, 145, 63, 777, 145, 678, 778, 145, 415, 145,
	714, 63, 63, 63, 63, 63, 63, 63, 63, 443,
	701, 896, 805, 566, 675, 676, 41, 442, 681, 440,
	575, 674, 669, 41, 38, 55, 579, 580, 581, 582,
	583, 584, 585, 19, 41, 786, 787, 912, 567, 134,
	883, 712, 828, 789, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 1014,
	500, 338, 623, 750, 618, 638, 424, 425, 660, 661,
	662, 663, 17, 616, 780, 781, 740, 741, 617, 41,
	765, 614, 635, 670, 671, 672, 615, 602, 758, 792,
	186, 791, 613, 753, 754, 612, 1077, 757, 779, 183,
	184, 1073, 840, 192, 768, 63, 63, 769, 702, 145,
	1072, 764, 774, 766, 767, 409, 773, 820, 752, 177,
	343, 448, 790, 803, 799, 800, 775, 231, 811, 407,
	1051, 763, 344, 368, 367, 370, 371, 372, 373, 642,
	816, 817, 369, 374, 1050, 1012, 806, 963, 991, 683,
	499, 703, 704, 239, 710, 711, 428, 807, 540, 541,
	533, 534, 535, 536, 537, 538, 539, 532, 180, 181,
	542, 239, 821, 822, 823, 409, 793, 772, 63, 174,
	1042, 175, 45, 145, 1041, 771, 145, 145, 145, 145,
	145, 830, 714, 1011, 783, 831, 1043, 986, 145, 516,
	566, 47, 145, 755, 756, 49, 145, 439, 42, 839,
	145, 145, 420, 423, 424, 425, 421, 1, 422, 426,
	686, 861, 63, 403, 844, 1052, 907, 647, 639, 212,
	54, 646, 824, 1026, 984, 845, 846, 847, 653, 813,
	656, 911, 1048, 810, 455, 456, 454, 458, 457, 888,
	453, 38, 155, 887, 207, 199, 884, 427, 445, 855,
	552, 680, 56, 145, 871, 898, 899, 900, 145, 853,
	833, 145, 63, 893, 832, 889, 684, 218, 550, 770,
	200, 890, 591, 869, 401, 892, 1040, 906, 1010, 870,
	903, 574, 851, 759, 354, 705, 852, 366, 363, 365,
	904, 642, 364, 642, 905, 597, 863, 864, 776, 524,
	868, 352, 346, 191, 411, 874, 419, 875, 876, 877,
	878, 417, 919, 920, 416, 192, 192, 192, 192, 192,
	196, 788, 784, 63, 190, 880, 1007, 1055, 601, 20,
	46, 192, 185, 16, 931, 933, 15, 63, 14, 192,
	901, 938, 193, 955, 942, 939, 13, 24, 954, 750,
	957, 638, 12, 941, 11, 10, 935, 936, 9, 964,
	8, 962, 7, 6, 961, 5, 4, 176, 18, 377,
	2, 972, 0, 0, 862, 975, 976, 977, 803, 0,
	978, 980, 0, 0, 873, 0, 0, 0, 0, 63,
	239, 0, 0, 0, 642, 61, 937, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 894, 0, 0, 895,
	0, 0, 897, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 999, 208, 0, 715, 888, 0, 990, 1016,
	887, 966, 967, 968, 0, 971, 0, 1013, 0, 0,
	0, 992, 63, 63, 0, 0, 0, 0, 0, 1024,
	1025, 0, 1033, 1015, 0, 0, 0, 0, 0, 0,
	0, 63, 420, 423, 424, 425, 421, 1035, 422, 426,
	0, 0, 786, 787, 0, 888, 0, 38, 0, 887,
	1044, 0, 904, 0, 0, 994, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 1004, 1005, 0,
	0, 1045, 0, 0, 0, 0, 1059, 0, 983, 63,
	207, 566, 1060, 1037, 0, 0, 0, 0, 1021, 1022,
	1023, 241, 241, 241, 241, 0, 241, 241, 1071, 0,
	0, 145, 0, 241, 0, 0, 0, 0, 0, 1080,
	0, 63, 63, 996, 997, 0, 998, 0, 0, 1000,
	1038, 1002, 0, 0, 0, 194, 0, 0, 0, 0,
	0, 0, 63, 63, 0, 63, 63, 0, 0, 208,
	241, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 0, 1009, 542, 142, 241, 1082, 1061, 145,
	0, 241, 0, 145, 341, 1064, 0, 0, 1067, 63,
	241, 241, 241, 241, 241, 241, 241, 241, 197, 0,
	0, 0, 0, 216, 0, 0, 0, 715, 63, 0,
	0, 0, 378, 0, 0, 1085, 1086, 0, 0, 0,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 145, 0, 542, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 0, 166, 0, 63, 0, 63,
	63, 63, 145, 63, 1058, 566, 63, 0, 0, 0,
	0, 0, 0, 0, 143, 143, 209, 0, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 221, 0, 222, 0, 0, 0, 227, 0, 526,
	0, 529, 0, 229, 241, 241, 0, 543, 544, 545,
	546, 547, 548, 549, 0, 527, 528, 525, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	63, 63, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 63, 0, 0, 0, 0, 0, 0,
	0, 438, 0, 0, 63, 0, 0, 0, 143, 0,
	143, 0, 0, 0, 143, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 493, 0, 495, 598, 0, 498,
	63, 192, 501, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 39, 21, 22,
	0, 0, 0, 934, 0, 0, 0, 63, 0, 143,
	0, 0, 0, 208, 33, 63, 143, 436, 143, 23,
	241, 241, 209, 531, 530, 540, 541, 533, 534, 535,
	536, 537, 538, 539, 532, 850, 0, 542, 32, 0,
	0, 143, 41, 143, 0, 0, 143, 0, 0, 143,
	0, 503, 0, 0, 0, 531, 530, 540, 541, 533,
	534, 535, 536, 537, 538, 539, 532, 0, 0, 542,
	0, 241, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 515, 0, 0, 0, 0, 0,
	0, 25, 26, 28, 27, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 34, 35, 0, 0, 36,
	37, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 632, 0, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 209, 143, 143,
	143, 143, 143, 461, 0, 0, 0, 0, 682, 0,
	620, 829, 241, 699, 143, 0, 700, 0, 436, 0,
	0, 0, 143, 143, 0, 473, 209, 0, 0, 0,
	241, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 478, 479, 480, 481, 482, 483, 484, 0, 485,
	486, 487, 488, 489, 474, 475, 476, 477, 459, 460,
	0, 0, 462, 0, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 0, 143, 0, 0, 858, 0,
	143, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	891, 798, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 241, 0, 241, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 503, 0, 0,
	0, 749, 749, 0, 0, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 749,
	749, 749, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 858, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 974, 974,
	974, 0, 979, 0, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 929, 0, 0, 0, 930, 1047,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 503, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	320, 310, 283, 322, 261, 275, 330, 276, 277, 304,
	249, 291, 98, 273, 0, 264, 244, 270, 245, 262,
	285, 77, 288, 260, 312, 294, 85, 328, 87, 299,
	0, 108, 94, 0, 0, 287, 314, 289, 309, 282,
	305, 254, 298, 323, 274, 302, 324, 0, 0, 0,
	62, 0, 643, 644, 0, 0, 0, 0, 0, 72,
	0, 301, 319, 272, 303, 243, 300, 0, 247, 250,
	329, 317, 267, 268, 804, 0, 0, 0, 0, 0,
	0, 286, 290, 306, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 297, 0, 0, 0, 251,
	248, 0, 284, 0, 0, 0, 253, 0, 266, 307,
	0, 315, 281, 146, 318, 279, 278, 321, 101, 313,
	263, 271, 73, 269, 106, 99, 209, 296, 100, 105,
	88, 113, 102, 119, 125, 126, 111, 124, 66, 117,
	110, 92, 82, 83, 65, 0, 104, 76, 80, 75,
	97, 114, 115, 74, 132, 69, 123, 68, 70, 122,
	96, 112, 118, 93, 90, 67, 116, 91, 89, 84,
	78, 0, 246, 0, 109, 120, 133, 259, 316, 127,
	128, 129, 130, 95, 71, 81, 107, 257, 258, 255,
	256, 292, 293, 325, 326, 327, 308, 252, 0, 0,
	311, 295, 64, 0, 86, 131, 103, 79, 121, 320,
	310, 283, 322, 261, 275, 330, 276, 277, 304, 249,
	291, 98, 273, 0, 264, 244, 270, 245, 262, 285,
	77, 288, 260, 312, 294, 85, 328, 87, 299, 0,
	108, 94, 0, 0, 287, 314, 289, 309, 282, 305,
	254, 298, 323, 274, 302, 324, 0, 0, 0, 62,
	0, 643, 644, 0, 0, 0, 0, 0, 72, 0,
	301, 319, 272, 303, 243, 300, 0, 247, 250, 329,
	317, 267, 268, 0, 0, 0, 0, 0, 0, 0,
	286, 290, 306, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 297, 0, 0, 0, 251, 248,
	0, 284, 0, 0, 0, 253, 0, 266, 307, 0,
	315, 281, 146, 318, 279, 278, 321, 101, 313, 263,
	271, 73, 269, 106, 99, 0, 296, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	0, 246, 0, 109, 120, 133, 259, 316, 127, 128,
	129, 130, 95, 71, 81, 107, 257, 258, 255, 256,
	292, 293, 325, 326, 327, 308, 252, 0, 0, 311,
	295, 64, 0, 86, 131, 103, 79, 121, 320, 310,
	283, 322, 261, 275, 330, 276, 277, 304, 249, 291,
	98, 273, 0, 264, 244, 270, 245, 262, 285, 77,
	288, 260, 312, 294, 85, 328, 87, 299, 0, 108,
	94, 0, 0, 287, 314, 289, 309, 282, 305, 254,
	298, 323, 274, 302, 324, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 301,
	319, 272, 303, 243, 300, 0, 247, 250, 329, 317,
	267, 268, 0, 0, 0, 0, 0, 0, 0, 286,
	290, 306, 280, 0, 0, 0, 0, 0, 0, 1034,
	0, 265, 0, 297, 0, 0, 0, 251, 248, 0,
	284, 0, 0, 0, 253, 0, 266, 307, 0, 315,
	281, 146, 318, 279, 278, 321, 101, 313, 263, 271,
	73, 269, 106, 99, 0, 296, 100, 105, 88, 113,
	102, 119, 125, 126, 111, 124, 66, 117, 110, 92,
	82, 83, 65, 0, 104, 76, 80, 75, 97, 114,
	115, 74, 132, 69, 123, 68, 70, 122, 96, 112,
	118, 93, 90, 67, 116, 91, 89, 84, 78, 0,
	246, 0, 109, 120, 133, 259, 316, 127, 128, 129,
	130, 95, 71, 81, 107, 257, 258, 255, 256, 292,
	293, 325, 326, 327, 308, 252, 0, 0, 311, 295,
	64, 0, 86, 131, 103, 79, 121, 320, 310, 283,
	322, 261, 275, 330, 276, 277, 304, 249, 291, 98,
	273, 0, 264, 244, 270, 245, 262, 285, 77, 288,
	260, 312, 294, 85, 328, 87, 299, 0, 108, 94,
	0, 0, 287, 314, 289, 309, 282, 305, 254, 298,
	323, 274, 302, 324, 41, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 301, 319,
	272, 303, 243, 300, 0, 247, 250, 329, 317, 267,
	268, 0, 0, 0, 0, 0, 0, 0, 286, 290,
	306, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 297, 0, 0, 0, 251, 248, 0, 284,
	0, 0, 0, 253, 0, 266, 307, 0, 315, 281,
	146, 318, 279, 278, 321, 101, 313, 263, 271, 73,
	269, 106, 99, 0, 296, 100, 105, 88, 113, 102,
	119, 125, 126, 111, 124, 66, 117, 110, 92, 82,
	83, 65, 0, 104, 76, 80, 75, 97, 114, 115,
	74, 132, 69, 123, 68, 70, 122, 96, 112, 118,
	93, 90, 67, 116, 91, 89, 84, 78, 0, 246,
	0, 109, 120, 133, 259, 316, 127, 128, 129, 130,
	95, 71, 81, 107, 257, 258, 255, 256, 292, 293,
	325, 326, 327, 308, 252, 0, 0, 311, 295, 64,
	0, 86, 131, 103, 79, 121, 320, 310, 283, 322,
	261, 275, 330, 276, 277, 304, 249, 291, 98, 273,
	0, 264, 244, 270, 245, 262, 285, 77, 288, 260,
	312, 294, 85, 328, 87, 299, 0, 108, 94, 0,
	0, 287, 314, 289, 309, 282, 305, 254, 298, 323,
	274, 302, 324, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 301, 319, 272,
	303, 243, 300, 0, 247, 250, 329, 317, 267, 268,
	0, 0, 0, 0, 0, 0, 0, 286, 290, 306,
	280, 0, 0, 0, 0, 0, 0, 940, 0, 265,
	0, 297, 0, 0, 0, 251, 248, 0, 284, 0,
	0, 0, 253, 0, 266, 307, 0, 315, 281, 146,
	318, 279, 278, 321, 101, 313, 263, 271, 73, 269,
	106, 99, 0, 296, 100, 105, 88, 113, 102, 119,
	125, 126, 111, 124, 66, 117, 110, 92, 82, 83,
	65, 0, 104, 76, 80, 75, 97, 114, 115, 74,
	132, 69, 123, 68, 70, 122, 96, 112, 118, 93,
	90, 67, 116, 91, 89, 84, 78, 0, 246, 0,
	109, 120, 133, 259, 316, 127, 128, 129, 130, 95,
	71, 81, 107, 257, 258, 255, 256, 292, 293, 325,
	326, 327, 308, 252, 0, 0, 311, 295, 64, 0,
	86, 131, 103, 79, 121, 320, 310, 283, 322, 261,
	275, 330, 276, 277, 304, 249, 291, 98, 273, 0,
	264, 244, 270, 245, 262, 285, 77, 288, 260, 312,
	294, 85, 328, 87, 299, 0, 108, 94, 0, 0,
	287, 314, 289, 309, 282, 305, 254, 298, 323, 274,
	302, 324, 0, 0, 0, 62, 0, 447, 0, 0,
	0, 0, 0, 0, 72, 0, 301, 319, 272, 303,
	243, 300, 0, 247, 250, 329, 317, 267, 268, 0,
	0, 0, 0, 0, 0, 0, 286, 290, 306, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	297, 0, 0, 0, 251, 248, 0, 284, 0, 0,
	0, 253, 0, 266, 307, 0, 315, 281, 146, 318,
	279, 278, 321, 101, 313, 263, 271, 73, 269, 106,
	99, 0, 296, 100, 105, 88, 113, 102, 119, 125,
	126, 111, 124, 66, 117, 110, 92, 82, 83, 65,
	0, 104, 76, 80, 75, 97, 114, 115, 74, 132,
	69, 123, 68, 70, 122, 96, 112, 118, 93, 90,
	67, 116, 91, 89, 84, 78, 0, 246, 0, 109,
	120, 133, 259, 316, 127, 128, 129, 130, 95, 71,
	81, 107, 257, 258, 255, 256, 292, 293, 325, 326,
	327, 308, 252, 0, 0, 311, 295, 64, 0, 86,
	131, 103, 79, 121, 320, 310, 283, 322, 261, 275,
	330, 276, 277, 304, 249, 291, 98, 273, 0, 264,
	244, 270, 245, 262, 285, 77, 288, 260, 312, 294,
	85, 328, 87, 299, 0, 108, 94, 0, 0, 287,
	314, 289, 309, 282, 305, 254, 298, 323, 274, 302,
	324, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 301, 319, 272, 303, 243,
	300, 0, 247, 250, 329, 317, 267, 268, 0, 0,
	0, 0, 0, 0, 0, 286, 290, 306, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 297,
	0, 0, 0, 251, 248, 0, 284, 0, 0, 0,
	253, 0, 266, 307, 0, 315, 281, 146, 318, 279,
	278, 321, 101, 313, 263, 271, 73, 269, 106, 99,
	0, 296, 100, 105, 88, 113, 102, 119, 125, 126,
	111, 124, 66, 117, 110, 92, 82, 83, 65, 0,
	104, 76, 80, 75, 97, 114, 115, 74, 132, 69,
	123, 68, 70, 122, 96, 112, 118, 93, 90, 67,
	116, 91, 89, 84, 78, 0, 246, 0, 109, 120,
	133, 259, 316, 127, 128, 129, 130, 95, 71, 81,
	107, 257, 258, 255, 256, 292, 293, 325, 326, 327,
	308, 252, 0, 0, 311, 295, 64, 0, 86, 131,
	103, 79, 121, 320, 310, 283, 322, 261, 275, 330,
	276, 277, 304, 249, 291, 98, 273, 0, 264, 244,
	270, 245, 262, 285, 77, 288, 260, 312, 294, 85,
	328, 87, 299, 0, 108, 94, 0, 0, 287, 314,
	289, 309, 282, 305, 254, 298, 323, 274, 302, 324,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 301, 319, 272, 303, 243, 300,
	0, 247, 250, 329, 317, 267, 268, 0, 0, 0,
	0, 0, 0, 0, 286, 290, 306, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 297, 0,
	0, 0, 251, 248, 0, 284, 0, 0, 0, 253,
	0, 266, 307, 0, 315, 281, 146, 318, 279, 278,
	321, 101, 313, 263, 271, 73, 269, 106, 99, 0,
	296, 100, 105, 88, 113, 102, 119, 125, 126, 111,
	124, 66, 117, 110, 92, 82, 83, 65, 0, 104,
	76, 80, 75, 97, 114, 115, 74, 132, 69, 123,
	68, 70, 122, 96, 112, 118, 93, 90, 67, 116,
	91, 89, 84, 78, 0, 246, 0, 109, 120, 133,
	259, 316, 127, 128, 129, 130, 95, 71, 81, 107,
	257, 258, 255, 256, 292, 293, 325, 326, 327, 308,
	252, 0, 0, 311, 295, 64, 0, 86, 131, 103,
	79, 121, 320, 310, 283, 322, 261, 275, 330, 276,
	277, 304, 249, 291, 98, 273, 0, 264, 244, 270,
	245, 262, 285, 77, 288, 260, 312, 294, 85, 328,
	87, 299, 0, 108, 94, 0, 0, 287, 314, 289,
	309, 282, 305, 254, 298, 323, 274, 302, 324, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 301, 319, 272, 303, 243, 300, 0,
	247, 250, 329, 317, 267, 268, 0, 0, 0, 0,
	0, 0, 0, 286, 290, 306, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 297, 0, 0,
	0, 251, 248, 0, 284, 0, 0, 0, 253, 0,
	266, 307, 0, 315, 281, 146, 318, 279, 278, 321,
	101, 313, 263, 271, 73, 269, 106, 99, 0, 296,
	100, 105, 88, 113, 102, 119, 125, 126, 111, 124,
	66, 117, 110, 92, 82, 83, 65, 0, 104, 76,
	80, 75, 97, 114, 115, 74, 132, 69, 123, 68,
	70, 122, 96, 112, 118, 93, 90, 67, 116, 91,
	89, 84, 78, 0, 246, 0, 109, 120, 133, 259,
	316, 127, 128, 129, 130, 95, 71, 81, 107, 257,
	258, 255, 256, 292, 293, 325, 326, 327, 308, 252,
	0, 0, 311, 295, 64, 0, 86, 131, 103, 79,
	121, 98, 0, 0, 744, 0, 350, 0, 0, 0,
	77, 0, 349, 0, 0, 85, 388, 87, 0, 0,
	108, 94, 0, 0, 0, 0, 381, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 210,
	368, 367, 370, 371, 372, 373, 0, 0, 72, 369,
	374, 375, 376, 0, 0, 347, 361, 0, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 359,
	747, 0, 0, 0, 399, 0, 360, 0, 0, 356,
	357, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 397, 0, 101, 0, 0,
	0, 73, 0, 106, 99, 0, 0, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	0, 0, 0, 109, 120, 133, 0, 0, 127, 128,
	129, 130, 95, 71, 81, 107, 389, 398, 395, 396,
	393, 394, 392, 391, 390, 400, 383, 384, 386, 0,
	385, 64, 0, 86, 131, 103, 79, 121, 98, 0,
	0, 0, 0, 350, 0, 0, 0, 77, 0, 349,
	0, 0, 85, 388, 87, 0, 0, 108, 94, 0,
	0, 0, 0, 381, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 341, 210, 368, 367, 370,
	371, 372, 373, 0, 0, 72, 369, 374, 375, 376,
	0, 0, 347, 361, 0, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 359, 0, 0, 0,
	0, 399, 0, 360, 0, 0, 356, 357, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 397, 0, 101, 0, 0, 0, 73, 0,
	106, 99, 0, 0, 100, 105, 88, 113, 102, 119,
	125, 126, 111, 124, 66, 117, 110, 92, 82, 83,
	65, 0, 104, 76, 80, 75, 97, 114, 115, 74,
	132, 69, 123, 68, 70, 122, 96, 112, 118, 93,
	90, 67, 116, 91, 89, 84, 78, 0, 0, 0,
	109, 120, 133, 0, 0, 127, 128, 129, 130, 95,
	71, 81, 107, 389, 398, 395, 396, 393, 394, 392,
	391, 390, 400, 383, 384, 386, 0, 385, 64, 0,
	86, 131, 103, 79, 121, 98, 0, 0, 0, 0,
	350, 0, 0, 0, 77, 0, 349, 0, 0, 85,
	388, 87, 0, 0, 108, 94, 0, 0, 0, 0,
	381, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 210, 368, 367, 370, 371, 372, 373,
	0, 0, 72, 369, 374, 375, 376, 0, 0, 347,
	361, 0, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 359, 747, 0, 0, 0, 399, 0,
	360, 0, 0, 356, 357, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 397,
	0, 101, 0, 0, 0, 73, 0, 106, 99, 0,
	0, 100, 105, 88, 113, 102, 119, 125, 126, 111,
	124, 66, 117, 110, 92, 82, 83, 65, 0, 104,
	76, 80, 75, 97, 114, 115, 74, 132, 69, 123,
	68, 70, 122, 96, 112, 118, 93, 90, 67, 116,
	91, 89, 84, 78, 0, 0, 0, 109, 120, 133,
	0, 0, 127, 128, 129, 130, 95, 71, 81, 107,
	389, 398, 395, 396, 393, 394, 392, 391, 390, 400,
	383, 384, 386, 19, 385, 64, 0, 86, 131, 103,
	79, 121, 0, 0, 98, 0, 0, 0, 0, 350,
	0, 0, 0, 77, 0, 349, 0, 0, 85, 388,
	87, 0, 0, 108, 94, 0, 0, 0, 0, 381,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 210, 368, 367, 370, 371, 372, 373, 0,
	0, 72, 369, 374, 375, 376, 0, 0, 347, 361,
	0, 387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 359, 0, 0, 0, 0, 399, 0, 360,
	0, 0, 356, 357, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 397, 0,
	101, 0, 0, 0, 73, 0, 106, 99, 0, 0,
	100, 105, 88, 113, 102, 119, 125, 126, 111, 124,
	66, 117, 110, 92, 82, 83, 65, 0, 104, 76,
	80, 75, 97, 114, 115, 74, 132, 69, 123, 68,
	70, 122, 96, 112, 118, 93, 90, 67, 116, 91,
	89, 84, 78, 0, 0, 0, 109, 120, 133, 0,
	0, 127, 128, 129, 130, 95, 71, 81, 107, 389,
	398, 395, 396, 393, 394, 392, 391, 390, 400, 383,
	384, 386, 0, 385, 64, 0, 86, 131, 103, 79,
	121, 98, 0, 0, 0, 0, 350, 0, 0, 0,
	77, 0, 349, 0, 0, 85, 388, 87, 0, 0,
	108, 94, 0, 0, 0, 0, 381, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 210,
	368, 367, 370, 371, 372, 373, 0, 0, 72, 369,
	374, 375, 376, 0, 0, 347, 361, 0, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 359,
	0, 0, 0, 0, 399, 0, 360, 0, 0, 356,
	357, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 397, 0, 101, 0, 0,
	0, 73, 0, 106, 99, 0, 0, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	0, 0, 0, 109, 120, 133, 0, 0, 127, 128,
	129, 130, 95, 71, 81, 107, 389, 398, 395, 396,
	393, 394, 392, 391, 390, 400, 383, 384, 386, 98,
	385, 64, 0, 86, 131, 103, 79, 121, 77, 0,
	0, 0, 0, 85, 388, 87, 0, 0, 108, 94,
	0, 0, 0, 0, 381, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 210, 368, 367,
	370, 371, 372, 373, 0, 0, 72, 369, 374, 375,
	376, 0, 0, 0, 361, 0, 387, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 359, 0, 0,
	0, 0, 399, 0, 360, 0, 0, 356, 357, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 397, 0, 101, 0, 0, 0, 73,
	0, 106, 99, 0, 1083, 100, 105, 88, 113, 102,
	119, 125, 126, 111, 124, 66, 117, 110, 92, 82,
	83, 65, 0, 104, 76, 80, 75, 97, 114, 115,
	74, 132, 69, 123, 68, 70, 122, 96, 112, 118,
	93, 90, 67, 116, 91, 89, 84, 78, 0, 0,
	0, 109, 120, 133, 0, 0, 127, 128, 129, 130,
	95, 71, 81, 107, 389, 398, 395, 396, 393, 394,
	392, 391, 390, 400, 383, 384, 386, 98, 385, 64,
	0, 86, 131, 103, 79, 121, 77, 0, 0, 0,
	0, 85, 388, 87, 0, 0, 108, 94, 0, 0,
	0, 0, 381, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 210, 368, 367, 370, 371,
	372, 373, 0, 0, 72, 369, 374, 375, 376, 0,
	0, 0, 361, 0, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 359, 0, 0, 0, 0,
	399, 0, 360, 0, 0, 356, 357, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 397, 0, 101, 0, 0, 0, 73, 0, 106,
	99, 0, 0, 100, 105, 88, 113, 102, 119, 125,
	126, 111, 124, 66, 117, 110, 92, 82, 83, 65,
	0, 104, 76, 80, 75, 97, 114, 115, 74, 132,
	69, 123, 68, 70, 122, 96, 112, 118, 93, 90,
	67, 116, 91, 89, 84, 78, 0, 0, 0, 109,
	120, 133, 0, 0, 127, 128, 129, 130, 95, 71,
	81, 107, 389, 398, 395, 396, 393, 394, 392, 391,
	390, 400, 383, 384, 386, 98, 385, 64, 0, 86,
	131, 103, 79, 121, 77, 0, 0, 0, 0, 85,
	0, 87, 0, 0, 108, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 101, 0, 0, 0, 73, 0, 106, 99, 0,
	0, 100, 105, 88, 113, 102, 119, 125, 126, 111,
	124, 66, 117, 110, 92, 82, 83, 65, 0, 104,
	76, 80, 75, 97, 114, 115, 74, 132, 69, 123,
	68, 70, 122, 96, 112, 118, 93, 90, 67, 116,
	91, 89, 84, 78, 0, 0, 0, 109, 120, 133,
	0, 0, 127, 128, 129, 130, 95, 71, 81, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 86, 131, 103,
	79, 121, 98, 0, 0, 0, 857, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 85, 0, 87, 0,
	0, 108, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 859, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 519, 518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 0, 101, 0,
	0, 0, 73, 0, 106, 99, 0, 0, 100, 105,
	88, 113, 102, 119, 125, 126, 111, 124, 66, 117,
	110, 92, 82, 83, 65, 0, 104, 76, 80, 75,
	97, 114, 115, 74, 132, 69, 123, 68, 70, 122,
	96, 112, 118, 93, 90, 67, 116, 91, 89, 84,
	78, 0, 0, 0, 109, 120, 133, 0, 98, 127,
	128, 129, 130, 95, 71, 81, 107, 77, 0, 0,
	0, 0, 85, 0, 87, 0, 0, 108, 94, 0,
	0, 0, 64, 0, 86, 131, 103, 79, 121, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 57,
	0, 0, 0, 60, 101, 0, 0, 0, 73, 0,
	106, 99, 0, 0, 100, 105, 88, 113, 102, 119,
	125, 126, 111, 124, 66, 117, 110, 92, 82, 83,
	65, 0, 104, 76, 80, 75, 97, 114, 115, 74,
	132, 69, 123, 68, 70, 122, 96, 112, 118, 93,
	90, 67, 116, 91, 89, 84, 78, 0, 0, 0,
	109, 120, 133, 0, 0, 127, 128, 129, 130, 95,
	71, 81, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	86, 131, 103, 79, 121, 98, 0, 0, 0, 435,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 85,
	0, 87, 0, 0, 108, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 437, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 101, 0, 0, 0, 73, 0, 106, 99, 0,
	0, 100, 105, 88, 113, 102, 119, 125, 126, 111,
	124, 66, 117, 110, 92, 82, 83, 65, 0, 104,
	76, 80, 75, 97, 114, 115, 74, 132, 69, 123,
	68, 70, 122, 96, 112, 118, 93, 90, 67, 116,
	91, 89, 84, 78, 0, 0, 0, 109, 120, 133,
	0, 0, 127, 128, 129, 130, 95, 71, 81, 107,
	0, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 64, 0, 86, 131, 103,
	79, 121, 77, 0, 0, 0, 0, 85, 0, 87,
	0, 0, 108, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 101,
	0, 0, 0, 73, 0, 106, 99, 0, 0, 100,
	105, 88, 113, 102, 119, 125, 126, 111, 124, 66,
	117, 110, 92, 82, 83, 65, 0, 104, 76, 80,
	75, 97, 114, 115, 74, 132, 69, 123, 68, 70,
	122, 96, 112, 118, 93, 90, 67, 116, 91, 89,
	84, 78, 0, 0, 0, 109, 120, 133, 0, 0,
	127, 128, 129, 130, 95, 71, 81, 107, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 64, 0, 86, 131, 103, 79, 121,
	77, 0, 0, 0, 0, 85, 0, 87, 0, 0,
	108, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 101, 0, 0,
	0, 73, 0, 106, 99, 0, 0, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	0, 0, 0, 109, 120, 133, 0, 98, 127, 128,
	129, 130, 95, 71, 81, 107, 77, 0, 0, 0,
	0, 85, 0, 87, 0, 0, 108, 94, 0, 0,
	0, 64, 0, 86, 131, 103, 79, 121, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 599, 0,
	0, 600, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 101, 0, 0, 0, 73, 0, 106,
	99, 0, 0, 100, 105, 88, 113, 102, 119, 125,
	126, 111, 124, 66, 117, 110, 92, 82, 83, 65,
	0, 104, 76, 80, 75, 97, 114, 115, 74, 132,
	69, 123, 68, 70, 122, 96, 112, 118, 93, 90,
	67, 116, 91, 89, 84, 78, 0, 0, 0, 109,
	120, 133, 0, 0, 127, 128, 129, 130, 95, 71,
	81, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 86,
	131, 103, 79, 121, 98, 0, 0, 0, 435, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 85, 0,
	87, 0, 0, 108, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 437, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	101, 0, 0, 0, 73, 0, 106, 99, 0, 0,
	433, 105, 88, 113, 102, 119, 125, 126, 111, 124,
	66, 117, 110, 92, 82, 83, 65, 0, 104, 76,
	80, 75, 97, 114, 115, 74, 132, 69, 123, 68,
	70, 122, 96, 112, 118, 93, 90, 67, 116, 91,
	89, 84, 78, 0, 0, 0, 109, 120, 133, 0,
	98, 127, 128, 129, 130, 95, 71, 81, 107, 77,
	0, 0, 0, 0, 85, 0, 87, 0, 0, 108,
	94, 0, 0, 0, 64, 0, 86, 131, 103, 79,
	121, 0, 0, 0, 0, 41, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 101, 0, 0, 0,
	73, 0, 106, 99, 0, 0, 100, 105, 88, 113,
	102, 119, 125, 126, 111, 124, 66, 117, 110, 92,
	82, 83, 65, 0, 104, 76, 80, 75, 97, 114,
	115, 74, 132, 69, 123, 68, 70, 122, 96, 112,
	118, 93, 90, 67, 116, 91, 89, 84, 78, 0,
	0, 0, 109, 120, 133, 0, 98, 127, 128, 129,
	130, 95, 71, 81, 107, 77, 0, 0, 0, 0,
	85, 0, 87, 0, 0, 108, 94, 0, 0, 0,
	64, 0, 86, 131, 103, 79, 121, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 859, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 101, 0, 0, 0, 73, 0, 106, 99,
	0, 0, 100, 105, 88, 113, 102, 119, 125, 126,
	111, 124, 66, 117, 110, 92, 82, 83, 65, 0,
	104, 76, 80, 75, 97, 114, 115, 74, 132, 69,
	123, 68, 70, 122, 96, 112, 118, 93, 90, 67,
	116, 91, 89, 84, 78, 0, 0, 0, 109, 120,
	133, 0, 98, 127, 128, 129, 130, 95, 71, 81,
	107, 77, 0, 0, 0, 0, 85, 0, 87, 0,
	0, 108, 94, 0, 0, 0, 64, 0, 86, 131,
	103, 79, 121, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 437, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 0, 101, 0,
	0, 0, 73, 0, 106, 99, 0, 0, 100, 105,
	88, 113, 102, 119, 125, 126, 111, 124, 66, 117,
	110, 92, 82, 83, 65, 0, 104, 76, 80, 75,
	97, 114, 115, 74, 132, 69, 123, 68, 70, 122,
	96, 112, 118, 93, 90, 67, 116, 91, 89, 84,
	78, 0, 0, 0, 109, 120, 133, 0, 0, 127,
	128, 129, 130, 95, 71, 81, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 64, 0, 86, 131, 103, 79, 121, 412,
	77, 0, 0, 0, 0, 85, 0, 87, 0, 0,
	108, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 101, 0, 0,
	0, 73, 0, 106, 99, 0, 0, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	195, 0, 0, 109, 120, 133, 0, 98, 127, 128,
	129, 130, 95, 71, 81, 107, 77, 0, 0, 0,
	0, 85, 0, 87, 0, 0, 108, 94, 0, 0,
	0, 64, 0, 86, 131, 103, 79, 121, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 101, 0, 0, 0, 73, 0, 106,
	99, 0, 0, 100, 105, 88, 113, 102, 119, 125,
	126, 111, 124, 66, 117, 110, 92, 82, 83, 65,
	0, 104, 76, 80, 75, 97, 114, 115, 74, 132,
	69, 123, 68, 70, 122, 96, 112, 118, 93, 90,
	67, 116, 91, 89, 84, 78, 0, 0, 0, 109,
	120, 133, 0, 98, 127, 128, 129, 130, 95, 71,
	81, 107, 77, 0, 0, 0, 0, 85, 0, 87,
	0, 0, 108, 94, 0, 0, 0, 64, 0, 86,
	131, 103, 79, 121, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 146, 0, 0, 0, 0, 101,
	0, 0, 0, 73, 0, 106, 99, 0, 0, 100,
	105, 88, 113, 102, 119, 125, 126, 111, 124, 66,
	117, 110, 92, 82, 83, 65, 0, 104, 76, 80,
	75, 97, 114, 115, 74, 132, 69, 123, 68, 70,
	122, 96, 112, 118, 93, 90, 67, 116, 91, 89,
	84, 78, 0, 0, 0, 109, 120, 133, 0, 98,
	127, 128, 129, 130, 95, 71, 81, 107, 77, 0,
	0, 0, 0, 85, 0, 87, 0, 0, 108, 94,
	0, 0, 0, 64, 0, 86, 131, 103, 79, 121,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 101, 0, 0, 0, 73,
	0, 106, 99, 0, 0, 100, 105, 88, 113, 102,
	119, 125, 126, 111, 124, 66, 117, 110, 92, 82,
	83, 65, 0, 104, 76, 80, 75, 97, 114, 115,
	74, 132, 69, 123, 68, 70, 122, 96, 112, 118,
	93, 90, 67, 116, 91, 89, 84, 78, 0, 0,
	0, 109, 120, 133, 0, 98, 127, 128, 129, 130,
	95, 71, 81, 107, 77, 0, 0, 0, 0, 85,
	0, 87, 0, 0, 108, 94, 0, 0, 0, 64,
	0, 86, 131, 103, 79, 121, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 101, 0, 0, 0, 73, 0, 106, 99, 0,
	0, 100, 105, 88, 113, 102, 119, 125, 126, 111,
	124, 66, 117, 110, 92, 82, 83, 65, 0, 104,
	76, 80, 75, 97, 114, 115, 74, 132, 69, 123,
	68, 70, 122, 96, 112, 118, 93, 90, 67, 116,
	91, 89, 84, 78, 0, 0, 0, 109, 120, 133,
	0, 98, 127, 128, 129, 130, 95, 71, 81, 107,
	77, 0, 0, 0, 0, 85, 0, 87, 0, 0,
	108, 94, 0, 0, 0, 64, 0, 86, 131, 103,
	79, 121, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 101, 0, 0,
	0, 73, 0, 106, 99, 0, 0, 100, 105, 88,
	113, 102, 119, 125, 126, 111, 124, 66, 117, 110,
	92, 82, 83, 65, 0, 104, 76, 80, 75, 97,
	114, 115, 74, 132, 69, 123, 68, 70, 122, 96,
	112, 118, 93, 90, 67, 116, 91, 89, 84, 78,
	0, 0, 0, 109, 120, 133, 0, 98, 127, 128,
	129, 130, 95, 71, 81, 107, 77, 0, 0, 0,
	0, 85, 0, 87, 0, 0, 108, 94, 0, 0,
	0, 64, 0, 86, 131, 103, 79, 121, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 101, 0, 0, 0, 73, 0, 106,
	99, 0, 0, 100, 105, 88, 113, 102, 119, 125,
	126, 111, 124, 66, 117, 110, 92, 82, 83, 65,
	0, 104, 76, 80, 75, 97, 114, 115, 74, 132,
	69, 123, 68, 205, 122, 96, 112, 118, 93, 90,
	67, 116, 91, 89, 84, 78, 0, 0, 0, 109,
	120, 133, 0, 0, 127, 128, 129, 130, 206, 204,
	203, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 86,
	131, 103, 79, 121,
}
var yyPact = [...]int{

	1330, -1000, -156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 698, 726, -1000,
	-1000, -1000, -1000, -1000, 503, 5661, 21, 54, 33, 7616,
	53, 185, 8114, -1000, -1000, -1000, -1000, -1000, 501, -1000,
	-1000, -1000, -1000, -1000, 693, 696, 512, 679, 591, -1000,
	23, 6763, 7450, 8280, -1000, 322, 46, 8114, -131, 16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 29, 8114, -1000, 8114, 13, 306,
	13, 8114, -1000, 75, -1000, -1000, -1000, 8114, 304, 628,
	30, 2702, 2702, 2702, 2702, -29, 2702, 2702, 541, -1000,
	-1000, -1000, -1000, 2702, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 326, 632, 4734, 4734, 698, -1000, 501, -1000,
	-1000, -1000, 625, -1000, -1000, 182, 7284, 475, 702, -1000,
	-1000, -1000, 665, 6234, 6597, 8114, 496, -1000, 384, 7948,
	3120, -1000, -1000, -1000, -1000, 622, -1000, 121, -1000, 74,
	-1000, -1000, 430, -1000, 1478, 302, 2702, 24, 8114, 140,
	8114, 2702, 25, 8114, 658, 540, 8114, -1000, 3747, -1000,
	2702, 2702, 2702, 2702, 2702, 2702, 2702, 2702, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2702, 2702, -1000, -1000, 8114, -1000,
	-1000, -1000, -1000, 721, 97, 274, -1000, 4734, 1168, 464,
	464, -1000, -1000, 65, -1000, -1000, 5110, 5110, 5110, 5110,
	5110, 5110, 5110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 464, 73, -1000,
	4537, 464, 464, 464, 464, 464, 464, 4734, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 462, -1000, 293, 693, 326, 591, 6400, 576, -1000,
	-1000, 0, 8114, -1000, 7948, 6763, 6763, 6763, 6763, 6763,
	-1000, 585, 582, -1000, 571, 563, 554, 8114, -1000, 424,
	326, 6234, 87, 464, -1000, 7095, -1000, -1000, 0, 6763,
	8114, -1000, -1000, 7948, 384, -1000, -1000, -1000, -1000, 4734,
	3538, 2284, 160, 186, -97, -1000, -1000, 468, -1000, 468,
	468, 468, 468, -77, -77, -77, -77, -1000, -1000, -1000,
	-1000, -1000, 500, -1000, 468, 468, 468, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 499, 499, 499, 473, 473,
	497, -1000, 8114, -1000, 657, 76, -1000, 8114, -1000, -1000,
	8114, 2702, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 602, 4734, 4734,
	344, 4734, 4734, 112, 5110, 232, 132, 5110, 5110, 5110,
	5110, 5110, 5110, 5110, 5110, 5110, 5110, 5110, 5110, 5110,
	5110, 5110, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 294, -1000, 501, 607, 607, 81, 81, 81, 81,
	81, 81, 5298, 3944, 3538, 414, 217, 4537, 4338, 4338,
	4734, 4734, 4338, 685, 124, 217, 7782, -1000, 326, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4338, 4338, 4338, 4338,
	4734, -1000, -1000, -1000, 632, -1000, 685, 697, -1000, 614,
	610, 4338, -1000, 494, 464, -1000, 486, 702, 515, 523,
	962, -1000, -1000, -1000, -1000, 581, -1000, 579, -1000, -1000,
	-1000, -1000, -1000, 326, -1000, 44, 43, 42, 7782, -1000,
	713, 461, -1000, -1000, -1000, 217, -1000, 72, -1000, 458,
	2075, -1000, -1000, -1000, -1000, -1000, -1000, 490, 649, 146,
	292, -1000, -1000, 630, -1000, 164, -108, -1000, -1000, 234,
	-77, -77, -1000, -1000, 80, 618, 80, 80, 80, 267,
	-1000, -1000, -1000, -1000, 230, -1000, -1000, -1000, 227, -1000,
	522, 7782, 2702, -1000, -1000, 145, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -3, -1000,
	2702, -1000, 595, 112, 155, -1000, -1000, 298, -1000, -1000,
	217, 217, 1322, -1000, -1000, -1000, -1000, 232, 5110, 5110,
	5110, 28, 1322, 1305, 596, 1020, 81, 150, 150, 123,
	123, 123, 123, 123, 211, 211, -1000, -1000, -1000, 326,
	-1000, -1000, -1000, 326, 4338, 456, -1000, -1000, 5495, 70,
	464, 4734, -1000, 392, 392, 270, 259, 392, 4338, 204,
	-1000, 4734, 326, -1000, 392, 326, 392, 392, -1000, -1000,
	8114, -1000, -1000, -1000, -1000, 452, 520, 7948, 464, -1000,
	6046, 7782, 698, 4734, -1000, -1000, 4734, 489, -1000, 4734,
	-1000, -1000, -1000, -1000, 464, 464, 464, 375, -1000, 698,
	-1000, 3329, 2284, -1000, 2284, 7782, -1000, 291, -1000, -1000,
	517, 22, -1000, -1000, -1000, 381, 80, 80, -1000, 276,
	163, -1000, -1000, -1000, 412, -1000, 446, 407, 8114, -1000,
	-1000, -1000, 8114, -1000, -1000, -1000, -1000, -1000, 7782, -1000,
	-1000, -1000, -1000, -1000, -1000, 28, 1322, 1273, -1000, 5110,
	5110, -1000, -1000, 392, 4338, -1000, -1000, 6929, -1000, -1000,
	2911, 4338, 217, -1000, -1000, 139, 277, 139, -139, 455,
	126, -1000, 4734, 355, -1000, -1000, -1000, -1000, -1000, -1000,
	713, 6763, -1000, 651, 380, 396, -1000, -1000, 4141, 326,
	390, 69, 375, 693, 217, 217, 7782, 217, 7782, 7782,
	7782, 5858, 7782, 693, -1000, 2075, -1000, 373, -1000, 468,
	-1000, -93, 719, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 263, 207, -1000, 200, 2702,
	-1000, -1000, 653, -1000, 5110, 1322, 1322, -1000, -1000, -1000,
	-1000, 68, 326, 326, 468, 468, -1000, 468, 473, -1000,
	468, -41, 468, -59, 326, 326, 464, -136, -1000, 217,
	4734, 711, 398, 648, -1000, 464, -1000, -1000, 557, 7782,
	7782, -1000, -1000, 360, -1000, 301, 301, 301, 87, -1000,
	-1000, -1000, 7782, -1000, 120, -1000, -120, -1000, 348, 334,
	-1000, 464, 1322, 2493, -1000, -1000, -1000, 50, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5110, 326, 257, 217,
	701, 695, 718, -1000, 464, -1000, 501, 63, -1000, 7782,
	-1000, -1000, -1000, -1000, -1000, -1000, 162, 647, -1000, 633,
	-1000, -1000, -1000, -16, -1000, -1000, -1000, 2, -1000, -1000,
	-1000, 4734, 4734, 7948, 396, 326, 7782, -1000, -1000, 241,
	-1000, -1000, 288, -1000, 7782, 326, 20, -147, 217, 394,
	384, -1000, -1000, -1000, -1000, -16, 608, -1000, 594, -143,
	-151, -1000, -19, -1000, 589, -1000, -22, -145, 464, -149,
	4922, -153, 1080, 326, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 910, 24, 602, 908, 907, 906, 905, 903, 902,
	900, 898, 895, 894, 892, 887, 886, 878, 876, 873,
	87, 872, 870, 869, 44, 868, 56, 867, 866, 29,
	54, 22, 26, 162, 865, 19, 74, 53, 864, 41,
	862, 861, 860, 854, 55, 851, 846, 1095, 844, 843,
	10, 23, 842, 841, 839, 838, 51, 46, 835, 832,
	829, 828, 827, 825, 36, 3, 5, 4, 11, 824,
	439, 6, 823, 34, 821, 819, 818, 816, 20, 814,
	43, 812, 17, 42, 811, 16, 50, 33, 14, 8,
	810, 48, 809, 569, 808, 115, 807, 806, 804, 800,
	792, 791, 30, 300, 909, 28, 27, 789, 788, 1162,
	32, 49, 18, 787, 40, 38, 21, 785, 782, 15,
	780, 778, 777, 776, 775, 774, 138, 773, 772, 771,
	9, 35, 770, 769, 57, 13, 768, 764, 763, 762,
	45, 761, 37, 760, 759, 758, 31, 12, 757, 7,
	756, 755, 2, 750, 747, 738, 0, 82, 737, 735,
	165,
}
var yyR1 = [...]int{

	0, 154, 155, 155, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 158, 158, 42, 42, 86, 86, 9,
	9, 9, 90, 90, 90, 108, 108, 117, 117, 10,
	10, 10, 10, 15, 143, 144, 144, 144, 140, 120,
	120, 120, 123, 123, 121, 121, 121, 121, 121, 121,
	121, 122, 122, 122, 122, 122, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 139, 139, 126, 126, 134,
	134, 135, 135, 135, 132, 132, 133, 133, 136, 136,
	136, 127, 127, 127, 127, 127, 127, 129, 129, 137,
	137, 130, 130, 130, 131, 131, 138, 138, 138, 138,
	138, 128, 128, 141, 148, 148, 148, 148, 142, 142,
	150, 150, 149, 145, 145, 145, 146, 146, 146, 147,
	147, 147, 11, 11, 11, 11, 11, 153, 151, 151,
	152, 152, 12, 13, 13, 13, 14, 14, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 118, 118, 118, 18, 18, 19, 19, 19,
	19, 19, 159, 20, 21, 21, 22, 22, 22, 26,
	26, 26, 24, 24, 25, 25, 31, 31, 30, 30,
	32, 32, 32, 32, 107, 107, 107, 106, 106, 34,
	34, 35, 35, 36, 36, 37, 37, 37, 49, 49,
	85, 85, 87, 87, 38, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 113, 113, 112, 112, 112, 111,
	111, 43, 43, 43, 45, 44, 44, 44, 44, 46,
	46, 48, 48, 47, 47, 50, 50, 50, 50, 51,
	51, 33, 33, 33, 33, 33, 33, 33, 94, 94,
	53, 53, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 63, 63, 63, 63, 63, 63, 54, 54,
	54, 54, 54, 54, 54, 29, 29, 64, 64, 64,
	70, 65, 65, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 61, 61, 61, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 60, 60, 60, 60,
	60, 60, 60, 60, 160, 160, 62, 62, 62, 62,
	27, 27, 27, 27, 27, 116, 116, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	74, 74, 28, 28, 72, 72, 73, 75, 75, 71,
	71, 71, 56, 56, 56, 56, 56, 56, 56, 56,
	58, 58, 58, 76, 76, 77, 77, 78, 78, 79,
	79, 80, 81, 81, 81, 82, 82, 82, 82, 83,
	83, 83, 55, 55, 55, 55, 55, 55, 84, 84,
	84, 84, 88, 88, 66, 66, 68, 68, 67, 69,
	89, 89, 91, 92, 92, 95, 95, 96, 96, 93,
	93, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 98, 98, 98, 99, 99, 100, 100, 100,
	101, 101, 104, 104, 105, 105, 109, 109, 110, 110,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 156,
	157, 114, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 1, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 4, 4, 1, 3, 3, 8, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 4, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 4, 5, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 3, 4, 2, 4, 2, 2, 2,
	2, 3, 0, 1, 1, 2, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -154, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -156, 7,
	201, 52, -155, 214, -78, 14, -22, 5, -20, -159,
	-20, -20, -20, -20, -143, 52, -100, 118, 69, 116,
	122, -104, 55, -103, 207, 149, 143, 170, 162, 160,
	163, 189, 64, 127, 158, 154, 152, 26, 175, 212,
	153, 190, 147, 148, 174, 31, 209, 33, 135, 173,
	169, 172, 146, 168, 37, 188, 165, 155, 17, 130,
	133, 123, 137, 211, 151, 134, 129, 191, 36, 179,
	145, 141, 166, 136, 156, 157, 171, 144, 167, 138,
	180, 213, 164, 161, 142, 139, 140, 184, 185, 186,
	187, 210, 159, 181, -93, 118, 120, 116, 116, 117,
	118, 116, -47, -109, 55, -103, 118, 116, 105, 163,
	111, 182, 117, 31, 137, -118, 116, 183, 140, 184,
	185, 186, 187, 55, 191, 190, -109, -114, -114, -114,
	-114, -114, -2, -82, 16, 15, -5, -3, -156, 6,
	19, 20, -26, 38, 39, -21, -93, -35, -36, -37,
	-38, -49, -70, -156, -47, 10, -42, -47, -89, -117,
	-90, -91, 191, 190, 189, 163, 188, -71, -104, -109,
	55, -103, -144, -140, 55, 117, -47, 201, -96, 121,
	116, -47, -47, -95, 121, 55, -95, -47, 108, -47,
	55, 29, 193, 55, 137, 116, 138, 118, -115, -156,
	-105, -104, -102, 70, 21, 23, 177, 73, 105, 15,
	74, 104, 202, 111, 46, 194, 195, 192, 193, 182,
	28, 9, 24, 125, 20, 98, 113, 77, 78, 128,
	22, 126, 68, 18, 49, 10, 12, 13, 121, 120,
	89, 117, 44, 7, 107, 25, 86, 40, 27, 42,
	87, 16, 196, 197, 30, 206, 132, 100, 47, 34,
	71, 66, 50, 69, 14, 45, 88, 114, 201, 43,
	6, 205, 29, 124, 41, 116, 183, 76, 119, 67,
	5, 122, 8, 48, 51, 198, 199, 200, 32, 75,
	11, -115, -115, -115, 141, 142, -115, -115, 50, -115,
	-157, 54, -83, 18, 30, -33, -52, 71, -57, 28,
	22, -56, -53, -71, -69, -70, 105, 106, 94, 95,
	102, 72, 107, -61, -59, -60, -62, 57, 56, 65,
	58, 59, 60, 61, 66, 67, 68, -104, -109, -67,
	-156, 42, 43, 202, 203, 206, 204, 74, 32, 192,
	200, 199, 198, 196, 197, 194, 195, 121, 193, 100,
	201, -79, -80, -33, -78, -2, -20, 34, -24, 20,
	63, -48, 25, -47, 29, 53, -43, -45, -44, -46,
	40, 44, 46, 41, 42, 43, 47, -113, 21, -35,
	-2, -156, -112, 133, -111, 21, -109, 57, -47, -158,
	53, 10, 51, 53, -89, -108, -105, 57, 29, 79,
	108, 54, 53, -120, -123, -125, -124, -121, -122, 160,
	161, 105, 164, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 127, 156, 157, 158, 159, 143, 144,
	145, 146, 147, 148, 149, 151, 152, 153, 154, 155,
	55, -115, 118, -47, 71, -47, -115, 119, -47, 22,
	50, -47, -110, -109, -102, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -47, 8, 89, 70, 69,
	86, 53, 17, -33, -54, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-94, -156, -70, -156, 109, 110, -57, -57, -57, -57,
	-57, -57, -57, -156, 108, -65, -33, -156, -156, -156,
	-156, -156, -156, -156, -74, -33, -156, -160, -156, -160,
	-160, -160, -160, -160, -160, -160, -156, -156, -156, -156,
	53, -81, 23, 24, -82, -157, -26, -58, -104, 58,
	61, -25, 41, -86, 133, -47, -89, -36, -37, -37,
	-36, -37, 40, 40, 40, 45, 40, 45, 40, -44,
	-109, -157, -157, -2, -50, 48, 120, 49, -156, -111,
	-86, -35, -47, -91, -114, -33, -105, -110, -102, -145,
	-146, -147, -105, 57, 58, -140, -141, -148, 123, 122,
	-142, 117, 27, -136, 66, 71, -132, 180, -126, 52,
	-126, -126, -126, -126, -130, 163, -130, -130, -130, 52,
	-126, -126, -126, -134, 52, -134, -134, -135, 52, -135,
	-101, 51, -47, 22, -97, 114, -153, 112, 177, 163,
	64, 28, 113, 14, 202, 133, 213, 55, 134, -47,
	-47, -115, 36, -33, -33, -63, 66, 71, 67, 68,
	-33, -33, -57, -64, -67, -70, 62, 89, 87, 88,
	73, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -116, 55, 57, 55,
	-56, -56, -104, -31, 20, -30, -32, 96, -33, -109,
	-105, 53, -157, -30, -30, -33, -33, -30, -24, -72,
	-73, 75, -104, -157, -30, -31, -30, -30, -80, -83,
	-92, 18, 10, 32, 32, -30, -55, 29, 32, -2,
	-156, -156, -51, 11, -40, -39, 50, 51, -41, 50,
	-39, 40, 40, -157, 117, 117, 117, -87, -104, -51,
	-51, 108, 53, -147, 79, 52, 27, -142, 55, 55,
	-127, 28, 66, -133, 181, 58, -130, -130, -131, 104,
	29, -131, -131, -131, -139, 57, 58, 58, 50, -104,
	-115, -114, -98, -99, 119, 21, 117, 27, 133, -115,
	37, 66, 67, 68, -64, -57, -57, -57, -29, 128,
	70, -157, -157, -30, 53, -107, -106, 21, -104, 57,
	108, -156, -33, -157, -157, 53, 51, 21, -157, -30,
	-75, -73, 77, -33, -157, -157, -157, -157, -157, -47,
	-34, 10, -88, 50, -89, -66, -68, -67, -156, -2,
	-84, -104, -87, -78, -33, -33, 52, -33, -156, -156,
	-156, -157, 53, -78, -105, -146, -147, -150, -149, -104,
	55, -129, 50, 57, 58, 59, 66, 192, 54, -131,
	-131, 55, 55, 105, 54, 53, 53, 54, 53, -47,
	-47, -114, -104, -29, 70, -57, -57, -157, -32, -106,
	96, -110, -31, -119, 105, 160, 127, 158, 154, 174,
	165, 179, 156, 180, -116, -119, 207, -78, 78, -33,
	76, -51, -35, 26, -88, 53, -157, -157, -157, 53,
	108, -157, -82, -85, -104, -85, -85, -85, -112, -104,
	-82, 54, 53, -126, -137, 177, 8, 57, 58, 58,
	-115, 25, -57, 108, -157, -157, -126, -126, -126, -135,
	-126, 148, -126, 148, -157, -157, -156, -28, 205, -33,
	-76, 12, 27, -68, 32, -2, -156, -104, -104, 53,
	54, -157, -157, -157, -50, -149, -138, 123, 27, 122,
	192, 54, 54, -156, 96, -130, 55, -57, -157, 57,
	-77, 13, 15, 8, -66, -2, 108, -104, -128, 64,
	27, 27, -151, -152, 133, -27, 89, 210, -33, -65,
	-89, -157, -104, 57, -157, 53, -104, -157, 208, 47,
	211, -152, 32, 37, 209, 212, 135, 37, 136, 210,
	-156, 211, -57, 132, 212, -157, -157,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 427, 0, 202,
	202, 202, 202, 202, 0, 487, 469, 0, 0, 0,
	0, 192, 196, 661, 661, 661, 661, 661, 0, 28,
	29, 659, 1, 3, 435, 0, 0, 206, 209, 204,
	469, 0, 0, 0, 49, 0, 0, 649, 0, 467,
	488, 489, 492, 493, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 0, 0, 470, 0, 465, 0,
	465, 0, 167, 273, 496, 497, 649, 0, 0, 0,
	0, 662, 662, 662, 662, 0, 662, 662, 185, 187,
	188, 189, 190, 662, 193, 194, 195, 197, 198, 199,
	200, 201, 22, 439, 0, 0, 427, 24, 0, 202,
	207, 208, 212, 210, 211, 203, 0, 0, 231, 233,
	234, 235, 254, 0, 256, 0, 0, 35, 39, 0,
	0, 460, -2, -2, -2, 594, -2, 0, 409, 0,
	-2, -2, 0, 55, 0, 0, 662, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 166, 0, 168,
	662, 662, 662, 662, 662, 662, 662, 662, 177, 663,
	664, 494, 495, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 178, 179, 180, 662, 662, 182, 183, 0, 191,
	23, 660, 18, 0, 0, 436, 281, 0, 286, 288,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 350, 351, 352, 353, 412, 413, 414,
	415, 416, 417, 418, 419, 290, 291, 409, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 374,
	374, 374, 374, 374, 374, 374, 374, 0, 0, 0,
	0, 428, 429, 432, 435, 22, 209, 0, 214, 213,
	205, 37, 0, 272, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 264, 0, 0, 0, 0, 255, 0,
	22, 0, 275, 624, 257, 0, 259, 260, 37, 0,
	0, 33, 34, 0, 40, 661, 45, 46, 43, 0,
	0, 143, 0, 108, 104, 60, 61, 97, 63, 97,
	97, 97, 97, 121, 121, 121, 121, 89, 90, 91,
	92, 93, 0, 76, 97, 97, 97, 80, 64, 65,
	66, 67, 68, 69, 70, 99, 99, 99, 101, 101,
	490, 51, 0, 53, 0, 0, 155, 0, 163, 466,
	0, 662, 274, 498, 499, 169, 170, 171, 172, 173,
	174, 175, 176, 181, 184, 186, 440, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 309, 310, 311, 312, 313, 314,
	287, 0, 301, 0, 0, 0, 343, 344, 345, 346,
	347, 348, 0, 216, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 212, 0, 401, 0, 366, 0, 367,
	368, 369, 370, 371, 372, 373, 0, 216, 0, 0,
	0, 431, 433, 434, 439, 25, 212, 0, 420, 0,
	0, 0, 215, 0, 0, 271, 279, 232, 250, 252,
	0, 247, 262, 263, 265, 0, 267, 0, 269, 270,
	236, 237, 320, 22, 238, 0, 0, 0, 0, 258,
	279, 279, 36, 461, 41, 462, 410, 0, -2, 54,
	144, 146, 149, 150, 151, 56, 57, 0, 0, 0,
	0, 138, 139, 111, 109, 0, 106, 105, 62, 0,
	121, 121, 83, 84, 124, 0, 124, 124, 124, 0,
	77, 78, 79, 71, 0, 72, 73, 74, 0, 75,
	0, 0, 662, 468, 661, 482, 156, 471, 472, 473,
	474, 475, 476, 477, 478, 479, 480, 481, 0, 162,
	662, 165, 0, 282, 283, 285, 302, 0, 304, 306,
	437, 438, 292, 293, 317, 318, 319, 0, 0, 0,
	0, 315, 297, 0, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 342, 385, 386, 0,
	340, 341, 349, 0, 0, 217, 218, 220, 224, 0,
	410, 0, 458, 0, 0, 0, 0, 0, 0, 407,
	404, 0, 0, 375, 0, 0, 0, 0, 430, 19,
	0, 463, 464, 421, 422, 229, 452, 0, 0, -2,
	0, 0, 427, 0, 244, 251, 0, 0, 245, 0,
	246, 266, 268, -2, 0, 0, 0, 0, 242, 427,
	32, 0, 0, 147, 0, 0, 134, 0, 136, 137,
	117, 0, 110, 59, 107, 0, 124, 124, 85, 0,
	0, 86, 87, 88, 0, 95, 0, 0, 0, 491,
	52, 152, 0, 661, 483, 484, 485, 486, 0, 164,
	441, 303, 305, 307, 294, 315, 298, 0, 295, 0,
	0, 289, 354, 0, 0, 221, 225, 0, 227, 228,
	0, 216, 322, 357, 358, 0, 0, 0, 0, 427,
	0, 405, 0, 0, 365, 376, 377, 378, 379, 20,
	279, 0, 26, 0, 452, 442, 454, 456, 0, 22,
	0, 448, 0, 435, 280, 248, 0, 253, 0, 0,
	0, 256, 0, 435, 411, 145, 148, 0, 140, 97,
	135, 119, 0, 112, 113, 114, 115, 116, 98, 81,
	82, 125, 122, 123, 94, 0, 0, 102, 0, 662,
	153, 154, 0, 296, 0, 316, 299, 355, 219, 226,
	222, 0, 0, 0, 97, 97, 390, 97, 101, 393,
	97, 395, 97, 398, 0, 0, 0, 402, 364, 408,
	0, 423, 230, 0, 27, 0, 457, -2, 0, 0,
	0, 38, 30, 0, 240, 0, 0, 0, 275, 243,
	31, 133, 0, 142, 126, 120, 0, 96, 0, 0,
	50, 0, 300, 0, 356, 359, 387, 121, 391, 392,
	394, 396, 397, 399, 361, 360, 0, 0, 0, 406,
	425, 0, 0, 455, 0, -2, 0, 450, 449, 0,
	249, 276, 277, 278, 239, 141, 131, 0, 128, 130,
	118, 100, 103, 0, 223, 388, 389, 380, 363, 403,
	21, 0, 0, 0, 445, 22, 0, 241, 58, 0,
	127, 129, 0, 158, 0, 0, 0, 0, 426, 424,
	453, -2, 451, 132, 157, 0, 0, 362, 0, 0,
	0, 159, 0, 381, 0, 384, 0, 382, 0, 0,
	0, 0, 0, 0, 383, 160, 161,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 214,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:277
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:282
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:287
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:306
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:364
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:396
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:410
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:415
		{
			yyVAL.partitions = nil
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:419
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:429
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:454
		{
			yyVAL.str = SessionStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:458
		{
			yyVAL.str = GlobalStr
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:469
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:474
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:478
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:513
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:692
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:697
		{
			yyVAL.optVal = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:710
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:728
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:745
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:776
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.optVal = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:797
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:802
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:819
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.str = ""
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:833
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.colKeyOpt = colKey
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:864
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:961
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:966
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:975
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 157:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:981
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:997
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 161:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1013
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1021
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1026
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = SessionStr
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = GlobalStr
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &OtherRead{}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &OtherRead{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &OtherRead{}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1197
		{
			setAllowComments(yylex, true)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.bytes2 = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = UnionStr
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = UnionAllStr
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.str = UnionDistinctStr
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = SQLCacheStr
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.str = DistinctStr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = StraightJoinHint
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.selectExprs = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1417
		{
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1423
		{
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.empty = struct{}{}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.empty = struct{}{}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.str = JoinStr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = JoinStr
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.str = JoinStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.str = StraightJoinStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = LeftJoinStr
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = LeftJoinStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.str = RightJoinStr
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = RightJoinStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = NaturalJoinStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.indexHints = nil
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 300:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = IsNullStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = IsNotNullStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = IsTrueStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = IsNotTrueStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.str = IsFalseStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.str = IsNotFalseStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = EqualStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = LessThanStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.str = GreaterThanStr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.str = LessEqualStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.str = GreaterEqualStr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = NotEqualStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 356:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 362:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = BooleanModeStr
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.str = QueryExpansionStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = nil
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.str = string("")
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &NullVal{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.exprs = nil
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = nil
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.orderBy = nil
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = AscScr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = AscScr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.str = DescScr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.limit = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.str = ForUpdateStr
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.str = ShareModeStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2311
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.updateExprs = nil
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.byt = 0
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.byt = 1
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = IgnoreStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2687
		{
			decNesting(yylex)
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2692
		{
			forceEOF(yylex)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2697
		{
			forceEOF(yylex)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2701
		{
			forceEOF(yylex)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
