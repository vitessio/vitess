//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 15,
	5, 22,
	-2, 260,
	-1, 206,
	103, 327,
	-2, 323,
	-1, 207,
	103, 328,
	-2, 324,
	-1, 424,
	103, 330,
	-2, 326,
	-1, 569,
	5, 23,
	-2, 159,
	-1, 594,
	5, 23,
	-2, 279,
	-1, 711,
	5, 23,
	-2, 282,
}

const yyNprod = 442
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3817

var yyAct = [...]int{

	223, 367, 629, 523, 618, 207, 235, 309, 666, 490,
	643, 307, 617, 201, 677, 259, 524, 485, 38, 562,
	181, 505, 311, 488, 555, 520, 418, 423, 56, 454,
	282, 232, 287, 83, 630, 40, 234, 196, 174, 202,
	295, 33, 237, 43, 190, 225, 37, 366, 3, 15,
	82, 744, 199, 739, 487, 203, 743, 199, 732, 742,
	738, 184, 45, 46, 47, 48, 731, 621, 175, 176,
	177, 178, 660, 212, 478, 35, 479, 428, 478, 199,
	479, 199, 180, 185, 217, 199, 478, 209, 479, 211,
	74, 186, 718, 335, 334, 344, 345, 337, 338, 339,
	340, 341, 342, 343, 336, 315, 572, 346, 73, 312,
	74, 214, 544, 215, 533, 435, 532, 220, 546, 221,
	323, 322, 480, 531, 379, 210, 480, 411, 413, 433,
	76, 77, 78, 213, 480, 79, 346, 324, 75, 356,
	357, 682, 649, 481, 597, 566, 536, 481, 365, 303,
	299, 321, 322, 64, 438, 481, 324, 652, 655, 719,
	336, 624, 59, 346, 302, 216, 727, 506, 324, 580,
	730, 68, 63, 573, 335, 334, 344, 345, 337, 338,
	339, 340, 341, 342, 343, 336, 506, 305, 346, 55,
	323, 322, 228, 283, 35, 412, 289, 626, 323, 322,
	199, 52, 199, 545, 457, 543, 199, 324, 432, 434,
	431, 556, 728, 688, 199, 324, 692, 56, 306, 199,
	56, 222, 199, 218, 494, 199, 314, 461, 224, 186,
	284, 285, 292, 301, 446, 448, 449, 35, 300, 447,
	327, 459, 460, 458, 219, 436, 304, 49, 592, 51,
	326, 313, 722, 53, 316, 664, 437, 319, 58, 574,
	67, 65, 69, 548, 549, 550, 715, 224, 61, 39,
	368, 664, 224, 684, 224, 17, 354, 377, 339, 340,
	341, 342, 343, 336, 325, 57, 346, 62, 71, 66,
	60, 70, 56, 560, 224, 596, 224, 199, 323, 322,
	203, 560, 199, 323, 322, 199, 560, 409, 203, 419,
	56, 422, 421, 576, 224, 324, 425, 17, 199, 35,
	324, 199, 417, 392, 199, 56, 424, 415, 537, 408,
	396, 441, 443, 444, 17, 450, 451, 414, 406, 494,
	224, 420, 637, 187, 521, 455, 301, 402, 589, 301,
	429, 477, 521, 439, 318, 725, 440, 404, 632, 405,
	452, 35, 17, 18, 19, 20, 72, 493, 495, 56,
	704, 702, 456, 492, 724, 705, 703, 741, 35, 368,
	56, 508, 499, 500, 56, 21, 701, 35, 424, 560,
	700, 191, 192, 482, 483, 381, 382, 383, 384, 385,
	386, 387, 283, 737, 547, 195, 35, 510, 503, 442,
	41, 203, 194, 56, 288, 518, 517, 496, 522, 735,
	226, 525, 689, 513, 293, 497, 498, 286, 706, 535,
	672, 673, 227, 635, 56, 56, 530, 534, 590, 426,
	317, 539, 676, 509, 179, 511, 512, 337, 338, 339,
	340, 341, 342, 343, 336, 527, 519, 346, 188, 189,
	288, 182, 22, 23, 25, 24, 26, 695, 183, 540,
	516, 39, 231, 663, 455, 27, 28, 29, 515, 694,
	30, 31, 32, 260, 34, 42, 558, 419, 551, 200,
	679, 394, 395, 320, 39, 42, 56, 569, 570, 571,
	44, 456, 575, 36, 568, 1, 80, 675, 582, 294,
	583, 584, 585, 586, 561, 427, 581, 50, 34, 542,
	199, 541, 430, 208, 514, 34, 579, 593, 594, 595,
	528, 501, 393, 323, 322, 281, 368, 693, 662, 578,
	376, 559, 56, 199, 603, 504, 236, 199, 591, 598,
	324, 445, 587, 247, 244, 602, 246, 245, 577, 397,
	611, 403, 251, 250, 252, 253, 254, 255, 328, 56,
	256, 229, 410, 290, 492, 604, 667, 607, 257, 605,
	665, 606, 56, 613, 612, 616, 619, 620, 631, 424,
	625, 588, 659, 717, 615, 199, 623, 401, 193, 14,
	13, 54, 56, 56, 628, 56, 56, 56, 525, 636,
	56, 645, 646, 12, 11, 627, 647, 650, 651, 642,
	656, 657, 10, 654, 9, 8, 7, 204, 6, 5,
	4, 16, 633, 2, 0, 0, 661, 0, 0, 0,
	199, 680, 0, 638, 683, 0, 685, 686, 0, 0,
	0, 0, 0, 525, 258, 56, 0, 603, 0, 0,
	691, 0, 0, 34, 0, 0, 0, 696, 0, 698,
	199, 199, 199, 199, 0, 0, 0, 633, 709, 0,
	0, 199, 711, 707, 199, 0, 203, 681, 56, 714,
	56, 0, 0, 710, 716, 308, 0, 721, 308, 0,
	697, 197, 699, 205, 720, 368, 197, 633, 633, 633,
	633, 358, 359, 360, 361, 362, 363, 355, 729, 726,
	0, 633, 0, 0, 0, 0, 496, 0, 197, 736,
	197, 0, 733, 734, 197, 0, 0, 0, 0, 0,
	740, 364, 0, 0, 369, 370, 371, 372, 373, 374,
	375, 0, 378, 380, 380, 380, 380, 380, 380, 380,
	380, 388, 389, 390, 391, 668, 671, 672, 673, 669,
	0, 670, 674, 0, 407, 335, 334, 344, 345, 337,
	338, 339, 340, 341, 342, 343, 336, 0, 308, 346,
	310, 0, 0, 310, 0, 0, 0, 0, 0, 608,
	0, 453, 0, 308, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 335,
	334, 344, 345, 337, 338, 339, 340, 341, 342, 343,
	336, 0, 0, 346, 668, 671, 672, 673, 669, 34,
	670, 674, 0, 0, 723, 0, 0, 0, 0, 197,
	0, 297, 0, 369, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 398, 0, 0, 197, 0,
	0, 197, 204, 0, 197, 0, 0, 0, 0, 0,
	204, 557, 310, 310, 0, 0, 0, 0, 0, 526,
	0, 34, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 335, 334, 344, 345, 337, 338, 339, 340, 341,
	342, 343, 336, 308, 0, 346, 334, 344, 345, 337,
	338, 339, 340, 341, 342, 343, 336, 0, 0, 346,
	0, 0, 552, 553, 554, 0, 0, 0, 0, 0,
	0, 0, 484, 0, 310, 0, 197, 0, 205, 0,
	0, 297, 0, 502, 416, 0, 205, 507, 416, 64,
	0, 0, 0, 0, 0, 0, 0, 197, 59, 0,
	197, 0, 0, 197, 0, 64, 567, 68, 63, 563,
	0, 0, 0, 204, 59, 0, 529, 0, 0, 0,
	0, 0, 0, 68, 63, 55, 0, 0, 399, 0,
	0, 400, 0, 0, 0, 0, 0, 538, 310, 0,
	0, 55, 0, 565, 0, 599, 600, 601, 0, 491,
	416, 0, 0, 323, 322, 491, 491, 0, 0, 609,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 491, 491, 491, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 491, 0, 0, 205,
	0, 0, 0, 0, 58, 0, 67, 65, 69, 564,
	0, 173, 0, 634, 61, 0, 526, 0, 0, 639,
	58, 648, 67, 65, 69, 0, 0, 0, 308, 0,
	61, 57, 0, 62, 71, 66, 60, 70, 0, 0,
	0, 0, 653, 0, 0, 658, 0, 57, 0, 62,
	71, 66, 60, 70, 0, 310, 0, 0, 678, 0,
	0, 526, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 491, 564, 59, 0, 310, 0, 0, 634, 634,
	634, 634, 68, 63, 0, 622, 0, 0, 491, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 197,
	55, 0, 0, 0, 0, 640, 641, 0, 644, 644,
	644, 0, 0, 310, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 335, 334, 344, 345, 337, 338, 339,
	340, 341, 342, 343, 336, 491, 0, 346, 0, 0,
	0, 416, 491, 0, 0, 0, 0, 0, 310, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 67, 65, 69, 197, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 712, 0, 713, 0, 0, 57, 0, 62, 71,
	66, 60, 70, 0, 330, 0, 333, 0, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 352, 353, 197,
	331, 332, 329, 335, 334, 344, 345, 337, 338, 339,
	340, 341, 342, 343, 336, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	197, 197, 197, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 197, 205, 162, 149, 123, 164, 101,
	115, 172, 116, 117, 143, 89, 131, 64, 113, 0,
	104, 85, 110, 86, 102, 125, 59, 128, 100, 151,
	134, 170, 0, 138, 0, 68, 63, 0, 0, 127,
	156, 129, 148, 122, 144, 94, 137, 165, 114, 141,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 161, 112, 142, 84, 139, 0, 87,
	90, 171, 159, 107, 108, 0, 0, 0, 0, 0,
	0, 0, 126, 130, 145, 120, 0, 0, 0, 0,
	0, 0, 687, 0, 105, 0, 136, 0, 0, 0,
	91, 88, 124, 0, 0, 0, 93, 0, 106, 146,
	0, 157, 121, 173, 160, 119, 118, 163, 166, 155,
	103, 111, 58, 109, 67, 65, 69, 99, 158, 152,
	153, 154, 61, 0, 97, 98, 95, 96, 132, 133,
	167, 168, 169, 147, 92, 0, 0, 150, 135, 57,
	0, 62, 71, 66, 60, 70, 162, 149, 123, 164,
	101, 115, 172, 116, 117, 143, 89, 131, 64, 113,
	0, 104, 85, 110, 86, 102, 125, 59, 128, 100,
	151, 134, 170, 0, 138, 0, 68, 63, 0, 0,
	127, 156, 129, 148, 122, 144, 94, 137, 165, 114,
	141, 35, 0, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 161, 112, 142, 84, 139, 0,
	87, 90, 171, 159, 107, 108, 0, 0, 0, 0,
	0, 0, 0, 126, 130, 145, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 136, 0, 0,
	0, 91, 88, 124, 0, 0, 0, 93, 0, 106,
	146, 0, 157, 121, 173, 160, 119, 118, 163, 166,
	155, 103, 111, 58, 109, 67, 65, 69, 99, 158,
	152, 153, 154, 61, 0, 97, 98, 95, 96, 132,
	133, 167, 168, 169, 147, 92, 0, 0, 150, 135,
	57, 0, 62, 71, 66, 60, 70, 162, 149, 123,
	164, 101, 115, 172, 116, 117, 143, 89, 131, 64,
	113, 0, 104, 85, 110, 86, 102, 125, 59, 128,
	100, 151, 134, 170, 0, 138, 0, 68, 63, 0,
	0, 127, 156, 129, 148, 122, 144, 94, 137, 165,
	114, 141, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 161, 112, 142, 84, 139,
	0, 87, 90, 171, 159, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 126, 130, 145, 120, 0, 0,
	0, 0, 0, 0, 614, 0, 105, 0, 136, 0,
	0, 0, 91, 88, 124, 0, 0, 0, 93, 0,
	106, 146, 0, 157, 121, 173, 160, 119, 118, 163,
	166, 155, 103, 111, 58, 109, 67, 65, 69, 99,
	158, 152, 153, 154, 61, 0, 97, 98, 95, 96,
	132, 133, 167, 168, 169, 147, 92, 0, 0, 150,
	135, 57, 0, 62, 71, 66, 60, 70, 162, 149,
	123, 164, 101, 115, 172, 116, 117, 143, 89, 131,
	64, 113, 0, 104, 85, 110, 86, 102, 125, 59,
	128, 100, 151, 134, 170, 0, 138, 0, 68, 63,
	0, 0, 127, 156, 129, 148, 122, 144, 94, 137,
	165, 114, 141, 0, 0, 0, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 161, 112, 142, 84,
	139, 0, 87, 90, 171, 159, 107, 108, 0, 0,
	0, 0, 0, 0, 0, 126, 130, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 136,
	0, 0, 0, 91, 88, 124, 0, 0, 0, 93,
	0, 106, 146, 0, 157, 121, 173, 160, 119, 118,
	163, 166, 155, 103, 111, 58, 109, 67, 65, 69,
	99, 158, 152, 153, 154, 61, 0, 97, 98, 95,
	96, 132, 133, 167, 168, 169, 147, 92, 0, 0,
	150, 135, 57, 0, 62, 71, 66, 60, 70, 162,
	149, 123, 164, 101, 115, 172, 116, 117, 143, 89,
	131, 64, 113, 0, 104, 85, 110, 86, 102, 125,
	59, 128, 100, 151, 134, 170, 0, 138, 0, 68,
	63, 0, 0, 127, 156, 129, 148, 122, 144, 94,
	137, 165, 114, 141, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 161, 112, 142,
	84, 139, 0, 87, 90, 171, 159, 107, 108, 0,
	0, 0, 0, 0, 0, 0, 126, 130, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	136, 0, 0, 0, 91, 88, 124, 0, 0, 0,
	93, 0, 106, 146, 0, 157, 121, 173, 160, 119,
	118, 163, 166, 155, 103, 111, 58, 109, 67, 65,
	69, 99, 158, 152, 153, 154, 61, 0, 97, 98,
	95, 96, 132, 133, 167, 168, 169, 147, 92, 0,
	0, 150, 135, 57, 0, 62, 71, 66, 60, 70,
	162, 149, 123, 164, 101, 115, 172, 116, 117, 143,
	89, 131, 64, 113, 0, 104, 85, 110, 86, 102,
	125, 59, 128, 100, 151, 134, 170, 0, 138, 0,
	68, 63, 0, 0, 127, 156, 129, 148, 122, 144,
	94, 137, 165, 114, 141, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 161, 112,
	142, 84, 139, 0, 87, 90, 171, 159, 107, 108,
	0, 0, 0, 0, 0, 0, 0, 126, 130, 145,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 136, 0, 0, 0, 91, 88, 124, 0, 0,
	0, 93, 0, 106, 146, 0, 157, 121, 173, 160,
	119, 118, 163, 166, 155, 103, 111, 58, 109, 67,
	65, 69, 99, 158, 152, 153, 154, 61, 0, 97,
	98, 95, 96, 132, 133, 167, 168, 169, 147, 92,
	0, 0, 150, 135, 57, 0, 62, 71, 66, 60,
	70, 162, 149, 123, 164, 101, 115, 172, 116, 117,
	143, 89, 131, 64, 113, 0, 104, 85, 110, 86,
	102, 125, 59, 128, 100, 151, 134, 170, 0, 138,
	0, 68, 63, 0, 0, 127, 156, 129, 148, 122,
	144, 94, 137, 165, 114, 141, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 161,
	112, 142, 84, 139, 0, 87, 90, 171, 159, 107,
	108, 0, 0, 0, 0, 0, 0, 0, 126, 130,
	145, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 136, 0, 0, 0, 91, 88, 124, 0,
	0, 0, 93, 0, 106, 146, 0, 157, 121, 173,
	160, 119, 118, 163, 166, 155, 103, 111, 58, 109,
	67, 65, 69, 99, 158, 152, 153, 154, 61, 0,
	97, 98, 95, 96, 132, 133, 167, 168, 169, 147,
	92, 0, 0, 150, 135, 57, 0, 62, 71, 66,
	60, 70, 64, 0, 0, 486, 0, 233, 0, 0,
	0, 59, 0, 0, 0, 0, 268, 0, 0, 0,
	68, 63, 0, 0, 0, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 35, 0, 0, 206, 251,
	250, 252, 253, 254, 255, 0, 0, 256, 248, 249,
	0, 0, 230, 242, 0, 267, 344, 345, 337, 338,
	339, 340, 341, 342, 343, 336, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 239, 240, 489, 0, 0,
	0, 279, 0, 241, 0, 0, 238, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 277, 0, 0, 0, 0, 0, 58, 0, 67,
	65, 69, 0, 0, 0, 0, 0, 61, 0, 269,
	278, 275, 276, 273, 274, 272, 271, 270, 280, 263,
	264, 266, 0, 265, 57, 0, 62, 71, 66, 60,
	70, 64, 0, 0, 0, 0, 233, 0, 0, 0,
	59, 0, 0, 0, 0, 268, 0, 0, 0, 68,
	63, 0, 0, 0, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 35, 0, 0, 206, 251, 250,
	252, 253, 254, 255, 0, 0, 256, 248, 249, 0,
	0, 230, 242, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 489, 0, 0, 0,
	279, 0, 241, 0, 0, 238, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	277, 0, 0, 0, 0, 0, 58, 0, 67, 65,
	69, 0, 0, 0, 0, 0, 61, 0, 269, 278,
	275, 276, 273, 274, 272, 271, 270, 280, 263, 264,
	266, 0, 265, 57, 0, 62, 71, 66, 60, 70,
	64, 0, 0, 0, 0, 233, 0, 0, 0, 59,
	0, 0, 0, 0, 268, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 224, 206, 251, 250, 252,
	253, 254, 255, 0, 0, 256, 248, 249, 0, 0,
	230, 242, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 0, 0, 0, 0, 279,
	0, 241, 0, 0, 238, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 277,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 269, 278, 275,
	276, 273, 274, 272, 271, 270, 280, 263, 264, 266,
	17, 265, 57, 0, 62, 71, 66, 60, 70, 0,
	0, 64, 0, 0, 0, 0, 233, 0, 0, 0,
	59, 0, 0, 0, 0, 268, 0, 0, 0, 68,
	63, 0, 0, 0, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 35, 0, 0, 206, 251, 250,
	252, 253, 254, 255, 0, 0, 256, 248, 249, 0,
	0, 230, 242, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 0, 0, 0, 0,
	279, 0, 241, 0, 0, 238, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	277, 0, 0, 0, 0, 0, 58, 0, 67, 65,
	69, 0, 0, 0, 0, 0, 61, 0, 269, 278,
	275, 276, 273, 274, 272, 271, 270, 280, 263, 264,
	266, 0, 265, 57, 0, 62, 71, 66, 60, 70,
	64, 0, 0, 0, 0, 233, 0, 0, 0, 59,
	0, 0, 0, 0, 268, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 206, 251, 250, 252,
	253, 254, 255, 0, 0, 256, 248, 249, 0, 0,
	230, 242, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 0, 0, 0, 0, 279,
	0, 241, 0, 0, 238, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 277,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 269, 278, 275,
	276, 273, 274, 272, 271, 270, 280, 263, 264, 266,
	64, 265, 57, 0, 62, 71, 66, 60, 70, 59,
	0, 0, 0, 0, 268, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 206, 251, 250, 252,
	253, 254, 255, 0, 0, 256, 248, 249, 0, 0,
	0, 242, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 0, 0, 0, 0, 279,
	0, 241, 0, 0, 238, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 277,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 269, 278, 275,
	276, 273, 274, 272, 271, 270, 280, 263, 264, 266,
	64, 265, 57, 0, 62, 71, 66, 60, 70, 59,
	0, 0, 0, 0, 268, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 35, 0, 0, 206, 251, 250, 252,
	253, 254, 255, 0, 0, 256, 17, 0, 0, 0,
	0, 242, 0, 267, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 239, 240, 68, 63, 0, 0, 279,
	0, 241, 0, 0, 238, 243, 0, 0, 0, 0,
	35, 0, 0, 198, 0, 0, 173, 0, 0, 277,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 269, 278, 275,
	276, 273, 274, 272, 271, 270, 280, 263, 264, 266,
	17, 265, 57, 0, 62, 71, 66, 60, 70, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 173, 0, 0, 0, 0, 0, 68,
	63, 0, 58, 0, 67, 65, 69, 0, 0, 0,
	0, 0, 61, 0, 35, 0, 0, 55, 64, 0,
	0, 0, 296, 0, 0, 0, 0, 59, 0, 57,
	0, 62, 71, 66, 60, 70, 68, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 298, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 173, 0, 68,
	63, 0, 0, 0, 0, 0, 58, 0, 67, 65,
	69, 0, 0, 0, 35, 0, 61, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 57, 173, 62, 71, 66, 60, 70,
	59, 0, 0, 58, 0, 67, 65, 69, 0, 68,
	63, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 565,
	57, 0, 62, 71, 66, 60, 70, 173, 0, 0,
	0, 0, 0, 0, 64, 0, 58, 0, 67, 65,
	69, 0, 0, 59, 0, 0, 61, 0, 0, 0,
	0, 0, 68, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 62, 71, 66, 60, 70,
	198, 0, 298, 0, 0, 0, 0, 173, 0, 0,
	0, 0, 0, 0, 64, 0, 58, 0, 67, 65,
	69, 0, 291, 59, 0, 0, 61, 0, 0, 0,
	0, 0, 68, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 62, 71, 66, 60, 70,
	198, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	173, 0, 0, 0, 0, 0, 59, 0, 0, 58,
	0, 67, 65, 69, 0, 68, 63, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 64, 0, 57, 0, 62, 71,
	66, 60, 70, 59, 0, 0, 0, 0, 64, 0,
	173, 0, 68, 63, 0, 0, 0, 59, 0, 58,
	0, 67, 65, 69, 0, 0, 68, 63, 0, 61,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 57, 0, 62, 71,
	66, 60, 70, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 67, 65, 69, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	173, 62, 71, 66, 60, 70, 0, 0, 0, 58,
	0, 67, 65, 69, 173, 0, 0, 0, 0, 61,
	0, 0, 0, 58, 0, 67, 65, 69, 0, 0,
	0, 0, 0, 61, 0, 0, 57, 0, 62, 71,
	66, 60, 70, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 62, 71, 66, 60, 70,
}
var yyPact = [...]int{

	356, -1000, -110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 457, 480, -1000, -1000, -1000,
	-1000, -1000, 136, -5, 27, 19, 24, 2236, -1000, -1000,
	-1000, -1000, -1000, 490, 269, -1000, -1000, -1000, 445, 453,
	445, 337, 439, 354, -1000, -25, 3661, 479, 3647, -29,
	13, 3661, -70, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 22, 3661, -1000, 3661, -32, 170, -32, 3661,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 337,
	176, 402, 2933, 2933, 402, -1000, -1000, -1000, -1000, -1000,
	394, -1000, -1000, 135, 3567, 395, 3371, 47, -1000, -1000,
	3661, 182, -1000, 89, -1000, 46, -1000, -1000, 3661, 120,
	165, 1481, -4, 3661, 1481, -9, 3661, 418, 305, 3661,
	-1000, -1000, -1000, -1000, -1000, -1000, 485, 66, 233, -1000,
	2933, 1207, -1000, 187, -1000, 35, -1000, -1000, 3193, 3193,
	3193, 3193, 3193, 3193, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 187, 45, -1000,
	2794, 187, 187, 187, 187, 187, 187, 2933, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 272, -1000, 468, -1000, 354, 942, 307, -1000, -1000,
	328, 3661, -1000, 3647, 80, -1000, 3517, -1000, -1000, 2085,
	476, 3647, 2933, 1934, 1481, 417, -41, -1000, -1000, -1000,
	-1000, -1000, 3661, 101, -1000, 3661, -1000, -1000, 3661, 1481,
	-1000, 374, 2933, 2933, 172, 2933, 2933, 74, 3063, 144,
	158, 3193, 3193, 3193, 3193, 3193, 3193, 3193, 3193, 3193,
	3193, 3193, 3193, 3193, 3193, 3193, 21, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 269, 508, 508, 36, 36,
	36, 36, 36, 1117, 2375, 1934, 176, 288, 133, 2794,
	2514, 2514, 2933, 2933, 3610, 440, 115, 133, 3610, -1000,
	176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2514, 2514,
	2514, 2514, 2933, -1000, -1000, -1000, 440, 460, -1000, 385,
	384, 2514, -1000, 303, 3647, 187, -1000, 3334, -1000, 298,
	-1000, 11, 4, 2, -1000, -1000, -1000, -1000, 457, 2933,
	-1000, 133, -1000, 43, -1000, -1000, -1000, 279, 3610, 1481,
	-1000, 91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 368, 74, 86, -1000, -1000, 201, -1000, -1000,
	133, 133, -1000, 689, -1000, -1000, -1000, -1000, 144, 3193,
	3193, 3193, 88, 689, 815, 2358, 829, 36, 186, 186,
	63, 63, 63, 63, 63, 357, 357, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 176, 2514, 250, -1000, -1000,
	958, 42, 187, -1000, 2933, -1000, 176, 242, 242, 55,
	238, 262, -1000, 2514, 96, -1000, 2933, 176, -1000, 242,
	176, 242, 242, -1000, 3661, -1000, -1000, -1000, -1000, 338,
	-1000, 412, 295, 197, -1000, -1000, 2653, 176, 244, 41,
	457, 187, 187, 187, 445, 133, 1783, 3661, -1000, -1000,
	-1000, 3661, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 88, 689, 733, -1000, 3193, 3193, -1000, 242,
	2514, -1000, -1000, 3464, -1000, -1000, 1632, 2514, 133, -1000,
	-1000, -1000, 21, 21, 21, -82, 3610, 255, 87, -1000,
	2933, 125, -1000, -1000, -1000, -1000, -1000, -1000, 476, 3414,
	406, -1000, 187, -1000, -1000, 311, 3610, 3610, 445, 3610,
	3610, 3610, -1000, -1000, 1481, -1000, -1000, -1000, 3193, 689,
	689, -1000, -1000, -1000, -1000, 39, 176, 176, 25, 176,
	176, 187, -1000, -75, -1000, 133, 2933, 461, 204, 726,
	-1000, -1000, -1000, 421, 3250, 482, -1000, 187, -1000, 269,
	38, -1000, -1000, 222, -1000, 222, 222, -1000, 689, 1330,
	-1000, -1000, -1000, 157, -1000, 393, -1000, -1000, 3193, 176,
	161, 133, 466, 452, 3414, 3414, 3414, 3414, -1000, 351,
	347, -1000, 332, 331, 389, 3661, -1000, 220, 3250, 3647,
	197, 176, 3610, -1000, 3610, -1000, -1000, -1000, 215, 21,
	7, -1000, -1000, -1000, 2933, 2933, 726, 203, 795, -1000,
	-1000, -1000, -1000, 335, -1000, 316, -1000, -1000, -1000, -1000,
	182, -1000, -1000, -1000, 33, 156, -1000, 176, 20, -95,
	133, 173, 2933, 2933, -1000, -1000, -1000, 390, 176, -1000,
	367, -91, -101, 133, 133, 21, -1000, -1000, 341, -1000,
	-1000, -93, -97, -103, -1000,
}
var yyPgo = [...]int{

	0, 633, 47, 49, 631, 41, 630, 629, 628, 626,
	625, 624, 622, 614, 613, 600, 599, 43, 598, 410,
	32, 597, 44, 593, 592, 24, 54, 17, 23, 9,
	591, 14, 2, 34, 588, 580, 8, 576, 37, 573,
	358, 572, 10, 26, 571, 31, 568, 561, 36, 472,
	559, 557, 556, 554, 553, 551, 29, 1, 3, 15,
	16, 546, 42, 6, 545, 21, 540, 539, 538, 537,
	18, 535, 30, 532, 20, 45, 531, 530, 25, 13,
	39, 524, 366, 165, 523, 522, 521, 519, 517, 515,
	22, 5, 578, 7, 19, 514, 654, 27, 40, 509,
	507, 38, 11, 4, 12, 506, 505, 503, 483, 0,
	500, 124,
}
var yyR1 = [...]int{

	0, 106, 107, 107, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	4, 4, 5, 5, 6, 6, 7, 8, 9, 10,
	10, 10, 10, 11, 11, 11, 11, 12, 13, 13,
	13, 14, 105, 105, 105, 15, 16, 16, 16, 16,
	16, 110, 17, 18, 18, 19, 19, 19, 22, 22,
	22, 20, 20, 21, 21, 27, 27, 26, 26, 28,
	28, 28, 28, 95, 95, 95, 94, 94, 30, 30,
	31, 31, 32, 32, 33, 33, 33, 40, 34, 34,
	34, 34, 100, 100, 99, 99, 99, 98, 98, 35,
	35, 35, 35, 36, 36, 36, 36, 37, 37, 39,
	39, 38, 38, 41, 41, 41, 41, 42, 42, 43,
	43, 29, 29, 29, 29, 29, 29, 45, 45, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 55, 55, 55, 55, 55, 55, 46, 46, 46,
	46, 46, 46, 46, 25, 25, 56, 56, 56, 62,
	57, 57, 103, 103, 103, 103, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 53, 53, 53, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 52, 52, 52,
	52, 52, 52, 52, 52, 111, 111, 54, 54, 54,
	54, 23, 23, 23, 23, 23, 104, 104, 104, 104,
	104, 104, 104, 104, 66, 66, 24, 24, 64, 64,
	65, 67, 67, 63, 63, 63, 48, 48, 48, 48,
	48, 48, 48, 50, 50, 50, 68, 68, 69, 69,
	70, 70, 71, 71, 72, 73, 73, 73, 74, 74,
	74, 74, 75, 75, 75, 76, 76, 47, 47, 47,
	47, 47, 47, 77, 77, 77, 77, 78, 78, 58,
	58, 60, 60, 59, 61, 79, 79, 80, 81, 81,
	83, 83, 84, 84, 82, 82, 85, 85, 85, 85,
	85, 85, 85, 86, 86, 86, 87, 87, 88, 88,
	88, 89, 89, 92, 92, 93, 93, 96, 96, 97,
	97, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 108, 109, 101, 102,
	102, 102,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 7, 10,
	3, 3, 1, 3, 6, 7, 8, 7, 3, 5,
	8, 4, 6, 6, 7, 7, 4, 5, 4, 5,
	5, 3, 1, 1, 1, 3, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	3, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 2, 4, 5,
	7, 2, 4, 6, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 1, 3, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -106, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -3, -4, 6, 7, 8,
	9, 29, 106, 107, 109, 108, 110, 119, 120, 121,
	124, 125, 126, -5, -108, 50, -107, 156, -70, 14,
	-70, -19, 5, -17, -110, -17, -17, -17, -17, 111,
	-88, 113, 65, 117, -92, 53, -91, 149, 122, 26,
	154, 132, 151, 36, 17, 125, 153, 124, 35, 126,
	155, 152, -82, 113, 115, 111, 111, 112, 113, 111,
	-105, 53, -90, -91, 66, 21, 23, 69, 101, 15,
	70, 100, 144, 106, 45, 136, 137, 134, 135, 127,
	28, 9, 24, 120, 20, 94, 108, 73, 74, 123,
	22, 121, 64, 18, 48, 10, 12, 13, 116, 115,
	85, 112, 43, 7, 102, 25, 82, 39, 27, 41,
	83, 16, 138, 139, 30, 148, 96, 46, 33, 67,
	62, 49, 65, 14, 44, 84, 109, 143, 42, 6,
	147, 29, 129, 130, 131, 119, 40, 111, 128, 72,
	114, 63, 5, 117, 8, 47, 118, 140, 141, 142,
	31, 71, 11, 113, -101, -101, -101, -101, -101, -19,
	-2, -74, 16, 15, -74, -5, -3, 6, 19, 20,
	-22, 37, 38, -18, -82, -40, -38, -96, 53, -91,
	10, -79, -80, -63, -92, -96, 53, -91, -84, 116,
	112, -38, 143, 111, -38, -38, -83, 116, 53, -83,
	-38, -101, -5, -109, 52, -75, 18, 30, -29, -44,
	67, -49, -45, 22, -48, -63, -61, -62, 101, 90,
	91, 98, 68, 102, -53, -51, -52, -54, 63, 64,
	55, 54, 56, 57, 58, 59, 62, -92, -96, -59,
	-108, 41, 42, 144, 145, 148, 146, 70, 31, 134,
	142, 141, 140, 138, 139, 136, 137, 116, 135, 96,
	143, -71, -72, -29, -75, -17, 33, -20, 20, 61,
	-39, 25, -38, 29, -99, -98, 21, -96, 55, 103,
	-38, 51, 75, 103, -38, 67, 53, -102, -108, -93,
	-92, -90, 113, -38, -102, 114, -38, 22, 49, -38,
	8, 85, 66, 65, 82, 51, 17, -29, -46, 85,
	67, 83, 84, 69, 87, 86, 97, 90, 91, 92,
	93, 94, 95, 96, 88, 89, 100, 75, 76, 77,
	78, 79, 80, 81, -62, -108, 104, 105, -49, -49,
	-49, -49, -49, -49, -108, 103, -2, -57, -29, -108,
	-108, -108, -108, -108, -108, -108, -66, -29, -108, -111,
	-108, -111, -111, -111, -111, -111, -111, -111, -108, -108,
	-108, -108, 51, -73, 23, 24, -22, -50, -92, 56,
	59, -21, 40, -47, 29, 31, -2, -108, -38, -79,
	-41, 47, 115, 48, -98, -97, -96, -90, -43, 11,
	-80, -29, -93, -97, -90, -102, 22, -89, 118, -38,
	-85, 109, 107, 28, 108, 14, 144, 155, 53, -38,
	-38, -102, 35, -29, -29, -55, 62, 67, 63, 64,
	-29, -29, -45, -49, -56, -59, -62, 60, 85, 83,
	84, 69, -49, -49, -49, -49, -49, -49, -49, -49,
	-49, -49, -49, -49, -49, -49, -49, -103, 53, 55,
	101, 122, -48, -48, -92, -27, 20, -26, -28, 92,
	-29, -96, -93, -109, 51, -109, -2, -26, -26, -29,
	-29, -76, -92, -20, -64, -65, 71, -92, -109, -26,
	-27, -26, -26, -72, -81, 18, 10, 31, 31, -26,
	-78, 49, -79, -58, -60, -59, -108, -2, -77, -92,
	-43, 112, 112, 112, -70, -29, 103, 49, -92, -102,
	-101, -86, -87, 114, 21, 112, 27, 36, 62, 63,
	64, -56, -49, -49, -49, -25, 123, 66, -109, -26,
	51, -95, -94, 21, -92, 55, 103, -108, -29, -109,
	-109, -109, 51, 118, 21, -109, 51, -26, -67, -65,
	73, -29, -109, -109, -109, -109, -109, -38, -30, 10,
	26, -78, 51, -109, -109, -109, 51, 103, -70, -108,
	-108, -108, -74, -93, -38, -38, -101, -25, 66, -49,
	-49, -109, -28, -94, 92, -97, -27, -104, -103, -104,
	-104, 149, -92, -70, 74, -29, 72, -43, -31, -32,
	-33, -34, -40, -62, -108, 27, -60, 31, -2, -108,
	-92, -92, -74, -42, -92, -42, -42, -102, -49, 103,
	-109, -109, 132, -108, -103, 133, -109, -109, -108, -24,
	147, -29, -68, 12, 51, -35, -36, -37, 39, 43,
	45, 40, 41, 42, 46, -100, 21, -31, -108, 8,
	-58, -2, 103, -109, 51, -109, -109, 92, 56, 29,
	-49, -109, 55, -69, 13, 15, -32, -33, -32, -33,
	39, 39, 39, 44, 39, 44, 39, -36, -96, -109,
	-79, -109, -92, -92, -109, 51, -103, -23, 85, 152,
	-29, -57, 49, 49, 39, 39, -103, 133, 56, -109,
	150, 46, 153, -29, -29, 29, -109, 36, 151, 154,
	-103, 36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, -2, 260, 51, 51, 51,
	51, 51, 318, 304, 0, 0, 0, 0, 438, 438,
	438, 438, 438, 0, 0, 436, 1, 3, 268, 0,
	268, 0, 55, 58, 53, 304, 0, 0, 0, 302,
	0, 434, 0, 319, 320, 323, 324, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 435, 0, 0, 305, 0, 300, 0, 300, 0,
	438, 42, 43, 44, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 434, 46, 47, 48, 49, 50, 0,
	0, 272, 0, 0, 272, 21, 22, 51, 56, 57,
	61, 59, 60, 52, 0, 0, 94, 111, 327, 328,
	0, 28, 295, 0, 243, 0, -2, -2, 0, 0,
	0, 439, 0, 0, 439, 0, 0, 0, 0, 0,
	41, 45, 20, 23, 437, 16, 0, 0, 269, 121,
	0, 126, 129, 0, 166, 167, 168, 169, 0, 0,
	0, 0, 0, 0, 191, 192, 193, 194, 127, 128,
	246, 247, 248, 249, 250, 251, 252, 243, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 215,
	215, 215, 215, 215, 215, 215, 215, 0, 0, 0,
	0, 261, 262, 265, 17, 58, 0, 63, 62, 54,
	0, 0, 110, 0, 113, 95, 0, 97, 98, 0,
	119, 0, 0, 0, 439, 0, 321, 31, 440, 441,
	325, 326, 0, 0, 36, 0, 38, 301, 0, 439,
	273, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 148, 149,
	150, 151, 152, 153, 140, 0, 0, 0, 185, 186,
	187, 188, 189, 0, 65, 0, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 61, 0, 235, 0, 207,
	0, 208, 209, 210, 211, 212, 213, 214, 0, 65,
	0, 0, 0, 264, 266, 267, 61, 0, 253, 0,
	0, 0, 64, 287, 0, 0, 278, 0, 109, 119,
	87, 0, 0, 0, 96, 112, 329, 330, 260, 0,
	296, 297, 244, 0, -2, 29, 303, 0, 0, 439,
	438, 313, 306, 307, 308, 309, 310, 311, 312, 37,
	39, 40, 0, 122, 123, 125, 141, 0, 143, 145,
	270, 271, 130, 131, 132, 156, 157, 158, 0, 0,
	0, 0, 154, 136, 0, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 184, 162, 163,
	164, 165, 182, 183, 190, 0, 0, 66, 67, 69,
	73, 0, 244, 159, 0, 293, 0, 0, 0, 0,
	0, 0, 275, 0, 241, 238, 0, 0, 216, 0,
	0, 0, 0, 263, 0, 298, 299, 254, 255, 78,
	24, 0, 287, 277, 289, 291, 0, 0, 0, 283,
	260, 0, 0, 0, 268, 120, 0, 0, 322, 32,
	33, 0, 438, 314, 315, 316, 317, 274, 142, 144,
	146, 133, 154, 137, 0, 134, 0, 0, 195, 0,
	0, 70, 74, 0, 76, 77, 0, 65, 161, -2,
	198, 199, 0, 0, 0, 0, 0, 260, 0, 239,
	0, 0, 206, 217, 218, 219, 220, 18, 119, 0,
	0, 25, 0, 292, -2, 0, 0, 0, 268, 0,
	0, 0, 27, 245, 439, 34, 35, 135, 0, 155,
	138, 196, 68, 75, 71, 0, 0, 0, 226, 0,
	0, 0, 276, 236, 205, 242, 0, 256, 79, 80,
	82, 83, 84, 92, 0, 0, 290, 0, 281, 0,
	285, 284, 26, 0, 117, 0, 0, 30, 139, 0,
	197, 200, 227, 0, 231, 0, 201, 202, 0, 0,
	0, 240, 258, 0, 0, 0, 0, 0, 99, 0,
	0, 102, 0, 0, 0, 0, 93, 0, 0, 0,
	280, 0, 0, 114, 0, 115, 116, 72, 0, 0,
	221, 204, 237, 19, 0, 0, 81, 88, 0, 91,
	100, 101, 103, 0, 105, 0, 107, 108, 85, 86,
	288, -2, 286, 118, 228, 0, 232, 0, 0, 0,
	259, 257, 0, 0, 104, 106, 229, 0, 0, 203,
	0, 0, 0, 89, 90, 0, 233, 222, 0, 225,
	230, 223, 0, 0, 224,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			uni := yyDollar[1].selStmt.(*Union)
			uni.OrderBy = yyDollar[2].orderBy
			uni.Limit = yyDollar[3].limit
			uni.Lock = yyDollar[4].str
			yyVAL.selStmt = uni
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:245
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 19:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:252
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:258
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:262
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:270
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:274
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:291
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:303
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:309
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:315
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:321
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:325
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:330
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:334
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:344
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:349
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:360
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:366
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:374
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:379
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:389
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:395
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:399
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:415
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:421
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:427
		{
			yyVAL.statement = &Other{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:431
		{
			yyVAL.statement = &Other{}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:435
		{
			yyVAL.statement = &Other{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:439
		{
			yyVAL.statement = &Other{}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:443
		{
			yyVAL.statement = &Other{}
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:448
		{
			setAllowComments(yylex, true)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:452
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:458
		{
			yyVAL.bytes2 = nil
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:462
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:468
		{
			yyVAL.str = UnionStr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:472
		{
			yyVAL.str = UnionAllStr
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:476
		{
			yyVAL.str = UnionDistinctStr
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:481
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:485
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:489
		{
			yyVAL.str = SQLCacheStr
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:494
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:498
		{
			yyVAL.str = DistinctStr
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:503
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:507
		{
			yyVAL.str = StraightJoinHint
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:512
		{
			yyVAL.selectExprs = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:516
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:522
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:526
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:532
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:536
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:540
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:544
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:553
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:557
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:564
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:569
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:573
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:579
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:583
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:593
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:597
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:601
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:607
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:628
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:632
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:637
		{
			yyVAL.empty = struct{}{}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:639
		{
			yyVAL.empty = struct{}{}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:642
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:646
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:650
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:657
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:663
		{
			yyVAL.str = JoinStr
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:667
		{
			yyVAL.str = JoinStr
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:671
		{
			yyVAL.str = JoinStr
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:675
		{
			yyVAL.str = StraightJoinStr
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:681
		{
			yyVAL.str = LeftJoinStr
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:685
		{
			yyVAL.str = LeftJoinStr
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:689
		{
			yyVAL.str = RightJoinStr
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:693
		{
			yyVAL.str = RightJoinStr
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:699
		{
			yyVAL.str = NaturalJoinStr
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:703
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:713
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:717
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:723
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:727
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:732
		{
			yyVAL.indexHints = nil
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:736
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:750
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:754
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:759
		{
			yyVAL.expr = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:763
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:769
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:773
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:777
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:781
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:785
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:789
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:795
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:799
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:805
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:809
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:813
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:817
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:821
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:825
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:829
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:833
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:841
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:845
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:849
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:855
		{
			yyVAL.str = IsNullStr
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:859
		{
			yyVAL.str = IsNotNullStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:863
		{
			yyVAL.str = IsTrueStr
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:867
		{
			yyVAL.str = IsNotTrueStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:871
		{
			yyVAL.str = IsFalseStr
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:875
		{
			yyVAL.str = IsNotFalseStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:881
		{
			yyVAL.str = EqualStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:885
		{
			yyVAL.str = LessThanStr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:889
		{
			yyVAL.str = GreaterThanStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:893
		{
			yyVAL.str = LessEqualStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:897
		{
			yyVAL.str = GreaterEqualStr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:901
		{
			yyVAL.str = NotEqualStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:905
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:910
		{
			yyVAL.expr = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:914
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:920
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:924
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:928
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:934
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:940
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:944
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:968
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:972
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:976
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:980
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:984
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:988
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:992
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:996
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1000
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1004
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1008
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1012
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1016
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1020
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1024
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1028
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1032
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1036
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1040
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1044
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1048
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1056
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1070
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1074
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1078
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1096
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1100
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1104
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1114
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1118
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1122
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1126
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1130
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 203:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1134
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1138
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1142
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1146
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1156
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1160
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1164
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1168
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1173
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1178
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1188
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1210
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1220
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1224
		{
			yyVAL.str = BooleanModeStr
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1228
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1232
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1236
		{
			yyVAL.str = QueryExpansionStr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1243
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1247
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1251
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1255
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1259
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1263
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1267
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1271
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.expr = nil
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1285
		{
			yyVAL.str = string("")
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1289
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1295
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1299
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1305
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1310
		{
			yyVAL.expr = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1314
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1320
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1324
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1328
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1334
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1338
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1342
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1346
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1350
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1354
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1358
		{
			yyVAL.expr = &NullVal{}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1364
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1373
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1377
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1382
		{
			yyVAL.exprs = nil
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1386
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1391
		{
			yyVAL.expr = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1395
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1400
		{
			yyVAL.orderBy = nil
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1404
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1410
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1414
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1420
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1425
		{
			yyVAL.str = AscScr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1429
		{
			yyVAL.str = AscScr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1433
		{
			yyVAL.str = DescScr
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1438
		{
			yyVAL.limit = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1442
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1446
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1450
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1455
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1459
		{
			yyVAL.str = ForUpdateStr
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1463
		{
			yyVAL.str = ShareModeStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1469
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1473
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1486
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1490
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1494
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1499
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1503
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1507
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1514
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1518
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1522
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1526
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1531
		{
			yyVAL.updateExprs = nil
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1535
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1541
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1545
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1551
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1555
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1561
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1567
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1577
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1581
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1587
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1596
		{
			yyVAL.byt = 0
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1598
		{
			yyVAL.byt = 1
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1601
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1603
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1606
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1608
		{
			yyVAL.str = IgnoreStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1612
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1614
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1616
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1618
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1620
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1622
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1624
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1627
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1629
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1631
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1635
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1637
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1640
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1642
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1644
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1647
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1649
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1653
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1657
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1664
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1670
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1674
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1681
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1811
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1820
		{
			decNesting(yylex)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1825
		{
			forceEOF(yylex)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1830
		{
			forceEOF(yylex)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1834
		{
			forceEOF(yylex)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1838
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
