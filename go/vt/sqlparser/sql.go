//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const SHOW = 57457
const DESCRIBE = 57458
const EXPLAIN = 57459
const DATE = 57460
const ESCAPE = 57461
const REPAIR = 57462
const OPTIMIZE = 57463
const TRUNCATE = 57464
const MAXVALUE = 57465
const PARTITION = 57466
const REORGANIZE = 57467
const LESS = 57468
const THAN = 57469
const PROCEDURE = 57470
const TRIGGER = 57471
const VINDEX = 57472
const VINDEXES = 57473
const STATUS = 57474
const VARIABLES = 57475
const BEGIN = 57476
const START = 57477
const TRANSACTION = 57478
const COMMIT = 57479
const ROLLBACK = 57480
const BIT = 57481
const TINYINT = 57482
const SMALLINT = 57483
const MEDIUMINT = 57484
const INT = 57485
const INTEGER = 57486
const BIGINT = 57487
const INTNUM = 57488
const REAL = 57489
const DOUBLE = 57490
const FLOAT_TYPE = 57491
const DECIMAL = 57492
const NUMERIC = 57493
const TIME = 57494
const TIMESTAMP = 57495
const DATETIME = 57496
const YEAR = 57497
const CHAR = 57498
const VARCHAR = 57499
const BOOL = 57500
const CHARACTER = 57501
const VARBINARY = 57502
const NCHAR = 57503
const TEXT = 57504
const TINYTEXT = 57505
const MEDIUMTEXT = 57506
const LONGTEXT = 57507
const BLOB = 57508
const TINYBLOB = 57509
const MEDIUMBLOB = 57510
const LONGBLOB = 57511
const JSON = 57512
const ENUM = 57513
const NULLX = 57514
const AUTO_INCREMENT = 57515
const APPROXNUM = 57516
const SIGNED = 57517
const UNSIGNED = 57518
const ZEROFILL = 57519
const DATABASES = 57520
const TABLES = 57521
const VITESS_KEYSPACES = 57522
const VITESS_SHARDS = 57523
const VITESS_TABLETS = 57524
const VSCHEMA_TABLES = 57525
const NAMES = 57526
const CHARSET = 57527
const GLOBAL = 57528
const SESSION = 57529
const CURRENT_TIMESTAMP = 57530
const DATABASE = 57531
const CURRENT_DATE = 57532
const CURRENT_TIME = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const UTC_DATE = 57536
const UTC_TIME = 57537
const UTC_TIMESTAMP = 57538
const REPLACE = 57539
const CONVERT = 57540
const CAST = 57541
const SUBSTR = 57542
const SUBSTRING = 57543
const GROUP_CONCAT = 57544
const SEPARATOR = 57545
const MATCH = 57546
const AGAINST = 57547
const BOOLEAN = 57548
const LANGUAGE = 57549
const WITH = 57550
const QUERY = 57551
const EXPANSION = 57552
const UNUSED = 57553

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 219,
	109, 544,
	-2, 540,
	-1, 220,
	109, 545,
	-2, 541,
	-1, 288,
	80, 688,
	-2, 46,
	-1, 289,
	80, 661,
	-2, 47,
	-1, 294,
	80, 648,
	-2, 506,
	-1, 296,
	80, 675,
	-2, 508,
	-1, 669,
	109, 547,
	-2, 543,
	-1, 862,
	5, 28,
	-2, 353,
	-1, 887,
	5, 27,
	-2, 482,
	-1, 1092,
	5, 28,
	-2, 483,
	-1, 1136,
	5, 27,
	-2, 485,
	-1, 1189,
	5, 28,
	-2, 486,
}

const yyPrivate = 57344

const yyLast = 9435

var yyAct = [...]int{

	250, 47, 610, 1098, 1180, 731, 224, 501, 249, 807,
	1007, 1031, 749, 500, 3, 1008, 804, 941, 764, 763,
	760, 890, 198, 548, 1004, 546, 192, 732, 801, 981,
	906, 854, 694, 704, 701, 944, 932, 293, 720, 671,
	434, 773, 895, 53, 797, 440, 287, 390, 47, 550,
	535, 446, 728, 222, 454, 836, 203, 207, 276, 285,
	52, 197, 280, 1208, 787, 1198, 1206, 1187, 1204, 808,
	193, 194, 195, 196, 1197, 275, 999, 1086, 394, 415,
	781, 57, 163, 159, 160, 161, 1152, 274, 923, 1036,
	1037, 1038, 780, 211, 1110, 1125, 788, 1041, 1039, 824,
	1186, 1075, 1073, 515, 191, 1205, 59, 60, 61, 62,
	63, 426, 427, 823, 403, 1167, 467, 466, 476, 477,
	469, 470, 471, 472, 473, 474, 475, 468, 1203, 1181,
	478, 965, 729, 1150, 750, 752, 404, 397, 157, 156,
	828, 157, 417, 226, 419, 609, 962, 905, 618, 822,
	904, 982, 964, 903, 392, 775, 400, 171, 1172, 158,
	703, 490, 491, 1095, 968, 870, 848, 643, 416, 418,
	162, 220, 458, 410, 1045, 761, 421, 421, 421, 421,
	984, 421, 421, 917, 422, 478, 640, 451, 421, 453,
	468, 1055, 952, 478, 893, 561, 1001, 819, 816, 817,
	613, 815, 76, 453, 47, 279, 168, 721, 751, 168,
	452, 451, 986, 921, 990, 788, 985, 443, 983, 487,
	950, 1175, 489, 988, 1046, 826, 829, 453, 1116, 414,
	1151, 1149, 987, 168, 168, 76, 1040, 989, 991, 168,
	448, 76, 1115, 936, 963, 442, 961, 774, 290, 499,
	1168, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	821, 514, 516, 516, 516, 516, 516, 516, 516, 516,
	524, 525, 526, 527, 820, 1185, 406, 407, 408, 935,
	924, 547, 775, 721, 951, 877, 444, 678, 50, 956,
	953, 946, 947, 954, 949, 948, 432, 155, 674, 825,
	1191, 676, 677, 675, 642, 955, 1132, 695, 777, 696,
	391, 958, 827, 778, 646, 647, 866, 177, 865, 469,
	470, 471, 472, 473, 474, 475, 468, 867, 168, 478,
	168, 1113, 933, 1033, 452, 451, 168, 452, 451, 396,
	641, 187, 433, 168, 1003, 918, 560, 76, 76, 76,
	76, 453, 76, 76, 453, 910, 452, 451, 273, 76,
	452, 451, 845, 846, 847, 488, 517, 518, 519, 520,
	521, 522, 523, 453, 774, 452, 451, 453, 810, 772,
	771, 661, 663, 664, 697, 76, 662, 1194, 433, 1140,
	1178, 172, 453, 624, 421, 1140, 433, 174, 1140, 1141,
	217, 623, 421, 213, 180, 176, 1107, 1106, 1026, 433,
	1156, 398, 399, 421, 421, 421, 421, 421, 421, 421,
	421, 1094, 433, 1155, 279, 1052, 1051, 421, 421, 614,
	178, 1048, 1049, 182, 466, 476, 477, 469, 470, 471,
	472, 473, 474, 475, 468, 168, 1083, 478, 627, 1048,
	1047, 23, 168, 168, 168, 860, 433, 21, 76, 532,
	433, 173, 612, 76, 607, 648, 625, 706, 433, 1042,
	672, 290, 568, 567, 611, 885, 412, 405, 886, 391,
	175, 181, 183, 184, 185, 186, 891, 971, 189, 188,
	47, 1005, 54, 706, 891, 1090, 669, 532, 50, 557,
	1054, 892, 650, 872, 503, 892, 869, 23, 1050, 911,
	665, 860, 23, 202, 667, 713, 716, 708, 467, 466,
	476, 477, 469, 470, 471, 472, 473, 474, 475, 468,
	860, 860, 478, 280, 280, 280, 280, 280, 733, 1135,
	558, 559, 556, 532, 698, 699, 871, 891, 547, 868,
	753, 644, 531, 204, 50, 50, 280, 1120, 782, 50,
	725, 708, 802, 718, 1020, 76, 914, 896, 897, 1035,
	798, 168, 168, 76, 793, 168, 532, 792, 168, 65,
	805, 756, 168, 1005, 76, 76, 76, 76, 76, 76,
	76, 76, 735, 736, 746, 738, 937, 899, 76, 76,
	50, 754, 168, 437, 441, 673, 758, 755, 734, 621,
	430, 737, 656, 421, 743, 421, 768, 76, 902, 744,
	459, 168, 745, 421, 541, 542, 901, 76, 492, 493,
	494, 495, 496, 497, 498, 803, 471, 472, 473, 474,
	475, 468, 740, 668, 478, 789, 790, 791, 799, 800,
	741, 739, 208, 209, 502, 742, 783, 784, 785, 786,
	1202, 1196, 967, 513, 833, 709, 710, 1201, 447, 849,
	76, 717, 794, 795, 796, 843, 279, 279, 279, 279,
	279, 669, 445, 842, 672, 724, 76, 726, 727, 838,
	837, 279, 928, 239, 238, 241, 242, 243, 244, 279,
	435, 168, 240, 245, 168, 168, 168, 168, 168, 566,
	413, 920, 436, 1177, 1176, 850, 168, 1133, 915, 168,
	1088, 1121, 812, 168, 620, 545, 447, 168, 168, 888,
	889, 76, 205, 206, 199, 841, 1161, 200, 54, 76,
	649, 1160, 887, 840, 290, 248, 1123, 537, 540, 541,
	542, 538, 765, 539, 543, 892, 449, 1169, 876, 467,
	466, 476, 477, 469, 470, 471, 472, 473, 474, 475,
	468, 1111, 639, 478, 56, 58, 74, 908, 909, 555,
	900, 168, 912, 51, 76, 1, 76, 809, 940, 818,
	168, 1179, 1030, 168, 76, 770, 762, 705, 707, 389,
	64, 769, 1148, 1109, 855, 776, 922, 421, 927, 292,
	929, 930, 931, 723, 916, 395, 844, 779, 1034, 673,
	1174, 919, 571, 572, 570, 574, 573, 569, 668, 179,
	934, 286, 421, 544, 562, 450, 66, 960, 959, 814,
	486, 943, 839, 748, 291, 1012, 645, 439, 925, 926,
	1159, 1122, 957, 875, 512, 658, 659, 719, 225, 660,
	237, 670, 234, 859, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 874,
	236, 235, 651, 975, 974, 884, 460, 1010, 223, 47,
	215, 1006, 733, 278, 980, 1009, 528, 993, 733, 992,
	536, 534, 1011, 533, 1022, 1023, 1024, 502, 669, 283,
	711, 712, 898, 894, 277, 970, 1085, 1166, 1000, 1016,
	1014, 292, 292, 292, 292, 76, 292, 292, 655, 25,
	55, 1028, 1029, 292, 1015, 76, 210, 19, 18, 17,
	20, 16, 15, 14, 29, 13, 1043, 1044, 765, 12,
	11, 10, 1027, 9, 8, 7, 6, 5, 4, 456,
	201, 22, 2, 0, 0, 759, 0, 0, 0, 0,
	0, 1056, 280, 0, 0, 0, 0, 76, 76, 0,
	76, 0, 0, 0, 1058, 0, 0, 1061, 0, 0,
	0, 0, 1063, 942, 857, 0, 0, 1064, 858, 0,
	1084, 0, 0, 76, 0, 862, 863, 864, 0, 0,
	0, 168, 0, 0, 873, 1071, 0, 0, 0, 879,
	76, 880, 881, 882, 883, 0, 1100, 1101, 1102, 0,
	0, 1089, 292, 973, 0, 0, 0, 563, 1097, 0,
	0, 0, 0, 0, 0, 834, 835, 912, 441, 1103,
	1105, 0, 0, 0, 421, 996, 0, 0, 0, 0,
	76, 76, 0, 1068, 1069, 0, 1070, 0, 0, 1072,
	0, 1074, 1118, 0, 1119, 0, 0, 851, 852, 853,
	0, 0, 0, 76, 0, 76, 76, 0, 0, 0,
	0, 1010, 0, 0, 1137, 0, 765, 0, 765, 1009,
	0, 0, 0, 0, 0, 0, 1134, 1136, 0, 168,
	861, 0, 1112, 1108, 1114, 279, 1145, 76, 0, 1147,
	0, 0, 1158, 1146, 1157, 878, 0, 0, 0, 0,
	76, 168, 0, 1153, 1124, 1154, 1010, 76, 47, 292,
	76, 0, 0, 168, 1009, 0, 1170, 292, 0, 952,
	0, 1171, 0, 973, 0, 0, 979, 0, 292, 292,
	292, 292, 292, 292, 292, 292, 0, 0, 0, 1183,
	0, 0, 292, 292, 0, 1188, 733, 950, 0, 0,
	0, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 652, 76, 0, 76, 76, 76, 168, 76, 1200,
	76, 456, 1199, 1025, 292, 0, 1207, 0, 537, 540,
	541, 542, 538, 765, 539, 543, 0, 0, 896, 897,
	0, 0, 0, 0, 0, 76, 76, 76, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 0, 0, 942,
	765, 951, 0, 0, 700, 0, 956, 953, 946, 947,
	954, 949, 948, 1080, 714, 714, 977, 978, 0, 0,
	722, 0, 955, 0, 0, 0, 76, 76, 945, 994,
	995, 1065, 997, 998, 0, 281, 0, 714, 1067, 76,
	0, 1002, 0, 0, 0, 0, 438, 0, 0, 1076,
	1077, 1078, 76, 0, 1081, 0, 1017, 1018, 0, 0,
	1019, 0, 0, 1021, 0, 292, 0, 1091, 1092, 1093,
	165, 1096, 76, 292, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 190, 467, 466, 476, 477, 469,
	470, 471, 472, 473, 474, 475, 468, 0, 284, 478,
	0, 0, 0, 393, 76, 0, 214, 0, 166, 166,
	0, 0, 0, 76, 166, 0, 0, 0, 292, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 1131, 0, 23, 24, 48, 26, 27, 292,
	0, 0, 0, 0, 0, 0, 0, 1142, 1143, 1144,
	0, 0, 0, 42, 0, 0, 0, 1087, 28, 0,
	0, 423, 424, 425, 502, 428, 429, 0, 0, 0,
	0, 0, 431, 1162, 1163, 1164, 1165, 37, 0, 0,
	0, 50, 401, 0, 402, 0, 0, 0, 0, 0,
	409, 0, 0, 166, 0, 166, 0, 411, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 1184, 0, 0, 0, 0, 1189, 0,
	0, 0, 0, 0, 0, 0, 1193, 0, 0, 0,
	1126, 1127, 0, 1128, 1129, 1130, 0, 0, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 1082, 433, 907,
	0, 0, 0, 0, 0, 0, 1211, 1212, 0, 292,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 476,
	477, 469, 470, 471, 472, 473, 474, 475, 468, 38,
	39, 478, 40, 41, 467, 466, 476, 477, 469, 470,
	471, 472, 473, 474, 475, 468, 0, 0, 478, 530,
	0, 938, 292, 0, 292, 0, 0, 0, 554, 433,
	166, 0, 0, 0, 1182, 502, 0, 166, 552, 166,
	0, 0, 0, 0, 0, 0, 0, 292, 0, 467,
	466, 476, 477, 469, 470, 471, 472, 473, 474, 475,
	468, 0, 49, 478, 292, 467, 466, 476, 477, 469,
	470, 471, 472, 473, 474, 475, 468, 0, 1209, 478,
	0, 0, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 433, 608, 0,
	0, 714, 0, 0, 1013, 907, 617, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 629, 630,
	631, 632, 633, 634, 635, 0, 0, 292, 0, 292,
	1032, 636, 637, 467, 466, 476, 477, 469, 470, 471,
	472, 473, 474, 475, 468, 615, 616, 478, 0, 619,
	0, 0, 622, 0, 0, 0, 166, 166, 0, 0,
	166, 1057, 0, 166, 0, 0, 0, 626, 0, 0,
	0, 0, 0, 0, 1059, 0, 638, 0, 0, 0,
	0, 1062, 0, 0, 292, 0, 0, 166, 0, 0,
	0, 0, 0, 0, 0, 657, 0, 0, 0, 0,
	462, 0, 465, 0, 0, 0, 166, 0, 479, 480,
	481, 482, 483, 484, 485, 626, 463, 464, 461, 467,
	466, 476, 477, 469, 470, 471, 472, 473, 474, 475,
	468, 0, 0, 478, 0, 0, 1099, 0, 1099, 1099,
	1099, 0, 1104, 0, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 214, 214, 0, 0, 715, 715, 214, 0, 292,
	292, 292, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 214, 214, 214, 214, 0, 166, 589, 715, 166,
	166, 166, 166, 166, 0, 0, 0, 0, 0, 0,
	0, 747, 757, 0, 166, 0, 0, 0, 552, 0,
	1138, 1139, 166, 166, 0, 0, 0, 811, 976, 813,
	0, 0, 0, 1032, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 467, 466,
	476, 477, 469, 470, 471, 472, 473, 474, 475, 468,
	0, 0, 478, 0, 0, 806, 1173, 0, 0, 0,
	0, 0, 0, 577, 830, 0, 166, 831, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 166, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 1190, 0,
	0, 0, 590, 0, 0, 0, 0, 1195, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 595, 596, 597, 598, 599, 600, 601,
	0, 602, 603, 604, 605, 606, 591, 592, 593, 594,
	575, 576, 0, 0, 578, 0, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 467, 466, 476, 477,
	469, 470, 471, 472, 473, 474, 475, 468, 0, 0,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 368, 0, 340, 380, 318, 332,
	388, 333, 334, 361, 304, 348, 115, 330, 0, 321,
	299, 327, 300, 319, 342, 92, 345, 317, 370, 351,
	102, 386, 104, 356, 0, 126, 111, 0, 0, 344,
	372, 346, 366, 339, 362, 309, 355, 381, 331, 359,
	382, 0, 0, 0, 75, 0, 766, 767, 0, 0,
	0, 0, 0, 86, 0, 358, 377, 329, 360, 298,
	357, 0, 302, 305, 387, 375, 324, 325, 913, 0,
	0, 0, 0, 0, 0, 343, 347, 363, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 0, 354,
	0, 0, 0, 306, 303, 0, 341, 0, 0, 0,
	308, 0, 323, 364, 0, 297, 367, 373, 338, 169,
	376, 336, 335, 379, 118, 0, 715, 129, 97, 96,
	371, 320, 328, 88, 326, 123, 116, 141, 353, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 301, 0,
	127, 142, 154, 316, 374, 148, 149, 150, 151, 112,
	85, 98, 125, 312, 315, 310, 311, 349, 350, 383,
	384, 385, 365, 307, 0, 313, 314, 0, 369, 352,
	77, 0, 103, 152, 120, 94, 143, 378, 368, 0,
	340, 380, 318, 332, 388, 333, 334, 361, 304, 348,
	115, 330, 0, 321, 299, 327, 300, 319, 342, 92,
	345, 317, 370, 351, 102, 386, 104, 356, 0, 126,
	111, 0, 0, 344, 372, 346, 366, 339, 362, 309,
	355, 381, 331, 359, 382, 0, 0, 0, 75, 0,
	766, 767, 0, 0, 0, 0, 0, 86, 0, 358,
	377, 329, 360, 298, 357, 0, 302, 305, 387, 375,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 343,
	347, 363, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 354, 0, 0, 0, 306, 303, 0,
	341, 0, 0, 0, 308, 0, 323, 364, 0, 297,
	367, 373, 338, 169, 376, 336, 335, 379, 118, 0,
	0, 129, 97, 96, 371, 320, 328, 88, 326, 123,
	116, 141, 353, 117, 122, 105, 133, 119, 140, 170,
	147, 131, 146, 78, 130, 139, 87, 124, 80, 137,
	128, 109, 99, 100, 79, 0, 121, 91, 95, 90,
	114, 134, 135, 89, 153, 83, 145, 82, 84, 144,
	113, 132, 138, 110, 107, 81, 136, 108, 106, 101,
	93, 0, 301, 0, 127, 142, 154, 316, 374, 148,
	149, 150, 151, 112, 85, 98, 125, 312, 315, 310,
	311, 349, 350, 383, 384, 385, 365, 307, 0, 313,
	314, 0, 369, 352, 77, 0, 103, 152, 120, 94,
	143, 378, 368, 0, 340, 380, 318, 332, 388, 333,
	334, 361, 304, 348, 115, 330, 0, 321, 299, 327,
	300, 319, 342, 92, 345, 317, 370, 351, 102, 386,
	104, 356, 0, 126, 111, 0, 0, 344, 372, 346,
	366, 339, 362, 309, 355, 381, 331, 359, 382, 50,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 358, 377, 329, 360, 298, 357, 0,
	302, 305, 387, 375, 324, 325, 0, 0, 0, 0,
	0, 0, 0, 343, 347, 363, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 354, 0, 0,
	0, 306, 303, 0, 341, 0, 0, 0, 308, 0,
	323, 364, 0, 297, 367, 373, 338, 169, 376, 336,
	335, 379, 118, 0, 0, 129, 97, 96, 371, 320,
	328, 88, 326, 123, 116, 141, 353, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 84, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 0, 301, 0, 127, 142,
	154, 316, 374, 148, 149, 150, 151, 112, 85, 98,
	125, 312, 315, 310, 311, 349, 350, 383, 384, 385,
	365, 307, 0, 313, 314, 0, 369, 352, 77, 0,
	103, 152, 120, 94, 143, 378, 368, 0, 340, 380,
	318, 332, 388, 333, 334, 361, 304, 348, 115, 330,
	0, 321, 299, 327, 300, 319, 342, 92, 345, 317,
	370, 351, 102, 386, 104, 356, 0, 126, 111, 0,
	0, 344, 372, 346, 366, 339, 362, 309, 355, 381,
	331, 359, 382, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 358, 377, 329,
	360, 298, 357, 0, 302, 305, 387, 375, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 343, 347, 363,
	337, 0, 0, 0, 0, 0, 0, 972, 0, 322,
	0, 354, 0, 0, 0, 306, 303, 0, 341, 0,
	0, 0, 308, 0, 323, 364, 0, 297, 367, 373,
	338, 169, 376, 336, 335, 379, 118, 0, 0, 129,
	97, 96, 371, 320, 328, 88, 326, 123, 116, 141,
	353, 117, 122, 105, 133, 119, 140, 170, 147, 131,
	146, 78, 130, 139, 87, 124, 80, 137, 128, 109,
	99, 100, 79, 0, 121, 91, 95, 90, 114, 134,
	135, 89, 153, 83, 145, 82, 84, 144, 113, 132,
	138, 110, 107, 81, 136, 108, 106, 101, 93, 0,
	301, 0, 127, 142, 154, 316, 374, 148, 149, 150,
	151, 112, 85, 98, 125, 312, 315, 310, 311, 349,
	350, 383, 384, 385, 365, 307, 0, 313, 314, 0,
	369, 352, 77, 0, 103, 152, 120, 94, 143, 378,
	368, 0, 340, 380, 318, 332, 388, 333, 334, 361,
	304, 348, 115, 330, 0, 321, 299, 327, 300, 319,
	342, 92, 345, 317, 370, 351, 102, 386, 104, 356,
	0, 126, 111, 0, 0, 344, 372, 346, 366, 339,
	362, 309, 355, 381, 331, 359, 382, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 358, 377, 329, 360, 298, 357, 0, 302, 305,
	387, 375, 324, 325, 0, 0, 0, 0, 0, 0,
	0, 343, 347, 363, 337, 0, 0, 0, 0, 0,
	0, 666, 0, 322, 0, 354, 0, 0, 0, 306,
	303, 0, 341, 0, 0, 0, 308, 0, 323, 364,
	0, 297, 367, 373, 338, 169, 376, 336, 335, 379,
	118, 0, 0, 129, 97, 96, 371, 320, 328, 88,
	326, 123, 116, 141, 353, 117, 122, 105, 133, 119,
	140, 170, 147, 131, 146, 78, 130, 139, 87, 124,
	80, 137, 128, 109, 99, 100, 79, 0, 121, 91,
	95, 90, 114, 134, 135, 89, 153, 83, 145, 82,
	84, 144, 113, 132, 138, 110, 107, 81, 136, 108,
	106, 101, 93, 0, 301, 0, 127, 142, 154, 316,
	374, 148, 149, 150, 151, 112, 85, 98, 125, 312,
	315, 310, 311, 349, 350, 383, 384, 385, 365, 307,
	0, 313, 314, 0, 369, 352, 77, 0, 103, 152,
	120, 94, 143, 378, 368, 0, 340, 380, 318, 332,
	388, 333, 334, 361, 304, 348, 115, 330, 0, 321,
	299, 327, 300, 319, 342, 92, 345, 317, 370, 351,
	102, 386, 104, 356, 0, 126, 111, 0, 0, 344,
	372, 346, 366, 339, 362, 309, 355, 381, 331, 359,
	382, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 358, 377, 329, 360, 298,
	357, 0, 302, 305, 387, 375, 324, 325, 0, 0,
	0, 0, 0, 0, 0, 343, 347, 363, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 0, 354,
	0, 0, 0, 306, 303, 0, 341, 0, 0, 0,
	308, 0, 323, 364, 0, 297, 367, 373, 338, 169,
	376, 336, 335, 379, 118, 0, 0, 129, 97, 96,
	371, 320, 328, 88, 326, 123, 116, 141, 353, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 301, 0,
	127, 142, 154, 316, 374, 148, 149, 150, 151, 112,
	85, 98, 125, 312, 315, 310, 311, 349, 350, 383,
	384, 385, 365, 307, 0, 313, 314, 0, 369, 352,
	77, 0, 103, 152, 120, 94, 143, 378, 368, 0,
	340, 380, 318, 332, 388, 333, 334, 361, 304, 348,
	115, 330, 0, 321, 299, 327, 300, 319, 342, 92,
	345, 317, 370, 351, 102, 386, 104, 356, 0, 126,
	111, 0, 0, 344, 372, 346, 366, 339, 362, 309,
	355, 381, 331, 359, 382, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 358,
	377, 329, 360, 298, 357, 0, 302, 305, 387, 375,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 343,
	347, 363, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 354, 0, 0, 0, 306, 303, 0,
	341, 0, 0, 0, 308, 0, 323, 364, 0, 297,
	367, 373, 338, 169, 376, 336, 335, 379, 118, 0,
	0, 129, 97, 96, 371, 320, 328, 88, 326, 123,
	116, 141, 353, 117, 122, 105, 133, 119, 140, 170,
	147, 131, 146, 78, 130, 139, 87, 124, 80, 137,
	128, 109, 99, 100, 79, 0, 121, 91, 95, 90,
	114, 134, 135, 89, 153, 83, 145, 82, 84, 144,
	113, 132, 138, 110, 107, 81, 136, 108, 106, 101,
	93, 0, 301, 0, 127, 142, 154, 316, 374, 148,
	149, 150, 151, 112, 85, 98, 125, 312, 315, 310,
	311, 349, 350, 383, 384, 385, 365, 307, 0, 313,
	314, 0, 369, 352, 77, 0, 103, 152, 120, 94,
	143, 378, 368, 0, 340, 380, 318, 332, 388, 333,
	334, 361, 304, 348, 115, 330, 0, 321, 299, 327,
	300, 319, 342, 92, 345, 317, 370, 351, 102, 386,
	104, 356, 0, 126, 111, 0, 0, 344, 372, 346,
	366, 339, 362, 309, 355, 381, 331, 359, 382, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 358, 377, 329, 360, 298, 357, 0,
	302, 305, 387, 375, 324, 325, 0, 0, 0, 0,
	0, 0, 0, 343, 347, 363, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 354, 0, 0,
	0, 306, 303, 0, 341, 0, 0, 0, 308, 0,
	323, 364, 0, 297, 367, 373, 338, 169, 376, 336,
	335, 379, 118, 0, 0, 129, 97, 96, 371, 320,
	328, 88, 326, 123, 116, 141, 353, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 295, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 0, 301, 0, 127, 142,
	154, 316, 374, 148, 149, 150, 151, 296, 294, 98,
	125, 312, 315, 310, 311, 349, 350, 383, 384, 385,
	365, 307, 0, 313, 314, 0, 369, 352, 77, 0,
	103, 152, 120, 94, 143, 378, 368, 0, 340, 380,
	318, 332, 388, 333, 334, 361, 304, 348, 115, 330,
	0, 321, 299, 327, 300, 319, 342, 92, 345, 317,
	370, 351, 102, 386, 104, 356, 0, 126, 111, 0,
	0, 344, 372, 346, 366, 339, 362, 309, 355, 381,
	331, 359, 382, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 358, 377, 329,
	360, 298, 357, 0, 302, 305, 387, 375, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 343, 347, 363,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 354, 0, 0, 0, 306, 303, 0, 341, 0,
	0, 0, 308, 0, 323, 364, 0, 297, 367, 373,
	338, 169, 376, 336, 335, 379, 118, 0, 0, 129,
	97, 96, 371, 320, 328, 88, 326, 123, 116, 141,
	353, 117, 122, 105, 133, 119, 140, 170, 147, 131,
	146, 78, 130, 139, 87, 124, 80, 137, 128, 109,
	99, 100, 79, 0, 121, 91, 95, 90, 114, 134,
	135, 89, 153, 83, 145, 82, 84, 144, 113, 132,
	138, 110, 107, 81, 136, 108, 106, 101, 93, 0,
	301, 0, 127, 142, 154, 316, 374, 148, 149, 150,
	151, 112, 85, 98, 125, 312, 315, 310, 311, 349,
	350, 383, 384, 385, 365, 307, 0, 313, 314, 0,
	369, 352, 77, 0, 103, 152, 120, 94, 143, 378,
	368, 0, 340, 380, 318, 332, 388, 333, 334, 361,
	304, 348, 115, 330, 0, 321, 299, 327, 300, 319,
	342, 92, 345, 317, 370, 351, 102, 386, 104, 356,
	0, 126, 111, 0, 0, 344, 372, 346, 366, 339,
	362, 309, 355, 381, 331, 359, 382, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 358, 377, 329, 360, 298, 357, 0, 302, 305,
	387, 375, 324, 325, 0, 0, 0, 0, 0, 0,
	0, 343, 347, 363, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 322, 0, 354, 0, 0, 0, 306,
	303, 0, 341, 0, 0, 0, 308, 0, 323, 364,
	0, 297, 367, 373, 338, 169, 376, 336, 335, 379,
	118, 0, 0, 129, 97, 96, 371, 320, 328, 88,
	326, 123, 116, 141, 353, 117, 122, 105, 133, 119,
	140, 170, 147, 131, 146, 78, 130, 139, 87, 124,
	80, 137, 128, 109, 99, 100, 79, 0, 121, 91,
	95, 90, 114, 134, 135, 89, 153, 83, 145, 82,
	295, 144, 113, 132, 138, 110, 107, 81, 136, 108,
	106, 101, 93, 0, 301, 0, 127, 142, 154, 316,
	374, 148, 149, 150, 151, 296, 294, 289, 288, 312,
	315, 310, 311, 349, 350, 383, 384, 385, 365, 307,
	0, 313, 314, 0, 369, 352, 77, 0, 103, 152,
	120, 94, 143, 115, 0, 0, 702, 0, 221, 0,
	0, 0, 92, 0, 218, 0, 0, 102, 260, 104,
	0, 0, 126, 111, 0, 0, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 219, 239, 238, 241, 242, 243, 244, 0, 0,
	86, 240, 245, 246, 247, 0, 0, 216, 232, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	229, 230, 212, 0, 0, 0, 271, 0, 231, 0,
	0, 227, 228, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 269,
	0, 118, 0, 0, 129, 97, 96, 0, 0, 0,
	88, 0, 123, 116, 141, 0, 117, 122, 105, 133,
	119, 140, 170, 147, 131, 146, 78, 130, 139, 87,
	124, 80, 137, 128, 109, 99, 100, 79, 0, 121,
	91, 95, 90, 114, 134, 135, 89, 153, 83, 145,
	82, 84, 144, 113, 132, 138, 110, 107, 81, 136,
	108, 106, 101, 93, 0, 0, 0, 127, 142, 154,
	0, 0, 148, 149, 150, 151, 112, 85, 98, 125,
	261, 270, 267, 268, 265, 266, 264, 263, 262, 272,
	253, 254, 255, 256, 258, 0, 257, 77, 0, 103,
	152, 120, 94, 143, 115, 0, 0, 0, 0, 221,
	0, 0, 0, 92, 0, 218, 0, 0, 102, 260,
	104, 0, 0, 126, 111, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 433, 219, 239, 238, 241, 242, 243, 244, 0,
	0, 86, 240, 245, 246, 247, 0, 0, 216, 232,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 230, 0, 0, 0, 0, 271, 0, 231,
	0, 0, 227, 228, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	269, 0, 118, 0, 0, 129, 97, 96, 0, 0,
	0, 88, 0, 123, 116, 141, 0, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 84, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 0, 0, 0, 127, 142,
	154, 0, 0, 148, 149, 150, 151, 112, 85, 98,
	125, 261, 270, 267, 268, 265, 266, 264, 263, 262,
	272, 253, 254, 255, 256, 258, 0, 257, 77, 0,
	103, 152, 120, 94, 143, 115, 0, 0, 0, 0,
	221, 0, 0, 0, 92, 0, 218, 0, 0, 102,
	260, 104, 0, 0, 126, 111, 0, 0, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 219, 239, 238, 241, 242, 243, 244,
	0, 0, 86, 240, 245, 246, 247, 0, 0, 216,
	232, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 230, 212, 0, 0, 0, 271, 0,
	231, 0, 0, 227, 228, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 269, 0, 118, 0, 0, 129, 97, 96, 0,
	0, 0, 88, 0, 123, 116, 141, 0, 117, 122,
	105, 133, 119, 140, 170, 147, 131, 146, 78, 130,
	139, 87, 124, 80, 137, 128, 109, 99, 100, 79,
	0, 121, 91, 95, 90, 114, 134, 135, 89, 153,
	83, 145, 82, 84, 144, 113, 132, 138, 110, 107,
	81, 136, 108, 106, 101, 93, 0, 0, 0, 127,
	142, 154, 0, 0, 148, 149, 150, 151, 112, 85,
	98, 125, 261, 270, 267, 268, 265, 266, 264, 263,
	262, 272, 253, 254, 255, 256, 258, 23, 257, 77,
	0, 103, 152, 120, 94, 143, 0, 0, 0, 115,
	0, 0, 0, 0, 221, 0, 0, 0, 92, 0,
	218, 0, 0, 102, 260, 104, 0, 0, 126, 111,
	0, 0, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 219, 239, 238,
	241, 242, 243, 244, 0, 0, 86, 240, 245, 246,
	247, 0, 0, 216, 232, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 229, 230, 0, 0,
	0, 0, 271, 0, 231, 0, 0, 227, 228, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 269, 0, 118, 0, 0,
	129, 97, 96, 0, 0, 0, 88, 0, 123, 116,
	141, 0, 117, 122, 105, 133, 119, 140, 170, 147,
	131, 146, 78, 130, 139, 87, 124, 80, 137, 128,
	109, 99, 100, 79, 0, 121, 91, 95, 90, 114,
	134, 135, 89, 153, 83, 145, 82, 84, 144, 113,
	132, 138, 110, 107, 81, 136, 108, 106, 101, 93,
	0, 0, 0, 127, 142, 154, 0, 0, 148, 149,
	150, 151, 112, 85, 98, 125, 261, 270, 267, 268,
	265, 266, 264, 263, 262, 272, 253, 254, 255, 256,
	258, 0, 257, 77, 0, 103, 152, 120, 94, 143,
	115, 0, 0, 0, 0, 221, 0, 0, 0, 92,
	0, 218, 0, 0, 102, 260, 104, 0, 0, 126,
	111, 0, 0, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 219, 239,
	238, 241, 242, 243, 244, 0, 0, 86, 240, 245,
	246, 247, 0, 0, 216, 232, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 229, 230, 0,
	0, 0, 0, 271, 0, 231, 0, 0, 227, 228,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 269, 0, 118, 0,
	0, 129, 97, 96, 0, 0, 0, 88, 0, 123,
	116, 141, 0, 117, 122, 105, 133, 119, 140, 170,
	147, 131, 146, 78, 130, 139, 87, 124, 80, 137,
	128, 109, 99, 100, 79, 0, 121, 91, 95, 90,
	114, 134, 135, 89, 153, 83, 145, 82, 84, 144,
	113, 132, 138, 110, 107, 81, 136, 108, 106, 101,
	93, 0, 0, 0, 127, 142, 154, 0, 0, 148,
	149, 150, 151, 112, 85, 98, 125, 261, 270, 267,
	268, 265, 266, 264, 263, 262, 272, 253, 254, 255,
	256, 258, 115, 257, 77, 0, 103, 152, 120, 94,
	143, 92, 0, 0, 0, 0, 102, 260, 104, 0,
	0, 126, 111, 0, 0, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	219, 239, 238, 241, 242, 243, 244, 0, 0, 86,
	240, 245, 246, 247, 0, 0, 0, 232, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	230, 0, 0, 0, 0, 271, 0, 231, 0, 0,
	227, 228, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 269, 0,
	118, 0, 0, 129, 97, 96, 0, 0, 0, 88,
	0, 123, 116, 141, 1210, 117, 122, 105, 133, 119,
	140, 170, 147, 131, 146, 78, 130, 139, 87, 124,
	80, 137, 128, 109, 99, 100, 79, 0, 121, 91,
	95, 90, 114, 134, 135, 89, 153, 83, 145, 82,
	84, 144, 113, 132, 138, 110, 107, 81, 136, 108,
	106, 101, 93, 0, 0, 0, 127, 142, 154, 0,
	0, 148, 149, 150, 151, 112, 85, 98, 125, 261,
	270, 267, 268, 265, 266, 264, 263, 262, 272, 253,
	254, 255, 256, 258, 115, 257, 77, 0, 103, 152,
	120, 94, 143, 92, 0, 0, 0, 0, 102, 260,
	104, 0, 0, 126, 111, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 219, 239, 238, 241, 242, 243, 244, 0,
	0, 86, 240, 245, 246, 247, 0, 0, 0, 232,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 230, 0, 0, 0, 0, 271, 0, 231,
	0, 0, 227, 228, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	269, 0, 118, 0, 0, 129, 97, 96, 0, 0,
	0, 88, 0, 123, 116, 141, 0, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 84, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 0, 0, 0, 127, 142,
	154, 0, 0, 148, 149, 150, 151, 112, 85, 98,
	125, 261, 270, 267, 268, 265, 266, 264, 263, 262,
	272, 253, 254, 255, 256, 258, 115, 257, 77, 0,
	103, 152, 120, 94, 143, 92, 0, 0, 0, 0,
	102, 0, 104, 0, 0, 126, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	466, 476, 477, 469, 470, 471, 472, 473, 474, 475,
	468, 0, 0, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 118, 0, 0, 129, 97, 96,
	0, 0, 0, 88, 0, 123, 116, 141, 0, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 0, 0,
	127, 142, 154, 0, 0, 148, 149, 150, 151, 112,
	85, 98, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 103, 152, 120, 94, 143, 115, 0, 0,
	0, 455, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 102, 0, 104, 0, 0, 126, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 457, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 452,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 118, 0, 0, 129, 97,
	96, 0, 0, 0, 88, 0, 123, 116, 141, 0,
	117, 122, 105, 133, 119, 140, 170, 147, 131, 146,
	78, 130, 139, 87, 124, 80, 137, 128, 109, 99,
	100, 79, 0, 121, 91, 95, 90, 114, 134, 135,
	89, 153, 83, 145, 82, 84, 144, 113, 132, 138,
	110, 107, 81, 136, 108, 106, 101, 93, 0, 0,
	0, 127, 142, 154, 0, 115, 148, 149, 150, 151,
	112, 85, 98, 125, 92, 0, 0, 0, 0, 102,
	0, 104, 0, 0, 126, 111, 0, 0, 0, 0,
	0, 77, 0, 103, 152, 120, 94, 143, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 72, 0, 67, 0,
	0, 0, 73, 118, 0, 0, 129, 97, 96, 0,
	0, 0, 88, 0, 123, 116, 141, 0, 117, 122,
	105, 133, 119, 140, 69, 147, 131, 146, 78, 130,
	139, 87, 124, 80, 137, 128, 109, 99, 100, 79,
	0, 121, 91, 95, 90, 114, 134, 135, 89, 153,
	83, 145, 82, 84, 144, 113, 132, 138, 110, 107,
	81, 136, 108, 106, 101, 93, 0, 0, 0, 127,
	142, 154, 0, 0, 148, 149, 150, 151, 112, 85,
	98, 125, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 103, 152, 120, 94, 143, 115, 0, 0, 0,
	551, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	102, 0, 104, 0, 0, 126, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 553, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 118, 0, 0, 129, 97, 96,
	0, 0, 0, 88, 0, 123, 116, 141, 0, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 0, 0,
	127, 142, 154, 0, 0, 148, 149, 150, 151, 112,
	85, 98, 125, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	77, 0, 103, 152, 120, 94, 143, 92, 0, 0,
	0, 0, 102, 0, 104, 0, 0, 126, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 118, 0, 0, 129,
	97, 96, 0, 0, 0, 88, 0, 123, 116, 141,
	0, 117, 122, 105, 133, 119, 140, 170, 147, 131,
	146, 78, 130, 139, 87, 124, 80, 137, 128, 109,
	99, 100, 79, 0, 121, 91, 95, 90, 114, 134,
	135, 89, 153, 83, 145, 82, 84, 144, 113, 132,
	138, 110, 107, 81, 136, 108, 106, 101, 93, 0,
	0, 0, 127, 142, 154, 0, 0, 148, 149, 150,
	151, 112, 85, 98, 125, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 77, 0, 103, 152, 120, 94, 143, 92,
	0, 0, 0, 0, 102, 0, 104, 0, 0, 126,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 118, 0,
	0, 129, 97, 96, 0, 0, 0, 88, 0, 123,
	116, 141, 0, 117, 122, 105, 133, 119, 140, 170,
	147, 131, 146, 78, 130, 139, 87, 124, 80, 137,
	128, 109, 99, 100, 79, 0, 121, 91, 95, 90,
	114, 134, 135, 89, 153, 83, 145, 82, 84, 144,
	113, 132, 138, 110, 107, 81, 136, 108, 106, 101,
	93, 0, 0, 0, 127, 142, 154, 0, 115, 148,
	149, 150, 151, 112, 85, 98, 125, 92, 0, 0,
	0, 0, 102, 0, 104, 0, 0, 126, 111, 0,
	0, 0, 0, 0, 77, 0, 103, 152, 120, 94,
	143, 0, 0, 0, 0, 0, 75, 0, 0, 653,
	0, 0, 654, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 118, 0, 0, 129,
	97, 96, 0, 0, 0, 88, 0, 123, 116, 141,
	0, 117, 122, 105, 133, 119, 140, 170, 147, 131,
	146, 78, 130, 139, 87, 124, 80, 137, 128, 109,
	99, 100, 79, 0, 121, 91, 95, 90, 114, 134,
	135, 89, 153, 83, 145, 82, 84, 144, 113, 132,
	138, 110, 107, 81, 136, 108, 106, 101, 93, 0,
	0, 0, 127, 142, 154, 0, 115, 148, 149, 150,
	151, 112, 85, 98, 125, 92, 0, 565, 0, 0,
	102, 0, 104, 0, 0, 126, 111, 0, 0, 0,
	0, 0, 77, 0, 103, 152, 120, 94, 143, 0,
	0, 0, 0, 0, 75, 0, 564, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 118, 0, 0, 129, 97, 96,
	0, 0, 0, 88, 0, 123, 116, 141, 0, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 0, 0,
	127, 142, 154, 0, 0, 148, 149, 150, 151, 112,
	85, 98, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 103, 152, 120, 94, 143, 115, 0, 0,
	0, 551, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 102, 0, 104, 0, 0, 126, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 553, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 118, 0, 0, 129, 97,
	96, 0, 0, 0, 88, 0, 123, 116, 141, 0,
	549, 122, 105, 133, 119, 140, 170, 147, 131, 146,
	78, 130, 139, 87, 124, 80, 137, 128, 109, 99,
	100, 79, 0, 121, 91, 95, 90, 114, 134, 135,
	89, 153, 83, 145, 82, 84, 144, 113, 132, 138,
	110, 107, 81, 136, 108, 106, 101, 93, 0, 0,
	0, 127, 142, 154, 0, 115, 148, 149, 150, 151,
	112, 85, 98, 125, 92, 0, 0, 0, 0, 102,
	0, 104, 0, 0, 126, 111, 0, 0, 0, 0,
	0, 77, 0, 103, 152, 120, 94, 143, 0, 0,
	50, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 118, 0, 0, 129, 97, 96, 0,
	0, 0, 88, 0, 123, 116, 141, 0, 117, 122,
	105, 133, 119, 140, 170, 147, 131, 146, 78, 130,
	139, 87, 124, 80, 137, 128, 109, 99, 100, 79,
	0, 121, 91, 95, 90, 114, 134, 135, 89, 153,
	83, 145, 82, 84, 144, 113, 132, 138, 110, 107,
	81, 136, 108, 106, 101, 93, 0, 0, 0, 127,
	142, 154, 0, 115, 148, 149, 150, 151, 112, 85,
	98, 125, 92, 0, 0, 0, 0, 102, 0, 104,
	0, 0, 126, 111, 0, 0, 0, 0, 0, 77,
	0, 103, 152, 120, 94, 143, 0, 0, 0, 0,
	0, 167, 0, 553, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 118, 0, 0, 129, 97, 96, 0, 0, 0,
	88, 0, 123, 116, 141, 0, 117, 122, 105, 133,
	119, 140, 170, 147, 131, 146, 78, 130, 139, 87,
	124, 80, 137, 128, 109, 99, 100, 79, 0, 121,
	91, 95, 90, 114, 134, 135, 89, 153, 83, 145,
	82, 84, 144, 113, 132, 138, 110, 107, 81, 136,
	108, 106, 101, 93, 0, 0, 0, 127, 142, 154,
	0, 115, 148, 149, 150, 151, 112, 85, 98, 125,
	92, 0, 0, 0, 0, 102, 0, 104, 0, 0,
	126, 111, 0, 0, 0, 0, 0, 77, 0, 103,
	152, 120, 94, 143, 0, 0, 0, 0, 0, 75,
	0, 457, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 118,
	0, 0, 129, 97, 96, 0, 0, 0, 88, 0,
	123, 116, 141, 0, 117, 122, 105, 133, 119, 140,
	170, 147, 131, 146, 78, 130, 139, 87, 124, 80,
	137, 128, 109, 99, 100, 79, 0, 121, 91, 95,
	90, 114, 134, 135, 89, 153, 83, 145, 82, 84,
	144, 113, 132, 138, 110, 107, 81, 136, 108, 106,
	101, 93, 0, 0, 0, 127, 142, 154, 0, 0,
	148, 149, 150, 151, 112, 85, 98, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 77, 0, 103, 152, 120,
	94, 143, 529, 92, 0, 0, 0, 0, 102, 0,
	104, 0, 0, 126, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 118, 0, 0, 129, 97, 96, 0, 0,
	0, 88, 0, 123, 116, 141, 0, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 84, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 282, 0, 0, 127, 142,
	154, 0, 115, 148, 149, 150, 151, 112, 85, 98,
	125, 92, 0, 0, 0, 0, 102, 0, 104, 0,
	0, 126, 111, 0, 0, 0, 0, 0, 77, 0,
	103, 152, 120, 94, 143, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	118, 0, 0, 129, 97, 96, 0, 0, 0, 88,
	0, 123, 116, 141, 0, 117, 122, 105, 133, 119,
	140, 170, 147, 131, 146, 78, 130, 139, 87, 124,
	80, 137, 128, 109, 99, 100, 79, 0, 121, 91,
	95, 90, 114, 134, 135, 89, 153, 83, 145, 82,
	84, 144, 113, 132, 138, 110, 107, 81, 136, 108,
	106, 101, 93, 0, 0, 0, 127, 142, 154, 0,
	115, 148, 149, 150, 151, 112, 85, 98, 125, 92,
	0, 0, 0, 0, 102, 0, 104, 0, 0, 126,
	111, 0, 0, 0, 0, 0, 77, 0, 103, 152,
	120, 94, 143, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 169, 0, 0, 0, 0, 118, 0,
	0, 129, 97, 96, 0, 0, 0, 88, 0, 123,
	116, 141, 0, 117, 122, 105, 133, 119, 140, 170,
	147, 131, 146, 78, 130, 139, 87, 124, 80, 137,
	128, 109, 99, 100, 79, 0, 121, 91, 95, 90,
	114, 134, 135, 89, 153, 83, 145, 82, 84, 144,
	113, 132, 138, 110, 107, 81, 136, 108, 106, 101,
	93, 0, 0, 0, 127, 142, 154, 0, 115, 148,
	149, 150, 151, 112, 85, 98, 125, 92, 0, 0,
	0, 0, 102, 0, 104, 0, 0, 126, 111, 0,
	0, 0, 0, 0, 77, 0, 103, 152, 120, 94,
	143, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 118, 0, 0, 129,
	97, 96, 0, 0, 0, 88, 0, 123, 116, 141,
	0, 117, 122, 105, 133, 119, 140, 170, 147, 131,
	146, 78, 130, 139, 87, 124, 80, 137, 128, 109,
	99, 100, 79, 0, 121, 91, 95, 90, 114, 134,
	135, 89, 153, 83, 145, 82, 84, 144, 113, 132,
	138, 110, 107, 81, 136, 108, 106, 101, 93, 0,
	0, 0, 127, 142, 154, 0, 115, 148, 149, 150,
	151, 112, 85, 98, 125, 92, 0, 0, 0, 0,
	102, 0, 104, 0, 0, 126, 111, 0, 0, 0,
	0, 0, 77, 0, 103, 152, 120, 94, 143, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 118, 0, 0, 129, 97, 96,
	0, 0, 0, 88, 0, 123, 116, 141, 0, 117,
	122, 105, 133, 119, 140, 170, 147, 131, 146, 78,
	130, 139, 87, 124, 80, 137, 128, 109, 99, 100,
	79, 0, 121, 91, 95, 90, 114, 134, 135, 89,
	153, 83, 145, 82, 84, 144, 113, 132, 138, 110,
	107, 81, 136, 108, 106, 101, 93, 0, 0, 0,
	127, 142, 154, 0, 115, 148, 149, 150, 151, 112,
	85, 98, 125, 92, 0, 0, 0, 0, 102, 0,
	104, 0, 0, 126, 111, 0, 0, 0, 0, 0,
	77, 0, 103, 152, 120, 94, 143, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 118, 0, 0, 129, 97, 96, 0, 0,
	0, 88, 0, 123, 116, 141, 0, 117, 122, 105,
	133, 119, 140, 170, 147, 131, 146, 78, 130, 139,
	87, 124, 80, 137, 128, 109, 99, 100, 79, 0,
	121, 91, 95, 90, 114, 134, 135, 89, 153, 83,
	145, 82, 84, 144, 113, 132, 138, 110, 107, 81,
	136, 108, 106, 101, 93, 0, 0, 0, 127, 142,
	154, 0, 0, 148, 149, 150, 151, 112, 85, 98,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	103, 152, 120, 94, 143,
}
var yyPact = [...]int{

	1378, -1000, -169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 723, 769, -1000, -1000, -1000, -1000, -1000, -1000, 526,
	6397, 18, 40, -36, 8672, 38, 285, 9206, -1000, -49,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 501, -1000, -1000,
	-1000, -1000, -1000, 717, 721, 547, 712, 613, -1000, 4977,
	15, 7757, 8494, 4344, -1000, 423, 34, 9206, -136, 8850,
	13, 13, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, 9206, -1000, 9206, 12,
	421, 12, 12, 12, 9206, -1000, 64, -1000, -1000, -1000,
	-1000, 9206, 420, 680, 23, 2776, 2776, 2776, 2776, -38,
	2776, 2776, 559, -1000, -1000, -1000, -1000, 2776, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 287, 681, 5402,
	5402, 723, -1000, 501, -1000, -1000, -1000, 647, -1000, -1000,
	176, 745, -1000, 6219, 63, -1000, 5402, 1658, 502, -1000,
	-1000, 502, -1000, -1000, 51, -1000, -1000, 5806, 5806, 5806,
	5806, 5806, 5806, 5806, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 502, -1000,
	5191, 502, 502, 502, 502, 502, 502, 502, 502, 5402,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 8316, 522, 706, -1000, -1000, -1000, 703,
	7012, 7579, 9206, 488, -1000, 487, 3896, -1000, -1000, -1000,
	115, 7368, -1000, -1000, -1000, 679, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 418,
	-1000, 1787, 408, 2776, 24, 422, 406, 128, 373, 9206,
	9206, 2776, 26, 9206, 701, 558, 9206, 345, 337, -1000,
	4120, -1000, 2776, 2776, 2776, 2776, 2776, 2776, 2776, 2776,
	-1000, -1000, -1000, -1000, -1000, -1000, 2776, 2776, -1000, -1000,
	9206, -1000, -1000, -1000, -1000, 763, 96, 286, 58, 497,
	-1000, 290, 717, 287, 613, 7190, 570, -1000, -1000, 9206,
	-1000, 5402, 5402, 314, -1000, 8113, -1000, -1000, 3224, 102,
	5806, 235, 213, 5806, 5806, 5806, 5806, 5806, 5806, 5806,
	5806, 5806, 5806, 5806, 5806, 5806, 5806, 5806, 251, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 328, -1000, 501,
	636, 636, 80, 80, 80, 80, 80, 80, 6008, 4555,
	287, 413, 140, 5191, 4977, 4977, 5402, 5402, 9028, 9028,
	4977, 705, 131, 140, 8850, -1000, 287, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4977, 4977, 4977, 4977, -9, 9206,
	-1000, 9028, 7757, 7757, 7757, 7757, 7757, -1000, 610, 601,
	-1000, 609, 573, 581, 9206, -1000, 405, 7012, 85, 502,
	-1000, 7935, -1000, -1000, -9, 7757, 9206, -1000, -1000, 3896,
	487, 5402, 70, -1000, -1000, -1000, -1000, 2552, 254, 241,
	-101, -1000, -1000, 505, -1000, 505, 505, 505, 505, -80,
	-80, -80, -80, -1000, -1000, -1000, -1000, -1000, 524, 521,
	-1000, 505, 505, 505, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 517, 517, 517, 509, 509, 528, -1000, 9206,
	-156, 322, 2776, 699, 2776, -1000, 84, -1000, 9206, -1000,
	-1000, 9206, 2776, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	627, 5402, 5402, 3672, 5402, -1000, -1000, -1000, 681, -1000,
	705, 724, -1000, 650, 642, 4977, -1000, -1000, 102, 116,
	-1000, -1000, 295, -1000, -1000, -1000, -1000, 57, 502, -1000,
	1488, -1000, -1000, -1000, -1000, 235, 5806, 5806, 5806, 668,
	1488, 1915, 1426, 342, 80, 539, 539, 88, 88, 88,
	88, 88, 224, 224, -1000, -1000, -1000, 287, -1000, -1000,
	-1000, 287, 4977, 457, -1000, -1000, 5402, -1000, 287, 401,
	401, 264, 305, 495, -1000, 56, 492, 401, 4977, 207,
	-1000, 5402, 287, -1000, 401, 287, 401, 401, 445, 502,
	-1000, 493, -1000, 114, 706, 516, 546, 1167, -1000, -1000,
	-1000, -1000, 585, -1000, 577, -1000, -1000, -1000, -1000, -1000,
	33, 30, 27, 8850, -1000, 743, 489, -1000, -1000, 140,
	-1000, 299, 455, 2328, -1000, -1000, -1000, -1000, -1000, -1000,
	513, 690, 127, 289, -1000, -1000, 682, -1000, 146, -106,
	-1000, -1000, 221, -80, -80, -1000, -1000, 70, 662, 70,
	70, 70, 274, 274, -1000, -1000, -1000, -1000, 220, -1000,
	-1000, -1000, 184, -1000, 545, 8850, 2776, -1000, 3448, -1000,
	-1000, -1000, -1000, -1000, -1000, 1121, 164, 124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -10,
	-1000, 2776, -1000, 624, 140, 140, 55, -1000, -1000, 9206,
	-1000, -1000, -1000, -1000, 476, -1000, -1000, -1000, 3000, 4977,
	-1000, 668, 1488, 1777, -1000, 5806, 5806, -1000, -1000, 401,
	4977, 140, -1000, -1000, -1000, 45, 251, 45, 5806, 5806,
	3672, 5806, 5806, -146, 477, 117, -1000, 5402, 267, -1000,
	-1000, -1000, -1000, -1000, 532, 9028, 502, -1000, 6810, 8850,
	723, 9028, 5402, 5402, -1000, -1000, 5402, 511, -1000, 5402,
	-1000, -1000, -1000, 502, 502, 502, 354, -1000, 723, -1000,
	-1000, 2552, -1000, 2552, 8850, -1000, 277, -1000, -1000, 518,
	31, -1000, -1000, -1000, 414, 70, 70, -1000, 118, -1000,
	-1000, -1000, 395, -1000, 377, 454, 371, 9206, -1000, -1000,
	446, -1000, 111, -1000, -1000, 8850, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8850, 9206,
	-1000, -1000, -1000, -1000, -1000, 8850, -1000, -1000, 3448, -1000,
	743, 7757, -1000, -1000, 287, -1000, 5806, 1488, 1488, -1000,
	-1000, 287, 505, 505, -1000, 505, 509, -1000, 505, -59,
	505, -60, 287, 287, 1572, 1234, -1000, 1443, 427, 502,
	-143, -1000, 140, 5402, -1000, 693, 440, 441, -1000, -1000,
	4766, 287, 367, 54, 354, 717, -1000, 140, 140, 140,
	8850, 140, 8850, 8850, 8850, 6608, 8850, 717, 2328, -1000,
	352, -1000, 505, -1000, -96, 762, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -80, 273, -80,
	183, -1000, 169, 2776, 3448, 2552, -1000, 504, -1000, -1000,
	-1000, -1000, 695, 733, 443, -1000, 1488, -1000, -1000, 39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5806,
	5806, -1000, 5806, 5806, 5806, 287, 248, 140, 689, -1000,
	502, -1000, -1000, 506, 8850, 8850, -1000, -1000, 344, -1000,
	341, 341, 341, 85, -1000, -1000, 528, 8850, -1000, 105,
	-1000, -119, 70, -1000, 70, 368, 355, -1000, -1000, -1000,
	8850, 502, 727, 720, -1000, -1000, 1504, 1504, 1504, 1504,
	25, -1000, -1000, 748, -1000, 502, -1000, 501, 49, -1000,
	8850, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 156, 686,
	-1000, 685, -1000, -1000, -1000, -1000, -1000, 335, -12, -1000,
	5402, 5402, -1000, -1000, -1000, -1000, 287, 52, -159, 9028,
	441, 287, 8850, -1000, -1000, 242, -1000, -1000, 422, 333,
	-1000, 8850, 140, 439, -1000, 623, -150, -162, 432, -1000,
	-1000, -1000, -156, -1000, -12, 634, -1000, 622, -1000, -1000,
	-1000, -15, -157, -39, -160, 502, -164, 5604, -1000, 1504,
	287, -1000, -1000,
}
var yyPgo = [...]int{

	0, 962, 13, 457, 961, 960, 958, 957, 956, 955,
	954, 953, 951, 950, 949, 945, 944, 943, 942, 941,
	940, 939, 938, 937, 81, 936, 930, 929, 51, 928,
	57, 917, 916, 31, 160, 34, 33, 403, 915, 25,
	75, 58, 914, 42, 913, 912, 909, 903, 50, 901,
	900, 1275, 896, 893, 12, 21, 890, 888, 886, 885,
	53, 400, 882, 881, 880, 862, 860, 859, 39, 7,
	10, 8, 15, 858, 143, 6, 857, 38, 854, 853,
	851, 850, 43, 847, 45, 846, 22, 40, 845, 3,
	52, 30, 24, 5, 59, 844, 27, 46, 842, 297,
	840, 114, 339, 839, 838, 837, 836, 37, 171, 745,
	184, 54, 835, 16, 834, 1286, 55, 49, 23, 833,
	26, 1234, 32, 831, 829, 29, 827, 826, 825, 824,
	823, 822, 80, 821, 820, 818, 64, 20, 817, 806,
	44, 28, 805, 803, 802, 36, 47, 801, 41, 800,
	799, 796, 19, 18, 795, 11, 792, 791, 4, 789,
	17, 788, 9, 787, 2, 35, 785, 783, 0, 296,
	779, 775, 103,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 11, 11, 164, 164, 163, 162, 162,
	161, 161, 160, 16, 149, 150, 150, 150, 146, 126,
	126, 126, 129, 129, 127, 127, 127, 127, 127, 127,
	127, 128, 128, 128, 128, 128, 130, 130, 130, 130,
	130, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 145, 145, 132, 132,
	140, 140, 141, 141, 141, 138, 138, 139, 139, 142,
	142, 142, 133, 133, 133, 133, 133, 133, 133, 135,
	135, 143, 143, 136, 136, 136, 137, 137, 144, 144,
	144, 144, 144, 134, 134, 147, 154, 154, 154, 154,
	148, 148, 156, 156, 155, 151, 151, 151, 152, 152,
	152, 153, 153, 153, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 159, 157, 157, 158, 158, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 124, 124, 124, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 171, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 112, 112, 112,
	111, 111, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 119, 119, 118,
	118, 118, 117, 117, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 100, 100, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 172, 172, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 122, 122, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 96, 94, 94, 97, 97, 95, 95, 95, 114,
	114, 114, 98, 98, 101, 101, 102, 102, 99, 99,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	104, 104, 104, 105, 105, 106, 106, 106, 113, 113,
	109, 109, 110, 110, 115, 115, 116, 116, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	168, 169, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 2, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 3, 4, 2, 4, 2, 2, 2, 2,
	3, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 139, 116, 132, 49, 151, 152,
	154, 155, 25, 133, 134, 137, 138, -168, 8, 214,
	53, -167, 229, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, -106, 121, 70, 147,
	206, 118, 119, 125, -109, 56, -108, 222, 151, 162,
	156, 183, 175, 173, 176, 202, 65, 154, 135, 171,
	167, 165, 27, 188, 227, 166, 131, 130, 203, 160,
	161, 187, 32, 224, 34, 143, 186, 182, 185, 159,
	181, 38, 201, 178, 168, 18, 138, 141, 126, 145,
	226, 164, 142, 137, 155, 204, 37, 192, 158, 129,
	152, 149, 179, 144, 169, 170, 184, 157, 180, 153,
	146, 139, 193, 228, 177, 174, 150, 148, 197, 198,
	199, 200, 225, 172, 194, -99, 121, 123, 119, 119,
	120, 121, 206, 118, 119, -51, -115, 56, -108, 121,
	147, 119, 106, 176, 112, 195, 120, 32, 145, -124,
	119, 196, 148, 197, 198, 199, 200, 56, 204, 203,
	-115, 153, -120, -120, -120, -120, -120, -2, -86, 17,
	16, -5, -3, -168, 6, 20, 21, -30, 39, 40,
	-25, -36, 97, -37, -115, -56, 72, -61, 29, 56,
	-108, 23, -60, -57, -75, -73, -74, 106, 107, 95,
	96, 103, 73, 108, -65, -63, -64, -66, 58, 57,
	66, 59, 60, 61, 62, 67, 68, 69, -109, -71,
	-168, 43, 44, 215, 216, 217, 218, 221, 219, 75,
	33, 205, 213, 212, 211, 209, 210, 207, 208, 124,
	206, 101, 214, -99, -39, -40, -41, -42, -53, -74,
	-168, -51, 11, -46, -51, -94, -123, -97, 204, 203,
	-110, -95, -109, -107, 202, 176, 201, 117, 71, 22,
	24, 190, 74, 106, 16, 75, 105, 215, 112, 47,
	207, 208, 205, 217, 218, 206, 195, 29, 10, 25,
	133, 21, 99, 114, 78, 79, 136, 23, 134, 69,
	19, 50, 11, 13, 14, 124, 123, 90, 120, 45,
	8, 108, 26, 87, 41, 28, 43, 88, 17, 209,
	210, 31, 221, 140, 101, 48, 35, 72, 67, 51,
	70, 15, 46, 89, 115, 214, 44, 118, 6, 220,
	30, 132, 42, 119, 196, 77, 122, 68, 5, 125,
	9, 49, 52, 211, 212, 213, 33, 76, 12, -150,
	-146, 56, 120, -51, 214, -109, -102, 124, -102, -102,
	119, -51, -51, -101, 124, 56, -101, -101, -101, -51,
	109, -51, 56, 30, 206, 56, 145, 119, 146, 121,
	-121, -168, -110, -121, -121, -121, 149, 150, -121, -121,
	51, -121, -169, 55, -87, 19, 31, -37, -115, -83,
	-84, -37, -82, -2, -24, 35, -28, 21, 64, 11,
	-112, 71, 70, 87, -111, 22, -109, 58, 109, -37,
	-58, 90, 72, 88, 89, 74, 92, 91, 102, 95,
	96, 97, 98, 99, 100, 101, 93, 94, 105, 80,
	81, 82, 83, 84, 85, 86, -100, -168, -74, -168,
	110, 111, -61, -61, -61, -61, -61, -61, -61, -168,
	-2, -69, -37, -168, -168, -168, -168, -168, -168, -168,
	-168, -168, -78, -37, -168, -172, -168, -172, -172, -172,
	-172, -172, -172, -172, -168, -168, -168, -168, -52, 26,
	-51, 30, 54, -47, -49, -48, -50, 41, 45, 47,
	42, 43, 44, 48, -119, 22, -39, -168, -118, 141,
	-117, 22, -115, 58, -51, -170, 54, 11, 52, 54,
	-94, 80, -114, -109, 58, 29, 30, 55, 54, -126,
	-129, -131, -130, -127, -128, 173, 174, 106, 177, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 30,
	135, 169, 170, 171, 172, 156, 157, 158, 159, 160,
	161, 162, 164, 165, 166, 167, 168, 56, -121, 121,
	-164, 52, 56, 72, 56, -51, -51, -121, 122, -51,
	23, 51, -51, 56, 56, -116, -115, -107, -121, -121,
	-121, -121, -121, -121, -121, -121, -121, -121, -51, 9,
	90, 54, 18, 109, 54, -85, 24, 25, -86, -169,
	-30, -62, -109, 59, 62, -29, 42, -51, -37, -37,
	-67, 67, 72, 68, 69, -111, 97, -116, -110, -107,
	-61, -68, -71, -74, 63, 90, 88, 89, 74, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -122, 56, 58, 56, -60, -60,
	-109, -35, 21, -34, -36, -169, 54, -169, -2, -34,
	-34, -37, -37, -75, -109, -115, -75, -34, -28, -76,
	-77, 76, -109, -169, -34, -35, -34, -34, -90, 141,
	-51, -93, -96, -75, -40, -41, -41, -40, -41, 41,
	41, 41, 46, 41, 46, 41, -48, -115, -169, -54,
	49, 123, 50, -168, -117, -90, -39, -51, -97, -37,
	-137, 105, -151, -152, -153, -110, 58, 59, -146, -147,
	-154, 126, 125, -148, 120, 28, -142, 67, 72, -138,
	193, -132, 53, -132, -132, -132, -132, -136, 176, -136,
	-136, -136, 53, 53, -132, -132, -132, -140, 53, -140,
	-140, -141, 53, -141, -113, 52, -51, -162, 225, -163,
	56, -121, 23, -121, -103, 117, 114, 115, -159, 113,
	190, 176, 65, 29, 15, 215, 141, 228, 56, 142,
	-51, -51, -121, 37, -37, -37, -116, -84, -87, -98,
	19, 11, 33, 33, -34, 67, 68, 69, 109, -168,
	-68, -61, -61, -61, -33, 136, 71, -169, -169, -34,
	54, -37, -169, -169, -169, 54, 52, 22, 54, 11,
	109, 54, 11, -169, -34, -79, -77, 78, -37, -169,
	-169, -169, -169, -169, -59, 30, 33, -2, -168, -168,
	-55, 54, 12, 80, -44, -43, 51, 52, -45, 51,
	-43, 41, 41, 120, 120, 120, -91, -109, -55, -55,
	56, 54, -153, 80, 53, 28, -148, 56, 56, -133,
	29, 67, -139, 194, 59, -136, -136, -137, 30, -137,
	-137, -137, -145, 58, -145, 59, 59, 51, -109, -121,
	-161, -160, -110, -120, -165, 147, 127, 128, 131, 130,
	56, 120, 28, 126, 129, 141, 125, -165, 147, -104,
	-105, 122, 22, 120, 28, 141, -121, 38, 109, -51,
	-38, 11, 97, -110, -35, -33, 71, -61, -61, -169,
	-36, -125, 106, 173, 135, 171, 167, 187, 178, 192,
	169, 193, -122, -125, -61, -61, -110, -61, -61, 222,
	-82, 79, -37, 77, -92, 51, -93, -70, -72, -71,
	-168, -2, -88, -109, -91, -82, -96, -37, -37, -37,
	53, -37, -168, -168, -168, -169, 54, -82, -152, -153,
	-156, -155, -109, 56, -135, 51, 58, 59, 60, 67,
	205, 66, 55, -137, -137, 56, 106, 55, 54, 55,
	54, 55, 54, -51, 54, 80, -120, -109, -120, -109,
	-51, -120, -109, -55, -39, -169, -61, -169, -132, -132,
	-132, -141, -132, 161, -132, 161, -169, -169, -169, 54,
	19, -169, 54, 19, -168, -32, 220, -37, 27, -92,
	54, -169, -169, -169, 54, 109, -169, -86, -89, -109,
	-89, -89, -89, -118, -109, -86, 55, 54, -132, -143,
	190, 9, -136, 58, -136, 59, 59, -121, -160, -153,
	53, 26, -80, 13, -136, 56, -61, -61, -61, -61,
	-61, -169, 58, 28, -72, 33, -2, -168, -109, -109,
	54, 55, -169, -169, -169, -54, -113, -155, -144, 126,
	28, 125, 205, -137, -137, 55, 55, -89, -168, -81,
	14, 16, -169, -169, -169, -169, -31, 90, 225, 9,
	-70, -2, 109, -109, -134, 65, 28, 28, 55, -157,
	-158, 141, -37, -69, -169, 223, 48, 226, -93, -169,
	-109, 58, -164, -169, 54, -109, 38, 224, 227, -162,
	-158, 33, 38, 143, 225, 144, 226, -168, 227, -61,
	140, -169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 466, 0, 235, 235, 235, 235, 235, 235, 0,
	535, 518, 0, 0, 0, 0, 221, 225, 226, 0,
	228, 229, 722, 722, 722, 722, 722, 0, 33, 34,
	720, 1, 3, 474, 0, 0, 239, 242, 237, 0,
	518, 0, 0, 0, 48, 0, 0, 710, 0, 711,
	516, 516, 516, 536, 537, 540, 541, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 712, 713, 714,
	715, 716, 717, 718, 719, 0, 0, 519, 0, 514,
	0, 514, 514, 514, 0, 196, 306, 544, 545, 710,
	711, 0, 0, 0, 0, 723, 723, 723, 723, 0,
	723, 723, 214, 216, 217, 218, 219, 723, 222, 223,
	224, 227, 230, 231, 232, 233, 234, 27, 478, 0,
	0, 466, 29, 0, 235, 240, 241, 245, 243, 244,
	236, 0, 253, 257, 0, 314, 0, 319, 321, -2,
	-2, 0, 356, 357, 358, 359, 360, 0, 0, 0,
	0, 0, 0, 0, 383, 384, 385, 386, 451, 452,
	453, 454, 455, 456, 457, 458, 323, 324, 448, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 413, 413, 413, 413, 413, 413, 413, 413, 0,
	0, 0, 0, 0, 0, 264, 266, 267, 268, 287,
	0, 289, 0, 0, 40, 44, 0, 502, -2, -2,
	0, 0, 542, 543, -2, 647, -2, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 0,
	65, 0, 0, 723, 0, 55, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 197, 723, 723, 723, 723, 723, 723, 723, 723,
	206, 724, 725, 207, 208, 209, 723, 723, 211, 212,
	0, 220, 28, 721, 22, 0, 0, 475, 0, 467,
	468, 471, 474, 27, 242, 0, 247, 246, 238, 0,
	254, 0, 0, 0, 258, 0, 260, 261, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	342, 343, 344, 345, 346, 347, 320, 0, 334, 0,
	0, 0, 376, 377, 378, 379, 380, 381, 0, 249,
	27, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 440, 0, 405, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 249, 0, 0, 42, 0,
	305, 0, 0, 0, 0, 0, 0, 294, 0, 0,
	297, 0, 0, 0, 0, 288, 0, 0, 308, 680,
	290, 0, 292, 293, 42, 0, 0, 38, 39, 0,
	45, 0, 136, 509, 510, 511, 507, 155, 0, 119,
	115, 70, 71, 108, 73, 108, 108, 108, 108, 133,
	133, 133, 133, 99, 100, 101, 102, 103, 0, 0,
	86, 108, 108, 108, 90, 74, 75, 76, 77, 78,
	79, 80, 110, 110, 110, 112, 112, 538, 50, 0,
	58, 0, 723, 0, 723, 63, 0, 171, 0, 190,
	515, 0, 723, 193, 194, 307, 546, 547, 198, 199,
	200, 201, 202, 203, 204, 205, 210, 213, 215, 479,
	0, 0, 0, 0, 0, 470, 472, 473, 478, 30,
	245, 0, 459, 0, 0, 0, 248, 25, 315, 316,
	318, 335, 0, 337, 339, 259, 255, 0, 449, -2,
	325, 326, 350, 351, 352, 0, 0, 0, 0, 348,
	330, 0, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 372, 375, 424, 425, 0, 373, 374,
	382, 0, 0, 250, 251, 353, 0, 497, 27, 0,
	0, 0, 0, 0, 448, 0, 0, 0, 0, 446,
	443, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	304, 312, 499, 0, 265, 283, 285, 0, 280, 295,
	296, 298, 0, 300, 0, 302, 303, 269, 270, 271,
	0, 0, 0, 0, 291, 312, 312, 41, 503, 504,
	505, 0, 64, 156, 158, 161, 162, 163, 66, 67,
	0, 0, 0, 0, 150, 151, 122, 120, 0, 117,
	116, 72, 0, 133, 133, 93, 94, 136, 0, 136,
	136, 136, 0, 0, 87, 88, 89, 81, 0, 82,
	83, 84, 0, 85, 0, 0, 723, 52, 0, 56,
	57, 53, 517, 54, 722, 0, 0, 530, 172, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 0,
	189, 723, 192, 0, 476, 477, 0, 469, 23, 0,
	512, 513, 460, 461, 262, 336, 338, 340, 0, 249,
	327, 348, 331, 0, 328, 0, 0, 322, 387, 0,
	0, 355, -2, 390, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 444, 0, 0, 404,
	415, 416, 417, 418, 491, 0, 0, -2, 0, 0,
	466, 0, 0, 0, 277, 284, 0, 0, 278, 0,
	279, 299, 301, 0, 0, 0, 0, 275, 466, 37,
	137, 0, 159, 0, 0, 146, 0, 148, 149, 129,
	0, 121, 69, 118, 0, 136, 136, 95, 0, 96,
	97, 98, 0, 106, 0, 0, 0, 0, 539, 51,
	59, 60, 0, 164, 722, 0, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 722, 0, 0,
	722, 531, 532, 533, 534, 0, 191, 480, 0, 24,
	312, 0, 256, 450, 0, 329, 0, 349, 332, 388,
	252, 0, 108, 108, 429, 108, 112, 432, 108, 434,
	108, 437, 0, 0, 0, 0, 449, 0, 0, 0,
	441, 403, 447, 0, 31, 0, 491, 481, 493, 495,
	0, 27, 0, 487, 0, 474, 500, 313, 501, 281,
	0, 286, 0, 0, 0, 289, 0, 474, 157, 160,
	0, 152, 108, 147, 131, 0, 123, 124, 125, 126,
	127, 128, 109, 91, 92, 134, 135, 133, 0, 133,
	0, 113, 0, 723, 0, 0, 165, 0, 166, 168,
	169, 170, 0, 462, 263, 389, 333, 392, 426, 133,
	430, 431, 433, 435, 436, 438, 394, 393, 395, 0,
	0, 398, 0, 0, 0, 0, 0, 445, 0, 32,
	0, 496, -2, 0, 0, 0, 43, 35, 0, 273,
	0, 0, 0, 308, 276, 36, 538, 0, 154, 138,
	132, 0, 136, 107, 136, 0, 0, 49, 61, 62,
	0, 0, 464, 0, 427, 428, 0, 0, 0, 0,
	419, 402, 442, 0, 494, 0, -2, 0, 489, 488,
	0, 282, 309, 310, 311, 272, 145, 153, 143, 0,
	140, 142, 130, 104, 105, 111, 114, 0, 0, 26,
	0, 0, 396, 397, 399, 400, 0, 0, 0, 0,
	484, 27, 0, 274, 68, 0, 139, 141, 55, 0,
	185, 0, 465, 463, 401, 0, 0, 0, 492, -2,
	490, 144, 58, 184, 0, 0, 420, 0, 423, 167,
	186, 0, 421, 0, 0, 0, 0, 0, 422, 0,
	0, 187, 188,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 229,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:293
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:298
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:299
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:303
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:326
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:344
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:378
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:390
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:436
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:441
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:445
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:451
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:461
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:471
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:476
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:481
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:489
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:497
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:501
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:506
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:516
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:521
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:526
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:537
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:543
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:549
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:556
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:563
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:568
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:572
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:578
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:604
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:757
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:762
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:780
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:792
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:798
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:815
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:838
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:867
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:871
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:876
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:885
		{
			yyVAL.str = ""
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.str = ""
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:907
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:911
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.colKeyOpt = colKey
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:928
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:932
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:938
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:976
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:982
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1066
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1071
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 187:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1131
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1139
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1144
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.str = SessionStr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.str = GlobalStr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Begin{}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &Begin{}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &Commit{}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Rollback{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.statement = &OtherRead{}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.statement = &OtherRead{}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &OtherRead{}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			setAllowComments(yylex, true)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.bytes2 = nil
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = UnionStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = UnionAllStr
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = UnionDistinctStr
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.str = ""
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = SQLCacheStr
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.str = ""
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.str = DistinctStr
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = ""
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = StraightJoinHint
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.selectExprs = nil
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.empty = struct{}{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.empty = struct{}{}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = JoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = JoinStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = StraightJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = LeftJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.str = LeftJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.str = RightJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.str = RightJoinStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = NaturalJoinStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1644
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.indexHints = nil
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = IsNullStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = IsNotNullStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = IsTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.str = IsNotTrueStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = IsFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = IsNotFalseStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = EqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = LessThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = GreaterThanStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.str = LessEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = GreaterEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = NotEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1975
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1983
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 396:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 397:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 399:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 401:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 402:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.str = BooleanModeStr
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.str = QueryExpansionStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.str = string("")
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = nil
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &NullVal{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.exprs = nil
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.orderBy = nil
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.str = AscScr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.str = AscScr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.str = DescScr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.limit = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.str = ForUpdateStr
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.str = ShareModeStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2470
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2483
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.updateExprs = nil
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.bytes = []byte("charset")
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &Default{}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.byt = 0
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.byt = 1
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.str = IgnoreStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2638
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.empty = struct{}{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.empty = struct{}{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.empty = struct{}{}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.empty = struct{}{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2666
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			decNesting(yylex)
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2917
		{
			forceEOF(yylex)
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2922
		{
			forceEOF(yylex)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2926
		{
			forceEOF(yylex)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
