//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 215,
	109, 527,
	-2, 523,
	-1, 216,
	109, 528,
	-2, 524,
	-1, 283,
	80, 668,
	109, 668,
	-2, 53,
	-1, 284,
	80, 641,
	109, 641,
	-2, 54,
	-1, 285,
	80, 628,
	109, 628,
	-2, 48,
	-1, 287,
	80, 655,
	109, 655,
	-2, 50,
	-1, 651,
	109, 530,
	-2, 526,
	-1, 837,
	5, 28,
	-2, 352,
	-1, 857,
	5, 27,
	-2, 475,
	-1, 1045,
	5, 28,
	-2, 476,
	-1, 1084,
	5, 27,
	-2, 478,
	-1, 1132,
	5, 28,
	-2, 479,
}

const yyPrivate = 57344

const yyLast = 9095

var yyAct = [...]int{

	246, 47, 596, 1123, 490, 782, 785, 213, 220, 279,
	968, 896, 489, 3, 725, 991, 969, 910, 743, 194,
	1051, 779, 965, 535, 533, 421, 947, 860, 742, 874,
	282, 245, 188, 766, 676, 913, 829, 548, 863, 686,
	698, 53, 752, 683, 423, 429, 653, 281, 47, 537,
	292, 706, 775, 522, 270, 435, 199, 443, 203, 269,
	193, 322, 274, 740, 52, 1151, 1141, 502, 218, 800,
	1149, 1130, 288, 1147, 786, 1140, 189, 190, 191, 192,
	960, 1039, 1129, 799, 296, 1100, 268, 57, 892, 759,
	1063, 767, 313, 1034, 1077, 1032, 318, 187, 1146, 207,
	996, 997, 998, 415, 416, 1148, 1124, 932, 707, 999,
	804, 754, 59, 60, 61, 62, 63, 303, 304, 798,
	1098, 299, 155, 929, 209, 948, 726, 728, 154, 931,
	155, 157, 158, 159, 754, 602, 595, 873, 300, 293,
	1110, 456, 455, 465, 466, 458, 459, 460, 461, 462,
	463, 464, 457, 950, 315, 467, 317, 1115, 872, 222,
	871, 167, 886, 294, 156, 479, 480, 795, 792, 793,
	1048, 791, 319, 319, 319, 319, 879, 319, 319, 823,
	314, 316, 625, 553, 319, 952, 622, 956, 447, 951,
	308, 949, 1005, 897, 802, 805, 954, 442, 685, 727,
	47, 457, 753, 467, 467, 953, 1014, 751, 750, 552,
	955, 957, 432, 767, 962, 476, 1099, 1097, 478, 699,
	930, 273, 928, 441, 440, 753, 599, 441, 440, 797,
	964, 481, 482, 483, 484, 485, 486, 487, 842, 431,
	442, 312, 1006, 796, 442, 488, 1000, 492, 493, 494,
	495, 496, 497, 498, 1128, 501, 503, 503, 503, 503,
	503, 503, 503, 503, 511, 512, 513, 514, 801, 412,
	413, 414, 1111, 417, 418, 534, 890, 306, 660, 803,
	420, 440, 173, 624, 1118, 50, 441, 440, 433, 288,
	547, 437, 658, 659, 657, 656, 319, 442, 699, 153,
	847, 1068, 319, 442, 921, 756, 183, 820, 821, 822,
	757, 319, 319, 319, 319, 319, 319, 319, 319, 623,
	426, 430, 1067, 216, 504, 505, 506, 507, 508, 509,
	510, 905, 919, 628, 629, 441, 440, 448, 921, 456,
	455, 465, 466, 458, 459, 460, 461, 462, 463, 464,
	457, 904, 442, 467, 74, 677, 168, 678, 164, 893,
	267, 164, 170, 1134, 1080, 1066, 919, 1004, 176, 172,
	609, 491, 607, 903, 1137, 422, 422, 477, 500, 441,
	440, 1088, 1121, 830, 993, 164, 164, 1088, 422, 1103,
	760, 164, 594, 74, 174, 920, 442, 178, 601, 1088,
	1089, 922, 915, 916, 923, 918, 917, 610, 611, 612,
	613, 614, 615, 616, 617, 887, 319, 319, 643, 645,
	646, 788, 925, 644, 841, 169, 840, 1060, 1059, 920,
	985, 422, 1047, 422, 273, 922, 915, 916, 923, 918,
	917, 679, 441, 440, 171, 177, 179, 180, 181, 182,
	593, 630, 185, 184, 1011, 1010, 914, 652, 631, 442,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 244, 1008, 1007, 164, 47,
	164, 310, 654, 305, 164, 835, 422, 519, 422, 688,
	422, 164, 632, 492, 320, 74, 74, 74, 74, 544,
	74, 74, 647, 555, 554, 690, 72, 74, 293, 651,
	1102, 649, 618, 619, 23, 687, 689, 21, 1001, 54,
	274, 274, 274, 274, 274, 23, 937, 288, 709, 701,
	736, 966, 861, 74, 736, 534, 518, 729, 855, 289,
	545, 856, 543, 274, 861, 297, 688, 690, 680, 681,
	1043, 519, 1083, 1013, 696, 288, 703, 23, 835, 724,
	519, 50, 200, 1009, 880, 640, 641, 732, 835, 835,
	626, 546, 50, 198, 519, 711, 712, 735, 714, 710,
	50, 737, 713, 1072, 722, 597, 736, 761, 730, 780,
	979, 164, 883, 731, 734, 864, 865, 783, 164, 164,
	164, 768, 769, 770, 50, 74, 747, 319, 776, 50,
	655, 771, 65, 995, 781, 651, 966, 491, 906, 74,
	693, 694, 164, 867, 164, 74, 605, 164, 419, 638,
	164, 870, 164, 869, 74, 74, 74, 74, 74, 74,
	74, 74, 777, 778, 1145, 716, 715, 321, 321, 321,
	321, 824, 321, 321, 721, 1139, 528, 529, 934, 321,
	235, 234, 237, 238, 239, 240, 826, 827, 828, 236,
	241, 719, 812, 717, 809, 813, 720, 738, 718, 273,
	273, 273, 273, 273, 436, 445, 1144, 651, 818, 654,
	204, 205, 691, 692, 273, 817, 695, 898, 434, 424,
	551, 311, 273, 808, 825, 832, 889, 858, 859, 833,
	702, 425, 704, 705, 1120, 1119, 837, 838, 839, 857,
	1081, 843, 884, 1041, 1073, 789, 849, 604, 850, 851,
	852, 853, 532, 201, 202, 436, 816, 195, 846, 74,
	74, 1107, 1108, 164, 815, 288, 196, 1075, 810, 811,
	54, 430, 868, 861, 438, 1112, 289, 321, 74, 876,
	877, 881, 164, 1064, 621, 56, 58, 735, 74, 542,
	51, 321, 878, 1, 787, 909, 549, 321, 794, 1122,
	899, 900, 901, 990, 749, 319, 321, 321, 321, 321,
	321, 321, 321, 321, 885, 741, 894, 895, 465, 466,
	458, 459, 460, 461, 462, 463, 464, 457, 319, 291,
	467, 74, 64, 836, 748, 902, 1096, 655, 1062, 755,
	891, 758, 994, 912, 848, 74, 1117, 888, 924, 460,
	461, 462, 463, 464, 457, 558, 819, 467, 943, 944,
	164, 559, 557, 164, 164, 164, 164, 164, 561, 560,
	556, 175, 280, 531, 439, 164, 66, 971, 164, 47,
	945, 927, 164, 941, 288, 967, 164, 164, 940, 959,
	926, 972, 981, 982, 983, 946, 958, 790, 74, 298,
	475, 908, 814, 834, 973, 627, 961, 428, 970, 975,
	1106, 321, 321, 1074, 845, 844, 499, 697, 221, 642,
	984, 989, 976, 233, 933, 230, 1002, 1003, 232, 988,
	634, 987, 231, 633, 854, 449, 219, 211, 986, 164,
	445, 272, 515, 321, 523, 521, 164, 520, 277, 164,
	74, 866, 862, 524, 527, 528, 529, 525, 274, 526,
	530, 271, 650, 864, 865, 936, 1015, 1038, 1109, 637,
	1025, 25, 55, 762, 763, 764, 765, 1017, 206, 19,
	1020, 1037, 1023, 682, 1022, 18, 1024, 17, 772, 773,
	774, 20, 963, 1026, 1030, 275, 16, 700, 15, 14,
	29, 13, 12, 11, 1035, 1036, 977, 10, 9, 978,
	1042, 8, 980, 7, 289, 6, 1050, 1044, 1045, 1046,
	5, 1049, 1053, 1054, 1055, 4, 1058, 881, 1056, 197,
	161, 22, 2, 319, 458, 459, 460, 461, 462, 463,
	464, 457, 289, 0, 467, 0, 0, 0, 0, 321,
	321, 1070, 0, 1071, 0, 0, 0, 0, 278, 0,
	0, 1065, 0, 295, 971, 1078, 0, 1085, 739, 744,
	0, 0, 0, 74, 0, 0, 0, 0, 74, 1084,
	1082, 0, 1076, 0, 1079, 1094, 74, 0, 0, 0,
	0, 1093, 0, 0, 1105, 970, 1095, 1101, 0, 1090,
	1091, 1092, 321, 0, 971, 0, 47, 0, 0, 1040,
	0, 0, 0, 1104, 1113, 0, 491, 273, 1114, 0,
	0, 321, 0, 0, 0, 0, 0, 74, 74, 1069,
	74, 0, 0, 1126, 0, 970, 0, 0, 0, 0,
	650, 288, 1131, 0, 1135, 0, 0, 0, 0, 427,
	301, 74, 302, 0, 0, 1127, 307, 0, 164, 0,
	1132, 1143, 1142, 309, 0, 0, 0, 74, 1136, 1150,
	524, 527, 528, 529, 525, 0, 526, 530, 1152, 0,
	0, 0, 0, 0, 162, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 1155,
	0, 0, 74, 74, 0, 0, 0, 0, 0, 210,
	0, 162, 162, 290, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 74, 74, 875, 74, 74, 0, 0,
	321, 0, 289, 0, 0, 0, 0, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	164, 0, 1125, 491, 0, 0, 0, 744, 74, 0,
	0, 0, 0, 517, 0, 0, 0, 0, 0, 74,
	164, 0, 541, 0, 0, 0, 74, 0, 0, 907,
	321, 164, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 600, 0, 0, 603,
	0, 911, 606, 321, 162, 0, 162, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 162, 0, 321,
	0, 0, 0, 74, 0, 74, 74, 74, 164, 74,
	0, 0, 74, 0, 0, 0, 0, 0, 939, 456,
	455, 465, 466, 458, 459, 460, 461, 462, 463, 464,
	457, 289, 0, 467, 974, 875, 74, 74, 74, 1027,
	1028, 0, 1029, 0, 0, 1031, 0, 1033, 0, 0,
	0, 0, 0, 0, 0, 321, 321, 0, 321, 992,
	455, 465, 466, 458, 459, 460, 461, 462, 463, 464,
	457, 74, 74, 467, 939, 744, 0, 744, 0, 422,
	0, 0, 0, 1061, 74, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 620, 74, 162, 0, 0,
	0, 1018, 0, 0, 162, 539, 162, 0, 1021, 0,
	290, 0, 74, 0, 639, 456, 455, 465, 466, 458,
	459, 460, 461, 462, 463, 464, 457, 0, 162, 467,
	162, 0, 0, 162, 0, 0, 162, 0, 608, 74,
	0, 0, 0, 0, 0, 942, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 1052, 0, 1052, 1052, 1052,
	0, 1057, 0, 0, 321, 456, 455, 465, 466, 458,
	459, 460, 461, 462, 463, 464, 457, 0, 0, 467,
	0, 0, 0, 744, 0, 0, 0, 0, 321, 321,
	321, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 911, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 1086, 1087, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 162,
	0, 456, 455, 465, 466, 458, 459, 460, 461, 462,
	463, 464, 457, 0, 1116, 467, 0, 0, 162, 0,
	0, 784, 0, 0, 0, 0, 0, 608, 806, 0,
	0, 807, 23, 24, 48, 26, 27, 0, 289, 0,
	0, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	1138, 42, 0, 0, 0, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 210, 210, 37, 0, 210, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 210, 210, 210, 0, 162, 0, 290, 162,
	162, 162, 162, 162, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 162, 0, 0, 0, 539, 0,
	0, 0, 162, 162, 0, 0, 290, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 0, 0, 30, 31,
	33, 32, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 0, 0, 0,
	0, 564, 0, 0, 0, 162, 38, 39, 0, 40,
	41, 0, 162, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	581, 582, 583, 584, 585, 586, 587, 0, 588, 589,
	590, 591, 592, 577, 578, 579, 580, 562, 563, 49,
	935, 565, 0, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 454, 210, 0, 0, 0, 0, 468,
	469, 470, 471, 472, 473, 474, 210, 452, 453, 450,
	456, 455, 465, 466, 458, 459, 460, 461, 462, 463,
	464, 457, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	401, 391, 0, 364, 403, 342, 356, 411, 357, 358,
	385, 330, 372, 113, 354, 0, 345, 325, 351, 326,
	343, 366, 90, 369, 341, 393, 375, 100, 409, 102,
	380, 0, 124, 109, 0, 0, 368, 395, 370, 390,
	363, 386, 335, 379, 404, 355, 383, 405, 0, 0,
	0, 73, 0, 745, 746, 0, 0, 0, 0, 0,
	84, 0, 382, 400, 353, 384, 324, 381, 0, 328,
	331, 410, 398, 348, 349, 882, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	332, 329, 0, 365, 0, 0, 0, 334, 0, 347,
	388, 0, 323, 396, 362, 165, 399, 360, 359, 402,
	116, 0, 290, 127, 95, 94, 394, 344, 352, 86,
	350, 121, 114, 139, 377, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 327, 0, 125, 140, 152, 340,
	397, 146, 147, 148, 149, 110, 83, 96, 123, 338,
	339, 336, 337, 373, 374, 406, 407, 408, 389, 333,
	0, 0, 392, 376, 75, 0, 101, 150, 118, 92,
	141, 401, 391, 0, 364, 403, 342, 356, 411, 357,
	358, 385, 330, 372, 113, 354, 0, 345, 325, 351,
	326, 343, 366, 90, 369, 341, 393, 375, 100, 409,
	102, 380, 0, 124, 109, 0, 0, 368, 395, 370,
	390, 363, 386, 335, 379, 404, 355, 383, 405, 0,
	0, 0, 73, 0, 745, 746, 0, 0, 0, 0,
	0, 84, 0, 382, 400, 353, 384, 324, 381, 0,
	328, 331, 410, 398, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 367, 371, 387, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 378, 0, 0,
	0, 332, 329, 0, 365, 0, 0, 0, 334, 0,
	347, 388, 0, 323, 396, 362, 165, 399, 360, 359,
	402, 116, 0, 0, 127, 95, 94, 394, 344, 352,
	86, 350, 121, 114, 139, 377, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 327, 0, 125, 140, 152,
	340, 397, 146, 147, 148, 149, 110, 83, 96, 123,
	338, 339, 336, 337, 373, 374, 406, 407, 408, 389,
	333, 0, 0, 392, 376, 75, 0, 101, 150, 118,
	92, 141, 401, 391, 0, 364, 403, 342, 356, 411,
	357, 358, 385, 330, 372, 113, 354, 0, 345, 325,
	351, 326, 343, 366, 90, 369, 341, 393, 375, 100,
	409, 102, 380, 0, 124, 109, 0, 0, 368, 395,
	370, 390, 363, 386, 335, 379, 404, 355, 383, 405,
	50, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 382, 400, 353, 384, 324, 381,
	0, 328, 331, 410, 398, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 367, 371, 387, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 378, 0,
	0, 0, 332, 329, 0, 365, 0, 0, 0, 334,
	0, 347, 388, 0, 323, 396, 362, 165, 399, 360,
	359, 402, 116, 0, 0, 127, 95, 94, 394, 344,
	352, 86, 350, 121, 114, 139, 377, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 327, 0, 125, 140,
	152, 340, 397, 146, 147, 148, 149, 110, 83, 96,
	123, 338, 339, 336, 337, 373, 374, 406, 407, 408,
	389, 333, 0, 0, 392, 376, 75, 0, 101, 150,
	118, 92, 141, 401, 391, 0, 364, 403, 342, 356,
	411, 357, 358, 385, 330, 372, 113, 354, 0, 345,
	325, 351, 326, 343, 366, 90, 369, 341, 393, 375,
	100, 409, 102, 380, 0, 124, 109, 0, 0, 368,
	395, 370, 390, 363, 386, 335, 379, 404, 355, 383,
	405, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 382, 400, 353, 384, 324,
	381, 0, 328, 331, 410, 398, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 367, 371, 387, 361, 0,
	0, 0, 0, 0, 0, 938, 0, 346, 0, 378,
	0, 0, 0, 332, 329, 0, 365, 0, 0, 0,
	334, 0, 347, 388, 0, 323, 396, 362, 165, 399,
	360, 359, 402, 116, 0, 0, 127, 95, 94, 394,
	344, 352, 86, 350, 121, 114, 139, 377, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 327, 0, 125,
	140, 152, 340, 397, 146, 147, 148, 149, 110, 83,
	96, 123, 338, 339, 336, 337, 373, 374, 406, 407,
	408, 389, 333, 0, 0, 392, 376, 75, 0, 101,
	150, 118, 92, 141, 401, 391, 0, 364, 403, 342,
	356, 411, 357, 358, 385, 330, 372, 113, 354, 0,
	345, 325, 351, 326, 343, 366, 90, 369, 341, 393,
	375, 100, 409, 102, 380, 0, 124, 109, 0, 0,
	368, 395, 370, 390, 363, 386, 335, 379, 404, 355,
	383, 405, 0, 0, 0, 73, 0, 550, 0, 0,
	0, 0, 0, 0, 84, 0, 382, 400, 353, 384,
	324, 381, 0, 328, 331, 410, 398, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 367, 371, 387, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	378, 0, 0, 0, 332, 329, 0, 365, 0, 0,
	0, 334, 0, 347, 388, 0, 323, 396, 362, 165,
	399, 360, 359, 402, 116, 0, 0, 127, 95, 94,
	394, 344, 352, 86, 350, 121, 114, 139, 377, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 327, 0,
	125, 140, 152, 340, 397, 146, 147, 148, 149, 110,
	83, 96, 123, 338, 339, 336, 337, 373, 374, 406,
	407, 408, 389, 333, 0, 0, 392, 376, 75, 0,
	101, 150, 118, 92, 141, 401, 391, 0, 364, 403,
	342, 356, 411, 357, 358, 385, 330, 372, 113, 354,
	0, 345, 325, 351, 326, 343, 366, 90, 369, 341,
	393, 375, 100, 409, 102, 380, 0, 124, 109, 0,
	0, 368, 395, 370, 390, 363, 386, 335, 379, 404,
	355, 383, 405, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 382, 400, 353,
	384, 324, 381, 0, 328, 331, 410, 398, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 648, 0, 346,
	0, 378, 0, 0, 0, 332, 329, 0, 365, 0,
	0, 0, 334, 0, 347, 388, 0, 323, 396, 362,
	165, 399, 360, 359, 402, 116, 0, 0, 127, 95,
	94, 394, 344, 352, 86, 350, 121, 114, 139, 377,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 327,
	0, 125, 140, 152, 340, 397, 146, 147, 148, 149,
	110, 83, 96, 123, 338, 339, 336, 337, 373, 374,
	406, 407, 408, 389, 333, 0, 0, 392, 376, 75,
	0, 101, 150, 118, 92, 141, 401, 391, 0, 364,
	403, 342, 356, 411, 357, 358, 385, 330, 372, 113,
	354, 0, 345, 325, 351, 326, 343, 366, 90, 369,
	341, 393, 375, 100, 409, 102, 380, 0, 124, 109,
	0, 0, 368, 395, 370, 390, 363, 386, 335, 379,
	404, 355, 383, 405, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 382, 400,
	353, 384, 324, 381, 0, 328, 331, 410, 398, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 367, 371,
	387, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 378, 0, 0, 0, 332, 329, 0, 365,
	0, 0, 0, 334, 0, 347, 388, 0, 323, 396,
	362, 165, 399, 360, 359, 402, 116, 0, 0, 127,
	95, 94, 394, 344, 352, 86, 350, 121, 114, 139,
	377, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	327, 0, 125, 140, 152, 340, 397, 146, 147, 148,
	149, 110, 83, 96, 123, 338, 339, 336, 337, 373,
	374, 406, 407, 408, 389, 333, 0, 0, 392, 376,
	75, 0, 101, 150, 118, 92, 141, 401, 391, 0,
	364, 403, 342, 356, 411, 357, 358, 385, 330, 372,
	113, 354, 0, 345, 325, 351, 326, 343, 366, 90,
	369, 341, 393, 375, 100, 409, 102, 380, 0, 124,
	109, 0, 0, 368, 395, 370, 390, 363, 386, 335,
	379, 404, 355, 383, 405, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 382,
	400, 353, 384, 324, 381, 0, 328, 331, 410, 398,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 367,
	371, 387, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 378, 0, 0, 0, 332, 329, 0,
	365, 0, 0, 0, 334, 0, 347, 388, 0, 323,
	396, 362, 165, 399, 360, 359, 402, 116, 0, 0,
	127, 95, 94, 394, 344, 352, 86, 350, 121, 114,
	139, 377, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 327, 0, 125, 140, 152, 340, 397, 146, 147,
	148, 149, 110, 83, 96, 123, 338, 339, 336, 337,
	373, 374, 406, 407, 408, 389, 333, 0, 0, 392,
	376, 75, 0, 101, 150, 118, 92, 141, 401, 391,
	0, 364, 403, 342, 356, 411, 357, 358, 385, 330,
	372, 113, 354, 0, 345, 325, 351, 326, 343, 366,
	90, 369, 341, 393, 375, 100, 409, 102, 380, 0,
	124, 109, 0, 0, 368, 395, 370, 390, 363, 386,
	335, 379, 404, 355, 383, 405, 0, 0, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	382, 400, 353, 384, 324, 381, 0, 328, 331, 410,
	398, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	367, 371, 387, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 378, 0, 0, 0, 332, 329,
	0, 365, 0, 0, 0, 334, 0, 347, 388, 0,
	323, 396, 362, 165, 399, 360, 359, 402, 116, 0,
	0, 127, 95, 94, 394, 344, 352, 86, 350, 121,
	114, 139, 377, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 327, 0, 125, 140, 152, 340, 397, 146,
	147, 148, 149, 110, 83, 96, 123, 338, 339, 336,
	337, 373, 374, 406, 407, 408, 389, 333, 0, 0,
	392, 376, 75, 0, 101, 150, 118, 92, 141, 113,
	0, 0, 684, 0, 217, 0, 0, 0, 90, 0,
	214, 0, 0, 100, 254, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 215, 235, 234,
	237, 238, 239, 240, 0, 0, 84, 236, 241, 242,
	243, 0, 0, 212, 228, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 208, 0,
	0, 0, 265, 0, 227, 0, 0, 223, 224, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 263, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 255, 264, 261, 262, 259,
	260, 258, 257, 256, 266, 249, 250, 252, 0, 251,
	75, 0, 101, 150, 118, 92, 141, 113, 0, 0,
	0, 0, 217, 0, 0, 0, 90, 0, 214, 0,
	0, 100, 254, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 422, 215, 235, 234, 237, 238,
	239, 240, 0, 0, 84, 236, 241, 242, 243, 0,
	0, 212, 228, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 0, 0, 0, 0,
	265, 0, 227, 0, 0, 223, 224, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 263, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 110,
	83, 96, 123, 255, 264, 261, 262, 259, 260, 258,
	257, 256, 266, 249, 250, 252, 0, 251, 75, 0,
	101, 150, 118, 92, 141, 113, 0, 0, 0, 0,
	217, 0, 0, 0, 90, 0, 214, 0, 0, 100,
	254, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 215, 235, 234, 237, 238, 239, 240,
	0, 0, 84, 236, 241, 242, 243, 0, 0, 212,
	228, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 208, 0, 0, 0, 265, 0,
	227, 0, 0, 223, 224, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	263, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 0, 146, 147, 148, 149, 110, 83, 96,
	123, 255, 264, 261, 262, 259, 260, 258, 257, 256,
	266, 249, 250, 252, 23, 251, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 113, 0, 0, 0,
	0, 217, 0, 0, 0, 90, 0, 214, 0, 0,
	100, 254, 102, 0, 0, 124, 109, 0, 0, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 215, 235, 234, 237, 238, 239,
	240, 0, 0, 84, 236, 241, 242, 243, 0, 0,
	212, 228, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 0, 0, 0, 0, 265,
	0, 227, 0, 0, 223, 224, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 263, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 0, 146, 147, 148, 149, 110, 83,
	96, 123, 255, 264, 261, 262, 259, 260, 258, 257,
	256, 266, 249, 250, 252, 0, 251, 75, 0, 101,
	150, 118, 92, 141, 113, 0, 0, 0, 0, 217,
	0, 0, 0, 90, 0, 214, 0, 0, 100, 254,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 215, 235, 234, 237, 238, 239, 240, 0,
	0, 84, 236, 241, 242, 243, 0, 0, 212, 228,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 0, 0, 0, 0, 265, 0, 227,
	0, 0, 223, 224, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 263,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	255, 264, 261, 262, 259, 260, 258, 257, 256, 266,
	249, 250, 252, 113, 251, 75, 0, 101, 150, 118,
	92, 141, 90, 0, 0, 0, 0, 100, 254, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 215, 235, 234, 237, 238, 239, 240, 0, 0,
	84, 236, 241, 242, 243, 0, 0, 0, 228, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 0, 0, 0, 0, 265, 0, 227, 0,
	0, 223, 224, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 263, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 1153, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	0, 146, 147, 148, 149, 110, 83, 96, 123, 255,
	264, 261, 262, 259, 260, 258, 257, 256, 266, 249,
	250, 252, 113, 251, 75, 0, 101, 150, 118, 92,
	141, 90, 0, 0, 0, 0, 100, 254, 102, 0,
	0, 124, 109, 0, 0, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	215, 235, 234, 237, 238, 239, 240, 0, 0, 84,
	236, 241, 242, 243, 0, 0, 0, 228, 0, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 0, 0, 0, 0, 265, 0, 227, 0, 0,
	223, 224, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 263, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 0,
	146, 147, 148, 149, 110, 83, 96, 123, 255, 264,
	261, 262, 259, 260, 258, 257, 256, 266, 249, 250,
	252, 113, 251, 75, 0, 101, 150, 118, 92, 141,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 456, 455, 465, 466, 458, 459,
	460, 461, 462, 463, 464, 457, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 101, 150, 118, 92, 141, 113,
	0, 0, 0, 444, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 446,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 441, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 113, 146, 147, 148,
	149, 110, 83, 96, 123, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 67, 0,
	0, 0, 71, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 69, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 0, 146, 147, 148, 149, 110, 83,
	96, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 113, 0, 0, 0, 538, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 540, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 75, 0, 101, 150, 118,
	92, 141, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	0, 146, 147, 148, 149, 110, 83, 96, 123, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 75, 0, 101, 150, 118, 92,
	141, 90, 0, 0, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 113,
	146, 147, 148, 149, 110, 83, 96, 123, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	635, 0, 0, 636, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 113, 0, 0,
	0, 538, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 540, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 536,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 75, 0,
	101, 150, 118, 92, 141, 0, 0, 0, 0, 50,
	0, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 113, 146, 147, 148, 149, 110, 83, 96, 123,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 75, 0, 101, 150, 118,
	92, 141, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 540, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 113, 146,
	147, 148, 149, 110, 83, 96, 123, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 75, 0, 101, 150, 118, 92, 141, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 446, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 0, 146, 147, 148, 149,
	110, 83, 96, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 75,
	0, 101, 150, 118, 92, 141, 516, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 276, 0,
	0, 125, 140, 152, 0, 113, 146, 147, 148, 149,
	110, 83, 96, 123, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 113, 146, 147, 148, 149, 110, 83, 96,
	123, 90, 0, 0, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 165, 0, 0, 0, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 113,
	146, 147, 148, 149, 110, 83, 96, 123, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 113, 146, 147, 148,
	149, 110, 83, 96, 123, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 113, 146, 147, 148, 149, 110, 83,
	96, 123, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 286, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 113, 146, 147,
	148, 149, 287, 285, 96, 123, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 286, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 287,
	285, 284, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	101, 150, 118, 92, 141,
}
var yyPact = [...]int{

	1576, -1000, -162, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 735, 760, -1000, -1000, -1000, -1000, -1000, -1000, 559,
	5908, 8, 46, 13, 7984, 43, 250, 8515, -1000, -55,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 551, -1000, -1000,
	-1000, -1000, -1000, 720, 730, 556, 713, 651, -1000, 4507,
	0, 7076, 7807, 8869, -1000, 452, 44, 8515, -129, 8161,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20, 8515, -1000, 8515, -5, 427, -5,
	8515, -1000, 81, -1000, -1000, -1000, -1000, 8515, 425, 671,
	36, 2557, 2557, 2557, 2557, -45, 2557, 2557, 577, -1000,
	-1000, -1000, -1000, 2557, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 321, 680, 4926, 4926, 735, -1000, 551,
	-1000, -1000, -1000, 663, -1000, -1000, 227, 743, -1000, 5731,
	79, -1000, 4926, 1739, 527, -1000, -1000, 527, -1000, -1000,
	55, -1000, -1000, 5324, 5324, 5324, 5324, 5324, 5324, 5324,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 527, -1000, 4718, 527, 527, 527,
	527, 527, 527, 4926, 527, 527, 527, 527, 527, 527,
	527, 527, 527, 527, 527, 527, 527, 7630, 506, 1109,
	-1000, -1000, -1000, 710, 6514, 6899, 8515, 488, -1000, 517,
	8338, 2999, -1000, -1000, -1000, -1000, 670, -1000, 129, -1000,
	74, 449, -1000, 1615, 394, 2557, 16, 533, 8515, 154,
	8515, 2557, 14, 8515, 704, 575, 8515, -1000, 3883, -1000,
	2557, 2557, 2557, 2557, 2557, 2557, 2557, 2557, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2557, 2557, -1000, -1000, 8515,
	-1000, -1000, -1000, -1000, 755, 96, 265, 73, 516, -1000,
	309, 720, 321, 651, 6691, 587, -1000, -1000, 8515, -1000,
	4926, 4926, 351, -1000, 7430, -1000, -1000, 3220, 110, 5324,
	232, 204, 5324, 5324, 5324, 5324, 5324, 5324, 5324, 5324,
	5324, 5324, 5324, 5324, 5324, 5324, 5324, 299, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 385, -1000, 551, 603,
	603, 98, 98, 98, 98, 98, 98, 5523, 4091, 321,
	435, 157, 4718, 4507, 4507, 4926, 4926, 4507, 714, 143,
	157, 8161, -1000, 321, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4507, 4507, 4507, 4507, -32, 8515, -1000, 8338, 7076,
	7076, 7076, 7076, 7076, -1000, 605, 604, -1000, 632, 630,
	613, 8515, -1000, 433, 6514, 77, 527, -1000, 7253, -1000,
	-1000, -32, 7076, 8515, -1000, -1000, 8692, 476, -1000, -1000,
	-1000, -1000, 4926, 3662, 2336, 83, 238, -103, -1000, -1000,
	534, -1000, 534, 534, 534, 534, -84, -84, -84, -84,
	-1000, -1000, -1000, -1000, -1000, 558, -1000, 534, 534, 534,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 555, 555,
	555, 536, 536, 545, -1000, 8515, -148, 365, -1000, 702,
	54, -1000, 8515, -1000, -1000, 8515, 2557, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 637, 4926, 4926, 3662, 4926, -1000, -1000, -1000,
	680, -1000, 714, 725, -1000, 662, 655, 4507, -1000, -1000,
	110, 210, -1000, -1000, 240, -1000, -1000, -1000, -1000, 70,
	527, -1000, 1228, -1000, -1000, -1000, -1000, 232, 5324, 5324,
	5324, 248, 1228, 1460, 705, 1268, 98, 732, 732, 99,
	99, 99, 99, 99, 919, 919, -1000, -1000, -1000, 321,
	-1000, -1000, -1000, 321, 4507, 514, -1000, -1000, 4926, -1000,
	321, 431, 431, 372, 216, 431, 4507, 222, -1000, 4926,
	321, -1000, 431, 321, 431, 431, 508, 527, -1000, 532,
	1109, 544, 572, 892, -1000, -1000, -1000, -1000, 592, -1000,
	590, -1000, -1000, -1000, -1000, -1000, 41, 39, 18, 8161,
	-1000, 741, 520, -1000, 2999, -1000, 8338, -1000, 157, -1000,
	67, 510, 2115, -1000, -1000, -1000, -1000, -1000, -1000, 539,
	694, 106, 359, -1000, -1000, 677, -1000, 209, -105, -1000,
	-1000, 300, -84, -84, -1000, -1000, 88, 667, 88, 88,
	88, 315, -1000, -1000, -1000, -1000, 292, -1000, -1000, -1000,
	272, -1000, 567, 8161, 2557, -1000, 3441, -1000, -1000, -1000,
	-1000, 310, 276, 101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -33, -1000, 2557, -1000, 620,
	157, 157, -1000, -1000, 8515, -1000, -1000, -1000, -1000, 515,
	-1000, -1000, -1000, 2778, 4507, -1000, 248, 1228, 1374, -1000,
	5324, 5324, -1000, -1000, 431, 4507, 157, -1000, -1000, -1000,
	19, 299, 19, -139, 504, 135, -1000, 4926, 153, -1000,
	-1000, -1000, -1000, -1000, 565, 8338, 527, -1000, 6315, 8161,
	735, 4926, -1000, -1000, 4926, 537, -1000, 4926, -1000, -1000,
	-1000, 527, 527, 527, 376, -1000, 735, -1000, -1000, 3441,
	2336, -1000, 2336, 8161, -1000, 328, -1000, -1000, 562, 42,
	-1000, -1000, -1000, 463, 88, 88, -1000, 311, 136, -1000,
	-1000, -1000, 422, -1000, 509, 400, 8515, -1000, -1000, 499,
	-1000, 126, -1000, -1000, 8161, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8161, 8515, -1000, -1000, -1000,
	-1000, -1000, 8161, -1000, -1000, -1000, 741, 7076, -1000, -1000,
	321, -1000, 5324, 1228, 1228, -1000, -1000, 321, 534, 534,
	-1000, 534, 536, -1000, 534, -65, 534, -67, 321, 321,
	527, -136, -1000, 157, 4926, -1000, 696, 480, 496, -1000,
	-1000, 4299, 321, 378, 61, 376, 720, 157, 157, 8161,
	157, 8161, 8161, 8161, 6116, 8161, 720, -1000, 2115, -1000,
	373, -1000, 534, -1000, -99, 754, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -84, 307, 263,
	-1000, 242, 2557, 3441, 2336, -1000, 530, -1000, -1000, -1000,
	-1000, 698, 734, 497, -1000, 1228, -1000, -1000, 38, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5324, 321, 306,
	157, 692, -1000, 527, -1000, -1000, 519, 8161, 8161, -1000,
	-1000, 345, -1000, 333, 333, 333, 77, -1000, -1000, 545,
	8161, -1000, 92, -1000, -119, 88, -1000, 455, 334, -1000,
	-1000, -1000, 8161, 527, 727, 726, -1000, -1000, 50, -1000,
	-1000, 746, -1000, 527, -1000, 551, 48, -1000, 8161, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 219, 687, -1000, 686,
	-1000, -1000, -1000, -1000, 327, -34, -1000, 4926, 4926, 321,
	34, -152, 8338, 496, 321, 8161, -1000, -1000, 305, -1000,
	-1000, 533, 320, -1000, 8161, 157, 492, -1000, 617, -146,
	-158, 476, -1000, -1000, -1000, -148, -1000, -34, 653, -1000,
	606, -1000, -1000, -1000, -44, -149, -38, -153, 527, -159,
	5125, -1000, 1324, 321, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1012, 12, 517, 1011, 1009, 1005, 1000, 995, 993,
	991, 988, 987, 983, 982, 981, 980, 979, 978, 976,
	971, 967, 965, 959, 87, 958, 952, 951, 55, 949,
	58, 948, 947, 36, 198, 43, 39, 124, 945, 24,
	59, 54, 941, 38, 932, 931, 928, 927, 53, 925,
	924, 975, 922, 921, 14, 27, 917, 916, 915, 914,
	68, 7, 913, 912, 908, 905, 903, 899, 46, 4,
	10, 31, 16, 898, 159, 8, 897, 40, 896, 894,
	893, 890, 41, 887, 45, 885, 19, 44, 884, 20,
	51, 29, 22, 9, 47, 30, 882, 299, 880, 117,
	879, 877, 870, 861, 856, 61, 323, 475, 494, 57,
	854, 37, 5, 1129, 63, 49, 23, 853, 32, 96,
	34, 852, 851, 26, 850, 849, 848, 842, 841, 835,
	390, 827, 826, 822, 33, 11, 821, 820, 52, 21,
	819, 818, 816, 815, 50, 814, 42, 812, 809, 795,
	28, 18, 784, 15, 783, 779, 3, 778, 17, 775,
	6, 774, 2, 35, 773, 770, 0, 25, 769, 766,
	67,
}
var yyR1 = [...]int{

	0, 164, 165, 165, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 168, 168,
	46, 46, 90, 90, 10, 10, 10, 10, 94, 94,
	94, 111, 111, 121, 121, 11, 11, 11, 11, 11,
	162, 162, 161, 160, 160, 159, 159, 158, 16, 147,
	148, 148, 148, 144, 124, 124, 124, 127, 127, 125,
	125, 125, 125, 125, 125, 125, 126, 126, 126, 126,
	126, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	143, 143, 130, 130, 138, 138, 139, 139, 139, 136,
	136, 137, 137, 140, 140, 140, 131, 131, 131, 131,
	131, 131, 133, 133, 141, 141, 134, 134, 134, 135,
	135, 142, 142, 142, 142, 142, 132, 132, 145, 152,
	152, 152, 152, 146, 146, 154, 154, 153, 149, 149,
	149, 150, 150, 150, 151, 151, 151, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 157, 155, 155, 156, 156,
	13, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	122, 122, 122, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 169, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 110, 110, 110, 109,
	109, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 117, 117, 116, 116,
	116, 115, 115, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	98, 98, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 170, 170, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 120, 120, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 95, 96, 96, 99, 99, 100,
	100, 97, 97, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 102, 102, 102, 103, 103, 104, 104,
	104, 112, 112, 107, 107, 108, 108, 113, 113, 114,
	114, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	166, 167, 118, 119, 119, 119,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 7, 3, 4, 5, 1, 2,
	1, 1, 1, 1, 1, 2, 8, 4, 6, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -164, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -166, 8, 213,
	53, -165, 226, -82, 15, -26, 5, -24, -169, -24,
	-24, -24, -24, -24, -147, 53, -104, 120, 70, 146,
	118, 124, -107, 56, -106, 219, 150, 161, 155, 182,
	174, 172, 175, 201, 65, 153, 134, 170, 166, 164,
	27, 187, 224, 165, 130, 129, 202, 159, 160, 186,
	32, 221, 34, 142, 185, 181, 184, 158, 180, 38,
	200, 177, 167, 18, 137, 140, 125, 144, 223, 163,
	141, 136, 154, 203, 37, 191, 157, 128, 151, 148,
	178, 143, 168, 169, 183, 156, 179, 152, 145, 138,
	192, 225, 176, 173, 149, 147, 196, 197, 198, 199,
	222, 171, 193, -97, 120, 122, 118, 118, 119, 120,
	118, -51, -113, 56, -106, 120, 146, 118, 106, 175,
	112, 194, 119, 32, 144, -122, 118, 195, 147, 196,
	197, 198, 199, 56, 203, 202, -113, 152, -118, -118,
	-118, -118, -118, -2, -86, 17, 16, -5, -3, -166,
	6, 20, 21, -30, 39, 40, -25, -36, 97, -37,
	-113, -56, 72, -61, 29, 56, -106, 23, -60, -57,
	-75, -73, -74, 106, 107, 95, 96, 103, 73, 108,
	-65, -63, -64, -66, 58, 57, 66, 59, 60, 61,
	62, 67, 68, 69, -107, -71, -166, 43, 44, 214,
	215, 218, 216, 75, 33, 204, 212, 211, 210, 208,
	209, 206, 207, 123, 205, 101, 213, -97, -39, -40,
	-41, -42, -53, -74, -166, -51, 11, -46, -51, -93,
	-121, -94, -95, 203, 202, 201, 175, 200, -75, -107,
	-113, -148, -144, 56, 119, -51, 213, -107, -100, 123,
	118, -51, -51, -99, 123, 56, -99, -51, 109, -51,
	56, 30, 205, 56, 144, 118, 145, 120, -119, -166,
	-108, -107, -105, 117, 71, 22, 24, 189, 74, 106,
	16, 75, 105, 214, 112, 47, 206, 207, 204, 205,
	194, 29, 10, 25, 132, 21, 99, 114, 78, 79,
	135, 23, 133, 69, 19, 50, 11, 13, 14, 123,
	122, 90, 119, 45, 8, 108, 26, 87, 41, 28,
	43, 88, 17, 208, 209, 31, 218, 139, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 115, 213,
	44, 6, 217, 30, 131, 42, 118, 195, 77, 121,
	68, 5, 124, 9, 49, 52, 210, 211, 212, 33,
	76, 12, -119, -119, -119, 148, 149, -119, -119, 51,
	-119, -167, 55, -87, 19, 31, -37, -113, -83, -84,
	-37, -82, -2, -24, 35, -28, 21, 64, 11, -110,
	71, 70, 87, -109, 22, -107, 58, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 80, 81,
	82, 83, 84, 85, 86, -98, -166, -74, -166, 110,
	111, -61, -61, -61, -61, -61, -61, -61, -166, -2,
	-69, -37, -166, -166, -166, -166, -166, -166, -166, -78,
	-37, -166, -170, -166, -170, -170, -170, -170, -170, -170,
	-170, -166, -166, -166, -166, -52, 26, -51, 30, 54,
	-47, -49, -48, -50, 41, 45, 47, 42, 43, 44,
	48, -117, 22, -39, -166, -116, 140, -115, 22, -113,
	58, -51, -168, 54, 11, 52, 54, -93, -111, -108,
	58, 30, 80, 109, 55, 54, -124, -127, -129, -128,
	-125, -126, 172, 173, 106, 176, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 134, 168, 169, 170,
	171, 155, 156, 157, 158, 159, 160, 161, 163, 164,
	165, 166, 167, 56, -119, 120, -162, 52, -51, 72,
	-51, -119, 121, -51, 23, 51, -51, -114, -113, -105,
	-119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
	-51, 9, 90, 54, 18, 109, 54, -85, 24, 25,
	-86, -167, -30, -62, -107, 59, 62, -29, 42, -51,
	-37, -37, -67, 67, 72, 68, 69, -109, 97, -114,
	-108, -105, -61, -68, -71, -74, 63, 90, 88, 89,
	74, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -120, 56, 58, 56,
	-60, -60, -107, -35, 21, -34, -36, -167, 54, -167,
	-2, -34, -34, -37, -37, -34, -28, -76, -77, 76,
	-107, -167, -34, -35, -34, -34, -90, 140, -51, -93,
	-40, -41, -41, -40, -41, 41, 41, 41, 46, 41,
	46, 41, -48, -113, -167, -54, 49, 122, 50, -166,
	-115, -90, -39, -51, -94, -95, 54, -118, -37, -108,
	-114, -149, -150, -151, -108, 58, 59, -144, -145, -152,
	125, 124, -146, 119, 28, -140, 67, 72, -136, 192,
	-130, 53, -130, -130, -130, -130, -134, 175, -134, -134,
	-134, 53, -130, -130, -130, -138, 53, -138, -138, -139,
	53, -139, -112, 52, -51, -160, 222, -161, 56, 23,
	-101, 117, 114, 115, -157, 113, 189, 175, 65, 29,
	15, 214, 140, 225, 56, 141, -51, -51, -119, 37,
	-37, -37, -84, -87, -96, 19, 11, 33, 33, -34,
	67, 68, 69, 109, -166, -68, -61, -61, -61, -33,
	135, 71, -167, -167, -34, 54, -37, -167, -167, -167,
	54, 52, 22, -167, -34, -79, -77, 78, -37, -167,
	-167, -167, -167, -167, -59, 30, 33, -2, -166, -166,
	-55, 12, -44, -43, 51, 52, -45, 51, -43, 41,
	41, 119, 119, 119, -91, -107, -55, -55, -111, 109,
	54, -151, 80, 53, 28, -146, 56, 56, -131, 29,
	67, -137, 193, 59, -134, -134, -135, 105, 30, -135,
	-135, -135, -143, 58, 59, 59, 51, -107, -119, -159,
	-158, -108, -118, -163, 146, 126, 127, 130, 129, 56,
	119, 28, 125, 128, -163, 146, -102, -103, 121, 22,
	119, 28, 140, -119, 38, -51, -38, 11, 97, -108,
	-35, -33, 71, -61, -61, -167, -36, -123, 106, 172,
	134, 170, 166, 186, 177, 191, 168, 192, -120, -123,
	219, -82, 79, -37, 77, -92, 51, -93, -70, -72,
	-71, -166, -2, -88, -107, -91, -82, -37, -37, 53,
	-37, -166, -166, -166, -167, 54, -82, -118, -150, -151,
	-154, -153, -107, 56, -133, 51, 58, 59, 60, 67,
	204, 55, -135, -135, 56, 56, 106, 55, 54, 54,
	55, 54, -51, 54, 80, -118, -107, -118, -107, -51,
	-118, -107, -55, -39, -167, -61, -167, -130, -130, -130,
	-139, -130, 160, -130, 160, -167, -167, -166, -32, 217,
	-37, 27, -92, 54, -167, -167, -167, 54, 109, -167,
	-86, -89, -107, -89, -89, -89, -116, -107, -86, 55,
	54, -130, -141, 189, 9, -134, 58, 59, 59, -119,
	-158, -151, 53, 26, -80, 13, -134, 56, -61, -167,
	58, 28, -72, 33, -2, -166, -107, -107, 54, 55,
	-167, -167, -167, -54, -112, -153, -142, 125, 28, 124,
	204, -135, 55, 55, -89, -166, -81, 14, 16, -31,
	90, 222, 9, -70, -2, 109, -107, -132, 65, 28,
	28, 55, -155, -156, 140, -37, -69, -167, 220, 48,
	223, -93, -167, -107, 58, -162, -167, 54, -107, 38,
	221, 224, -160, -156, 33, 38, 142, 222, 143, 223,
	-166, 224, -61, 139, -167, -167,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 459, 0, 234, 234, 234, 234, 234, 234, 0,
	518, 501, 0, 0, 0, 0, 220, 224, 225, 0,
	227, 228, 702, 702, 702, 702, 702, 0, 33, 34,
	700, 1, 3, 467, 0, 0, 238, 241, 236, 0,
	501, 0, 0, 0, 55, 0, 0, 690, 0, 691,
	499, 519, 520, 523, 524, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 692, 693, 694, 695, 696,
	697, 698, 699, 0, 0, 502, 0, 497, 0, 497,
	0, 195, 305, 527, 528, 690, 691, 0, 0, 0,
	0, 703, 703, 703, 703, 0, 703, 703, 213, 215,
	216, 217, 218, 703, 221, 222, 223, 226, 229, 230,
	231, 232, 233, 27, 471, 0, 0, 459, 29, 0,
	234, 239, 240, 244, 242, 243, 235, 0, 252, 256,
	0, 313, 0, 318, 320, -2, -2, 0, 355, 356,
	357, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	382, 383, 384, 385, 444, 445, 446, 447, 448, 449,
	450, 451, 322, 323, 441, 491, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 406, 406, 406, 406, 406,
	406, 406, 406, 0, 0, 0, 0, 0, 0, 263,
	265, 266, 267, 286, 0, 288, 0, 0, 40, 45,
	0, 0, 492, -2, -2, -2, 627, -2, 0, 441,
	0, 0, 70, 0, 0, 703, 0, 60, 0, 0,
	0, 703, 0, 0, 0, 0, 0, 194, 0, 196,
	703, 703, 703, 703, 703, 703, 703, 703, 205, 704,
	705, 525, 526, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 206, 207, 208, 703, 703, 210, 211, 0,
	219, 28, 701, 22, 0, 0, 468, 0, 460, 461,
	464, 467, 27, 241, 0, 246, 245, 237, 0, 253,
	0, 0, 0, 257, 0, 259, 260, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	342, 343, 344, 345, 346, 319, 0, 333, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 248, 27,
	0, 353, 0, 0, 0, 0, 0, 0, 244, 0,
	433, 0, 398, 0, 399, 400, 401, 402, 403, 404,
	405, 0, 248, 0, 0, 42, 0, 304, 0, 0,
	0, 0, 0, 0, 293, 0, 0, 296, 0, 0,
	0, 0, 287, 0, 0, 307, 660, 289, 0, 291,
	292, 42, 0, 0, 38, 39, 0, 46, 702, 51,
	52, 49, 0, 0, 158, 0, 123, 119, 75, 76,
	112, 78, 112, 112, 112, 112, 136, 136, 136, 136,
	104, 105, 106, 107, 108, 0, 91, 112, 112, 112,
	95, 79, 80, 81, 82, 83, 84, 85, 114, 114,
	114, 116, 116, 521, 57, 0, 63, 0, 68, 0,
	0, 174, 0, 191, 498, 0, 703, 306, 529, 530,
	197, 198, 199, 200, 201, 202, 203, 204, 209, 212,
	214, 472, 0, 0, 0, 0, 0, 463, 465, 466,
	471, 30, 244, 0, 452, 0, 0, 0, 247, 25,
	314, 315, 317, 334, 0, 336, 338, 258, 254, 0,
	442, -2, 324, 325, 349, 350, 351, 0, 0, 0,
	0, 347, 329, 0, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 374, 417, 418, 0,
	372, 373, 381, 0, 0, 249, 250, 352, 0, 490,
	27, 0, 0, 0, 0, 0, 0, 439, 436, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 303, 311,
	264, 282, 284, 0, 279, 294, 295, 297, 0, 299,
	0, 301, 302, 268, 269, 270, 0, 0, 0, 0,
	290, 311, 311, 41, 0, 493, 0, 47, 494, 442,
	0, 69, 159, 161, 164, 165, 166, 71, 72, 0,
	0, 0, 0, 153, 154, 126, 124, 0, 121, 120,
	77, 0, 136, 136, 98, 99, 139, 0, 139, 139,
	139, 0, 92, 93, 94, 86, 0, 87, 88, 89,
	0, 90, 0, 0, 703, 59, 0, 61, 62, 500,
	702, 0, 0, 513, 175, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 0, 190, 703, 193, 0,
	469, 470, 462, 23, 0, 495, 496, 453, 454, 261,
	335, 337, 339, 0, 248, 326, 347, 330, 0, 327,
	0, 0, 321, 386, 0, 0, 354, -2, 389, 390,
	0, 0, 0, 0, 459, 0, 437, 0, 0, 397,
	408, 409, 410, 411, 484, 0, 0, -2, 0, 0,
	459, 0, 276, 283, 0, 0, 277, 0, 278, 298,
	300, 0, 0, 0, 0, 274, 459, 37, 702, 0,
	0, 162, 0, 0, 149, 0, 151, 152, 132, 0,
	125, 74, 122, 0, 139, 139, 100, 0, 0, 101,
	102, 103, 0, 110, 0, 0, 0, 522, 58, 64,
	65, 0, 167, 702, 0, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 702, 0, 0, 702, 514, 515,
	516, 517, 0, 192, 473, 24, 311, 0, 255, 443,
	0, 328, 0, 348, 331, 387, 251, 0, 112, 112,
	422, 112, 116, 425, 112, 427, 112, 430, 0, 0,
	0, 434, 396, 440, 0, 31, 0, 484, 474, 486,
	488, 0, 27, 0, 480, 0, 467, 312, 280, 0,
	285, 0, 0, 0, 288, 0, 467, 44, 160, 163,
	0, 155, 112, 150, 134, 0, 127, 128, 129, 130,
	131, 113, 96, 97, 140, 137, 138, 136, 0, 0,
	117, 0, 703, 0, 0, 168, 0, 169, 171, 172,
	173, 0, 455, 262, 388, 332, 391, 419, 136, 423,
	424, 426, 428, 429, 431, 393, 392, 0, 0, 0,
	438, 0, 32, 0, 489, -2, 0, 0, 0, 43,
	35, 0, 272, 0, 0, 0, 307, 275, 36, 521,
	0, 157, 141, 135, 0, 139, 111, 0, 0, 56,
	66, 67, 0, 0, 457, 0, 420, 421, 412, 395,
	435, 0, 487, 0, -2, 0, 482, 481, 0, 281,
	308, 309, 310, 271, 148, 156, 146, 0, 143, 145,
	133, 109, 115, 118, 0, 0, 26, 0, 0, 0,
	0, 0, 0, 477, 27, 0, 273, 73, 0, 142,
	144, 60, 0, 186, 0, 458, 456, 394, 0, 0,
	0, 485, -2, 483, 147, 63, 185, 0, 0, 413,
	0, 416, 170, 187, 0, 414, 0, 0, 0, 0,
	0, 415, 0, 0, 188, 189,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 226,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:287
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:292
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:293
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:297
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:320
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:338
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:372
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:384
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:406
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:416
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:422
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:430
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:435
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:439
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs, Charset: yyDollar[6].colIdent}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:453
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:457
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:468
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:478
		{
			yyVAL.str = SessionStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.str = GlobalStr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:488
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:493
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:498
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:502
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:506
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:515
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:519
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:530
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:546
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:552
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:558
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:577
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:581
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:587
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:608
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:761
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:766
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:780
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:784
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:792
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:796
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:802
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:810
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:819
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:829
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:842
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:867
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:871
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:876
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:885
		{
			yyVAL.str = ""
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.str = ""
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:907
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:911
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.colKeyOpt = colKey
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:928
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:932
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:938
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:976
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:982
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = yyDollar[1].str
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1066
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1071
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1129
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1137
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1142
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.str = SessionStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.str = GlobalStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.statement = &Begin{}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &Begin{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Commit{}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.statement = &Rollback{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &OtherRead{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &OtherRead{}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &OtherRead{}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1335
		{
			setAllowComments(yylex, true)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.bytes2 = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = UnionStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.str = UnionAllStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.str = UnionDistinctStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.str = SQLCacheStr
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.str = DistinctStr
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.str = StraightJoinHint
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.selectExprs = nil
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1555
		{
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.empty = struct{}{}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.str = JoinStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = StraightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = LeftJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = LeftJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = RightJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = RightJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.str = NaturalJoinStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1634
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.indexHints = nil
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.str = IsNullStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.str = IsNotNullStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = IsTrueStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.str = IsNotTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.str = IsFalseStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.str = IsNotFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = EqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = LessThanStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.str = GreaterThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.str = LessEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.str = GreaterEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = NotEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1965
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 394:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.str = BooleanModeStr
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.str = QueryExpansionStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.str = string("")
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &NullVal{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.exprs = nil
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.expr = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.orderBy = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.str = AscScr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.str = AscScr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.str = DescScr
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.limit = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.str = ForUpdateStr
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.str = ShareModeStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2436
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2449
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.updateExprs = nil
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.byt = 0
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.byt = 1
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.str = IgnoreStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2824
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2833
		{
			decNesting(yylex)
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2838
		{
			forceEOF(yylex)
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			forceEOF(yylex)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			forceEOF(yylex)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2851
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
