// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const KEYSPACES = 57566
const VITESS_KEYSPACES = 57567
const VITESS_SHARDS = 57568
const VITESS_TABLETS = 57569
const NAMES = 57570
const CHARSET = 57571
const GLOBAL = 57572
const SESSION = 57573
const ISOLATION = 57574
const LEVEL = 57575
const READ = 57576
const WRITE = 57577
const ONLY = 57578
const REPEATABLE = 57579
const COMMITTED = 57580
const UNCOMMITTED = 57581
const SERIALIZABLE = 57582
const CURRENT_TIMESTAMP = 57583
const DATABASE = 57584
const CURRENT_DATE = 57585
const CURRENT_TIME = 57586
const LOCALTIME = 57587
const LOCALTIMESTAMP = 57588
const UTC_DATE = 57589
const UTC_TIME = 57590
const UTC_TIMESTAMP = 57591
const REPLACE = 57592
const CONVERT = 57593
const CAST = 57594
const SUBSTR = 57595
const SUBSTRING = 57596
const GROUP_CONCAT = 57597
const SEPARATOR = 57598
const TIMESTAMPADD = 57599
const TIMESTAMPDIFF = 57600
const MATCH = 57601
const AGAINST = 57602
const BOOLEAN = 57603
const LANGUAGE = 57604
const WITH = 57605
const QUERY = 57606
const EXPANSION = 57607
const UNUSED = 57608
const ARRAY = 57609
const CUME_DIST = 57610
const DESCRIPTION = 57611
const DENSE_RANK = 57612
const EMPTY = 57613
const EXCEPT = 57614
const FIRST_VALUE = 57615
const GROUPING = 57616
const GROUPS = 57617
const JSON_TABLE = 57618
const LAG = 57619
const LAST_VALUE = 57620
const LATERAL = 57621
const LEAD = 57622
const MEMBER = 57623
const NTH_VALUE = 57624
const NTILE = 57625
const OF = 57626
const OVER = 57627
const PERCENT_RANK = 57628
const RANK = 57629
const RECURSIVE = 57630
const ROW_NUMBER = 57631
const SYSTEM = 57632
const WINDOW = 57633
const ACTIVE = 57634
const ADMIN = 57635
const BUCKETS = 57636
const CLONE = 57637
const COMPONENT = 57638
const DEFINITION = 57639
const ENFORCED = 57640
const EXCLUDE = 57641
const FOLLOWING = 57642
const GEOMCOLLECTION = 57643
const GET_MASTER_PUBLIC_KEY = 57644
const HISTOGRAM = 57645
const HISTORY = 57646
const INACTIVE = 57647
const INVISIBLE = 57648
const LOCKED = 57649
const MASTER_COMPRESSION_ALGORITHMS = 57650
const MASTER_PUBLIC_KEY_PATH = 57651
const MASTER_TLS_CIPHERSUITES = 57652
const MASTER_ZSTD_COMPRESSION_LEVEL = 57653
const NESTED = 57654
const NETWORK_NAMESPACE = 57655
const NOWAIT = 57656
const NULLS = 57657
const OJ = 57658
const OLD = 57659
const OPTIONAL = 57660
const ORDINALITY = 57661
const ORGANIZATION = 57662
const OTHERS = 57663
const PATH = 57664
const PERSIST = 57665
const PERSIST_ONLY = 57666
const PRECEDING = 57667
const PRIVILEGE_CHECKS_USER = 57668
const PROCESS = 57669
const RANDOM = 57670
const REFERENCE = 57671
const REQUIRE_ROW_FORMAT = 57672
const RESOURCE = 57673
const RESPECT = 57674
const RESTART = 57675
const RETAIN = 57676
const REUSE = 57677
const ROLE = 57678
const SECONDARY = 57679
const SECONDARY_ENGINE = 57680
const SECONDARY_LOAD = 57681
const SECONDARY_UNLOAD = 57682
const SKIP = 57683
const SRID = 57684
const THREAD_PRIORITY = 57685
const TIES = 57686
const UNBOUNDED = 57687
const VCPU = 57688
const VISIBLE = 57689
const FORMAT = 57690
const TREE = 57691
const VITESS = 57692
const TRADITIONAL = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 312,
	133, 312,
	145, 312,
	170, 326,
	171, 326,
	-2, 314,
	-1, 49,
	135, 336,
	-2, 334,
	-1, 72,
	39, 372,
	-2, 380,
	-1, 400,
	121, 703,
	-2, 699,
	-1, 401,
	121, 704,
	-2, 700,
	-1, 415,
	39, 373,
	-2, 385,
	-1, 416,
	39, 374,
	-2, 386,
	-1, 440,
	89, 958,
	-2, 74,
	-1, 441,
	89, 873,
	-2, 75,
	-1, 446,
	89, 840,
	-2, 665,
	-1, 448,
	89, 905,
	-2, 667,
	-1, 773,
	57, 56,
	59, 56,
	-2, 60,
	-1, 951,
	121, 706,
	-2, 702,
	-1, 1381,
	5, 624,
	18, 624,
	20, 624,
	32, 624,
	60, 624,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 17957

var yyAct = [...]int{

	400, 1620, 1610, 1420, 1577, 1307, 1232, 1057, 1212, 344,
	620, 1526, 1493, 1361, 1480, 359, 1394, 1030, 1362, 1213,
	1053, 1358, 373, 601, 1100, 746, 700, 739, 1258, 71,
	3, 1086, 1066, 1056, 330, 938, 1199, 1367, 1326, 92,
	1373, 873, 893, 290, 1150, 313, 290, 1070, 1284, 1275,
	787, 92, 1032, 290, 69, 945, 1016, 417, 445, 744,
	749, 971, 1027, 408, 767, 915, 618, 1096, 346, 786,
	570, 28, 784, 766, 1009, 402, 610, 434, 756, 290,
	92, 342, 72, 571, 290, 335, 290, 67, 775, 331,
	442, 431, 334, 713, 901, 66, 8, 7, 590, 6,
	1613, 1597, 1608, 714, 1585, 1605, 1421, 1596, 1584, 1343,
	1450, 1119, 575, 1388, 74, 75, 76, 77, 78, 79,
	94, 95, 96, 1047, 385, 1118, 391, 392, 389, 390,
	388, 387, 386, 1389, 1390, 423, 427, 1048, 1049, 403,
	393, 394, 30, 633, 333, 60, 34, 35, 286, 282,
	283, 284, 439, 788, 1327, 789, 94, 95, 96, 332,
	1266, 278, 339, 1079, 276, 1483, 280, 1117, 1552, 662,
	661, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 1246, 1087, 673, 1245, 1441, 1309, 1247, 94, 95,
	96, 607, 628, 609, 59, 1329, 629, 626, 627, 1439,
	323, 900, 325, 321, 862, 632, 621, 622, 631, 1311,
	861, 859, 1607, 1604, 1578, 1306, 1010, 1570, 1527, 948,
	1114, 1111, 1112, 1071, 1110, 606, 608, 1628, 1294, 1233,
	1235, 616, 1331, 1529, 1335, 591, 1330, 1624, 1328, 577,
	1073, 1535, 1310, 1333, 280, 863, 860, 902, 903, 904,
	1312, 866, 1332, 425, 636, 1073, 850, 1121, 1124, 1384,
	1290, 1291, 1292, 279, 1383, 1334, 1336, 1382, 573, 1303,
	580, 293, 94, 95, 96, 1305, 285, 290, 582, 583,
	281, 1169, 290, 1131, 592, 1559, 1130, 1166, 290, 277,
	1463, 94, 95, 96, 290, 599, 587, 1116, 605, 685,
	686, 1242, 1204, 1179, 1528, 92, 1158, 92, 781, 760,
	698, 1234, 336, 597, 92, 1080, 1054, 673, 604, 1115,
	666, 667, 668, 669, 670, 663, 92, 92, 673, 1087,
	615, 663, 1293, 1583, 673, 1043, 634, 1298, 1295, 1286,
	1296, 1289, 617, 1285, 1072, 294, 894, 1287, 1288, 1553,
	1536, 1534, 888, 1622, 297, 988, 1623, 642, 1621, 1072,
	82, 1297, 306, 1120, 584, 611, 585, 647, 648, 586,
	653, 603, 820, 623, 1568, 1544, 612, 613, 1122, 1304,
	635, 1302, 1371, 593, 594, 595, 94, 95, 96, 790,
	922, 685, 686, 650, 1165, 646, 304, 685, 686, 83,
	1345, 972, 311, 61, 920, 921, 919, 852, 1629, 653,
	683, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 1264, 1573, 673, 645, 643, 92, 644, 736, 290,
	290, 290, 295, 895, 737, 651, 652, 650, 92, 889,
	1407, 652, 650, 1347, 92, 972, 701, 1176, 442, 651,
	652, 650, 1630, 653, 1076, 602, 808, 753, 653, 308,
	298, 1077, 309, 310, 317, 785, 1588, 653, 301, 303,
	314, 299, 300, 319, 318, 750, 296, 316, 315, 576,
	716, 718, 720, 722, 724, 726, 727, 1489, 738, 1488,
	717, 719, 765, 723, 725, 59, 728, 821, 664, 665,
	666, 667, 668, 669, 670, 663, 1279, 918, 673, 1278,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	1267, 779, 774, 834, 837, 838, 839, 840, 841, 842,
	1590, 843, 844, 845, 846, 847, 822, 823, 824, 825,
	806, 807, 835, 275, 809, 437, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 826, 827, 828, 829,
	830, 831, 832, 833, 1164, 1569, 1163, 1506, 578, 579,
	290, 910, 912, 913, 848, 92, 1486, 851, 911, 853,
	290, 290, 92, 92, 92, 651, 652, 650, 290, 993,
	994, 290, 654, 990, 290, 871, 872, 1276, 290, 886,
	92, 412, 878, 653, 1541, 92, 92, 92, 290, 92,
	92, 94, 95, 96, 651, 652, 650, 1532, 1606, 836,
	428, 429, 92, 92, 877, 1073, 1592, 412, 336, 1143,
	1144, 1145, 653, 989, 748, 1532, 1581, 711, 94, 95,
	96, 849, 651, 652, 650, 1532, 412, 569, 856, 857,
	858, 777, 651, 652, 650, 1540, 875, 94, 95, 96,
	653, 1532, 1560, 742, 745, 68, 876, 1532, 1531, 1403,
	653, 880, 881, 882, 939, 884, 885, 1478, 1477, 916,
	1465, 412, 867, 941, 1462, 412, 1413, 1412, 890, 891,
	362, 361, 364, 365, 366, 367, 778, 92, 780, 363,
	368, 94, 95, 96, 777, 940, 1409, 1410, 897, 949,
	94, 95, 96, 1200, 1249, 1200, 960, 963, 1409, 1408,
	412, 1074, 973, 1001, 412, 917, 1037, 955, 776, 1072,
	92, 92, 1013, 412, 1069, 1067, 70, 1068, 30, 30,
	950, 649, 412, 1370, 1065, 1071, 797, 796, 92, 778,
	1359, 776, 1002, 1370, 1459, 290, 701, 951, 92, 1013,
	649, 1370, 290, 1207, 290, 1543, 1012, 942, 943, 1208,
	1513, 949, 290, 290, 1411, 1013, 290, 290, 1250, 1001,
	290, 290, 290, 92, 1046, 1182, 92, 952, 981, 982,
	59, 59, 59, 442, 1013, 1181, 442, 92, 571, 1001,
	985, 1028, 1007, 1001, 776, 991, 865, 1058, 1003, 782,
	995, 1598, 1495, 405, 1081, 1470, 1101, 30, 914, 951,
	1399, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 1005, 1253, 1038, 1097,
	875, 1092, 1040, 1088, 1089, 1090, 1374, 1375, 1036, 1091,
	1308, 290, 92, 1045, 92, 1044, 1123, 879, 1041, 1496,
	290, 290, 290, 290, 290, 59, 290, 290, 1061, 59,
	290, 92, 1102, 1104, 1615, 1611, 1401, 1377, 977, 1018,
	1021, 1022, 1023, 1019, 896, 1020, 1024, 1359, 290, 1374,
	1375, 1280, 898, 290, 869, 290, 290, 1224, 1380, 290,
	92, 1379, 1225, 905, 906, 907, 908, 1602, 1226, 1222,
	1022, 1023, 1098, 1099, 1223, 1221, 1220, 1138, 1106, 1595,
	1108, 412, 956, 957, 418, 1189, 962, 965, 966, 1018,
	1021, 1022, 1023, 1019, 1351, 1020, 1024, 1135, 419, 747,
	1600, 401, 916, 1198, 1197, 751, 752, 421, 1271, 420,
	795, 980, 600, 1263, 983, 984, 1575, 1574, 958, 959,
	968, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 1511, 969, 673, 418, 740, 1261, 1255,
	93, 1457, 1491, 1107, 291, 1146, 868, 291, 917, 741,
	419, 1026, 93, 409, 291, 406, 407, 415, 416, 421,
	1196, 420, 1456, 290, 410, 70, 1455, 1354, 1195, 1200,
	630, 1617, 1616, 1188, 290, 290, 290, 290, 290, 1160,
	291, 93, 1214, 1193, 403, 291, 290, 291, 1159, 1170,
	290, 1167, 1175, 892, 290, 761, 754, 1617, 290, 1209,
	1557, 1484, 987, 405, 1052, 1205, 68, 73, 65, 1,
	312, 1192, 1609, 1422, 1492, 1248, 1113, 92, 1576, 1231,
	1525, 1203, 1201, 1393, 1251, 1202, 1254, 1058, 1064, 1055,
	1259, 1259, 81, 1238, 568, 1240, 80, 1241, 1567, 1216,
	1217, 1227, 1219, 1147, 1148, 1149, 1237, 1215, 887, 614,
	1218, 1063, 1062, 1533, 1265, 1078, 1482, 1243, 1400, 1260,
	1239, 1262, 1572, 803, 801, 92, 92, 1270, 802, 1272,
	1273, 1274, 800, 805, 1268, 1269, 1256, 1257, 804, 799,
	305, 899, 1082, 1083, 1084, 1085, 322, 1317, 1025, 791,
	1103, 755, 84, 1301, 1300, 92, 1109, 1075, 1093, 1094,
	1095, 302, 1277, 624, 1283, 625, 307, 662, 661, 671,
	672, 664, 665, 666, 667, 668, 669, 670, 663, 92,
	1299, 673, 681, 1194, 1244, 939, 1155, 1156, 443, 1323,
	436, 1365, 1282, 992, 743, 1454, 1353, 1174, 710, 1314,
	1315, 970, 770, 345, 909, 1324, 360, 1173, 1325, 357,
	1348, 358, 1316, 996, 1206, 290, 655, 343, 337, 1344,
	1337, 1313, 769, 762, 1338, 92, 1017, 1015, 1014, 432,
	1376, 92, 92, 1322, 1372, 1323, 1360, 1214, 291, 768,
	1000, 950, 414, 291, 967, 1551, 1177, 1449, 413, 291,
	52, 1363, 33, 327, 638, 291, 422, 92, 951, 23,
	22, 21, 20, 1190, 1191, 745, 93, 19, 93, 1369,
	25, 92, 18, 92, 92, 93, 17, 1259, 1259, 1378,
	1392, 1058, 16, 1058, 1386, 588, 37, 93, 93, 1357,
	27, 26, 1406, 15, 1385, 14, 1387, 13, 12, 11,
	10, 290, 9, 5, 1391, 1397, 1398, 1396, 4, 1404,
	1405, 641, 976, 24, 699, 2, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 92, 0, 1423,
	92, 92, 92, 290, 1318, 1319, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	1340, 0, 1341, 1342, 1416, 0, 1418, 0, 1428, 1429,
	0, 0, 0, 0, 1349, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 1453, 0, 411, 0, 0, 93, 0, 0,
	291, 291, 291, 0, 0, 0, 0, 0, 0, 93,
	1214, 0, 1458, 0, 0, 93, 0, 0, 1432, 0,
	1467, 0, 92, 0, 0, 1466, 0, 0, 0, 1251,
	92, 0, 1058, 662, 661, 671, 672, 664, 665, 666,
	667, 668, 669, 670, 663, 92, 0, 673, 0, 0,
	0, 0, 92, 0, 0, 0, 1402, 0, 0, 0,
	1346, 0, 1494, 0, 0, 0, 1499, 0, 0, 0,
	1485, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 1355, 0, 0, 0, 0, 0,
	1497, 0, 0, 92, 92, 0, 92, 1498, 0, 0,
	0, 92, 0, 92, 92, 92, 290, 0, 1512, 92,
	1430, 1490, 1363, 1510, 0, 1519, 0, 1520, 1522, 1523,
	0, 1514, 0, 1524, 0, 1530, 92, 290, 0, 0,
	1537, 0, 0, 0, 0, 0, 1538, 0, 1539, 0,
	1545, 291, 0, 1505, 0, 0, 93, 0, 0, 0,
	0, 291, 291, 93, 93, 93, 0, 1558, 1566, 291,
	1518, 1564, 291, 92, 0, 291, 1363, 1565, 0, 291,
	0, 93, 0, 0, 92, 92, 93, 93, 93, 291,
	93, 93, 1580, 0, 1494, 1058, 1579, 0, 0, 0,
	92, 0, 0, 93, 93, 0, 1586, 1214, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 1594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1599, 1601, 92,
	0, 1451, 0, 0, 0, 0, 0, 1500, 1501, 1502,
	1503, 1504, 1614, 1603, 0, 1507, 1508, 0, 336, 1625,
	0, 0, 0, 374, 29, 1468, 0, 0, 1469, 0,
	0, 1471, 1452, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 1434, 1435, 0, 1436, 0, 0, 1438,
	0, 1440, 0, 29, 0, 662, 661, 671, 672, 664,
	665, 666, 667, 668, 669, 670, 663, 0, 0, 673,
	0, 93, 93, 662, 661, 671, 672, 664, 665, 666,
	667, 668, 669, 670, 663, 0, 0, 673, 0, 93,
	0, 404, 0, 0, 0, 0, 291, 0, 0, 93,
	0, 0, 0, 291, 0, 291, 0, 0, 0, 1509,
	336, 1479, 1151, 291, 291, 0, 0, 291, 291, 0,
	0, 291, 291, 291, 93, 0, 0, 93, 30, 31,
	32, 60, 34, 35, 1447, 0, 0, 0, 93, 1152,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 36, 55, 56, 0, 58, 0, 662,
	661, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 0, 0, 673, 0, 1618, 45, 0, 0, 0,
	59, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 291, 93, 673, 93, 0, 0, 0, 0,
	0, 291, 291, 291, 291, 291, 0, 291, 291, 0,
	0, 291, 93, 0, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 0, 0, 673, 291,
	0, 1446, 0, 0, 291, 0, 291, 291, 0, 0,
	291, 93, 0, 0, 0, 0, 38, 39, 41, 40,
	43, 0, 57, 0, 0, 0, 0, 0, 0, 371,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 0, 0, 673, 44, 63, 62, 0, 0,
	53, 54, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 47, 91, 48,
	49, 50, 51, 0, 0, 0, 0, 0, 0, 0,
	324, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 0, 0, 673, 0, 0, 619, 0,
	619, 0, 0, 0, 0, 0, 0, 619, 0, 444,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 1445, 291, 291, 291, 291, 291,
	0, 0, 0, 0, 682, 684, 0, 291, 0, 0,
	0, 291, 0, 0, 0, 291, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 953, 954, 0, 697, 0, 0, 93, 702,
	703, 704, 705, 706, 707, 708, 709, 0, 712, 715,
	715, 715, 721, 715, 715, 721, 715, 729, 730, 731,
	732, 733, 734, 735, 1444, 0, 0, 0, 29, 0,
	986, 0, 0, 0, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 93, 93, 673, 0,
	0, 0, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 657, 0, 660, 0, 0, 0, 0, 0, 674,
	675, 676, 677, 678, 679, 680, 93, 658, 659, 656,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 0, 0, 673, 0, 772, 0, 0, 0,
	93, 0, 0, 0, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 326,
	0, 0, 93, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 444, 0, 0, 0,
	0, 0, 0, 444, 0, 433, 0, 0, 93, 0,
	572, 0, 574, 0, 0, 637, 639, 0, 0, 0,
	0, 0, 93, 0, 93, 93, 0, 0, 619, 0,
	0, 0, 0, 0, 0, 619, 619, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 619, 0, 0, 0, 0, 619, 619,
	619, 0, 619, 619, 1153, 0, 0, 0, 1154, 0,
	0, 0, 291, 0, 0, 619, 619, 0, 93, 1161,
	1162, 93, 93, 93, 291, 1168, 0, 0, 1171, 1172,
	0, 0, 0, 0, 0, 0, 1178, 0, 0, 0,
	1180, 0, 0, 1183, 1184, 1185, 1186, 1187, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 444, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1229, 1230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 1029, 0, 0, 0, 771,
	0, 0, 0, 771, 93, 93, 0, 93, 0, 0,
	0, 0, 93, 0, 93, 93, 93, 291, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 93, 291, 0,
	0, 444, 444, 444, 0, 0, 0, 0, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 0, 0, 0, 444, 444, 444, 0, 444, 444,
	0, 0, 0, 0, 93, 619, 0, 619, 0, 0,
	0, 444, 444, 0, 0, 93, 93, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 1381, 764, 0, 773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 1157, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	979, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 758, 0, 1433,
	444, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	1442, 1443, 0, 1210, 1211, 0, 0, 771, 771, 771,
	771, 771, 444, 0, 0, 444, 0, 0, 0, 0,
	0, 0, 0, 1029, 0, 1236, 444, 1460, 1461, 0,
	1464, 771, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 854, 855, 1475, 0,
	0, 0, 0, 0, 864, 0, 0, 433, 0, 0,
	870, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 444, 0, 444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 619,
	444, 0, 0, 0, 0, 289, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 1142,
	0, 0, 0, 0, 0, 1521, 0, 426, 426, 0,
	0, 435, 0, 0, 0, 0, 289, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1547, 1548, 1549, 1550, 0, 1554, 0,
	1555, 1556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1561, 0, 1562, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1582, 0, 0, 0, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 1008, 0,
	1011, 0, 0, 0, 0, 0, 0, 0, 0, 1591,
	0, 0, 974, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1626, 1627, 0, 0, 0, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 1126, 1127, 1128,
	1129, 0, 1132, 1133, 1281, 444, 1134, 1448, 0, 289,
	0, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 1136, 0, 289, 0, 0, 1137,
	0, 0, 0, 0, 444, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 1473, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 0, 974, 0, 0,
	1366, 1368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
	444, 0, 444, 1395, 0, 1542, 0, 0, 0, 0,
	0, 289, 289, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1364, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 1612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 444, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 289, 444, 0, 0, 0, 0, 0,
	289, 444, 0, 289, 0, 0, 289, 0, 0, 0,
	874, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 1516, 0, 1517, 0, 0, 0, 0,
	1481, 0, 1481, 1481, 1481, 0, 0, 0, 1395, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 874, 1571, 0, 0, 426, 426, 1417, 0, 426,
	426, 426, 0, 444, 444, 975, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 1587,
	0, 0, 0, 0, 426, 426, 426, 426, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1593, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 874, 289, 0, 289, 0, 1481, 0,
	0, 0, 0, 0, 289, 1034, 0, 0, 289, 289,
	0, 0, 289, 1042, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 289, 289, 289, 289, 0, 289, 289,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 289, 0, 1139, 1140, 0,
	0, 289, 0, 1546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 1589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 426, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 289, 289, 289, 289,
	289, 0, 0, 0, 0, 0, 0, 0, 1228, 0,
	0, 0, 289, 0, 0, 0, 1034, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 554, 542, 0, 0, 499, 557, 472,
	489, 565, 490, 493, 530, 457, 512, 184, 487, 289,
	476, 452, 483, 453, 474, 501, 126, 505, 471, 544,
	515, 556, 155, 0, 477, 563, 158, 521, 0, 231,
	172, 0, 0, 0, 503, 546, 510, 539, 498, 531,
	462, 520, 558, 488, 528, 559, 0, 0, 0, 94,
	95, 96, 0, 1059, 1060, 0, 0, 0, 0, 0,
	116, 0, 525, 553, 485, 527, 529, 567, 451, 522,
	975, 455, 458, 564, 549, 480, 481, 1252, 0, 0,
	0, 0, 0, 289, 502, 511, 536, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 478, 0, 519, 0,
	0, 0, 459, 456, 0, 0, 0, 0, 500, 0,
	0, 0, 461, 0, 479, 537, 0, 449, 135, 541,
	548, 497, 292, 552, 495, 494, 555, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 545, 475, 484, 120, 482, 213, 191, 252, 518,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 454, 0, 232, 255, 274, 114, 470, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 466, 469, 464, 465,
	513, 514, 560, 561, 562, 538, 460, 0, 467, 468,
	0, 543, 550, 551, 517, 97, 106, 157, 271, 206,
	131, 256, 450, 463, 124, 473, 0, 0, 486, 491,
	492, 504, 506, 507, 508, 509, 516, 523, 524, 526,
	532, 533, 534, 535, 540, 547, 566, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 554, 542, 0, 0,
	499, 557, 472, 489, 565, 490, 493, 530, 457, 512,
	184, 487, 0, 476, 452, 483, 453, 474, 501, 126,
	505, 471, 544, 515, 556, 155, 0, 477, 563, 158,
	521, 0, 231, 172, 0, 0, 0, 503, 546, 510,
	539, 498, 531, 462, 520, 558, 488, 528, 559, 0,
	0, 0, 94, 95, 96, 0, 1059, 1060, 0, 0,
	0, 0, 0, 116, 0, 525, 553, 485, 527, 529,
	567, 451, 522, 0, 455, 458, 564, 549, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 502, 511, 536,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 478,
	0, 519, 0, 0, 0, 459, 456, 0, 0, 0,
	0, 500, 0, 0, 0, 461, 0, 479, 537, 0,
	449, 135, 541, 548, 497, 292, 552, 495, 494, 555,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 545, 475, 484, 120, 482, 213,
	191, 252, 518, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 454, 0, 232, 255, 274,
	114, 470, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 466,
	469, 464, 465, 513, 514, 560, 561, 562, 538, 460,
	0, 467, 468, 0, 543, 550, 551, 517, 97, 106,
	157, 271, 206, 131, 256, 450, 463, 124, 473, 0,
	0, 486, 491, 492, 504, 506, 507, 508, 509, 516,
	523, 524, 526, 532, 533, 534, 535, 540, 547, 566,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 554,
	542, 0, 0, 499, 557, 472, 489, 565, 490, 493,
	530, 457, 512, 184, 487, 0, 476, 452, 483, 453,
	474, 501, 126, 505, 471, 544, 515, 556, 155, 0,
	477, 563, 158, 521, 0, 231, 172, 0, 0, 0,
	503, 546, 510, 539, 498, 531, 462, 520, 558, 488,
	528, 559, 59, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 525, 553,
	485, 527, 529, 567, 451, 522, 0, 455, 458, 564,
	549, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	502, 511, 536, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 478, 0, 519, 0, 0, 0, 459, 456,
	0, 0, 0, 0, 500, 0, 0, 0, 461, 0,
	479, 537, 0, 449, 135, 541, 548, 497, 292, 552,
	495, 494, 555, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 545, 475, 484,
	120, 482, 213, 191, 252, 518, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 454, 0,
	232, 255, 274, 114, 470, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 466, 469, 464, 465, 513, 514, 560, 561,
	562, 538, 460, 0, 467, 468, 0, 543, 550, 551,
	517, 97, 106, 157, 271, 206, 131, 256, 450, 463,
	124, 473, 0, 0, 486, 491, 492, 504, 506, 507,
	508, 509, 516, 523, 524, 526, 532, 533, 534, 535,
	540, 547, 566, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 554, 542, 0, 0, 499, 557, 472, 489,
	565, 490, 493, 530, 457, 512, 184, 487, 0, 476,
	452, 483, 453, 474, 501, 126, 505, 471, 544, 515,
	556, 155, 0, 477, 563, 158, 521, 0, 231, 172,
	0, 0, 0, 503, 546, 510, 539, 498, 531, 462,
	520, 558, 488, 528, 559, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 525, 553, 485, 527, 529, 567, 451, 522, 0,
	455, 458, 564, 549, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 502, 511, 536, 496, 0, 0, 0,
	0, 0, 0, 1356, 0, 478, 0, 519, 0, 0,
	0, 459, 456, 0, 0, 0, 0, 500, 0, 0,
	0, 461, 0, 479, 537, 0, 449, 135, 541, 548,
	497, 292, 552, 495, 494, 555, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	545, 475, 484, 120, 482, 213, 191, 252, 518, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 454, 0, 232, 255, 274, 114, 470, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 466, 469, 464, 465, 513,
	514, 560, 561, 562, 538, 460, 0, 467, 468, 0,
	543, 550, 551, 517, 97, 106, 157, 271, 206, 131,
	256, 450, 463, 124, 473, 0, 0, 486, 491, 492,
	504, 506, 507, 508, 509, 516, 523, 524, 526, 532,
	533, 534, 535, 540, 547, 566, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 554, 542, 0, 0, 499,
	557, 472, 489, 565, 490, 493, 530, 457, 512, 184,
	487, 0, 476, 452, 483, 453, 474, 501, 126, 505,
	471, 544, 515, 556, 155, 0, 477, 563, 158, 521,
	0, 231, 172, 0, 0, 0, 503, 546, 510, 539,
	498, 531, 462, 520, 558, 488, 528, 559, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 525, 553, 485, 527, 529, 567,
	451, 522, 0, 455, 458, 564, 549, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 502, 511, 536, 496,
	0, 0, 0, 0, 0, 0, 1043, 0, 478, 0,
	519, 0, 0, 0, 459, 456, 0, 0, 0, 0,
	500, 0, 0, 0, 461, 0, 479, 537, 0, 449,
	135, 541, 548, 497, 292, 552, 495, 494, 555, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 545, 475, 484, 120, 482, 213, 191,
	252, 518, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 454, 0, 232, 255, 274, 114,
	470, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 466, 469,
	464, 465, 513, 514, 560, 561, 562, 538, 460, 0,
	467, 468, 0, 543, 550, 551, 517, 97, 106, 157,
	271, 206, 131, 256, 450, 463, 124, 473, 0, 0,
	486, 491, 492, 504, 506, 507, 508, 509, 516, 523,
	524, 526, 532, 533, 534, 535, 540, 547, 566, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 554, 542,
	0, 0, 499, 557, 472, 489, 565, 490, 493, 530,
	457, 512, 184, 487, 0, 476, 452, 483, 453, 474,
	501, 126, 505, 471, 544, 515, 556, 155, 0, 477,
	563, 158, 521, 0, 231, 172, 0, 0, 0, 503,
	546, 510, 539, 498, 531, 462, 520, 558, 488, 528,
	559, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 525, 553, 485,
	527, 529, 567, 451, 522, 0, 455, 458, 564, 549,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 502,
	511, 536, 496, 0, 0, 0, 0, 0, 0, 1006,
	0, 478, 0, 519, 0, 0, 0, 459, 456, 0,
	0, 0, 0, 500, 0, 0, 0, 461, 0, 479,
	537, 0, 449, 135, 541, 548, 497, 292, 552, 495,
	494, 555, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 545, 475, 484, 120,
	482, 213, 191, 252, 518, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 454, 0, 232,
	255, 274, 114, 470, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 466, 469, 464, 465, 513, 514, 560, 561, 562,
	538, 460, 0, 467, 468, 0, 543, 550, 551, 517,
	97, 106, 157, 271, 206, 131, 256, 450, 463, 124,
	473, 0, 0, 486, 491, 492, 504, 506, 507, 508,
	509, 516, 523, 524, 526, 532, 533, 534, 535, 540,
	547, 566, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 554, 542, 0, 0, 499, 557, 472, 489, 565,
	490, 493, 530, 457, 512, 184, 487, 0, 476, 452,
	483, 453, 474, 501, 126, 505, 471, 544, 515, 556,
	155, 0, 477, 563, 158, 521, 0, 231, 172, 0,
	0, 0, 503, 546, 510, 539, 498, 531, 462, 520,
	558, 488, 528, 559, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	525, 553, 485, 527, 529, 567, 451, 522, 0, 455,
	458, 564, 549, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 502, 511, 536, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 478, 0, 519, 0, 0, 0,
	459, 456, 0, 0, 0, 0, 500, 0, 0, 0,
	461, 0, 479, 537, 0, 449, 135, 541, 548, 497,
	292, 552, 495, 494, 555, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 545,
	475, 484, 120, 482, 213, 191, 252, 518, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	454, 0, 232, 255, 274, 114, 470, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 466, 469, 464, 465, 513, 514,
	560, 561, 562, 538, 460, 0, 467, 468, 0, 543,
	550, 551, 517, 97, 106, 157, 271, 206, 131, 256,
	450, 463, 124, 473, 0, 0, 486, 491, 492, 504,
	506, 507, 508, 509, 516, 523, 524, 526, 532, 533,
	534, 535, 540, 547, 566, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 554, 542, 0, 0, 499, 557,
	472, 489, 565, 490, 493, 530, 457, 512, 184, 487,
	0, 476, 452, 483, 453, 474, 501, 126, 505, 471,
	544, 515, 556, 155, 0, 477, 563, 158, 521, 0,
	231, 172, 0, 0, 0, 503, 546, 510, 539, 498,
	531, 462, 520, 558, 488, 528, 559, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 525, 553, 485, 527, 529, 567, 451,
	522, 0, 455, 458, 564, 549, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 502, 511, 536, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 0, 519,
	0, 0, 0, 459, 456, 0, 0, 0, 0, 500,
	0, 0, 0, 461, 0, 479, 537, 0, 449, 135,
	541, 548, 497, 292, 552, 495, 494, 555, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 545, 475, 484, 120, 482, 213, 191, 252,
	518, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 447, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 454, 0, 232, 255, 274, 114, 470,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 448, 446, 441, 440, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 466, 469, 464,
	465, 513, 514, 560, 561, 562, 538, 460, 0, 467,
	468, 0, 543, 550, 551, 517, 97, 106, 157, 271,
	206, 131, 256, 450, 463, 124, 473, 0, 0, 486,
	491, 492, 504, 506, 507, 508, 509, 516, 523, 524,
	526, 532, 533, 534, 535, 540, 547, 566, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 554, 542, 0,
	0, 499, 557, 472, 489, 565, 490, 493, 530, 457,
	512, 184, 487, 0, 476, 452, 483, 453, 474, 501,
	126, 505, 471, 544, 515, 556, 155, 0, 477, 563,
	158, 521, 0, 231, 172, 0, 0, 0, 503, 546,
	510, 539, 498, 531, 462, 520, 558, 488, 528, 559,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 525, 553, 485, 527,
	529, 567, 451, 522, 0, 455, 458, 564, 549, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 502, 511,
	536, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 519, 0, 0, 0, 459, 456, 0, 0,
	0, 0, 500, 0, 0, 0, 461, 0, 479, 537,
	0, 449, 135, 541, 548, 497, 292, 552, 495, 494,
	555, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 545, 475, 484, 120, 482,
	213, 191, 252, 518, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 783, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 447, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 454, 0, 232, 255,
	274, 114, 470, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 448, 446, 441,
	440, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	466, 469, 464, 465, 513, 514, 560, 561, 562, 538,
	460, 0, 467, 468, 0, 543, 550, 551, 517, 97,
	106, 157, 271, 206, 131, 256, 450, 463, 124, 473,
	0, 0, 486, 491, 492, 504, 506, 507, 508, 509,
	516, 523, 524, 526, 532, 533, 534, 535, 540, 547,
	566, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	554, 542, 0, 0, 499, 557, 472, 489, 565, 490,
	493, 530, 457, 512, 184, 487, 0, 476, 452, 483,
	453, 474, 501, 126, 505, 471, 544, 515, 556, 155,
	0, 477, 563, 158, 521, 0, 231, 172, 0, 0,
	0, 503, 546, 510, 539, 498, 531, 462, 520, 558,
	488, 528, 559, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 525,
	553, 485, 527, 529, 567, 451, 522, 0, 455, 458,
	564, 549, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 502, 511, 536, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 0, 519, 0, 0, 0, 459,
	456, 0, 0, 0, 0, 500, 0, 0, 0, 461,
	0, 479, 537, 0, 449, 135, 541, 548, 497, 292,
	552, 495, 494, 555, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 545, 475,
	484, 120, 482, 213, 191, 252, 518, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 438, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 447, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 454,
	0, 232, 255, 274, 114, 470, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	448, 446, 441, 440, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 466, 469, 464, 465, 513, 514, 560,
	561, 562, 538, 460, 0, 467, 468, 0, 543, 550,
	551, 517, 97, 106, 157, 271, 206, 131, 256, 450,
	463, 124, 473, 0, 0, 486, 491, 492, 504, 506,
	507, 508, 509, 516, 523, 524, 526, 532, 533, 534,
	535, 540, 547, 566, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 946, 0, 341, 0,
	0, 0, 126, 0, 340, 0, 0, 0, 155, 0,
	947, 384, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 362, 361,
	364, 365, 366, 367, 0, 0, 116, 363, 368, 369,
	370, 0, 0, 0, 0, 338, 355, 0, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	424, 0, 0, 0, 398, 0, 354, 0, 0, 347,
	348, 350, 349, 351, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 397, 0, 0, 292, 0,
	0, 395, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 385, 396, 391, 392, 389, 390, 388, 387,
	386, 399, 377, 378, 379, 380, 382, 0, 393, 394,
	381, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 126, 0, 340, 0, 0, 0, 155, 0, 0,
	384, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 375, 376, 0, 0, 0, 0, 0, 0, 1050,
	0, 59, 0, 0, 94, 95, 96, 362, 361, 364,
	365, 366, 367, 0, 0, 116, 363, 368, 369, 370,
	1051, 0, 0, 0, 338, 355, 0, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 0,
	0, 0, 0, 398, 0, 354, 0, 0, 347, 348,
	350, 349, 351, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 397, 0, 0, 292, 0, 0,
	395, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 385, 396, 391, 392, 389, 390, 388, 387, 386,
	399, 377, 378, 379, 380, 382, 0, 393, 394, 381,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	126, 0, 340, 0, 0, 0, 155, 0, 0, 384,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 412, 94, 95, 96, 362, 361, 364, 365,
	366, 367, 0, 0, 116, 363, 368, 369, 370, 0,
	0, 0, 0, 338, 355, 0, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 353, 0, 0,
	0, 0, 398, 0, 354, 0, 0, 347, 348, 350,
	349, 351, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 397, 0, 0, 292, 0, 0, 395,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	385, 396, 391, 392, 389, 390, 388, 387, 386, 399,
	377, 378, 379, 380, 382, 0, 393, 394, 381, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 126,
	0, 340, 0, 0, 0, 155, 0, 0, 384, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 362, 361, 364, 365, 366,
	367, 0, 0, 116, 363, 368, 369, 370, 0, 0,
	0, 0, 338, 355, 0, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 353, 424, 0, 0,
	0, 398, 0, 354, 0, 0, 347, 348, 350, 349,
	351, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 397, 0, 0, 292, 0, 0, 395, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 385,
	396, 391, 392, 389, 390, 388, 387, 386, 399, 377,
	378, 379, 380, 382, 0, 393, 394, 381, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 126, 0,
	340, 0, 0, 0, 155, 0, 0, 384, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 362, 964, 364, 365, 366, 367,
	0, 0, 116, 363, 368, 369, 370, 0, 0, 0,
	0, 338, 355, 0, 383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 424, 0, 0, 0,
	398, 0, 354, 0, 0, 347, 348, 350, 349, 351,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 397, 0, 0, 292, 0, 0, 395, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 385, 396,
	391, 392, 389, 390, 388, 387, 386, 399, 377, 378,
	379, 380, 382, 0, 393, 394, 381, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 126, 0, 340,
	0, 0, 0, 155, 0, 0, 384, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 362, 961, 364, 365, 366, 367, 0,
	0, 116, 363, 368, 369, 370, 0, 0, 0, 0,
	338, 355, 0, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 424, 0, 0, 0, 398,
	0, 354, 0, 0, 347, 348, 350, 349, 351, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	397, 0, 0, 292, 0, 0, 395, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 385, 396, 391,
	392, 389, 390, 388, 387, 386, 399, 377, 378, 379,
	380, 382, 0, 393, 394, 381, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 126,
	0, 340, 0, 0, 0, 155, 0, 0, 384, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 362, 361, 364, 365, 366,
	367, 0, 0, 116, 363, 368, 369, 370, 0, 0,
	0, 0, 338, 355, 0, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 353, 0, 0, 0,
	0, 398, 0, 354, 0, 0, 347, 348, 350, 349,
	351, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 397, 0, 0, 292, 0, 0, 395, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 385,
	396, 391, 392, 389, 390, 388, 387, 386, 399, 377,
	378, 379, 380, 382, 0, 393, 394, 381, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 126, 0,
	340, 0, 0, 0, 155, 0, 0, 384, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 362, 361, 364, 365, 366, 367,
	0, 0, 116, 363, 368, 369, 370, 0, 0, 0,
	0, 338, 355, 0, 383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 0, 0, 0, 0,
	398, 0, 354, 0, 0, 347, 348, 350, 349, 351,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 397, 0, 0, 292, 0, 0, 395, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 385, 396,
	391, 392, 389, 390, 388, 387, 386, 399, 377, 378,
	379, 380, 382, 0, 393, 394, 381, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 384, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 362, 361, 364, 365, 366, 367, 0,
	0, 116, 363, 368, 369, 370, 0, 0, 0, 0,
	0, 355, 0, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 353, 0, 0, 0, 0, 398,
	0, 354, 0, 0, 347, 348, 350, 349, 351, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	397, 0, 0, 292, 0, 0, 395, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	1619, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 385, 396, 391,
	392, 389, 390, 388, 387, 386, 399, 377, 378, 379,
	380, 382, 0, 393, 394, 381, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 384, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 412, 94,
	95, 96, 362, 361, 364, 365, 366, 367, 0, 0,
	116, 363, 368, 369, 370, 0, 0, 0, 0, 0,
	355, 0, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 353, 0, 0, 0, 0, 398, 0,
	354, 0, 0, 347, 348, 350, 349, 351, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 397,
	0, 0, 292, 0, 0, 395, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 385, 396, 391, 392,
	389, 390, 388, 387, 386, 399, 377, 378, 379, 380,
	382, 0, 393, 394, 381, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 384, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 362, 361, 364, 365, 366, 367, 0, 0, 116,
	363, 368, 369, 370, 0, 0, 0, 0, 0, 355,
	0, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 353, 0, 0, 0, 0, 398, 0, 354,
	0, 0, 347, 348, 350, 349, 351, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 397, 0,
	0, 292, 0, 0, 395, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 385, 396, 391, 392, 389,
	390, 388, 387, 386, 399, 377, 378, 379, 380, 382,
	0, 393, 394, 381, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 661, 671, 672,
	664, 665, 666, 667, 668, 669, 670, 663, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	292, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 757, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	759, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 651, 652, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 653, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 292,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 88, 89, 0, 85, 0,
	0, 0, 90, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 1033, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 1035, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 292, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 292,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 1033, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 1035,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 292, 0,
	0, 0, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 1031, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 998,
	0, 0, 999, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 292, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 794, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 793, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 292, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 292, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 292, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 1035, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 292, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 759, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 292, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 763, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 292, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 640, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	292, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 430, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 292, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 135, 0, 0, 0, 292, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 328, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 287, 0, 292, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 292, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264,
}
var yyPact = [...]int{

	1722, -1000, -274, 1041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 989, 811,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 302, 12334, 30,
	148, 17, 17240, 139, 230, 17589, -1000, 27, -1000, 19,
	17589, 23, 16891, -1000, -1000, -72, -87, -1000, 10240, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 807, 974, 975,
	987, 660, 954, -1000, 8831, 8831, 108, 108, 16542, 7435,
	-1000, -1000, 550, 17589, 135, 17589, -155, 102, 102, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 138, 17589, 577, 577, 240,
	-1000, 17589, 98, 577, 98, 98, 98, 17589, -1000, 192,
	-1000, -1000, -1000, 17589, 577, 921, 358, 59, 268, 268,
	268, -1000, 197, -1000, 4894, 36, 4894, -39, 997, 37,
	-26, -1000, 358, 4894, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 119, -1000, -1000, 17589, 16186, 136, 306, -1000,
	-1000, -1000, -1000, -1000, -1000, 701, 536, -1000, 10240, 1980,
	734, 734, -1000, -1000, 177, -1000, -1000, 11287, 11287, 11287,
	11287, 11287, 11287, 11287, 11287, 11287, 11287, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 734, 189, -1000, 9891, 734, 734, 734, 734, 734,
	734, 734, 734, 10240, 734, 734, 734, 734, 734, 734,
	734, 734, 734, 734, 734, 734, 734, 734, 734, 734,
	-1000, -1000, 989, -1000, 811, -1000, -1000, -1000, 957, 10240,
	10240, 989, -1000, 900, 8831, -1000, -1000, 902, -1000, -1000,
	-1000, -1000, 386, 1024, -1000, 11985, 188, 1023, 15837, 14790,
	17589, 692, 639, -1000, -1000, 187, 750, 7072, -96, -1000,
	-1000, -1000, 300, 14092, -1000, -1000, -1000, 919, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687, 17589,
	-1000, 341, -1000, 577, 4894, 122, 577, 326, 577, 17589,
	17589, 4894, 4894, 4894, 43, 78, 72, 17589, 747, 116,
	17589, 962, 838, 17589, 577, 577, -1000, 6346, -1000, 4894,
	358, -1000, 537, 10240, 4894, 4894, 4894, 17589, 4894, 4894,
	-1000, 534, -1000, -1000, 340, -1000, -1000, -1000, -1000, -1000,
	-1000, 4894, 4894, -1000, 1021, 334, -1000, -1000, -1000, -1000,
	10240, 268, -1000, 836, -1000, -1000, 22, -1000, -1000, -1000,
	-1000, -1000, 1041, -1000, -1000, -1000, -119, -1000, -1000, 10240,
	10240, 10240, 10240, 497, 274, 11287, 437, 307, 11287, 11287,
	11287, 11287, 11287, 11287, 11287, 11287, 11287, 11287, 11287, 11287,
	11287, 11287, 11287, 640, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 577, -1000, 1037, 626, 626, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 11636, 7784, 6346, 660,
	682, 989, 8831, 8831, 10240, 10240, 9529, 9180, 8831, 938,
	316, 536, 17589, -1000, -1000, 10938, -1000, -1000, -1000, -1000,
	-1000, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17589,
	17589, 8831, 8831, 8831, 8831, 8831, 975, 660, 902, -1000,
	1032, 256, 574, 746, -1000, 564, 975, 13743, 740, -1000,
	902, -1000, -1000, -1000, 17589, -1000, -1000, 15488, -1000, -1000,
	5983, 17589, 54, 17589, -1000, 735, 883, -1000, -1000, -1000,
	968, 13045, 13394, 54, 669, 14790, 17589, -1000, -1000, 14790,
	17589, 5620, 6709, -96, -1000, 6709, 725, -1000, -127, -115,
	8133, 202, -1000, -1000, -1000, -1000, 4531, 596, 661, 380,
	-64, -1000, -1000, -1000, 756, -1000, 756, 756, 756, 756,
	-20, -20, -20, -20, -1000, -1000, -1000, -1000, -1000, 791,
	783, -1000, 756, 756, 756, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 781, 781, 781, 758, 758, 816, -1000,
	17589, 4894, 959, 4894, -1000, 95, -1000, -1000, -1000, 17589,
	17589, 17589, 17589, 17589, 157, 17589, 17589, 745, -1000, 17589,
	4894, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17589, -1000, -1000,
	-1000, -1000, 17589, 358, 17589, 17589, 536, -1000, 17589, 17589,
	-1000, -1000, -1000, -1000, -1000, 536, 274, 362, 313, -1000,
	-1000, 555, -1000, -1000, 1760, -1000, -1000, -1000, -1000, 437,
	11287, 11287, 11287, 1555, 1760, 1659, 309, 1680, 203, 214,
	214, 220, 220, 220, 220, 220, 394, 394, -1000, -1000,
	-1000, 541, -1000, -1000, -1000, 541, 8831, 8831, 744, 734,
	185, -1000, 807, -1000, -1000, 975, 664, 664, 507, 371,
	275, 1019, 664, 269, 1017, 664, 664, 8831, -1000, -1000,
	360, -1000, 10240, 541, -1000, 182, -1000, 861, 736, 726,
	664, 541, 541, 664, 664, 957, -1000, -1000, 884, 10240,
	10240, 10240, -1000, -1000, -1000, 957, 988, -1000, 907, 906,
	996, 8831, 14790, 902, -1000, -1000, -1000, 181, 996, 732,
	734, -1000, 17589, 14790, 14790, 14790, 14790, 14790, -1000, 870,
	869, -1000, 863, 851, 862, 17589, -1000, 673, 660, 13045,
	175, 734, -1000, 15139, -1000, -1000, 996, 14790, 700, -1000,
	700, -1000, 180, -1000, -1000, 725, -96, -70, -1000, -1000,
	-1000, -1000, 536, -1000, 649, 719, 4168, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 779, 577, -1000, 950, 226, 211,
	577, 949, -1000, -1000, -1000, 923, -1000, 347, -68, -1000,
	-1000, 454, -20, -20, -1000, -1000, 202, 917, 202, 202,
	202, 532, 532, -1000, -1000, -1000, -1000, 443, -1000, -1000,
	-1000, 440, -1000, 835, 17589, 4894, -1000, -1000, -1000, -1000,
	199, 199, 246, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 53, 793, -1000, -1000, -1000, -1000,
	18, 41, 115, -1000, 4894, -1000, 334, 334, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1555, 1760, 1047,
	-1000, 11287, 11287, -1000, -1000, 664, 664, 8831, 6346, 989,
	957, -1000, -1000, 39, 640, 39, 11287, 11287, -1000, 11287,
	11287, -1000, -168, 720, 312, -1000, 10240, 357, -1000, 6346,
	-1000, 11287, 11287, -1000, -1000, -1000, -1000, -1000, -1000, 892,
	536, 536, -1000, -1000, 17589, -1000, -1000, -1000, -1000, 993,
	10240, -1000, 716, -1000, 5257, 975, 831, 17589, 734, 1041,
	13045, 17589, 702, -1000, 293, 883, 790, 821, 833, -1000,
	-1000, -1000, -1000, 855, -1000, 852, -1000, -1000, -1000, -1000,
	-1000, 660, -1000, 134, 131, 126, 17589, -1000, 989, 700,
	-1000, -1000, 229, -1000, -1000, -138, -122, -1000, -1000, -1000,
	4531, -1000, 4531, 17589, 74, -1000, 577, 577, -1000, -1000,
	-1000, 762, 820, 11287, -1000, -1000, -1000, 609, 202, 202,
	-1000, 325, -1000, -1000, -1000, 659, -1000, 647, 715, 627,
	17589, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17589, -1000, -1000, -1000, -1000, -1000, 17589, -174, 577, 17589,
	17589, 17589, 17589, -1000, 358, 358, -1000, 11287, 1760, 1760,
	-1000, -1000, 541, -1000, 975, -1000, 541, 756, 756, -1000,
	756, 758, -1000, 756, 12, 756, -2, 541, 541, 2004,
	1934, 1811, 1714, 734, -163, -1000, 536, 10240, -1000, 1573,
	1303, -1000, -1000, 991, 985, 536, -1000, -1000, -1000, 953,
	694, 695, -1000, -1000, 8482, 625, 169, 621, -1000, 989,
	17589, 10240, -1000, -1000, 10240, 757, -1000, 10240, -1000, -1000,
	-1000, 989, 734, 734, 734, 621, 975, -1000, -1000, -1000,
	-1000, 4168, -1000, 618, -1000, 756, -1000, -1000, -1000, 17589,
	-59, 1031, 1760, -1000, -1000, -1000, -1000, -1000, -20, 511,
	-20, 423, -1000, 421, 4894, -1000, -1000, -1000, -1000, 955,
	-1000, 6346, -1000, -1000, 754, 802, -1000, -1000, -1000, -1000,
	1760, -1000, 957, -1000, -1000, 127, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11287, 11287, 11287, 11287, 11287, 975,
	502, 536, 11287, 11287, -1000, 10240, 10240, 944, -1000, 734,
	-1000, 733, 17589, 17589, -1000, 17589, 975, -1000, 536, 536,
	17589, 536, 14441, 17589, 17589, 12683, -1000, 161, 17589, -1000,
	608, -1000, 212, -1000, -134, 202, -1000, 202, 595, 544,
	-1000, 734, 706, -1000, 286, 17589, 17589, -1000, -1000, -1000,
	861, 861, 861, 861, 69, 541, -1000, 861, 861, 536,
	701, 1030, -1000, 734, 1041, 164, -1000, -1000, -1000, 602,
	586, -1000, 586, 586, 175, 161, -1000, 577, 285, 500,
	-1000, 66, 17589, 350, 928, -1000, 927, -1000, -1000, -1000,
	-1000, -1000, 52, 6346, 4531, 576, -1000, -1000, -1000, -1000,
	-1000, 541, 55, -177, -1000, -1000, -1000, 17589, 695, 17589,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 400, -1000, -1000,
	17589, -1000, -1000, 465, -1000, -1000, 567, -1000, 17589, -1000,
	-1000, 793, -1000, 877, -172, -181, 684, -1000, -1000, 753,
	-1000, -1000, 52, 903, -174, -1000, 865, -1000, 17589, -1000,
	49, -1000, -175, 558, 47, -179, 819, 734, -182, 818,
	-1000, 1001, 10589, -1000, -1000, 1027, 206, 206, 861, 541,
	-1000, -1000, -1000, 81, 378, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1295, 1294, 29, 71, 75, 1293, 1291, 1288, 1283,
	99, 97, 96, 1282, 1280, 1279, 1278, 1277, 1275, 1273,
	1271, 1270, 1266, 1265, 1262, 1256, 1252, 1250, 1247, 1242,
	1241, 1240, 1239, 82, 1236, 1234, 1233, 1232, 87, 1230,
	1228, 1227, 1225, 1224, 44, 219, 55, 60, 1222, 57,
	253, 1220, 62, 73, 64, 1219, 40, 1214, 1210, 91,
	1209, 1208, 56, 1207, 1206, 2096, 1203, 77, 1202, 6,
	36, 1198, 1197, 1196, 1194, 81, 162, 1193, 1191, 15,
	1189, 1186, 103, 1184, 65, 26, 13, 22, 18, 1183,
	68, 1182, 9, 1181, 61, 1178, 1177, 1176, 1175, 25,
	1174, 59, 1173, 63, 27, 1171, 14, 74, 37, 21,
	8, 1170, 1168, 19, 72, 50, 69, 1164, 1163, 1162,
	543, 1146, 42, 1145, 1143, 1141, 23, 76, 98, 479,
	1137, 1136, 1134, 1133, 1132, 58, 941, 1859, 10, 78,
	1131, 1130, 1129, 2692, 41, 52, 17, 1128, 1126, 1121,
	34, 66, 35, 465, 1120, 38, 1119, 1118, 1113, 1112,
	1108, 1104, 1103, 315, 1102, 1101, 1098, 31, 20, 67,
	24, 1096, 1095, 1094, 1093, 49, 70, 1092, 1091, 47,
	1089, 1088, 28, 1078, 1076, 1074, 1072, 1069, 33, 7,
	1068, 16, 1063, 11, 1060, 32, 1058, 4, 1056, 12,
	1054, 3, 0, 1053, 5, 48, 1, 1052, 2, 1050,
	1049, 1048, 1623, 1292, 88, 1047, 93,
}
var yyR1 = [...]int{

	0, 210, 211, 211, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	202, 202, 202, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 37, 37, 11,
	12, 12, 12, 12, 214, 214, 59, 59, 60, 60,
	107, 107, 13, 14, 14, 116, 116, 115, 115, 115,
	117, 117, 117, 117, 153, 153, 15, 15, 15, 15,
	15, 15, 15, 204, 204, 203, 201, 201, 200, 200,
	199, 22, 184, 186, 186, 185, 185, 185, 185, 176,
	156, 156, 156, 156, 159, 159, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 158,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	162, 162, 162, 162, 162, 162, 162, 162, 175, 175,
	163, 163, 169, 169, 170, 170, 170, 172, 172, 173,
	173, 130, 130, 130, 165, 165, 166, 166, 171, 171,
	167, 167, 167, 168, 168, 168, 174, 174, 174, 174,
	174, 164, 164, 177, 177, 194, 194, 193, 193, 193,
	183, 183, 190, 190, 190, 190, 190, 180, 180, 180,
	181, 181, 179, 179, 182, 182, 192, 192, 191, 178,
	178, 195, 195, 195, 195, 207, 208, 206, 206, 206,
	206, 206, 187, 187, 187, 188, 188, 188, 189, 189,
	189, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 198, 196, 196, 197, 197, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 123, 123,
	209, 209, 125, 125, 121, 121, 124, 124, 122, 122,
	122, 126, 126, 126, 127, 127, 154, 154, 154, 26,
	26, 28, 28, 29, 30, 30, 148, 148, 149, 149,
	31, 32, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 7, 7, 7, 7, 35, 35, 35, 6, 6,
	27, 27, 27, 27, 20, 215, 33, 34, 34, 38,
	38, 38, 40, 40, 40, 43, 43, 43, 46, 46,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 49,
	49, 45, 45, 47, 47, 47, 47, 140, 140, 140,
	139, 139, 51, 51, 52, 52, 53, 53, 54, 54,
	54, 91, 68, 68, 106, 106, 108, 108, 55, 55,
	55, 55, 56, 56, 57, 57, 58, 58, 147, 147,
	146, 146, 146, 145, 145, 61, 61, 61, 63, 62,
	62, 62, 62, 64, 64, 66, 66, 65, 65, 67,
	69, 69, 69, 69, 69, 70, 70, 50, 50, 50,
	50, 50, 50, 50, 50, 119, 119, 72, 72, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 83, 83, 83, 73, 73, 73, 73, 73,
	73, 73, 44, 44, 84, 84, 84, 90, 85, 85,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 80, 80, 80, 80, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 216, 216, 82,
	81, 81, 81, 81, 81, 81, 81, 42, 42, 42,
	42, 42, 152, 152, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 95, 95, 41,
	41, 93, 93, 94, 96, 96, 92, 92, 92, 75,
	75, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 102,
	102, 102, 103, 103, 103, 103, 104, 104, 104, 74,
	74, 74, 74, 105, 105, 105, 105, 109, 109, 86,
	86, 88, 88, 87, 89, 110, 110, 113, 111, 111,
	114, 114, 114, 114, 114, 112, 112, 112, 142, 142,
	142, 118, 118, 128, 128, 129, 129, 120, 120, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 133, 133, 134, 134, 134, 141, 141, 137,
	137, 138, 138, 143, 143, 144, 144, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 212, 213, 150, 151, 151,
	151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 4, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -210, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -212,
	6, 7, 8, -37, 10, 11, 31, -22, 124, 125,
	127, 126, 160, 128, 153, 54, 174, 175, 177, 178,
	179, 180, -39, 158, 159, 32, 33, 130, 35, 58,
	9, 267, 155, 154, 26, -211, 369, -38, 5, -99,
	16, -3, -33, -215, -33, -33, -33, -33, -33, -33,
	-184, -186, 58, 97, -134, 134, 78, 259, 131, 132,
	138, -137, -202, -136, 61, 62, 63, 277, 146, 309,
	310, 174, 188, 182, 209, 201, 278, 311, 147, 199,
	202, 246, 144, 312, 229, 236, 72, 177, 255, 313,
	156, 197, 193, 314, 286, 191, 28, 315, 238, 214,
	316, 282, 240, 192, 237, 130, 317, 149, 365, 142,
	318, 215, 219, 319, 247, 320, 321, 322, 186, 187,
	323, 145, 249, 213, 143, 34, 241, 279, 38, 164,
	250, 217, 324, 212, 208, 325, 326, 327, 328, 211,
	185, 207, 42, 221, 220, 222, 245, 204, 329, 330,
	331, 150, 332, 194, 19, 333, 334, 335, 336, 337,
	253, 159, 338, 162, 339, 340, 341, 342, 343, 344,
	239, 216, 218, 139, 166, 235, 281, 345, 251, 190,
	346, 151, 163, 158, 254, 152, 347, 348, 349, 350,
	351, 352, 353, 178, 354, 355, 356, 357, 173, 248,
	257, 41, 226, 358, 184, 141, 359, 175, 170, 231,
	205, 165, 360, 361, 195, 196, 210, 183, 206, 176,
	366, 167, 160, 362, 256, 227, 283, 203, 200, 171,
	363, 168, 169, 364, 367, 242, 232, 243, 244, 233,
	172, 280, 252, 198, 228, -120, 134, 259, 131, 233,
	136, 132, 132, 133, 134, 259, 131, 132, -65, -143,
	-202, -136, 134, 132, 115, 202, 246, 124, 230, 241,
	242, 238, -125, 239, 166, -154, 132, -121, 229, 232,
	233, 172, -209, -202, 240, 248, 247, 234, 244, 243,
	-143, 176, -148, 181, -137, 179, -65, -36, 365, 128,
	-150, -150, 231, 231, -150, -85, -50, -71, 81, -76,
	30, 24, -75, -72, -92, -89, -90, 115, 116, 118,
	117, 119, 104, 105, 112, 82, 120, -80, -78, -79,
	-81, 65, 64, 73, 66, 67, 68, 69, 74, 75,
	76, -137, -143, -87, -212, 48, 49, 268, 269, 270,
	271, 276, 272, 84, 37, 258, 266, 265, 264, 262,
	263, 260, 261, 274, 275, 137, 259, 131, 110, 267,
	-202, -136, -5, -4, -212, 6, 21, 22, -103, 18,
	17, -213, 60, -40, -48, 43, 44, -49, 22, 36,
	47, 45, -34, -47, 106, -50, -143, -47, -120, -120,
	12, -59, -60, -65, -67, -143, -111, -153, 176, -114,
	248, 247, -138, -112, -137, -135, 246, 202, 245, 129,
	284, 80, 23, 25, 224, 83, 115, 17, 84, 114,
	268, 124, 52, 285, 260, 261, 258, 270, 271, 259,
	230, 30, 11, 287, 26, 154, 22, 36, 108, 126,
	87, 88, 157, 24, 155, 76, 290, 20, 55, 12,
	14, 291, 292, 15, 137, 136, 99, 133, 50, 9,
	120, 27, 96, 46, 293, 29, 294, 295, 296, 297,
	48, 97, 18, 262, 263, 32, 298, 276, 161, 110,
	53, 39, 81, 299, 300, 74, 301, 77, 56, 78,
	16, 51, 302, 303, 304, 305, 98, 127, 267, 49,
	306, 131, 6, 273, 31, 153, 47, 307, 132, 86,
	274, 275, 135, 75, 5, 138, 33, 10, 54, 57,
	264, 265, 266, 37, 85, 13, 308, 79, -185, 97,
	-176, -202, -65, 133, -65, 267, -129, 137, -129, -129,
	132, -65, -202, -202, 124, 126, 129, 56, -23, -65,
	-128, 137, -202, -128, -128, -128, -65, 121, -65, -202,
	31, -126, 97, 13, 259, -202, 166, 132, 167, 134,
	-127, 97, -127, -127, -180, 133, 34, 145, -151, -212,
	-138, 170, 171, -151, -124, -123, 236, 237, 231, 235,
	13, 171, 231, 169, -126, -151, 135, -137, -35, -137,
	65, -7, -3, -11, -10, -12, 89, -150, -150, 59,
	80, 78, 79, 96, -50, -73, 99, 81, 97, 98,
	83, 101, 100, 111, 104, 105, 106, 107, 108, 109,
	110, 102, 103, 114, 89, 90, 91, 92, 93, 94,
	95, -119, -212, -90, -212, 122, 123, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -212, 121, -2,
	-85, -4, -212, -212, -212, -212, -212, -212, -212, -212,
	-95, -50, -212, -216, -82, -212, -216, -82, -216, -82,
	-216, -212, -216, -82, -216, -82, -216, -216, -82, -212,
	-212, -212, -212, -212, -212, -212, -99, -3, -33, -104,
	20, 32, -50, -100, -101, -50, -99, 39, -45, -47,
	-49, 43, 44, 71, 12, -140, -139, 23, -137, 65,
	121, 12, -66, 27, -65, -52, -53, -54, -55, -68,
	-91, -212, -65, -65, -59, -214, 59, 12, 57, -214,
	59, 121, 59, 176, -114, -153, -116, -115, 249, 251,
	89, -142, -137, 65, 30, 31, 60, 59, -65, -156,
	-159, -161, -160, -162, -157, -158, 199, 200, 115, 203,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	31, 156, 195, 196, 197, 198, 215, 216, 217, 218,
	219, 220, 221, 222, 182, 201, 278, 183, 184, 185,
	186, 187, 188, 190, 191, 192, 193, 194, -202, -151,
	134, -202, 81, -202, -65, -65, -151, -151, -151, 168,
	168, 132, 132, 173, -65, 59, 135, -59, 24, 56,
	-65, -202, -202, -144, -143, -135, -151, -126, 65, -50,
	-151, -151, -151, -65, -151, -151, 65, -181, 12, 99,
	-151, -151, 12, -122, 12, 99, -50, -127, 56, -149,
	179, 213, 366, 367, 368, -50, -50, -50, -50, -83,
	74, 81, 75, 76, -76, -84, -87, -90, 70, 99,
	97, 98, 83, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -152, -202,
	65, -202, -75, -75, -137, -46, 22, 36, -45, -138,
	-144, -135, -38, -213, -213, -99, -45, -45, -50, -50,
	-92, 65, -45, -92, 65, -45, -45, -43, 22, 36,
	-93, -94, 85, -92, -137, -143, -213, -76, -137, -137,
	-45, -46, -46, -45, -45, -103, -213, 10, 99, 59,
	19, 59, -102, 25, 26, -103, -77, -137, 66, 69,
	-51, 59, 12, -49, -65, -139, 106, -144, -65, -107,
	162, -65, 31, 59, -61, -63, -62, -64, 46, 50,
	52, 47, 48, 49, 53, -147, 23, -52, -3, -212,
	-146, 162, -145, 23, -143, 65, -107, 57, -52, -65,
	-52, -67, -143, 106, -114, -116, 59, 250, 252, 253,
	56, 77, -50, -168, 114, -187, -188, -189, -138, 65,
	66, -176, -177, -178, -190, 148, -195, 139, 141, 138,
	-179, 149, 133, 29, 60, -130, 74, 81, -172, 227,
	-163, 58, -163, -163, -163, -163, -167, 202, -167, -167,
	-167, 58, 58, -163, -163, -163, -169, 58, -169, -169,
	-170, 58, -170, -141, 57, -65, -151, 24, -151, -131,
	129, 126, 127, -198, 125, 224, 202, 72, 30, 16,
	268, 162, 283, -202, 163, -65, -65, -65, -65, -65,
	129, 126, -65, -65, -65, -151, -65, -65, -126, -143,
	-143, -65, -137, 74, 75, 76, -84, -76, -76, -76,
	-44, 157, 80, -213, -213, -45, -45, -212, 121, -5,
	-103, -213, -213, 59, 57, 23, 12, 12, -213, 12,
	12, -213, -213, -45, -96, -94, 87, -50, -213, 121,
	-213, 59, 59, -213, -213, -213, -213, -213, -104, 41,
	-50, -50, -101, -104, -118, 20, 12, 37, 37, -70,
	13, -47, -52, -49, 121, -70, -74, 31, 37, -3,
	-212, -212, -110, -113, -92, -53, -54, -54, -53, -54,
	46, 46, 46, 51, 46, 51, 46, -62, -143, -213,
	-213, -3, -69, 54, 136, 55, -212, -145, -70, -52,
	-70, -70, 121, -115, -117, 254, 251, 257, -202, 65,
	59, -189, 89, 58, -202, 29, -179, -179, -182, -202,
	-182, 29, -165, 30, 74, -173, 228, 66, -167, -167,
	-168, 31, -168, -168, -168, -175, 65, -175, 66, 66,
	56, -137, -151, -150, -205, 144, 140, 148, 149, 142,
	61, 62, 63, 133, 29, 139, 141, 162, 138, -205,
	-132, -133, 135, 23, 133, 29, 162, -204, 57, 168,
	224, 168, 135, -151, -122, -122, -44, 80, -76, -76,
	-213, -213, -46, -138, -99, -104, -155, 115, 199, 156,
	197, 193, 213, 204, 226, 195, 227, -152, -155, -76,
	-76, -76, -76, 277, -99, 88, -50, 86, -138, -76,
	-76, 42, -65, -97, 14, -50, 106, -103, -109, 56,
	-110, -86, -88, -87, -212, -105, -137, -108, -137, -70,
	59, 89, -57, -56, 56, 57, -58, 56, -56, 46,
	46, -213, 133, 133, 133, -108, -99, -70, 251, 255,
	256, -188, -189, -192, -191, -137, -195, -182, -182, 58,
	-166, 56, -76, 60, -168, -168, -202, 115, 60, 59,
	60, 59, 60, 59, -65, -150, -150, -65, -150, -137,
	-201, 280, -203, -202, -137, -137, -137, -65, -126, -126,
	-76, -213, -103, -213, -163, -163, -163, -170, -163, 187,
	-163, 187, -213, -213, 20, 20, 20, 20, -212, -41,
	273, -50, 59, 59, -98, 15, 17, 28, -109, 59,
	-213, -213, 59, 121, -213, 59, -99, -113, -50, -50,
	58, -50, -212, -212, -212, -213, -103, 60, 59, -163,
	-106, -137, -171, 224, 10, -167, 65, -167, 66, 66,
	-151, 27, -200, -199, -138, 58, 57, -104, -167, -202,
	-76, -76, -76, -76, -76, -103, 65, -76, -76, -50,
	-85, 29, -88, 37, -3, -137, -137, -137, -103, -106,
	-106, -213, -106, -106, -146, -194, -193, 57, 143, 72,
	-191, 60, 59, -174, 139, 29, 138, -79, -168, -168,
	60, 60, -212, 59, 89, -106, -65, -213, -213, -213,
	-213, -42, 99, 280, -213, -213, -213, 10, -86, 121,
	60, -213, -213, -213, -69, -193, -202, -183, 89, 65,
	151, -137, -164, 72, 29, 29, -196, -197, 162, -199,
	-189, 60, -213, 278, 53, 281, -110, -137, 66, -65,
	65, -213, 59, -137, -204, 42, 279, 282, 58, -197,
	37, -201, 42, -106, 164, 280, 60, 165, 281, -207,
	-208, 56, -212, 282, -208, 56, 11, 10, -76, 161,
	-206, 152, 147, 150, 31, -206, -213, -213, 146, 30,
	74,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 624, 0,
	365, 365, 365, 365, 365, 365, 365, 0, 694, 677,
	0, 0, 0, 0, -2, 330, 331, 0, 333, -2,
	0, 0, 342, 1007, 1007, 0, 0, 1007, 0, 1005,
	47, 48, 348, 349, 350, 1, 3, 0, 369, 632,
	0, 0, -2, 367, 0, 0, 677, 677, 0, 0,
	76, 77, 0, 0, 0, 990, 0, 675, 675, 675,
	695, 696, 699, 700, 30, 31, 32, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 0, 0, 0, 0, 0,
	678, 0, 673, 0, 673, 673, 673, 0, 276, 447,
	703, 704, 990, 0, 0, 0, 321, 0, 324, 324,
	324, 290, 0, 292, 1008, 0, 1008, 0, 299, 0,
	0, 305, 321, 1008, 313, 327, 328, 315, 310, 311,
	329, 332, 0, 337, 340, 0, 355, 0, 867, 347,
	360, 361, 1007, 1007, 364, 33, 498, 457, 0, 463,
	465, 0, 500, 501, 502, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 532,
	533, 609, 610, 611, 612, 613, 614, 615, 616, 467,
	468, 606, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 567, 567, 567, 567, 567,
	567, 567, 567, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, 624, 43, 0, 365, 370, 371, 636, 0,
	0, 624, 1006, 0, 0, -2, -2, 381, 387, 388,
	389, 390, 366, 0, 393, 397, 0, 0, 0, 0,
	0, 0, 0, 56, 58, 447, 62, 0, 978, 658,
	-2, -2, 0, 0, 701, 702, -2, 839, -2, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 0, 0,
	95, 0, 93, 0, 1008, 0, 0, 0, 0, 0,
	0, 1008, 1008, 1008, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 277, 1008,
	321, 280, 0, 0, 1008, 1008, 1008, 0, 1008, 1008,
	287, 0, 288, 289, 0, 197, 198, 199, 293, 1009,
	1010, 1008, 1008, 295, 0, 318, 316, 317, 308, 309,
	0, 324, 302, 303, 306, 307, 338, 341, 358, 356,
	357, 359, 351, 352, 353, 354, 0, 362, 363, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 486, 487, 488, 489, 490,
	491, 464, 0, 478, 0, 0, 0, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 0, 378, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 598, 0, 551, 559, 0, 552, 560, 553, 561,
	554, 0, 555, 562, 556, 563, 557, 558, 564, 0,
	0, 0, 378, 378, 0, 0, 632, 0, 380, 34,
	0, 0, 633, 625, 626, 629, 632, 0, 402, 391,
	382, 385, 386, 368, 0, 394, 398, 0, 400, 401,
	0, 0, 60, 0, 446, 0, 404, 406, 407, 408,
	428, 0, 430, -2, 0, 0, 0, 54, 55, 0,
	0, 0, 0, 978, 664, 0, 64, 65, 0, 0,
	0, 173, 668, 669, 670, 666, 222, 0, 0, 161,
	157, 101, 102, 103, 150, 105, 150, 150, 150, 150,
	170, 170, 170, 170, 133, 134, 135, 136, 137, 0,
	0, 120, 150, 150, 150, 124, 140, 141, 142, 143,
	144, 145, 146, 147, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 152, 152, 152, 154, 154, 697, 79,
	0, 1008, 0, 1008, 91, 0, 236, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 674, 0,
	1008, 273, 274, 448, 705, 706, 278, 279, 322, 323,
	281, 282, 283, 284, 285, 286, 325, 0, 200, 201,
	294, 298, 0, 321, 0, 0, 300, 301, 0, 0,
	339, 343, 344, 345, 346, 499, 458, 459, 460, 462,
	479, 0, 481, 483, 469, 470, 494, 495, 496, 0,
	0, 0, 0, 492, 474, 0, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 519, 582,
	583, 0, 517, 518, 529, 0, 0, 0, 379, 607,
	0, -2, 0, 497, 653, 632, 0, 0, 0, 0,
	502, 609, 0, 502, 609, 0, 0, 0, 376, 377,
	604, 601, 0, 0, 606, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 636, 44, 637, 0, 0,
	0, 0, 628, 630, 631, 636, 0, 617, 0, 0,
	455, 0, 0, 383, 40, 399, 395, 0, 455, 0,
	0, 445, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 438, 0, 0, 0, 0, 429, 0, 0, 0,
	450, 922, 431, 0, 433, 434, 455, 0, 455, 57,
	455, 59, 0, 449, 659, 63, 0, 0, 68, 69,
	660, 661, 662, 663, 0, 92, 223, 225, 228, 229,
	230, 96, 97, 98, 0, 0, 210, 0, 0, 204,
	204, 0, 202, 203, 94, 164, 162, 0, 159, 158,
	104, 0, 170, 170, 127, 128, 173, 0, 173, 173,
	173, 0, 0, 121, 122, 123, 115, 0, 116, 117,
	118, 0, 119, 0, 0, 1008, 81, 676, 82, 1007,
	0, 0, 689, 237, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 0, 83, 241, 243, 242, 246,
	0, 0, 0, 268, 1008, 272, 318, 318, 297, 319,
	320, 304, 335, 480, 482, 484, 471, 492, 475, 0,
	472, 0, 0, 466, 534, 0, 0, 378, 0, 624,
	636, 538, 539, 0, 0, 0, 0, 0, 575, 0,
	0, 576, 0, 624, 0, 602, 0, 0, 550, 0,
	569, 0, 0, 570, 571, 572, 573, 574, 36, 0,
	634, 635, 627, 35, 0, 671, 672, 618, 619, 620,
	0, 392, 403, 384, 0, 632, 647, 0, 0, 640,
	0, 0, 455, 655, 0, 405, 424, 426, 0, 421,
	436, 437, 439, 0, 441, 0, 443, 444, 409, 410,
	411, 0, 412, 0, 0, 0, 0, 432, 624, 455,
	52, 53, 0, 66, 67, 0, 0, 73, 174, 175,
	0, 226, 0, 0, 0, 192, 204, 204, 195, 205,
	196, 0, 166, 0, 163, 100, 160, 0, 173, 173,
	129, 0, 130, 131, 132, 0, 148, 0, 0, 0,
	0, 698, 80, 231, 1007, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 1007,
	0, 1007, 690, 691, 692, 693, 0, 86, 0, 0,
	0, 0, 0, 271, 321, 321, 473, 0, 493, 476,
	535, 536, 0, 608, 632, 38, 0, 150, 150, 587,
	150, 154, 590, 150, 592, 150, 595, 0, 0, 0,
	0, 0, 0, 0, 599, 549, 605, 0, 607, 0,
	0, 638, 37, 622, 0, 456, 396, 41, 45, 0,
	647, 639, 649, 651, 0, 0, 643, 0, 416, 624,
	0, 0, 418, 425, 0, 0, 419, 0, 420, 440,
	442, -2, 0, 0, 0, 0, 632, 51, 70, 71,
	72, 224, 227, 0, 206, 150, 209, 193, 194, 0,
	168, 0, 165, 151, 125, 126, 171, 172, 170, 0,
	170, 0, 155, 0, 1008, 232, 233, 234, 235, 0,
	240, 0, 84, 85, 0, 0, 245, 269, 291, 296,
	477, 537, 636, 540, 584, 170, 588, 589, 591, 593,
	594, 596, 542, 541, 0, 0, 0, 0, 0, 632,
	0, 603, 0, 0, 42, 0, 0, 0, 46, 0,
	652, 0, 0, 0, 61, 0, 632, 656, 657, 422,
	0, 427, 0, 0, 0, 430, 50, 184, 0, 208,
	0, 414, 176, 169, 0, 173, 149, 173, 0, 0,
	78, 0, 87, 88, 0, 0, 0, 39, 585, 586,
	0, 0, 0, 0, 577, 0, 600, 0, 0, 623,
	621, 0, 650, 0, 642, 645, 644, 417, 49, 0,
	0, 452, 0, 0, 450, 183, 185, 0, 190, 0,
	207, 0, 0, 181, 0, 178, 180, 167, 138, 139,
	153, 156, 0, 0, 0, 0, 247, 543, 545, 544,
	546, 0, 0, 0, 548, 565, 566, 0, 641, 0,
	423, 451, 453, 454, 413, 186, 187, 0, 191, 189,
	0, 415, 99, 0, 177, 179, 0, 263, 0, 89,
	90, 83, 547, 0, 0, 0, 648, 646, 188, 0,
	182, 262, 0, 0, 86, 578, 0, 581, 0, 264,
	0, 244, 579, 0, 0, 0, 211, 0, 0, 212,
	213, 0, 0, 580, 214, 0, 0, 0, 0, 0,
	215, 217, 218, 0, 0, 216, 265, 266, 219, 220,
	221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:357
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:362
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:395
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:401
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:421
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:429
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:433
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:460
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:488
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:505
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:517
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.insertAction = InsertAct
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:539
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereClause, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereClause, yyDollar[6].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereClause, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:571
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:581
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:586
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:590
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:616
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.characteristic = ReadWrite
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:630
		{
			yyVAL.characteristic = ReadOnly
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:648
		{
			yyVAL.isolationLevel = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.scope = SessionScope
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.scope = GlobalScope
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:675
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:680
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:684
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:688
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:697
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:701
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:712
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:728
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:734
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:740
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:747
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:758
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:769
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:773
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:783
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1046
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1285
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1308
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1312
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1316
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1320
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1332
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1379
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1415
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1420
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1527
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1543
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1547
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1563
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1575
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1668
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1689
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1694
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1716
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = "extended "
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = "full "
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1798
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1830
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1846
		{
			yyVAL.scope = ImplicitScope
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.scope = SessionScope
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			yyVAL.scope = GlobalScope
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1874
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.explainType = EmptyType
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1922
		{
			yyVAL.explainType = JSONType
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.explainType = TreeType
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.explainType = VitessType
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.explainType = TraditionalType
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.explainType = AnalyzeType
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &OtherRead{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2021
		{
			setAllowComments(yylex, true)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2025
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.bytes2 = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.unionType = UnionBasic
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2045
		{
			yyVAL.unionType = UnionAll
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2049
		{
			yyVAL.unionType = UnionDistinct
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = SQLCacheStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2067
		{
			yyVAL.boolean = false
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.selectExprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2089
		{
			yyVAL.strs = nil
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2105
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2151
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2159
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2164
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2184
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2232
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2265
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2277
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2283
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2285
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2289
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2295
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2300
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2305
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2313
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.joinType = NormalJoinType
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.joinType = NormalJoinType
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.joinType = NormalJoinType
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.joinType = StraightJoinType
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.joinType = LeftJoinType
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.joinType = LeftJoinType
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.joinType = RightJoinType
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.joinType = RightJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2378
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2398
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2403
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2407
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2411
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2415
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2419
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2472
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2478
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2482
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2560
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2603
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2733
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2973
		{
			yyVAL.matchExprOption = NoOption
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2981
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2985
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2989
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3073
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3089
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3112
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3170
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3188
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3208
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3213
		{
			yyVAL.orderDirection = AscOrder
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.orderDirection = AscOrder
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.orderDirection = DescOrder
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3226
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3230
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3234
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3238
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3243
		{
			yyVAL.lock = NoLock
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.lock = ForUpdateLock
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3251
		{
			yyVAL.lock = ShareModeLock
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3264
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3272
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3276
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3286
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3290
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3294
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3299
		{
			yyVAL.updateExprs = nil
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3303
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3313
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3329
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3349
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3355
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3365
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3371
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3375
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3379
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3383
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3387
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3395
		{
			yyVAL.bytes = []byte("charset")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.expr = &Default{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3419
		{
			yyVAL.boolean = false
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3421
		{
			yyVAL.boolean = true
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.boolean = false
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3426
		{
			yyVAL.boolean = true
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3429
		{
			yyVAL.ignore = false
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.ignore = true
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3435
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3456
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3466
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3469
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3471
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3476
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3478
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3482
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			decNesting(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3848
		{
			skipToEnd(yylex)
		}
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3853
		{
			skipToEnd(yylex)
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3857
		{
			skipToEnd(yylex)
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
