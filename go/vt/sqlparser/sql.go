//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 215,
	109, 533,
	-2, 529,
	-1, 216,
	109, 534,
	-2, 530,
	-1, 282,
	80, 674,
	-2, 46,
	-1, 283,
	80, 647,
	-2, 47,
	-1, 288,
	80, 634,
	-2, 495,
	-1, 290,
	80, 661,
	-2, 497,
	-1, 649,
	109, 536,
	-2, 532,
	-1, 837,
	5, 28,
	-2, 348,
	-1, 857,
	5, 27,
	-2, 471,
	-1, 1051,
	5, 28,
	-2, 472,
	-1, 1090,
	5, 27,
	-2, 474,
	-1, 1138,
	5, 28,
	-2, 475,
}

const yyPrivate = 57344

const yyLast = 8942

var yyAct = [...]int{

	216, 1129, 594, 213, 784, 707, 220, 972, 488, 1057,
	781, 997, 738, 973, 765, 911, 194, 727, 531, 487,
	3, 742, 533, 951, 969, 245, 778, 674, 188, 222,
	741, 74, 860, 914, 877, 164, 829, 708, 164, 684,
	751, 866, 696, 651, 421, 681, 427, 774, 381, 520,
	287, 53, 281, 704, 535, 270, 218, 433, 441, 500,
	52, 279, 164, 164, 74, 203, 269, 193, 164, 1157,
	74, 811, 189, 190, 191, 192, 683, 1147, 1155, 1136,
	268, 799, 1153, 785, 1146, 1135, 964, 1045, 246, 47,
	385, 273, 1106, 894, 758, 798, 1069, 1083, 766, 207,
	1040, 402, 1116, 454, 453, 463, 464, 456, 457, 458,
	459, 460, 461, 462, 455, 1038, 187, 465, 1002, 1003,
	1004, 1154, 803, 392, 922, 1152, 1007, 1005, 413, 414,
	1130, 797, 935, 759, 705, 155, 47, 393, 388, 728,
	730, 154, 593, 155, 199, 600, 876, 1104, 875, 874,
	274, 383, 920, 389, 932, 164, 167, 164, 156, 1121,
	934, 164, 1054, 404, 938, 406, 57, 864, 164, 157,
	158, 159, 74, 74, 74, 74, 753, 74, 74, 794,
	791, 792, 823, 790, 74, 477, 478, 623, 445, 403,
	405, 59, 60, 61, 62, 63, 397, 455, 1011, 419,
	465, 620, 739, 465, 888, 440, 801, 804, 1020, 863,
	74, 922, 729, 173, 546, 921, 766, 966, 597, 430,
	926, 923, 916, 917, 924, 919, 918, 479, 480, 481,
	482, 483, 484, 485, 1117, 697, 925, 183, 438, 920,
	755, 796, 928, 1105, 1103, 756, 892, 475, 1012, 429,
	401, 933, 407, 931, 440, 795, 697, 1134, 847, 1124,
	408, 408, 408, 408, 1006, 408, 408, 752, 164, 753,
	435, 153, 408, 439, 438, 164, 164, 164, 439, 438,
	800, 74, 50, 395, 1074, 968, 74, 168, 47, 1073,
	440, 802, 654, 170, 906, 440, 841, 382, 840, 176,
	172, 905, 921, 474, 273, 895, 476, 926, 923, 916,
	917, 924, 919, 918, 439, 438, 502, 503, 504, 505,
	506, 507, 508, 925, 675, 174, 676, 1140, 178, 915,
	1086, 440, 267, 486, 1072, 490, 491, 492, 493, 494,
	495, 496, 545, 499, 501, 501, 501, 501, 501, 501,
	501, 501, 509, 510, 511, 512, 169, 658, 904, 999,
	752, 1143, 420, 532, 889, 750, 749, 431, 820, 821,
	822, 656, 657, 655, 842, 171, 177, 179, 180, 181,
	182, 1094, 1127, 185, 184, 74, 1094, 420, 164, 881,
	164, 74, 787, 164, 1094, 1095, 164, 677, 164, 591,
	74, 74, 74, 74, 74, 74, 74, 74, 458, 459,
	460, 461, 462, 455, 74, 74, 465, 399, 164, 1066,
	1065, 21, 439, 438, 394, 410, 411, 412, 382, 415,
	416, 992, 420, 74, 1053, 420, 418, 164, 420, 440,
	1109, 244, 1108, 74, 1017, 1016, 628, 1008, 607, 1014,
	1013, 650, 835, 420, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 605,
	517, 420, 72, 408, 652, 686, 420, 198, 653, 408,
	409, 23, 641, 643, 644, 23, 74, 642, 408, 408,
	408, 408, 408, 408, 408, 408, 649, 630, 553, 552,
	74, 645, 408, 408, 970, 286, 861, 861, 1089, 855,
	688, 386, 856, 686, 542, 164, 862, 647, 164, 164,
	164, 164, 164, 709, 54, 862, 1049, 517, 50, 23,
	164, 1019, 50, 164, 678, 679, 516, 164, 1015, 882,
	941, 164, 164, 835, 284, 74, 544, 273, 273, 273,
	273, 273, 688, 74, 694, 543, 701, 541, 517, 734,
	517, 624, 273, 835, 200, 47, 1001, 861, 689, 690,
	273, 50, 693, 1078, 713, 714, 50, 716, 724, 490,
	767, 768, 769, 835, 712, 760, 700, 715, 702, 703,
	779, 732, 986, 733, 164, 885, 775, 736, 867, 868,
	595, 164, 746, 770, 164, 74, 274, 274, 274, 274,
	274, 50, 65, 286, 286, 286, 286, 780, 286, 286,
	952, 532, 782, 731, 970, 286, 907, 870, 603, 274,
	629, 417, 636, 873, 872, 776, 777, 592, 522, 525,
	526, 527, 523, 599, 524, 528, 718, 723, 954, 526,
	527, 443, 608, 609, 610, 611, 612, 613, 614, 615,
	826, 827, 828, 721, 719, 717, 616, 617, 722, 720,
	1151, 812, 1145, 813, 649, 204, 205, 937, 808, 1150,
	956, 652, 960, 818, 955, 653, 953, 685, 687, 434,
	817, 958, 422, 408, 761, 762, 763, 764, 891, 825,
	957, 699, 899, 432, 423, 959, 961, 551, 400, 771,
	772, 773, 819, 456, 457, 458, 459, 460, 461, 462,
	455, 1126, 286, 465, 857, 209, 1125, 548, 1087, 886,
	1047, 726, 74, 1079, 788, 602, 530, 824, 846, 201,
	202, 434, 74, 195, 454, 453, 463, 464, 456, 457,
	458, 459, 460, 461, 462, 455, 54, 871, 465, 834,
	816, 284, 1114, 883, 626, 627, 879, 880, 815, 196,
	1113, 844, 1081, 862, 436, 946, 896, 897, 898, 1118,
	900, 901, 902, 74, 74, 622, 74, 1070, 830, 619,
	56, 887, 58, 858, 859, 454, 453, 463, 464, 456,
	457, 458, 459, 460, 461, 462, 455, 74, 540, 465,
	439, 438, 51, 1, 786, 164, 910, 793, 913, 1128,
	996, 621, 748, 740, 74, 927, 286, 440, 380, 64,
	747, 903, 286, 1102, 947, 948, 1068, 439, 438, 754,
	893, 286, 286, 286, 286, 286, 286, 286, 286, 757,
	1000, 1123, 890, 556, 440, 286, 286, 807, 557, 74,
	74, 971, 709, 945, 555, 559, 963, 558, 709, 962,
	944, 554, 408, 175, 632, 950, 280, 832, 976, 529,
	547, 833, 974, 74, 443, 74, 74, 286, 837, 838,
	839, 437, 66, 843, 979, 408, 965, 930, 849, 981,
	850, 851, 852, 853, 929, 789, 995, 387, 164, 1009,
	1010, 473, 980, 994, 814, 649, 74, 285, 977, 625,
	426, 424, 428, 1112, 1080, 845, 648, 680, 497, 74,
	164, 993, 695, 221, 640, 233, 74, 230, 446, 74,
	232, 698, 164, 1021, 231, 975, 631, 47, 854, 447,
	1031, 219, 211, 272, 513, 521, 1023, 519, 710, 1026,
	1029, 518, 277, 988, 989, 990, 869, 865, 271, 940,
	1044, 273, 489, 1028, 522, 525, 526, 527, 523, 498,
	524, 528, 1115, 1036, 867, 868, 286, 74, 635, 74,
	74, 74, 164, 74, 286, 74, 1048, 1056, 1059, 1060,
	1061, 25, 235, 234, 237, 238, 239, 240, 55, 206,
	1064, 236, 241, 19, 1062, 18, 883, 17, 20, 74,
	74, 74, 16, 15, 14, 284, 29, 13, 1071, 12,
	274, 11, 10, 743, 949, 1076, 909, 9, 8, 7,
	6, 5, 1077, 4, 197, 22, 286, 1084, 2, 1082,
	0, 0, 0, 1043, 74, 74, 0, 0, 0, 936,
	0, 0, 0, 1088, 0, 286, 0, 74, 0, 0,
	0, 0, 1090, 0, 0, 974, 1100, 991, 1101, 74,
	1099, 0, 0, 0, 1107, 0, 1033, 1034, 1110, 1035,
	0, 0, 1037, 0, 1039, 74, 0, 1119, 0, 0,
	0, 0, 0, 0, 648, 0, 0, 408, 0, 0,
	0, 1120, 0, 0, 0, 974, 0, 0, 0, 275,
	0, 0, 74, 1132, 1137, 709, 0, 0, 0, 0,
	1141, 74, 1067, 0, 425, 0, 0, 0, 975, 0,
	0, 1091, 0, 0, 1030, 1149, 1148, 0, 0, 0,
	0, 1032, 0, 0, 161, 0, 0, 0, 0, 0,
	1158, 0, 1041, 1042, 638, 639, 0, 420, 1111, 162,
	0, 0, 186, 878, 0, 1050, 1051, 1052, 975, 1055,
	47, 0, 278, 286, 0, 0, 0, 384, 0, 0,
	0, 0, 0, 0, 210, 0, 162, 162, 0, 0,
	0, 0, 162, 454, 453, 463, 464, 456, 457, 458,
	459, 460, 461, 462, 455, 0, 489, 465, 0, 691,
	692, 0, 743, 0, 908, 286, 0, 286, 454, 453,
	463, 464, 456, 457, 458, 459, 460, 461, 462, 455,
	0, 0, 465, 1156, 1085, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	1097, 1098, 0, 0, 0, 286, 912, 0, 0, 0,
	0, 1075, 737, 0, 390, 0, 391, 0, 0, 0,
	396, 0, 0, 0, 0, 0, 0, 398, 0, 162,
	0, 162, 0, 0, 0, 162, 0, 710, 0, 0,
	978, 878, 162, 710, 943, 0, 286, 0, 0, 831,
	0, 0, 0, 0, 0, 1133, 0, 0, 0, 0,
	1138, 0, 0, 0, 286, 0, 286, 998, 1142, 454,
	453, 463, 464, 456, 457, 458, 459, 460, 461, 462,
	455, 0, 0, 465, 0, 984, 0, 809, 810, 0,
	428, 0, 0, 0, 0, 0, 0, 1022, 1160, 1161,
	0, 0, 0, 743, 0, 743, 0, 0, 0, 0,
	1024, 0, 0, 0, 0, 0, 0, 1027, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 162,
	537, 162, 836, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 0, 848, 0, 0, 0, 0, 1058, 0,
	1058, 1058, 1058, 0, 1063, 0, 286, 453, 463, 464,
	456, 457, 458, 459, 460, 461, 462, 455, 0, 0,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 286, 286, 0, 463, 464, 456, 457, 458, 459,
	460, 461, 462, 455, 0, 743, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 1093, 0, 0, 0,
	912, 743, 0, 0, 0, 0, 0, 596, 998, 598,
	0, 0, 601, 0, 0, 604, 0, 0, 0, 0,
	1058, 0, 162, 0, 162, 0, 0, 162, 0, 0,
	162, 0, 606, 0, 0, 0, 1122, 618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 637, 0, 0, 0,
	710, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 162, 1144, 967, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 0, 982, 983,
	449, 0, 452, 985, 0, 0, 987, 0, 466, 467,
	468, 469, 470, 471, 472, 0, 450, 451, 448, 454,
	453, 463, 464, 456, 457, 458, 459, 460, 461, 462,
	455, 210, 0, 465, 0, 0, 210, 210, 0, 0,
	210, 0, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 210, 210, 0, 162,
	0, 711, 162, 162, 162, 162, 162, 0, 0, 0,
	0, 735, 0, 0, 725, 0, 0, 162, 0, 0,
	0, 537, 0, 0, 0, 162, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 0, 0, 0,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 806, 0, 113, 0, 0, 162, 0,
	217, 0, 0, 0, 90, 162, 214, 0, 162, 100,
	254, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 606, 0,
	50, 0, 420, 215, 235, 234, 237, 238, 239, 240,
	210, 0, 84, 236, 241, 242, 243, 0, 0, 212,
	228, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 0, 0, 0, 0, 265, 0,
	227, 0, 0, 223, 224, 229, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 210,
	263, 0, 116, 0, 0, 127, 95, 94, 0, 1131,
	489, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 0, 146, 147, 148, 149, 110, 83, 96,
	123, 255, 264, 261, 262, 259, 260, 258, 257, 256,
	266, 249, 250, 252, 0, 251, 75, 0, 101, 150,
	118, 92, 141, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 23, 24, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 42, 0, 0, 0, 711, 28, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 30,
	31, 33, 32, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 39, 0,
	40, 41, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 369, 359, 0, 332, 371, 310, 324, 379, 325,
	326, 353, 298, 340, 113, 322, 0, 313, 293, 319,
	294, 311, 334, 90, 337, 309, 361, 343, 100, 377,
	102, 348, 0, 124, 109, 0, 0, 336, 363, 338,
	358, 331, 354, 303, 347, 372, 323, 351, 373, 0,
	49, 0, 73, 0, 744, 745, 0, 0, 0, 0,
	0, 84, 0, 350, 368, 321, 352, 292, 349, 0,
	296, 299, 378, 366, 316, 317, 884, 0, 0, 0,
	0, 0, 0, 335, 339, 355, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 346, 0, 0,
	0, 300, 297, 0, 333, 0, 0, 0, 302, 0,
	315, 356, 0, 291, 364, 330, 165, 367, 328, 327,
	370, 116, 0, 711, 127, 95, 94, 362, 312, 320,
	86, 318, 121, 114, 139, 345, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 295, 0, 125, 140, 152,
	308, 365, 146, 147, 148, 149, 110, 83, 96, 123,
	306, 307, 304, 305, 341, 342, 374, 375, 376, 357,
	301, 0, 0, 360, 344, 75, 0, 101, 150, 118,
	92, 141, 369, 359, 0, 332, 371, 310, 324, 379,
	325, 326, 353, 298, 340, 113, 322, 0, 313, 293,
	319, 294, 311, 334, 90, 337, 309, 361, 343, 100,
	377, 102, 348, 0, 124, 109, 0, 0, 336, 363,
	338, 358, 331, 354, 303, 347, 372, 323, 351, 373,
	0, 0, 0, 73, 0, 744, 745, 0, 0, 0,
	0, 0, 84, 0, 350, 368, 321, 352, 292, 349,
	0, 296, 299, 378, 366, 316, 317, 0, 0, 0,
	0, 0, 0, 0, 335, 339, 355, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 314, 0, 346, 0,
	0, 0, 300, 297, 0, 333, 0, 0, 0, 302,
	0, 315, 356, 0, 291, 364, 330, 165, 367, 328,
	327, 370, 116, 0, 0, 127, 95, 94, 362, 312,
	320, 86, 318, 121, 114, 139, 345, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 295, 0, 125, 140,
	152, 308, 365, 146, 147, 148, 149, 110, 83, 96,
	123, 306, 307, 304, 305, 341, 342, 374, 375, 376,
	357, 301, 0, 0, 360, 344, 75, 0, 101, 150,
	118, 92, 141, 369, 359, 0, 332, 371, 310, 324,
	379, 325, 326, 353, 298, 340, 113, 322, 0, 313,
	293, 319, 294, 311, 334, 90, 337, 309, 361, 343,
	100, 377, 102, 348, 0, 124, 109, 0, 0, 336,
	363, 338, 358, 331, 354, 303, 347, 372, 323, 351,
	373, 50, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 350, 368, 321, 352, 292,
	349, 0, 296, 299, 378, 366, 316, 317, 0, 0,
	0, 0, 0, 0, 0, 335, 339, 355, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 346,
	0, 0, 0, 300, 297, 0, 333, 0, 0, 0,
	302, 0, 315, 356, 0, 291, 364, 330, 165, 367,
	328, 327, 370, 116, 0, 0, 127, 95, 94, 362,
	312, 320, 86, 318, 121, 114, 139, 345, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 295, 0, 125,
	140, 152, 308, 365, 146, 147, 148, 149, 110, 83,
	96, 123, 306, 307, 304, 305, 341, 342, 374, 375,
	376, 357, 301, 0, 0, 360, 344, 75, 0, 101,
	150, 118, 92, 141, 369, 359, 0, 332, 371, 310,
	324, 379, 325, 326, 353, 298, 340, 113, 322, 0,
	313, 293, 319, 294, 311, 334, 90, 337, 309, 361,
	343, 100, 377, 102, 348, 0, 124, 109, 0, 0,
	336, 363, 338, 358, 331, 354, 303, 347, 372, 323,
	351, 373, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 350, 368, 321, 352,
	292, 349, 0, 296, 299, 378, 366, 316, 317, 0,
	0, 0, 0, 0, 0, 0, 335, 339, 355, 329,
	0, 0, 0, 0, 0, 0, 942, 0, 314, 0,
	346, 0, 0, 0, 300, 297, 0, 333, 0, 0,
	0, 302, 0, 315, 356, 0, 291, 364, 330, 165,
	367, 328, 327, 370, 116, 0, 0, 127, 95, 94,
	362, 312, 320, 86, 318, 121, 114, 139, 345, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 295, 0,
	125, 140, 152, 308, 365, 146, 147, 148, 149, 110,
	83, 96, 123, 306, 307, 304, 305, 341, 342, 374,
	375, 376, 357, 301, 0, 0, 360, 344, 75, 0,
	101, 150, 118, 92, 141, 369, 359, 0, 332, 371,
	310, 324, 379, 325, 326, 353, 298, 340, 113, 322,
	0, 313, 293, 319, 294, 311, 334, 90, 337, 309,
	361, 343, 100, 377, 102, 348, 0, 124, 109, 0,
	0, 336, 363, 338, 358, 331, 354, 303, 347, 372,
	323, 351, 373, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 350, 368, 321,
	352, 292, 349, 0, 296, 299, 378, 366, 316, 317,
	0, 0, 0, 0, 0, 0, 0, 335, 339, 355,
	329, 0, 0, 0, 0, 0, 0, 646, 0, 314,
	0, 346, 0, 0, 0, 300, 297, 0, 333, 0,
	0, 0, 302, 0, 315, 356, 0, 291, 364, 330,
	165, 367, 328, 327, 370, 116, 0, 0, 127, 95,
	94, 362, 312, 320, 86, 318, 121, 114, 139, 345,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 295,
	0, 125, 140, 152, 308, 365, 146, 147, 148, 149,
	110, 83, 96, 123, 306, 307, 304, 305, 341, 342,
	374, 375, 376, 357, 301, 0, 0, 360, 344, 75,
	0, 101, 150, 118, 92, 141, 369, 359, 0, 332,
	371, 310, 324, 379, 325, 326, 353, 298, 340, 113,
	322, 0, 313, 293, 319, 294, 311, 334, 90, 337,
	309, 361, 343, 100, 377, 102, 348, 0, 124, 109,
	0, 0, 336, 363, 338, 358, 331, 354, 303, 347,
	372, 323, 351, 373, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 350, 368,
	321, 352, 292, 349, 0, 296, 299, 378, 366, 316,
	317, 0, 0, 0, 0, 0, 0, 0, 335, 339,
	355, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 346, 0, 0, 0, 300, 297, 0, 333,
	0, 0, 0, 302, 0, 315, 356, 0, 291, 364,
	330, 165, 367, 328, 327, 370, 116, 0, 0, 127,
	95, 94, 362, 312, 320, 86, 318, 121, 114, 139,
	345, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	295, 0, 125, 140, 152, 308, 365, 146, 147, 148,
	149, 110, 83, 96, 123, 306, 307, 304, 305, 341,
	342, 374, 375, 376, 357, 301, 0, 0, 360, 344,
	75, 0, 101, 150, 118, 92, 141, 369, 359, 0,
	332, 371, 310, 324, 379, 325, 326, 353, 298, 340,
	113, 322, 0, 313, 293, 319, 294, 311, 334, 90,
	337, 309, 361, 343, 100, 377, 102, 348, 0, 124,
	109, 0, 0, 336, 363, 338, 358, 331, 354, 303,
	347, 372, 323, 351, 373, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 350,
	368, 321, 352, 292, 349, 0, 296, 299, 378, 366,
	316, 317, 0, 0, 0, 0, 0, 0, 0, 335,
	339, 355, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 346, 0, 0, 0, 300, 297, 0,
	333, 0, 0, 0, 302, 0, 315, 356, 0, 291,
	364, 330, 165, 367, 328, 327, 370, 116, 0, 0,
	127, 95, 94, 362, 312, 320, 86, 318, 121, 114,
	139, 345, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 295, 0, 125, 140, 152, 308, 365, 146, 147,
	148, 149, 110, 83, 96, 123, 306, 307, 304, 305,
	341, 342, 374, 375, 376, 357, 301, 0, 0, 360,
	344, 75, 0, 101, 150, 118, 92, 141, 369, 359,
	0, 332, 371, 310, 324, 379, 325, 326, 353, 298,
	340, 113, 322, 0, 313, 293, 319, 294, 311, 334,
	90, 337, 309, 361, 343, 100, 377, 102, 348, 0,
	124, 109, 0, 0, 336, 363, 338, 358, 331, 354,
	303, 347, 372, 323, 351, 373, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	350, 368, 321, 352, 292, 349, 0, 296, 299, 378,
	366, 316, 317, 0, 0, 0, 0, 0, 0, 0,
	335, 339, 355, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 314, 0, 346, 0, 0, 0, 300, 297,
	0, 333, 0, 0, 0, 302, 0, 315, 356, 0,
	291, 364, 330, 165, 367, 328, 327, 370, 116, 0,
	0, 127, 95, 94, 362, 312, 320, 86, 318, 121,
	114, 139, 345, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 289, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 295, 0, 125, 140, 152, 308, 365, 146,
	147, 148, 149, 290, 288, 96, 123, 306, 307, 304,
	305, 341, 342, 374, 375, 376, 357, 301, 0, 0,
	360, 344, 75, 0, 101, 150, 118, 92, 141, 369,
	359, 0, 332, 371, 310, 324, 379, 325, 326, 353,
	298, 340, 113, 322, 0, 313, 293, 319, 294, 311,
	334, 90, 337, 309, 361, 343, 100, 377, 102, 348,
	0, 124, 109, 0, 0, 336, 363, 338, 358, 331,
	354, 303, 347, 372, 323, 351, 373, 0, 0, 0,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 350, 368, 321, 352, 292, 349, 0, 296, 299,
	378, 366, 316, 317, 0, 0, 0, 0, 0, 0,
	0, 335, 339, 355, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 346, 0, 0, 0, 300,
	297, 0, 333, 0, 0, 0, 302, 0, 315, 356,
	0, 291, 364, 330, 165, 367, 328, 327, 370, 116,
	0, 0, 127, 95, 94, 362, 312, 320, 86, 318,
	121, 114, 139, 345, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 295, 0, 125, 140, 152, 308, 365,
	146, 147, 148, 149, 110, 83, 96, 123, 306, 307,
	304, 305, 341, 342, 374, 375, 376, 357, 301, 0,
	0, 360, 344, 75, 0, 101, 150, 118, 92, 141,
	369, 359, 0, 332, 371, 310, 324, 379, 325, 326,
	353, 298, 340, 113, 322, 0, 313, 293, 319, 294,
	311, 334, 90, 337, 309, 361, 343, 100, 377, 102,
	348, 0, 124, 109, 0, 0, 336, 363, 338, 358,
	331, 354, 303, 347, 372, 323, 351, 373, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 350, 368, 321, 352, 292, 349, 0, 296,
	299, 378, 366, 316, 317, 0, 0, 0, 0, 0,
	0, 0, 335, 339, 355, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 314, 0, 346, 0, 0, 0,
	300, 297, 0, 333, 0, 0, 0, 302, 0, 315,
	356, 0, 291, 364, 330, 165, 367, 328, 327, 370,
	116, 0, 0, 127, 95, 94, 362, 312, 320, 86,
	318, 121, 114, 139, 345, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	289, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 295, 0, 125, 140, 152, 308,
	365, 146, 147, 148, 149, 290, 288, 283, 282, 306,
	307, 304, 305, 341, 342, 374, 375, 376, 357, 301,
	0, 0, 360, 344, 75, 0, 101, 150, 118, 92,
	141, 113, 0, 0, 682, 0, 217, 0, 0, 0,
	90, 0, 214, 0, 0, 100, 254, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 215,
	235, 234, 237, 238, 239, 240, 0, 0, 84, 236,
	241, 242, 243, 0, 0, 212, 228, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	208, 0, 0, 0, 265, 0, 227, 0, 0, 223,
	224, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 263, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 255, 264, 261,
	262, 259, 260, 258, 257, 256, 266, 249, 250, 252,
	0, 251, 75, 0, 101, 150, 118, 92, 141, 113,
	0, 0, 0, 0, 217, 0, 0, 0, 90, 0,
	214, 0, 0, 100, 254, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 215, 235, 234,
	237, 238, 239, 240, 0, 0, 84, 236, 241, 242,
	243, 0, 0, 212, 228, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 208, 0,
	0, 0, 265, 0, 227, 0, 0, 223, 224, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 263, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 255, 264, 261, 262, 259,
	260, 258, 257, 256, 266, 249, 250, 252, 23, 251,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	113, 0, 0, 0, 0, 217, 0, 0, 0, 90,
	0, 214, 0, 0, 100, 254, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 215, 235,
	234, 237, 238, 239, 240, 0, 0, 84, 236, 241,
	242, 243, 0, 0, 212, 228, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 0,
	0, 0, 0, 265, 0, 227, 0, 0, 223, 224,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 263, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 255, 264, 261, 262,
	259, 260, 258, 257, 256, 266, 249, 250, 252, 0,
	251, 75, 0, 101, 150, 118, 92, 141, 113, 0,
	0, 0, 0, 217, 0, 0, 0, 90, 0, 214,
	0, 0, 100, 254, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 215, 235, 234, 237,
	238, 239, 240, 0, 0, 84, 236, 241, 242, 243,
	0, 0, 212, 228, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 0, 0, 0,
	0, 265, 0, 227, 0, 0, 223, 224, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 263, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 0, 146, 147, 148, 149,
	110, 83, 96, 123, 255, 264, 261, 262, 259, 260,
	258, 257, 256, 266, 249, 250, 252, 113, 251, 75,
	0, 101, 150, 118, 92, 141, 90, 0, 0, 0,
	0, 100, 254, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 215, 235, 234, 237, 238,
	239, 240, 0, 0, 84, 236, 241, 242, 243, 0,
	0, 0, 228, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 0, 0, 0, 0,
	265, 0, 227, 0, 0, 223, 224, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 263, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 1159, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 110,
	83, 96, 123, 255, 264, 261, 262, 259, 260, 258,
	257, 256, 266, 249, 250, 252, 113, 251, 75, 0,
	101, 150, 118, 92, 141, 90, 0, 0, 0, 0,
	100, 254, 102, 0, 0, 124, 109, 0, 0, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 215, 235, 234, 237, 238, 239,
	240, 0, 0, 84, 236, 241, 242, 243, 0, 0,
	0, 228, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 0, 0, 0, 0, 265,
	0, 227, 0, 0, 223, 224, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 263, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 0, 146, 147, 148, 149, 110, 83,
	96, 123, 255, 264, 261, 262, 259, 260, 258, 257,
	256, 266, 249, 250, 252, 113, 251, 75, 0, 101,
	150, 118, 92, 141, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 453,
	463, 464, 456, 457, 458, 459, 460, 461, 462, 455,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 0, 146, 147, 148, 149, 110, 83, 96,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 113, 0, 0, 0, 442, 0, 0,
	0, 0, 90, 0, 0, 0, 562, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 444, 574, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 439, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 580, 581, 582, 583,
	584, 585, 440, 586, 587, 588, 589, 590, 575, 576,
	577, 578, 560, 561, 0, 0, 563, 0, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 67, 0, 0, 0, 71, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 69, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141, 113, 0,
	0, 0, 536, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 538, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 0, 146, 147, 148, 149,
	110, 83, 96, 123, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 75,
	0, 101, 150, 118, 92, 141, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 110,
	83, 96, 123, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 75, 0,
	101, 150, 118, 92, 141, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 113, 146, 147, 148, 149, 110, 83,
	96, 123, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 633, 0, 0, 634, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 550, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	549, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141, 113, 0,
	0, 0, 536, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 538, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	534, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 113, 146, 147, 148, 149,
	110, 83, 96, 123, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	50, 0, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 113, 146, 147, 148, 149, 110, 83, 96,
	123, 90, 0, 0, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 538, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 113,
	146, 147, 148, 149, 110, 83, 96, 123, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 444,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	75, 0, 101, 150, 118, 92, 141, 514, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 276,
	0, 0, 125, 140, 152, 0, 113, 146, 147, 148,
	149, 110, 83, 96, 123, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 113, 146, 147, 148, 149, 110, 83,
	96, 123, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 113, 146, 147,
	148, 149, 110, 83, 96, 123, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 75, 0,
	101, 150, 118, 92, 141, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 101, 150, 118,
	92, 141,
}
var yyPact = [...]int{

	1967, -1000, -166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 741, 785, -1000, -1000, -1000, -1000, -1000, -1000, 559,
	5932, 21, 40, 51, 8185, 38, 181, 8716, -1000, -36,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 523, -1000, -1000,
	-1000, -1000, -1000, 726, 753, 558, 719, 636, -1000, 4531,
	13, 7277, 8008, 4115, -1000, 372, 32, 8716, -123, 8362,
	15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35, 8716, -1000, 8716, 14, 368, 14,
	8716, -1000, 87, -1000, -1000, -1000, -1000, 8716, 361, 678,
	45, 2568, 2568, 2568, 2568, -20, 2568, 2568, 580, -1000,
	-1000, -1000, -1000, 2568, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 383, 673, 4950, 4950, 741, -1000, 523,
	-1000, -1000, -1000, 668, -1000, -1000, 206, 763, -1000, 5755,
	79, -1000, 4950, 1518, 518, -1000, -1000, 518, -1000, -1000,
	75, -1000, -1000, 5348, 5348, 5348, 5348, 5348, 5348, 5348,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 518, -1000, 4742, 518, 518, 518,
	518, 518, 518, 4950, 518, 518, 518, 518, 518, 518,
	518, 518, 518, 518, 518, 518, 518, 7831, 506, 597,
	-1000, -1000, -1000, 714, 6538, 7100, 8716, 503, -1000, 492,
	3673, -1000, -1000, -1000, 134, 6892, -1000, -1000, -1000, 677,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	444, -1000, 5680, 343, 2568, 22, 548, 8716, 146, 8716,
	2568, 24, 8716, 712, 577, 8716, -1000, 3894, -1000, 2568,
	2568, 2568, 2568, 2568, 2568, 2568, 2568, -1000, -1000, -1000,
	-1000, -1000, -1000, 2568, 2568, -1000, -1000, 8716, -1000, -1000,
	-1000, -1000, 780, 111, 767, 78, 507, -1000, 740, 726,
	383, 636, 6715, 590, -1000, -1000, 8716, -1000, 4950, 4950,
	415, -1000, 7631, -1000, -1000, 3010, 118, 5348, 229, 283,
	5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348, 5348,
	5348, 5348, 5348, 5348, 5348, 268, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 341, -1000, 523, 945, 945, 98,
	98, 98, 98, 98, 98, 5547, 4323, 383, 421, 203,
	4742, 4531, 4531, 4950, 4950, 4531, 720, 159, 203, 8362,
	-1000, 383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4531,
	4531, 4531, 4531, -6, 8716, -1000, 8539, 7277, 7277, 7277,
	7277, 7277, -1000, 624, 605, -1000, 623, 622, 606, 8716,
	-1000, 416, 6538, 90, 518, -1000, 7454, -1000, -1000, -6,
	7277, 8716, -1000, -1000, 3673, 492, 4950, 97, -1000, -1000,
	-1000, -1000, 2347, 241, 173, -98, -1000, -1000, 532, -1000,
	532, 532, 532, 532, -77, -77, -77, -77, -1000, -1000,
	-1000, -1000, -1000, 550, -1000, 532, 532, 532, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 543, 543, 543, 537,
	537, 570, -1000, 8716, -139, 336, -1000, 711, 66, -1000,
	8716, -1000, -1000, 8716, 2568, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	641, 4950, 4950, 3452, 4950, -1000, -1000, -1000, 673, -1000,
	720, 749, -1000, 657, 650, 4531, -1000, -1000, 118, 167,
	-1000, -1000, 301, -1000, -1000, -1000, -1000, 73, 518, -1000,
	1137, -1000, -1000, -1000, -1000, 229, 5348, 5348, 5348, 653,
	1137, 1238, 1371, 1345, 98, 311, 311, 95, 95, 95,
	95, 95, 618, 618, -1000, -1000, -1000, 383, -1000, -1000,
	-1000, 383, 4531, 489, -1000, -1000, 4950, -1000, 383, 398,
	398, 244, 352, 398, 4531, 180, -1000, 4950, 383, -1000,
	398, 383, 398, 398, 479, 518, -1000, 513, -1000, 129,
	-1000, 58, 597, 547, 576, 933, -1000, -1000, -1000, -1000,
	593, -1000, 592, -1000, -1000, -1000, -1000, -1000, 30, 29,
	27, 8362, -1000, 761, 504, -1000, -1000, 203, -1000, 333,
	485, 2126, -1000, -1000, -1000, -1000, -1000, -1000, 542, 701,
	148, 308, -1000, -1000, 669, -1000, 179, -100, -1000, -1000,
	246, -77, -77, -1000, -1000, 97, 672, 97, 97, 97,
	300, -1000, -1000, -1000, -1000, 242, -1000, -1000, -1000, 235,
	-1000, 575, 8362, 2568, -1000, 3231, -1000, -1000, -1000, -1000,
	183, 96, 132, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -8, -1000, 2568, -1000, 639, 203,
	203, 55, -1000, -1000, 8716, -1000, -1000, -1000, -1000, 529,
	-1000, -1000, -1000, 2789, 4531, -1000, 653, 1137, 704, -1000,
	5348, 5348, -1000, -1000, 398, 4531, 203, -1000, -1000, -1000,
	514, 268, 514, -133, 509, 138, -1000, 4950, 208, -1000,
	-1000, -1000, -1000, -1000, 573, 8539, 518, -1000, 6339, 8362,
	741, 8539, 4950, 4950, 3452, -1000, -1000, 4950, 539, -1000,
	4950, -1000, -1000, -1000, 518, 518, 518, 377, -1000, 741,
	-1000, -1000, 2347, -1000, 2347, 8362, -1000, 303, -1000, -1000,
	515, 60, -1000, -1000, -1000, 392, 97, 97, -1000, 142,
	-1000, -1000, -1000, 395, -1000, 484, 390, 8716, -1000, -1000,
	477, -1000, 128, -1000, -1000, 8362, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8362, 8716,
	-1000, -1000, -1000, -1000, -1000, 8362, -1000, -1000, 3231, -1000,
	761, 7277, -1000, -1000, 383, -1000, 5348, 1137, 1137, -1000,
	-1000, 383, 532, 532, -1000, 532, 537, -1000, 532, -45,
	532, -60, 383, 383, 518, -130, -1000, 203, 4950, -1000,
	703, 453, 472, -1000, -1000, 1707, 383, 380, 53, 377,
	726, -1000, 203, 203, -1000, 203, 8362, 203, 8362, 8362,
	8362, 6140, 8362, 726, 2126, -1000, 365, -1000, 532, -1000,
	-93, 778, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -77, 276, 230, -1000, 225, 2568, 3231,
	2347, -1000, 520, -1000, -1000, -1000, -1000, 707, 759, 473,
	-1000, 1137, -1000, -1000, 41, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5348, 383, 272, 203, 700, -1000, 518,
	-1000, -1000, 475, 8362, 8362, -1000, -1000, 340, -1000, 332,
	332, 332, 90, -1000, -1000, 570, 8362, -1000, 119, -1000,
	-112, 97, -1000, 387, 385, -1000, -1000, -1000, 8362, 518,
	756, 746, -1000, -1000, 12, -1000, -1000, 770, -1000, 518,
	-1000, 523, 50, -1000, 8362, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 194, 698, -1000, 693, -1000, -1000, -1000, -1000,
	327, -10, -1000, 4950, 4950, 383, 37, -144, 8539, 472,
	383, 8362, -1000, -1000, 269, -1000, -1000, 548, 307, -1000,
	8362, 203, 459, -1000, 634, -137, -147, 452, -1000, -1000,
	-1000, -139, -1000, -10, 646, -1000, 632, -1000, -1000, -1000,
	-17, -140, -22, -145, 518, -155, 5149, -1000, 1112, 383,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1048, 19, 421, 1045, 1044, 1043, 1041, 1040, 1039,
	1038, 1037, 1032, 1031, 1029, 1027, 1026, 1024, 1023, 1022,
	1018, 1017, 1015, 1013, 166, 1009, 1008, 1001, 57, 988,
	65, 982, 970, 36, 76, 45, 39, 725, 969, 18,
	66, 55, 968, 41, 967, 966, 962, 961, 49, 957,
	955, 1119, 954, 953, 17, 32, 952, 951, 949, 948,
	56, 3, 946, 944, 940, 937, 935, 934, 43, 8,
	7, 25, 13, 933, 29, 6, 932, 42, 928, 925,
	924, 923, 51, 920, 46, 919, 16, 44, 918, 9,
	53, 34, 24, 5, 61, 917, 37, 52, 914, 271,
	911, 123, 907, 905, 904, 897, 892, 50, 0, 441,
	480, 58, 891, 10, 880, 1134, 71, 54, 22, 879,
	28, 252, 27, 876, 873, 23, 871, 867, 865, 864,
	858, 853, 133, 852, 851, 850, 14, 12, 849, 840,
	47, 26, 839, 836, 833, 831, 48, 830, 40, 829,
	828, 823, 30, 21, 822, 11, 820, 819, 1, 817,
	15, 816, 4, 814, 2, 33, 813, 812, 88, 199,
	808, 792, 59,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 164, 164, 163, 162, 162, 161, 161,
	160, 16, 149, 150, 150, 150, 146, 126, 126, 126,
	129, 129, 127, 127, 127, 127, 127, 127, 127, 128,
	128, 128, 128, 128, 130, 130, 130, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 145, 145, 132, 132, 140, 140, 141,
	141, 141, 138, 138, 139, 139, 142, 142, 142, 133,
	133, 133, 133, 133, 133, 133, 135, 135, 143, 143,
	136, 136, 136, 137, 137, 144, 144, 144, 144, 144,
	134, 134, 147, 154, 154, 154, 154, 148, 148, 156,
	156, 155, 151, 151, 151, 152, 152, 152, 153, 153,
	153, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 159, 157, 157, 158, 158, 13, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 124, 124, 124, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	171, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 112, 112, 112, 111, 111, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 119, 119, 118, 118, 118, 117, 117, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 100, 100, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 172, 172, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 122, 122, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	96, 94, 94, 97, 97, 95, 95, 95, 114, 114,
	114, 98, 98, 101, 101, 102, 102, 99, 99, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 104,
	104, 104, 105, 105, 106, 106, 106, 113, 113, 109,
	109, 110, 110, 115, 115, 116, 116, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 168, 169, 120, 121,
	121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 8, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 3, 4, 2,
	4, 2, 2, 2, 2, 3, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -168, 8, 213,
	53, -167, 226, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, -106, 120, 70, 146,
	118, 124, -109, 56, -108, 219, 150, 161, 155, 182,
	174, 172, 175, 201, 65, 153, 134, 170, 166, 164,
	27, 187, 224, 165, 130, 129, 202, 159, 160, 186,
	32, 221, 34, 142, 185, 181, 184, 158, 180, 38,
	200, 177, 167, 18, 137, 140, 125, 144, 223, 163,
	141, 136, 154, 203, 37, 191, 157, 128, 151, 148,
	178, 143, 168, 169, 183, 156, 179, 152, 145, 138,
	192, 225, 176, 173, 149, 147, 196, 197, 198, 199,
	222, 171, 193, -99, 120, 122, 118, 118, 119, 120,
	118, -51, -115, 56, -108, 120, 146, 118, 106, 175,
	112, 194, 119, 32, 144, -124, 118, 195, 147, 196,
	197, 198, 199, 56, 203, 202, -115, 152, -120, -120,
	-120, -120, -120, -2, -86, 17, 16, -5, -3, -168,
	6, 20, 21, -30, 39, 40, -25, -36, 97, -37,
	-115, -56, 72, -61, 29, 56, -108, 23, -60, -57,
	-75, -73, -74, 106, 107, 95, 96, 103, 73, 108,
	-65, -63, -64, -66, 58, 57, 66, 59, 60, 61,
	62, 67, 68, 69, -109, -71, -168, 43, 44, 214,
	215, 218, 216, 75, 33, 204, 212, 211, 210, 208,
	209, 206, 207, 123, 205, 101, 213, -99, -39, -40,
	-41, -42, -53, -74, -168, -51, 11, -46, -51, -94,
	-123, -97, 203, 202, -110, -95, -109, -107, 201, 175,
	200, 117, 71, 22, 24, 189, 74, 106, 16, 75,
	105, 214, 112, 47, 206, 207, 204, 205, 194, 29,
	10, 25, 132, 21, 99, 114, 78, 79, 135, 23,
	133, 69, 19, 50, 11, 13, 14, 123, 122, 90,
	119, 45, 8, 108, 26, 87, 41, 28, 43, 88,
	17, 208, 209, 31, 218, 139, 101, 48, 35, 72,
	67, 51, 70, 15, 46, 89, 115, 213, 44, 6,
	217, 30, 131, 42, 118, 195, 77, 121, 68, 5,
	124, 9, 49, 52, 210, 211, 212, 33, 76, 12,
	-150, -146, 56, 119, -51, 213, -109, -102, 123, 118,
	-51, -51, -101, 123, 56, -101, -51, 109, -51, 56,
	30, 205, 56, 144, 118, 145, 120, -121, -168, -110,
	-121, -121, -121, 148, 149, -121, -121, 51, -121, -169,
	55, -87, 19, 31, -37, -115, -83, -84, -37, -82,
	-2, -24, 35, -28, 21, 64, 11, -112, 71, 70,
	87, -111, 22, -109, 58, 109, -37, -58, 90, 72,
	88, 89, 74, 92, 91, 102, 95, 96, 97, 98,
	99, 100, 101, 93, 94, 105, 80, 81, 82, 83,
	84, 85, 86, -100, -168, -74, -168, 110, 111, -61,
	-61, -61, -61, -61, -61, -61, -168, -2, -69, -37,
	-168, -168, -168, -168, -168, -168, -168, -78, -37, -168,
	-172, -168, -172, -172, -172, -172, -172, -172, -172, -168,
	-168, -168, -168, -52, 26, -51, 30, 54, -47, -49,
	-48, -50, 41, 45, 47, 42, 43, 44, 48, -119,
	22, -39, -168, -118, 140, -117, 22, -115, 58, -51,
	-170, 54, 11, 52, 54, -94, 80, -114, -109, 58,
	29, 30, 55, 54, -126, -129, -131, -130, -127, -128,
	172, 173, 106, 176, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 134, 168, 169, 170, 171, 155,
	156, 157, 158, 159, 160, 161, 163, 164, 165, 166,
	167, 56, -121, 120, -164, 52, -51, 72, -51, -121,
	121, -51, 23, 51, -51, -116, -115, -107, -121, -121,
	-121, -121, -121, -121, -121, -121, -121, -121, -51, 9,
	90, 54, 18, 109, 54, -85, 24, 25, -86, -169,
	-30, -62, -109, 59, 62, -29, 42, -51, -37, -37,
	-67, 67, 72, 68, 69, -111, 97, -116, -110, -107,
	-61, -68, -71, -74, 63, 90, 88, 89, 74, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -122, 56, 58, 56, -60, -60,
	-109, -35, 21, -34, -36, -169, 54, -169, -2, -34,
	-34, -37, -37, -34, -28, -76, -77, 76, -109, -169,
	-34, -35, -34, -34, -90, 140, -51, -93, -96, -75,
	-109, -115, -40, -41, -41, -40, -41, 41, 41, 41,
	46, 41, 46, 41, -48, -115, -169, -54, 49, 122,
	50, -168, -117, -90, -39, -51, -97, -37, -137, 105,
	-151, -152, -153, -110, 58, 59, -146, -147, -154, 125,
	124, -148, 119, 28, -142, 67, 72, -138, 192, -132,
	53, -132, -132, -132, -132, -136, 175, -136, -136, -136,
	53, -132, -132, -132, -140, 53, -140, -140, -141, 53,
	-141, -113, 52, -51, -162, 222, -163, 56, 23, -103,
	117, 114, 115, -159, 113, 189, 175, 65, 29, 15,
	214, 140, 225, 56, 141, -51, -51, -121, 37, -37,
	-37, -116, -84, -87, -98, 19, 11, 33, 33, -34,
	67, 68, 69, 109, -168, -68, -61, -61, -61, -33,
	135, 71, -169, -169, -34, 54, -37, -169, -169, -169,
	54, 52, 22, -169, -34, -79, -77, 78, -37, -169,
	-169, -169, -169, -169, -59, 30, 33, -2, -168, -168,
	-55, 54, 12, 80, 109, -44, -43, 51, 52, -45,
	51, -43, 41, 41, 119, 119, 119, -91, -109, -55,
	-55, 56, 54, -153, 80, 53, 28, -148, 56, 56,
	-133, 29, 67, -139, 193, 59, -136, -136, -137, 30,
	-137, -137, -137, -145, 58, 59, 59, 51, -109, -121,
	-161, -160, -110, -120, -165, 146, 126, 127, 130, 129,
	56, 119, 28, 125, 128, 140, 124, -165, 146, -104,
	-105, 121, 22, 119, 28, 140, -121, 38, 109, -51,
	-38, 11, 97, -110, -35, -33, 71, -61, -61, -169,
	-36, -125, 106, 172, 134, 170, 166, 186, 177, 191,
	168, 192, -122, -125, 219, -82, 79, -37, 77, -92,
	51, -93, -70, -72, -71, -168, -2, -88, -109, -91,
	-82, -96, -37, -37, -110, -37, 53, -37, -168, -168,
	-168, -169, 54, -82, -152, -153, -156, -155, -109, 56,
	-135, 51, 58, 59, 60, 67, 204, 66, 55, -137,
	-137, 56, 106, 55, 54, 54, 55, 54, -51, 54,
	80, -120, -109, -120, -109, -51, -120, -109, -55, -39,
	-169, -61, -169, -132, -132, -132, -141, -132, 160, -132,
	160, -169, -169, -168, -32, 217, -37, 27, -92, 54,
	-169, -169, -169, 54, 109, -169, -86, -89, -109, -89,
	-89, -89, -118, -109, -86, 55, 54, -132, -143, 189,
	9, -136, 58, 59, 59, -121, -160, -153, 53, 26,
	-80, 13, -136, 56, -61, -169, 58, 28, -72, 33,
	-2, -168, -109, -109, 54, 55, -169, -169, -169, -54,
	-113, -155, -144, 125, 28, 124, 204, -137, 55, 55,
	-89, -168, -81, 14, 16, -31, 90, 222, 9, -70,
	-2, 109, -109, -134, 65, 28, 28, 55, -157, -158,
	140, -37, -69, -169, 220, 48, 223, -93, -169, -109,
	58, -164, -169, 54, -109, 38, 221, 224, -162, -158,
	33, 38, 142, 222, 143, 223, -168, 224, -61, 139,
	-169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 455, 0, 230, 230, 230, 230, 230, 230, 0,
	524, 507, 0, 0, 0, 0, 216, 220, 221, 0,
	223, 224, 708, 708, 708, 708, 708, 0, 33, 34,
	706, 1, 3, 463, 0, 0, 234, 237, 232, 0,
	507, 0, 0, 0, 48, 0, 0, 696, 0, 697,
	505, 525, 526, 529, 530, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 698, 699, 700, 701, 702,
	703, 704, 705, 0, 0, 508, 0, 503, 0, 503,
	0, 191, 301, 533, 534, 696, 697, 0, 0, 0,
	0, 709, 709, 709, 709, 0, 709, 709, 209, 211,
	212, 213, 214, 709, 217, 218, 219, 222, 225, 226,
	227, 228, 229, 27, 467, 0, 0, 455, 29, 0,
	230, 235, 236, 240, 238, 239, 231, 0, 248, 252,
	0, 309, 0, 314, 316, -2, -2, 0, 351, 352,
	353, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	378, 379, 380, 381, 440, 441, 442, 443, 444, 445,
	446, 447, 318, 319, 437, 487, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 402, 402, 402, 402, 402,
	402, 402, 402, 0, 0, 0, 0, 0, 0, 259,
	261, 262, 263, 282, 0, 284, 0, 0, 40, 44,
	0, 491, -2, -2, 0, 0, 531, 532, -2, 633,
	-2, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	0, 63, 0, 0, 709, 0, 53, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 190, 0, 192, 709,
	709, 709, 709, 709, 709, 709, 709, 201, 710, 711,
	202, 203, 204, 709, 709, 206, 207, 0, 215, 28,
	707, 22, 0, 0, 464, 0, 456, 457, 460, 463,
	27, 237, 0, 242, 241, 233, 0, 249, 0, 0,
	0, 253, 0, 255, 256, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 341, 342, 315, 0, 329, 0, 0, 0, 371,
	372, 373, 374, 375, 376, 0, 244, 27, 0, 349,
	0, 0, 0, 0, 0, 0, 240, 0, 429, 0,
	394, 0, 395, 396, 397, 398, 399, 400, 401, 0,
	244, 0, 0, 42, 0, 300, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 292, 0, 0, 0, 0,
	283, 0, 0, 303, 666, 285, 0, 287, 288, 42,
	0, 0, 38, 39, 0, 45, 0, 133, 498, 499,
	500, 496, 152, 0, 116, 112, 68, 69, 105, 71,
	105, 105, 105, 105, 130, 130, 130, 130, 97, 98,
	99, 100, 101, 0, 84, 105, 105, 105, 88, 72,
	73, 74, 75, 76, 77, 78, 107, 107, 107, 109,
	109, 527, 50, 0, 56, 0, 61, 0, 0, 168,
	0, 187, 504, 0, 709, 302, 535, 536, 193, 194,
	195, 196, 197, 198, 199, 200, 205, 208, 210, 468,
	0, 0, 0, 0, 0, 459, 461, 462, 467, 30,
	240, 0, 448, 0, 0, 0, 243, 25, 310, 311,
	313, 330, 0, 332, 334, 254, 250, 0, 438, -2,
	320, 321, 345, 346, 347, 0, 0, 0, 0, 343,
	325, 0, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 370, 413, 414, 0, 368, 369,
	377, 0, 0, 245, 246, 348, 0, 486, 27, 0,
	0, 0, 0, 0, 0, 435, 432, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 299, 307, 488, 0,
	437, 0, 260, 278, 280, 0, 275, 290, 291, 293,
	0, 295, 0, 297, 298, 264, 265, 266, 0, 0,
	0, 0, 286, 307, 307, 41, 492, 493, 494, 0,
	62, 153, 155, 158, 159, 160, 64, 65, 0, 0,
	0, 0, 147, 148, 119, 117, 0, 114, 113, 70,
	0, 130, 130, 91, 92, 133, 0, 133, 133, 133,
	0, 85, 86, 87, 79, 0, 80, 81, 82, 0,
	83, 0, 0, 709, 52, 0, 54, 55, 506, 708,
	0, 0, 519, 169, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 0, 186, 709, 189, 0, 465,
	466, 0, 458, 23, 0, 501, 502, 449, 450, 257,
	331, 333, 335, 0, 244, 322, 343, 326, 0, 323,
	0, 0, 317, 382, 0, 0, 350, -2, 385, 386,
	0, 0, 0, 0, 455, 0, 433, 0, 0, 393,
	404, 405, 406, 407, 480, 0, 0, -2, 0, 0,
	455, 0, 0, 0, 0, 272, 279, 0, 0, 273,
	0, 274, 294, 296, 0, 0, 0, 0, 270, 455,
	37, 134, 0, 156, 0, 0, 143, 0, 145, 146,
	126, 0, 118, 67, 115, 0, 133, 133, 93, 0,
	94, 95, 96, 0, 103, 0, 0, 0, 528, 51,
	57, 58, 0, 161, 708, 0, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 708, 0, 0,
	708, 520, 521, 522, 523, 0, 188, 469, 0, 24,
	307, 0, 251, 439, 0, 324, 0, 344, 327, 383,
	247, 0, 105, 105, 418, 105, 109, 421, 105, 423,
	105, 426, 0, 0, 0, 430, 392, 436, 0, 31,
	0, 480, 470, 482, 484, 0, 27, 0, 476, 0,
	463, 489, 308, 490, 438, 276, 0, 281, 0, 0,
	0, 284, 0, 463, 154, 157, 0, 149, 105, 144,
	128, 0, 120, 121, 122, 123, 124, 125, 106, 89,
	90, 131, 132, 130, 0, 0, 110, 0, 709, 0,
	0, 162, 0, 163, 165, 166, 167, 0, 451, 258,
	384, 328, 387, 415, 130, 419, 420, 422, 424, 425,
	427, 389, 388, 0, 0, 0, 434, 0, 32, 0,
	485, -2, 0, 0, 0, 43, 35, 0, 268, 0,
	0, 0, 303, 271, 36, 527, 0, 151, 135, 129,
	0, 133, 104, 0, 0, 49, 59, 60, 0, 0,
	453, 0, 416, 417, 408, 391, 431, 0, 483, 0,
	-2, 0, 478, 477, 0, 277, 304, 305, 306, 267,
	142, 150, 140, 0, 137, 139, 127, 102, 108, 111,
	0, 0, 26, 0, 0, 0, 0, 0, 0, 473,
	27, 0, 269, 66, 0, 136, 138, 53, 0, 182,
	0, 454, 452, 390, 0, 0, 0, 481, -2, 479,
	141, 56, 181, 0, 0, 409, 0, 412, 164, 183,
	0, 410, 0, 0, 0, 0, 0, 411, 0, 0,
	184, 185,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 226,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:292
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:297
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:298
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:325
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:343
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:377
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:389
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:411
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:435
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:440
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:444
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:470
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:475
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:488
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:497
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:501
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:512
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:534
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:540
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:547
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:554
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:559
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:563
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:569
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:590
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:743
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:748
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:753
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:757
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:766
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:774
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:784
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:792
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:801
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:836
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:840
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:848
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:853
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:857
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:862
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:871
		{
			yyVAL.str = ""
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:875
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:879
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = ""
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:893
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.colKeyOpt = colKey
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:905
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:909
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:914
		{
			yyVAL.optVal = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:918
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:924
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:930
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:938
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:942
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:962
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:973
		{
			yyVAL.str = ""
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:993
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:997
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1052
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1057
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1117
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1125
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1130
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.str = SessionStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.str = GlobalStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.statement = &Begin{}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.statement = &Begin{}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Commit{}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &Rollback{}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &OtherRead{}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &OtherRead{}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &OtherRead{}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1323
		{
			setAllowComments(yylex, true)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.bytes2 = nil
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = UnionStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = UnionAllStr
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = UnionDistinctStr
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.str = SQLCacheStr
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = DistinctStr
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.str = ""
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = StraightJoinHint
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.selectExprs = nil
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1543
		{
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1549
		{
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.empty = struct{}{}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.empty = struct{}{}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.str = JoinStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.str = JoinStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.str = JoinStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = StraightJoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.str = LeftJoinStr
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.str = LeftJoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = RightJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = RightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = NaturalJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.indexHints = nil
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = IsNullStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = IsNotNullStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.str = IsTrueStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.str = IsNotTrueStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.str = IsFalseStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = IsNotFalseStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = EqualStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = LessThanStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.str = GreaterThanStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = LessEqualStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = GreaterEqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.str = NotEqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = nil
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1953
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 390:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.str = BooleanModeStr
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.str = QueryExpansionStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = nil
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.str = string("")
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &NullVal{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.exprs = nil
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.orderBy = nil
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.str = AscScr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.str = AscScr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.str = DescScr
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.limit = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.str = ForUpdateStr
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.str = ShareModeStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2437
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.updateExprs = nil
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.bytes = []byte("charset")
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &Default{}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.byt = 0
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.byt = 1
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.str = IgnoreStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2863
		{
			decNesting(yylex)
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2868
		{
			forceEOF(yylex)
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2873
		{
			forceEOF(yylex)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			forceEOF(yylex)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2881
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
