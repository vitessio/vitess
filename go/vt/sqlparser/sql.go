//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const VINDEX = 57464
const VINDEXES = 57465
const STATUS = 57466
const VARIABLES = 57467
const BIT = 57468
const TINYINT = 57469
const SMALLINT = 57470
const MEDIUMINT = 57471
const INT = 57472
const INTEGER = 57473
const BIGINT = 57474
const INTNUM = 57475
const REAL = 57476
const DOUBLE = 57477
const FLOAT_TYPE = 57478
const DECIMAL = 57479
const NUMERIC = 57480
const TIME = 57481
const TIMESTAMP = 57482
const DATETIME = 57483
const YEAR = 57484
const CHAR = 57485
const VARCHAR = 57486
const BOOL = 57487
const CHARACTER = 57488
const VARBINARY = 57489
const NCHAR = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const NULLX = 57501
const AUTO_INCREMENT = 57502
const APPROXNUM = 57503
const SIGNED = 57504
const UNSIGNED = 57505
const ZEROFILL = 57506
const DATABASES = 57507
const TABLES = 57508
const VITESS_KEYSPACES = 57509
const VITESS_SHARDS = 57510
const VITESS_TABLETS = 57511
const VSCHEMA_TABLES = 57512
const NAMES = 57513
const CHARSET = 57514
const GLOBAL = 57515
const SESSION = 57516
const CURRENT_TIMESTAMP = 57517
const DATABASE = 57518
const CURRENT_DATE = 57519
const CURRENT_TIME = 57520
const LOCALTIME = 57521
const LOCALTIMESTAMP = 57522
const UTC_DATE = 57523
const UTC_TIME = 57524
const UTC_TIMESTAMP = 57525
const REPLACE = 57526
const CONVERT = 57527
const CAST = 57528
const GROUP_CONCAT = 57529
const SEPARATOR = 57530
const MATCH = 57531
const AGAINST = 57532
const BOOLEAN = 57533
const LANGUAGE = 57534
const WITH = 57535
const QUERY = 57536
const EXPANSION = 57537
const UNUSED = 57538

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 202,
	79, 597,
	108, 597,
	-2, 42,
	-1, 204,
	79, 620,
	108, 620,
	-2, 44,
	-1, 208,
	108, 496,
	-2, 492,
	-1, 209,
	108, 497,
	-2, 493,
	-1, 638,
	108, 499,
	-2, 495,
	-1, 779,
	5, 22,
	-2, 443,
	-1, 793,
	5, 23,
	-2, 320,
	-1, 967,
	5, 23,
	-2, 444,
	-1, 1015,
	5, 22,
	-2, 446,
	-1, 1061,
	5, 23,
	-2, 447,
}

const yyPrivate = 57344

const yyLast = 8230

var yyAct = [...]int{

	380, 38, 1053, 565, 908, 664, 196, 885, 886, 624,
	171, 882, 430, 3, 736, 429, 973, 432, 677, 379,
	340, 353, 943, 44, 746, 240, 743, 641, 637, 856,
	848, 236, 640, 797, 760, 818, 713, 650, 785, 38,
	342, 782, 351, 165, 408, 238, 402, 176, 603, 199,
	434, 170, 191, 43, 211, 1084, 1075, 180, 1081, 673,
	1070, 418, 1079, 1074, 1069, 956, 1008, 185, 215, 1030,
	814, 657, 985, 1036, 665, 205, 48, 1003, 166, 167,
	168, 169, 1001, 231, 334, 335, 1078, 913, 914, 915,
	658, 1076, 187, 1054, 838, 186, 916, 50, 51, 52,
	53, 221, 604, 222, 1028, 217, 133, 693, 134, 531,
	530, 540, 541, 533, 534, 535, 536, 537, 538, 539,
	532, 691, 348, 542, 577, 134, 1056, 531, 530, 540,
	541, 533, 534, 535, 536, 537, 538, 539, 532, 355,
	497, 542, 492, 835, 233, 218, 235, 849, 697, 837,
	237, 237, 237, 237, 145, 237, 237, 690, 136, 137,
	138, 796, 237, 795, 794, 232, 234, 19, 39, 21,
	22, 213, 135, 625, 627, 554, 555, 38, 1046, 993,
	745, 665, 331, 332, 333, 33, 336, 337, 970, 405,
	23, 190, 431, 339, 860, 801, 564, 450, 404, 1029,
	1027, 819, 226, 922, 444, 687, 692, 685, 532, 32,
	652, 542, 542, 41, 652, 237, 517, 520, 449, 205,
	237, 230, 917, 958, 761, 1068, 695, 698, 944, 237,
	237, 237, 237, 237, 237, 237, 237, 494, 808, 836,
	224, 834, 212, 720, 446, 626, 491, 1057, 812, 1049,
	946, 496, 504, 923, 406, 502, 689, 718, 719, 717,
	505, 506, 507, 508, 509, 510, 511, 512, 518, 761,
	688, 872, 25, 26, 28, 27, 30, 948, 341, 952,
	410, 947, 1063, 945, 520, 31, 34, 35, 950, 41,
	36, 37, 29, 654, 866, 694, 865, 949, 655, 716,
	651, 1039, 951, 953, 651, 989, 696, 209, 988, 649,
	648, 827, 519, 518, 531, 530, 540, 541, 533, 534,
	535, 536, 537, 538, 539, 532, 826, 815, 542, 520,
	737, 190, 738, 63, 987, 237, 237, 143, 825, 921,
	143, 910, 533, 534, 535, 536, 537, 538, 539, 532,
	551, 553, 542, 535, 536, 537, 538, 539, 532, 143,
	143, 542, 40, 1065, 341, 143, 513, 514, 540, 541,
	533, 534, 535, 536, 537, 538, 539, 532, 563, 809,
	542, 567, 568, 569, 570, 571, 572, 573, 739, 576,
	578, 578, 578, 578, 578, 578, 578, 578, 586, 587,
	588, 589, 1019, 341, 341, 519, 518, 519, 518, 706,
	708, 709, 960, 490, 707, 594, 191, 191, 191, 191,
	191, 606, 520, 228, 520, 223, 595, 212, 592, 593,
	1019, 1020, 431, 1032, 628, 1031, 205, 841, 842, 843,
	191, 143, 918, 143, 623, 982, 981, 143, 902, 341,
	621, 622, 19, 143, 443, 631, 751, 63, 63, 63,
	63, 965, 63, 63, 596, 205, 969, 341, 415, 63,
	666, 667, 668, 926, 519, 518, 638, 377, 1014, 556,
	557, 558, 559, 560, 561, 562, 629, 630, 619, 634,
	552, 520, 143, 633, 854, 341, 636, 642, 41, 143,
	143, 143, 237, 61, 928, 927, 63, 645, 679, 608,
	609, 607, 611, 854, 610, 579, 580, 581, 582, 583,
	584, 585, 63, 802, 143, 522, 143, 63, 590, 143,
	19, 206, 143, 701, 143, 867, 63, 63, 63, 63,
	63, 63, 63, 63, 881, 714, 675, 676, 925, 924,
	660, 661, 662, 663, 38, 190, 190, 190, 190, 190,
	441, 521, 19, 751, 341, 670, 671, 672, 567, 415,
	341, 190, 452, 451, 45, 783, 41, 519, 518, 190,
	623, 783, 414, 519, 518, 777, 752, 854, 778, 883,
	638, 681, 443, 41, 520, 177, 659, 740, 741, 763,
	520, 442, 912, 440, 780, 781, 415, 678, 41, 896,
	750, 805, 883, 854, 765, 674, 779, 415, 758, 786,
	787, 828, 17, 443, 669, 55, 132, 239, 239, 239,
	239, 789, 239, 239, 500, 769, 338, 768, 602, 239,
	616, 41, 63, 63, 793, 617, 143, 712, 792, 790,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 715, 816, 817, 803, 175,
	791, 613, 799, 800, 612, 206, 239, 184, 420, 423,
	424, 425, 421, 237, 422, 426, 642, 807, 786, 787,
	614, 618, 239, 424, 425, 615, 1077, 239, 181, 182,
	1073, 237, 821, 822, 823, 840, 239, 239, 239, 239,
	239, 239, 239, 239, 830, 63, 702, 409, 1072, 774,
	143, 773, 343, 143, 143, 143, 143, 143, 831, 820,
	448, 407, 839, 811, 344, 143, 229, 714, 1051, 143,
	1050, 1012, 806, 143, 963, 991, 683, 143, 143, 753,
	754, 861, 499, 757, 844, 428, 178, 179, 409, 63,
	851, 172, 1042, 772, 852, 173, 45, 764, 1041, 766,
	767, 771, 1011, 783, 863, 864, 47, 1043, 868, 888,
	986, 38, 775, 874, 884, 875, 876, 877, 878, 516,
	49, 439, 42, 889, 871, 898, 899, 900, 887, 205,
	143, 1, 686, 1052, 907, 143, 893, 647, 143, 63,
	639, 210, 239, 239, 54, 892, 646, 824, 901, 1026,
	984, 653, 813, 903, 420, 423, 424, 425, 421, 656,
	422, 426, 906, 911, 1048, 905, 810, 455, 934, 456,
	454, 845, 846, 847, 458, 457, 748, 904, 642, 453,
	642, 153, 919, 920, 197, 427, 445, 715, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	63, 855, 542, 680, 937, 56, 933, 931, 833, 938,
	832, 954, 191, 684, 63, 598, 638, 939, 942, 941,
	955, 216, 206, 957, 550, 770, 964, 962, 368, 367,
	370, 371, 372, 373, 972, 198, 750, 369, 374, 966,
	967, 968, 890, 971, 980, 975, 976, 977, 591, 978,
	401, 206, 961, 1040, 1010, 853, 870, 574, 239, 239,
	237, 759, 354, 803, 705, 366, 63, 363, 365, 869,
	364, 597, 776, 524, 352, 346, 189, 411, 63, 419,
	417, 642, 416, 194, 788, 784, 188, 1006, 880, 1007,
	1055, 990, 601, 994, 995, 20, 888, 999, 46, 1016,
	183, 16, 935, 936, 1013, 1004, 1005, 15, 14, 239,
	13, 1015, 24, 12, 11, 887, 10, 1025, 1024, 63,
	63, 9, 1033, 8, 7, 6, 1021, 1022, 1023, 5,
	983, 4, 174, 1035, 18, 2, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 888, 0, 38, 0, 345,
	403, 190, 1044, 0, 0, 0, 0, 0, 1038, 1045,
	0, 0, 0, 0, 887, 996, 997, 0, 998, 904,
	742, 1000, 239, 1002, 0, 0, 1059, 0, 0, 0,
	1060, 0, 0, 0, 762, 0, 63, 992, 0, 0,
	0, 0, 0, 0, 0, 205, 1061, 0, 1071, 0,
	0, 850, 0, 1064, 0, 0, 1067, 0, 143, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 63,
	0, 531, 530, 540, 541, 533, 534, 535, 536, 537,
	538, 539, 532, 1085, 1086, 542, 798, 0, 0, 63,
	63, 0, 63, 63, 192, 0, 0, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 1037,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	143, 0, 0, 0, 140, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 829,
	239, 164, 0, 0, 0, 63, 0, 195, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 239, 0,
	141, 141, 207, 0, 0, 0, 141, 0, 0, 143,
	0, 0, 0, 0, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 63, 0, 63, 63, 63, 143,
	63, 0, 0, 63, 531, 530, 540, 541, 533, 534,
	535, 536, 537, 538, 539, 532, 858, 566, 542, 0,
	0, 0, 0, 0, 575, 0, 0, 63, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 219, 0,
	220, 0, 0, 0, 225, 206, 0, 0, 891, 798,
	227, 0, 141, 0, 141, 0, 0, 161, 141, 0,
	0, 0, 0, 0, 141, 0, 0, 63, 63, 239,
	239, 0, 239, 909, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 635, 0, 0, 413,
	0, 63, 0, 0, 0, 0, 0, 0, 438, 0,
	0, 0, 0, 141, 0, 0, 932, 146, 0, 0,
	141, 436, 141, 148, 0, 0, 207, 63, 154, 150,
	0, 493, 0, 495, 0, 858, 498, 0, 239, 501,
	0, 0, 0, 0, 0, 141, 0, 141, 0, 152,
	141, 0, 156, 141, 63, 503, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 703, 704, 0, 710, 711,
	0, 0, 0, 0, 974, 147, 974, 974, 974, 0,
	979, 0, 0, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 155, 157, 158, 159, 160,
	0, 0, 163, 162, 0, 0, 0, 239, 0, 0,
	0, 0, 0, 0, 566, 0, 0, 755, 756, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	0, 0, 542, 0, 0, 0, 0, 403, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 1017, 1018, 0,
	0, 0, 0, 515, 0, 0, 0, 0, 0, 0,
	909, 473, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 239, 0, 0, 0, 0, 0, 478, 479, 480,
	481, 482, 483, 484, 0, 485, 486, 487, 488, 489,
	474, 475, 476, 477, 459, 460, 0, 1047, 462, 0,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 1062, 0, 0, 605, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 207, 141, 141, 141, 141, 141, 0,
	0, 0, 0, 0, 0, 632, 620, 0, 0, 0,
	141, 0, 0, 0, 436, 0, 0, 0, 141, 141,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 682, 873, 0,
	0, 0, 699, 0, 0, 700, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 141, 0, 0, 141,
	894, 97, 0, 895, 0, 857, 897, 0, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 859, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 749, 503, 0, 0, 0, 749, 749, 0,
	520, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 749, 749, 749, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 144, 0, 0, 566, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 0, 0, 107, 118, 131, 0, 0, 125, 126,
	127, 128, 94, 71, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 64, 529, 85, 129, 102, 79, 119, 543, 544,
	545, 546, 547, 548, 549, 0, 527, 528, 525, 531,
	530, 540, 541, 533, 534, 535, 536, 537, 538, 539,
	532, 0, 0, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 749, 1058, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 503,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 320, 309, 282, 322,
	259, 273, 330, 275, 276, 303, 247, 290, 97, 271,
	0, 262, 242, 268, 243, 260, 284, 77, 287, 258,
	312, 293, 84, 328, 86, 298, 0, 106, 93, 0,
	0, 286, 314, 288, 308, 281, 304, 252, 297, 323,
	272, 301, 324, 0, 0, 0, 62, 0, 643, 644,
	0, 0, 0, 0, 0, 72, 0, 300, 319, 270,
	302, 241, 299, 0, 245, 248, 329, 317, 265, 266,
	804, 0, 0, 0, 0, 0, 0, 285, 289, 305,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 296, 0, 0, 0, 249, 246, 0, 283, 0,
	0, 0, 251, 0, 264, 306, 0, 315, 280, 144,
	318, 278, 277, 321, 100, 313, 261, 269, 73, 267,
	105, 98, 207, 295, 99, 104, 87, 111, 101, 117,
	123, 124, 109, 122, 66, 115, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 112, 113, 74,
	130, 69, 121, 68, 70, 120, 95, 110, 116, 92,
	89, 67, 114, 90, 88, 83, 78, 0, 244, 0,
	107, 118, 131, 257, 316, 125, 126, 127, 128, 94,
	71, 274, 311, 255, 256, 253, 254, 291, 292, 325,
	326, 327, 307, 250, 0, 0, 310, 294, 64, 0,
	85, 129, 102, 79, 119, 320, 309, 282, 322, 259,
	273, 330, 275, 276, 303, 247, 290, 97, 271, 0,
	262, 242, 268, 243, 260, 284, 77, 287, 258, 312,
	293, 84, 328, 86, 298, 0, 106, 93, 0, 0,
	286, 314, 288, 308, 281, 304, 252, 297, 323, 272,
	301, 324, 0, 0, 0, 62, 0, 643, 644, 0,
	0, 0, 0, 0, 72, 0, 300, 319, 270, 302,
	241, 299, 0, 245, 248, 329, 317, 265, 266, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 305, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	296, 0, 0, 0, 249, 246, 0, 283, 0, 0,
	0, 251, 0, 264, 306, 0, 315, 280, 144, 318,
	278, 277, 321, 100, 313, 261, 269, 73, 267, 105,
	98, 0, 295, 99, 104, 87, 111, 101, 117, 123,
	124, 109, 122, 66, 115, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 112, 113, 74, 130,
	69, 121, 68, 70, 120, 95, 110, 116, 92, 89,
	67, 114, 90, 88, 83, 78, 0, 244, 0, 107,
	118, 131, 257, 316, 125, 126, 127, 128, 94, 71,
	274, 311, 255, 256, 253, 254, 291, 292, 325, 326,
	327, 307, 250, 0, 0, 310, 294, 64, 0, 85,
	129, 102, 79, 119, 320, 309, 282, 322, 259, 273,
	330, 275, 276, 303, 247, 290, 97, 271, 0, 262,
	242, 268, 243, 260, 284, 77, 287, 258, 312, 293,
	84, 328, 86, 298, 0, 106, 93, 0, 0, 286,
	314, 288, 308, 281, 304, 252, 297, 323, 272, 301,
	324, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 300, 319, 270, 302, 241,
	299, 0, 245, 248, 329, 317, 265, 266, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 305, 279, 0,
	0, 0, 0, 0, 0, 1034, 0, 263, 0, 296,
	0, 0, 0, 249, 246, 0, 283, 0, 0, 0,
	251, 0, 264, 306, 0, 315, 280, 144, 318, 278,
	277, 321, 100, 313, 261, 269, 73, 267, 105, 98,
	0, 295, 99, 104, 87, 111, 101, 117, 123, 124,
	109, 122, 66, 115, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 112, 113, 74, 130, 69,
	121, 68, 70, 120, 95, 110, 116, 92, 89, 67,
	114, 90, 88, 83, 78, 0, 244, 0, 107, 118,
	131, 257, 316, 125, 126, 127, 128, 94, 71, 274,
	311, 255, 256, 253, 254, 291, 292, 325, 326, 327,
	307, 250, 0, 0, 310, 294, 64, 0, 85, 129,
	102, 79, 119, 320, 309, 282, 322, 259, 273, 330,
	275, 276, 303, 247, 290, 97, 271, 0, 262, 242,
	268, 243, 260, 284, 77, 287, 258, 312, 293, 84,
	328, 86, 298, 0, 106, 93, 0, 0, 286, 314,
	288, 308, 281, 304, 252, 297, 323, 272, 301, 324,
	41, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 300, 319, 270, 302, 241, 299,
	0, 245, 248, 329, 317, 265, 266, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 305, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 296, 0,
	0, 0, 249, 246, 0, 283, 0, 0, 0, 251,
	0, 264, 306, 0, 315, 280, 144, 318, 278, 277,
	321, 100, 313, 261, 269, 73, 267, 105, 98, 0,
	295, 99, 104, 87, 111, 101, 117, 123, 124, 109,
	122, 66, 115, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 112, 113, 74, 130, 69, 121,
	68, 70, 120, 95, 110, 116, 92, 89, 67, 114,
	90, 88, 83, 78, 0, 244, 0, 107, 118, 131,
	257, 316, 125, 126, 127, 128, 94, 71, 274, 311,
	255, 256, 253, 254, 291, 292, 325, 326, 327, 307,
	250, 0, 0, 310, 294, 64, 0, 85, 129, 102,
	79, 119, 320, 309, 282, 322, 259, 273, 330, 275,
	276, 303, 247, 290, 97, 271, 0, 262, 242, 268,
	243, 260, 284, 77, 287, 258, 312, 293, 84, 328,
	86, 298, 0, 106, 93, 0, 0, 286, 314, 288,
	308, 281, 304, 252, 297, 323, 272, 301, 324, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 300, 319, 270, 302, 241, 299, 0,
	245, 248, 329, 317, 265, 266, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 305, 279, 0, 0, 0,
	0, 0, 0, 940, 0, 263, 0, 296, 0, 0,
	0, 249, 246, 0, 283, 0, 0, 0, 251, 0,
	264, 306, 0, 315, 280, 144, 318, 278, 277, 321,
	100, 313, 261, 269, 73, 267, 105, 98, 0, 295,
	99, 104, 87, 111, 101, 117, 123, 124, 109, 122,
	66, 115, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 112, 113, 74, 130, 69, 121, 68,
	70, 120, 95, 110, 116, 92, 89, 67, 114, 90,
	88, 83, 78, 0, 244, 0, 107, 118, 131, 257,
	316, 125, 126, 127, 128, 94, 71, 274, 311, 255,
	256, 253, 254, 291, 292, 325, 326, 327, 307, 250,
	0, 0, 310, 294, 64, 0, 85, 129, 102, 79,
	119, 320, 309, 282, 322, 259, 273, 330, 275, 276,
	303, 247, 290, 97, 271, 0, 262, 242, 268, 243,
	260, 284, 77, 287, 258, 312, 293, 84, 328, 86,
	298, 0, 106, 93, 0, 0, 286, 314, 288, 308,
	281, 304, 252, 297, 323, 272, 301, 324, 0, 0,
	0, 62, 0, 447, 0, 0, 0, 0, 0, 0,
	72, 0, 300, 319, 270, 302, 241, 299, 0, 245,
	248, 329, 317, 265, 266, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 305, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 296, 0, 0, 0,
	249, 246, 0, 283, 0, 0, 0, 251, 0, 264,
	306, 0, 315, 280, 144, 318, 278, 277, 321, 100,
	313, 261, 269, 73, 267, 105, 98, 0, 295, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 244, 0, 107, 118, 131, 257, 316,
	125, 126, 127, 128, 94, 71, 274, 311, 255, 256,
	253, 254, 291, 292, 325, 326, 327, 307, 250, 0,
	0, 310, 294, 64, 0, 85, 129, 102, 79, 119,
	320, 309, 282, 322, 259, 273, 330, 275, 276, 303,
	247, 290, 97, 271, 0, 262, 242, 268, 243, 260,
	284, 77, 287, 258, 312, 293, 84, 328, 86, 298,
	0, 106, 93, 0, 0, 286, 314, 288, 308, 281,
	304, 252, 297, 323, 272, 301, 324, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 300, 319, 270, 302, 241, 299, 0, 245, 248,
	329, 317, 265, 266, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 305, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 296, 0, 0, 0, 249,
	246, 0, 283, 0, 0, 0, 251, 0, 264, 306,
	0, 315, 280, 144, 318, 278, 277, 321, 100, 313,
	261, 269, 73, 267, 105, 98, 0, 295, 99, 104,
	87, 111, 101, 117, 123, 124, 109, 122, 66, 115,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 112, 113, 74, 130, 69, 121, 68, 70, 120,
	95, 110, 116, 92, 89, 67, 114, 90, 88, 83,
	78, 0, 244, 0, 107, 118, 131, 257, 316, 125,
	126, 127, 128, 94, 71, 274, 311, 255, 256, 253,
	254, 291, 292, 325, 326, 327, 307, 250, 0, 0,
	310, 294, 64, 0, 85, 129, 102, 79, 119, 320,
	309, 282, 322, 259, 273, 330, 275, 276, 303, 247,
	290, 97, 271, 0, 262, 242, 268, 243, 260, 284,
	77, 287, 258, 312, 293, 84, 328, 86, 298, 0,
	106, 93, 0, 0, 286, 314, 288, 308, 281, 304,
	252, 297, 323, 272, 301, 324, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	300, 319, 270, 302, 241, 299, 0, 245, 248, 329,
	317, 265, 266, 0, 0, 0, 0, 0, 0, 0,
	285, 289, 305, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 296, 0, 0, 0, 249, 246,
	0, 283, 0, 0, 0, 251, 0, 264, 306, 0,
	315, 280, 144, 318, 278, 277, 321, 100, 313, 261,
	269, 73, 267, 105, 98, 0, 295, 99, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 244, 0, 107, 118, 131, 257, 316, 125, 126,
	127, 128, 94, 71, 274, 311, 255, 256, 253, 254,
	291, 292, 325, 326, 327, 307, 250, 0, 0, 310,
	294, 64, 0, 85, 129, 102, 79, 119, 320, 309,
	282, 322, 259, 273, 330, 275, 276, 303, 247, 290,
	97, 271, 0, 262, 242, 268, 243, 260, 284, 77,
	287, 258, 312, 293, 84, 328, 86, 298, 0, 106,
	93, 0, 0, 286, 314, 288, 308, 281, 304, 252,
	297, 323, 272, 301, 324, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 300,
	319, 270, 302, 241, 299, 0, 245, 248, 329, 317,
	265, 266, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 305, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 296, 0, 0, 0, 249, 246, 0,
	283, 0, 0, 0, 251, 0, 264, 306, 0, 315,
	280, 144, 318, 278, 277, 321, 100, 313, 261, 269,
	73, 267, 105, 98, 0, 295, 99, 104, 87, 111,
	101, 117, 123, 124, 109, 122, 66, 115, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 112,
	113, 74, 130, 69, 121, 68, 70, 120, 95, 110,
	116, 92, 89, 67, 114, 90, 88, 83, 78, 0,
	244, 0, 107, 118, 131, 257, 316, 125, 126, 127,
	128, 94, 71, 274, 311, 255, 256, 253, 254, 291,
	292, 325, 326, 327, 307, 250, 0, 0, 310, 294,
	64, 0, 85, 129, 102, 79, 119, 97, 0, 0,
	744, 0, 350, 0, 0, 0, 77, 0, 349, 0,
	0, 84, 388, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 381, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 208, 368, 367, 370, 371,
	372, 373, 0, 0, 72, 369, 374, 375, 376, 0,
	0, 347, 361, 0, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 359, 747, 0, 0, 0,
	399, 0, 360, 0, 0, 356, 357, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 397, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 111, 101, 117, 123,
	124, 109, 122, 66, 115, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 112, 113, 74, 130,
	69, 121, 68, 70, 120, 95, 110, 116, 92, 89,
	67, 114, 90, 88, 83, 78, 0, 0, 0, 107,
	118, 131, 0, 0, 125, 126, 127, 128, 94, 71,
	0, 0, 389, 398, 395, 396, 393, 394, 392, 391,
	390, 400, 383, 384, 386, 0, 385, 64, 0, 85,
	129, 102, 79, 119, 97, 0, 0, 0, 0, 350,
	0, 0, 0, 77, 0, 349, 0, 0, 84, 388,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 381,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 341, 208, 368, 367, 370, 371, 372, 373, 0,
	0, 72, 369, 374, 375, 376, 0, 0, 347, 361,
	0, 387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 359, 0, 0, 0, 0, 399, 0, 360,
	0, 0, 356, 357, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 397, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 111, 101, 117, 123, 124, 109, 122,
	66, 115, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 112, 113, 74, 130, 69, 121, 68,
	70, 120, 95, 110, 116, 92, 89, 67, 114, 90,
	88, 83, 78, 0, 0, 0, 107, 118, 131, 0,
	0, 125, 126, 127, 128, 94, 71, 0, 0, 389,
	398, 395, 396, 393, 394, 392, 391, 390, 400, 383,
	384, 386, 0, 385, 64, 0, 85, 129, 102, 79,
	119, 97, 0, 0, 0, 0, 350, 0, 0, 0,
	77, 0, 349, 0, 0, 84, 388, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 381, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 208,
	368, 367, 370, 371, 372, 373, 0, 0, 72, 369,
	374, 375, 376, 0, 0, 347, 361, 0, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 358, 359,
	747, 0, 0, 0, 399, 0, 360, 0, 0, 356,
	357, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 397, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 0, 0, 107, 118, 131, 0, 0, 125, 126,
	127, 128, 94, 71, 0, 0, 389, 398, 395, 396,
	393, 394, 392, 391, 390, 400, 383, 384, 386, 19,
	385, 64, 0, 85, 129, 102, 79, 119, 0, 0,
	97, 0, 0, 0, 0, 350, 0, 0, 0, 77,
	0, 349, 0, 0, 84, 388, 86, 0, 0, 106,
	93, 0, 0, 0, 0, 381, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 208, 368,
	367, 370, 371, 372, 373, 0, 0, 72, 369, 374,
	375, 376, 0, 0, 347, 361, 0, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 359, 0,
	0, 0, 0, 399, 0, 360, 0, 0, 356, 357,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 397, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 111,
	101, 117, 123, 124, 109, 122, 66, 115, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 112,
	113, 74, 130, 69, 121, 68, 70, 120, 95, 110,
	116, 92, 89, 67, 114, 90, 88, 83, 78, 0,
	0, 0, 107, 118, 131, 0, 0, 125, 126, 127,
	128, 94, 71, 0, 0, 389, 398, 395, 396, 393,
	394, 392, 391, 390, 400, 383, 384, 386, 0, 385,
	64, 0, 85, 129, 102, 79, 119, 97, 0, 0,
	0, 0, 350, 0, 0, 0, 77, 0, 349, 0,
	0, 84, 388, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 381, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 208, 368, 367, 370, 371,
	372, 373, 0, 0, 72, 369, 374, 375, 376, 0,
	0, 347, 361, 0, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 359, 0, 0, 0, 0,
	399, 0, 360, 0, 0, 356, 357, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 397, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 111, 101, 117, 123,
	124, 109, 122, 66, 115, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 112, 113, 74, 130,
	69, 121, 68, 70, 120, 95, 110, 116, 92, 89,
	67, 114, 90, 88, 83, 78, 0, 0, 0, 107,
	118, 131, 0, 0, 125, 126, 127, 128, 94, 71,
	0, 0, 389, 398, 395, 396, 393, 394, 392, 391,
	390, 400, 383, 384, 386, 97, 385, 64, 0, 85,
	129, 102, 79, 119, 77, 0, 0, 0, 0, 84,
	388, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	381, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 208, 368, 367, 370, 371, 372, 373,
	0, 0, 72, 369, 374, 375, 376, 0, 0, 0,
	361, 0, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 359, 0, 0, 0, 0, 399, 0,
	360, 0, 0, 356, 357, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 0, 397,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	1083, 99, 104, 87, 111, 101, 117, 123, 124, 109,
	122, 66, 115, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 112, 113, 74, 130, 69, 121,
	68, 70, 120, 95, 110, 116, 92, 89, 67, 114,
	90, 88, 83, 78, 0, 0, 0, 107, 118, 131,
	0, 0, 125, 126, 127, 128, 94, 71, 0, 0,
	389, 398, 395, 396, 393, 394, 392, 391, 390, 400,
	383, 384, 386, 97, 385, 64, 0, 85, 129, 102,
	79, 119, 77, 0, 0, 0, 0, 84, 388, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 381, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 208, 368, 367, 370, 371, 372, 373, 0, 0,
	72, 369, 374, 375, 376, 0, 0, 0, 361, 0,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 359, 0, 0, 0, 0, 399, 0, 360, 0,
	0, 356, 357, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 397, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 0, 0, 107, 118, 131, 0, 0,
	125, 126, 127, 128, 94, 71, 0, 0, 389, 398,
	395, 396, 393, 394, 392, 391, 390, 400, 383, 384,
	386, 97, 385, 64, 0, 85, 129, 102, 79, 119,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 530, 540, 541, 533, 534,
	535, 536, 537, 538, 539, 532, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 0, 0, 107, 118, 131, 97, 0, 125, 126,
	127, 128, 94, 71, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 64, 0, 85, 129, 102, 79, 119, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 57, 0, 0,
	0, 60, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 111, 101, 117, 123, 124,
	109, 122, 66, 115, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 112, 113, 74, 130, 69,
	121, 68, 70, 120, 95, 110, 116, 92, 89, 67,
	114, 90, 88, 83, 78, 0, 0, 0, 107, 118,
	131, 0, 0, 125, 126, 127, 128, 94, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 85, 129,
	102, 79, 119, 97, 0, 0, 0, 435, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 437, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 0, 0, 107, 118, 131, 0, 0,
	125, 126, 127, 128, 94, 71, 0, 0, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 64, 0, 85, 129, 102, 79, 119,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 0, 0, 107, 118, 131, 0, 0, 125, 126,
	127, 128, 94, 71, 0, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 64, 0, 85, 129, 102, 79, 119, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 111, 101,
	117, 123, 124, 109, 122, 66, 115, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 112, 113,
	74, 130, 69, 121, 68, 70, 120, 95, 110, 116,
	92, 89, 67, 114, 90, 88, 83, 78, 0, 0,
	0, 107, 118, 131, 97, 0, 125, 126, 127, 128,
	94, 71, 0, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 64,
	0, 85, 129, 102, 79, 119, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 599, 0, 0, 600, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 111, 101, 117, 123, 124, 109, 122,
	66, 115, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 112, 113, 74, 130, 69, 121, 68,
	70, 120, 95, 110, 116, 92, 89, 67, 114, 90,
	88, 83, 78, 0, 0, 0, 107, 118, 131, 0,
	0, 125, 126, 127, 128, 94, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 85, 129, 102, 79,
	119, 97, 0, 0, 0, 435, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 437, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 433, 104, 87,
	111, 101, 117, 123, 124, 109, 122, 66, 115, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	112, 113, 74, 130, 69, 121, 68, 70, 120, 95,
	110, 116, 92, 89, 67, 114, 90, 88, 83, 78,
	0, 0, 0, 107, 118, 131, 97, 0, 125, 126,
	127, 128, 94, 71, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 64, 0, 85, 129, 102, 79, 119, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 111, 101, 117, 123, 124,
	109, 122, 66, 115, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 112, 113, 74, 130, 69,
	121, 68, 203, 120, 95, 110, 116, 92, 89, 67,
	114, 90, 88, 83, 78, 0, 0, 0, 107, 118,
	131, 0, 97, 125, 126, 127, 128, 204, 202, 201,
	200, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 0, 0, 64, 0, 85, 129,
	102, 79, 119, 0, 0, 0, 0, 41, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 111, 101, 117, 123, 124, 109, 122, 66, 115,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 112, 113, 74, 130, 69, 121, 68, 70, 120,
	95, 110, 116, 92, 89, 67, 114, 90, 88, 83,
	78, 0, 0, 0, 107, 118, 131, 97, 0, 125,
	126, 127, 128, 94, 71, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 64, 0, 85, 129, 102, 79, 119, 0,
	0, 0, 0, 0, 0, 62, 0, 859, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 111, 101, 117, 123,
	124, 109, 122, 66, 115, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 112, 113, 74, 130,
	69, 121, 68, 70, 120, 95, 110, 116, 92, 89,
	67, 114, 90, 88, 83, 78, 0, 0, 0, 107,
	118, 131, 97, 0, 125, 126, 127, 128, 94, 71,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 0, 0, 0, 64, 0, 85,
	129, 102, 79, 119, 0, 0, 0, 0, 0, 0,
	142, 0, 437, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 111, 101, 117, 123, 124, 109, 122, 66, 115,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 112, 113, 74, 130, 69, 121, 68, 70, 120,
	95, 110, 116, 92, 89, 67, 114, 90, 88, 83,
	78, 0, 0, 0, 107, 118, 131, 97, 0, 125,
	126, 127, 128, 94, 71, 412, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 64, 0, 85, 129, 102, 79, 119, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 111, 101, 117, 123,
	124, 109, 122, 66, 115, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 112, 113, 74, 130,
	69, 121, 68, 70, 120, 95, 110, 116, 92, 89,
	67, 114, 90, 88, 83, 78, 193, 0, 0, 107,
	118, 131, 0, 97, 125, 126, 127, 128, 94, 71,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 0, 0, 64, 0, 85,
	129, 102, 79, 119, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 0, 0, 107, 118, 131, 97, 0,
	125, 126, 127, 128, 94, 71, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 64, 0, 85, 129, 102, 79, 119,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 144,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 111, 101, 117,
	123, 124, 109, 122, 66, 115, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 112, 113, 74,
	130, 69, 121, 68, 70, 120, 95, 110, 116, 92,
	89, 67, 114, 90, 88, 83, 78, 0, 0, 0,
	107, 118, 131, 97, 0, 125, 126, 127, 128, 94,
	71, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 64, 0,
	85, 129, 102, 79, 119, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 0, 0, 107, 118, 131, 97, 0,
	125, 126, 127, 128, 94, 71, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 64, 0, 85, 129, 102, 79, 119,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 111, 101, 117,
	123, 124, 109, 122, 66, 115, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 112, 113, 74,
	130, 69, 121, 68, 70, 120, 95, 110, 116, 92,
	89, 67, 114, 90, 88, 83, 78, 0, 0, 0,
	107, 118, 131, 97, 0, 125, 126, 127, 128, 94,
	71, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 64, 0,
	85, 129, 102, 79, 119, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 111, 101, 117, 123, 124, 109, 122, 66,
	115, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 112, 113, 74, 130, 69, 121, 68, 70,
	120, 95, 110, 116, 92, 89, 67, 114, 90, 88,
	83, 78, 0, 0, 0, 107, 118, 131, 0, 0,
	125, 126, 127, 128, 94, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 85, 129, 102, 79, 119,
}
var yyPact = [...]int{

	161, -1000, -161, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 752, 771, -1000,
	-1000, -1000, -1000, -1000, 573, 5429, -12, 56, 42, 7521,
	38, 1212, 8016, -1000, -1000, -1000, -1000, -1000, 524, -1000,
	-1000, -1000, -1000, -1000, 745, 750, 589, 737, 660, -1000,
	5, 6695, 7356, 6529, -1000, 372, 54, 8016, -133, -16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 29, 8016, -1000, 8016, -18, 370, -18, 8016,
	-1000, 94, -1000, -1000, -1000, 8016, 368, 707, 28, 2668,
	2668, 2668, 2668, -57, 2668, 2668, 586, -1000, -1000, -1000,
	-1000, 2668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	350, 704, 4700, 4700, 752, -1000, 524, -1000, -1000, -1000,
	697, -1000, -1000, 217, 7190, 553, 784, -1000, -1000, -1000,
	734, 6002, 6364, 8016, 550, -1000, 401, 7851, 3086, -1000,
	-1000, -1000, -1000, 701, -1000, 139, -1000, 89, -1000, -1000,
	519, -1000, 1334, 358, 2668, 24, 8016, 166, 8016, 2668,
	21, 8016, 730, 584, 8016, -1000, 3713, -1000, 2668, 2668,
	2668, 2668, 2668, 2668, 2668, 2668, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2668, 2668, -1000, -1000, 8016, -1000,
	-1000, -1000, -1000, 781, 127, 508, -1000, 4700, 1749, 541,
	541, -1000, -1000, 66, -1000, -1000, 5076, 5076, 5076, 5076,
	5076, 5076, 5076, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 541, 88, -1000,
	4503, 541, 541, 541, 541, 541, 541, 4700, 541, 541,
	541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
	541, 475, -1000, 405, 745, 350, 660, 6167, 597, -1000,
	-1000, -31, 8016, -1000, 7851, 6695, 6695, 6695, 6695, 6695,
	-1000, 634, 631, -1000, 650, 600, 651, 8016, -1000, 516,
	350, 6002, 125, 541, -1000, 7025, -1000, -1000, -31, 6695,
	8016, -1000, -1000, 7851, 401, -1000, -1000, -1000, -1000, 4700,
	3504, 2250, 187, 227, -109, -1000, -1000, 544, -1000, 544,
	544, 544, 544, -89, -89, -89, -89, -1000, -1000, -1000,
	-1000, -1000, 572, -1000, 544, 544, 544, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 563, 563, 563, 555, 555,
	540, -1000, 8016, -1000, 724, 93, -1000, 8016, -1000, -1000,
	8016, 2668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 680, 4700, 4700,
	343, 4700, 4700, 131, 5076, 237, 170, 5076, 5076, 5076,
	5076, 5076, 5076, 5076, 5076, 5076, 5076, 5076, 5076, 5076,
	5076, 5076, 275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 333, -1000, 524, 842, 842, 108, 108, 108, 108,
	108, 108, 5264, 3910, 3504, 510, 338, 4503, 4304, 4304,
	4700, 4700, 4304, 738, 149, 338, 7686, -1000, 350, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4304, 4304, 4304, 4304,
	4700, -1000, -1000, -1000, 704, -1000, 738, 753, -1000, 689,
	687, 4304, -1000, 556, 541, -1000, 570, 784, 569, 581,
	638, -1000, -1000, -1000, -1000, 630, -1000, 608, -1000, -1000,
	-1000, -1000, -1000, 350, -1000, 47, 46, 44, 7686, -1000,
	762, 564, -1000, -1000, -1000, 338, -1000, 87, -1000, 470,
	2041, -1000, -1000, -1000, -1000, -1000, -1000, 559, 715, 183,
	324, -1000, -1000, 705, -1000, 182, -111, -1000, -1000, 269,
	-89, -89, -1000, -1000, 97, 700, 97, 97, 97, 281,
	-1000, -1000, -1000, -1000, 268, -1000, -1000, -1000, 253, -1000,
	571, 7686, 2668, -1000, -1000, 122, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -39, -1000,
	2668, -1000, 668, 131, 198, -1000, -1000, 371, -1000, -1000,
	338, 338, 1124, -1000, -1000, -1000, -1000, 237, 5076, 5076,
	5076, 19, 1124, 1001, 276, 1328, 108, 257, 257, 107,
	107, 107, 107, 107, 248, 248, -1000, -1000, -1000, 350,
	-1000, -1000, -1000, 350, 4304, 460, -1000, -1000, 1614, 86,
	541, 4700, -1000, 441, 441, 243, 514, 441, 4304, 194,
	-1000, 4700, 350, -1000, 441, 350, 441, 441, -1000, -1000,
	8016, -1000, -1000, -1000, -1000, 534, 562, 7851, 541, -1000,
	5814, 7686, 752, 4700, -1000, -1000, 4700, 557, -1000, 4700,
	-1000, -1000, -1000, -1000, 541, 541, 541, 395, -1000, 752,
	-1000, 3295, 2250, -1000, 2250, 7686, -1000, 286, -1000, -1000,
	552, 30, -1000, -1000, -1000, 388, 97, 97, -1000, 284,
	148, -1000, -1000, -1000, 495, -1000, 420, 451, 8016, -1000,
	-1000, -1000, 8016, -1000, -1000, -1000, -1000, -1000, 7686, -1000,
	-1000, -1000, -1000, -1000, -1000, 19, 1124, 768, -1000, 5076,
	5076, -1000, -1000, 441, 4304, -1000, -1000, 6860, -1000, -1000,
	2877, 4304, 338, -1000, -1000, 123, 275, 123, -142, 560,
	145, -1000, 4700, 336, -1000, -1000, -1000, -1000, -1000, -1000,
	762, 6695, -1000, 718, 539, 408, -1000, -1000, 4107, 350,
	413, 80, 395, 745, 338, 338, 7686, 338, 7686, 7686,
	7686, 5626, 7686, 745, -1000, 2041, -1000, 392, -1000, 544,
	-1000, -105, 772, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 277, 250, -1000, 247, 2668,
	-1000, -1000, 720, -1000, 5076, 1124, 1124, -1000, -1000, -1000,
	-1000, 71, 350, 350, 544, 544, -1000, 544, 555, -1000,
	544, -66, 544, -71, 350, 350, 541, -139, -1000, 338,
	4700, 760, 415, 714, -1000, 541, -1000, -1000, 446, 7686,
	7686, -1000, -1000, 377, -1000, 349, 349, 349, 125, -1000,
	-1000, -1000, 7686, -1000, 77, -1000, -123, -1000, 381, 379,
	-1000, 541, 1124, 2459, -1000, -1000, -1000, 18, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5076, 350, 244, 338,
	755, 747, 769, -1000, 541, -1000, 524, 70, -1000, 7686,
	-1000, -1000, -1000, -1000, -1000, -1000, 185, 713, -1000, 711,
	-1000, -1000, -1000, -40, -1000, -1000, -1000, 37, -1000, -1000,
	-1000, 4700, 4700, 7851, 408, 350, 7686, -1000, -1000, 225,
	-1000, -1000, 310, -1000, 7686, 350, 17, -151, 338, 403,
	401, -1000, -1000, -1000, -1000, -40, 686, -1000, 663, -146,
	-156, -1000, -44, -1000, 659, -1000, -50, -148, 541, -153,
	4888, -157, 224, 350, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1005, 12, 622, 1004, 1002, 1001, 999, 995, 994,
	993, 991, 986, 984, 983, 982, 980, 978, 977, 971,
	76, 970, 968, 965, 44, 962, 57, 960, 959, 30,
	180, 26, 24, 846, 958, 15, 95, 92, 956, 38,
	955, 954, 953, 952, 61, 950, 949, 1114, 947, 946,
	9, 41, 945, 944, 943, 942, 42, 122, 941, 940,
	938, 937, 935, 934, 36, 3, 7, 19, 8, 932,
	139, 21, 931, 34, 927, 926, 924, 923, 23, 920,
	46, 918, 10, 40, 912, 16, 48, 33, 11, 6,
	905, 49, 895, 626, 894, 101, 891, 883, 880, 878,
	875, 873, 25, 307, 477, 45, 29, 871, 856, 1128,
	28, 50, 17, 855, 43, 31, 14, 854, 851, 22,
	849, 845, 844, 840, 839, 837, 90, 836, 834, 833,
	5, 35, 829, 822, 59, 18, 821, 820, 819, 817,
	54, 816, 37, 814, 811, 810, 32, 27, 807, 4,
	804, 803, 2, 802, 801, 792, 0, 20, 791, 790,
	124,
}
var yyR1 = [...]int{

	0, 154, 155, 155, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 158, 158, 42, 42, 86, 86, 9,
	9, 9, 90, 90, 90, 108, 108, 117, 117, 10,
	10, 10, 10, 15, 143, 144, 144, 144, 140, 120,
	120, 120, 123, 123, 121, 121, 121, 121, 121, 121,
	121, 122, 122, 122, 122, 122, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 139, 139, 126, 126, 134,
	134, 135, 135, 135, 132, 132, 133, 133, 136, 136,
	136, 127, 127, 127, 127, 127, 127, 129, 129, 137,
	137, 130, 130, 130, 131, 131, 138, 138, 138, 138,
	138, 128, 128, 141, 148, 148, 148, 148, 142, 142,
	150, 150, 149, 145, 145, 145, 146, 146, 146, 147,
	147, 147, 11, 11, 11, 11, 11, 153, 151, 151,
	152, 152, 12, 13, 13, 13, 14, 14, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 118, 118, 118, 18, 18, 19, 19, 19,
	19, 19, 159, 20, 21, 21, 22, 22, 22, 26,
	26, 26, 24, 24, 25, 25, 31, 31, 30, 30,
	32, 32, 32, 32, 107, 107, 107, 106, 106, 34,
	34, 35, 35, 36, 36, 37, 37, 37, 49, 49,
	85, 85, 87, 87, 38, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 113, 113, 112, 112, 112, 111,
	111, 43, 43, 43, 45, 44, 44, 44, 44, 46,
	46, 48, 48, 47, 47, 50, 50, 50, 50, 51,
	51, 33, 33, 33, 33, 33, 33, 33, 94, 94,
	53, 53, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 63, 63, 63, 63, 63, 63, 54, 54,
	54, 54, 54, 54, 54, 29, 29, 64, 64, 64,
	70, 65, 65, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 61, 61, 61, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 60, 60, 60, 60,
	60, 60, 60, 60, 160, 160, 62, 62, 62, 62,
	27, 27, 27, 27, 27, 116, 116, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	74, 74, 28, 28, 72, 72, 73, 75, 75, 71,
	71, 71, 56, 56, 56, 56, 56, 56, 56, 56,
	58, 58, 58, 76, 76, 77, 77, 78, 78, 79,
	79, 80, 81, 81, 81, 82, 82, 82, 82, 83,
	83, 83, 55, 55, 55, 55, 55, 55, 84, 84,
	84, 84, 88, 88, 66, 66, 68, 68, 67, 69,
	89, 89, 91, 92, 92, 95, 95, 96, 96, 93,
	93, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 98, 98, 98, 99, 99, 100, 100, 100,
	101, 101, 104, 104, 105, 105, 109, 109, 110, 110,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 156,
	157, 114, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 1, 2, 1, 1, 1, 1, 1, 2,
	8, 4, 6, 4, 4, 1, 3, 3, 8, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 4, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 4, 5, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 3, 4, 2, 4, 2, 2, 2,
	2, 3, 0, 1, 1, 2, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -154, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -156, 7,
	201, 52, -155, 214, -78, 14, -22, 5, -20, -159,
	-20, -20, -20, -20, -143, 52, -100, 118, 69, 116,
	122, -104, 55, -103, 207, 149, 143, 170, 162, 160,
	163, 189, 64, 127, 158, 154, 152, 26, 175, 212,
	153, 147, 148, 174, 31, 209, 33, 135, 173, 169,
	172, 146, 168, 37, 188, 165, 155, 17, 130, 133,
	123, 137, 211, 151, 134, 129, 36, 179, 145, 141,
	166, 136, 156, 157, 171, 144, 167, 138, 180, 213,
	164, 161, 142, 139, 140, 184, 185, 186, 187, 210,
	159, 181, -93, 118, 120, 116, 116, 117, 118, 116,
	-47, -109, 55, -103, 118, 116, 105, 163, 111, 182,
	117, 31, 137, -118, 116, 183, 140, 184, 185, 186,
	187, 55, 191, 190, -109, -114, -114, -114, -114, -114,
	-2, -82, 16, 15, -5, -3, -156, 6, 19, 20,
	-26, 38, 39, -21, -93, -35, -36, -37, -38, -49,
	-70, -156, -47, 10, -42, -47, -89, -117, -90, -91,
	191, 190, 189, 163, 188, -71, -104, -109, 55, -103,
	-144, -140, 55, 117, -47, 201, -96, 121, 116, -47,
	-47, -95, 121, 55, -95, -47, 108, -47, 55, 29,
	193, 55, 137, 116, 138, 118, -115, -156, -105, -104,
	-102, 70, 21, 23, 177, 73, 105, 15, 74, 104,
	202, 111, 46, 194, 195, 192, 193, 182, 28, 9,
	24, 125, 20, 98, 113, 77, 78, 128, 22, 126,
	68, 18, 49, 10, 190, 12, 13, 121, 120, 89,
	117, 44, 7, 107, 25, 86, 40, 27, 42, 87,
	16, 196, 197, 30, 206, 132, 100, 47, 34, 71,
	66, 50, 69, 14, 45, 88, 114, 201, 43, 6,
	205, 191, 29, 124, 41, 116, 183, 76, 119, 67,
	5, 122, 8, 48, 51, 198, 199, 200, 32, 75,
	11, -115, -115, -115, 141, 142, -115, -115, 50, -115,
	-157, 54, -83, 18, 30, -33, -52, 71, -57, 28,
	22, -56, -53, -71, -69, -70, 105, 106, 94, 95,
	102, 72, 107, -61, -59, -60, -62, 57, 56, 65,
	58, 59, 60, 61, 66, 67, 68, -104, -109, -67,
	-156, 42, 43, 202, 203, 206, 204, 74, 32, 192,
	200, 199, 198, 196, 197, 194, 195, 121, 193, 100,
	201, -79, -80, -33, -78, -2, -20, 34, -24, 20,
	63, -48, 25, -47, 29, 53, -43, -45, -44, -46,
	40, 44, 46, 41, 42, 43, 47, -113, 21, -35,
	-2, -156, -112, 133, -111, 21, -109, 57, -47, -158,
	53, 10, 51, 53, -89, -108, -105, 57, 29, 79,
	108, 54, 53, -120, -123, -125, -124, -121, -122, 160,
	161, 105, 164, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 127, 156, 157, 158, 159, 143, 144,
	145, 146, 147, 148, 149, 151, 152, 153, 154, 155,
	55, -115, 118, -47, 71, -47, -115, 119, -47, 22,
	50, -47, -110, -109, -102, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -47, 8, 89, 70, 69,
	86, 53, 17, -33, -54, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-94, -156, -70, -156, 109, 110, -57, -57, -57, -57,
	-57, -57, -57, -156, 108, -65, -33, -156, -156, -156,
	-156, -156, -156, -156, -74, -33, -156, -160, -156, -160,
	-160, -160, -160, -160, -160, -160, -156, -156, -156, -156,
	53, -81, 23, 24, -82, -157, -26, -58, -104, 58,
	61, -25, 41, -86, 133, -47, -89, -36, -37, -37,
	-36, -37, 40, 40, 40, 45, 40, 45, 40, -44,
	-109, -157, -157, -2, -50, 48, 120, 49, -156, -111,
	-86, -35, -47, -91, -114, -33, -105, -110, -102, -145,
	-146, -147, -105, 57, 58, -140, -141, -148, 123, 122,
	-142, 117, 27, -136, 66, 71, -132, 180, -126, 52,
	-126, -126, -126, -126, -130, 163, -130, -130, -130, 52,
	-126, -126, -126, -134, 52, -134, -134, -135, 52, -135,
	-101, 51, -47, 22, -97, 114, -153, 112, 177, 163,
	64, 28, 113, 14, 202, 133, 213, 55, 134, -47,
	-47, -115, 36, -33, -33, -63, 66, 71, 67, 68,
	-33, -33, -57, -64, -67, -70, 62, 89, 87, 88,
	73, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -116, 55, 57, 55,
	-56, -56, -104, -31, 20, -30, -32, 96, -33, -109,
	-105, 53, -157, -30, -30, -33, -33, -30, -24, -72,
	-73, 75, -104, -157, -30, -31, -30, -30, -80, -83,
	-92, 18, 10, 32, 32, -30, -55, 29, 32, -2,
	-156, -156, -51, 11, -40, -39, 50, 51, -41, 50,
	-39, 40, 40, -157, 117, 117, 117, -87, -104, -51,
	-51, 108, 53, -147, 79, 52, 27, -142, 55, 55,
	-127, 28, 66, -133, 181, 58, -130, -130, -131, 104,
	29, -131, -131, -131, -139, 57, 58, 58, 50, -104,
	-115, -114, -98, -99, 119, 21, 117, 27, 133, -115,
	37, 66, 67, 68, -64, -57, -57, -57, -29, 128,
	70, -157, -157, -30, 53, -107, -106, 21, -104, 57,
	108, -156, -33, -157, -157, 53, 51, 21, -157, -30,
	-75, -73, 77, -33, -157, -157, -157, -157, -157, -47,
	-34, 10, -88, 50, -89, -66, -68, -67, -156, -2,
	-84, -104, -87, -78, -33, -33, 52, -33, -156, -156,
	-156, -157, 53, -78, -105, -146, -147, -150, -149, -104,
	55, -129, 50, 57, 58, 59, 66, 192, 54, -131,
	-131, 55, 55, 105, 54, 53, 53, 54, 53, -47,
	-47, -114, -104, -29, 70, -57, -57, -157, -32, -106,
	96, -110, -31, -119, 105, 160, 127, 158, 154, 174,
	165, 179, 156, 180, -116, -119, 207, -78, 78, -33,
	76, -51, -35, 26, -88, 53, -157, -157, -157, 53,
	108, -157, -82, -85, -104, -85, -85, -85, -112, -104,
	-82, 54, 53, -126, -137, 177, 8, 57, 58, 58,
	-115, 25, -57, 108, -157, -157, -126, -126, -126, -135,
	-126, 148, -126, 148, -157, -157, -156, -28, 205, -33,
	-76, 12, 27, -68, 32, -2, -156, -104, -104, 53,
	54, -157, -157, -157, -50, -149, -138, 123, 27, 122,
	192, 54, 54, -156, 96, -130, 55, -57, -157, 57,
	-77, 13, 15, 8, -66, -2, 108, -104, -128, 64,
	27, 27, -151, -152, 133, -27, 89, 210, -33, -65,
	-89, -157, -104, 57, -157, 53, -104, -157, 208, 47,
	211, -152, 32, 37, 209, 212, 135, 37, 136, 210,
	-156, 211, -57, 132, 212, -157, -157,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 427, 0, 202,
	202, 202, 202, 202, 0, 487, 469, 0, 0, 0,
	0, 192, 196, 661, 661, 661, 661, 661, 0, 28,
	29, 659, 1, 3, 435, 0, 0, 206, 209, 204,
	469, 0, 0, 0, 49, 0, 0, 649, 0, 467,
	488, 489, 492, 493, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 0, 0, 470, 0, 465, 0, 465, 0,
	167, 273, 496, 497, 649, 0, 0, 0, 0, 662,
	662, 662, 662, 0, 662, 662, 185, 187, 188, 189,
	190, 662, 193, 194, 195, 197, 198, 199, 200, 201,
	22, 439, 0, 0, 427, 24, 0, 202, 207, 208,
	212, 210, 211, 203, 0, 0, 231, 233, 234, 235,
	254, 0, 256, 0, 0, 35, 39, 0, 0, 460,
	47, 48, -2, 596, -2, 0, 409, 0, -2, -2,
	0, 55, 0, 0, 662, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 0, 166, 0, 168, 662, 662,
	662, 662, 662, 662, 662, 662, 177, 663, 664, 494,
	495, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 178, 179, 180, 662, 662, 182, 183, 0, 191,
	23, 660, 18, 0, 0, 436, 281, 0, 286, 288,
	0, 323, 324, 325, 326, 327, 0, 0, 0, 0,
	0, 0, 0, 350, 351, 352, 353, 412, 413, 414,
	415, 416, 417, 418, 419, 290, 291, 409, 0, 459,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 374,
	374, 374, 374, 374, 374, 374, 374, 0, 0, 0,
	0, 428, 429, 432, 435, 22, 209, 0, 214, 213,
	205, 37, 0, 272, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 264, 0, 0, 0, 0, 255, 0,
	22, 0, 275, 625, 257, 0, 259, 260, 37, 0,
	0, 33, 34, 0, 40, 661, 45, 46, 43, 0,
	0, 143, 0, 108, 104, 60, 61, 97, 63, 97,
	97, 97, 97, 121, 121, 121, 121, 89, 90, 91,
	92, 93, 0, 76, 97, 97, 97, 80, 64, 65,
	66, 67, 68, 69, 70, 99, 99, 99, 101, 101,
	490, 51, 0, 53, 0, 0, 155, 0, 163, 466,
	0, 662, 274, 498, 499, 169, 170, 171, 172, 173,
	174, 175, 176, 181, 184, 186, 440, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 309, 310, 311, 312, 313, 314,
	287, 0, 301, 0, 0, 0, 343, 344, 345, 346,
	347, 348, 0, 216, 0, 0, 321, 0, 0, 0,
	0, 0, 0, 212, 0, 401, 0, 366, 0, 367,
	368, 369, 370, 371, 372, 373, 0, 216, 0, 0,
	0, 431, 433, 434, 439, 25, 212, 0, 420, 0,
	0, 0, 215, 0, 0, 271, 279, 232, 250, 252,
	0, 247, 262, 263, 265, 0, 267, 0, 269, 270,
	236, 237, 320, 22, 238, 0, 0, 0, 0, 258,
	279, 279, 36, 461, 41, 462, 410, 0, -2, 54,
	144, 146, 149, 150, 151, 56, 57, 0, 0, 0,
	0, 138, 139, 111, 109, 0, 106, 105, 62, 0,
	121, 121, 83, 84, 124, 0, 124, 124, 124, 0,
	77, 78, 79, 71, 0, 72, 73, 74, 0, 75,
	0, 0, 662, 468, 661, 482, 156, 471, 472, 473,
	474, 475, 476, 477, 478, 479, 480, 481, 0, 162,
	662, 165, 0, 282, 283, 285, 302, 0, 304, 306,
	437, 438, 292, 293, 317, 318, 319, 0, 0, 0,
	0, 315, 297, 0, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 342, 385, 386, 0,
	340, 341, 349, 0, 0, 217, 218, 220, 224, 0,
	410, 0, 458, 0, 0, 0, 0, 0, 0, 407,
	404, 0, 0, 375, 0, 0, 0, 0, 430, 19,
	0, 463, 464, 421, 422, 229, 452, 0, 0, -2,
	0, 0, 427, 0, 244, 251, 0, 0, 245, 0,
	246, 266, 268, -2, 0, 0, 0, 0, 242, 427,
	32, 0, 0, 147, 0, 0, 134, 0, 136, 137,
	117, 0, 110, 59, 107, 0, 124, 124, 85, 0,
	0, 86, 87, 88, 0, 95, 0, 0, 0, 491,
	52, 152, 0, 661, 483, 484, 485, 486, 0, 164,
	441, 303, 305, 307, 294, 315, 298, 0, 295, 0,
	0, 289, 354, 0, 0, 221, 225, 0, 227, 228,
	0, 216, 322, 357, 358, 0, 0, 0, 0, 427,
	0, 405, 0, 0, 365, 376, 377, 378, 379, 20,
	279, 0, 26, 0, 452, 442, 454, 456, 0, 22,
	0, 448, 0, 435, 280, 248, 0, 253, 0, 0,
	0, 256, 0, 435, 411, 145, 148, 0, 140, 97,
	135, 119, 0, 112, 113, 114, 115, 116, 98, 81,
	82, 125, 122, 123, 94, 0, 0, 102, 0, 662,
	153, 154, 0, 296, 0, 316, 299, 355, 219, 226,
	222, 0, 0, 0, 97, 97, 390, 97, 101, 393,
	97, 395, 97, 398, 0, 0, 0, 402, 364, 408,
	0, 423, 230, 0, 27, 0, 457, -2, 0, 0,
	0, 38, 30, 0, 240, 0, 0, 0, 275, 243,
	31, 133, 0, 142, 126, 120, 0, 96, 0, 0,
	50, 0, 300, 0, 356, 359, 387, 121, 391, 392,
	394, 396, 397, 399, 361, 360, 0, 0, 0, 406,
	425, 0, 0, 455, 0, -2, 0, 450, 449, 0,
	249, 276, 277, 278, 239, 141, 131, 0, 128, 130,
	118, 100, 103, 0, 223, 388, 389, 380, 363, 403,
	21, 0, 0, 0, 445, 22, 0, 241, 58, 0,
	127, 129, 0, 158, 0, 0, 0, 0, 426, 424,
	453, -2, 451, 132, 157, 0, 0, 362, 0, 0,
	0, 159, 0, 381, 0, 384, 0, 382, 0, 0,
	0, 0, 0, 0, 383, 160, 161,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 214,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:277
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:282
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:287
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:306
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:352
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:364
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:396
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:410
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:415
		{
			yyVAL.partitions = nil
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:419
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:429
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:454
		{
			yyVAL.str = SessionStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:458
		{
			yyVAL.str = GlobalStr
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:469
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:474
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:478
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:513
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:692
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:697
		{
			yyVAL.optVal = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:710
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:728
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:745
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:776
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.optVal = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:797
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:802
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:819
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.str = ""
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:833
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.colKeyOpt = colKey
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:864
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:961
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:966
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:975
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 157:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:981
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:997
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 161:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1013
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1021
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1026
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = SessionStr
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = GlobalStr
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &OtherRead{}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &OtherRead{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &OtherRead{}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1197
		{
			setAllowComments(yylex, true)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.bytes2 = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = UnionStr
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = UnionAllStr
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.str = UnionDistinctStr
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = SQLCacheStr
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.str = DistinctStr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = StraightJoinHint
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.selectExprs = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1417
		{
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1423
		{
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.empty = struct{}{}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.empty = struct{}{}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.str = JoinStr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = JoinStr
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.str = JoinStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.str = StraightJoinStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = LeftJoinStr
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = LeftJoinStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.str = RightJoinStr
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = RightJoinStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = NaturalJoinStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.indexHints = nil
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 300:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = IsNullStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = IsNotNullStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = IsTrueStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = IsNotTrueStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.str = IsFalseStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.str = IsNotFalseStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = EqualStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = LessThanStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.str = GreaterThanStr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.str = LessEqualStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.str = GreaterEqualStr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = NotEqualStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 356:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 362:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = BooleanModeStr
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.str = QueryExpansionStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = nil
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.str = string("")
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &NullVal{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.exprs = nil
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = nil
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.orderBy = nil
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = AscScr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = AscScr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.str = DescScr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.limit = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.str = ForUpdateStr
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.str = ShareModeStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2311
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.updateExprs = nil
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.byt = 0
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.byt = 1
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = IgnoreStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2687
		{
			decNesting(yylex)
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2692
		{
			forceEOF(yylex)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2697
		{
			forceEOF(yylex)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2701
		{
			forceEOF(yylex)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
