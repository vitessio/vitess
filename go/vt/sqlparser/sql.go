// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	boolean              bool
	literal              *Literal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const NAMES = 57566
const CHARSET = 57567
const GLOBAL = 57568
const SESSION = 57569
const ISOLATION = 57570
const LEVEL = 57571
const READ = 57572
const WRITE = 57573
const ONLY = 57574
const REPEATABLE = 57575
const COMMITTED = 57576
const UNCOMMITTED = 57577
const SERIALIZABLE = 57578
const CURRENT_TIMESTAMP = 57579
const DATABASE = 57580
const CURRENT_DATE = 57581
const CURRENT_TIME = 57582
const LOCALTIME = 57583
const LOCALTIMESTAMP = 57584
const UTC_DATE = 57585
const UTC_TIME = 57586
const UTC_TIMESTAMP = 57587
const REPLACE = 57588
const CONVERT = 57589
const CAST = 57590
const SUBSTR = 57591
const SUBSTRING = 57592
const GROUP_CONCAT = 57593
const SEPARATOR = 57594
const TIMESTAMPADD = 57595
const TIMESTAMPDIFF = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const ARRAY = 57605
const CUME_DIST = 57606
const DESCRIPTION = 57607
const DENSE_RANK = 57608
const EMPTY = 57609
const EXCEPT = 57610
const FIRST_VALUE = 57611
const GROUPING = 57612
const GROUPS = 57613
const JSON_TABLE = 57614
const LAG = 57615
const LAST_VALUE = 57616
const LATERAL = 57617
const LEAD = 57618
const MEMBER = 57619
const NTH_VALUE = 57620
const NTILE = 57621
const OF = 57622
const OVER = 57623
const PERCENT_RANK = 57624
const RANK = 57625
const RECURSIVE = 57626
const ROW_NUMBER = 57627
const SYSTEM = 57628
const WINDOW = 57629
const ACTIVE = 57630
const ADMIN = 57631
const BUCKETS = 57632
const CLONE = 57633
const COMPONENT = 57634
const DEFINITION = 57635
const ENFORCED = 57636
const EXCLUDE = 57637
const FOLLOWING = 57638
const GEOMCOLLECTION = 57639
const GET_MASTER_PUBLIC_KEY = 57640
const HISTOGRAM = 57641
const HISTORY = 57642
const INACTIVE = 57643
const INVISIBLE = 57644
const LOCKED = 57645
const MASTER_COMPRESSION_ALGORITHMS = 57646
const MASTER_PUBLIC_KEY_PATH = 57647
const MASTER_TLS_CIPHERSUITES = 57648
const MASTER_ZSTD_COMPRESSION_LEVEL = 57649
const NESTED = 57650
const NETWORK_NAMESPACE = 57651
const NOWAIT = 57652
const NULLS = 57653
const OJ = 57654
const OLD = 57655
const OPTIONAL = 57656
const ORDINALITY = 57657
const ORGANIZATION = 57658
const OTHERS = 57659
const PATH = 57660
const PERSIST = 57661
const PERSIST_ONLY = 57662
const PRECEDING = 57663
const PRIVILEGE_CHECKS_USER = 57664
const PROCESS = 57665
const RANDOM = 57666
const REFERENCE = 57667
const REQUIRE_ROW_FORMAT = 57668
const RESOURCE = 57669
const RESPECT = 57670
const RESTART = 57671
const RETAIN = 57672
const REUSE = 57673
const ROLE = 57674
const SECONDARY = 57675
const SECONDARY_ENGINE = 57676
const SECONDARY_LOAD = 57677
const SECONDARY_UNLOAD = 57678
const SKIP = 57679
const SRID = 57680
const THREAD_PRIORITY = 57681
const TIES = 57682
const UNBOUNDED = 57683
const VCPU = 57684
const VISIBLE = 57685
const FORMAT = 57686
const TREE = 57687
const VITESS = 57688
const TRADITIONAL = 57689

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 307,
	133, 307,
	145, 307,
	170, 321,
	171, 321,
	-2, 309,
	-1, 49,
	135, 331,
	-2, 329,
	-1, 72,
	39, 367,
	-2, 375,
	-1, 387,
	121, 698,
	-2, 694,
	-1, 388,
	121, 699,
	-2, 695,
	-1, 402,
	39, 368,
	-2, 380,
	-1, 403,
	39, 369,
	-2, 381,
	-1, 427,
	89, 952,
	-2, 74,
	-1, 428,
	89, 868,
	-2, 75,
	-1, 433,
	89, 835,
	-2, 660,
	-1, 435,
	89, 899,
	-2, 662,
	-1, 755,
	57, 56,
	59, 56,
	-2, 60,
	-1, 933,
	121, 701,
	-2, 697,
	-1, 1369,
	5, 619,
	18, 619,
	20, 619,
	32, 619,
	60, 619,
	-2, 406,
}

const yyPrivate = 57344

const yyLast = 17651

var yyAct = [...]int{

	387, 1609, 1599, 1408, 1482, 1294, 331, 1566, 1199, 1515,
	1039, 1219, 1349, 1012, 1382, 346, 1068, 1350, 360, 395,
	1035, 1082, 1200, 1346, 598, 721, 1245, 1048, 1469, 71,
	3, 682, 1355, 1361, 1314, 432, 587, 1038, 855, 92,
	874, 920, 1262, 282, 1271, 302, 282, 728, 1137, 1052,
	1014, 92, 1186, 282, 769, 927, 726, 749, 998, 389,
	754, 404, 731, 748, 953, 1009, 418, 557, 421, 897,
	333, 768, 28, 1078, 766, 738, 69, 317, 67, 282,
	92, 329, 849, 558, 282, 991, 282, 883, 66, 8,
	322, 7, 6, 695, 1602, 1586, 1597, 757, 1574, 1594,
	1409, 1585, 1573, 280, 429, 1331, 1439, 562, 581, 577,
	578, 579, 1233, 313, 770, 1232, 771, 372, 1234, 378,
	379, 376, 377, 375, 374, 373, 1377, 1378, 1376, 361,
	29, 72, 318, 380, 381, 321, 1029, 410, 414, 420,
	390, 1030, 1031, 616, 559, 696, 561, 320, 30, 319,
	1253, 60, 34, 35, 426, 1061, 1296, 274, 1472, 29,
	272, 1069, 276, 74, 75, 76, 77, 78, 79, 1430,
	611, 1428, 310, 278, 612, 609, 610, 94, 95, 96,
	882, 930, 312, 308, 604, 605, 844, 1315, 614, 1298,
	841, 1559, 1596, 1593, 843, 1567, 1293, 391, 992, 802,
	59, 1613, 1053, 1617, 850, 615, 94, 95, 96, 276,
	601, 564, 1297, 1299, 1541, 644, 643, 653, 654, 646,
	647, 648, 649, 650, 651, 652, 645, 845, 1317, 655,
	842, 848, 580, 1524, 1220, 1222, 884, 885, 886, 644,
	643, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 1516, 618, 655, 832, 1372, 1371, 1370, 560, 275,
	567, 574, 285, 277, 1548, 1319, 1518, 1323, 1055, 1318,
	1452, 1316, 1229, 282, 569, 570, 1321, 593, 282, 595,
	282, 273, 1156, 790, 1025, 1320, 282, 585, 1191, 1113,
	591, 92, 1112, 667, 668, 92, 1138, 92, 1322, 1324,
	1290, 970, 1166, 92, 1153, 1145, 1292, 763, 742, 600,
	680, 592, 594, 92, 92, 1055, 1221, 1611, 1069, 583,
	1612, 602, 1610, 1572, 803, 645, 1036, 655, 655, 571,
	879, 572, 635, 568, 573, 412, 875, 1517, 576, 1557,
	582, 1533, 1525, 1523, 624, 1359, 584, 94, 95, 96,
	816, 819, 820, 821, 822, 823, 824, 589, 825, 826,
	827, 828, 829, 804, 805, 806, 807, 788, 789, 817,
	1062, 791, 1054, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 808, 809, 810, 811, 812, 813, 814,
	815, 1542, 667, 668, 323, 632, 82, 629, 630, 665,
	590, 563, 869, 972, 627, 61, 625, 626, 772, 628,
	1291, 635, 1289, 92, 667, 668, 282, 282, 282, 1054,
	597, 719, 1281, 876, 597, 92, 597, 94, 95, 96,
	1333, 92, 597, 954, 683, 83, 904, 718, 1151, 1058,
	1150, 588, 818, 971, 29, 954, 1059, 1163, 834, 429,
	902, 903, 901, 1251, 1277, 1278, 1279, 664, 666, 633,
	634, 632, 633, 634, 632, 735, 732, 698, 700, 702,
	704, 706, 708, 709, 975, 976, 746, 635, 755, 1562,
	635, 1395, 747, 767, 756, 1130, 1131, 1132, 679, 870,
	565, 566, 684, 685, 686, 687, 688, 689, 690, 691,
	271, 694, 697, 697, 697, 703, 697, 697, 703, 697,
	711, 712, 713, 714, 715, 716, 717, 761, 59, 699,
	701, 29, 705, 707, 720, 710, 1280, 633, 634, 632,
	900, 1285, 1282, 1273, 1283, 1276, 1618, 1272, 1577, 1478,
	1055, 1274, 1275, 1477, 1266, 635, 753, 1265, 648, 649,
	650, 651, 652, 645, 1254, 1284, 655, 282, 633, 634,
	632, 830, 92, 424, 833, 1579, 835, 282, 282, 92,
	92, 92, 94, 95, 96, 282, 635, 415, 416, 851,
	1619, 1558, 1152, 730, 282, 1495, 92, 1475, 94, 95,
	96, 92, 92, 92, 282, 92, 92, 646, 647, 648,
	649, 650, 651, 652, 645, 92, 92, 655, 634, 632,
	1263, 1127, 633, 634, 632, 860, 399, 780, 1530, 857,
	1335, 1521, 1595, 859, 556, 635, 399, 836, 837, 1529,
	635, 984, 94, 95, 96, 846, 922, 633, 634, 632,
	1391, 892, 894, 895, 1054, 94, 95, 96, 893, 1051,
	1049, 70, 1050, 1056, 865, 635, 921, 898, 1187, 1047,
	1053, 636, 852, 853, 854, 923, 644, 643, 653, 654,
	646, 647, 648, 649, 650, 651, 652, 645, 983, 92,
	655, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 597, 68, 655, 983, 942, 945, 323, 597, 597,
	597, 955, 1581, 399, 995, 931, 693, 1521, 1570, 899,
	1521, 399, 92, 92, 1358, 597, 933, 1521, 1549, 932,
	597, 597, 597, 1448, 597, 597, 1521, 1520, 1467, 1466,
	92, 937, 724, 727, 597, 597, 1187, 282, 967, 683,
	92, 94, 95, 96, 282, 1236, 282, 399, 977, 924,
	925, 1454, 399, 759, 282, 282, 1451, 399, 282, 282,
	934, 631, 282, 282, 282, 92, 1532, 931, 92, 759,
	963, 964, 1401, 1400, 1397, 1398, 1397, 1396, 933, 92,
	558, 989, 1358, 1010, 983, 399, 995, 399, 1399, 429,
	631, 399, 429, 994, 985, 779, 778, 986, 760, 857,
	762, 995, 1347, 1040, 990, 1358, 993, 758, 1237, 30,
	1070, 1071, 1072, 1028, 760, 987, 758, 1169, 1019, 1021,
	758, 995, 1168, 1020, 983, 973, 392, 1022, 847, 764,
	59, 1023, 30, 282, 92, 1587, 92, 1027, 1105, 1026,
	1502, 1018, 282, 282, 282, 282, 282, 1043, 282, 282,
	282, 1084, 1484, 282, 1120, 1121, 1063, 1194, 1459, 1083,
	30, 59, 1387, 1195, 1362, 1363, 938, 939, 1240, 282,
	944, 947, 948, 1079, 282, 1074, 282, 282, 59, 1073,
	1295, 282, 92, 1011, 59, 1485, 1086, 753, 1604, 1600,
	1389, 753, 1365, 1087, 1347, 962, 1267, 1118, 965, 966,
	1080, 1081, 1107, 1108, 1109, 1110, 1111, 880, 1114, 1115,
	420, 1124, 59, 1119, 1211, 1368, 1116, 1589, 1209, 1212,
	898, 1367, 1208, 1210, 1213, 861, 1004, 1005, 1207, 1122,
	1591, 1584, 1339, 405, 1123, 349, 348, 351, 352, 353,
	354, 1128, 1176, 729, 350, 355, 1185, 406, 950, 877,
	1184, 1258, 722, 777, 733, 734, 408, 1147, 407, 1101,
	586, 1250, 951, 597, 723, 597, 1564, 887, 888, 889,
	890, 1133, 899, 1100, 643, 653, 654, 646, 647, 648,
	649, 650, 651, 652, 645, 282, 1563, 655, 405, 1500,
	1248, 1242, 1446, 1175, 1146, 1480, 282, 282, 282, 282,
	282, 1201, 406, 1180, 94, 95, 96, 390, 282, 402,
	403, 408, 282, 407, 1117, 1099, 282, 1162, 1089, 1008,
	282, 1196, 940, 941, 396, 1000, 1003, 1004, 1005, 1001,
	1179, 1002, 1006, 393, 394, 1362, 1363, 1235, 1445, 92,
	397, 1218, 70, 1192, 1444, 1342, 1188, 1190, 1241, 1238,
	1189, 1187, 1246, 1246, 1203, 1204, 388, 1206, 613, 1202,
	1157, 1144, 1205, 1040, 391, 1214, 1224, 1154, 1096, 1093,
	1094, 1225, 1092, 1227, 873, 1228, 1183, 1606, 1605, 1247,
	743, 1255, 1256, 1230, 1182, 1226, 736, 92, 92, 1257,
	1606, 1259, 1260, 1261, 1546, 93, 1473, 969, 392, 283,
	1243, 1244, 283, 68, 73, 1103, 1106, 93, 1034, 283,
	1142, 1143, 65, 1, 753, 1598, 1410, 1264, 1481, 282,
	92, 1197, 1198, 1095, 1565, 753, 753, 753, 753, 753,
	1514, 1160, 1381, 1046, 1037, 283, 93, 81, 1286, 555,
	283, 1011, 283, 1223, 80, 1098, 92, 1556, 868, 753,
	599, 1045, 921, 596, 1044, 1522, 1252, 1060, 1471, 1064,
	1065, 1066, 1067, 1302, 1303, 1388, 1249, 1097, 1561, 1270,
	1311, 785, 783, 1313, 784, 1075, 1076, 1077, 782, 1300,
	787, 786, 282, 1304, 781, 295, 881, 1326, 309, 1007,
	773, 1336, 92, 1325, 1312, 1085, 737, 84, 92, 92,
	1310, 1201, 933, 1348, 1288, 932, 1287, 1102, 1332, 1091,
	1057, 878, 1345, 292, 1351, 607, 1311, 597, 608, 297,
	663, 1181, 1104, 1231, 92, 1000, 1003, 1004, 1005, 1001,
	430, 1002, 1006, 423, 1353, 974, 725, 1443, 92, 1366,
	92, 92, 1340, 1341, 1246, 1246, 1161, 692, 952, 597,
	1380, 752, 1357, 332, 891, 347, 1373, 344, 345, 1394,
	978, 958, 1040, 1193, 1040, 637, 330, 324, 282, 1384,
	1385, 1386, 358, 1374, 751, 1379, 1392, 1393, 744, 1375,
	999, 997, 996, 419, 1364, 1360, 750, 982, 282, 401,
	1164, 1438, 1540, 400, 92, 949, 1411, 92, 92, 92,
	282, 92, 52, 620, 314, 33, 409, 1177, 1178, 727,
	23, 91, 22, 21, 20, 19, 25, 18, 17, 16,
	575, 37, 27, 311, 26, 1352, 15, 29, 1402, 283,
	14, 13, 1421, 398, 283, 12, 283, 11, 10, 1417,
	1418, 1426, 283, 9, 5, 4, 623, 93, 1405, 1403,
	24, 93, 431, 93, 681, 2, 0, 0, 0, 93,
	1415, 0, 0, 0, 1404, 1201, 1406, 0, 0, 93,
	93, 0, 1447, 0, 0, 0, 0, 0, 0, 0,
	92, 1456, 0, 0, 0, 0, 0, 0, 92, 0,
	1238, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 1040, 1455, 0, 0, 0, 0,
	92, 0, 0, 1474, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	597, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 1486, 603, 0,
	606, 0, 92, 92, 0, 92, 617, 0, 1494, 0,
	92, 1437, 92, 92, 92, 282, 1501, 1351, 92, 93,
	0, 0, 283, 283, 283, 1507, 0, 1499, 1513, 0,
	1503, 93, 1519, 0, 0, 92, 282, 93, 1508, 1526,
	1509, 1511, 1512, 0, 0, 1527, 0, 1528, 0, 1334,
	1461, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 1547, 0, 1555, 0, 0,
	0, 1351, 92, 1343, 1554, 1553, 0, 0, 0, 0,
	0, 0, 597, 92, 92, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 1569, 0, 1535, 0, 0, 92,
	0, 0, 0, 1201, 0, 1575, 0, 1483, 1040, 0,
	282, 0, 0, 431, 0, 0, 0, 431, 92, 431,
	0, 0, 0, 0, 0, 431, 1583, 0, 1352, 0,
	29, 0, 0, 0, 0, 619, 621, 1590, 92, 1588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 0, 0, 0, 0, 0, 0, 1614, 0,
	1531, 0, 0, 283, 0, 0, 1592, 0, 93, 0,
	1578, 0, 0, 283, 283, 93, 93, 93, 0, 0,
	0, 283, 1352, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 93, 0, 0, 0, 0, 93, 93, 93,
	283, 93, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 1423, 1424, 323, 1425,
	0, 0, 1427, 0, 1429, 1457, 0, 431, 1458, 0,
	0, 1460, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 838, 839, 840, 0, 1601, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 858,
	0, 0, 0, 0, 862, 863, 864, 0, 866, 867,
	0, 0, 0, 0, 1468, 0, 0, 0, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 93,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	1498, 323, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 93, 0, 0, 0,
	283, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	283, 283, 0, 0, 283, 283, 0, 0, 283, 283,
	283, 93, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 431, 93, 0, 0, 0, 0,
	289, 431, 431, 431, 0, 0, 0, 0, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 0,
	0, 0, 0, 431, 431, 431, 0, 431, 431, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 431, 0,
	0, 0, 294, 0, 0, 0, 0, 0, 301, 283,
	93, 0, 93, 0, 0, 0, 0, 0, 283, 283,
	283, 283, 283, 0, 283, 283, 283, 0, 0, 283,
	1436, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 283, 0, 1442, 0, 0,
	283, 0, 283, 283, 0, 0, 0, 283, 93, 0,
	0, 0, 0, 935, 936, 298, 290, 0, 299, 300,
	306, 926, 0, 431, 291, 293, 303, 0, 288, 305,
	304, 0, 0, 0, 0, 0, 0, 956, 644, 643,
	653, 654, 646, 647, 648, 649, 650, 651, 652, 645,
	1441, 968, 655, 0, 960, 961, 0, 1088, 0, 1090,
	644, 643, 653, 654, 646, 647, 648, 649, 650, 651,
	652, 645, 979, 1435, 655, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 431, 0, 0, 0, 0,
	0, 644, 643, 653, 654, 646, 647, 648, 649, 650,
	651, 652, 645, 0, 0, 655, 0, 431, 0, 0,
	431, 283, 0, 326, 0, 0, 0, 0, 0, 0,
	0, 431, 283, 283, 283, 283, 283, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 283, 0,
	0, 0, 283, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 644, 643, 653, 654, 646, 647, 648,
	649, 650, 651, 652, 645, 93, 0, 655, 0, 0,
	0, 639, 0, 642, 0, 0, 431, 0, 431, 656,
	657, 658, 659, 660, 661, 662, 0, 640, 641, 638,
	644, 643, 653, 654, 646, 647, 648, 649, 650, 651,
	652, 645, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 31, 32, 60,
	34, 35, 0, 0, 0, 283, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 64, 0, 0, 1141,
	0, 36, 55, 56, 0, 58, 0, 0, 0, 0,
	1148, 1149, 93, 0, 0, 0, 1155, 0, 0, 1158,
	1159, 0, 0, 0, 45, 0, 0, 1165, 59, 0,
	0, 1167, 0, 0, 1170, 1171, 1172, 1173, 1174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 1269, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 93, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 1216, 1217, 1301, 0, 0, 0, 0, 1305, 0,
	93, 1434, 0, 0, 38, 39, 41, 40, 43, 0,
	57, 0, 0, 0, 93, 0, 93, 93, 644, 643,
	653, 654, 646, 647, 648, 649, 650, 651, 652, 645,
	0, 431, 655, 44, 63, 62, 0, 0, 53, 54,
	42, 0, 0, 0, 283, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 46, 47, 0, 48, 49, 50,
	51, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	93, 0, 0, 93, 93, 93, 283, 93, 0, 1268,
	431, 644, 643, 653, 654, 646, 647, 648, 649, 650,
	651, 652, 645, 0, 0, 655, 0, 0, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 0, 0,
	0, 0, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1309, 644, 643, 653, 654,
	646, 647, 648, 649, 650, 651, 652, 645, 431, 0,
	655, 0, 0, 61, 644, 643, 653, 654, 646, 647,
	648, 649, 650, 651, 652, 645, 93, 0, 655, 431,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1416, 0, 0, 0, 0, 93,
	0, 1139, 0, 0, 431, 0, 93, 956, 0, 0,
	1354, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	1369, 644, 643, 653, 654, 646, 647, 648, 649, 650,
	651, 652, 645, 0, 0, 655, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 93,
	431, 93, 431, 1383, 0, 0, 93, 0, 93, 93,
	93, 283, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 1412,
	1413, 1414, 1420, 431, 0, 0, 1422, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 1432, 93,
	93, 0, 0, 0, 0, 0, 281, 0, 0, 307,
	0, 0, 0, 0, 0, 93, 281, 0, 0, 0,
	0, 0, 0, 0, 1449, 1450, 283, 1453, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 413, 413,
	0, 956, 422, 0, 0, 1464, 0, 281, 0, 281,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 431, 0, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 0, 0, 0,
	0, 896, 431, 0, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 1504, 1505, 0, 1506, 0, 0,
	0, 0, 1470, 0, 1470, 1470, 1470, 0, 0, 0,
	1383, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 1537, 1538, 1539, 0, 1543, 1470, 1544, 1545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1550, 0, 1551, 1552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1560, 0, 0, 0, 0, 0,
	0, 0, 1571, 0, 0, 431, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 1576, 0, 0, 0, 0, 281, 1580, 0, 0,
	0, 281, 0, 281, 0, 0, 0, 0, 0, 281,
	1582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 0, 1615,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 1135, 1136, 0,
	0, 0, 0, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	281, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 281, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1306, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 1328, 0,
	1329, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 1338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 856, 0, 0, 0, 413, 413,
	0, 0, 413, 413, 413, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 413, 413,
	413, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 1390, 0, 856, 281, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 281, 1016, 0,
	0, 281, 281, 0, 0, 281, 1024, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 281, 281, 281, 281,
	0, 281, 281, 281, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 281, 0, 1125,
	1126, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 1493, 413, 413, 0, 1496, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 281,
	281, 281, 281, 281, 0, 0, 0, 0, 0, 0,
	0, 1215, 0, 0, 0, 281, 0, 0, 0, 1016,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1016, 0,
	0, 0, 0, 541, 529, 0, 0, 486, 544, 459,
	476, 552, 477, 480, 517, 444, 499, 183, 474, 281,
	463, 439, 470, 440, 461, 488, 126, 492, 458, 531,
	502, 543, 155, 0, 464, 550, 157, 508, 0, 230,
	171, 0, 0, 0, 490, 533, 497, 526, 485, 518,
	449, 507, 545, 475, 515, 546, 0, 0, 0, 94,
	95, 96, 0, 1041, 1042, 0, 0, 0, 0, 0,
	116, 0, 512, 540, 472, 514, 516, 554, 438, 509,
	957, 442, 445, 551, 536, 467, 468, 1239, 0, 0,
	0, 0, 0, 281, 489, 498, 523, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 465, 0, 506, 0,
	0, 0, 446, 443, 0, 0, 0, 0, 487, 0,
	0, 0, 448, 0, 466, 524, 0, 436, 135, 528,
	535, 484, 284, 539, 482, 481, 542, 202, 0, 234,
	139, 154, 112, 151, 98, 108, 0, 137, 180, 210,
	214, 532, 462, 471, 120, 469, 212, 190, 251, 505,
	192, 211, 158, 240, 203, 250, 260, 261, 237, 258,
	266, 227, 101, 236, 248, 117, 222, 0, 0, 0,
	103, 246, 233, 169, 148, 149, 102, 0, 208, 125,
	133, 122, 182, 243, 244, 121, 269, 109, 257, 105,
	110, 256, 176, 239, 247, 170, 163, 104, 245, 168,
	162, 153, 129, 141, 200, 160, 201, 142, 173, 172,
	174, 0, 441, 0, 231, 254, 270, 114, 457, 238,
	264, 265, 0, 204, 115, 134, 128, 199, 132, 175,
	111, 144, 228, 152, 159, 207, 268, 189, 213, 118,
	253, 229, 453, 456, 451, 452, 500, 501, 547, 548,
	549, 525, 447, 0, 454, 455, 0, 530, 537, 538,
	504, 97, 106, 156, 267, 205, 131, 255, 437, 450,
	124, 460, 0, 0, 473, 478, 479, 491, 493, 494,
	495, 496, 503, 510, 511, 513, 519, 520, 521, 522,
	527, 534, 553, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 252, 259, 262, 138,
	249, 263, 541, 529, 0, 0, 486, 544, 459, 476,
	552, 477, 480, 517, 444, 499, 183, 474, 0, 463,
	439, 470, 440, 461, 488, 126, 492, 458, 531, 502,
	543, 155, 0, 464, 550, 157, 508, 0, 230, 171,
	0, 0, 0, 490, 533, 497, 526, 485, 518, 449,
	507, 545, 475, 515, 546, 0, 0, 0, 94, 95,
	96, 0, 1041, 1042, 0, 0, 0, 0, 0, 116,
	0, 512, 540, 472, 514, 516, 554, 438, 509, 0,
	442, 445, 551, 536, 467, 468, 0, 0, 0, 0,
	0, 0, 0, 489, 498, 523, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 465, 0, 506, 0, 0,
	0, 446, 443, 0, 0, 0, 0, 487, 0, 0,
	0, 448, 0, 466, 524, 0, 436, 135, 528, 535,
	484, 284, 539, 482, 481, 542, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	532, 462, 471, 120, 469, 212, 190, 251, 505, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 441, 0, 231, 254, 270, 114, 457, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 453, 456, 451, 452, 500, 501, 547, 548, 549,
	525, 447, 0, 454, 455, 0, 530, 537, 538, 504,
	97, 106, 156, 267, 205, 131, 255, 437, 450, 124,
	460, 0, 0, 473, 478, 479, 491, 493, 494, 495,
	496, 503, 510, 511, 513, 519, 520, 521, 522, 527,
	534, 553, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 541, 529, 0, 0, 486, 544, 459, 476, 552,
	477, 480, 517, 444, 499, 183, 474, 0, 463, 439,
	470, 440, 461, 488, 126, 492, 458, 531, 502, 543,
	155, 0, 464, 550, 157, 508, 0, 230, 171, 0,
	0, 0, 490, 533, 497, 526, 485, 518, 449, 507,
	545, 475, 515, 546, 59, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	512, 540, 472, 514, 516, 554, 438, 509, 0, 442,
	445, 551, 536, 467, 468, 0, 0, 0, 0, 0,
	0, 0, 489, 498, 523, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 465, 0, 506, 0, 0, 0,
	446, 443, 0, 0, 0, 0, 487, 0, 0, 0,
	448, 0, 466, 524, 0, 436, 135, 528, 535, 484,
	284, 539, 482, 481, 542, 202, 0, 234, 139, 154,
	112, 151, 98, 108, 0, 137, 180, 210, 214, 532,
	462, 471, 120, 469, 212, 190, 251, 505, 192, 211,
	158, 240, 203, 250, 260, 261, 237, 258, 266, 227,
	101, 236, 248, 117, 222, 0, 0, 0, 103, 246,
	233, 169, 148, 149, 102, 0, 208, 125, 133, 122,
	182, 243, 244, 121, 269, 109, 257, 105, 110, 256,
	176, 239, 247, 170, 163, 104, 245, 168, 162, 153,
	129, 141, 200, 160, 201, 142, 173, 172, 174, 0,
	441, 0, 231, 254, 270, 114, 457, 238, 264, 265,
	0, 204, 115, 134, 128, 199, 132, 175, 111, 144,
	228, 152, 159, 207, 268, 189, 213, 118, 253, 229,
	453, 456, 451, 452, 500, 501, 547, 548, 549, 525,
	447, 0, 454, 455, 0, 530, 537, 538, 504, 97,
	106, 156, 267, 205, 131, 255, 437, 450, 124, 460,
	0, 0, 473, 478, 479, 491, 493, 494, 495, 496,
	503, 510, 511, 513, 519, 520, 521, 522, 527, 534,
	553, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 252, 259, 262, 138, 249, 263,
	541, 529, 0, 0, 486, 544, 459, 476, 552, 477,
	480, 517, 444, 499, 183, 474, 0, 463, 439, 470,
	440, 461, 488, 126, 492, 458, 531, 502, 543, 155,
	0, 464, 550, 157, 508, 0, 230, 171, 0, 0,
	0, 490, 533, 497, 526, 485, 518, 449, 507, 545,
	475, 515, 546, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 512,
	540, 472, 514, 516, 554, 438, 509, 0, 442, 445,
	551, 536, 467, 468, 0, 0, 0, 0, 0, 0,
	0, 489, 498, 523, 483, 0, 0, 0, 0, 0,
	0, 1344, 0, 465, 0, 506, 0, 0, 0, 446,
	443, 0, 0, 0, 0, 487, 0, 0, 0, 448,
	0, 466, 524, 0, 436, 135, 528, 535, 484, 284,
	539, 482, 481, 542, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 532, 462,
	471, 120, 469, 212, 190, 251, 505, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 441,
	0, 231, 254, 270, 114, 457, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 453,
	456, 451, 452, 500, 501, 547, 548, 549, 525, 447,
	0, 454, 455, 0, 530, 537, 538, 504, 97, 106,
	156, 267, 205, 131, 255, 437, 450, 124, 460, 0,
	0, 473, 478, 479, 491, 493, 494, 495, 496, 503,
	510, 511, 513, 519, 520, 521, 522, 527, 534, 553,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 541,
	529, 0, 0, 486, 544, 459, 476, 552, 477, 480,
	517, 444, 499, 183, 474, 0, 463, 439, 470, 440,
	461, 488, 126, 492, 458, 531, 502, 543, 155, 0,
	464, 550, 157, 508, 0, 230, 171, 0, 0, 0,
	490, 533, 497, 526, 485, 518, 449, 507, 545, 475,
	515, 546, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 512, 540,
	472, 514, 516, 554, 438, 509, 0, 442, 445, 551,
	536, 467, 468, 0, 0, 0, 0, 0, 0, 0,
	489, 498, 523, 483, 0, 0, 0, 0, 0, 0,
	1025, 0, 465, 0, 506, 0, 0, 0, 446, 443,
	0, 0, 0, 0, 487, 0, 0, 0, 448, 0,
	466, 524, 0, 436, 135, 528, 535, 484, 284, 539,
	482, 481, 542, 202, 0, 234, 139, 154, 112, 151,
	98, 108, 0, 137, 180, 210, 214, 532, 462, 471,
	120, 469, 212, 190, 251, 505, 192, 211, 158, 240,
	203, 250, 260, 261, 237, 258, 266, 227, 101, 236,
	248, 117, 222, 0, 0, 0, 103, 246, 233, 169,
	148, 149, 102, 0, 208, 125, 133, 122, 182, 243,
	244, 121, 269, 109, 257, 105, 110, 256, 176, 239,
	247, 170, 163, 104, 245, 168, 162, 153, 129, 141,
	200, 160, 201, 142, 173, 172, 174, 0, 441, 0,
	231, 254, 270, 114, 457, 238, 264, 265, 0, 204,
	115, 134, 128, 199, 132, 175, 111, 144, 228, 152,
	159, 207, 268, 189, 213, 118, 253, 229, 453, 456,
	451, 452, 500, 501, 547, 548, 549, 525, 447, 0,
	454, 455, 0, 530, 537, 538, 504, 97, 106, 156,
	267, 205, 131, 255, 437, 450, 124, 460, 0, 0,
	473, 478, 479, 491, 493, 494, 495, 496, 503, 510,
	511, 513, 519, 520, 521, 522, 527, 534, 553, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 252, 259, 262, 138, 249, 263, 541, 529,
	0, 0, 486, 544, 459, 476, 552, 477, 480, 517,
	444, 499, 183, 474, 0, 463, 439, 470, 440, 461,
	488, 126, 492, 458, 531, 502, 543, 155, 0, 464,
	550, 157, 508, 0, 230, 171, 0, 0, 0, 490,
	533, 497, 526, 485, 518, 449, 507, 545, 475, 515,
	546, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 512, 540, 472,
	514, 516, 554, 438, 509, 0, 442, 445, 551, 536,
	467, 468, 0, 0, 0, 0, 0, 0, 0, 489,
	498, 523, 483, 0, 0, 0, 0, 0, 0, 988,
	0, 465, 0, 506, 0, 0, 0, 446, 443, 0,
	0, 0, 0, 487, 0, 0, 0, 448, 0, 466,
	524, 0, 436, 135, 528, 535, 484, 284, 539, 482,
	481, 542, 202, 0, 234, 139, 154, 112, 151, 98,
	108, 0, 137, 180, 210, 214, 532, 462, 471, 120,
	469, 212, 190, 251, 505, 192, 211, 158, 240, 203,
	250, 260, 261, 237, 258, 266, 227, 101, 236, 248,
	117, 222, 0, 0, 0, 103, 246, 233, 169, 148,
	149, 102, 0, 208, 125, 133, 122, 182, 243, 244,
	121, 269, 109, 257, 105, 110, 256, 176, 239, 247,
	170, 163, 104, 245, 168, 162, 153, 129, 141, 200,
	160, 201, 142, 173, 172, 174, 0, 441, 0, 231,
	254, 270, 114, 457, 238, 264, 265, 0, 204, 115,
	134, 128, 199, 132, 175, 111, 144, 228, 152, 159,
	207, 268, 189, 213, 118, 253, 229, 453, 456, 451,
	452, 500, 501, 547, 548, 549, 525, 447, 0, 454,
	455, 0, 530, 537, 538, 504, 97, 106, 156, 267,
	205, 131, 255, 437, 450, 124, 460, 0, 0, 473,
	478, 479, 491, 493, 494, 495, 496, 503, 510, 511,
	513, 519, 520, 521, 522, 527, 534, 553, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 252, 259, 262, 138, 249, 263, 541, 529, 0,
	0, 486, 544, 459, 476, 552, 477, 480, 517, 444,
	499, 183, 474, 0, 463, 439, 470, 440, 461, 488,
	126, 492, 458, 531, 502, 543, 155, 0, 464, 550,
	157, 508, 0, 230, 171, 0, 0, 0, 490, 533,
	497, 526, 485, 518, 449, 507, 545, 475, 515, 546,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 512, 540, 472, 514,
	516, 554, 438, 509, 0, 442, 445, 551, 536, 467,
	468, 0, 0, 0, 0, 0, 0, 0, 489, 498,
	523, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	465, 0, 506, 0, 0, 0, 446, 443, 0, 0,
	0, 0, 487, 0, 0, 0, 448, 0, 466, 524,
	0, 436, 135, 528, 535, 484, 284, 539, 482, 481,
	542, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 532, 462, 471, 120, 469,
	212, 190, 251, 505, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 441, 0, 231, 254,
	270, 114, 457, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 453, 456, 451, 452,
	500, 501, 547, 548, 549, 525, 447, 0, 454, 455,
	0, 530, 537, 538, 504, 97, 106, 156, 267, 205,
	131, 255, 437, 450, 124, 460, 0, 0, 473, 478,
	479, 491, 493, 494, 495, 496, 503, 510, 511, 513,
	519, 520, 521, 522, 527, 534, 553, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 541, 529, 0, 0,
	486, 544, 459, 476, 552, 477, 480, 517, 444, 499,
	183, 474, 0, 463, 439, 470, 440, 461, 488, 126,
	492, 458, 531, 502, 543, 155, 0, 464, 550, 157,
	508, 0, 230, 171, 0, 0, 0, 490, 533, 497,
	526, 485, 518, 449, 507, 545, 475, 515, 546, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 512, 540, 472, 514, 516,
	554, 438, 509, 0, 442, 445, 551, 536, 467, 468,
	0, 0, 0, 0, 0, 0, 0, 489, 498, 523,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 465,
	0, 506, 0, 0, 0, 446, 443, 0, 0, 0,
	0, 487, 0, 0, 0, 448, 0, 466, 524, 0,
	436, 135, 528, 535, 484, 284, 539, 482, 481, 542,
	202, 0, 234, 139, 154, 112, 151, 98, 108, 0,
	137, 180, 210, 214, 532, 462, 471, 120, 469, 212,
	190, 251, 505, 192, 211, 158, 240, 203, 250, 260,
	261, 237, 258, 266, 227, 101, 236, 248, 117, 222,
	0, 0, 0, 103, 246, 233, 169, 148, 149, 102,
	0, 208, 125, 133, 122, 182, 243, 244, 121, 269,
	109, 257, 105, 434, 256, 176, 239, 247, 170, 163,
	104, 245, 168, 162, 153, 129, 141, 200, 160, 201,
	142, 173, 172, 174, 0, 441, 0, 231, 254, 270,
	114, 457, 238, 264, 265, 0, 204, 115, 134, 128,
	199, 132, 435, 433, 428, 427, 152, 159, 207, 268,
	189, 213, 118, 253, 229, 453, 456, 451, 452, 500,
	501, 547, 548, 549, 525, 447, 0, 454, 455, 0,
	530, 537, 538, 504, 97, 106, 156, 267, 205, 131,
	255, 437, 450, 124, 460, 0, 0, 473, 478, 479,
	491, 493, 494, 495, 496, 503, 510, 511, 513, 519,
	520, 521, 522, 527, 534, 553, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 252,
	259, 262, 138, 249, 263, 541, 529, 0, 0, 486,
	544, 459, 476, 552, 477, 480, 517, 444, 499, 183,
	474, 0, 463, 439, 470, 440, 461, 488, 126, 492,
	458, 531, 502, 543, 155, 0, 464, 550, 157, 508,
	0, 230, 171, 0, 0, 0, 490, 533, 497, 526,
	485, 518, 449, 507, 545, 475, 515, 546, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 512, 540, 472, 514, 516, 554,
	438, 509, 0, 442, 445, 551, 536, 467, 468, 0,
	0, 0, 0, 0, 0, 0, 489, 498, 523, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 465, 0,
	506, 0, 0, 0, 446, 443, 0, 0, 0, 0,
	487, 0, 0, 0, 448, 0, 466, 524, 0, 436,
	135, 528, 535, 484, 284, 539, 482, 481, 542, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 532, 462, 471, 120, 469, 212, 190,
	251, 505, 192, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 765, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 434, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 441, 0, 231, 254, 270, 114,
	457, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 435, 433, 428, 427, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 453, 456, 451, 452, 500, 501,
	547, 548, 549, 525, 447, 0, 454, 455, 0, 530,
	537, 538, 504, 97, 106, 156, 267, 205, 131, 255,
	437, 450, 124, 460, 0, 0, 473, 478, 479, 491,
	493, 494, 495, 496, 503, 510, 511, 513, 519, 520,
	521, 522, 527, 534, 553, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 541, 529, 0, 0, 486, 544,
	459, 476, 552, 477, 480, 517, 444, 499, 183, 474,
	0, 463, 439, 470, 440, 461, 488, 126, 492, 458,
	531, 502, 543, 155, 0, 464, 550, 157, 508, 0,
	230, 171, 0, 0, 0, 490, 533, 497, 526, 485,
	518, 449, 507, 545, 475, 515, 546, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 512, 540, 472, 514, 516, 554, 438,
	509, 0, 442, 445, 551, 536, 467, 468, 0, 0,
	0, 0, 0, 0, 0, 489, 498, 523, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 465, 0, 506,
	0, 0, 0, 446, 443, 0, 0, 0, 0, 487,
	0, 0, 0, 448, 0, 466, 524, 0, 436, 135,
	528, 535, 484, 284, 539, 482, 481, 542, 202, 0,
	234, 139, 154, 112, 151, 98, 108, 0, 137, 180,
	210, 214, 532, 462, 471, 120, 469, 212, 190, 251,
	505, 192, 211, 158, 240, 203, 250, 260, 261, 237,
	258, 266, 227, 101, 236, 425, 117, 222, 0, 0,
	0, 103, 246, 233, 169, 148, 149, 102, 0, 208,
	125, 133, 122, 182, 243, 244, 121, 269, 109, 257,
	105, 434, 256, 176, 239, 247, 170, 163, 104, 245,
	168, 162, 153, 129, 141, 200, 160, 201, 142, 173,
	172, 174, 0, 441, 0, 231, 254, 270, 114, 457,
	238, 264, 265, 0, 204, 115, 134, 128, 199, 132,
	435, 433, 428, 427, 152, 159, 207, 268, 189, 213,
	118, 253, 229, 453, 456, 451, 452, 500, 501, 547,
	548, 549, 525, 447, 0, 454, 455, 0, 530, 537,
	538, 504, 97, 106, 156, 267, 205, 131, 255, 437,
	450, 124, 460, 0, 0, 473, 478, 479, 491, 493,
	494, 495, 496, 503, 510, 511, 513, 519, 520, 521,
	522, 527, 534, 553, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 252, 259, 262,
	138, 249, 263, 183, 0, 0, 928, 0, 328, 0,
	0, 0, 126, 0, 327, 0, 0, 0, 155, 0,
	929, 371, 157, 0, 0, 230, 171, 0, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 349, 348,
	351, 352, 353, 354, 0, 0, 116, 350, 355, 356,
	357, 0, 0, 0, 0, 325, 342, 0, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	411, 0, 0, 0, 385, 0, 341, 0, 0, 334,
	335, 337, 336, 338, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 384, 0, 0, 284, 0,
	0, 382, 0, 202, 0, 234, 139, 154, 112, 151,
	98, 108, 0, 137, 180, 210, 214, 0, 0, 0,
	120, 0, 212, 190, 251, 0, 192, 211, 158, 240,
	203, 250, 260, 261, 237, 258, 266, 227, 101, 236,
	248, 117, 222, 0, 0, 0, 103, 246, 233, 169,
	148, 149, 102, 0, 208, 125, 133, 122, 182, 243,
	244, 121, 269, 109, 257, 105, 110, 256, 176, 239,
	247, 170, 163, 104, 245, 168, 162, 153, 129, 141,
	200, 160, 201, 142, 173, 172, 174, 0, 0, 0,
	231, 254, 270, 114, 0, 238, 264, 265, 0, 204,
	115, 134, 128, 199, 132, 175, 111, 144, 228, 152,
	159, 207, 268, 189, 213, 118, 253, 229, 372, 383,
	378, 379, 376, 377, 375, 374, 373, 386, 364, 365,
	366, 367, 369, 0, 380, 381, 368, 97, 106, 156,
	267, 205, 131, 255, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 252, 259, 262, 138, 249, 263, 183, 0,
	0, 0, 0, 328, 0, 0, 0, 126, 0, 327,
	0, 0, 0, 155, 0, 0, 371, 157, 0, 0,
	230, 171, 0, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 1032, 0, 59, 0, 0,
	94, 95, 96, 349, 348, 351, 352, 353, 354, 0,
	0, 116, 350, 355, 356, 357, 1033, 0, 0, 0,
	325, 342, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 0, 0, 385,
	0, 341, 0, 0, 334, 335, 337, 336, 338, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	384, 0, 0, 284, 0, 0, 382, 0, 202, 0,
	234, 139, 154, 112, 151, 98, 108, 0, 137, 180,
	210, 214, 0, 0, 0, 120, 0, 212, 190, 251,
	0, 192, 211, 158, 240, 203, 250, 260, 261, 237,
	258, 266, 227, 101, 236, 248, 117, 222, 0, 0,
	0, 103, 246, 233, 169, 148, 149, 102, 0, 208,
	125, 133, 122, 182, 243, 244, 121, 269, 109, 257,
	105, 110, 256, 176, 239, 247, 170, 163, 104, 245,
	168, 162, 153, 129, 141, 200, 160, 201, 142, 173,
	172, 174, 0, 0, 0, 231, 254, 270, 114, 0,
	238, 264, 265, 0, 204, 115, 134, 128, 199, 132,
	175, 111, 144, 228, 152, 159, 207, 268, 189, 213,
	118, 253, 229, 372, 383, 378, 379, 376, 377, 375,
	374, 373, 386, 364, 365, 366, 367, 369, 0, 380,
	381, 368, 97, 106, 156, 267, 205, 131, 255, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 252, 259, 262,
	138, 249, 263, 183, 0, 0, 0, 0, 328, 0,
	0, 0, 126, 0, 327, 0, 0, 0, 155, 0,
	0, 371, 157, 0, 0, 230, 171, 0, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 399, 94, 95, 96, 349, 348,
	351, 352, 353, 354, 0, 0, 116, 350, 355, 356,
	357, 0, 0, 0, 0, 325, 342, 0, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 0, 0, 385, 0, 341, 0, 0, 334,
	335, 337, 336, 338, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 384, 0, 0, 284, 0,
	0, 382, 0, 202, 0, 234, 139, 154, 112, 151,
	98, 108, 0, 137, 180, 210, 214, 0, 0, 0,
	120, 0, 212, 190, 251, 0, 192, 211, 158, 240,
	203, 250, 260, 261, 237, 258, 266, 227, 101, 236,
	248, 117, 222, 0, 0, 0, 103, 246, 233, 169,
	148, 149, 102, 0, 208, 125, 133, 122, 182, 243,
	244, 121, 269, 109, 257, 105, 110, 256, 176, 239,
	247, 170, 163, 104, 245, 168, 162, 153, 129, 141,
	200, 160, 201, 142, 173, 172, 174, 0, 0, 0,
	231, 254, 270, 114, 0, 238, 264, 265, 0, 204,
	115, 134, 128, 199, 132, 175, 111, 144, 228, 152,
	159, 207, 268, 189, 213, 118, 253, 229, 372, 383,
	378, 379, 376, 377, 375, 374, 373, 386, 364, 365,
	366, 367, 369, 0, 380, 381, 368, 97, 106, 156,
	267, 205, 131, 255, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 252, 259, 262, 138, 249, 263, 183, 0,
	0, 0, 0, 328, 0, 0, 0, 126, 0, 327,
	0, 0, 0, 155, 0, 0, 371, 157, 0, 0,
	230, 171, 0, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 349, 348, 351, 352, 353, 354, 0,
	0, 116, 350, 355, 356, 357, 0, 0, 0, 0,
	325, 342, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 411, 0, 0, 0, 385,
	0, 341, 0, 0, 334, 335, 337, 336, 338, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	384, 0, 0, 284, 0, 0, 382, 0, 202, 0,
	234, 139, 154, 112, 151, 98, 108, 0, 137, 180,
	210, 214, 0, 0, 0, 120, 0, 212, 190, 251,
	0, 192, 211, 158, 240, 203, 250, 260, 261, 237,
	258, 266, 227, 101, 236, 248, 117, 222, 0, 0,
	0, 103, 246, 233, 169, 148, 149, 102, 0, 208,
	125, 133, 122, 182, 243, 244, 121, 269, 109, 257,
	105, 110, 256, 176, 239, 247, 170, 163, 104, 245,
	168, 162, 153, 129, 141, 200, 160, 201, 142, 173,
	172, 174, 0, 0, 0, 231, 254, 270, 114, 0,
	238, 264, 265, 0, 204, 115, 134, 128, 199, 132,
	175, 111, 144, 228, 152, 159, 207, 268, 189, 213,
	118, 253, 229, 372, 383, 378, 379, 376, 377, 375,
	374, 373, 386, 364, 365, 366, 367, 369, 0, 380,
	381, 368, 97, 106, 156, 267, 205, 131, 255, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 252, 259, 262,
	138, 249, 263, 183, 0, 0, 0, 0, 328, 0,
	0, 0, 126, 0, 327, 0, 0, 0, 155, 0,
	0, 371, 157, 0, 0, 230, 171, 0, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 349, 946,
	351, 352, 353, 354, 0, 0, 116, 350, 355, 356,
	357, 0, 0, 0, 0, 325, 342, 0, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	411, 0, 0, 0, 385, 0, 341, 0, 0, 334,
	335, 337, 336, 338, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 384, 0, 0, 284, 0,
	0, 382, 0, 202, 0, 234, 139, 154, 112, 151,
	98, 108, 0, 137, 180, 210, 214, 0, 0, 0,
	120, 0, 212, 190, 251, 0, 192, 211, 158, 240,
	203, 250, 260, 261, 237, 258, 266, 227, 101, 236,
	248, 117, 222, 0, 0, 0, 103, 246, 233, 169,
	148, 149, 102, 0, 208, 125, 133, 122, 182, 243,
	244, 121, 269, 109, 257, 105, 110, 256, 176, 239,
	247, 170, 163, 104, 245, 168, 162, 153, 129, 141,
	200, 160, 201, 142, 173, 172, 174, 0, 0, 0,
	231, 254, 270, 114, 0, 238, 264, 265, 0, 204,
	115, 134, 128, 199, 132, 175, 111, 144, 228, 152,
	159, 207, 268, 189, 213, 118, 253, 229, 372, 383,
	378, 379, 376, 377, 375, 374, 373, 386, 364, 365,
	366, 367, 369, 0, 380, 381, 368, 97, 106, 156,
	267, 205, 131, 255, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 252, 259, 262, 138, 249, 263, 183, 0,
	0, 0, 0, 328, 0, 0, 0, 126, 0, 327,
	0, 0, 0, 155, 0, 0, 371, 157, 0, 0,
	230, 171, 0, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 349, 943, 351, 352, 353, 354, 0,
	0, 116, 350, 355, 356, 357, 0, 0, 0, 0,
	325, 342, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 411, 0, 0, 0, 385,
	0, 341, 0, 0, 334, 335, 337, 336, 338, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	384, 0, 0, 284, 0, 0, 382, 0, 202, 0,
	234, 139, 154, 112, 151, 98, 108, 0, 137, 180,
	210, 214, 0, 0, 0, 120, 0, 212, 190, 251,
	0, 192, 211, 158, 240, 203, 250, 260, 261, 237,
	258, 266, 227, 101, 236, 248, 117, 222, 0, 0,
	0, 103, 246, 233, 169, 148, 149, 102, 0, 208,
	125, 133, 122, 182, 243, 244, 121, 269, 109, 257,
	105, 110, 256, 176, 239, 247, 170, 163, 104, 245,
	168, 162, 153, 129, 141, 200, 160, 201, 142, 173,
	172, 174, 0, 0, 0, 231, 254, 270, 114, 0,
	238, 264, 265, 0, 204, 115, 134, 128, 199, 132,
	175, 111, 144, 228, 152, 159, 207, 268, 189, 213,
	118, 253, 229, 372, 383, 378, 379, 376, 377, 375,
	374, 373, 386, 364, 365, 366, 367, 369, 0, 380,
	381, 368, 97, 106, 156, 267, 205, 131, 255, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 252, 259, 262,
	138, 249, 263, 392, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	0, 328, 0, 0, 0, 126, 0, 327, 0, 0,
	0, 155, 0, 0, 371, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 349, 348, 351, 352, 353, 354, 0, 0, 116,
	350, 355, 356, 357, 0, 0, 0, 0, 325, 342,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 340, 0, 0, 0, 0, 385, 0, 341,
	0, 0, 334, 335, 337, 336, 338, 343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 384, 0,
	0, 284, 0, 0, 382, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 372, 383, 378, 379, 376, 377, 375, 374, 373,
	386, 364, 365, 366, 367, 369, 0, 380, 381, 368,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 183, 0, 0, 0, 0, 328, 0, 0, 0,
	126, 0, 327, 0, 0, 0, 155, 0, 0, 371,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 349, 348, 351, 352,
	353, 354, 0, 0, 116, 350, 355, 356, 357, 0,
	0, 0, 0, 325, 342, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 340, 0, 0,
	0, 0, 385, 0, 341, 0, 0, 334, 335, 337,
	336, 338, 343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 384, 0, 0, 284, 0, 0, 382,
	0, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 372, 383, 378, 379,
	376, 377, 375, 374, 373, 386, 364, 365, 366, 367,
	369, 0, 380, 381, 368, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 371, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 349, 348, 351, 352, 353, 354, 0, 0, 116,
	350, 355, 356, 357, 0, 0, 0, 0, 0, 342,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 340, 0, 0, 0, 0, 385, 0, 341,
	0, 0, 334, 335, 337, 336, 338, 343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 384, 0,
	0, 284, 0, 0, 382, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 1608, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 372, 383, 378, 379, 376, 377, 375, 374, 373,
	386, 364, 365, 366, 367, 369, 0, 380, 381, 368,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 371,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 399, 94, 95, 96, 349, 348, 351, 352,
	353, 354, 0, 0, 116, 350, 355, 356, 357, 0,
	0, 0, 0, 0, 342, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 340, 0, 0,
	0, 0, 385, 0, 341, 0, 0, 334, 335, 337,
	336, 338, 343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 384, 0, 0, 284, 0, 0, 382,
	0, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 372, 383, 378, 379,
	376, 377, 375, 374, 373, 386, 364, 365, 366, 367,
	369, 0, 380, 381, 368, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 371, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 349, 348, 351, 352, 353, 354, 0, 0, 116,
	350, 355, 356, 357, 0, 0, 0, 0, 0, 342,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 340, 0, 0, 0, 0, 385, 0, 341,
	0, 0, 334, 335, 337, 336, 338, 343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 384, 0,
	0, 284, 0, 0, 382, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 372, 383, 378, 379, 376, 377, 375, 374, 373,
	386, 364, 365, 366, 367, 369, 0, 380, 381, 368,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 643, 653, 654, 646, 647, 648, 649,
	650, 651, 652, 645, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 284, 0, 0, 0,
	0, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	739, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 741, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 633, 634, 632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 284, 0, 0, 0, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 88, 89, 0, 85, 0, 0, 0,
	90, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	1015, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 1017, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 284, 0, 0, 0, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 157, 0, 0, 230, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 284,
	0, 0, 0, 0, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 0, 0,
	0, 120, 0, 212, 190, 251, 0, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 0,
	0, 231, 254, 270, 114, 0, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	156, 267, 205, 131, 255, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 183,
	0, 0, 0, 1015, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 157, 0,
	0, 230, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 1017, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 284, 0, 0, 0, 0, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 0, 0, 0, 120, 0, 212, 190,
	251, 0, 1013, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 248, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 110, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 0, 0, 231, 254, 270, 114,
	0, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 175, 111, 144, 228, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 156, 267, 205, 131, 255,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 157, 0, 0, 230, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 980, 0, 0, 981, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 284,
	0, 0, 0, 0, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 0, 0,
	0, 120, 0, 212, 190, 251, 0, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 0,
	0, 231, 254, 270, 114, 0, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	156, 267, 205, 131, 255, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	776, 0, 0, 0, 155, 0, 0, 0, 157, 0,
	0, 230, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 775, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 284, 0, 0, 0, 0, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 0, 0, 0, 120, 0, 212, 190,
	251, 0, 192, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 248, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 110, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 0, 0, 231, 254, 270, 114,
	0, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 175, 111, 144, 228, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 156, 267, 205, 131, 255,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 157, 0, 0, 230, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 284,
	0, 0, 0, 0, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 0, 0,
	0, 120, 0, 212, 190, 251, 0, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 0,
	0, 231, 254, 270, 114, 0, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	156, 267, 205, 131, 255, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 157, 0,
	0, 230, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 284, 0, 0, 0, 0, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 0, 0, 0, 120, 0, 212, 190,
	251, 0, 192, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 248, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 110, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 0, 0, 231, 254, 270, 114,
	0, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 175, 111, 144, 228, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 156, 267, 205, 131, 255,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 157, 0, 0, 230, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	1017, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 284,
	0, 0, 0, 0, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 0, 0,
	0, 120, 0, 212, 190, 251, 0, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 0,
	0, 231, 254, 270, 114, 0, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	156, 267, 205, 131, 255, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 157, 0,
	0, 230, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 741, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 284, 0, 0, 0, 0, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 0, 0, 0, 120, 0, 212, 190,
	251, 0, 192, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 248, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 110, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 0, 0, 231, 254, 270, 114,
	0, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 175, 111, 144, 228, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 156, 267, 205, 131, 255,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 183, 0, 0, 0, 0, 0,
	0, 0, 745, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 157, 0, 0, 230, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 284,
	0, 0, 0, 0, 202, 0, 234, 139, 154, 112,
	151, 98, 108, 0, 137, 180, 210, 214, 0, 0,
	0, 120, 0, 212, 190, 251, 0, 192, 211, 158,
	240, 203, 250, 260, 261, 237, 258, 266, 227, 101,
	236, 248, 117, 222, 0, 0, 0, 103, 246, 233,
	169, 148, 149, 102, 0, 208, 125, 133, 122, 182,
	243, 244, 121, 269, 109, 257, 105, 110, 256, 176,
	239, 247, 170, 163, 104, 245, 168, 162, 153, 129,
	141, 200, 160, 201, 142, 173, 172, 174, 0, 0,
	0, 231, 254, 270, 114, 0, 238, 264, 265, 0,
	204, 115, 134, 128, 199, 132, 175, 111, 144, 228,
	152, 159, 207, 268, 189, 213, 118, 253, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	156, 267, 205, 131, 255, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 252, 259, 262, 138, 249, 263, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 157, 0,
	0, 230, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 622, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 284, 0, 0, 0, 0, 202,
	0, 234, 139, 154, 112, 151, 98, 108, 0, 137,
	180, 210, 214, 0, 0, 0, 120, 0, 212, 190,
	251, 0, 192, 211, 158, 240, 203, 250, 260, 261,
	237, 258, 266, 227, 101, 236, 248, 117, 222, 0,
	0, 0, 103, 246, 233, 169, 148, 149, 102, 0,
	208, 125, 133, 122, 182, 243, 244, 121, 269, 109,
	257, 105, 110, 256, 176, 239, 247, 170, 163, 104,
	245, 168, 162, 153, 129, 141, 200, 160, 201, 142,
	173, 172, 174, 0, 0, 0, 231, 254, 270, 114,
	0, 238, 264, 265, 0, 204, 115, 134, 128, 199,
	132, 175, 111, 144, 228, 152, 159, 207, 268, 189,
	213, 118, 253, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 156, 267, 205, 131, 255,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 252, 259,
	262, 138, 249, 263, 417, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 284, 0, 0, 0,
	0, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 135, 0, 0,
	0, 284, 0, 0, 0, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 315, 249,
	263, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	157, 0, 0, 230, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 279, 0, 284, 0, 0, 0,
	0, 202, 0, 234, 139, 154, 112, 151, 98, 108,
	0, 137, 180, 210, 214, 0, 0, 0, 120, 0,
	212, 190, 251, 0, 192, 211, 158, 240, 203, 250,
	260, 261, 237, 258, 266, 227, 101, 236, 248, 117,
	222, 0, 0, 0, 103, 246, 233, 169, 148, 149,
	102, 0, 208, 125, 133, 122, 182, 243, 244, 121,
	269, 109, 257, 105, 110, 256, 176, 239, 247, 170,
	163, 104, 245, 168, 162, 153, 129, 141, 200, 160,
	201, 142, 173, 172, 174, 0, 0, 0, 231, 254,
	270, 114, 0, 238, 264, 265, 0, 204, 115, 134,
	128, 199, 132, 175, 111, 144, 228, 152, 159, 207,
	268, 189, 213, 118, 253, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 156, 267, 205,
	131, 255, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	252, 259, 262, 138, 249, 263, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 157, 0, 0, 230, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 284, 0, 0, 0, 0, 202, 0, 234, 139,
	154, 112, 151, 98, 108, 0, 137, 180, 210, 214,
	0, 0, 0, 120, 0, 212, 190, 251, 0, 192,
	211, 158, 240, 203, 250, 260, 261, 237, 258, 266,
	227, 101, 236, 248, 117, 222, 0, 0, 0, 103,
	246, 233, 169, 148, 149, 102, 0, 208, 125, 133,
	122, 182, 243, 244, 121, 269, 109, 257, 105, 110,
	256, 176, 239, 247, 170, 163, 104, 245, 168, 162,
	153, 129, 141, 200, 160, 201, 142, 173, 172, 174,
	0, 0, 0, 231, 254, 270, 114, 0, 238, 264,
	265, 0, 204, 115, 134, 128, 199, 132, 175, 111,
	144, 228, 152, 159, 207, 268, 189, 213, 118, 253,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 156, 267, 205, 131, 255, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 252, 259, 262, 138, 249,
	263,
}
var yyPact = [...]int{

	2160, -1000, -277, 1098, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1026, 854,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 338, 12092, 26,
	131, -1000, 16942, 130, 1716, 17287, -1000, 7, -1000, -9,
	17287, 3, 16597, -1000, -1000, -82, -84, -1000, 10022, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 820, 1012, 1006,
	1023, 687, 966, -1000, 8629, 8629, 73, 73, 16252, 7249,
	-1000, -1000, 527, 17287, 125, 17287, -156, 74, 74, 74,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 128, 17287, 584, 584, 205, -1000, 17287, -23, 17287,
	-1000, 198, -1000, -1000, -1000, 17287, 584, 929, 344, 145,
	4736, -1000, 176, -1000, 4736, 14, 4736, -61, 1045, 17,
	-26, -1000, 4736, -1000, -1000, -1000, -1000, -1000, -1000, 117,
	-1000, -1000, 17287, 15900, 142, 320, -1000, -1000, -1000, -1000,
	-1000, -1000, 702, 480, -1000, 10022, 2020, 772, 772, -1000,
	-1000, 171, -1000, -1000, 11057, 11057, 11057, 11057, 11057, 11057,
	11057, 11057, 11057, 11057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 772, 189,
	-1000, 9677, 772, 772, 772, 772, 772, 772, 772, 772,
	10022, 772, 772, 772, 772, 772, 772, 772, 772, 772,
	772, 772, 772, 772, 772, 772, 772, -1000, -1000, 1026,
	-1000, 854, -1000, -1000, -1000, 932, 10022, 10022, 1026, -1000,
	904, 8629, -1000, -1000, 911, -1000, -1000, -1000, -1000, 394,
	1074, -1000, 11747, 187, 1068, 15555, 14520, 17287, 757, 741,
	-1000, -1000, 186, 770, 6890, -131, -1000, -1000, -1000, 319,
	13830, -1000, -1000, -1000, 922, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 736, 17287, -1000, 168, -1000,
	584, 4736, 120, 584, 367, 584, 17287, 17287, 4736, 4736,
	4736, 22, 62, 54, 17287, 769, 96, 67, 584, 67,
	67, 67, -1000, 6172, -1000, 4736, 344, -1000, 550, 10022,
	4736, 4736, 4736, 17287, 4736, 4736, -1000, -1000, -1000, 390,
	-1000, -1000, -1000, -1000, 4736, 4736, -1000, 1062, 324, -1000,
	-1000, -1000, -1000, 10022, 233, -1000, 851, -1000, 1, -1000,
	-1000, -1000, -1000, -1000, 1098, -1000, -1000, -1000, -126, -1000,
	-1000, 10022, 10022, 10022, 10022, 567, 236, 11057, 460, 353,
	11057, 11057, 11057, 11057, 11057, 11057, 11057, 11057, 11057, 11057,
	11057, 11057, 11057, 11057, 11057, 571, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 584, -1000, 1092, 871, 871, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 11402, 7594,
	6172, 687, 731, 1026, 8629, 8629, 10022, 10022, 9319, 8974,
	8629, 926, 348, 480, 17287, -1000, -1000, 10712, -1000, -1000,
	-1000, -1000, -1000, 556, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17287, 17287, 8629, 8629, 8629, 8629, 8629, 1006, 687,
	911, -1000, 1087, 202, 384, 766, -1000, 449, 1006, 13485,
	619, -1000, 911, -1000, -1000, -1000, 17287, -1000, -1000, 15210,
	-1000, -1000, 5813, 17287, 36, 17287, -1000, 762, 1179, -1000,
	-1000, -1000, 996, 12795, 13140, 36, 761, 14520, 17287, -1000,
	-1000, 14520, 17287, 5454, 6531, -131, -1000, 6531, 754, -1000,
	-110, -107, 7939, 212, -1000, -1000, -1000, -1000, 4377, 511,
	593, 365, -72, -1000, -1000, -1000, 798, -1000, 798, 798,
	798, 798, -41, -41, -41, -41, -1000, -1000, -1000, -1000,
	-1000, 821, 817, -1000, 798, 798, 798, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 815, 815, 815, 801, 801,
	829, -1000, 17287, 4736, 994, 4736, -1000, 943, -1000, -1000,
	-1000, 17287, 17287, 17287, 17287, 17287, 163, 17287, 17287, 17287,
	990, 841, 17287, 584, 584, -1000, -1000, -1000, -1000, -1000,
	-1000, 480, -1000, -1000, -1000, -1000, -1000, -1000, 17287, -1000,
	-1000, -1000, -1000, 17287, 344, 17287, 17287, 480, -1000, 546,
	17287, 17287, -1000, -1000, -1000, -1000, -1000, 480, 236, 529,
	315, -1000, -1000, 411, -1000, -1000, 2324, -1000, -1000, -1000,
	-1000, 460, 11057, 11057, 11057, 139, 2324, 2381, 579, 873,
	213, 442, 442, 214, 214, 214, 214, 214, 493, 493,
	-1000, -1000, -1000, 556, -1000, -1000, -1000, 556, 8629, 8629,
	765, 772, 184, -1000, 820, -1000, -1000, 1006, 725, 725,
	381, 559, 292, 1055, 725, 270, 1048, 725, 725, 8629,
	-1000, -1000, 360, -1000, 10022, 556, -1000, 181, -1000, 566,
	763, 758, 725, 556, 556, 725, 725, 932, -1000, -1000,
	901, 10022, 10022, 10022, -1000, -1000, -1000, 932, 1064, -1000,
	913, 909, 1038, 8629, 14520, 911, -1000, -1000, -1000, 167,
	1038, 826, 772, -1000, 17287, 14520, 14520, 14520, 14520, 14520,
	-1000, 882, 876, -1000, 872, 868, 878, 17287, -1000, 727,
	687, 12795, 180, 772, -1000, 14865, -1000, -1000, 1038, 14520,
	645, -1000, 645, -1000, 151, -1000, -1000, 754, -131, -135,
	-1000, -1000, -1000, -1000, 480, -1000, 680, 749, 4018, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 810, 584, -1000, 962,
	239, 286, 584, 961, -1000, -1000, -1000, 931, -1000, 379,
	-78, -1000, -1000, 488, -41, -41, -1000, -1000, 212, 920,
	212, 212, 212, 545, 545, -1000, -1000, -1000, -1000, 481,
	-1000, -1000, -1000, 478, -1000, 840, 17287, 4736, -1000, -1000,
	-1000, -1000, 393, 393, 277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 34, 823, -1000, -1000,
	-1000, -1000, -12, 21, 78, -1000, 748, -1000, 17287, 4736,
	-1000, -1000, 324, 324, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 139, 2324, 2198, -1000, 11057, 11057,
	-1000, -1000, 725, 725, 8629, 6172, 1026, 932, -1000, -1000,
	72, 571, 72, 11057, 11057, -1000, 11057, 11057, -1000, -168,
	635, 342, -1000, 10022, 534, -1000, 6172, -1000, 11057, 11057,
	-1000, -1000, -1000, -1000, -1000, -1000, 890, 480, 480, -1000,
	-1000, 17287, -1000, -1000, -1000, -1000, 1031, 10022, -1000, 742,
	-1000, 5095, 1006, 838, 17287, 772, 1098, 12795, 17287, 723,
	-1000, 256, 1179, 808, 836, 979, -1000, -1000, -1000, -1000,
	875, -1000, 869, -1000, -1000, -1000, -1000, -1000, 687, -1000,
	124, 123, 122, 17287, -1000, 1026, 645, -1000, -1000, 178,
	-1000, -1000, -119, -125, -1000, -1000, -1000, 4377, -1000, 4377,
	17287, 53, -1000, 584, 584, -1000, -1000, -1000, 804, 834,
	11057, -1000, -1000, -1000, 580, 212, 212, -1000, 366, -1000,
	-1000, -1000, 717, -1000, 715, 729, 713, 17287, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17287, -1000, -1000,
	-1000, -1000, -1000, 17287, -176, 584, 17287, 17287, 17287, 17287,
	4736, -1000, 344, 344, -1000, 11057, 2324, 2324, -1000, -1000,
	556, -1000, 1006, -1000, 556, 798, 798, -1000, 798, 801,
	-1000, 798, -16, 798, -18, 556, 556, 2306, 2261, 1983,
	1890, 772, -163, -1000, 480, 10022, -1000, 1921, 1868, -1000,
	-1000, 1029, 1021, 480, -1000, -1000, -1000, 964, 746, 664,
	-1000, -1000, 8284, 697, 149, 692, -1000, 1026, 17287, 10022,
	-1000, -1000, 10022, 800, -1000, 10022, -1000, -1000, -1000, 1026,
	772, 772, 772, 692, 1006, -1000, -1000, -1000, -1000, 4018,
	-1000, 669, -1000, 798, -1000, -1000, -1000, 17287, -66, 1086,
	2324, -1000, -1000, -1000, -1000, -1000, -41, 522, -41, 477,
	-1000, 473, 4736, -1000, -1000, -1000, -1000, 968, -1000, 6172,
	-1000, -1000, 794, 828, -1000, -1000, -1000, -1000, -1000, 2324,
	-1000, 932, -1000, -1000, 116, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11057, 11057, 11057, 11057, 11057, 1006, 520,
	480, 11057, 11057, -1000, 10022, 10022, 960, -1000, 772, -1000,
	803, 17287, 17287, -1000, 17287, 1006, -1000, 480, 480, 17287,
	480, 14175, 17287, 17287, 12437, -1000, 194, 17287, -1000, 667,
	-1000, 204, -1000, -137, 212, -1000, 212, 569, 558, -1000,
	772, 707, -1000, 252, 17287, 17287, -1000, -1000, -1000, 566,
	566, 566, 566, 115, 556, -1000, 566, 566, 480, 702,
	1084, -1000, 772, 1098, 143, -1000, -1000, -1000, 658, 651,
	-1000, 651, 651, 180, 194, -1000, 584, 250, 516, -1000,
	40, 17287, 407, 957, -1000, 937, -1000, -1000, -1000, -1000,
	-1000, 33, 6172, 4377, 648, -1000, -1000, -1000, -1000, -1000,
	556, 49, -179, -1000, -1000, -1000, 17287, 664, 17287, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 472, -1000, -1000, 17287,
	-1000, -1000, 500, -1000, -1000, 643, -1000, 17287, -1000, -1000,
	823, -1000, 889, -174, -183, 655, -1000, -1000, 777, -1000,
	-1000, 33, 880, -176, -1000, 888, -1000, 17287, -1000, 29,
	-1000, -177, 562, 27, -181, 833, 772, -184, 832, -1000,
	1067, 10367, -1000, -1000, 1080, 170, 170, 566, 556, -1000,
	-1000, -1000, 57, 506, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1355, 1354, 29, 72, 59, 1350, 1346, 1345, 1344,
	92, 91, 89, 1343, 1338, 1337, 1335, 1331, 1330, 1326,
	1324, 1322, 1321, 1320, 1319, 1318, 1317, 1316, 1315, 1314,
	1313, 1312, 1310, 131, 1306, 78, 1305, 1304, 1303, 1302,
	1295, 1293, 1292, 1291, 48, 181, 55, 62, 1289, 61,
	335, 1287, 65, 63, 57, 1286, 33, 1285, 1284, 66,
	1283, 1282, 58, 1281, 1280, 60, 1278, 68, 1274, 11,
	52, 1267, 1266, 1265, 1263, 81, 2043, 1260, 1258, 15,
	1257, 1255, 145, 1254, 69, 31, 12, 18, 17, 1253,
	70, 1251, 6, 1248, 64, 1247, 1246, 1243, 1237, 47,
	1236, 56, 1235, 19, 25, 1234, 28, 85, 32, 23,
	8, 1233, 1230, 22, 74, 54, 71, 1223, 1221, 500,
	1220, 1219, 40, 1218, 1215, 1213, 36, 1211, 82, 401,
	1210, 1209, 1206, 1204, 1197, 35, 1056, 1272, 24, 75,
	1196, 1195, 1190, 2553, 38, 50, 13, 1189, 1188, 1186,
	77, 1153, 41, 483, 1185, 34, 1184, 1181, 1180, 1178,
	1174, 1172, 1171, 370, 1168, 1166, 1165, 16, 20, 73,
	21, 1158, 1157, 1156, 1155, 42, 67, 1154, 1151, 49,
	1150, 1148, 26, 1147, 1144, 1139, 1137, 1134, 37, 10,
	1133, 14, 1132, 9, 1130, 27, 1124, 7, 1123, 4,
	1118, 3, 0, 1116, 5, 44, 1, 1115, 2, 1113,
	1112, 129, 1261, 97, 1104, 93,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	202, 202, 202, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 36, 36, 11,
	12, 12, 12, 12, 213, 213, 59, 59, 60, 60,
	107, 107, 13, 14, 14, 116, 116, 115, 115, 115,
	117, 117, 117, 117, 153, 153, 15, 15, 15, 15,
	15, 15, 15, 204, 204, 203, 201, 201, 200, 200,
	199, 22, 184, 186, 186, 185, 185, 185, 185, 176,
	156, 156, 156, 156, 159, 159, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 158,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	162, 162, 162, 162, 162, 162, 162, 162, 175, 175,
	163, 163, 169, 169, 170, 170, 170, 172, 172, 173,
	173, 130, 130, 130, 165, 165, 166, 166, 171, 171,
	167, 167, 167, 168, 168, 168, 174, 174, 174, 174,
	174, 164, 164, 177, 177, 194, 194, 193, 193, 193,
	183, 183, 190, 190, 190, 190, 190, 180, 180, 180,
	181, 181, 179, 179, 182, 182, 192, 192, 191, 178,
	178, 195, 195, 195, 195, 207, 208, 206, 206, 206,
	206, 206, 187, 187, 187, 188, 188, 188, 189, 189,
	189, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 198, 196, 196, 197, 197, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 123, 123, 125, 125, 121,
	121, 124, 124, 122, 122, 122, 126, 126, 126, 127,
	127, 154, 154, 154, 26, 26, 28, 28, 29, 30,
	30, 148, 148, 149, 149, 31, 32, 37, 37, 37,
	37, 37, 37, 39, 39, 39, 7, 7, 7, 7,
	38, 38, 38, 6, 6, 27, 27, 27, 27, 20,
	214, 33, 34, 34, 35, 35, 35, 41, 41, 41,
	40, 40, 40, 46, 46, 48, 48, 48, 48, 48,
	49, 49, 49, 49, 49, 49, 45, 45, 47, 47,
	47, 47, 140, 140, 140, 139, 139, 51, 51, 52,
	52, 53, 53, 54, 54, 54, 91, 68, 68, 106,
	106, 108, 108, 55, 55, 55, 55, 56, 56, 57,
	57, 58, 58, 147, 147, 146, 146, 146, 145, 145,
	61, 61, 61, 63, 62, 62, 62, 62, 64, 64,
	66, 66, 65, 65, 67, 69, 69, 69, 69, 69,
	70, 70, 50, 50, 50, 50, 50, 50, 50, 50,
	120, 120, 72, 72, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 83, 83, 83, 83, 83, 83,
	73, 73, 73, 73, 73, 73, 73, 44, 44, 84,
	84, 84, 90, 85, 85, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 80,
	80, 80, 80, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 215, 215, 82, 81, 81, 81, 81, 81,
	81, 81, 42, 42, 42, 42, 42, 152, 152, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 95, 95, 43, 43, 93, 93, 94, 96,
	96, 92, 92, 92, 75, 75, 75, 75, 75, 75,
	75, 75, 77, 77, 77, 97, 97, 98, 98, 99,
	99, 100, 100, 101, 102, 102, 102, 103, 103, 103,
	103, 104, 104, 104, 74, 74, 74, 74, 105, 105,
	105, 105, 109, 109, 86, 86, 88, 88, 87, 89,
	110, 110, 113, 111, 111, 114, 114, 114, 114, 114,
	112, 112, 112, 142, 142, 142, 118, 118, 128, 128,
	129, 129, 119, 119, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 132, 132, 132, 133, 133, 134,
	134, 134, 141, 141, 137, 137, 138, 138, 143, 143,
	144, 144, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 211, 212, 150, 151,
	151, 151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 4, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	5, 7, 6, 5, 5, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 2, 7,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 5, 4, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -211,
	6, 7, 8, -36, 10, 11, 31, -22, 124, 125,
	127, 126, 160, 128, 153, 54, 174, 175, 177, 178,
	179, 180, -39, 158, 159, 32, 33, 130, 35, 58,
	9, 263, 155, 154, 26, -210, 365, -35, 5, -99,
	16, -3, -33, -214, -33, -33, -33, -33, -33, -33,
	-184, -186, 58, 97, -134, 134, 78, 255, 131, 132,
	138, -137, -202, -136, 61, 62, 63, 273, 146, 305,
	306, 174, 188, 182, 209, 201, 274, 307, 147, 199,
	202, 242, 144, 308, 229, 236, 72, 177, 251, 309,
	156, 197, 193, 310, 282, 191, 28, 311, 238, 214,
	312, 278, 240, 192, 237, 130, 313, 149, 361, 142,
	314, 215, 219, 315, 243, 316, 317, 318, 186, 187,
	319, 145, 245, 213, 143, 34, 275, 38, 164, 246,
	217, 320, 212, 208, 321, 322, 323, 324, 211, 185,
	207, 42, 221, 220, 222, 241, 204, 325, 326, 327,
	150, 328, 194, 19, 329, 330, 331, 332, 333, 249,
	159, 334, 162, 335, 336, 337, 338, 339, 340, 239,
	216, 218, 139, 166, 235, 277, 341, 247, 190, 342,
	151, 163, 158, 250, 152, 343, 344, 345, 346, 347,
	348, 349, 178, 350, 351, 352, 353, 173, 244, 253,
	41, 226, 354, 184, 141, 355, 175, 170, 231, 205,
	165, 356, 357, 195, 196, 210, 183, 206, 176, 362,
	167, 160, 358, 252, 227, 279, 203, 200, 171, 359,
	168, 169, 360, 363, 232, 233, 172, 276, 248, 198,
	228, -119, 134, 255, 131, 233, 136, 132, -33, 132,
	-65, -143, -202, -136, 134, 132, 115, 202, 242, 124,
	230, 238, -125, 239, 166, -154, 132, -121, 229, 232,
	233, 172, -202, 240, 244, 243, 234, -143, 176, -148,
	181, -137, 179, -65, -37, 361, 128, -150, -150, 231,
	231, -150, -85, -50, -71, 81, -76, 30, 24, -75,
	-72, -92, -89, -90, 115, 116, 118, 117, 119, 104,
	105, 112, 82, 120, -80, -78, -79, -81, 65, 64,
	73, 66, 67, 68, 69, 74, 75, 76, -137, -143,
	-87, -211, 48, 49, 264, 265, 266, 267, 272, 268,
	84, 37, 254, 262, 261, 260, 258, 259, 256, 257,
	270, 271, 137, 255, 131, 110, 263, -202, -136, -5,
	-4, -211, 6, 21, 22, -103, 18, 17, -212, 60,
	-41, -48, 43, 44, -49, 22, 36, 47, 45, -34,
	-47, 106, -50, -143, -47, -119, -119, 12, -59, -60,
	-65, -67, -143, -111, -153, 176, -114, 244, 243, -138,
	-112, -137, -135, 242, 202, 241, 129, 280, 80, 23,
	25, 224, 83, 115, 17, 84, 114, 264, 124, 52,
	281, 256, 257, 254, 266, 267, 255, 230, 30, 11,
	283, 26, 154, 22, 36, 108, 126, 87, 88, 157,
	24, 155, 76, 286, 20, 55, 12, 14, 287, 288,
	15, 137, 136, 99, 133, 50, 9, 120, 27, 96,
	46, 289, 29, 290, 291, 292, 293, 48, 97, 18,
	258, 259, 32, 294, 272, 161, 110, 53, 39, 81,
	295, 296, 74, 297, 77, 56, 78, 16, 51, 298,
	299, 300, 301, 98, 127, 263, 49, 302, 131, 6,
	269, 31, 153, 47, 303, 132, 86, 270, 271, 135,
	75, 5, 138, 33, 10, 54, 57, 260, 261, 262,
	37, 85, 13, 304, 79, -185, 97, -176, -202, -65,
	133, -65, 263, -129, 137, -129, -129, 132, -65, -202,
	-202, 124, 126, 129, 56, -23, -65, 132, 133, 134,
	255, 131, -65, 121, -65, -202, 31, -126, 97, 13,
	255, -202, 166, 132, 167, 134, -151, -211, -138, -180,
	133, 34, 145, -151, 170, 171, -151, -124, -123, 236,
	237, 231, 235, 13, 171, 231, 169, -151, 135, -137,
	-38, -137, 65, -7, -3, -11, -10, -12, 89, -150,
	-150, 59, 80, 78, 79, 96, -50, -73, 99, 81,
	97, 98, 83, 101, 100, 111, 104, 105, 106, 107,
	108, 109, 110, 102, 103, 114, 89, 90, 91, 92,
	93, 94, 95, -120, -211, -90, -211, 122, 123, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -211,
	121, -2, -85, -4, -211, -211, -211, -211, -211, -211,
	-211, -211, -95, -50, -211, -215, -82, -211, -215, -82,
	-215, -82, -215, -211, -215, -82, -215, -82, -215, -215,
	-82, -211, -211, -211, -211, -211, -211, -211, -99, -3,
	-33, -104, 20, 32, -50, -100, -101, -50, -99, 39,
	-45, -47, -49, 43, 44, 71, 12, -140, -139, 23,
	-137, 65, 121, 12, -66, 27, -65, -52, -53, -54,
	-55, -68, -91, -211, -65, -65, -59, -213, 59, 12,
	57, -213, 59, 121, 59, 176, -114, -153, -116, -115,
	245, 247, 89, -142, -137, 65, 30, 31, 60, 59,
	-65, -156, -159, -161, -160, -162, -157, -158, 199, 200,
	115, 203, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 31, 156, 195, 196, 197, 198, 215, 216,
	217, 218, 219, 220, 221, 222, 182, 201, 274, 183,
	184, 185, 186, 187, 188, 190, 191, 192, 193, 194,
	-202, -151, 134, -202, 81, -202, -65, -65, -151, -151,
	-151, 168, 168, 132, 132, 173, -65, 59, 135, -128,
	137, -202, -128, -128, -128, -144, -143, -135, -151, -126,
	65, -50, -151, -151, -151, -65, -151, -151, -181, 12,
	99, -151, -151, 12, -122, 12, 99, -50, -127, 97,
	56, -149, 179, 213, 362, 363, 364, -50, -50, -50,
	-50, -83, 74, 81, 75, 76, -76, -84, -87, -90,
	70, 99, 97, 98, 83, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-152, -202, 65, -202, -75, -75, -137, -46, 22, 36,
	-45, -138, -144, -135, -35, -212, -212, -99, -45, -45,
	-50, -50, -92, 65, -45, -92, 65, -45, -45, -40,
	22, 36, -93, -94, 85, -92, -137, -143, -212, -76,
	-137, -137, -45, -46, -46, -45, -45, -103, -212, 10,
	99, 59, 19, 59, -102, 25, 26, -103, -77, -137,
	66, 69, -51, 59, 12, -49, -65, -139, 106, -144,
	-65, -107, 162, -65, 31, 59, -61, -63, -62, -64,
	46, 50, 52, 47, 48, 49, 53, -147, 23, -52,
	-3, -211, -146, 162, -145, 23, -143, 65, -107, 57,
	-52, -65, -52, -67, -143, 106, -114, -116, 59, 246,
	248, 249, 56, 77, -50, -168, 114, -187, -188, -189,
	-138, 65, 66, -176, -177, -178, -190, 148, -195, 139,
	141, 138, -179, 149, 133, 29, 60, -130, 74, 81,
	-172, 227, -163, 58, -163, -163, -163, -163, -167, 202,
	-167, -167, -167, 58, 58, -163, -163, -163, -169, 58,
	-169, -169, -170, 58, -170, -141, 57, -65, -151, 24,
	-151, -131, 129, 126, 127, -198, 125, 224, 202, 72,
	30, 16, 264, 162, 279, -202, 163, -65, -65, -65,
	-65, -65, 129, 126, -65, -65, -59, 24, 56, -65,
	-202, -202, -65, -65, -126, -143, -143, 65, -65, -137,
	74, 75, 76, -84, -76, -76, -76, -44, 157, 80,
	-212, -212, -45, -45, -211, 121, -5, -103, -212, -212,
	59, 57, 23, 12, 12, -212, 12, 12, -212, -212,
	-45, -96, -94, 87, -50, -212, 121, -212, 59, 59,
	-212, -212, -212, -212, -212, -104, 41, -50, -50, -101,
	-104, -118, 20, 12, 37, 37, -70, 13, -47, -52,
	-49, 121, -70, -74, 31, 37, -3, -211, -211, -110,
	-113, -92, -53, -54, -54, -53, -54, 46, 46, 46,
	51, 46, 51, 46, -62, -143, -212, -212, -3, -69,
	54, 136, 55, -211, -145, -70, -52, -70, -70, 121,
	-115, -117, 250, 247, 253, -202, 65, 59, -189, 89,
	58, -202, 29, -179, -179, -182, -202, -182, 29, -165,
	30, 74, -173, 228, 66, -167, -167, -168, 31, -168,
	-168, -168, -175, 65, -175, 66, 66, 56, -137, -151,
	-150, -205, 144, 140, 148, 149, 142, 61, 62, 63,
	133, 29, 139, 141, 162, 138, -205, -132, -133, 135,
	23, 133, 29, 162, -204, 57, 168, 224, 168, 135,
	-65, -151, -122, -122, -44, 80, -76, -76, -212, -212,
	-46, -138, -99, -104, -155, 115, 199, 156, 197, 193,
	213, 204, 226, 195, 227, -152, -155, -76, -76, -76,
	-76, 273, -99, 88, -50, 86, -138, -76, -76, 42,
	-65, -97, 14, -50, 106, -103, -109, 56, -110, -86,
	-88, -87, -211, -105, -137, -108, -137, -70, 59, 89,
	-57, -56, 56, 57, -58, 56, -56, 46, 46, -212,
	133, 133, 133, -108, -99, -70, 247, 251, 252, -188,
	-189, -192, -191, -137, -195, -182, -182, 58, -166, 56,
	-76, 60, -168, -168, -202, 115, 60, 59, 60, 59,
	60, 59, -65, -150, -150, -65, -150, -137, -201, 276,
	-203, -202, -137, -137, -137, -65, -151, -126, -126, -76,
	-212, -103, -212, -163, -163, -163, -170, -163, 187, -163,
	187, -212, -212, 20, 20, 20, 20, -211, -43, 269,
	-50, 59, 59, -98, 15, 17, 28, -109, 59, -212,
	-212, 59, 121, -212, 59, -99, -113, -50, -50, 58,
	-50, -211, -211, -211, -212, -103, 60, 59, -163, -106,
	-137, -171, 224, 10, -167, 65, -167, 66, 66, -151,
	27, -200, -199, -138, 58, 57, -104, -167, -202, -76,
	-76, -76, -76, -76, -103, 65, -76, -76, -50, -85,
	29, -88, 37, -3, -137, -137, -137, -103, -106, -106,
	-212, -106, -106, -146, -194, -193, 57, 143, 72, -191,
	60, 59, -174, 139, 29, 138, -79, -168, -168, 60,
	60, -211, 59, 89, -106, -65, -212, -212, -212, -212,
	-42, 99, 276, -212, -212, -212, 10, -86, 121, 60,
	-212, -212, -212, -69, -193, -202, -183, 89, 65, 151,
	-137, -164, 72, 29, 29, -196, -197, 162, -199, -189,
	60, -212, 274, 53, 277, -110, -137, 66, -65, 65,
	-212, 59, -137, -204, 42, 275, 278, 58, -197, 37,
	-201, 42, -106, 164, 276, 60, 165, 277, -207, -208,
	56, -211, 278, -208, 56, 11, 10, -76, 161, -206,
	152, 147, 150, 31, -206, -212, -212, 146, 30, 74,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 619, 0,
	360, 360, 360, 360, 360, 360, 360, 0, 689, 672,
	0, 360, 0, 0, -2, 325, 326, 0, 328, -2,
	0, 0, 337, 998, 998, 0, 0, 998, 0, 996,
	47, 48, 343, 344, 345, 1, 3, 0, 364, 627,
	0, 0, -2, 362, 0, 0, 672, 672, 0, 0,
	76, 77, 0, 0, 0, 984, 0, 670, 670, 670,
	690, 691, 694, 695, 30, 31, 32, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	276, 442, 698, 699, 984, 0, 0, 0, 316, 0,
	999, 288, 0, 290, 999, 0, 999, 0, 297, 0,
	0, 303, 999, 308, 322, 323, 310, 324, 327, 0,
	332, 335, 0, 350, 0, 862, 342, 355, 356, 998,
	998, 359, 33, 493, 452, 0, 458, 460, 0, 495,
	496, 497, 498, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 527, 528, 604, 605,
	606, 607, 608, 609, 610, 611, 462, 463, 601, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 562, 562, 562, 562, 562, 562, 562, 562,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 619,
	43, 0, 360, 365, 366, 631, 0, 0, 619, 997,
	0, 0, -2, -2, 376, 382, 383, 384, 385, 361,
	0, 388, 392, 0, 0, 0, 0, 0, 0, 0,
	56, 58, 442, 62, 0, 972, 653, -2, -2, 0,
	0, 696, 697, -2, 834, -2, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 0, 0, 95, 0, 93,
	0, 999, 0, 0, 0, 0, 0, 0, 999, 999,
	999, 0, 0, 0, 0, 267, 0, 668, 0, 668,
	668, 668, 275, 0, 277, 999, 316, 280, 0, 0,
	999, 999, 999, 0, 999, 999, 287, 1000, 1001, 0,
	197, 198, 199, 291, 999, 999, 293, 0, 313, 311,
	312, 305, 306, 0, 319, 300, 301, 304, 333, 336,
	353, 351, 352, 354, 346, 347, 348, 349, 0, 357,
	358, 0, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 480, 481, 482, 483,
	484, 485, 486, 459, 0, 473, 0, 0, 0, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 0, 373,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 370, 0, 593, 0, 546, 554, 0, 547, 555,
	548, 556, 549, 0, 550, 557, 551, 558, 552, 553,
	559, 0, 0, 0, 373, 373, 0, 0, 627, 0,
	375, 34, 0, 0, 628, 620, 621, 624, 627, 0,
	397, 386, 377, 380, 381, 363, 0, 389, 393, 0,
	395, 396, 0, 0, 60, 0, 441, 0, 399, 401,
	402, 403, 423, 0, 425, -2, 0, 0, 0, 54,
	55, 0, 0, 0, 0, 972, 659, 0, 64, 65,
	0, 0, 0, 173, 663, 664, 665, 661, 222, 0,
	0, 161, 157, 101, 102, 103, 150, 105, 150, 150,
	150, 150, 170, 170, 170, 170, 133, 134, 135, 136,
	137, 0, 0, 120, 150, 150, 150, 124, 140, 141,
	142, 143, 144, 145, 146, 147, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 152, 152, 152, 154, 154,
	692, 79, 0, 999, 0, 999, 91, 0, 236, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 700, 701, 278, 279,
	317, 318, 281, 282, 283, 284, 285, 286, 0, 200,
	201, 292, 296, 0, 316, 0, 0, 298, 299, 0,
	0, 0, 334, 338, 339, 340, 341, 494, 453, 454,
	455, 457, 474, 0, 476, 478, 464, 465, 489, 490,
	491, 0, 0, 0, 0, 487, 469, 0, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	514, 577, 578, 0, 512, 513, 524, 0, 0, 0,
	374, 602, 0, -2, 0, 492, 648, 627, 0, 0,
	0, 0, 497, 604, 0, 497, 604, 0, 0, 0,
	371, 372, 599, 596, 0, 0, 601, 0, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 44, 632,
	0, 0, 0, 0, 623, 625, 626, 631, 0, 612,
	0, 0, 450, 0, 0, 378, 40, 394, 390, 0,
	450, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	430, 0, 0, 433, 0, 0, 0, 0, 424, 0,
	0, 0, 445, 916, 426, 0, 428, 429, 450, 0,
	450, 57, 450, 59, 0, 444, 654, 63, 0, 0,
	68, 69, 655, 656, 657, 658, 0, 92, 223, 225,
	228, 229, 230, 96, 97, 98, 0, 0, 210, 0,
	0, 204, 204, 0, 202, 203, 94, 164, 162, 0,
	159, 158, 104, 0, 170, 170, 127, 128, 173, 0,
	173, 173, 173, 0, 0, 121, 122, 123, 115, 0,
	116, 117, 118, 0, 119, 0, 0, 999, 81, 671,
	82, 998, 0, 0, 684, 237, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 0, 83, 241, 243,
	242, 246, 0, 0, 0, 268, 270, 669, 0, 999,
	273, 274, 313, 313, 295, 314, 315, 320, 302, 330,
	475, 477, 479, 466, 487, 470, 0, 467, 0, 0,
	461, 529, 0, 0, 373, 0, 619, 631, 533, 534,
	0, 0, 0, 0, 0, 570, 0, 0, 571, 0,
	619, 0, 597, 0, 0, 545, 0, 564, 0, 0,
	565, 566, 567, 568, 569, 36, 0, 629, 630, 622,
	35, 0, 666, 667, 613, 614, 615, 0, 387, 398,
	379, 0, 627, 642, 0, 0, 635, 0, 0, 450,
	650, 0, 400, 419, 421, 0, 416, 431, 432, 434,
	0, 436, 0, 438, 439, 404, 405, 406, 0, 407,
	0, 0, 0, 0, 427, 619, 450, 52, 53, 0,
	66, 67, 0, 0, 73, 174, 175, 0, 226, 0,
	0, 0, 192, 204, 204, 195, 205, 196, 0, 166,
	0, 163, 100, 160, 0, 173, 173, 129, 0, 130,
	131, 132, 0, 148, 0, 0, 0, 0, 693, 80,
	231, 998, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 998, 0, 998, 685,
	686, 687, 688, 0, 86, 0, 0, 0, 0, 0,
	999, 272, 316, 316, 468, 0, 488, 471, 530, 531,
	0, 603, 627, 38, 0, 150, 150, 582, 150, 154,
	585, 150, 587, 150, 590, 0, 0, 0, 0, 0,
	0, 0, 594, 544, 600, 0, 602, 0, 0, 633,
	37, 617, 0, 451, 391, 41, 45, 0, 642, 634,
	644, 646, 0, 0, 638, 0, 411, 619, 0, 0,
	413, 420, 0, 0, 414, 0, 415, 435, 437, -2,
	0, 0, 0, 0, 627, 51, 70, 71, 72, 224,
	227, 0, 206, 150, 209, 193, 194, 0, 168, 0,
	165, 151, 125, 126, 171, 172, 170, 0, 170, 0,
	155, 0, 999, 232, 233, 234, 235, 0, 240, 0,
	84, 85, 0, 0, 245, 269, 271, 289, 294, 472,
	532, 631, 535, 579, 170, 583, 584, 586, 588, 589,
	591, 537, 536, 0, 0, 0, 0, 0, 627, 0,
	598, 0, 0, 42, 0, 0, 0, 46, 0, 647,
	0, 0, 0, 61, 0, 627, 651, 652, 417, 0,
	422, 0, 0, 0, 425, 50, 184, 0, 208, 0,
	409, 176, 169, 0, 173, 149, 173, 0, 0, 78,
	0, 87, 88, 0, 0, 0, 39, 580, 581, 0,
	0, 0, 0, 572, 0, 595, 0, 0, 618, 616,
	0, 645, 0, 637, 640, 639, 412, 49, 0, 0,
	447, 0, 0, 445, 183, 185, 0, 190, 0, 207,
	0, 0, 181, 0, 178, 180, 167, 138, 139, 153,
	156, 0, 0, 0, 0, 247, 538, 540, 539, 541,
	0, 0, 0, 543, 560, 561, 0, 636, 0, 418,
	446, 448, 449, 408, 186, 187, 0, 191, 189, 0,
	410, 99, 0, 177, 179, 0, 263, 0, 89, 90,
	83, 542, 0, 0, 0, 643, 641, 188, 0, 182,
	262, 0, 0, 86, 573, 0, 576, 0, 264, 0,
	244, 574, 0, 0, 0, 211, 0, 0, 212, 213,
	0, 0, 575, 214, 0, 0, 0, 0, 0, 215,
	217, 218, 0, 0, 216, 265, 266, 219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 365,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:337
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:342
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:375
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:389
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:395
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:401
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:417
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:440
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:448
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereStr, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:468
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:478
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:485
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:497
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.str = InsertStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.str = ReplaceStr
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:537
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:542
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:551
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:561
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:566
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:570
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:596
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:602
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.str = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:624
		{
			yyVAL.str = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.str = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.str = SessionStr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:638
		{
			yyVAL.str = GlobalStr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:655
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:668
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:672
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:677
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:692
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:697
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:708
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:714
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:720
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:734
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:738
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:749
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:753
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:757
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:763
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:985
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:990
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1008
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1020
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1101
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1106
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1119
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1140
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1277
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1288
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1292
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1296
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1300
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1306
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1326
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1330
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1334
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1343
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1347
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1363
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1373
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1395
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1400
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1507
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1523
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1527
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1543
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[5].tableNames, IfExists: yyDollar[4].boolean, Comments: Comments(yyDollar[2].bytes2)}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1555
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[6].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[5].tableName.ToViewName()}, IfExists: yyDollar[4].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[5].colIdent.String()), IfExists: yyDollar[4].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[5].colIdent.String()), IfExists: yyDollar[4].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1594
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1637
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1663
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = "extended "
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = "full "
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1762
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1776
		{
			yyVAL.showFilter = nil
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			yyVAL.showFilter = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = SessionStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = GlobalStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Begin{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Begin{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Commit{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Rollback{}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1854
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = JSONStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = TreeStr
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = VitessStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = TraditionalStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = AnalyzeStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &OtherRead{}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			setAllowComments(yylex, true)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1986
		{
			yyVAL.bytes2 = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = UnionStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = UnionAllStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = UnionDistinctStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = SQLCacheStr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = DistinctStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = DistinctStr
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2035
		{
			yyVAL.selectExprs = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2044
		{
			yyVAL.strs = nil
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2060
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = SQLCacheStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = DistinctStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = DistinctStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = StraightJoinHint
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2096
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2110
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2114
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2139
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2143
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2171
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2187
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2220
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2224
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2228
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2240
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2250
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2252
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2255
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.str = JoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2289
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = StraightJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = LeftJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.str = LeftJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2309
		{
			yyVAL.str = RightJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.str = RightJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = NaturalJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2323
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2333
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2347
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2358
		{
			yyVAL.indexHints = nil
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2362
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2366
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2370
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2374
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2485
		{
			yyVAL.str = IsNullStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = IsNotNullStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.str = IsTrueStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.str = IsNotTrueStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.str = IsFalseStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.str = IsNotFalseStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.str = EqualStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.str = LessThanStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.str = GreaterThanStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2523
		{
			yyVAL.str = LessEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.str = GreaterEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.str = NotEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2564
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = BooleanModeStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.str = QueryExpansionStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3024
		{
			yyVAL.str = string("")
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3028
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3044
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3059
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3067
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &NullVal{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3125
		{
			yyVAL.exprs = nil
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.orderBy = nil
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3147
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3157
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = AscScr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.str = AscScr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.str = DescScr
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3181
		{
			yyVAL.limit = nil
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3189
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3193
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3198
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.str = ForUpdateStr
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3206
		{
			yyVAL.str = ShareModeStr
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3219
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3227
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3231
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3249
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3254
		{
			yyVAL.updateExprs = nil
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3258
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3278
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3310
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3320
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3326
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("on"))}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("off"))}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3334
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3338
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3342
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3350
		{
			yyVAL.bytes = []byte("charset")
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.expr = &Default{}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3374
		{
			yyVAL.boolean = false
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3376
		{
			yyVAL.boolean = true
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3379
		{
			yyVAL.boolean = false
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.boolean = true
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3384
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.str = IgnoreStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3419
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3421
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3431
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3433
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3794
		{
			decNesting(yylex)
		}
	case 998:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3799
		{
			skipToEnd(yylex)
		}
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3804
		{
			skipToEnd(yylex)
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3808
		{
			skipToEnd(yylex)
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3812
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
