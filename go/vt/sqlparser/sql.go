// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const UNDERSCORE_UTF8 = 57442
const UNDERSCORE_LATIN1 = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const FLUSH = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const INDEXES = 57468
const ACTION = 57469
const CASCADE = 57470
const CONSTRAINT = 57471
const FOREIGN = 57472
const NO = 57473
const REFERENCES = 57474
const RESTRICT = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const EXTENDED = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599
const ARRAY = 57600
const CUME_DIST = 57601
const DESCRIPTION = 57602
const DENSE_RANK = 57603
const EMPTY = 57604
const EXCEPT = 57605
const FIRST_VALUE = 57606
const GROUPING = 57607
const GROUPS = 57608
const JSON_TABLE = 57609
const LAG = 57610
const LAST_VALUE = 57611
const LATERAL = 57612
const LEAD = 57613
const MEMBER = 57614
const NTH_VALUE = 57615
const NTILE = 57616
const OF = 57617
const OVER = 57618
const PERCENT_RANK = 57619
const RANK = 57620
const RECURSIVE = 57621
const ROW_NUMBER = 57622
const SYSTEM = 57623
const WINDOW = 57624
const ACTIVE = 57625
const ADMIN = 57626
const BUCKETS = 57627
const CLONE = 57628
const COMPONENT = 57629
const DEFINITION = 57630
const ENFORCED = 57631
const EXCLUDE = 57632
const FOLLOWING = 57633
const GEOMCOLLECTION = 57634
const GET_MASTER_PUBLIC_KEY = 57635
const HISTOGRAM = 57636
const HISTORY = 57637
const INACTIVE = 57638
const INVISIBLE = 57639
const LOCKED = 57640
const MASTER_COMPRESSION_ALGORITHMS = 57641
const MASTER_PUBLIC_KEY_PATH = 57642
const MASTER_TLS_CIPHERSUITES = 57643
const MASTER_ZSTD_COMPRESSION_LEVEL = 57644
const NESTED = 57645
const NETWORK_NAMESPACE = 57646
const NOWAIT = 57647
const NULLS = 57648
const OJ = 57649
const OLD = 57650
const OPTIONAL = 57651
const ORDINALITY = 57652
const ORGANIZATION = 57653
const OTHERS = 57654
const PATH = 57655
const PERSIST = 57656
const PERSIST_ONLY = 57657
const PRECEDING = 57658
const PRIVILEGE_CHECKS_USER = 57659
const PROCESS = 57660
const RANDOM = 57661
const REFERENCE = 57662
const REQUIRE_ROW_FORMAT = 57663
const RESOURCE = 57664
const RESPECT = 57665
const RESTART = 57666
const RETAIN = 57667
const REUSE = 57668
const ROLE = 57669
const SECONDARY = 57670
const SECONDARY_ENGINE = 57671
const SECONDARY_LOAD = 57672
const SECONDARY_UNLOAD = 57673
const SKIP = 57674
const SRID = 57675
const THREAD_PRIORITY = 57676
const TIES = 57677
const UNBOUNDED = 57678
const VCPU = 57679
const VISIBLE = 57680
const FORMAT = 57681
const TREE = 57682
const VITESS = 57683
const TRADITIONAL = 57684

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 36,
	-2, 4,
	-1, 40,
	33, 302,
	131, 302,
	143, 302,
	168, 316,
	169, 316,
	-2, 304,
	-1, 66,
	38, 355,
	-2, 363,
	-1, 377,
	119, 687,
	-2, 683,
	-1, 378,
	119, 688,
	-2, 684,
	-1, 391,
	38, 356,
	-2, 368,
	-1, 392,
	38, 357,
	-2, 369,
	-1, 415,
	87, 939,
	-2, 69,
	-1, 416,
	87, 855,
	-2, 70,
	-1, 421,
	87, 823,
	-2, 649,
	-1, 423,
	87, 886,
	-2, 651,
	-1, 610,
	5, 36,
	-2, 334,
	-1, 737,
	1, 393,
	5, 393,
	12, 393,
	13, 393,
	14, 393,
	15, 393,
	17, 393,
	19, 393,
	30, 393,
	31, 393,
	45, 393,
	46, 393,
	47, 393,
	48, 393,
	49, 393,
	51, 393,
	52, 393,
	55, 393,
	56, 393,
	58, 393,
	59, 393,
	360, 393,
	-2, 411,
	-1, 740,
	56, 51,
	58, 51,
	-2, 55,
	-1, 914,
	119, 690,
	-2, 686,
	-1, 1118,
	5, 37,
	-2, 479,
	-1, 1165,
	5, 36,
	-2, 622,
	-1, 1411,
	5, 37,
	-2, 623,
	-1, 1464,
	5, 36,
	-2, 625,
	-1, 1539,
	5, 37,
	-2, 626,
}

const yyPrivate = 57344

const yyLast = 17368

var yyAct = [...]int{

	377, 1573, 1563, 1371, 1529, 1261, 321, 1168, 1444, 1477,
	1016, 1186, 1431, 350, 1312, 666, 3, 336, 989, 1345,
	1309, 380, 586, 62, 1059, 1169, 1212, 1012, 575, 1015,
	1025, 1313, 1319, 1278, 1325, 85, 667, 1156, 420, 276,
	901, 296, 276, 1109, 1238, 839, 858, 276, 753, 1229,
	1029, 991, 908, 705, 976, 307, 734, 393, 717, 710,
	878, 933, 1055, 752, 987, 414, 1039, 969, 733, 379,
	544, 409, 276, 85, 406, 742, 545, 276, 724, 276,
	66, 865, 319, 61, 7, 6, 5, 1566, 680, 312,
	1045, 1550, 1561, 1537, 1558, 417, 681, 1372, 564, 1549,
	739, 1536, 1295, 1400, 308, 549, 754, 311, 755, 68,
	69, 70, 71, 72, 1503, 629, 628, 638, 639, 631,
	632, 633, 634, 635, 636, 637, 630, 399, 1339, 640,
	1340, 1341, 1006, 27, 584, 54, 30, 31, 362, 274,
	368, 369, 366, 367, 365, 364, 363, 303, 272, 268,
	269, 270, 1007, 1008, 370, 371, 264, 604, 1279, 262,
	310, 266, 1200, 316, 309, 1199, 1220, 1038, 1201, 1263,
	1434, 1046, 408, 1391, 1389, 786, 599, 546, 302, 548,
	600, 597, 598, 828, 59, 602, 592, 593, 1265, 87,
	88, 89, 87, 88, 89, 825, 1560, 1557, 827, 1281,
	1530, 911, 1260, 629, 628, 638, 639, 631, 632, 633,
	634, 635, 636, 637, 630, 970, 603, 640, 1522, 1030,
	1581, 1478, 1264, 565, 829, 551, 266, 1266, 832, 816,
	866, 867, 868, 1283, 826, 1287, 1480, 1282, 1335, 1280,
	1187, 1189, 1334, 1333, 1285, 547, 554, 561, 279, 267,
	652, 653, 1511, 1284, 1414, 265, 1196, 1577, 774, 581,
	1110, 583, 1161, 276, 556, 557, 1286, 1288, 276, 271,
	566, 1137, 1117, 1090, 276, 1032, 1089, 263, 589, 1032,
	276, 573, 748, 728, 579, 85, 665, 1486, 1504, 85,
	571, 85, 630, 580, 582, 640, 1013, 85, 640, 787,
	1002, 1127, 948, 863, 85, 620, 1479, 87, 88, 89,
	1520, 1257, 1495, 1323, 558, 756, 559, 1259, 1535, 560,
	610, 1188, 800, 803, 804, 805, 806, 807, 808, 1046,
	809, 810, 811, 812, 813, 788, 789, 790, 791, 772,
	773, 801, 614, 775, 1297, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 792, 793, 794, 795, 796,
	797, 798, 799, 555, 1124, 615, 616, 934, 563, 567,
	568, 569, 1575, 859, 570, 1576, 588, 1574, 1031, 578,
	572, 1035, 1031, 1028, 1026, 55, 1027, 1036, 590, 613,
	611, 612, 618, 1024, 1030, 1487, 1485, 87, 88, 89,
	1248, 713, 85, 75, 276, 276, 276, 712, 620, 818,
	652, 653, 885, 85, 802, 853, 934, 577, 1134, 85,
	1258, 1582, 1256, 591, 1218, 594, 883, 884, 882, 1525,
	1078, 605, 1244, 1245, 1246, 417, 721, 25, 1032, 1541,
	1440, 76, 1439, 1233, 1077, 953, 954, 87, 88, 89,
	1358, 718, 683, 685, 687, 689, 691, 693, 694, 860,
	684, 686, 1232, 690, 692, 1583, 695, 714, 1221, 732,
	87, 88, 89, 652, 653, 87, 88, 89, 751, 1568,
	741, 704, 543, 746, 1543, 704, 1076, 1521, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 619, 618,
	576, 854, 384, 1247, 731, 1456, 740, 1437, 1252, 1249,
	1240, 1250, 1243, 1230, 1239, 620, 619, 618, 1241, 1242,
	629, 628, 638, 639, 631, 632, 633, 634, 635, 636,
	637, 630, 1251, 620, 640, 1123, 1492, 1100, 1073, 1070,
	1071, 1031, 1069, 844, 276, 1102, 1103, 1104, 814, 85,
	1491, 817, 59, 819, 276, 276, 85, 85, 85, 744,
	619, 618, 276, 550, 881, 276, 1354, 1299, 276, 837,
	838, 1033, 276, 1403, 85, 1080, 1083, 620, 1322, 85,
	85, 85, 276, 85, 85, 1310, 261, 1122, 1322, 1121,
	619, 618, 716, 85, 85, 631, 632, 633, 634, 635,
	636, 637, 630, 843, 745, 640, 747, 620, 619, 618,
	841, 950, 1075, 629, 628, 638, 639, 631, 632, 633,
	634, 635, 636, 637, 630, 620, 63, 640, 633, 634,
	635, 636, 637, 630, 1074, 1409, 640, 879, 996, 833,
	743, 902, 1483, 1559, 764, 552, 553, 873, 875, 876,
	904, 949, 617, 874, 820, 821, 403, 404, 1494, 87,
	88, 89, 830, 903, 85, 408, 1545, 704, 836, 962,
	619, 618, 1483, 1533, 1079, 87, 88, 89, 1362, 1203,
	922, 925, 849, 815, 917, 973, 935, 620, 912, 1081,
	822, 823, 824, 87, 88, 89, 1204, 85, 85, 978,
	981, 982, 983, 979, 914, 980, 984, 1005, 842, 1326,
	1327, 913, 59, 846, 847, 848, 85, 850, 851, 1483,
	704, 1483, 1512, 276, 1483, 1482, 85, 855, 856, 1429,
	1428, 276, 1416, 704, 955, 905, 906, 1413, 704, 276,
	276, 1364, 1363, 276, 276, 1360, 1361, 276, 276, 276,
	85, 912, 943, 944, 1360, 1359, 339, 338, 341, 342,
	343, 344, 1140, 85, 545, 340, 345, 914, 962, 704,
	973, 704, 417, 27, 968, 1157, 964, 617, 704, 763,
	762, 972, 1139, 962, 743, 1017, 877, 841, 963, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 966, 744, 951, 997, 995, 973,
	831, 999, 749, 1157, 1004, 1003, 1551, 276, 85, 1000,
	85, 973, 1082, 965, 59, 1446, 276, 276, 276, 276,
	276, 971, 276, 276, 1020, 962, 276, 85, 1061, 1041,
	1042, 1043, 1044, 386, 998, 1040, 939, 1421, 27, 1060,
	745, 1262, 743, 276, 1350, 1052, 1053, 1054, 276, 1322,
	276, 276, 1207, 1326, 1327, 276, 1056, 27, 1047, 1048,
	1049, 918, 919, 1057, 1058, 924, 927, 928, 1463, 1051,
	1050, 1447, 1063, 1564, 1352, 1271, 1329, 1097, 1310, 1234,
	864, 1163, 1332, 835, 59, 1331, 879, 1164, 1177, 59,
	942, 1176, 1146, 945, 946, 629, 628, 638, 639, 631,
	632, 633, 634, 635, 636, 637, 630, 1064, 59, 640,
	1180, 1182, 1555, 982, 983, 1181, 1084, 1085, 1086, 1087,
	1088, 1548, 1091, 1092, 394, 1303, 1093, 715, 978, 981,
	982, 983, 979, 1105, 980, 984, 1178, 394, 395, 1225,
	1553, 1179, 1065, 1095, 1067, 719, 720, 397, 1096, 396,
	1155, 395, 761, 1154, 276, 1101, 930, 574, 391, 392,
	397, 1094, 396, 1217, 276, 276, 276, 276, 276, 1170,
	931, 1527, 1526, 706, 1461, 1165, 276, 1215, 1209, 276,
	1407, 323, 1442, 276, 1133, 707, 1066, 276, 834, 986,
	387, 388, 1153, 381, 917, 1406, 382, 63, 1405, 1150,
	1152, 1149, 1306, 1157, 1202, 601, 85, 1570, 1569, 1570,
	1128, 1158, 1160, 1125, 857, 1208, 1205, 378, 1159, 1213,
	1213, 1172, 1173, 1192, 1175, 1194, 722, 1195, 1017, 1183,
	1508, 1402, 1171, 1435, 1191, 1174, 947, 1106, 1107, 1108,
	65, 67, 60, 1, 1197, 1562, 1214, 1373, 1443, 1072,
	1528, 1193, 86, 1476, 85, 85, 277, 1344, 1023, 277,
	1014, 74, 542, 1224, 277, 1226, 1227, 1228, 1210, 1211,
	73, 629, 628, 638, 639, 631, 632, 633, 634, 635,
	636, 637, 630, 1519, 85, 640, 852, 587, 1022, 277,
	86, 1231, 1021, 1484, 277, 1433, 277, 1034, 1219, 1037,
	1351, 1114, 1115, 1216, 1524, 1253, 769, 767, 85, 768,
	766, 771, 770, 902, 1237, 765, 289, 412, 985, 757,
	1062, 1131, 1222, 1223, 723, 77, 1255, 1254, 1068, 862,
	1277, 286, 1268, 1269, 595, 596, 291, 648, 1151, 1198,
	1270, 418, 276, 411, 1317, 1296, 952, 1290, 709, 1404,
	1300, 1305, 85, 1289, 1132, 677, 932, 85, 85, 1276,
	1170, 1311, 322, 872, 337, 334, 914, 335, 1314, 957,
	1162, 622, 1316, 913, 1277, 320, 314, 736, 729, 977,
	975, 85, 974, 407, 1328, 1324, 735, 961, 390, 1236,
	1399, 1502, 389, 929, 46, 85, 1321, 85, 85, 1330,
	606, 1213, 1213, 304, 29, 64, 1337, 1343, 398, 20,
	19, 18, 22, 1336, 17, 16, 1357, 1017, 1267, 1017,
	15, 1338, 562, 33, 1342, 276, 24, 1348, 1349, 1347,
	23, 14, 13, 12, 11, 10, 9, 8, 4, 609,
	1355, 1356, 1304, 21, 383, 276, 26, 2, 0, 0,
	0, 85, 0, 1374, 85, 85, 85, 276, 0, 0,
	0, 0, 0, 0, 1272, 1273, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 0, 0, 0, 1291, 1292,
	277, 1293, 1294, 0, 1366, 277, 0, 1379, 1380, 0,
	0, 277, 0, 1301, 1302, 0, 0, 277, 1387, 1367,
	650, 1369, 86, 0, 0, 0, 86, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 1170,
	0, 86, 1408, 0, 0, 1365, 0, 0, 0, 0,
	351, 53, 0, 85, 0, 1417, 1384, 1385, 1418, 1386,
	0, 85, 1388, 1205, 1390, 1368, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 1017, 85, 1378, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 53, 1445, 737, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 1430, 85, 85, 0, 85, 0, 0,
	0, 1455, 85, 1314, 85, 85, 85, 276, 1464, 86,
	85, 277, 277, 277, 1470, 1381, 1471, 1473, 1474, 1469,
	86, 1462, 0, 1460, 0, 1475, 86, 85, 276, 1481,
	1436, 0, 1438, 1488, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1314, 1509, 1518,
	0, 1510, 0, 0, 85, 0, 1517, 1516, 0, 0,
	0, 0, 0, 0, 0, 85, 85, 0, 0, 0,
	1441, 0, 0, 1531, 0, 0, 1532, 0, 0, 0,
	0, 0, 85, 0, 0, 1170, 1538, 1445, 1017, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 1547,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	1552, 1554, 85, 0, 0, 0, 0, 0, 1450, 1451,
	1452, 1453, 1454, 0, 1556, 1567, 1457, 1458, 0, 0,
	0, 277, 1578, 0, 0, 0, 86, 0, 0, 0,
	0, 277, 277, 86, 86, 86, 0, 1397, 0, 277,
	0, 0, 277, 0, 0, 277, 0, 0, 0, 277,
	0, 86, 0, 0, 0, 0, 86, 86, 86, 277,
	86, 86, 0, 0, 0, 880, 0, 0, 0, 0,
	86, 86, 0, 1542, 0, 585, 1111, 0, 0, 585,
	0, 585, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 0, 0, 0, 53, 629, 628, 638, 639,
	631, 632, 633, 634, 635, 636, 637, 630, 649, 651,
	640, 0, 0, 703, 0, 0, 629, 628, 638, 639,
	631, 632, 633, 634, 635, 636, 637, 630, 0, 401,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 664,
	0, 86, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 0, 679, 682, 682, 682, 688, 682, 682, 688,
	682, 696, 697, 698, 699, 700, 701, 702, 0, 0,
	0, 0, 0, 0, 86, 86, 53, 0, 0, 1571,
	737, 0, 313, 0, 737, 0, 0, 0, 737, 0,
	0, 0, 0, 86, 0, 738, 0, 0, 0, 0,
	277, 0, 0, 86, 0, 0, 0, 0, 277, 27,
	28, 54, 30, 31, 0, 0, 277, 277, 0, 0,
	277, 277, 0, 0, 277, 277, 277, 86, 58, 0,
	0, 0, 0, 32, 49, 50, 0, 52, 0, 0,
	86, 628, 638, 639, 631, 632, 633, 634, 635, 636,
	637, 630, 0, 624, 640, 627, 41, 0, 0, 0,
	59, 641, 642, 643, 644, 645, 646, 647, 0, 625,
	626, 623, 629, 628, 638, 639, 631, 632, 633, 634,
	635, 636, 637, 630, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 277, 86, 0, 86, 0, 0,
	0, 0, 0, 277, 277, 277, 277, 277, 0, 277,
	277, 0, 0, 277, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 34, 35, 37, 36, 39,
	277, 51, 0, 0, 0, 277, 0, 277, 277, 585,
	0, 0, 277, 0, 0, 0, 585, 585, 585, 0,
	0, 0, 0, 0, 40, 57, 56, 0, 0, 47,
	48, 38, 0, 0, 585, 0, 0, 0, 0, 585,
	585, 585, 0, 585, 585, 42, 43, 0, 44, 45,
	0, 0, 0, 585, 585, 0, 0, 87, 88, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	915, 916, 348, 0, 0, 737, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 737, 737, 737, 737,
	1396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 84, 737, 0,
	280, 277, 53, 0, 0, 621, 0, 956, 0, 283,
	0, 277, 277, 277, 277, 277, 0, 290, 0, 668,
	0, 55, 0, 277, 0, 0, 277, 0, 0, 0,
	277, 0, 0, 0, 277, 419, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	678, 288, 0, 86, 1395, 0, 0, 295, 0, 629,
	628, 638, 639, 631, 632, 633, 634, 635, 636, 637,
	630, 708, 711, 640, 638, 639, 631, 632, 633, 634,
	635, 636, 637, 630, 281, 0, 640, 0, 0, 988,
	0, 0, 1394, 738, 0, 0, 0, 738, 0, 0,
	0, 86, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 284, 0, 293, 294, 300, 0, 0, 0,
	285, 287, 297, 0, 282, 299, 298, 0, 0, 0,
	0, 86, 0, 629, 628, 638, 639, 631, 632, 633,
	634, 635, 636, 637, 630, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 0,
	585, 629, 628, 638, 639, 631, 632, 633, 634, 635,
	636, 637, 630, 0, 0, 640, 0, 585, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 86,
	0, 0, 1113, 0, 86, 86, 0, 0, 0, 0,
	0, 1118, 1119, 1120, 0, 0, 0, 0, 1126, 0,
	0, 1129, 1130, 0, 0, 0, 0, 0, 86, 1136,
	0, 0, 0, 1138, 0, 0, 1141, 1142, 1143, 1144,
	1145, 0, 86, 0, 86, 86, 0, 419, 0, 0,
	0, 419, 0, 419, 0, 0, 0, 0, 0, 419,
	0, 0, 0, 1116, 0, 0, 607, 845, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 277, 0, 0, 0, 0, 0, 86, 0,
	0, 86, 86, 86, 277, 0, 0, 869, 870, 871,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	1166, 1167, 0, 0, 738, 738, 738, 738, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 1190, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 920, 921, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	86, 758, 0, 0, 0, 0, 0, 0, 86, 0,
	629, 628, 638, 639, 631, 632, 633, 634, 635, 636,
	637, 630, 0, 86, 640, 0, 0, 0, 1274, 1275,
	86, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 1011, 0, 0, 0,
	0, 86, 86, 0, 86, 0, 0, 0, 0, 86,
	0, 86, 86, 86, 277, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 0, 1315, 0, 53, 419, 419,
	419, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 86, 0, 0, 419, 0, 0, 0,
	0, 419, 419, 419, 0, 419, 419, 0, 0, 86,
	0, 0, 0, 0, 0, 419, 419, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	1382, 0, 1383, 0, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 1392, 1393, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	1411, 1412, 0, 1415, 0, 0, 0, 275, 0, 0,
	301, 0, 0, 0, 1135, 275, 907, 0, 419, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	1148, 711, 936, 0, 0, 0, 1398, 402, 0, 0,
	410, 0, 0, 0, 0, 275, 0, 275, 0, 940,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 1423, 1424, 1425, 0, 726, 0,
	0, 419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 0, 585, 1472, 0, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 1499, 1500, 1501, 0, 1505,
	0, 1506, 1507, 0, 0, 0, 0, 0, 0, 0,
	1315, 0, 0, 1465, 0, 1513, 0, 1514, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 1534, 0, 0, 419,
	0, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 0, 53, 0, 0, 0,
	0, 0, 1544, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 275, 1307, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 1579, 1580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1565, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 0, 275, 275, 275, 0, 0, 0, 0, 1401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1420, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 1235, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 313, 0, 0, 0,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 419, 0, 936, 0, 0, 1318,
	1320, 0, 275, 275, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 275, 0, 0, 275, 0, 0, 0,
	840, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 419, 0, 419,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1370, 0, 0, 1375, 1376, 1377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 840, 0, 0, 0, 402, 402,
	0, 0, 402, 402, 402, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 402, 402,
	402, 402, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 419, 0, 840, 0, 275,
	0, 0, 0, 1432, 0, 0, 0, 275, 993, 0,
	0, 275, 275, 0, 0, 275, 1001, 840, 419, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 1467, 0, 1468,
	0, 0, 0, 0, 1432, 0, 1432, 1432, 1432, 0,
	0, 0, 1346, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 275, 275, 275, 275, 1432,
	275, 275, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 275, 0, 1098, 1099,
	0, 0, 0, 275, 0, 0, 1523, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 402,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 275, 275, 275, 275, 275, 0, 0, 0,
	0, 0, 0, 0, 1184, 0, 0, 275, 0, 0,
	0, 993, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 0, 529, 517, 0, 474, 532, 447,
	464, 540, 465, 468, 505, 432, 487, 175, 462, 0,
	451, 427, 458, 428, 449, 476, 119, 480, 446, 519,
	490, 531, 147, 0, 452, 538, 149, 496, 0, 222,
	163, 0, 0, 0, 478, 521, 485, 514, 473, 506,
	437, 495, 533, 463, 503, 534, 0, 937, 0, 87,
	88, 89, 0, 1018, 1019, 0, 0, 0, 0, 0,
	109, 275, 500, 528, 460, 502, 504, 426, 497, 0,
	430, 433, 539, 524, 455, 456, 1206, 0, 0, 0,
	0, 0, 0, 477, 486, 511, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 453, 0, 494, 0, 0,
	0, 434, 431, 0, 0, 0, 0, 475, 0, 0,
	0, 436, 0, 454, 512, 0, 424, 128, 516, 523,
	472, 278, 527, 470, 469, 530, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	520, 450, 459, 113, 457, 204, 182, 242, 493, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 429, 0,
	223, 245, 260, 107, 445, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 441, 444,
	439, 440, 488, 489, 535, 536, 537, 513, 435, 0,
	442, 443, 0, 518, 525, 526, 492, 90, 99, 148,
	257, 197, 124, 246, 425, 438, 117, 448, 0, 0,
	461, 466, 467, 479, 481, 482, 483, 484, 491, 498,
	499, 501, 507, 508, 509, 510, 515, 522, 541, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 529, 517, 0, 474, 532,
	447, 464, 540, 465, 468, 505, 432, 487, 175, 462,
	0, 451, 427, 458, 428, 449, 476, 119, 480, 446,
	519, 490, 531, 147, 0, 452, 538, 149, 496, 0,
	222, 163, 0, 0, 0, 478, 521, 485, 514, 473,
	506, 437, 495, 533, 463, 503, 534, 0, 0, 0,
	87, 88, 89, 0, 1018, 1019, 0, 0, 0, 0,
	0, 109, 0, 500, 528, 460, 502, 504, 426, 497,
	0, 430, 433, 539, 524, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 477, 486, 511, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 0, 494, 0,
	0, 0, 434, 431, 0, 0, 0, 0, 475, 0,
	0, 0, 436, 0, 454, 512, 0, 424, 128, 516,
	523, 472, 278, 527, 470, 469, 530, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 520, 450, 459, 113, 457, 204, 182, 242, 493,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 429,
	0, 223, 245, 260, 107, 445, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 441,
	444, 439, 440, 488, 489, 535, 536, 537, 513, 435,
	0, 442, 443, 0, 518, 525, 526, 492, 90, 99,
	148, 257, 197, 124, 246, 425, 438, 117, 448, 0,
	0, 461, 466, 467, 479, 481, 482, 483, 484, 491,
	498, 499, 501, 507, 508, 509, 510, 515, 522, 541,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 529, 517, 0, 474,
	532, 447, 464, 540, 465, 468, 505, 432, 487, 175,
	462, 0, 451, 427, 458, 428, 449, 476, 119, 480,
	446, 519, 490, 531, 147, 0, 452, 538, 149, 496,
	0, 222, 163, 0, 0, 0, 478, 521, 485, 514,
	473, 506, 437, 495, 533, 463, 503, 534, 59, 0,
	0, 87, 88, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 500, 528, 460, 502, 504, 426,
	497, 0, 430, 433, 539, 524, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 477, 486, 511, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 453, 0, 494,
	0, 0, 0, 434, 431, 0, 0, 0, 0, 475,
	0, 0, 0, 436, 0, 454, 512, 0, 424, 128,
	516, 523, 472, 278, 527, 470, 469, 530, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 520, 450, 459, 113, 457, 204, 182, 242,
	493, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 240, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 103, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	429, 0, 223, 245, 260, 107, 445, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 167, 104, 136,
	220, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	441, 444, 439, 440, 488, 489, 535, 536, 537, 513,
	435, 0, 442, 443, 0, 518, 525, 526, 492, 90,
	99, 148, 257, 197, 124, 246, 425, 438, 117, 448,
	0, 0, 461, 466, 467, 479, 481, 482, 483, 484,
	491, 498, 499, 501, 507, 508, 509, 510, 515, 522,
	541, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 529, 517, 0,
	474, 532, 447, 464, 540, 465, 468, 505, 432, 487,
	175, 462, 0, 451, 427, 458, 428, 449, 476, 119,
	480, 446, 519, 490, 531, 147, 0, 452, 538, 149,
	496, 0, 222, 163, 0, 0, 0, 478, 521, 485,
	514, 473, 506, 437, 495, 533, 463, 503, 534, 0,
	0, 0, 87, 88, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 500, 528, 460, 502, 504,
	426, 497, 0, 430, 433, 539, 524, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 477, 486, 511, 471,
	0, 0, 0, 0, 0, 0, 1308, 0, 453, 0,
	494, 0, 0, 0, 434, 431, 0, 0, 0, 0,
	475, 0, 0, 0, 436, 0, 454, 512, 0, 424,
	128, 516, 523, 472, 278, 527, 470, 469, 530, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 520, 450, 459, 113, 457, 204, 182,
	242, 493, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 429, 0, 223, 245, 260, 107, 445, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 441, 444, 439, 440, 488, 489, 535, 536, 537,
	513, 435, 0, 442, 443, 0, 518, 525, 526, 492,
	90, 99, 148, 257, 197, 124, 246, 425, 438, 117,
	448, 0, 0, 461, 466, 467, 479, 481, 482, 483,
	484, 491, 498, 499, 501, 507, 508, 509, 510, 515,
	522, 541, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 529, 517,
	0, 474, 532, 447, 464, 540, 465, 468, 505, 432,
	487, 175, 462, 0, 451, 427, 458, 428, 449, 476,
	119, 480, 446, 519, 490, 531, 147, 0, 452, 538,
	149, 496, 0, 222, 163, 0, 0, 0, 478, 521,
	485, 514, 473, 506, 437, 495, 533, 463, 503, 534,
	0, 0, 0, 87, 88, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 500, 528, 460, 502,
	504, 426, 497, 0, 430, 433, 539, 524, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 477, 486, 511,
	471, 0, 0, 0, 0, 0, 0, 1002, 0, 453,
	0, 494, 0, 0, 0, 434, 431, 0, 0, 0,
	0, 475, 0, 0, 0, 436, 0, 454, 512, 0,
	424, 128, 516, 523, 472, 278, 527, 470, 469, 530,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 520, 450, 459, 113, 457, 204,
	182, 242, 493, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 429, 0, 223, 245, 260, 107, 445, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 441, 444, 439, 440, 488, 489, 535, 536,
	537, 513, 435, 0, 442, 443, 0, 518, 525, 526,
	492, 90, 99, 148, 257, 197, 124, 246, 425, 438,
	117, 448, 0, 0, 461, 466, 467, 479, 481, 482,
	483, 484, 491, 498, 499, 501, 507, 508, 509, 510,
	515, 522, 541, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 529,
	517, 0, 474, 532, 447, 464, 540, 465, 468, 505,
	432, 487, 175, 462, 0, 451, 427, 458, 428, 449,
	476, 119, 480, 446, 519, 490, 531, 147, 0, 452,
	538, 149, 496, 0, 222, 163, 0, 0, 0, 478,
	521, 485, 514, 473, 506, 437, 495, 533, 463, 503,
	534, 0, 0, 0, 87, 88, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 500, 528, 460,
	502, 504, 426, 497, 0, 430, 433, 539, 524, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 477, 486,
	511, 471, 0, 0, 0, 0, 0, 0, 967, 0,
	453, 0, 494, 0, 0, 0, 434, 431, 0, 0,
	0, 0, 475, 0, 0, 0, 436, 0, 454, 512,
	0, 424, 128, 516, 523, 472, 278, 527, 470, 469,
	530, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 520, 450, 459, 113, 457,
	204, 182, 242, 493, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 429, 0, 223, 245, 260, 107, 445,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 441, 444, 439, 440, 488, 489, 535,
	536, 537, 513, 435, 0, 442, 443, 0, 518, 525,
	526, 492, 90, 99, 148, 257, 197, 124, 246, 425,
	438, 117, 448, 0, 0, 461, 466, 467, 479, 481,
	482, 483, 484, 491, 498, 499, 501, 507, 508, 509,
	510, 515, 522, 541, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	529, 517, 0, 474, 532, 447, 464, 540, 465, 468,
	505, 432, 487, 175, 462, 0, 451, 427, 458, 428,
	449, 476, 119, 480, 446, 519, 490, 531, 147, 0,
	452, 538, 149, 496, 0, 222, 163, 0, 0, 0,
	478, 521, 485, 514, 473, 506, 437, 495, 533, 463,
	503, 534, 0, 0, 0, 87, 88, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 500, 528,
	460, 502, 504, 426, 497, 0, 430, 433, 539, 524,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 477,
	486, 511, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 453, 0, 494, 0, 0, 0, 434, 431, 0,
	0, 0, 0, 475, 0, 0, 0, 436, 0, 454,
	512, 0, 424, 128, 516, 523, 472, 278, 527, 470,
	469, 530, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 520, 450, 459, 113,
	457, 204, 182, 242, 493, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 429, 0, 223, 245, 260, 107,
	445, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 441, 444, 439, 440, 488, 489,
	535, 536, 537, 513, 435, 0, 442, 443, 0, 518,
	525, 526, 492, 90, 99, 148, 257, 197, 124, 246,
	425, 438, 117, 448, 0, 0, 461, 466, 467, 479,
	481, 482, 483, 484, 491, 498, 499, 501, 507, 508,
	509, 510, 515, 522, 541, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 529, 517, 0, 474, 532, 447, 464, 540, 465,
	468, 505, 432, 487, 175, 462, 0, 451, 427, 458,
	428, 449, 476, 119, 480, 446, 519, 490, 531, 147,
	0, 452, 538, 149, 496, 0, 222, 163, 0, 0,
	0, 478, 521, 485, 514, 473, 506, 437, 495, 533,
	463, 503, 534, 0, 0, 0, 87, 88, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 500,
	528, 460, 502, 504, 426, 497, 0, 430, 433, 539,
	524, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	477, 486, 511, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 453, 0, 494, 0, 0, 0, 434, 431,
	0, 0, 0, 0, 475, 0, 0, 0, 436, 0,
	454, 512, 0, 424, 128, 516, 523, 472, 278, 527,
	470, 469, 530, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 520, 450, 459,
	113, 457, 204, 182, 242, 493, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 422, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 429, 0, 223, 245, 260,
	107, 445, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 423, 421, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 441, 444, 439, 440, 488,
	489, 535, 536, 537, 513, 435, 0, 442, 443, 0,
	518, 525, 526, 492, 90, 99, 148, 257, 197, 124,
	246, 425, 438, 117, 448, 0, 0, 461, 466, 467,
	479, 481, 482, 483, 484, 491, 498, 499, 501, 507,
	508, 509, 510, 515, 522, 541, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 529, 517, 0, 474, 532, 447, 464, 540,
	465, 468, 505, 432, 487, 175, 462, 0, 451, 427,
	458, 428, 449, 476, 119, 480, 446, 519, 490, 531,
	147, 0, 452, 538, 149, 496, 0, 222, 163, 0,
	0, 0, 478, 521, 485, 514, 473, 506, 437, 495,
	533, 463, 503, 534, 0, 0, 0, 87, 88, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	500, 528, 460, 502, 504, 426, 497, 0, 430, 433,
	539, 524, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 477, 486, 511, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 453, 0, 494, 0, 0, 0, 434,
	431, 0, 0, 0, 0, 475, 0, 0, 0, 436,
	0, 454, 512, 0, 424, 128, 516, 523, 472, 278,
	527, 470, 469, 530, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 520, 450,
	459, 113, 457, 204, 182, 242, 493, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 750, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 422, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 429, 0, 223, 245,
	260, 107, 445, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 423, 421, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 441, 444, 439, 440,
	488, 489, 535, 536, 537, 513, 435, 0, 442, 443,
	0, 518, 525, 526, 492, 90, 99, 148, 257, 197,
	124, 246, 425, 438, 117, 448, 0, 0, 461, 466,
	467, 479, 481, 482, 483, 484, 491, 498, 499, 501,
	507, 508, 509, 510, 515, 522, 541, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 529, 517, 0, 474, 532, 447, 464,
	540, 465, 468, 505, 432, 487, 175, 462, 0, 451,
	427, 458, 428, 449, 476, 119, 480, 446, 519, 490,
	531, 147, 0, 452, 538, 149, 496, 0, 222, 163,
	0, 0, 0, 478, 521, 485, 514, 473, 506, 437,
	495, 533, 463, 503, 534, 0, 0, 0, 87, 88,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 500, 528, 460, 502, 504, 426, 497, 0, 430,
	433, 539, 524, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 477, 486, 511, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 0, 494, 0, 0, 0,
	434, 431, 0, 0, 0, 0, 475, 0, 0, 0,
	436, 0, 454, 512, 0, 424, 128, 516, 523, 472,
	278, 527, 470, 469, 530, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 520,
	450, 459, 113, 457, 204, 182, 242, 493, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 413, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 422, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 429, 0, 223,
	245, 260, 107, 445, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 423, 421, 416, 415, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 441, 444, 439,
	440, 488, 489, 535, 536, 537, 513, 435, 0, 442,
	443, 0, 518, 525, 526, 492, 90, 99, 148, 257,
	197, 124, 246, 425, 438, 117, 448, 0, 0, 461,
	466, 467, 479, 481, 482, 483, 484, 491, 498, 499,
	501, 507, 508, 509, 510, 515, 522, 541, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 175, 0, 0, 909, 0, 318,
	0, 0, 0, 119, 0, 317, 0, 0, 0, 147,
	0, 910, 361, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 87, 88, 89, 339,
	338, 341, 342, 343, 344, 0, 0, 109, 340, 345,
	346, 347, 0, 0, 0, 315, 332, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 330,
	400, 0, 0, 0, 375, 0, 331, 0, 0, 324,
	325, 327, 326, 328, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 374, 0, 0, 278, 0,
	0, 372, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 362, 373, 368, 369, 366,
	367, 365, 364, 363, 376, 354, 355, 356, 357, 359,
	0, 370, 371, 358, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 0, 318, 0, 0,
	0, 119, 0, 317, 0, 0, 0, 147, 0, 0,
	361, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 352, 353, 0, 0, 0, 0, 0, 0, 1009,
	0, 59, 0, 0, 87, 88, 89, 339, 338, 341,
	342, 343, 344, 0, 0, 109, 340, 345, 346, 347,
	1010, 0, 0, 315, 332, 0, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 330, 0, 0,
	0, 0, 375, 0, 331, 0, 0, 324, 325, 327,
	326, 328, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 374, 0, 0, 278, 0, 0, 372,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 362, 373, 368, 369, 366, 367, 365,
	364, 363, 376, 354, 355, 356, 357, 359, 0, 370,
	371, 358, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	175, 0, 0, 0, 0, 318, 0, 0, 0, 119,
	0, 317, 0, 0, 0, 147, 0, 0, 361, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 704, 87, 88, 89, 339, 338, 341, 342, 343,
	344, 0, 0, 109, 340, 345, 346, 347, 0, 0,
	0, 315, 332, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 330, 0, 0, 0, 0,
	375, 0, 331, 0, 0, 324, 325, 327, 326, 328,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 374, 0, 0, 278, 0, 0, 372, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 362, 373, 368, 369, 366, 367, 365, 364, 363,
	376, 354, 355, 356, 357, 359, 0, 370, 371, 358,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 175, 0,
	0, 0, 0, 318, 0, 0, 0, 119, 0, 317,
	0, 0, 0, 147, 0, 0, 361, 149, 0, 0,
	222, 163, 0, 0, 0, 0, 0, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	87, 88, 89, 339, 338, 341, 342, 343, 344, 0,
	0, 109, 340, 345, 346, 347, 0, 0, 0, 315,
	332, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 330, 400, 0, 0, 0, 375, 0,
	331, 0, 0, 324, 325, 327, 326, 328, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 374,
	0, 0, 278, 0, 0, 372, 0, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 0, 0, 0, 113, 0, 204, 182, 242, 0,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 0,
	0, 223, 245, 260, 107, 0, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 362,
	373, 368, 369, 366, 367, 365, 364, 363, 376, 354,
	355, 356, 357, 359, 0, 370, 371, 358, 90, 99,
	148, 257, 197, 124, 246, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 175, 0, 0, 0,
	0, 318, 0, 0, 0, 119, 0, 317, 0, 0,
	0, 147, 0, 0, 361, 149, 0, 0, 222, 163,
	0, 0, 0, 0, 0, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 87, 88,
	89, 339, 926, 341, 342, 343, 344, 0, 0, 109,
	340, 345, 346, 347, 0, 0, 0, 315, 332, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 330, 400, 0, 0, 0, 375, 0, 331, 0,
	0, 324, 325, 327, 326, 328, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 374, 0, 0,
	278, 0, 0, 372, 0, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 0,
	0, 0, 113, 0, 204, 182, 242, 0, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 240, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 103, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 0, 0, 223,
	245, 260, 107, 0, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 167, 104, 136, 220, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 362, 373, 368,
	369, 366, 367, 365, 364, 363, 376, 354, 355, 356,
	357, 359, 0, 370, 371, 358, 90, 99, 148, 257,
	197, 124, 246, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 175, 0, 0, 0, 0, 318,
	0, 0, 0, 119, 0, 317, 0, 0, 0, 147,
	0, 0, 361, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 87, 88, 89, 339,
	923, 341, 342, 343, 344, 0, 0, 109, 340, 345,
	346, 347, 0, 0, 0, 315, 332, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 330,
	400, 0, 0, 0, 375, 0, 331, 0, 0, 324,
	325, 327, 326, 328, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 374, 0, 0, 278, 0,
	0, 372, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 362, 373, 368, 369, 366,
	367, 365, 364, 363, 376, 354, 355, 356, 357, 359,
	0, 370, 371, 358, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 318,
	0, 0, 0, 119, 0, 317, 0, 0, 0, 147,
	0, 0, 361, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 87, 88, 89, 339,
	338, 341, 342, 343, 344, 0, 0, 109, 340, 345,
	346, 347, 0, 0, 0, 315, 332, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 330,
	0, 0, 0, 0, 375, 0, 331, 0, 0, 324,
	325, 327, 326, 328, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 374, 0, 0, 278, 0,
	0, 372, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 362, 373, 368, 369, 366,
	367, 365, 364, 363, 376, 354, 355, 356, 357, 359,
	0, 370, 371, 358, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 0, 318, 0, 0,
	0, 119, 0, 317, 0, 0, 0, 147, 0, 0,
	361, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 87, 88, 89, 339, 338, 341,
	342, 343, 344, 0, 0, 109, 340, 345, 346, 347,
	0, 0, 0, 315, 332, 0, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 330, 0, 0,
	0, 0, 375, 0, 331, 0, 0, 324, 325, 327,
	326, 328, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 374, 0, 0, 278, 0, 0, 372,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 362, 373, 368, 369, 366, 367, 365,
	364, 363, 376, 354, 355, 356, 357, 359, 0, 370,
	371, 358, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 361, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 87, 88, 89, 339, 338, 341, 342, 343,
	344, 0, 0, 109, 340, 345, 346, 347, 0, 0,
	0, 0, 332, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 330, 0, 0, 0, 0,
	375, 0, 331, 0, 0, 324, 325, 327, 326, 328,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 374, 0, 0, 278, 0, 0, 372, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 1572, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 362, 373, 368, 369, 366, 367, 365, 364, 363,
	376, 354, 355, 356, 357, 359, 0, 370, 371, 358,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 147, 0, 0, 361, 149, 0, 0,
	222, 163, 0, 0, 0, 0, 0, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 704,
	87, 88, 89, 339, 338, 341, 342, 343, 344, 0,
	0, 109, 340, 345, 346, 347, 0, 0, 0, 0,
	332, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 330, 0, 0, 0, 0, 375, 0,
	331, 0, 0, 324, 325, 327, 326, 328, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 374,
	0, 0, 278, 0, 0, 372, 0, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 0, 0, 0, 113, 0, 204, 182, 242, 0,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 0,
	0, 223, 245, 260, 107, 0, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 362,
	373, 368, 369, 366, 367, 365, 364, 363, 376, 354,
	355, 356, 357, 359, 0, 370, 371, 358, 90, 99,
	148, 257, 197, 124, 246, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 147, 0, 0, 361, 149, 0, 0, 222, 163,
	0, 0, 0, 0, 0, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 87, 88,
	89, 339, 338, 341, 342, 343, 344, 0, 0, 109,
	340, 345, 346, 347, 0, 0, 0, 0, 332, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 330, 0, 0, 0, 0, 375, 0, 331, 0,
	0, 324, 325, 327, 326, 328, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 374, 0, 0,
	278, 0, 0, 372, 0, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 0,
	0, 0, 113, 0, 204, 182, 242, 0, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 240, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 103, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 0, 0, 223,
	245, 260, 107, 0, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 167, 104, 136, 220, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 362, 373, 368,
	369, 366, 367, 365, 364, 363, 376, 354, 355, 356,
	357, 359, 0, 370, 371, 358, 90, 99, 148, 257,
	197, 124, 246, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 628, 638, 639, 631, 632,
	633, 634, 635, 636, 637, 630, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 278, 0,
	0, 0, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 725, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 89, 0, 727, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 619, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 278, 0, 0, 0,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 81, 82, 0, 78, 0, 0, 0, 83, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 149, 0, 0,
	222, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 128, 0,
	0, 0, 278, 0, 0, 0, 0, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 0, 0, 0, 113, 0, 204, 182, 242, 0,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 0,
	0, 223, 245, 260, 107, 0, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 99,
	148, 257, 197, 124, 246, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 305, 175, 0, 0,
	0, 992, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 89, 0, 994, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 278, 0, 0, 0, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 278, 0, 0, 0, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 992,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	0, 994, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 278,
	0, 0, 0, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 990, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 0, 0,
	959, 0, 0, 960, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 278, 0, 0,
	0, 0, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 0, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 760, 0, 0, 0, 147, 0, 0, 0,
	149, 0, 0, 222, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 89, 0, 759, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 278, 0, 0, 0, 0,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 0, 0, 0, 113, 0, 204,
	182, 242, 0, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 0, 0, 223, 245, 260, 107, 0, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 99, 148, 257, 197, 124, 246, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 149, 0,
	0, 222, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 87, 88, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 278, 0, 0, 0, 0, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 0, 0, 0, 113, 0, 204, 182, 242,
	0, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 240, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 103, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	0, 0, 223, 245, 260, 107, 0, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 167, 104, 136,
	220, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	99, 148, 257, 197, 124, 246, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 278, 0, 0, 0, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	0, 994, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 278,
	0, 0, 0, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 0, 727,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 278, 0, 0,
	0, 0, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 0, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 175, 0, 0, 0, 0, 0, 0, 0, 730,
	119, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	149, 0, 0, 222, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 278, 0, 0, 0, 0,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 0, 0, 0, 113, 0, 204,
	182, 242, 0, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 0, 0, 223, 245, 260, 107, 0, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 99, 148, 257, 197, 124, 246, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 149, 0,
	0, 222, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 89, 0, 608, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 278, 0, 0, 0, 0, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 0, 0, 0, 113, 0, 204, 182, 242,
	0, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 240, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 103, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	0, 0, 223, 245, 260, 107, 0, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 167, 104, 136,
	220, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	99, 148, 257, 197, 124, 246, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 405, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 278, 0,
	0, 0, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 273, 0, 278, 0, 0, 0,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 278, 0, 0, 0, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253,
}
var yyPact = [...]int{

	1753, -1000, -277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 992, 1045, -1000, -1000, -1000,
	-1000, -1000, -1000, 346, 11922, 27, 119, 19, 16674, 118,
	1877, 17012, -1000, 4, -1000, -1000, 12260, -1000, -1000, -62,
	-66, -1000, 9894, 767, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 986, 990, 837, 980, 926, -1000, 8530, 92,
	92, 16336, 7178, -1000, -1000, 387, 17012, 114, 17012, -153,
	90, 90, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 116, 17012, 633, 633, 192, -1000, 17012, 88, 633,
	88, 88, 88, 17012, -1000, 171, -1000, -1000, -1000, 17012,
	633, 937, 405, 129, 4721, -1000, 245, -1000, 4721, 18,
	4721, -50, 1003, 16, -10, -1000, 4721, -1000, -1000, -1000,
	-1000, -1000, -1000, 15991, 127, 255, -1000, -1000, -1000, -1000,
	-1000, -1000, 594, 439, -1000, 9894, 1724, 655, 655, -1000,
	-1000, 130, -1000, -1000, 10908, 10908, 10908, 10908, 10908, 10908,
	10908, 10908, 10908, 10908, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 655, 167,
	-1000, 9556, 655, 655, 655, 655, 655, 655, 655, 655,
	9894, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 655, 655, 655, 655, 655, -1000, -1000, 426,
	964, 9894, 9894, 992, -1000, 767, -1000, -1000, -1000, 899,
	8530, -1000, -1000, 913, -1000, -1000, -1000, -1000, 366, 1025,
	-1000, 11584, 164, 15653, 14639, 17012, 794, 548, -1000, -1000,
	163, 754, 6827, -134, -1000, -1000, -1000, 228, 13963, -1000,
	-1000, -1000, 932, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 721, 17012, -1000, 145, -1000, 633, 4721, 97,
	633, 330, 633, 17012, 17012, 4721, 4721, 4721, 29, 68,
	53, 17012, 752, 95, 17012, 975, 838, 17012, 633, 633,
	-1000, 6125, -1000, 4721, 405, -1000, 479, 9894, 4721, 4721,
	4721, 17012, 4721, 4721, -1000, -1000, -1000, 404, -1000, -1000,
	-1000, -1000, 4721, 4721, -1000, 1013, 362, -1000, -1000, -1000,
	-1000, 9894, 208, -1000, 835, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -127, -1000, -1000, 9894, 9894, 9894,
	574, 211, 10908, 495, 331, 10908, 10908, 10908, 10908, 10908,
	10908, 10908, 10908, 10908, 10908, 10908, 10908, 10908, 10908, 10908,
	599, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 633,
	-1000, 767, 693, 693, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 11246, 7516, 6125, 426, 719, 9556, 8530,
	8530, 9894, 9894, 9206, 8868, 8530, 945, 284, 439, 17012,
	-1000, -1000, 10570, -1000, -1000, -1000, -1000, -1000, 426, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17012, 17012, 8530, 8530,
	8530, 8530, 8530, -1000, -1000, -1000, 1037, 205, 593, 748,
	-1000, 421, 986, 426, 913, 13625, 777, -1000, 913, -1000,
	-1000, -1000, 17012, -1000, -1000, 15315, -1000, -1000, 5774, 55,
	17012, -1000, 751, 893, -1000, -1000, -1000, 977, 12949, 13287,
	55, 582, 14639, 17012, -1000, -1000, 14639, 17012, 5423, 6476,
	-134, -1000, 649, -1000, -109, -91, 7854, 184, -1000, -1000,
	-1000, -1000, 4370, 247, 512, 308, -55, -1000, -1000, -1000,
	788, -1000, 788, 788, 788, 788, -26, -26, -26, -26,
	-1000, -1000, -1000, -1000, -1000, 823, 822, -1000, 788, 788,
	788, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 809,
	809, 809, 792, 792, 826, -1000, 17012, 4721, 973, 4721,
	-1000, 415, -1000, -1000, -1000, 17012, 17012, 17012, 17012, 17012,
	149, 17012, 17012, 726, -1000, 17012, 4721, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 439, -1000, -1000, -1000, -1000,
	-1000, -1000, 17012, -1000, -1000, -1000, -1000, 17012, 405, 17012,
	17012, 439, -1000, 473, 17012, -1000, -1000, -1000, -1000, 439,
	211, 314, -1000, -1000, 472, -1000, -1000, 2282, -1000, -1000,
	-1000, -1000, 495, 10908, 10908, 10908, 105, 2282, 1548, 1964,
	1692, 186, 524, 524, 183, 183, 183, 183, 183, 493,
	493, -1000, -1000, -1000, 426, -1000, -1000, -1000, 426, 8530,
	8530, 725, 655, 153, -1000, -1000, -1000, 426, 710, 710,
	531, 513, 353, 1012, 710, 290, 1009, 710, 710, 8530,
	-1000, -1000, 333, -1000, 9894, 426, -1000, 152, -1000, 422,
	724, 704, 710, 426, 426, 710, 710, -1000, 862, 9894,
	9894, 9894, -1000, -1000, -1000, 964, -1000, 991, -1000, 927,
	924, 1001, 8530, 14639, 913, -1000, -1000, -1000, 143, 861,
	655, -1000, 17012, 14639, 14639, 14639, 14639, 14639, -1000, 856,
	853, -1000, 901, 875, 876, 17012, -1000, 712, 12949, 187,
	655, -1000, 14977, -1000, -1000, 1001, 14639, 763, -1000, 763,
	-1000, 137, -1000, -1000, 649, -134, -80, -1000, -1000, -1000,
	-1000, 439, -1000, 615, 638, 4019, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 805, 633, -1000, 960, 251, 410, 633,
	959, -1000, -1000, -1000, 944, -1000, 351, -57, -1000, -1000,
	403, -26, -26, -1000, -1000, 184, 919, 184, 184, 184,
	449, 449, -1000, -1000, -1000, -1000, 397, -1000, -1000, -1000,
	378, -1000, 834, 17012, 4721, -1000, -1000, -1000, -1000, 372,
	372, 289, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42, 795, -1000, -1000, -1000, -1000, 3,
	22, 94, -1000, 4721, -1000, 362, 362, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 105, 2282, 807, -1000,
	10908, 10908, -1000, -1000, 710, 710, 8530, 6125, -1000, -1000,
	-1000, 45, 599, 45, 10908, 10908, -1000, 10908, 10908, -1000,
	-166, 611, 258, -1000, 9894, 483, -1000, 6125, -1000, 10908,
	10908, -1000, -1000, -1000, -1000, -1000, 894, 439, 439, -1000,
	-1000, 17012, -1000, -1000, -1000, -1000, 999, 9894, -1000, 627,
	-1000, 5072, 833, 17012, 655, -1000, 12949, 17012, 801, -1000,
	226, 893, 808, 831, 654, -1000, -1000, -1000, -1000, 850,
	-1000, 847, -1000, -1000, -1000, -1000, -1000, 112, 111, 107,
	17012, -1000, 992, 763, -1000, -1000, 196, -1000, -1000, -114,
	-116, -1000, -1000, -1000, 4370, -1000, 4370, 17012, 72, -1000,
	633, 633, -1000, -1000, -1000, 797, 829, 10908, -1000, -1000,
	-1000, 507, 184, 184, -1000, 337, -1000, -1000, -1000, 696,
	-1000, 687, 620, 683, 17012, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17012, -1000, -1000, -1000, -1000, -1000,
	17012, -174, 633, 17012, 17012, 17012, 17012, -1000, 405, 405,
	-1000, 10908, 2282, 2282, -1000, -1000, 426, -1000, 426, 788,
	788, -1000, 788, 792, -1000, 788, -8, 788, -9, 426,
	426, 2063, 2025, 1951, 1568, 655, -161, -1000, 439, 9894,
	-1000, 983, 515, -1000, -1000, 994, 989, 439, -1000, -1000,
	963, 530, 577, -1000, -1000, 8192, 426, 679, 135, 674,
	-1000, 992, 17012, 9894, -1000, -1000, 9894, 790, -1000, 9894,
	-1000, -1000, -1000, 655, 655, 655, 674, 986, -1000, -1000,
	-1000, -1000, 4019, -1000, 671, -1000, 788, -1000, -1000, -1000,
	17012, -49, 1034, 2282, -1000, -1000, -1000, -1000, -1000, -26,
	443, -26, 377, -1000, 375, 4721, -1000, -1000, -1000, -1000,
	966, -1000, 6125, -1000, -1000, 768, 825, -1000, -1000, -1000,
	-1000, 2282, -1000, -1000, -1000, 132, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10908, 10908, 10908, 10908, 10908, 986,
	441, 439, 10908, 10908, -1000, 9894, 9894, 956, -1000, 655,
	-1000, -1000, 842, 17012, 17012, -1000, 17012, 986, -1000, 439,
	439, 17012, 439, 14301, 17012, 17012, 12599, -1000, 165, 17012,
	-1000, 666, -1000, 259, -1000, -111, 184, -1000, 184, 491,
	477, -1000, 655, 600, -1000, 225, 17012, 17012, -1000, -1000,
	422, 422, 422, 422, 17, 426, -1000, 422, 422, 439,
	594, 1031, -1000, 655, -1000, 767, 133, -1000, -1000, -1000,
	663, 661, -1000, 661, 661, 187, 165, -1000, 633, 223,
	423, -1000, 69, 17012, 358, 954, -1000, 953, -1000, -1000,
	-1000, -1000, -1000, 40, 6125, 4370, 614, -1000, -1000, -1000,
	-1000, -1000, 426, 49, -179, -1000, -1000, -1000, 17012, 577,
	426, 17012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 374,
	-1000, -1000, 17012, -1000, -1000, 420, -1000, -1000, 608, -1000,
	17012, -1000, -1000, 795, -1000, 890, -171, -182, 520, -1000,
	-1000, -1000, 759, -1000, -1000, 40, 914, -174, -1000, 881,
	-1000, 17012, -1000, 35, -1000, -177, 584, 33, -180, 828,
	655, -186, 424, -1000, 1008, 10232, -1000, -1000, 1010, 227,
	227, 422, 426, -1000, -1000, -1000, 76, 392, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1257, 15, 437, 1256, 1254, 1253, 1249, 1248, 86,
	85, 84, 1247, 1246, 1245, 1244, 1243, 1242, 1241, 1240,
	1236, 1233, 1232, 1230, 1225, 1224, 1222, 1221, 1220, 1219,
	80, 1218, 1215, 1214, 1213, 1210, 1204, 1203, 1202, 1201,
	1200, 43, 201, 52, 58, 1198, 57, 1679, 1197, 64,
	68, 56, 1196, 34, 1195, 1194, 74, 1193, 1192, 54,
	1190, 1189, 100, 1188, 71, 1187, 11, 37, 1186, 1185,
	1181, 1180, 82, 163, 1179, 1177, 17, 1175, 1174, 96,
	1173, 60, 36, 14, 13, 31, 1172, 991, 6, 1166,
	61, 1165, 1164, 1161, 1159, 23, 1158, 59, 1156, 21,
	53, 1154, 12, 67, 32, 20, 7, 1153, 1151, 25,
	65, 48, 63, 1149, 1148, 586, 1147, 1146, 46, 1145,
	1144, 1141, 28, 1139, 98, 563, 1138, 1137, 1136, 1135,
	38, 1027, 1952, 22, 78, 1134, 1130, 1129, 2568, 45,
	51, 18, 1128, 55, 134, 40, 1127, 1126, 33, 1125,
	1122, 1121, 1120, 1119, 1117, 1116, 66, 1114, 1113, 1110,
	90, 27, 1109, 1108, 62, 24, 1107, 1105, 1103, 49,
	70, 1102, 1098, 50, 1097, 1096, 26, 1093, 1080, 1072,
	1071, 1070, 29, 10, 1068, 19, 1067, 9, 1063, 30,
	1060, 4, 1059, 8, 1058, 3, 0, 1057, 5, 44,
	1, 1055, 2, 1053, 1052, 1340, 1283, 75, 1051, 88,
}
var yyR1 = [...]int{

	0, 203, 204, 204, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 196, 196, 196,
	20, 2, 2, 2, 8, 3, 4, 4, 5, 5,
	9, 9, 33, 33, 10, 11, 11, 11, 11, 207,
	207, 56, 56, 57, 57, 103, 103, 12, 13, 13,
	112, 112, 111, 111, 111, 113, 113, 113, 113, 146,
	146, 14, 14, 14, 14, 14, 14, 14, 198, 198,
	197, 195, 195, 194, 194, 193, 21, 178, 180, 180,
	179, 179, 179, 179, 170, 149, 149, 149, 149, 152,
	152, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	151, 151, 151, 151, 151, 153, 153, 153, 153, 153,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 155, 155, 155, 155, 155,
	155, 155, 155, 169, 169, 156, 156, 164, 164, 165,
	165, 165, 162, 162, 163, 163, 166, 166, 166, 158,
	158, 159, 159, 167, 167, 160, 160, 160, 161, 161,
	161, 168, 168, 168, 168, 168, 157, 157, 171, 171,
	188, 188, 187, 187, 187, 177, 177, 184, 184, 184,
	184, 184, 174, 174, 174, 175, 175, 173, 173, 176,
	176, 186, 186, 185, 172, 172, 189, 189, 189, 189,
	201, 202, 200, 200, 200, 200, 200, 181, 181, 181,
	182, 182, 182, 183, 183, 183, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 192, 190, 190,
	191, 191, 16, 22, 22, 17, 17, 17, 17, 17,
	18, 18, 23, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	119, 119, 121, 121, 117, 117, 120, 120, 118, 118,
	118, 122, 122, 122, 123, 123, 147, 147, 147, 25,
	25, 27, 27, 28, 29, 34, 34, 34, 34, 34,
	34, 36, 36, 36, 7, 7, 7, 7, 35, 35,
	35, 6, 6, 26, 26, 26, 26, 19, 208, 30,
	31, 31, 32, 32, 32, 38, 38, 38, 37, 37,
	37, 43, 43, 45, 45, 45, 45, 45, 46, 46,
	46, 46, 46, 46, 42, 42, 44, 44, 44, 44,
	135, 135, 135, 134, 134, 48, 48, 49, 49, 50,
	50, 51, 51, 51, 51, 65, 65, 102, 102, 104,
	104, 52, 52, 52, 52, 53, 53, 54, 54, 55,
	55, 142, 142, 141, 141, 141, 140, 140, 58, 58,
	58, 60, 59, 59, 59, 59, 61, 61, 63, 63,
	62, 62, 64, 66, 66, 66, 66, 66, 67, 67,
	47, 47, 47, 47, 47, 47, 47, 116, 116, 69,
	69, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 80, 80, 80, 80, 80, 80, 70, 70, 70,
	70, 70, 70, 70, 41, 41, 81, 81, 81, 87,
	82, 82, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 77, 77, 77, 77,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 209,
	209, 79, 78, 78, 78, 78, 78, 78, 78, 39,
	39, 39, 39, 39, 145, 145, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 91,
	91, 40, 40, 89, 89, 90, 92, 92, 88, 88,
	88, 72, 72, 72, 72, 72, 72, 72, 72, 74,
	74, 74, 93, 93, 94, 94, 95, 95, 96, 96,
	97, 98, 98, 98, 99, 99, 99, 99, 100, 100,
	100, 71, 71, 71, 71, 71, 71, 101, 101, 101,
	101, 105, 105, 83, 83, 85, 85, 84, 86, 106,
	106, 109, 107, 107, 107, 110, 110, 110, 110, 108,
	108, 108, 137, 137, 137, 114, 114, 124, 124, 125,
	125, 115, 115, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 127, 127, 127, 128, 128, 129, 129,
	129, 136, 136, 132, 132, 133, 133, 138, 138, 139,
	139, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 205, 206, 143, 144, 144, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	2, 4, 6, 7, 5, 8, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 6, 1,
	1, 1, 3, 1, 3, 0, 4, 3, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 3, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 7,
	7, 4, 5, 4, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 3, 4, 4, 4, 4,
	4, 4, 3, 2, 7, 2, 3, 4, 3, 7,
	5, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	8, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 2, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -203, -1, -2, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -6, -26, -19, -20, -3, -4, 6, 7, -33,
	9, 10, 30, -21, 122, 123, 125, 124, 158, 126,
	151, 53, 172, 173, 175, 176, -36, 156, 157, 31,
	32, 128, 34, -205, 8, 258, 153, 152, 25, 57,
	-204, 360, -95, 15, -32, 5, -30, -208, -30, -30,
	-30, -30, -30, -178, -180, 57, 95, -129, 132, 77,
	250, 129, 130, 136, -132, -196, -131, 60, 61, 62,
	268, 144, 300, 301, 172, 183, 177, 204, 196, 269,
	302, 145, 194, 197, 237, 142, 303, 224, 231, 71,
	175, 246, 304, 154, 192, 188, 305, 277, 186, 27,
	306, 233, 209, 307, 273, 235, 187, 232, 128, 308,
	147, 140, 309, 210, 214, 310, 238, 311, 312, 313,
	181, 182, 314, 143, 240, 208, 141, 33, 270, 37,
	162, 241, 212, 315, 207, 203, 316, 317, 318, 319,
	206, 180, 202, 41, 216, 215, 217, 236, 199, 320,
	321, 322, 148, 323, 189, 18, 324, 325, 326, 327,
	328, 244, 157, 329, 160, 330, 331, 332, 333, 334,
	335, 234, 211, 213, 137, 164, 230, 272, 336, 242,
	185, 337, 149, 161, 156, 245, 150, 338, 339, 340,
	341, 342, 343, 344, 176, 345, 346, 347, 348, 171,
	239, 248, 40, 221, 349, 179, 139, 350, 173, 168,
	226, 200, 163, 351, 352, 190, 191, 205, 178, 201,
	174, 165, 158, 353, 247, 222, 274, 198, 195, 169,
	354, 166, 167, 355, 227, 228, 170, 271, 243, 193,
	223, -115, 132, 250, 129, 228, 134, 130, 130, 131,
	132, 250, 129, 130, -62, -138, -196, -131, 132, 130,
	113, 197, 237, 122, 225, 233, -121, 234, 164, -147,
	130, -117, 224, 227, 228, 170, -196, 235, 239, 238,
	229, -138, 174, -62, -34, 356, 126, -143, -143, 226,
	226, -143, -82, -47, -68, 79, -73, 29, 23, -72,
	-69, -88, -86, -87, 113, 114, 116, 115, 117, 102,
	103, 110, 80, 118, -77, -75, -76, -78, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -132, -138,
	-84, -205, 47, 48, 259, 260, 261, 262, 267, 263,
	82, 36, 249, 257, 256, 255, 253, 254, 251, 252,
	265, 266, 135, 250, 129, 108, 258, -196, -131, -2,
	-99, 17, 16, -5, -3, -205, 6, 20, 21, -38,
	-45, 42, 43, -46, 21, 35, 46, 44, -31, -44,
	104, -47, -138, -115, -115, 11, -56, -57, -62, -64,
	-138, -107, -146, 174, -110, 239, 238, -133, -108, -132,
	-130, 237, 197, 236, 127, 275, 78, 22, 24, 219,
	81, 113, 16, 82, 112, 259, 122, 51, 276, 251,
	252, 249, 261, 262, 250, 225, 29, 10, 278, 25,
	152, 21, 35, 106, 124, 85, 86, 155, 23, 153,
	75, 281, 19, 54, 11, 13, 282, 283, 14, 135,
	134, 97, 131, 49, 8, 118, 26, 94, 45, 284,
	28, 285, 286, 287, 288, 47, 95, 17, 253, 254,
	31, 289, 267, 159, 108, 52, 38, 79, 290, 291,
	73, 292, 76, 55, 77, 15, 50, 293, 294, 295,
	296, 96, 125, 258, 48, 297, 129, 6, 264, 30,
	151, 46, 298, 130, 84, 265, 266, 133, 74, 5,
	136, 32, 9, 53, 56, 255, 256, 257, 36, 83,
	12, 299, -179, 95, -170, -196, -62, 131, -62, 258,
	-125, 135, -125, -125, 130, -62, -196, -196, 122, 124,
	127, 55, -22, -62, -124, 135, -196, -124, -124, -124,
	-62, 119, -62, -196, 30, -122, 95, 12, 250, -196,
	164, 130, 165, 132, -144, -205, -133, -174, 131, 33,
	143, -144, 168, 169, -144, -120, -119, 231, 232, 226,
	230, 12, 169, 226, 167, -144, -35, -132, 64, -7,
	-2, -10, -9, -11, 87, -143, -143, 58, 78, 77,
	94, -47, -70, 97, 79, 95, 96, 81, 99, 98,
	109, 102, 103, 104, 105, 106, 107, 108, 100, 101,
	112, 87, 88, 89, 90, 91, 92, 93, -116, -205,
	-87, -205, 120, 121, -73, -73, -73, -73, -73, -73,
	-73, -73, -73, -73, -205, 119, -2, -82, -205, -205,
	-205, -205, -205, -205, -205, -205, -205, -91, -47, -205,
	-209, -79, -205, -209, -79, -209, -79, -209, -205, -209,
	-79, -209, -79, -209, -209, -79, -205, -205, -205, -205,
	-205, -205, -205, -206, 59, -100, 19, 31, -47, -96,
	-97, -47, -95, -2, -30, 38, -42, -44, -46, 42,
	43, 70, 11, -135, -134, 22, -132, 64, 119, -63,
	26, -62, -49, -50, -51, -52, -65, -87, -205, -62,
	-62, -56, -207, 58, 11, 56, -207, 58, 119, 58,
	174, -110, -112, -111, 240, 242, 87, -137, -132, 64,
	29, 30, 59, 58, -62, -149, -152, -154, -153, -155,
	-150, -151, 194, 195, 113, 198, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 30, 154, 190, 191,
	192, 193, 210, 211, 212, 213, 214, 215, 216, 217,
	177, 196, 269, 178, 179, 180, 181, 182, 183, 185,
	186, 187, 188, 189, -196, -144, 132, -196, 79, -196,
	-62, -62, -144, -144, -144, 166, 166, 130, 130, 171,
	-62, 58, 133, -56, 23, 55, -62, -196, -196, -139,
	-138, -130, -144, -122, 64, -47, -144, -144, -144, -62,
	-144, -144, -175, 11, 97, -144, -144, 11, -118, 11,
	97, -47, -123, 95, 55, 208, 357, 358, 359, -47,
	-47, -47, -80, 73, 79, 74, 75, -73, -81, -84,
	-87, 69, 97, 95, 96, 81, -73, -73, -73, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -145, -196, 64, -196, -72, -72, -132, -43, 21,
	35, -42, -133, -139, -130, -206, -206, -2, -42, -42,
	-47, -47, -88, 64, -42, -88, 64, -42, -42, -37,
	21, 35, -89, -90, 83, -88, -132, -138, -206, -73,
	-132, -132, -42, -43, -43, -42, -42, 9, 97, 58,
	18, 58, -98, 24, 25, -99, -206, -74, -132, 65,
	68, -48, 58, 11, -46, -62, -134, 104, -139, -103,
	160, -62, 30, 58, -58, -60, -59, -61, 45, 49,
	51, 46, 47, 48, 52, -142, 22, -49, -205, -141,
	160, -140, 22, -138, 64, -103, 56, -49, -62, -49,
	-64, -138, 104, -110, -112, 58, 241, 243, 244, 55,
	76, -47, -161, 112, -181, -182, -183, -133, 64, 65,
	-170, -171, -172, -184, 146, -189, 137, 139, 136, -173,
	147, 131, 28, 59, -166, 73, 79, -162, 222, -156,
	57, -156, -156, -156, -156, -160, 197, -160, -160, -160,
	57, 57, -156, -156, -156, -164, 57, -164, -164, -165,
	57, -165, -136, 56, -62, -144, 23, -144, -126, 127,
	124, 125, -192, 123, 219, 197, 71, 29, 15, 259,
	160, 274, -196, 161, -62, -62, -62, -62, -62, 127,
	124, -62, -62, -62, -144, -62, -62, -122, -138, -138,
	64, -62, 73, 74, 75, -81, -73, -73, -73, -41,
	155, 78, -206, -206, -42, -42, -205, 119, -206, -206,
	-206, 58, 56, 22, 11, 11, -206, 11, 11, -206,
	-206, -42, -92, -90, 85, -47, -206, 119, -206, 58,
	58, -206, -206, -206, -206, -206, 40, -47, -47, -97,
	-100, -114, 19, 11, 36, 36, -67, 12, -44, -49,
	-46, 119, -71, 30, 36, -2, -205, -205, -106, -109,
	-88, -50, -51, -51, -50, -51, 45, 45, 45, 50,
	45, 50, 45, -59, -138, -206, -66, 53, 134, 54,
	-205, -140, -67, -49, -67, -67, 119, -111, -113, 245,
	242, 248, -196, 64, 58, -183, 87, 57, -196, 28,
	-173, -173, -176, -196, -176, 28, -158, 29, 73, -163,
	223, 65, -160, -160, -161, 30, -161, -161, -161, -169,
	64, -169, 65, 65, 55, -132, -144, -143, -199, 142,
	138, 146, 147, 140, 60, 61, 62, 131, 28, 137,
	139, 160, 136, -199, -127, -128, 133, 22, 131, 28,
	160, -198, 56, 166, 219, 166, 133, -144, -118, -118,
	-41, 78, -73, -73, -206, -206, -43, -133, -148, 113,
	194, 154, 192, 188, 208, 199, 221, 190, 222, -145,
	-148, -73, -73, -73, -73, 268, -95, 86, -47, 84,
	-133, -73, -73, 41, -62, -93, 13, -47, 104, -105,
	55, -106, -83, -85, -84, -205, -2, -101, -132, -104,
	-132, -67, 58, 87, -54, -53, 55, 56, -55, 55,
	-53, 45, 45, 131, 131, 131, -104, -95, -67, 242,
	246, 247, -182, -183, -186, -185, -132, -189, -176, -176,
	57, -159, 55, -73, 59, -161, -161, -196, 113, 59,
	58, 59, 58, 59, 58, -62, -143, -143, -62, -143,
	-132, -195, 271, -197, -196, -132, -132, -132, -62, -122,
	-122, -73, -206, -206, -156, -156, -156, -165, -156, 182,
	-156, 182, -206, -206, 19, 19, 19, 19, -205, -40,
	264, -47, 58, 58, -94, 14, 16, 27, -105, 58,
	-206, -206, -206, 58, 119, -206, 58, -95, -109, -47,
	-47, 57, -47, -205, -205, -205, -206, -99, 59, 58,
	-156, -102, -132, -167, 219, 9, -160, 64, -160, 65,
	65, -144, 26, -194, -193, -133, 57, 56, -160, -196,
	-73, -73, -73, -73, -73, -99, 64, -73, -73, -47,
	-82, 28, -85, 36, -2, -205, -132, -132, -132, -99,
	-102, -102, -206, -102, -102, -141, -188, -187, 56, 141,
	71, -185, 59, 58, -168, 137, 28, 136, -76, -161,
	-161, 59, 59, -205, 58, 87, -102, -62, -206, -206,
	-206, -206, -39, 97, 271, -206, -206, -206, 9, -83,
	-2, 119, 59, -206, -206, -206, -66, -187, -196, -177,
	87, 64, 149, -132, -157, 71, 28, 28, -190, -191,
	160, -193, -183, 59, -206, 269, 52, 272, -106, -206,
	-132, 65, -62, 64, -206, 58, -132, -198, 41, 270,
	273, 57, -191, 36, -195, 41, -102, 162, 271, 59,
	163, 272, -201, -202, 55, -205, 273, -202, 55, 10,
	9, -73, 159, -200, 150, 145, 148, 30, -200, -206,
	-206, 144, 29, 73,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 606, 0, 348, 348, 348,
	348, 348, 348, 0, 678, 661, 0, 0, 0, 0,
	-2, 320, 321, 0, 323, 324, 325, 983, 983, 0,
	0, 983, 0, 0, 42, 43, 331, 332, 333, 981,
	1, 3, 614, 0, 0, 352, -2, 350, 0, 661,
	661, 0, 0, 71, 72, 0, 0, 0, 970, 0,
	659, 659, 659, 679, 680, 683, 684, 27, 28, 29,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 0, 0, 0, 0, 0, 662, 0, 657, 0,
	657, 657, 657, 0, 271, 430, 687, 688, 970, 0,
	0, 0, 311, 0, 984, 283, 0, 285, 984, 0,
	984, 0, 292, 0, 0, 298, 984, 303, 317, 318,
	305, 319, 322, 338, 0, 0, 330, 343, 344, 983,
	983, 347, 30, 480, 440, 0, 445, 447, 0, 482,
	483, 484, 485, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 513, 514, 515, 591, 592,
	593, 594, 595, 596, 597, 598, 449, 450, 588, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 549, 549, 549, 549, 549, 549, 549, 549,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 36,
	618, 0, 0, 606, 38, 0, 348, 353, 354, 0,
	0, -2, -2, 364, 370, 371, 372, 373, 349, 0,
	376, 380, 0, 0, 0, 0, 0, 0, 51, 53,
	430, 57, 0, 959, 642, -2, -2, 0, 0, 685,
	686, -2, 822, -2, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 0, 0, 90, 0, 88, 0, 984, 0,
	0, 0, 0, 0, 0, 984, 984, 984, 0, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 272, 984, 311, 275, 0, 0, 984, 984,
	984, 0, 984, 984, 282, 985, 986, 0, 192, 193,
	194, 286, 984, 984, 288, 0, 308, 306, 307, 300,
	301, 0, 314, 295, 296, 299, 341, 339, 340, 342,
	-2, 335, 336, 337, 0, 345, 346, 0, 0, 0,
	0, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 468, 469, 470, 471, 472, 473, 446, 0,
	460, 0, 0, 0, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 0, 361, 0, 36, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 358, 0, 580, 0,
	533, 541, 0, 534, 542, 535, 543, 536, 0, 537,
	544, 538, 545, 539, 540, 546, 0, 0, 0, 361,
	361, 0, 0, 37, 982, 31, 0, 0, 615, 607,
	608, 611, 614, 36, 363, 0, 385, 374, 365, 368,
	369, 351, 0, 377, 381, 0, 383, 384, 0, 55,
	0, 429, 0, 387, 389, 390, 391, -2, 0, 413,
	-2, 0, 0, 0, 49, 50, 0, 0, 0, 0,
	959, 643, 59, 60, 0, 0, 0, 168, 652, 653,
	654, 650, 217, 0, 0, 156, 152, 96, 97, 98,
	145, 100, 145, 145, 145, 145, 165, 165, 165, 165,
	128, 129, 130, 131, 132, 0, 0, 115, 145, 145,
	145, 119, 135, 136, 137, 138, 139, 140, 141, 142,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 147,
	147, 147, 149, 149, 681, 74, 0, 984, 0, 984,
	86, 0, 231, 233, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 658, 0, 984, 268, 269, 431,
	689, 690, 273, 274, 312, 313, 276, 277, 278, 279,
	280, 281, 0, 195, 196, 287, 291, 0, 311, 0,
	0, 293, 294, 0, 0, 326, 327, 328, 329, 481,
	441, 442, 444, 461, 0, 463, 465, 451, 452, 476,
	477, 478, 0, 0, 0, 0, 474, 456, 0, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 501, 564, 565, 0, 499, 500, 511, 0, 0,
	0, 362, 589, 0, -2, 479, 637, 36, 0, 0,
	0, 0, 484, 591, 0, 484, 591, 0, 0, 0,
	359, 360, 586, 583, 0, 0, 588, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 619, 0, 0,
	0, 0, 610, 612, 613, 618, 39, 0, 599, 0,
	0, 438, 0, 0, 366, 34, 382, 378, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 421, 0, 0, 0, 0, 412, 0, 0, 433,
	903, 414, 0, 416, 417, 438, 0, 438, 52, 438,
	54, 0, 432, 644, 58, 0, 0, 63, 64, 645,
	646, 647, 648, 0, 87, 218, 220, 223, 224, 225,
	91, 92, 93, 0, 0, 205, 0, 0, 199, 199,
	0, 197, 198, 89, 159, 157, 0, 154, 153, 99,
	0, 165, 165, 122, 123, 168, 0, 168, 168, 168,
	0, 0, 116, 117, 118, 110, 0, 111, 112, 113,
	0, 114, 0, 0, 984, 76, 660, 77, 983, 0,
	0, 673, 232, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 0, 78, 236, 238, 237, 241, 0,
	0, 0, 263, 984, 267, 308, 308, 290, 309, 310,
	315, 297, 462, 464, 466, 453, 474, 457, 0, 454,
	0, 0, 448, 516, 0, 0, 361, 0, -2, 520,
	521, 0, 0, 0, 0, 0, 557, 0, 0, 558,
	0, 606, 0, 584, 0, 0, 532, 0, 551, 0,
	0, 552, 553, 554, 555, 556, 0, 616, 617, 609,
	32, 0, 655, 656, 600, 601, 602, 0, 375, 386,
	367, 0, 631, 0, 0, -2, 0, 0, 438, 639,
	0, 388, 407, 409, 0, 404, 419, 420, 422, 0,
	424, 0, 426, 427, 392, 394, 395, 0, 0, 0,
	0, 415, 606, 438, 47, 48, 0, 61, 62, 0,
	0, 68, 169, 170, 0, 221, 0, 0, 0, 187,
	199, 199, 190, 200, 191, 0, 161, 0, 158, 95,
	155, 0, 168, 168, 124, 0, 125, 126, 127, 0,
	143, 0, 0, 0, 0, 682, 75, 226, 983, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 983, 0, 983, 674, 675, 676, 677,
	0, 81, 0, 0, 0, 0, 0, 266, 311, 311,
	455, 0, 475, 458, 517, 518, 0, 590, 0, 145,
	145, 569, 145, 149, 572, 145, 574, 145, 577, 0,
	0, 0, 0, 0, 0, 0, 581, 531, 587, 0,
	589, 0, 0, 620, 33, 604, 0, 439, 379, 40,
	0, 631, 621, 633, 635, 0, 36, 0, 627, 0,
	399, 606, 0, 0, 401, 408, 0, 0, 402, 0,
	403, 423, 425, 0, 0, 0, 0, 614, 46, 65,
	66, 67, 219, 222, 0, 201, 145, 204, 188, 189,
	0, 163, 0, 160, 146, 120, 121, 166, 167, 165,
	0, 165, 0, 150, 0, 984, 227, 228, 229, 230,
	0, 235, 0, 79, 80, 0, 0, 240, 264, 284,
	289, 459, 519, 522, 566, 165, 570, 571, 573, 575,
	576, 578, 524, 523, 0, 0, 0, 0, 0, 614,
	0, 585, 0, 0, 35, 0, 0, 0, 41, 0,
	636, -2, 0, 0, 0, 56, 0, 614, 640, 641,
	405, 0, 410, 0, 0, 0, 413, 45, 179, 0,
	203, 0, 397, 171, 164, 0, 168, 144, 168, 0,
	0, 73, 0, 82, 83, 0, 0, 0, 567, 568,
	0, 0, 0, 0, 559, 0, 582, 0, 0, 605,
	603, 0, 634, 0, -2, 0, 629, 628, 400, 44,
	0, 0, 435, 0, 0, 433, 178, 180, 0, 185,
	0, 202, 0, 0, 176, 0, 173, 175, 162, 133,
	134, 148, 151, 0, 0, 0, 0, 242, 525, 527,
	526, 528, 0, 0, 0, 530, 547, 548, 0, 624,
	36, 0, 406, 434, 436, 437, 396, 181, 182, 0,
	186, 184, 0, 398, 94, 0, 172, 174, 0, 258,
	0, 84, 85, 78, 529, 0, 0, 0, 632, -2,
	630, 183, 0, 177, 257, 0, 0, 81, 560, 0,
	563, 0, 259, 0, 239, 561, 0, 0, 0, 206,
	0, 0, 207, 208, 0, 0, 562, 209, 0, 0,
	0, 0, 0, 210, 212, 213, 0, 0, 211, 260,
	261, 214, 215, 216,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	57, 59, 104, 102, 58, 103, 119, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 360,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:423
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:429
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:433
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:443
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:450
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:462
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:474
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:512
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:516
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:531
		{
			yyVAL.partitions = nil
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:535
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:547
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:561
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:567
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:571
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:575
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = RepeatableRead
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = ReadCommitted
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:589
		{
			yyVAL.str = ReadUncommitted
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = Serializable
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:599
		{
			yyVAL.str = SessionStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:603
		{
			yyVAL.str = GlobalStr
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:620
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:642
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:652
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:657
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:662
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:679
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:685
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:692
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:703
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:714
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:718
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:728
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.sqlVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:973
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:991
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = nil
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.colKeyOpt = colKey
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1105
		{
			yyVAL.sqlVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1115
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1216
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1230
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1253
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 207:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1257
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1261
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 209:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1265
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1277
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1299
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.str = yyDollar[1].str
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1324
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1328
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1334
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1360
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1365
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1472
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1488
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1492
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1504
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1508
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1524
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1529
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1567
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1572
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1610
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1631
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1636
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1658
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = "extended "
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = "full "
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1749
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1763
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = SessionStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.str = GlobalStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.statement = &Begin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Commit{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &Rollback{}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = JSONStr
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = TreeStr
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = VitessStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = TraditionalStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = AnalyzeStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1848
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1858
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.statement = &OtherRead{}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1921
		{
			setAllowComments(yylex, true)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1931
		{
			yyVAL.bytes2 = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = UnionStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = UnionAllStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1949
		{
			yyVAL.str = UnionDistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = SQLCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.str = DistinctStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1980
		{
			yyVAL.selectExprs = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1989
		{
			yyVAL.strs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1997
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = SQLCacheStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = DistinctStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = DistinctStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = StraightJoinHint
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2041
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2059
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2064
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2084
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2132
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2165
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2169
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2173
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2185
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2189
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2195
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2200
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2205
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = JoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = JoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = StraightJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.str = LeftJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.str = LeftJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.str = RightJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = RightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = NaturalJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2303
		{
			yyVAL.indexHints = nil
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2307
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2311
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2315
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2319
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2426
		{
			yyVAL.str = IsNullStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.str = IsNotNullStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = IsTrueStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = IsNotTrueStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2442
		{
			yyVAL.str = IsFalseStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.str = IsNotFalseStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = EqualStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2456
		{
			yyVAL.str = LessThanStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.str = GreaterThanStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = LessEqualStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2468
		{
			yyVAL.str = GreaterEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.str = NotEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2499
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2515
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2629
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2869
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.str = BooleanModeStr
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2877
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2881
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.str = QueryExpansionStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2891
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.expr = nil
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = string("")
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2969
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2985
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3004
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3008
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &NullVal{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3066
		{
			yyVAL.exprs = nil
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3084
		{
			yyVAL.orderBy = nil
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.str = AscScr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.str = AscScr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.str = DescScr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3122
		{
			yyVAL.limit = nil
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3130
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3134
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3139
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.str = ForUpdateStr
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3147
		{
			yyVAL.str = ShareModeStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3160
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3173
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3177
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3181
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3200
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			yyVAL.updateExprs = nil
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3209
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3219
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3229
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3271
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3276
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3282
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3286
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3290
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3294
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3301
		{
			yyVAL.bytes = []byte("charset")
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.expr = &Default{}
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3325
		{
			yyVAL.byt = 0
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.byt = 1
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3330
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3335
		{
			yyVAL.str = ""
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			yyVAL.str = IgnoreStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3341
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3353
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3362
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3375
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3382
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3384
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3732
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3741
		{
			decNesting(yylex)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3746
		{
			skipToEnd(yylex)
		}
	case 984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3751
		{
			skipToEnd(yylex)
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3755
		{
			skipToEnd(yylex)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
