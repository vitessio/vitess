//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const PRIMARY = 57449
const SHOW = 57450
const DESCRIBE = 57451
const EXPLAIN = 57452
const DATE = 57453
const ESCAPE = 57454
const REPAIR = 57455
const OPTIMIZE = 57456
const TRUNCATE = 57457
const MAXVALUE = 57458
const PARTITION = 57459
const REORGANIZE = 57460
const LESS = 57461
const THAN = 57462
const PROCEDURE = 57463
const TRIGGER = 57464
const VINDEX = 57465
const VINDEXES = 57466
const STATUS = 57467
const VARIABLES = 57468
const BIT = 57469
const TINYINT = 57470
const SMALLINT = 57471
const MEDIUMINT = 57472
const INT = 57473
const INTEGER = 57474
const BIGINT = 57475
const INTNUM = 57476
const REAL = 57477
const DOUBLE = 57478
const FLOAT_TYPE = 57479
const DECIMAL = 57480
const NUMERIC = 57481
const TIME = 57482
const TIMESTAMP = 57483
const DATETIME = 57484
const YEAR = 57485
const CHAR = 57486
const VARCHAR = 57487
const BOOL = 57488
const CHARACTER = 57489
const VARBINARY = 57490
const NCHAR = 57491
const TEXT = 57492
const TINYTEXT = 57493
const MEDIUMTEXT = 57494
const LONGTEXT = 57495
const BLOB = 57496
const TINYBLOB = 57497
const MEDIUMBLOB = 57498
const LONGBLOB = 57499
const JSON = 57500
const ENUM = 57501
const NULLX = 57502
const AUTO_INCREMENT = 57503
const APPROXNUM = 57504
const SIGNED = 57505
const UNSIGNED = 57506
const ZEROFILL = 57507
const DATABASES = 57508
const TABLES = 57509
const VITESS_KEYSPACES = 57510
const VITESS_SHARDS = 57511
const VITESS_TABLETS = 57512
const VSCHEMA_TABLES = 57513
const NAMES = 57514
const CHARSET = 57515
const GLOBAL = 57516
const SESSION = 57517
const CURRENT_TIMESTAMP = 57518
const DATABASE = 57519
const CURRENT_DATE = 57520
const CURRENT_TIME = 57521
const LOCALTIME = 57522
const LOCALTIMESTAMP = 57523
const UTC_DATE = 57524
const UTC_TIME = 57525
const UTC_TIMESTAMP = 57526
const REPLACE = 57527
const CONVERT = 57528
const CAST = 57529
const GROUP_CONCAT = 57530
const SEPARATOR = 57531
const MATCH = 57532
const AGAINST = 57533
const BOOLEAN = 57534
const LANGUAGE = 57535
const WITH = 57536
const QUERY = 57537
const EXPANSION = 57538
const UNUSED = 57539

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 24,
	-2, 4,
	-1, 197,
	109, 498,
	-2, 494,
	-1, 198,
	109, 499,
	-2, 495,
	-1, 265,
	80, 633,
	109, 633,
	-2, 49,
	-1, 266,
	80, 607,
	109, 607,
	-2, 50,
	-1, 267,
	80, 597,
	109, 597,
	-2, 44,
	-1, 269,
	80, 621,
	109, 621,
	-2, 46,
	-1, 629,
	109, 501,
	-2, 497,
	-1, 808,
	5, 25,
	-2, 322,
	-1, 828,
	5, 24,
	-2, 445,
	-1, 992,
	5, 25,
	-2, 446,
	-1, 1027,
	5, 24,
	-2, 448,
	-1, 1072,
	5, 25,
	-2, 449,
}

const yyPrivate = 57344

const yyLast = 8292

var yyAct = [...]int{

	228, 40, 1063, 922, 470, 227, 944, 202, 261, 758,
	469, 3, 923, 998, 703, 515, 176, 719, 919, 513,
	170, 831, 845, 654, 718, 901, 800, 661, 834, 742,
	755, 664, 728, 676, 403, 46, 631, 409, 274, 502,
	415, 40, 751, 684, 517, 251, 301, 716, 200, 181,
	303, 175, 423, 299, 866, 256, 185, 171, 172, 173,
	174, 45, 1089, 1080, 270, 736, 663, 1087, 1070, 1085,
	1079, 914, 482, 986, 250, 278, 1043, 264, 862, 735,
	294, 1010, 1020, 50, 189, 743, 981, 771, 979, 1084,
	1069, 949, 950, 951, 395, 396, 1086, 1064, 886, 685,
	952, 769, 285, 280, 139, 52, 53, 54, 55, 56,
	284, 730, 138, 252, 139, 580, 436, 435, 445, 446,
	438, 439, 440, 441, 442, 443, 444, 437, 775, 1041,
	447, 704, 706, 141, 142, 143, 575, 768, 844, 856,
	843, 296, 867, 298, 204, 842, 276, 281, 150, 140,
	459, 460, 1056, 195, 801, 300, 300, 300, 300, 995,
	300, 300, 295, 297, 849, 794, 603, 300, 1051, 436,
	435, 445, 446, 438, 439, 440, 441, 442, 443, 444,
	437, 447, 40, 447, 533, 765, 770, 763, 427, 289,
	743, 437, 412, 600, 447, 421, 420, 456, 422, 255,
	458, 729, 958, 705, 532, 420, 773, 776, 916, 392,
	393, 394, 422, 397, 398, 411, 677, 677, 293, 818,
	400, 422, 577, 860, 1042, 1040, 953, 468, 730, 472,
	473, 474, 475, 476, 477, 478, 767, 481, 483, 483,
	483, 483, 483, 483, 483, 483, 491, 492, 493, 494,
	766, 1068, 959, 638, 287, 732, 275, 514, 1059, 417,
	733, 20, 21, 41, 23, 24, 413, 636, 637, 635,
	270, 527, 1014, 1013, 198, 772, 883, 43, 300, 655,
	35, 656, 885, 300, 875, 25, 774, 634, 874, 1052,
	863, 1074, 300, 300, 300, 300, 300, 300, 300, 300,
	1023, 1012, 66, 873, 34, 957, 148, 946, 43, 148,
	529, 484, 485, 486, 487, 488, 489, 490, 729, 857,
	621, 623, 624, 727, 726, 622, 421, 420, 813, 148,
	148, 574, 657, 918, 573, 148, 579, 585, 226, 291,
	587, 1076, 402, 422, 457, 588, 589, 590, 591, 592,
	593, 594, 595, 791, 792, 793, 1031, 402, 402, 461,
	462, 463, 464, 465, 466, 467, 64, 27, 28, 30,
	29, 32, 884, 286, 882, 275, 421, 420, 1031, 1032,
	33, 36, 37, 1007, 1006, 38, 39, 31, 939, 402,
	994, 402, 1045, 422, 1044, 271, 300, 300, 964, 963,
	954, 255, 445, 446, 438, 439, 440, 441, 442, 443,
	444, 437, 526, 148, 447, 148, 902, 606, 607, 148,
	832, 812, 666, 811, 990, 148, 961, 960, 608, 66,
	66, 66, 66, 47, 66, 66, 632, 499, 904, 421,
	420, 66, 832, 440, 441, 442, 443, 444, 437, 596,
	597, 447, 806, 402, 499, 402, 422, 42, 962, 40,
	850, 401, 499, 421, 420, 906, 66, 910, 498, 905,
	610, 903, 806, 472, 628, 627, 908, 625, 629, 891,
	422, 666, 402, 668, 526, 907, 535, 534, 20, 20,
	909, 911, 499, 302, 302, 302, 302, 806, 302, 302,
	256, 256, 256, 256, 256, 302, 270, 687, 658, 659,
	524, 920, 604, 826, 526, 514, 827, 707, 43, 674,
	681, 759, 806, 256, 148, 668, 737, 756, 137, 182,
	425, 148, 148, 148, 270, 43, 43, 933, 66, 853,
	669, 670, 710, 752, 673, 688, 835, 836, 691, 713,
	700, 525, 66, 523, 148, 747, 148, 66, 680, 148,
	682, 683, 148, 708, 148, 709, 66, 66, 66, 66,
	66, 66, 66, 66, 723, 633, 43, 744, 745, 746,
	715, 720, 249, 630, 629, 300, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 271, 302, 757, 712, 58, 948, 920, 738, 739,
	740, 741, 753, 754, 689, 690, 302, 692, 876, 838,
	583, 302, 20, 748, 749, 750, 399, 602, 18, 795,
	302, 302, 302, 302, 302, 302, 302, 302, 779, 616,
	841, 632, 783, 784, 255, 255, 255, 255, 255, 1026,
	628, 697, 695, 840, 629, 694, 698, 696, 699, 255,
	508, 509, 693, 601, 186, 187, 1083, 255, 1078, 43,
	66, 66, 796, 888, 148, 780, 1082, 180, 416, 421,
	420, 789, 790, 788, 868, 829, 830, 1061, 531, 66,
	292, 859, 414, 148, 1060, 828, 422, 1024, 854, 66,
	438, 439, 440, 441, 442, 443, 444, 437, 988, 817,
	447, 404, 217, 216, 219, 220, 221, 222, 761, 1016,
	839, 218, 223, 405, 582, 787, 512, 183, 184, 805,
	416, 847, 848, 786, 302, 302, 851, 177, 1049, 178,
	47, 815, 66, 1048, 504, 507, 508, 509, 505, 1018,
	506, 510, 832, 612, 835, 836, 66, 418, 1053, 1011,
	855, 300, 599, 425, 49, 720, 302, 51, 864, 865,
	522, 148, 44, 1, 148, 148, 148, 148, 148, 300,
	633, 764, 1062, 879, 943, 725, 148, 717, 273, 148,
	797, 798, 799, 148, 57, 724, 872, 148, 148, 869,
	870, 871, 1039, 1009, 731, 861, 660, 734, 947, 66,
	1058, 858, 538, 539, 878, 504, 507, 508, 509, 505,
	678, 506, 510, 894, 895, 537, 541, 540, 925, 536,
	40, 158, 887, 924, 270, 921, 912, 271, 900, 913,
	926, 893, 262, 935, 936, 937, 511, 528, 419, 59,
	148, 915, 881, 929, 880, 148, 762, 279, 148, 66,
	455, 785, 263, 927, 191, 271, 605, 930, 408, 1047,
	942, 1017, 302, 302, 609, 941, 816, 479, 675, 203,
	620, 215, 212, 940, 214, 213, 611, 825, 429, 201,
	193, 254, 256, 495, 503, 501, 893, 720, 500, 720,
	259, 837, 967, 833, 253, 890, 985, 1050, 615, 22,
	48, 970, 969, 188, 17, 984, 16, 15, 14, 955,
	956, 26, 13, 302, 12, 11, 10, 9, 8, 7,
	6, 665, 667, 5, 4, 179, 19, 977, 2, 0,
	989, 0, 302, 0, 0, 679, 0, 997, 0, 1000,
	1001, 1002, 0, 0, 1003, 897, 898, 1005, 0, 851,
	0, 0, 0, 0, 0, 0, 300, 0, 974, 975,
	0, 976, 0, 0, 978, 702, 980, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 720, 0,
	0, 925, 0, 66, 1028, 0, 924, 0, 0, 0,
	0, 0, 0, 1025, 1027, 1019, 0, 0, 0, 0,
	0, 1008, 0, 0, 1038, 0, 1037, 1046, 1036, 1015,
	0, 0, 0, 0, 0, 0, 0, 925, 0, 40,
	1054, 0, 924, 0, 66, 66, 255, 0, 0, 1055,
	0, 0, 406, 410, 0, 0, 846, 0, 0, 0,
	972, 0, 0, 66, 1066, 0, 0, 302, 0, 428,
	148, 270, 1071, 0, 0, 0, 0, 156, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 166, 0, 471, 0, 0, 0, 0, 877, 302,
	480, 0, 0, 0, 66, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 302, 0, 803,
	0, 0, 0, 804, 66, 66, 0, 66, 66, 0,
	808, 809, 810, 302, 0, 814, 0, 0, 1021, 0,
	820, 151, 821, 822, 823, 824, 145, 153, 407, 0,
	0, 148, 159, 155, 0, 148, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 271, 148, 0, 928, 846,
	260, 0, 0, 157, 0, 277, 161, 0, 0, 0,
	146, 0, 0, 169, 0, 0, 0, 0, 302, 302,
	0, 302, 945, 0, 0, 0, 0, 0, 0, 152,
	0, 192, 0, 146, 146, 272, 0, 0, 66, 146,
	66, 66, 66, 148, 66, 0, 66, 0, 154, 160,
	162, 163, 164, 165, 0, 968, 168, 167, 435, 445,
	446, 438, 439, 440, 441, 442, 443, 444, 437, 0,
	66, 447, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 0, 283, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 290, 0, 899, 0, 66,
	66, 0, 999, 402, 999, 999, 999, 0, 1004, 0,
	302, 0, 66, 0, 0, 618, 619, 146, 0, 146,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 302, 0, 66, 938, 0, 436,
	435, 445, 446, 438, 439, 440, 441, 442, 443, 444,
	437, 0, 0, 447, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 1029, 1030, 0, 0, 471, 0, 66,
	671, 672, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 973, 497, 0, 0, 0, 0, 0,
	1057, 0, 0, 521, 982, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 992, 993,
	0, 996, 271, 896, 576, 1073, 578, 714, 146, 581,
	0, 0, 584, 1077, 0, 146, 519, 146, 0, 0,
	0, 272, 0, 436, 435, 445, 446, 438, 439, 440,
	441, 442, 443, 444, 437, 0, 0, 447, 146, 0,
	146, 0, 544, 146, 0, 0, 146, 0, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 1033, 1034, 1035, 0, 781, 782, 0, 410,
	561, 562, 563, 564, 565, 566, 567, 0, 568, 569,
	570, 571, 572, 557, 558, 559, 560, 542, 543, 0,
	0, 545, 0, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 598, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 807, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 1092, 1093, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 434, 0, 0, 0, 146, 0, 448,
	449, 450, 451, 452, 453, 454, 586, 432, 433, 430,
	436, 435, 445, 446, 438, 439, 440, 441, 442, 443,
	444, 437, 0, 0, 447, 436, 435, 445, 446, 438,
	439, 440, 441, 442, 443, 444, 437, 0, 0, 447,
	0, 686, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 192, 192, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	192, 192, 192, 192, 0, 146, 0, 272, 146, 146,
	146, 146, 146, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 146, 0, 0, 0, 519, 0, 0,
	0, 146, 146, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 586, 917, 802, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 777, 0, 931, 778, 0,
	932, 0, 0, 934, 436, 435, 445, 446, 438, 439,
	440, 441, 442, 443, 444, 437, 0, 0, 447, 0,
	0, 0, 0, 0, 146, 101, 0, 0, 0, 146,
	0, 0, 146, 0, 80, 0, 0, 0, 0, 88,
	0, 90, 0, 0, 111, 97, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 192, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 436, 435,
	445, 446, 438, 439, 440, 441, 442, 443, 444, 437,
	0, 192, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 149, 0, 0, 0,
	0, 104, 0, 0, 0, 76, 0, 109, 102, 0,
	0, 103, 108, 91, 116, 105, 122, 128, 129, 114,
	127, 69, 120, 113, 95, 85, 86, 68, 0, 107,
	79, 83, 78, 100, 117, 118, 77, 135, 72, 126,
	71, 73, 125, 99, 115, 121, 96, 93, 70, 119,
	94, 92, 87, 81, 0, 0, 0, 112, 123, 136,
	0, 0, 130, 131, 132, 133, 98, 74, 84, 110,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 471, 67, 0, 89, 134, 106,
	82, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 519, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 65, 0, 721,
	722, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 852, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 272, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 65, 0, 721,
	722, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 43, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 892, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 626, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 65, 0, 530,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 381, 371, 0, 344,
	383, 322, 336, 391, 337, 338, 365, 310, 352, 101,
	334, 0, 325, 305, 331, 306, 323, 346, 80, 349,
	321, 373, 355, 88, 389, 90, 360, 0, 111, 97,
	0, 0, 348, 375, 350, 370, 343, 366, 315, 359,
	384, 335, 363, 385, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 362, 380,
	333, 364, 304, 361, 0, 308, 311, 390, 378, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 347, 351,
	367, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 358, 0, 0, 0, 312, 309, 0, 345,
	0, 0, 0, 314, 0, 327, 368, 0, 376, 342,
	149, 379, 340, 339, 382, 104, 374, 324, 332, 76,
	330, 109, 102, 0, 357, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 307,
	0, 112, 123, 136, 320, 377, 130, 131, 132, 133,
	98, 74, 84, 110, 318, 319, 316, 317, 353, 354,
	386, 387, 388, 369, 313, 0, 0, 372, 356, 67,
	0, 89, 134, 106, 82, 124, 101, 0, 0, 662,
	0, 199, 0, 0, 0, 80, 0, 196, 0, 0,
	88, 236, 90, 0, 0, 111, 97, 0, 0, 0,
	0, 229, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 197, 217, 216, 219, 220, 221,
	222, 0, 0, 75, 218, 223, 224, 225, 0, 0,
	194, 210, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 190, 0, 0, 0, 247,
	0, 209, 0, 0, 205, 206, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	245, 0, 104, 0, 0, 0, 76, 0, 109, 102,
	0, 0, 103, 108, 91, 116, 105, 122, 128, 129,
	114, 127, 69, 120, 113, 95, 85, 86, 68, 0,
	107, 79, 83, 78, 100, 117, 118, 77, 135, 72,
	126, 71, 73, 125, 99, 115, 121, 96, 93, 70,
	119, 94, 92, 87, 81, 0, 0, 0, 112, 123,
	136, 0, 0, 130, 131, 132, 133, 98, 74, 84,
	110, 237, 246, 243, 244, 241, 242, 240, 239, 238,
	248, 231, 232, 234, 0, 233, 67, 0, 89, 134,
	106, 82, 124, 101, 0, 0, 0, 0, 199, 0,
	0, 0, 80, 0, 196, 0, 0, 88, 236, 90,
	0, 0, 111, 97, 0, 0, 0, 0, 229, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	402, 197, 217, 216, 219, 220, 221, 222, 0, 0,
	75, 218, 223, 224, 225, 0, 0, 194, 210, 0,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 0, 0, 0, 0, 247, 0, 209, 0,
	0, 205, 206, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 245, 0, 104,
	0, 0, 0, 76, 0, 109, 102, 0, 0, 103,
	108, 91, 116, 105, 122, 128, 129, 114, 127, 69,
	120, 113, 95, 85, 86, 68, 0, 107, 79, 83,
	78, 100, 117, 118, 77, 135, 72, 126, 71, 73,
	125, 99, 115, 121, 96, 93, 70, 119, 94, 92,
	87, 81, 0, 0, 0, 112, 123, 136, 0, 0,
	130, 131, 132, 133, 98, 74, 84, 110, 237, 246,
	243, 244, 241, 242, 240, 239, 238, 248, 231, 232,
	234, 0, 233, 67, 0, 89, 134, 106, 82, 124,
	101, 0, 0, 0, 0, 199, 0, 0, 0, 80,
	0, 196, 0, 0, 88, 236, 90, 0, 0, 111,
	97, 0, 0, 0, 0, 229, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 197, 217,
	216, 219, 220, 221, 222, 0, 0, 75, 218, 223,
	224, 225, 0, 0, 194, 210, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 190,
	0, 0, 0, 247, 0, 209, 0, 0, 205, 206,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 245, 0, 104, 0, 0, 0,
	76, 0, 109, 102, 0, 0, 103, 108, 91, 116,
	105, 122, 128, 129, 114, 127, 69, 120, 113, 95,
	85, 86, 68, 0, 107, 79, 83, 78, 100, 117,
	118, 77, 135, 72, 126, 71, 73, 125, 99, 115,
	121, 96, 93, 70, 119, 94, 92, 87, 81, 0,
	0, 0, 112, 123, 136, 0, 0, 130, 131, 132,
	133, 98, 74, 84, 110, 237, 246, 243, 244, 241,
	242, 240, 239, 238, 248, 231, 232, 234, 20, 233,
	67, 0, 89, 134, 106, 82, 124, 0, 0, 0,
	101, 0, 0, 0, 0, 199, 0, 0, 0, 80,
	0, 196, 0, 0, 88, 236, 90, 0, 0, 111,
	97, 0, 0, 0, 0, 229, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 197, 217,
	216, 219, 220, 221, 222, 0, 0, 75, 218, 223,
	224, 225, 0, 0, 194, 210, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 0,
	0, 0, 0, 247, 0, 209, 0, 0, 205, 206,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 245, 0, 104, 0, 0, 0,
	76, 0, 109, 102, 0, 0, 103, 108, 91, 116,
	105, 122, 128, 129, 114, 127, 69, 120, 113, 95,
	85, 86, 68, 0, 107, 79, 83, 78, 100, 117,
	118, 77, 135, 72, 126, 71, 73, 125, 99, 115,
	121, 96, 93, 70, 119, 94, 92, 87, 81, 0,
	0, 0, 112, 123, 136, 0, 0, 130, 131, 132,
	133, 98, 74, 84, 110, 237, 246, 243, 244, 241,
	242, 240, 239, 238, 248, 231, 232, 234, 0, 233,
	67, 0, 89, 134, 106, 82, 124, 101, 0, 0,
	0, 0, 199, 0, 0, 0, 80, 0, 196, 0,
	0, 88, 236, 90, 0, 0, 111, 97, 0, 0,
	0, 0, 229, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 197, 217, 216, 219, 220,
	221, 222, 0, 0, 75, 218, 223, 224, 225, 0,
	0, 194, 210, 0, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 0, 0, 0, 0,
	247, 0, 209, 0, 0, 205, 206, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 245, 0, 104, 0, 0, 0, 76, 0, 109,
	102, 0, 0, 103, 108, 91, 116, 105, 122, 128,
	129, 114, 127, 69, 120, 113, 95, 85, 86, 68,
	0, 107, 79, 83, 78, 100, 117, 118, 77, 135,
	72, 126, 71, 73, 125, 99, 115, 121, 96, 93,
	70, 119, 94, 92, 87, 81, 0, 0, 0, 112,
	123, 136, 0, 0, 130, 131, 132, 133, 98, 74,
	84, 110, 237, 246, 243, 244, 241, 242, 240, 239,
	238, 248, 231, 232, 234, 101, 233, 67, 0, 89,
	134, 106, 82, 124, 80, 0, 0, 0, 0, 88,
	236, 90, 0, 0, 111, 97, 0, 0, 0, 0,
	229, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 197, 217, 216, 219, 220, 221, 222,
	0, 0, 75, 218, 223, 224, 225, 0, 0, 0,
	210, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 0, 0, 0, 0, 247, 0,
	209, 0, 0, 205, 206, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 245,
	0, 104, 0, 0, 0, 76, 0, 109, 102, 0,
	1091, 103, 108, 91, 116, 105, 122, 128, 129, 114,
	127, 69, 120, 113, 95, 85, 86, 68, 0, 107,
	79, 83, 78, 100, 117, 118, 77, 135, 72, 126,
	71, 73, 125, 99, 115, 121, 96, 93, 70, 119,
	94, 92, 87, 81, 0, 0, 0, 112, 123, 136,
	0, 0, 130, 131, 132, 133, 98, 74, 84, 110,
	237, 246, 243, 244, 241, 242, 240, 239, 238, 248,
	231, 232, 234, 101, 233, 67, 0, 89, 134, 106,
	82, 124, 80, 0, 0, 0, 0, 88, 236, 90,
	0, 0, 111, 97, 0, 0, 0, 0, 229, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 197, 217, 216, 219, 220, 221, 222, 0, 0,
	75, 218, 223, 224, 225, 0, 0, 0, 210, 0,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 0, 0, 0, 0, 247, 0, 209, 0,
	0, 205, 206, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 245, 0, 104,
	0, 0, 0, 76, 0, 109, 102, 0, 0, 103,
	108, 91, 116, 105, 122, 128, 129, 114, 127, 69,
	120, 113, 95, 85, 86, 68, 0, 107, 79, 83,
	78, 100, 117, 118, 77, 135, 72, 126, 71, 73,
	125, 99, 115, 121, 96, 93, 70, 119, 94, 92,
	87, 81, 0, 0, 0, 112, 123, 136, 0, 0,
	130, 131, 132, 133, 98, 74, 84, 110, 237, 246,
	243, 244, 241, 242, 240, 239, 238, 248, 231, 232,
	234, 0, 233, 67, 0, 89, 134, 106, 82, 124,
	101, 0, 0, 0, 424, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 88, 0, 90, 0, 0, 111,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	426, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 421, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 104, 0, 0, 0,
	76, 0, 109, 102, 0, 0, 103, 108, 91, 116,
	105, 122, 128, 129, 114, 127, 69, 120, 113, 95,
	85, 86, 68, 0, 107, 79, 83, 78, 100, 117,
	118, 77, 135, 72, 126, 71, 73, 125, 99, 115,
	121, 96, 93, 70, 119, 94, 92, 87, 81, 0,
	0, 0, 112, 123, 136, 0, 101, 130, 131, 132,
	133, 98, 74, 84, 110, 80, 0, 0, 0, 0,
	88, 0, 90, 0, 0, 111, 97, 0, 0, 0,
	67, 0, 89, 134, 106, 82, 124, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 60, 0, 0,
	0, 63, 104, 0, 0, 0, 76, 0, 109, 102,
	0, 0, 103, 108, 91, 116, 105, 122, 128, 129,
	114, 127, 69, 120, 113, 95, 85, 86, 68, 0,
	107, 79, 83, 78, 100, 117, 118, 77, 135, 72,
	126, 71, 73, 125, 99, 115, 121, 96, 93, 70,
	119, 94, 92, 87, 81, 0, 0, 0, 112, 123,
	136, 0, 0, 130, 131, 132, 133, 98, 74, 84,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 89, 134,
	106, 82, 124, 101, 0, 0, 0, 518, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 88, 0, 90,
	0, 0, 111, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 520, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 104,
	0, 0, 0, 76, 0, 109, 102, 0, 0, 103,
	108, 91, 116, 105, 122, 128, 129, 114, 127, 69,
	120, 113, 95, 85, 86, 68, 0, 107, 79, 83,
	78, 100, 117, 118, 77, 135, 72, 126, 71, 73,
	125, 99, 115, 121, 96, 93, 70, 119, 94, 92,
	87, 81, 0, 0, 0, 112, 123, 136, 0, 0,
	130, 131, 132, 133, 98, 74, 84, 110, 0, 20,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 67, 0, 89, 134, 106, 82, 124,
	80, 0, 0, 0, 0, 88, 0, 90, 0, 0,
	111, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 104, 0, 0,
	0, 76, 0, 109, 102, 0, 0, 103, 108, 91,
	116, 105, 122, 128, 129, 114, 127, 69, 120, 113,
	95, 85, 86, 68, 0, 107, 79, 83, 78, 100,
	117, 118, 77, 135, 72, 126, 71, 73, 125, 99,
	115, 121, 96, 93, 70, 119, 94, 92, 87, 81,
	0, 0, 0, 112, 123, 136, 0, 0, 130, 131,
	132, 133, 98, 74, 84, 110, 0, 20, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 67, 0, 89, 134, 106, 82, 124, 80, 0,
	0, 0, 0, 88, 0, 90, 0, 0, 111, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 104, 0, 0, 0, 76,
	0, 109, 102, 0, 0, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 0,
	0, 112, 123, 136, 0, 101, 130, 131, 132, 133,
	98, 74, 84, 110, 80, 0, 0, 0, 0, 88,
	0, 90, 0, 0, 111, 97, 0, 0, 0, 67,
	0, 89, 134, 106, 82, 124, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 613, 0, 0, 614,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 104, 0, 0, 0, 76, 0, 109, 102, 0,
	0, 103, 108, 91, 116, 105, 122, 128, 129, 114,
	127, 69, 120, 113, 95, 85, 86, 68, 0, 107,
	79, 83, 78, 100, 117, 118, 77, 135, 72, 126,
	71, 73, 125, 99, 115, 121, 96, 93, 70, 119,
	94, 92, 87, 81, 0, 0, 0, 112, 123, 136,
	0, 0, 130, 131, 132, 133, 98, 74, 84, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 89, 134, 106,
	82, 124, 101, 0, 0, 0, 518, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 88, 0, 90, 0,
	0, 111, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 520, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 104, 0,
	0, 0, 76, 0, 109, 102, 0, 0, 516, 108,
	91, 116, 105, 122, 128, 129, 114, 127, 69, 120,
	113, 95, 85, 86, 68, 0, 107, 79, 83, 78,
	100, 117, 118, 77, 135, 72, 126, 71, 73, 125,
	99, 115, 121, 96, 93, 70, 119, 94, 92, 87,
	81, 0, 0, 0, 112, 123, 136, 0, 101, 130,
	131, 132, 133, 98, 74, 84, 110, 80, 0, 0,
	0, 0, 88, 0, 90, 0, 0, 111, 97, 0,
	0, 0, 67, 0, 89, 134, 106, 82, 124, 0,
	0, 0, 0, 43, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 104, 0, 0, 0, 76, 0,
	109, 102, 0, 0, 103, 108, 91, 116, 105, 122,
	128, 129, 114, 127, 69, 120, 113, 95, 85, 86,
	68, 0, 107, 79, 83, 78, 100, 117, 118, 77,
	135, 72, 126, 71, 73, 125, 99, 115, 121, 96,
	93, 70, 119, 94, 92, 87, 81, 0, 0, 0,
	112, 123, 136, 0, 101, 130, 131, 132, 133, 98,
	74, 84, 110, 80, 0, 0, 0, 0, 88, 0,
	90, 0, 0, 111, 97, 0, 0, 0, 67, 0,
	89, 134, 106, 82, 124, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 520, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	104, 0, 0, 0, 76, 0, 109, 102, 0, 0,
	103, 108, 91, 116, 105, 122, 128, 129, 114, 127,
	69, 120, 113, 95, 85, 86, 68, 0, 107, 79,
	83, 78, 100, 117, 118, 77, 135, 72, 126, 71,
	73, 125, 99, 115, 121, 96, 93, 70, 119, 94,
	92, 87, 81, 0, 0, 0, 112, 123, 136, 0,
	101, 130, 131, 132, 133, 98, 74, 84, 110, 80,
	0, 0, 0, 0, 88, 0, 90, 0, 0, 111,
	97, 0, 0, 0, 67, 0, 89, 134, 106, 82,
	124, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	426, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 104, 0, 0, 0,
	76, 0, 109, 102, 0, 0, 103, 108, 91, 116,
	105, 122, 128, 129, 114, 127, 69, 120, 113, 95,
	85, 86, 68, 0, 107, 79, 83, 78, 100, 117,
	118, 77, 135, 72, 126, 71, 73, 125, 99, 115,
	121, 96, 93, 70, 119, 94, 92, 87, 81, 0,
	0, 0, 112, 123, 136, 0, 0, 130, 131, 132,
	133, 98, 74, 84, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	67, 0, 89, 134, 106, 82, 124, 496, 80, 0,
	0, 0, 0, 88, 0, 90, 0, 0, 111, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 104, 0, 0, 0, 76,
	0, 109, 102, 0, 0, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 258, 0,
	0, 112, 123, 136, 0, 101, 130, 131, 132, 133,
	98, 74, 84, 110, 80, 0, 0, 0, 0, 88,
	0, 90, 0, 0, 111, 97, 0, 0, 0, 67,
	0, 89, 134, 106, 82, 124, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 104, 0, 0, 0, 76, 0, 109, 102, 0,
	0, 103, 108, 91, 116, 105, 122, 128, 129, 114,
	127, 69, 120, 113, 95, 85, 86, 68, 0, 107,
	79, 83, 78, 100, 117, 118, 77, 135, 72, 126,
	71, 73, 125, 99, 115, 121, 96, 93, 70, 119,
	94, 92, 87, 81, 0, 0, 0, 112, 123, 136,
	0, 101, 130, 131, 132, 133, 98, 74, 84, 110,
	80, 0, 0, 0, 0, 88, 0, 90, 0, 0,
	111, 97, 0, 0, 0, 67, 0, 89, 134, 106,
	82, 124, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 149, 0, 0, 0, 0, 104, 0, 0,
	0, 76, 0, 109, 102, 0, 0, 103, 108, 91,
	116, 105, 122, 128, 129, 114, 127, 69, 120, 113,
	95, 85, 86, 68, 0, 107, 79, 83, 78, 100,
	117, 118, 77, 135, 72, 126, 71, 73, 125, 99,
	115, 121, 96, 93, 70, 119, 94, 92, 87, 81,
	0, 0, 0, 112, 123, 136, 0, 101, 130, 131,
	132, 133, 98, 74, 84, 110, 80, 0, 0, 0,
	0, 88, 0, 90, 0, 0, 111, 97, 0, 0,
	0, 67, 0, 89, 134, 106, 82, 124, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 104, 0, 0, 0, 76, 0, 109,
	102, 0, 0, 103, 108, 91, 116, 105, 122, 128,
	129, 114, 127, 69, 120, 113, 95, 85, 86, 68,
	0, 107, 79, 83, 78, 100, 117, 118, 77, 135,
	72, 126, 71, 73, 125, 99, 115, 121, 96, 93,
	70, 119, 94, 92, 87, 81, 0, 0, 0, 112,
	123, 136, 0, 101, 130, 131, 132, 133, 98, 74,
	84, 110, 80, 0, 0, 0, 0, 88, 0, 90,
	0, 0, 111, 97, 0, 0, 0, 67, 0, 89,
	134, 106, 82, 124, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 104,
	0, 0, 0, 76, 0, 109, 102, 0, 0, 103,
	108, 91, 116, 105, 122, 128, 129, 114, 127, 69,
	120, 113, 95, 85, 86, 68, 0, 107, 79, 83,
	78, 100, 117, 118, 77, 135, 72, 126, 71, 73,
	125, 99, 115, 121, 96, 93, 70, 119, 94, 92,
	87, 81, 0, 0, 0, 112, 123, 136, 0, 101,
	130, 131, 132, 133, 98, 74, 84, 110, 80, 0,
	0, 0, 0, 88, 0, 90, 0, 0, 111, 97,
	0, 0, 0, 67, 0, 89, 134, 106, 82, 124,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 104, 0, 0, 0, 76,
	0, 109, 102, 0, 0, 103, 108, 91, 116, 105,
	122, 128, 129, 114, 127, 69, 120, 113, 95, 85,
	86, 68, 0, 107, 79, 83, 78, 100, 117, 118,
	77, 135, 72, 126, 71, 73, 125, 99, 115, 121,
	96, 93, 70, 119, 94, 92, 87, 81, 0, 0,
	0, 112, 123, 136, 0, 101, 130, 131, 132, 133,
	98, 74, 84, 110, 80, 0, 0, 0, 0, 88,
	0, 90, 0, 0, 111, 97, 0, 0, 0, 67,
	0, 89, 134, 106, 82, 124, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 104, 0, 0, 0, 76, 0, 109, 102, 0,
	0, 103, 108, 91, 116, 105, 122, 128, 129, 114,
	127, 69, 120, 113, 95, 85, 86, 68, 0, 107,
	79, 83, 78, 100, 117, 118, 77, 135, 72, 126,
	71, 268, 125, 99, 115, 121, 96, 93, 70, 119,
	94, 92, 87, 81, 0, 0, 0, 112, 123, 136,
	0, 0, 130, 131, 132, 133, 269, 267, 266, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 89, 134, 106,
	82, 124,
}
var yyPact = [...]int{

	255, -1000, -154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 725, 759,
	-1000, -1000, -1000, -1000, -1000, -1000, 552, 5458, -7, 32,
	16, 7413, 31, 1035, 7911, -1000, -1000, -1000, -1000, -1000,
	482, -1000, -1000, -1000, -1000, -1000, 720, 723, 523, 707,
	625, -1000, 4322, -17, 6560, 7247, 8077, -1000, 319, 28,
	7911, -127, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 30, 7911, -1000,
	7911, -20, 317, -20, 7911, -1000, 80, -1000, -1000, -1000,
	7911, 283, 660, 24, 2471, 2471, 2471, 2471, -48, 2471,
	2471, 575, -1000, -1000, -1000, -1000, 2471, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 303, 692, 4719, 4719, 725,
	-1000, 482, -1000, -1000, -1000, 657, -1000, -1000, 195, 746,
	-1000, 5292, 79, -1000, 4719, 1489, 465, -1000, -1000, 465,
	-1000, -1000, 40, -1000, -1000, 5095, 5095, 5095, 5095, 5095,
	5095, 5095, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 465, -1000, 4522, 465,
	465, 465, 465, 465, 465, 4719, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 7081,
	438, 774, -1000, -1000, -1000, 704, 6031, 6394, 7911, 499,
	-1000, 358, 7745, 3101, -1000, -1000, -1000, -1000, 658, -1000,
	124, -1000, 75, 432, -1000, 1326, 278, 2471, 17, 7911,
	150, 7911, 2471, -5, 7911, 701, 569, 7911, -1000, 3731,
	-1000, 2471, 2471, 2471, 2471, 2471, 2471, 2471, 2471, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2471, 2471, -1000, -1000, 7911,
	-1000, -1000, -1000, -1000, 753, 103, 609, 57, 458, -1000,
	393, 720, 303, 625, 6197, 597, -1000, -1000, 7911, -1000,
	4719, 4719, 253, -1000, 6892, -1000, -1000, 2891, 111, 5095,
	224, 179, 5095, 5095, 5095, 5095, 5095, 5095, 5095, 5095,
	5095, 5095, 5095, 5095, 5095, 5095, 5095, 223, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 276, -1000, 482, 655,
	655, 76, 76, 76, 76, 76, 76, 1707, 3928, 303,
	427, 125, 4522, 4322, 4322, 4719, 4719, 4322, 709, 140,
	125, 7579, -1000, 303, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4322, 4322, 4322, 4322, -35, 7911, -1000, 7745, 6560,
	6560, 6560, 6560, 6560, -1000, 621, 614, -1000, 611, 610,
	617, 7911, -1000, 400, 6031, 82, 465, -1000, 6726, -1000,
	-1000, -35, 6560, 7911, -1000, -1000, 7745, 358, -1000, -1000,
	-1000, -1000, 4719, 3521, 2261, 200, 188, -102, -1000, -1000,
	473, -1000, 473, 473, 473, 473, -79, -79, -79, -79,
	-1000, -1000, -1000, -1000, -1000, 502, -1000, 473, 473, 473,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 490, 490,
	490, 474, 474, 469, -1000, 7911, -1000, 695, 72, -1000,
	7911, -1000, -1000, 7911, 2471, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	638, 4719, 4719, 3521, 4719, -1000, -1000, -1000, 692, -1000,
	709, 714, -1000, 650, 648, 4322, -1000, -1000, 111, 134,
	-1000, -1000, 286, -1000, -1000, -1000, -1000, 56, 465, -1000,
	1504, -1000, -1000, -1000, -1000, 224, 5095, 5095, 5095, 25,
	1504, 1613, 309, 1136, 76, 346, 346, 89, 89, 89,
	89, 89, 605, 605, -1000, -1000, -1000, 303, -1000, -1000,
	-1000, 303, 4322, 443, -1000, -1000, 4719, -1000, 303, 398,
	398, 369, 306, 398, 4322, 141, -1000, 4719, 303, -1000,
	398, 303, 398, 398, 483, 465, -1000, 430, 774, 495,
	568, 703, -1000, -1000, -1000, -1000, 612, -1000, 599, -1000,
	-1000, -1000, -1000, -1000, 27, 22, 20, 7579, -1000, 740,
	408, -1000, -1000, -1000, 125, -1000, 55, 406, 2051, -1000,
	-1000, -1000, -1000, -1000, -1000, 486, 670, 83, 263, -1000,
	-1000, 662, -1000, 156, -104, -1000, -1000, 231, -79, -79,
	-1000, -1000, 37, 654, 37, 37, 37, 245, -1000, -1000,
	-1000, -1000, 229, -1000, -1000, -1000, 225, -1000, 567, 7579,
	2471, -1000, -1000, 254, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -36, -1000, 2471, -1000,
	635, 125, 125, -1000, -1000, 7911, -1000, -1000, -1000, -1000,
	468, -1000, -1000, -1000, 2681, 4322, -1000, 25, 1504, 1322,
	-1000, 5095, 5095, -1000, -1000, 398, 4322, 125, -1000, -1000,
	-1000, 310, 223, 310, -137, 418, 129, -1000, 4719, 256,
	-1000, -1000, -1000, -1000, -1000, 556, 7745, 465, -1000, 5843,
	7579, 725, 4719, -1000, -1000, 4719, 484, -1000, 4719, -1000,
	-1000, -1000, 465, 465, 465, 334, -1000, 725, -1000, 3311,
	2261, -1000, 2261, 7579, -1000, 251, -1000, -1000, 555, 33,
	-1000, -1000, -1000, 345, 37, 37, -1000, 249, 146, -1000,
	-1000, -1000, 372, -1000, 404, 344, 7911, -1000, -1000, -1000,
	7911, -1000, -1000, -1000, -1000, -1000, 7579, -1000, -1000, -1000,
	740, 6560, -1000, -1000, 303, -1000, 5095, 1504, 1504, -1000,
	-1000, 303, 473, 473, -1000, 473, 474, -1000, 473, -61,
	473, -63, 303, 303, 465, -133, -1000, 125, 4719, -1000,
	681, 460, 370, -1000, -1000, 4125, 303, 336, 50, 334,
	720, 125, 125, 7579, 125, 7579, 7579, 7579, 5655, 7579,
	720, 2051, -1000, 329, -1000, 473, -1000, -97, 750, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 243, 214, -1000, 213, 2471, -1000, -1000, 693, 736,
	383, -1000, 1504, -1000, -1000, 26, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5095, 303, 242, 125, 669, -1000,
	465, -1000, -1000, 616, 7579, 7579, -1000, -1000, 324, -1000,
	302, 302, 302, 82, -1000, -1000, 469, 7579, -1000, 101,
	-1000, -117, -1000, 339, 337, -1000, 465, 729, 722, -1000,
	-1000, 78, -1000, -1000, 749, -1000, 465, -1000, 482, 43,
	-1000, 7579, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 193,
	666, -1000, 659, -1000, -1000, -1000, -37, -1000, 4719, 4719,
	303, 42, -144, 7745, 370, 303, 7579, -1000, -1000, 233,
	-1000, -1000, 287, -1000, 7579, 125, 368, -1000, 630, -140,
	-150, 358, -1000, -1000, -1000, -1000, -37, 643, -1000, 628,
	-1000, -1000, -47, -142, -41, -145, 465, -151, 4907, -1000,
	1218, 303, -1000, -1000,
}
var yyPgo = [...]int{

	0, 938, 10, 628, 936, 935, 934, 933, 930, 929,
	928, 927, 926, 925, 924, 922, 921, 918, 917, 916,
	914, 83, 913, 910, 909, 40, 908, 56, 907, 906,
	26, 66, 27, 31, 864, 905, 19, 45, 113, 904,
	28, 903, 901, 900, 898, 39, 895, 894, 1114, 893,
	891, 14, 21, 890, 889, 888, 887, 48, 153, 886,
	885, 884, 882, 881, 880, 36, 4, 3, 5, 12,
	879, 144, 7, 878, 33, 877, 876, 871, 869, 35,
	868, 37, 866, 16, 34, 863, 13, 43, 22, 18,
	8, 862, 77, 861, 528, 860, 110, 857, 856, 854,
	852, 849, 50, 274, 338, 46, 52, 848, 847, 9,
	1148, 47, 44, 15, 846, 20, 53, 23, 842, 831,
	25, 829, 827, 826, 825, 813, 812, 65, 811, 810,
	808, 29, 54, 807, 805, 42, 30, 804, 803, 802,
	796, 38, 795, 32, 794, 788, 787, 24, 17, 785,
	6, 784, 782, 2, 781, 773, 772, 0, 461, 770,
	767, 72,
}
var yyR1 = [...]int{

	0, 155, 156, 156, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 6, 3, 4, 4, 5, 5, 7, 7,
	24, 24, 8, 9, 9, 159, 159, 43, 43, 87,
	87, 10, 10, 10, 91, 91, 91, 108, 108, 118,
	118, 11, 11, 11, 11, 16, 144, 145, 145, 145,
	141, 121, 121, 121, 124, 124, 122, 122, 122, 122,
	122, 122, 122, 123, 123, 123, 123, 123, 125, 125,
	125, 125, 125, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 140, 140, 127,
	127, 135, 135, 136, 136, 136, 133, 133, 134, 134,
	137, 137, 137, 128, 128, 128, 128, 128, 128, 130,
	130, 138, 138, 131, 131, 131, 132, 132, 139, 139,
	139, 139, 139, 129, 129, 142, 149, 149, 149, 149,
	143, 143, 151, 151, 150, 146, 146, 146, 147, 147,
	147, 148, 148, 148, 12, 12, 12, 12, 12, 154,
	152, 152, 153, 153, 13, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 119, 119, 119, 19, 19, 20,
	20, 20, 20, 20, 160, 21, 22, 22, 23, 23,
	23, 27, 27, 27, 25, 25, 26, 26, 32, 32,
	31, 31, 33, 33, 33, 33, 107, 107, 107, 106,
	106, 35, 35, 36, 36, 37, 37, 38, 38, 38,
	50, 50, 86, 86, 88, 88, 39, 39, 39, 39,
	40, 40, 41, 41, 42, 42, 114, 114, 113, 113,
	113, 112, 112, 44, 44, 44, 46, 45, 45, 45,
	45, 47, 47, 49, 49, 48, 48, 51, 51, 51,
	51, 52, 52, 34, 34, 34, 34, 34, 34, 34,
	95, 95, 54, 54, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 64, 64, 64, 64, 64, 64,
	55, 55, 55, 55, 55, 55, 55, 30, 30, 65,
	65, 65, 71, 66, 66, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 62, 62, 62, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 61, 61, 161, 161, 63, 63,
	63, 63, 28, 28, 28, 28, 28, 117, 117, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 75, 75, 29, 29, 73, 73, 74, 76,
	76, 72, 72, 72, 57, 57, 57, 57, 57, 57,
	57, 57, 59, 59, 59, 77, 77, 78, 78, 79,
	79, 80, 80, 81, 82, 82, 82, 83, 83, 83,
	83, 84, 84, 84, 56, 56, 56, 56, 56, 56,
	85, 85, 85, 85, 89, 89, 67, 67, 69, 69,
	68, 70, 90, 90, 92, 93, 93, 96, 96, 97,
	97, 94, 94, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 99, 99, 99, 100, 100, 101,
	101, 101, 109, 109, 104, 104, 105, 105, 110, 110,
	111, 111, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 157, 158, 115, 116, 116, 116,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 7, 5, 10, 1, 3, 1, 3, 7, 8,
	1, 1, 8, 8, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 1, 2, 1, 1, 1, 1,
	1, 2, 8, 4, 6, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 2, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 4, 5, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 3, 4, 2, 4, 2,
	2, 2, 2, 3, 0, 1, 1, 2, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -155, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -20, -3, -4,
	6, 7, -24, 9, 10, 30, -16, 112, 113, 115,
	114, 132, 116, 125, 49, 25, 126, 127, 130, 131,
	-157, 8, 202, 53, -156, 215, -79, 15, -23, 5,
	-21, -160, -21, -21, -21, -21, -21, -144, 53, -101,
	119, 70, 117, 123, -104, 56, -103, 208, 150, 144,
	171, 163, 161, 164, 190, 65, 128, 159, 155, 153,
	27, 176, 213, 154, 191, 148, 149, 175, 32, 210,
	34, 136, 174, 170, 173, 147, 169, 38, 189, 166,
	156, 18, 131, 134, 124, 138, 212, 152, 135, 130,
	192, 37, 180, 146, 142, 167, 137, 157, 158, 172,
	145, 168, 139, 181, 214, 165, 162, 143, 140, 141,
	185, 186, 187, 188, 211, 160, 182, -94, 119, 121,
	117, 117, 118, 119, 117, -48, -110, 56, -103, 119,
	117, 106, 164, 112, 183, 118, 32, 138, -119, 117,
	184, 141, 185, 186, 187, 188, 56, 192, 191, -110,
	-115, -115, -115, -115, -115, -2, -83, 17, 16, -5,
	-3, -157, 6, 20, 21, -27, 39, 40, -22, -33,
	97, -34, -110, -53, 72, -58, 29, 56, -103, 23,
	-57, -54, -72, -70, -71, 106, 107, 95, 96, 103,
	73, 108, -62, -60, -61, -63, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -104, -68, -157, 43,
	44, 203, 204, 207, 205, 75, 33, 193, 201, 200,
	199, 197, 198, 195, 196, 122, 194, 101, 202, -94,
	-36, -37, -38, -39, -50, -71, -157, -48, 11, -43,
	-48, -90, -118, -91, -92, 192, 191, 190, 164, 189,
	-72, -104, -110, -145, -141, 56, 118, -48, 202, -97,
	122, 117, -48, -48, -96, 122, 56, -96, -48, 109,
	-48, 56, 30, 194, 56, 138, 117, 139, 119, -116,
	-157, -105, -104, -102, 71, 22, 24, 178, 74, 106,
	16, 75, 105, 203, 112, 47, 195, 196, 193, 194,
	183, 29, 10, 25, 126, 21, 99, 114, 78, 79,
	129, 23, 127, 69, 19, 50, 11, 13, 14, 122,
	121, 90, 118, 45, 8, 108, 26, 87, 41, 28,
	43, 88, 17, 197, 198, 31, 207, 133, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 115, 202,
	44, 6, 206, 30, 125, 42, 117, 184, 77, 120,
	68, 5, 123, 9, 49, 52, 199, 200, 201, 33,
	76, 12, -116, -116, -116, 142, 143, -116, -116, 51,
	-116, -158, 55, -84, 19, 31, -34, -110, -80, -81,
	-34, -79, -2, -21, 35, -25, 21, 64, 11, -107,
	71, 70, 87, -106, 22, -104, 58, 109, -34, -55,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 80, 81,
	82, 83, 84, 85, 86, -95, -157, -71, -157, 110,
	111, -58, -58, -58, -58, -58, -58, -58, -157, -2,
	-66, -34, -157, -157, -157, -157, -157, -157, -157, -75,
	-34, -157, -161, -157, -161, -161, -161, -161, -161, -161,
	-161, -157, -157, -157, -157, -49, 26, -48, 30, 54,
	-44, -46, -45, -47, 41, 45, 47, 42, 43, 44,
	48, -114, 22, -36, -157, -113, 134, -112, 22, -110,
	58, -48, -159, 54, 11, 52, 54, -90, -108, -105,
	58, 30, 80, 109, 55, 54, -121, -124, -126, -125,
	-122, -123, 161, 162, 106, 165, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 128, 157, 158, 159,
	160, 144, 145, 146, 147, 148, 149, 150, 152, 153,
	154, 155, 156, 56, -116, 119, -48, 72, -48, -116,
	120, -48, 23, 51, -48, -111, -110, -102, -116, -116,
	-116, -116, -116, -116, -116, -116, -116, -116, -48, 9,
	90, 54, 18, 109, 54, -82, 24, 25, -83, -158,
	-27, -59, -104, 59, 62, -26, 42, -48, -34, -34,
	-64, 67, 72, 68, 69, -106, 97, -111, -105, -102,
	-58, -65, -68, -71, 63, 90, 88, 89, 74, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -117, 56, 58, 56, -57, -57,
	-104, -32, 21, -31, -33, -158, 54, -158, -2, -31,
	-31, -34, -34, -31, -25, -73, -74, 76, -104, -158,
	-31, -32, -31, -31, -87, 134, -48, -90, -37, -38,
	-38, -37, -38, 41, 41, 41, 46, 41, 46, 41,
	-45, -110, -158, -51, 49, 121, 50, -157, -112, -87,
	-36, -48, -92, -115, -34, -105, -111, -146, -147, -148,
	-105, 58, 59, -141, -142, -149, 124, 123, -143, 118,
	28, -137, 67, 72, -133, 181, -127, 53, -127, -127,
	-127, -127, -131, 164, -131, -131, -131, 53, -127, -127,
	-127, -135, 53, -135, -135, -136, 53, -136, -109, 52,
	-48, 23, -98, 115, -154, 113, 178, 164, 65, 29,
	114, 15, 203, 134, 214, 56, 135, -48, -48, -116,
	37, -34, -34, -81, -84, -93, 19, 11, 33, 33,
	-31, 67, 68, 69, 109, -157, -65, -58, -58, -58,
	-30, 129, 71, -158, -158, -31, 54, -34, -158, -158,
	-158, 54, 52, 22, -158, -31, -76, -74, 78, -34,
	-158, -158, -158, -158, -158, -56, 30, 33, -2, -157,
	-157, -52, 12, -41, -40, 51, 52, -42, 51, -40,
	41, 41, 118, 118, 118, -88, -104, -52, -52, 109,
	54, -148, 80, 53, 28, -143, 56, 56, -128, 29,
	67, -134, 182, 59, -131, -131, -132, 105, 30, -132,
	-132, -132, -140, 58, 59, 59, 51, -104, -116, -115,
	-99, -100, 120, 22, 118, 28, 134, -116, 38, -48,
	-35, 11, 97, -105, -32, -30, 71, -58, -58, -158,
	-33, -120, 106, 161, 128, 159, 155, 175, 166, 180,
	157, 181, -117, -120, 208, -79, 79, -34, 77, -89,
	51, -90, -67, -69, -68, -157, -2, -85, -104, -88,
	-79, -34, -34, 53, -34, -157, -157, -157, -158, 54,
	-79, -147, -148, -151, -150, -104, 56, -130, 51, 58,
	59, 60, 67, 193, 55, -132, -132, 56, 56, 106,
	55, 54, 54, 55, 54, -48, -48, -115, -104, -52,
	-36, -158, -58, -158, -127, -127, -127, -136, -127, 149,
	-127, 149, -158, -158, -157, -29, 206, -34, 27, -89,
	54, -158, -158, -158, 54, 109, -158, -83, -86, -104,
	-86, -86, -86, -113, -104, -83, 55, 54, -127, -138,
	178, 9, 58, 59, 59, -116, 26, -77, 13, -131,
	56, -58, -158, 58, 28, -69, 33, -2, -157, -104,
	-104, 54, 55, -158, -158, -158, -51, -109, -150, -139,
	124, 28, 123, 193, 55, 55, -157, -78, 14, 16,
	-28, 90, 211, 9, -67, -2, 109, -104, -129, 65,
	28, 28, -152, -153, 134, -34, -66, -158, 209, 48,
	212, -90, -158, -104, 58, -158, 54, -104, 38, 210,
	213, -153, 33, 38, 136, 211, 137, 212, -157, 213,
	-58, 133, -158, -158,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 429, 0,
	204, 204, 204, 204, 204, 204, 0, 489, 471, 0,
	0, 0, 0, 194, 198, 663, 663, 663, 663, 663,
	0, 30, 31, 661, 1, 3, 437, 0, 0, 208,
	211, 206, 0, 471, 0, 0, 0, 51, 0, 0,
	651, 0, 469, 490, 491, 494, 495, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 0, 0, 472,
	0, 467, 0, 467, 0, 169, 275, 498, 499, 651,
	0, 0, 0, 0, 664, 664, 664, 664, 0, 664,
	664, 187, 189, 190, 191, 192, 664, 195, 196, 197,
	199, 200, 201, 202, 203, 24, 441, 0, 0, 429,
	26, 0, 204, 209, 210, 214, 212, 213, 205, 0,
	222, 226, 0, 283, 0, 288, 290, -2, -2, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 352, 353, 354, 355, 414, 415, 416, 417,
	418, 419, 420, 421, 292, 293, 411, 461, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 376, 376, 376,
	376, 376, 376, 376, 376, 0, 0, 0, 0, 0,
	0, 233, 235, 236, 237, 256, 0, 258, 0, 0,
	37, 41, 0, 0, 462, -2, -2, -2, 596, -2,
	0, 411, 0, 0, 57, 0, 0, 664, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 168, 0,
	170, 664, 664, 664, 664, 664, 664, 664, 664, 179,
	665, 666, 496, 497, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 180, 181, 182, 664, 664, 184, 185, 0,
	193, 25, 662, 19, 0, 0, 438, 0, 430, 431,
	434, 437, 24, 211, 0, 216, 215, 207, 0, 223,
	0, 0, 0, 227, 0, 229, 230, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	312, 313, 314, 315, 316, 289, 0, 303, 0, 0,
	0, 345, 346, 347, 348, 349, 350, 0, 218, 24,
	0, 323, 0, 0, 0, 0, 0, 0, 214, 0,
	403, 0, 368, 0, 369, 370, 371, 372, 373, 374,
	375, 0, 218, 0, 0, 39, 0, 274, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 266, 0, 0,
	0, 0, 257, 0, 0, 277, 626, 259, 0, 261,
	262, 39, 0, 0, 35, 36, 0, 42, 663, 47,
	48, 45, 0, 0, 145, 0, 110, 106, 62, 63,
	99, 65, 99, 99, 99, 99, 123, 123, 123, 123,
	91, 92, 93, 94, 95, 0, 78, 99, 99, 99,
	82, 66, 67, 68, 69, 70, 71, 72, 101, 101,
	101, 103, 103, 492, 53, 0, 55, 0, 0, 157,
	0, 165, 468, 0, 664, 276, 500, 501, 171, 172,
	173, 174, 175, 176, 177, 178, 183, 186, 188, 442,
	0, 0, 0, 0, 0, 433, 435, 436, 441, 27,
	214, 0, 422, 0, 0, 0, 217, 22, 284, 285,
	287, 304, 0, 306, 308, 228, 224, 0, 412, -2,
	294, 295, 319, 320, 321, 0, 0, 0, 0, 317,
	299, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 344, 387, 388, 0, 342, 343,
	351, 0, 0, 219, 220, 322, 0, 460, 24, 0,
	0, 0, 0, 0, 0, 409, 406, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 273, 281, 234, 252,
	254, 0, 249, 264, 265, 267, 0, 269, 0, 271,
	272, 238, 239, 240, 0, 0, 0, 0, 260, 281,
	281, 38, 463, 43, 464, 412, 0, 56, 146, 148,
	151, 152, 153, 58, 59, 0, 0, 0, 0, 140,
	141, 113, 111, 0, 108, 107, 64, 0, 123, 123,
	85, 86, 126, 0, 126, 126, 126, 0, 79, 80,
	81, 73, 0, 74, 75, 76, 0, 77, 0, 0,
	664, 470, 663, 484, 158, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 0, 164, 664, 167,
	0, 439, 440, 432, 20, 0, 465, 466, 423, 424,
	231, 305, 307, 309, 0, 218, 296, 317, 300, 0,
	297, 0, 0, 291, 356, 0, 0, 324, -2, 359,
	360, 0, 0, 0, 0, 429, 0, 407, 0, 0,
	367, 378, 379, 380, 381, 454, 0, 0, -2, 0,
	0, 429, 0, 246, 253, 0, 0, 247, 0, 248,
	268, 270, 0, 0, 0, 0, 244, 429, 34, 0,
	0, 149, 0, 0, 136, 0, 138, 139, 119, 0,
	112, 61, 109, 0, 126, 126, 87, 0, 0, 88,
	89, 90, 0, 97, 0, 0, 0, 493, 54, 154,
	0, 663, 485, 486, 487, 488, 0, 166, 443, 21,
	281, 0, 225, 413, 0, 298, 0, 318, 301, 357,
	221, 0, 99, 99, 392, 99, 103, 395, 99, 397,
	99, 400, 0, 0, 0, 404, 366, 410, 0, 28,
	0, 454, 444, 456, 458, 0, 24, 0, 450, 0,
	437, 282, 250, 0, 255, 0, 0, 0, 258, 0,
	437, 147, 150, 0, 142, 99, 137, 121, 0, 114,
	115, 116, 117, 118, 100, 83, 84, 127, 124, 125,
	96, 0, 0, 104, 0, 664, 155, 156, 0, 425,
	232, 358, 302, 361, 389, 123, 393, 394, 396, 398,
	399, 401, 363, 362, 0, 0, 0, 408, 0, 29,
	0, 459, -2, 0, 0, 0, 40, 32, 0, 242,
	0, 0, 0, 277, 245, 33, 492, 0, 144, 128,
	122, 0, 98, 0, 0, 52, 0, 427, 0, 390,
	391, 382, 365, 405, 0, 457, 0, -2, 0, 452,
	451, 0, 251, 278, 279, 280, 241, 135, 143, 133,
	0, 130, 132, 120, 102, 105, 0, 23, 0, 0,
	0, 0, 0, 0, 447, 24, 0, 243, 60, 0,
	129, 131, 0, 160, 0, 428, 426, 364, 0, 0,
	0, 455, -2, 453, 134, 159, 0, 0, 383, 0,
	386, 161, 0, 384, 0, 0, 0, 0, 0, 385,
	0, 0, 162, 163,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 215,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:277
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:282
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:287
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:307
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:319
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:325
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 23:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:352
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:359
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:371
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:383
		{
			yyVAL.str = InsertStr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:387
		{
			yyVAL.str = ReplaceStr
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:399
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:403
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:409
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:413
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:422
		{
			yyVAL.partitions = nil
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:426
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:440
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:461
		{
			yyVAL.str = SessionStr
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = GlobalStr
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:471
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:476
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:481
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:505
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:510
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:514
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:520
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:546
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:699
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:704
		{
			yyVAL.optVal = nil
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:708
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:713
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:717
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:725
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:735
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:743
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:752
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:756
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:775
		{
			yyVAL.optVal = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:787
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:791
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:795
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:800
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:804
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:809
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:813
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:818
		{
			yyVAL.str = ""
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:822
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:826
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:831
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:840
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.colKeyOpt = colKey
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:856
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:861
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:871
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:877
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:881
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:885
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:889
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:909
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:920
		{
			yyVAL.str = ""
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:936
		{
			yyVAL.str = yyDollar[1].str
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:940
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:944
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:964
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:968
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:973
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:978
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:982
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:988
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 162:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 163:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1020
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1028
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1033
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = SessionStr
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.str = GlobalStr
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.statement = &OtherRead{}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.statement = &OtherRead{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.statement = &OtherRead{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1204
		{
			setAllowComments(yylex, true)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.bytes2 = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = UnionStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.str = UnionAllStr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.str = UnionDistinctStr
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.str = SQLCacheStr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.str = DistinctStr
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = StraightJoinHint
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.selectExprs = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1424
		{
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1430
		{
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.empty = struct{}{}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.empty = struct{}{}
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = JoinStr
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = JoinStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = JoinStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = StraightJoinStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = LeftJoinStr
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = LeftJoinStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.str = RightJoinStr
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.str = RightJoinStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = NaturalJoinStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.indexHints = nil
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.expr = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.str = IsNullStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.str = IsNotNullStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.str = IsTrueStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.str = IsNotTrueStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.str = IsFalseStr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.str = IsNotFalseStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.str = EqualStr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.str = LessThanStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.str = GreaterThanStr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.str = LessEqualStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.str = GreaterEqualStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.str = NotEqualStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1864
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 364:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.str = BooleanModeStr
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.str = QueryExpansionStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = nil
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.str = string("")
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &NullVal{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.exprs = nil
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.orderBy = nil
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.str = AscScr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.str = AscScr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.str = DescScr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.limit = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.str = ForUpdateStr
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.str = ShareModeStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2305
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2318
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.updateExprs = nil
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.byt = 0
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.byt = 1
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.str = IgnoreStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2685
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2694
		{
			decNesting(yylex)
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2699
		{
			forceEOF(yylex)
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2704
		{
			forceEOF(yylex)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2708
		{
			forceEOF(yylex)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2712
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
