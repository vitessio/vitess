// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 300,
	160, 300,
	-2, 290,
	-1, 271,
	112, 640,
	-2, 636,
	-1, 272,
	112, 641,
	-2, 637,
	-1, 340,
	82, 816,
	-2, 63,
	-1, 341,
	82, 771,
	-2, 64,
	-1, 346,
	82, 750,
	-2, 602,
	-1, 348,
	82, 792,
	-2, 604,
	-1, 618,
	1, 352,
	5, 352,
	12, 352,
	13, 352,
	14, 352,
	15, 352,
	17, 352,
	19, 352,
	30, 352,
	31, 352,
	42, 352,
	43, 352,
	44, 352,
	45, 352,
	46, 352,
	48, 352,
	49, 352,
	52, 352,
	53, 352,
	55, 352,
	56, 352,
	270, 352,
	-2, 370,
	-1, 621,
	53, 44,
	55, 44,
	-2, 48,
	-1, 767,
	112, 643,
	-2, 639,
	-1, 995,
	5, 30,
	-2, 437,
	-1, 1025,
	5, 29,
	-2, 576,
	-1, 1267,
	5, 30,
	-2, 577,
	-1, 1319,
	5, 29,
	-2, 579,
	-1, 1396,
	5, 30,
	-2, 580,
}

const yyPrivate = 57344

const yyLast = 13034

var yyAct = [...]int{

	272, 1430, 1420, 1230, 1384, 1119, 1028, 1287, 574, 880,
	276, 1300, 1170, 1331, 1204, 853, 289, 1046, 1171, 1167,
	909, 960, 250, 57, 1029, 889, 923, 851, 879, 302,
	1183, 1052, 81, 718, 241, 345, 211, 573, 3, 211,
	1177, 1142, 477, 1073, 792, 802, 987, 732, 1099, 1090,
	799, 893, 820, 634, 855, 769, 919, 840, 615, 506,
	633, 512, 833, 278, 339, 446, 526, 211, 81, 518,
	259, 334, 211, 274, 211, 336, 614, 56, 1423, 242,
	243, 244, 245, 1407, 1418, 248, 876, 1394, 1415, 249,
	1231, 1406, 1393, 1159, 61, 1259, 623, 451, 1199, 1200,
	303, 51, 331, 871, 872, 635, 479, 636, 1198, 263,
	342, 206, 202, 203, 204, 870, 500, 903, 588, 247,
	63, 64, 65, 66, 67, 589, 1061, 246, 1081, 1060,
	1290, 198, 1062, 200, 902, 464, 910, 942, 1359, 539,
	538, 548, 549, 541, 542, 543, 544, 545, 546, 547,
	540, 941, 51, 550, 1306, 1250, 1248, 240, 707, 475,
	255, 314, 706, 320, 321, 318, 319, 317, 316, 315,
	489, 490, 481, 496, 483, 1122, 499, 322, 323, 946,
	1121, 497, 494, 495, 704, 1417, 1414, 1143, 940, 1385,
	1377, 1118, 834, 1434, 894, 1438, 705, 708, 1332, 211,
	465, 453, 211, 200, 480, 482, 1123, 1340, 211, 1047,
	1049, 1334, 711, 697, 211, 896, 1193, 81, 269, 81,
	81, 456, 81, 81, 1145, 81, 1192, 81, 199, 1191,
	449, 213, 896, 201, 205, 461, 81, 1366, 937, 934,
	935, 1270, 933, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 1129, 1004, 550, 1147, 896,
	1151, 1074, 1146, 1001, 1144, 954, 81, 1057, 953, 1149,
	562, 563, 1014, 944, 947, 1216, 981, 514, 1148, 1333,
	741, 502, 503, 1115, 629, 910, 1048, 530, 447, 1117,
	471, 1150, 1152, 515, 478, 877, 988, 550, 458, 1432,
	459, 866, 1433, 460, 1431, 738, 447, 1392, 1341, 1339,
	939, 895, 1360, 540, 962, 525, 550, 476, 70, 476,
	476, 1375, 476, 476, 1349, 476, 1217, 476, 895, 211,
	211, 211, 938, 1181, 1161, 825, 476, 560, 81, 445,
	467, 468, 469, 821, 81, 543, 544, 545, 546, 547,
	540, 516, 637, 550, 71, 895, 51, 613, 562, 563,
	892, 890, 733, 891, 899, 562, 563, 699, 888, 894,
	900, 559, 524, 523, 561, 821, 943, 1011, 484, 485,
	342, 486, 487, 776, 488, 1116, 491, 1114, 1079, 525,
	1380, 945, 961, 618, 520, 501, 801, 774, 775, 773,
	452, 1398, 572, 1296, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 631, 587, 590, 590, 590, 596, 590,
	590, 596, 590, 604, 605, 606, 607, 608, 609, 627,
	619, 1106, 523, 622, 591, 593, 595, 597, 599, 601,
	602, 592, 594, 734, 598, 600, 211, 603, 525, 54,
	999, 81, 998, 1295, 524, 523, 211, 211, 81, 772,
	1104, 1163, 211, 1400, 793, 211, 794, 1439, 211, 524,
	523, 525, 211, 1376, 81, 81, 1094, 454, 455, 81,
	81, 81, 211, 81, 81, 1093, 525, 1082, 1000, 1313,
	81, 81, 978, 979, 980, 197, 22, 1373, 564, 565,
	566, 567, 568, 569, 570, 571, 1440, 720, 548, 549,
	541, 542, 543, 544, 545, 546, 547, 540, 81, 1063,
	550, 1064, 211, 759, 761, 762, 1293, 1105, 81, 760,
	1126, 1091, 1110, 1107, 1100, 1108, 1103, 746, 524, 523,
	1101, 1102, 541, 542, 543, 544, 545, 546, 547, 540,
	1233, 476, 550, 1074, 1109, 525, 254, 1069, 476, 795,
	328, 329, 717, 770, 765, 716, 767, 712, 1337, 1416,
	744, 745, 81, 766, 476, 476, 1402, 505, 505, 476,
	476, 476, 700, 476, 476, 504, 698, 748, 1337, 1388,
	476, 476, 811, 814, 763, 1337, 505, 771, 822, 292,
	291, 294, 295, 296, 297, 81, 81, 695, 293, 298,
	696, 473, 211, 466, 806, 1337, 1367, 703, 524, 523,
	211, 211, 1337, 1336, 211, 211, 1285, 1284, 211, 211,
	211, 81, 1346, 721, 722, 525, 796, 797, 723, 724,
	725, 1345, 727, 728, 81, 1272, 505, 1213, 740, 729,
	730, 861, 1269, 505, 818, 863, 1223, 1222, 830, 1219,
	1220, 1053, 51, 1219, 1218, 720, 993, 505, 837, 505,
	804, 505, 897, 342, 644, 643, 860, 576, 624, 911,
	912, 913, 1053, 618, 859, 739, 881, 618, 836, 625,
	24, 618, 1180, 868, 24, 867, 58, 625, 211, 81,
	864, 81, 524, 523, 837, 81, 81, 211, 211, 211,
	884, 211, 211, 837, 1023, 211, 81, 804, 1024, 525,
	852, 925, 1318, 1168, 619, 1180, 1180, 1265, 619, 1348,
	837, 626, 211, 628, 211, 211, 993, 211, 54, 626,
	1221, 624, 54, 24, 1065, 869, 1132, 1017, 921, 922,
	1016, 768, 993, 624, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 630,
	742, 905, 906, 907, 908, 969, 710, 767, 1425, 54,
	505, 1408, 256, 1302, 766, 904, 1277, 916, 917, 918,
	993, 54, 924, 1209, 1184, 1185, 754, 1068, 920, 476,
	915, 476, 914, 770, 970, 1120, 971, 927, 1421, 826,
	1211, 1187, 1168, 1095, 736, 714, 476, 539, 538, 548,
	549, 541, 542, 543, 544, 545, 546, 547, 540, 983,
	54, 550, 1042, 1190, 846, 847, 1189, 771, 211, 211,
	211, 211, 211, 1040, 1038, 1037, 1036, 1030, 1041, 1039,
	211, 747, 1412, 211, 260, 261, 1405, 211, 929, 1128,
	931, 211, 301, 966, 519, 1410, 976, 982, 975, 507,
	1086, 1025, 1010, 1382, 642, 958, 474, 1078, 1263, 517,
	81, 508, 1381, 1316, 1076, 1070, 1298, 930, 1054, 1066,
	806, 713, 850, 1055, 79, 1056, 519, 1032, 1033, 251,
	1035, 618, 618, 618, 618, 618, 1043, 257, 258, 803,
	805, 1051, 974, 1353, 1031, 252, 618, 1034, 1304, 58,
	973, 1352, 881, 1058, 618, 1053, 1083, 1084, 81, 81,
	344, 498, 1427, 1426, 1026, 1027, 1005, 1075, 619, 619,
	619, 619, 619, 1071, 1072, 842, 845, 846, 847, 843,
	1002, 844, 848, 852, 731, 1050, 521, 1427, 81, 1363,
	1291, 619, 737, 60, 62, 1092, 55, 1098, 1, 1419,
	1262, 1232, 1299, 211, 807, 808, 936, 1383, 813, 816,
	817, 1330, 81, 1111, 1203, 887, 878, 69, 444, 68,
	1374, 886, 885, 984, 985, 986, 1085, 1338, 1087, 1088,
	1089, 1289, 898, 829, 1080, 831, 832, 1125, 539, 538,
	548, 549, 541, 542, 543, 544, 545, 546, 547, 540,
	901, 1210, 550, 1077, 1134, 1379, 650, 81, 81, 476,
	1169, 1136, 1160, 1135, 1030, 648, 649, 647, 652, 1141,
	651, 646, 1154, 225, 1153, 337, 849, 638, 969, 926,
	767, 81, 522, 72, 1172, 1113, 1112, 1164, 476, 932,
	1179, 492, 493, 227, 1174, 1188, 81, 558, 81, 81,
	972, 1059, 343, 1175, 743, 511, 1195, 1202, 1351, 344,
	1303, 344, 344, 1009, 344, 344, 1197, 344, 1097, 344,
	585, 1194, 819, 277, 1201, 1206, 211, 758, 344, 290,
	287, 288, 265, 749, 1022, 532, 275, 267, 881, 617,
	881, 610, 841, 211, 839, 1207, 1208, 1124, 838, 81,
	332, 1186, 81, 81, 211, 1173, 1182, 51, 528, 616,
	81, 990, 1131, 211, 1225, 991, 1258, 1358, 753, 26,
	59, 262, 995, 996, 997, 19, 1226, 1237, 1228, 1003,
	977, 18, 1006, 1007, 17, 20, 16, 15, 1013, 14,
	1239, 462, 1015, 1238, 30, 1018, 1019, 1020, 1021, 21,
	1214, 1215, 1134, 13, 1246, 538, 548, 549, 541, 542,
	543, 544, 545, 546, 547, 540, 12, 1045, 550, 1264,
	11, 1030, 10, 9, 8, 7, 618, 992, 6, 5,
	344, 4, 81, 1273, 253, 1274, 639, 1138, 1139, 23,
	81, 1066, 2, 0, 0, 1008, 0, 0, 1283, 0,
	1155, 1156, 0, 1157, 1158, 81, 0, 0, 0, 0,
	0, 0, 81, 619, 0, 1165, 1166, 0, 0, 1292,
	510, 1294, 0, 0, 881, 539, 538, 548, 549, 541,
	542, 543, 544, 545, 546, 547, 540, 0, 0, 550,
	1257, 1243, 1244, 0, 1245, 1305, 0, 1247, 0, 1249,
	81, 81, 0, 81, 1301, 0, 209, 0, 81, 239,
	81, 81, 81, 211, 1317, 1325, 81, 1326, 1327, 1328,
	0, 0, 1279, 1280, 1281, 1172, 1324, 1212, 1329, 0,
	1335, 0, 0, 81, 266, 0, 1319, 335, 1342, 0,
	1350, 0, 209, 344, 209, 0, 0, 0, 0, 0,
	344, 0, 0, 1286, 0, 476, 0, 0, 1140, 0,
	0, 1364, 0, 0, 0, 0, 344, 344, 81, 0,
	0, 344, 344, 344, 1372, 344, 344, 1371, 1172, 81,
	81, 0, 344, 344, 509, 513, 1241, 0, 1365, 1387,
	1386, 0, 1390, 0, 0, 0, 1173, 81, 0, 1320,
	1395, 531, 0, 0, 1030, 0, 0, 0, 211, 1343,
	750, 1344, 0, 0, 1297, 0, 81, 0, 0, 0,
	528, 1301, 881, 344, 1404, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 575, 1409, 1411, 81,
	0, 0, 0, 0, 0, 586, 1413, 1261, 0, 1173,
	0, 51, 1424, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 209,
	0, 0, 209, 0, 0, 0, 0, 0, 209, 0,
	823, 0, 0, 0, 209, 539, 538, 548, 549, 541,
	542, 543, 544, 545, 546, 547, 540, 827, 828, 550,
	0, 1240, 1307, 1308, 1309, 1310, 1311, 0, 1242, 0,
	1314, 1315, 0, 0, 0, 0, 0, 0, 0, 1251,
	1252, 0, 0, 344, 0, 0, 24, 25, 52, 27,
	28, 0, 0, 0, 0, 0, 344, 0, 1256, 1266,
	1267, 1268, 0, 1271, 0, 43, 0, 0, 1422, 0,
	29, 48, 49, 0, 0, 0, 1137, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 54, 620, 539, 538, 548, 549,
	541, 542, 543, 544, 545, 546, 547, 540, 0, 0,
	550, 344, 0, 344, 0, 0, 0, 948, 949, 209,
	209, 209, 0, 0, 0, 0, 0, 0, 344, 0,
	0, 208, 539, 538, 548, 549, 541, 542, 543, 544,
	545, 546, 547, 540, 1312, 0, 550, 0, 0, 0,
	0, 735, 0, 0, 344, 31, 32, 34, 33, 36,
	0, 50, 333, 0, 0, 0, 0, 448, 0, 450,
	0, 0, 0, 0, 0, 0, 756, 757, 0, 0,
	0, 0, 37, 44, 45, 0, 0, 46, 47, 35,
	0, 1428, 0, 1354, 1355, 1356, 1357, 989, 0, 1255,
	1361, 1362, 0, 39, 40, 0, 41, 42, 0, 0,
	0, 0, 1368, 1369, 1370, 0, 0, 539, 538, 548,
	549, 541, 542, 543, 544, 545, 546, 547, 540, 575,
	0, 550, 809, 810, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 1391, 0, 209, 209, 1254, 823,
	0, 1396, 209, 0, 0, 209, 0, 0, 209, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 1253, 1401,
	0, 0, 209, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 0, 0, 550, 0, 0,
	875, 0, 344, 53, 457, 0, 0, 463, 0, 0,
	0, 0, 0, 470, 0, 0, 0, 0, 0, 472,
	0, 0, 209, 0, 1436, 1437, 0, 0, 0, 0,
	0, 719, 539, 538, 548, 549, 541, 542, 543, 544,
	545, 546, 547, 540, 0, 0, 550, 0, 0, 0,
	1096, 344, 539, 538, 548, 549, 541, 542, 543, 544,
	545, 546, 547, 540, 0, 0, 550, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 266, 266,
	344, 0, 266, 266, 266, 0, 0, 0, 824, 842,
	845, 846, 847, 843, 0, 844, 848, 0, 0, 1184,
	1185, 0, 967, 968, 344, 513, 0, 266, 266, 266,
	266, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	209, 857, 0, 0, 209, 209, 0, 0, 209, 865,
	719, 0, 0, 0, 612, 0, 621, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 0, 0, 1176,
	1178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 1178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 344, 222,
	344, 1205, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 209, 209,
	0, 209, 209, 235, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 963, 964, 0, 209, 0, 0,
	0, 1229, 719, 0, 1234, 1235, 0, 0, 0, 0,
	0, 645, 344, 0, 266, 0, 0, 0, 0, 0,
	0, 701, 702, 0, 214, 0, 0, 709, 0, 0,
	333, 217, 0, 715, 0, 0, 0, 0, 0, 226,
	221, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 234, 0, 266,
	0, 0, 0, 0, 344, 1127, 0, 755, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 824, 209, 209,
	209, 209, 209, 0, 215, 0, 0, 344, 0, 0,
	1044, 0, 0, 209, 344, 0, 0, 857, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 218, 219, 1162, 229, 230, 231, 233, 0,
	232, 238, 0, 0, 0, 220, 223, 0, 216, 237,
	236, 0, 1321, 1322, 0, 1323, 0, 0, 0, 0,
	1288, 0, 1288, 1288, 1288, 0, 0, 0, 1205, 0,
	0, 0, 0, 667, 0, 0, 1196, 835, 0, 0,
	0, 0, 0, 0, 534, 1288, 537, 0, 0, 0,
	862, 0, 551, 552, 553, 554, 555, 556, 557, 0,
	535, 536, 533, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 0, 0, 550, 0, 0,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 344, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 823, 0, 0, 1397,
	0, 655, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 1403, 0,
	0, 0, 950, 951, 952, 719, 955, 956, 0, 0,
	957, 0, 0, 0, 824, 0, 1260, 0, 668, 0,
	0, 1288, 0, 0, 0, 0, 575, 959, 0, 0,
	0, 0, 965, 0, 1275, 0, 0, 1276, 0, 0,
	1278, 681, 684, 685, 686, 687, 688, 689, 0, 690,
	691, 692, 693, 694, 669, 670, 671, 672, 653, 654,
	682, 0, 656, 0, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 673, 674, 675, 676, 677, 678,
	679, 680, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1389, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1130, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1236,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 0,
	0, 0, 80, 0, 882, 883, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 1067, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 1399, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 80, 0, 882,
	883, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 0, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 1133,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 866, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 0, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 764,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 0, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 347, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 348, 346, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 0, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	432, 421, 0, 392, 435, 370, 384, 443, 385, 386,
	414, 356, 400, 139, 382, 0, 373, 351, 379, 352,
	371, 394, 103, 397, 369, 423, 403, 434, 120, 441,
	122, 408, 0, 161, 131, 0, 0, 396, 425, 398,
	419, 391, 415, 361, 407, 436, 383, 412, 437, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 410, 431, 381, 411, 413, 350, 409,
	0, 354, 357, 442, 427, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 395, 399, 416, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 406, 0,
	0, 0, 358, 355, 0, 0, 393, 0, 0, 0,
	360, 0, 375, 417, 0, 349, 109, 420, 426, 390,
	212, 430, 388, 387, 433, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 424, 372, 380,
	99, 378, 153, 141, 177, 405, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	632, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 347, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 353, 0, 162, 179, 196,
	94, 368, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 348, 346, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 364,
	367, 362, 363, 401, 402, 438, 439, 440, 418, 359,
	0, 365, 366, 0, 422, 428, 429, 404, 82, 89,
	121, 193, 148, 106, 180, 432, 421, 0, 392, 435,
	370, 384, 443, 385, 386, 414, 356, 400, 139, 382,
	0, 373, 351, 379, 352, 371, 394, 103, 397, 369,
	423, 403, 434, 120, 441, 122, 408, 0, 161, 131,
	0, 0, 396, 425, 398, 419, 391, 415, 361, 407,
	436, 383, 412, 437, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 410, 431,
	381, 411, 413, 350, 409, 0, 354, 357, 442, 427,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 395,
	399, 416, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 406, 0, 0, 0, 358, 355, 0,
	0, 393, 0, 0, 0, 360, 0, 375, 417, 0,
	349, 109, 420, 426, 390, 212, 430, 388, 387, 433,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 424, 372, 380, 99, 378, 153, 141, 177,
	405, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 338, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 347, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	353, 0, 162, 179, 196, 94, 368, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 348, 346, 341, 340, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 364, 367, 362, 363, 401, 402,
	438, 439, 440, 418, 359, 0, 365, 366, 0, 422,
	428, 429, 404, 82, 89, 121, 193, 148, 106, 180,
	139, 0, 0, 0, 0, 273, 0, 0, 0, 103,
	0, 270, 0, 0, 0, 120, 313, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 873, 0, 54, 0, 0, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 96, 293,
	298, 299, 300, 874, 0, 0, 268, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 326, 0, 284, 0, 0,
	279, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	324, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 314, 325, 320, 321,
	318, 319, 317, 316, 315, 327, 306, 307, 308, 309,
	311, 0, 322, 323, 310, 82, 89, 121, 193, 148,
	106, 180, 139, 0, 0, 800, 0, 273, 0, 0,
	0, 103, 0, 270, 0, 0, 0, 120, 313, 122,
	0, 0, 161, 131, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	96, 293, 298, 299, 300, 0, 0, 0, 268, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 264, 0, 0, 0, 326, 0, 284,
	0, 0, 279, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 324, 0, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 177, 0, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 162, 179, 196, 94,
	0, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 314, 325,
	320, 321, 318, 319, 317, 316, 315, 327, 306, 307,
	308, 309, 311, 0, 322, 323, 310, 82, 89, 121,
	193, 148, 106, 180, 139, 0, 0, 0, 0, 273,
	0, 0, 0, 103, 0, 270, 0, 0, 0, 120,
	313, 122, 0, 0, 161, 131, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 505, 271, 292, 291, 294, 295, 296, 297,
	0, 0, 96, 293, 298, 299, 300, 0, 0, 0,
	268, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 326,
	0, 284, 0, 0, 279, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 324, 0, 146, 0, 164, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 177, 0, 142, 152, 123,
	169, 147, 176, 184, 185, 166, 183, 192, 158, 84,
	165, 175, 97, 156, 86, 173, 163, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 170, 171, 100,
	195, 91, 182, 88, 92, 181, 136, 168, 174, 130,
	127, 87, 172, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 162, 179,
	196, 94, 0, 157, 167, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	159, 117, 124, 149, 194, 140, 154, 98, 178, 160,
	314, 325, 320, 321, 318, 319, 317, 316, 315, 327,
	306, 307, 308, 309, 311, 0, 322, 323, 310, 82,
	89, 121, 193, 148, 106, 180, 139, 0, 0, 0,
	0, 273, 0, 0, 0, 103, 0, 270, 0, 0,
	0, 120, 313, 122, 0, 0, 161, 131, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 96, 293, 298, 299, 300, 0,
	0, 0, 268, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 264, 0, 0,
	0, 326, 0, 284, 0, 0, 279, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 324, 0, 146, 0,
	164, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 177, 0, 142,
	152, 123, 169, 147, 176, 184, 185, 166, 183, 192,
	158, 84, 165, 175, 97, 156, 86, 173, 163, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 170,
	171, 100, 195, 91, 182, 88, 92, 181, 136, 168,
	174, 130, 127, 87, 172, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	162, 179, 196, 94, 0, 157, 167, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 159, 117, 124, 149, 194, 140, 154, 98,
	178, 160, 314, 325, 320, 321, 318, 319, 317, 316,
	315, 327, 306, 307, 308, 309, 311, 0, 322, 323,
	310, 82, 89, 121, 193, 148, 106, 180, 139, 0,
	0, 0, 0, 273, 0, 0, 0, 103, 0, 270,
	0, 0, 0, 120, 313, 122, 0, 0, 161, 131,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 271, 292, 815,
	294, 295, 296, 297, 0, 0, 96, 293, 298, 299,
	300, 0, 0, 0, 268, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 264,
	0, 0, 0, 326, 0, 284, 0, 0, 279, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 324, 0,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 177,
	0, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 162, 179, 196, 94, 0, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 314, 325, 320, 321, 318, 319,
	317, 316, 315, 327, 306, 307, 308, 309, 311, 0,
	322, 323, 310, 82, 89, 121, 193, 148, 106, 180,
	139, 0, 0, 0, 0, 273, 0, 0, 0, 103,
	0, 270, 0, 0, 0, 120, 313, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 271,
	292, 812, 294, 295, 296, 297, 0, 0, 96, 293,
	298, 299, 300, 0, 0, 0, 268, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 264, 0, 0, 0, 326, 0, 284, 0, 0,
	279, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	324, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 314, 325, 320, 321,
	318, 319, 317, 316, 315, 327, 306, 307, 308, 309,
	311, 24, 322, 323, 310, 82, 89, 121, 193, 148,
	106, 180, 0, 139, 0, 0, 0, 0, 273, 0,
	0, 0, 103, 0, 270, 0, 0, 0, 120, 313,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 271, 292, 291, 294, 295, 296, 297, 0,
	0, 96, 293, 298, 299, 300, 0, 0, 0, 268,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 0, 0, 0, 0, 326, 0,
	284, 0, 0, 279, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 324, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 314,
	325, 320, 321, 318, 319, 317, 316, 315, 327, 306,
	307, 308, 309, 311, 0, 322, 323, 310, 82, 89,
	121, 193, 148, 106, 180, 139, 0, 0, 0, 0,
	273, 0, 0, 0, 103, 0, 270, 0, 0, 0,
	120, 313, 122, 0, 0, 161, 131, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 271, 292, 291, 294, 295, 296,
	297, 0, 0, 96, 293, 298, 299, 300, 0, 0,
	0, 268, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	326, 0, 284, 0, 0, 279, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 324, 0, 146, 0, 164,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 177, 0, 142, 152,
	123, 169, 147, 176, 184, 185, 166, 183, 192, 158,
	84, 165, 175, 97, 156, 86, 173, 163, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 170, 171,
	100, 195, 91, 182, 88, 92, 181, 136, 168, 174,
	130, 127, 87, 172, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 162,
	179, 196, 94, 0, 157, 167, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 159, 117, 124, 149, 194, 140, 154, 98, 178,
	160, 314, 325, 320, 321, 318, 319, 317, 316, 315,
	327, 306, 307, 308, 309, 311, 0, 322, 323, 310,
	82, 89, 121, 193, 148, 106, 180, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 313, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 271, 292, 291, 294,
	295, 296, 297, 0, 0, 96, 293, 298, 299, 300,
	0, 0, 0, 0, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 326, 0, 284, 0, 0, 279, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 324, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 1429,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 314, 325, 320, 321, 318, 319, 317,
	316, 315, 327, 306, 307, 308, 309, 311, 0, 322,
	323, 310, 82, 89, 121, 193, 148, 106, 180, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 313, 122, 0, 0, 161,
	131, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 505, 271, 292,
	291, 294, 295, 296, 297, 0, 0, 96, 293, 298,
	299, 300, 0, 0, 0, 0, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 326, 0, 284, 0, 0, 279,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 324,
	0, 146, 0, 164, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	177, 0, 142, 152, 123, 169, 147, 176, 184, 185,
	166, 183, 192, 158, 84, 165, 175, 97, 156, 86,
	173, 163, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 170, 171, 100, 195, 91, 182, 88, 92,
	181, 136, 168, 174, 130, 127, 87, 172, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 162, 179, 196, 94, 0, 157, 167,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 159, 117, 124, 149, 194,
	140, 154, 98, 178, 160, 314, 325, 320, 321, 318,
	319, 317, 316, 315, 327, 306, 307, 308, 309, 311,
	0, 322, 323, 310, 82, 89, 121, 193, 148, 106,
	180, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 313, 122, 0,
	0, 161, 131, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 96,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 326, 0, 284, 0,
	0, 279, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 324, 0, 146, 0, 164, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 177, 0, 142, 152, 123, 169, 147, 176,
	184, 185, 166, 183, 192, 158, 84, 165, 175, 97,
	156, 86, 173, 163, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 170, 171, 100, 195, 91, 182,
	88, 92, 181, 136, 168, 174, 130, 127, 87, 172,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 162, 179, 196, 94, 0,
	157, 167, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 159, 117, 124,
	149, 194, 140, 154, 98, 178, 160, 314, 325, 320,
	321, 318, 319, 317, 316, 315, 327, 306, 307, 308,
	309, 311, 0, 322, 323, 310, 82, 89, 121, 193,
	148, 106, 180, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 538,
	548, 549, 541, 542, 543, 544, 545, 546, 547, 540,
	0, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 193, 148, 106, 180, 139, 0, 0, 0, 527,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 161, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 529, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 524,
	523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 0, 0, 146, 0, 164,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 177, 0, 142, 152,
	123, 169, 147, 176, 184, 185, 166, 183, 192, 158,
	84, 165, 175, 97, 156, 86, 173, 163, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 170, 171,
	100, 195, 91, 182, 88, 92, 181, 136, 168, 174,
	130, 127, 87, 172, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 162,
	179, 196, 94, 0, 157, 167, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 159, 117, 124, 149, 194, 140, 154, 98, 178,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 193, 148, 106, 180, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 161, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 76, 77, 0, 73, 0, 0, 0, 78,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 177,
	0, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 162, 179, 196, 94, 0, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 89, 121, 193, 148, 106, 180,
	139, 0, 0, 0, 856, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 858, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 180, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 180, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 161, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	164, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 177, 0, 142,
	152, 123, 169, 147, 176, 184, 185, 166, 183, 192,
	158, 84, 165, 175, 97, 156, 86, 173, 163, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 170,
	171, 100, 195, 91, 182, 88, 92, 181, 136, 168,
	174, 130, 127, 87, 172, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	162, 179, 196, 94, 0, 157, 167, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 159, 117, 124, 149, 194, 140, 154, 98,
	178, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 89, 121, 193, 148, 106, 180, 139, 0,
	0, 0, 856, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 161, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 858,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 0, 0,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 177,
	0, 854, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 162, 179, 196, 94, 0, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 193, 148, 106, 180,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 161, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 751, 0, 0, 752, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 0, 0, 146, 0, 164, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 177, 0, 142, 152, 123, 169, 147, 176,
	184, 185, 166, 183, 192, 158, 84, 165, 175, 97,
	156, 86, 173, 163, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 170, 171, 100, 195, 91, 182,
	88, 92, 181, 136, 168, 174, 130, 127, 87, 172,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 162, 179, 196, 94, 0,
	157, 167, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 159, 117, 124,
	149, 194, 140, 154, 98, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 193,
	148, 106, 180, 103, 0, 641, 0, 0, 0, 120,
	0, 122, 0, 0, 161, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 640, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 0, 0, 146, 0, 164, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 177, 0, 142, 152, 123,
	169, 147, 176, 184, 185, 166, 183, 192, 158, 84,
	165, 175, 97, 156, 86, 173, 163, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 170, 171, 100,
	195, 91, 182, 88, 92, 181, 136, 168, 174, 130,
	127, 87, 172, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 162, 179,
	196, 94, 0, 157, 167, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	159, 117, 124, 149, 194, 140, 154, 98, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 193, 148, 106, 180, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 180, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 858, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 180, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 529, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 82, 89,
	121, 193, 148, 106, 180, 611, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 180, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 180, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 207, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 180, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 161, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	164, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 177, 0, 142,
	152, 123, 169, 147, 176, 184, 185, 166, 183, 192,
	158, 84, 165, 175, 97, 156, 86, 173, 163, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 170,
	171, 100, 195, 91, 182, 88, 92, 181, 136, 168,
	174, 130, 127, 87, 172, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	162, 179, 196, 94, 0, 157, 167, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 159, 117, 124, 149, 194, 140, 154, 98,
	178, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 180, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 161,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 164, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	177, 0, 142, 152, 123, 169, 147, 176, 184, 185,
	166, 183, 192, 158, 84, 165, 175, 97, 156, 86,
	173, 163, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 170, 171, 100, 195, 91, 182, 88, 92,
	181, 136, 168, 174, 130, 127, 87, 172, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 162, 179, 196, 94, 0, 157, 167,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 159, 117, 124, 149, 194,
	140, 154, 98, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 193, 148, 106,
	180, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 161, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 0, 0, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 177, 0, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 162, 179, 196, 94,
	0, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	193, 148, 106, 180,
}
var yyPact = [...]int{

	1490, -1000, -193, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 904, 958, -1000, -1000, -1000, -1000, -1000, -1000,
	264, 9100, 6, 110, -11, 12035, 108, 1896, 12521, -1000,
	-8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -91, -99,
	-1000, 737, -1000, -1000, -1000, -1000, -1000, 882, 899, 776,
	887, 814, -1000, 6588, 76, 76, 11792, 5580, -1000, -1000,
	249, 12521, 106, 12521, -156, 73, 73, 73, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 98, 12521, 183,
	-1000, 12521, 72, 556, 72, 72, 72, 12521, -1000, 178,
	-1000, -1000, -1000, 12521, 554, 846, 3195, 49, 3195, 3195,
	-1000, 3195, 3195, -1000, 3195, 11, 3195, -45, 919, -1000,
	-1000, -1000, -1000, -42, -1000, 3195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 522,
	850, 7597, 7597, 904, -1000, 737, -1000, -1000, -1000, 843,
	-1000, -1000, 329, 945, -1000, 8857, 175, -1000, 7597, 2090,
	725, -1000, -1000, 725, -1000, -1000, 157, -1000, -1000, 8353,
	8353, 8353, 8353, 8353, 8353, 8353, 8353, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 725, -1000, 7345, 725, 725, 725, 725, 725, 725,
	725, 725, 7597, 725, 725, 725, 725, 725, 725, 725,
	725, 725, 725, 725, 725, 725, 725, 725, 11549, 10819,
	12521, 686, 678, -1000, -1000, 172, 714, 5315, -130, -1000,
	-1000, -1000, 270, 10576, -1000, -1000, -1000, 844, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 619, 12521, -1000, 2123, -1000, 550,
	3195, 88, 529, 293, 525, 12521, 12521, 3195, 27, 39,
	35, 12521, 721, 86, 12521, 868, 763, 12521, 508, 505,
	-1000, 5050, -1000, 3195, 3195, -1000, -1000, -1000, 3195, 3195,
	3195, 12521, 3195, 3195, -1000, -1000, -1000, -1000, -1000, 3195,
	3195, -1000, 943, 351, -1000, -1000, -1000, -1000, 7597, -1000,
	762, -1000, -1000, -1000, -1000, -1000, -1000, 953, 213, 630,
	168, 715, -1000, 546, 882, 522, 814, 10333, 753, -1000,
	-1000, 12521, -1000, 7597, 7597, 455, -1000, 11305, -1000, -1000,
	3990, 226, 8353, 395, 307, 8353, 8353, 8353, 8353, 8353,
	8353, 8353, 8353, 8353, 8353, 8353, 8353, 8353, 8353, 8353,
	407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 502,
	-1000, 737, 541, 541, 190, 190, 190, 190, 190, 190,
	190, 8605, 6084, 522, 615, 300, 7345, 6588, 6588, 7597,
	7597, 7092, 6840, 6588, 875, 265, 300, 12764, -1000, -1000,
	8101, -1000, -1000, -1000, -1000, -1000, 522, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12278, 12278, 6588, 6588, 6588, 6588,
	41, 12521, -1000, 658, 903, -1000, -1000, -1000, 870, 9838,
	10090, 41, 623, 10819, 12521, -1000, -1000, 10819, 12521, 3725,
	4785, 714, -130, 690, -1000, -121, -135, 5832, 188, -1000,
	-1000, -1000, -1000, 2930, 231, 616, 296, -79, -1000, -1000,
	-1000, 731, -1000, 731, 731, 731, 731, -52, -52, -52,
	-52, -1000, -1000, -1000, -1000, -1000, 748, 746, -1000, 731,
	731, 731, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	744, 744, 744, 738, 738, 754, -1000, 12521, 3195, 864,
	3195, -1000, 122, -1000, 12278, 12278, 12521, 12521, 12521, 148,
	12521, 12521, 698, -1000, 12521, 3195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12521, 302, 12521, 12521, 300, 12521, -1000, 825, 7597,
	7597, 4520, 7597, -1000, -1000, -1000, 850, -1000, 875, 901,
	-1000, 834, 832, 6588, -1000, -1000, 226, 359, -1000, -1000,
	424, -1000, -1000, -1000, -1000, 164, 725, -1000, 1152, -1000,
	-1000, -1000, -1000, 395, 8353, 8353, 8353, 150, 1152, 1574,
	413, 1081, 190, 246, 246, 209, 209, 209, 209, 209,
	445, 445, -1000, -1000, -1000, 522, -1000, -1000, -1000, 522,
	6588, 697, -1000, -1000, 7597, -1000, 522, 611, 611, 397,
	466, 252, 939, 611, 245, 925, 611, 611, 6588, 297,
	-1000, 7597, 522, -1000, 160, -1000, 724, 695, 692, 611,
	522, 611, 611, 684, 725, -1000, 12764, 10819, 10819, 10819,
	10819, 10819, -1000, 804, 803, -1000, 802, 801, 790, 12521,
	-1000, 613, 9838, 159, 725, -1000, 11062, -1000, -1000, 913,
	10819, 649, -1000, 649, -1000, 155, -1000, -1000, 690, -130,
	-111, -1000, -1000, -1000, -1000, 300, -1000, 462, 689, 2665,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 743, 500, -1000,
	857, 187, 204, 496, 856, -1000, -1000, -1000, 848, -1000,
	320, -86, -1000, -1000, 427, -52, -52, -1000, -1000, 188,
	840, 188, 188, 188, 472, 472, -1000, -1000, -1000, -1000,
	425, -1000, -1000, -1000, 416, -1000, 761, 12278, 3195, -1000,
	-1000, -1000, -1000, 403, 403, 261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40, 752, -1000,
	-1000, -1000, -1000, 23, 18, 80, -1000, 3195, -1000, 351,
	-1000, 471, 7597, -1000, -1000, -1000, 820, 300, 300, 143,
	-1000, -1000, 12521, -1000, -1000, -1000, -1000, 735, -1000, -1000,
	-1000, 3460, 6588, -1000, 150, 1152, 1453, -1000, 8353, 8353,
	-1000, -1000, 611, 6588, 300, -1000, -1000, -1000, 79, 407,
	79, 8353, 8353, -1000, 8353, 8353, -1000, -170, 681, 253,
	-1000, 7597, 382, -1000, 4520, -1000, 8353, 8353, -1000, -1000,
	-1000, -1000, 760, 12764, 725, -1000, 9595, 12278, 670, -1000,
	251, 903, 742, 759, 1787, -1000, -1000, -1000, -1000, 794,
	-1000, 791, -1000, -1000, -1000, -1000, -1000, 105, 102, 92,
	12278, -1000, 904, 7597, 649, -1000, -1000, 202, -1000, -1000,
	-129, -143, -1000, -1000, -1000, 2930, -1000, 2930, 12278, 56,
	-1000, 496, 496, -1000, -1000, -1000, 739, 758, 8353, -1000,
	-1000, -1000, 591, 188, 188, -1000, 218, -1000, -1000, -1000,
	608, -1000, 604, 685, 601, 12521, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12521, -1000, -1000, -1000, -1000, -1000, 12278, -176,
	493, 12278, 12278, 12521, -1000, 302, -1000, 300, -1000, 4255,
	-1000, 913, 10819, -1000, -1000, 522, -1000, 8353, 1152, 1152,
	-1000, -1000, 522, 731, 731, -1000, 731, 738, -1000, 731,
	-17, 731, -18, 522, 522, 1699, 1679, 1630, 1489, 725,
	-164, -1000, 300, 7597, -1000, 1362, 915, -1000, 851, 671,
	672, -1000, -1000, 6336, 522, 597, 129, 590, -1000, 904,
	12764, 7597, -1000, -1000, 7597, 732, -1000, 7597, -1000, -1000,
	-1000, 725, 725, 725, 590, 882, 300, -1000, -1000, -1000,
	-1000, 2665, -1000, 571, -1000, 731, -1000, -1000, -1000, 12278,
	-80, 951, 1152, -1000, -1000, -1000, -1000, -1000, -52, 467,
	-52, 393, -1000, 343, 3195, -1000, -1000, -1000, -1000, 860,
	-1000, 4255, -1000, -1000, 729, -1000, -1000, -1000, 905, 675,
	-1000, 1152, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8353, 8353, 8353, 8353, 8353, 522, 430,
	300, 8353, 8353, 855, -1000, 725, -1000, -1000, 688, 12278,
	12278, -1000, 12278, 882, -1000, 300, 300, 12278, 300, 12278,
	12278, 12278, 9352, -1000, 145, 12278, -1000, 567, -1000, 179,
	-1000, -83, 188, -1000, 188, 585, 576, -1000, 725, 674,
	-1000, 242, 12278, 907, 897, -1000, -1000, 724, 724, 724,
	724, 46, -1000, -1000, 724, 724, 950, -1000, 725, -1000,
	737, 125, -1000, -1000, -1000, 560, 540, 540, 540, 159,
	145, -1000, 440, 239, 414, -1000, 50, 12278, 324, 854,
	-1000, 845, -1000, -1000, -1000, -1000, -1000, 38, 4255, 2930,
	533, -1000, 7597, 7597, -1000, -1000, -1000, -1000, 522, 43,
	-180, -1000, -1000, 12764, 672, 522, 12278, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 341, -1000, -1000, 12521, -1000, -1000,
	404, -1000, -1000, 521, -1000, 12278, -1000, -1000, 752, 300,
	662, -1000, 817, -174, -185, 637, -1000, -1000, -1000, 727,
	-1000, -1000, 38, 831, -176, -1000, 813, -1000, 12278, -1000,
	33, -1000, -178, 513, 31, -183, 756, 725, -190, 726,
	-1000, 923, 7849, -1000, -1000, 948, 163, 163, 724, 522,
	-1000, -1000, -1000, 60, 438, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1212, 37, 496, 1209, 1204, 1201, 1199, 1198, 1195,
	1194, 1193, 1192, 1190, 1186, 1173, 1169, 1164, 1161, 1159,
	1157, 1156, 1155, 1154, 1151, 1145, 94, 1141, 1140, 1139,
	69, 1138, 70, 1137, 1136, 46, 396, 50, 45, 1102,
	1132, 27, 76, 58, 1129, 30, 1126, 1121, 102, 1120,
	1118, 57, 1114, 1112, 1545, 1111, 71, 1109, 17, 31,
	1107, 1106, 1105, 1104, 73, 218, 1103, 1101, 16, 1100,
	1099, 125, 1097, 55, 8, 12, 29, 18, 1093, 63,
	10, 1092, 52, 1090, 1083, 1080, 1078, 23, 1075, 61,
	1074, 22, 59, 1073, 7, 62, 40, 19, 6, 75,
	60, 1072, 24, 64, 53, 1071, 1070, 495, 1067, 1063,
	47, 1062, 1061, 21, 135, 400, 1059, 1056, 1055, 1053,
	35, 0, 862, 42, 66, 1052, 1049, 1047, 1240, 33,
	54, 15, 1046, 34, 159, 44, 1045, 1043, 41, 1041,
	1040, 1038, 1037, 1036, 1035, 1026, 117, 1025, 1023, 1021,
	20, 86, 1020, 1004, 56, 26, 1002, 1001, 997, 49,
	65, 992, 991, 51, 43, 990, 989, 988, 987, 986,
	28, 9, 985, 14, 984, 13, 981, 25, 977, 4,
	976, 11, 972, 3, 971, 5, 48, 1, 969, 2,
	968, 966, 100, 335, 96, 964, 118,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 194, 194, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 136, 136, 11, 11, 11, 11, 11,
	11, 11, 185, 185, 184, 183, 183, 182, 182, 181,
	17, 166, 168, 168, 167, 167, 167, 167, 160, 139,
	139, 139, 139, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 145,
	145, 145, 145, 145, 145, 145, 145, 159, 159, 146,
	146, 154, 154, 155, 155, 155, 152, 152, 153, 153,
	156, 156, 156, 148, 148, 149, 149, 157, 157, 150,
	150, 150, 151, 151, 151, 158, 158, 158, 158, 158,
	147, 147, 161, 161, 176, 176, 175, 175, 175, 165,
	165, 172, 172, 172, 172, 172, 163, 163, 164, 164,
	174, 174, 173, 162, 162, 177, 177, 177, 177, 188,
	189, 187, 187, 187, 187, 187, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	180, 178, 178, 179, 179, 13, 18, 18, 14, 14,
	14, 14, 14, 15, 15, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 111, 111,
	109, 109, 112, 112, 110, 110, 110, 113, 113, 113,
	137, 137, 137, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 16, 195, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 125,
	125, 125, 124, 124, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 57, 57, 94, 94, 96, 96,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	132, 132, 131, 131, 131, 130, 130, 50, 50, 50,
	52, 51, 51, 51, 51, 53, 53, 55, 55, 54,
	54, 56, 58, 58, 58, 58, 59, 59, 39, 39,
	39, 39, 39, 39, 39, 108, 108, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 72,
	72, 72, 72, 72, 72, 62, 62, 62, 62, 62,
	62, 62, 35, 35, 73, 73, 73, 79, 74, 74,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 196, 196, 71, 70, 70, 70,
	70, 70, 70, 33, 33, 33, 33, 33, 135, 135,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 83, 83, 34, 34, 81, 81, 82,
	84, 84, 80, 80, 80, 64, 64, 64, 64, 64,
	64, 64, 64, 66, 66, 66, 85, 85, 86, 86,
	87, 87, 88, 88, 89, 90, 90, 90, 91, 91,
	91, 91, 92, 92, 92, 63, 63, 63, 63, 63,
	63, 93, 93, 93, 93, 97, 97, 75, 75, 77,
	77, 76, 78, 98, 98, 102, 99, 99, 103, 103,
	103, 103, 101, 101, 101, 127, 127, 127, 106, 106,
	114, 114, 115, 115, 107, 107, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 118,
	118, 119, 119, 119, 126, 126, 122, 122, 123, 123,
	128, 128, 129, 129, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 192, 193, 133, 134, 134,
	134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 2,
	2, 2, 2, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 163,
	164, 166, 167, 25, 143, 144, 147, 148, 31, 32,
	121, -192, 8, 253, 54, -191, 270, -87, 15, -28,
	5, -26, -195, -26, -26, -26, -26, -26, -166, -168,
	54, 90, -119, 125, 72, 245, 122, 123, 129, -122,
	57, -121, 263, 135, 163, 174, 168, 195, 187, 264,
	136, 185, 188, 232, 215, 227, 66, 166, 241, 145,
	183, 179, 177, 27, 229, 200, 268, 178, 228, 121,
	138, 133, 201, 205, 233, 172, 173, 235, 199, 134,
	33, 265, 35, 153, 236, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 231, 190, 139, 180, 18,
	239, 148, 151, 230, 202, 204, 130, 155, 267, 237,
	176, 140, 152, 147, 240, 141, 167, 217, 162, 234,
	243, 38, 212, 170, 132, 164, 159, 218, 191, 154,
	181, 182, 196, 169, 192, 165, 156, 149, 242, 213,
	269, 189, 186, 160, 157, 158, 219, 220, 221, 222,
	223, 224, 161, 266, 238, 184, 214, -107, 125, 222,
	127, 123, 123, 124, 125, 245, 122, 123, -54, -128,
	57, -121, 125, 123, 108, 188, 232, 115, 216, 217,
	229, 124, 33, 230, 155, -137, 123, -109, 215, 219,
	220, 221, 224, 222, 161, 57, 234, 233, 225, -128,
	165, -133, -133, -133, -133, -133, 218, 218, -133, -2,
	-91, 17, 16, -5, -3, -192, 6, 20, 21, -32,
	40, 41, -27, -38, 99, -39, -128, -60, 74, -65,
	29, 57, -121, 23, -64, -61, -80, -78, -79, 108,
	109, 110, 97, 98, 105, 75, 111, -69, -67, -68,
	-70, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -122, -76, -192, 44, 45, 254, 255, 256, 257,
	262, 258, 77, 34, 244, 252, 251, 250, 248, 249,
	246, 247, 260, 261, 128, 245, 103, 253, -107, -107,
	11, -48, -49, -54, -56, -128, -99, -136, 165, -103,
	234, 233, -123, -101, -122, -120, 232, 188, 231, 120,
	73, 22, 24, 210, 76, 108, 16, 77, 107, 254,
	115, 48, 246, 247, 244, 256, 257, 245, 216, 29,
	10, 25, 143, 21, 101, 117, 80, 81, 146, 23,
	144, 70, 19, 51, 11, 13, 14, 128, 127, 92,
	124, 46, 8, 111, 26, 89, 42, 28, 44, 90,
	17, 248, 249, 31, 262, 150, 103, 49, 36, 74,
	68, 71, 52, 72, 15, 47, 91, 118, 253, 45,
	122, 6, 259, 30, 142, 43, 123, 79, 260, 261,
	126, 69, 5, 129, 32, 9, 50, 53, 250, 251,
	252, 34, 78, 12, -167, 90, -160, 57, -54, 124,
	-54, 253, -115, 128, -115, -115, 123, -54, 115, 117,
	120, 52, -18, -54, -114, 128, 57, -114, -114, -114,
	-54, 112, -54, 57, 30, -134, -192, -123, 245, 57,
	155, 123, 156, 125, -134, -134, -134, -134, -134, 159,
	160, -134, -112, -111, 227, 228, 218, 226, 12, 218,
	158, -134, -133, -133, -193, 56, -92, 19, 31, -39,
	-128, -88, -89, -39, -87, -2, -26, 36, -30, 21,
	65, 11, -125, 73, 72, 89, -124, 22, -122, 59,
	112, -39, -62, 92, 74, 90, 91, 76, 94, 93,
	104, 97, 98, 99, 100, 101, 102, 103, 95, 96,
	107, 82, 83, 84, 85, 86, 87, 88, -108, -192,
	-79, -192, 113, 114, -65, -65, -65, -65, -65, -65,
	-65, -65, -192, -2, -74, -39, -192, -192, -192, -192,
	-192, -192, -192, -192, -192, -83, -39, -192, -196, -71,
	-192, -196, -71, -196, -71, -196, -192, -196, -71, -196,
	-71, -196, -196, -71, -192, -192, -192, -192, -192, -192,
	-55, 26, -54, -41, -42, -43, -44, -57, -79, -192,
	-54, -54, -48, -194, 55, 11, 53, -194, 55, 112,
	55, -99, 165, -100, -104, 235, 237, 82, -127, -122,
	59, 29, 30, 56, 55, -54, -139, -142, -144, -143,
	-145, -140, -141, 185, 186, 108, 189, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 30, 145, 181,
	182, 183, 184, 201, 202, 203, 204, 205, 206, 207,
	208, 168, 187, 264, 169, 170, 171, 172, 173, 174,
	176, 177, 178, 179, 180, 57, -134, 125, 57, 74,
	57, -54, -54, -134, 157, 157, 123, 123, 162, -54,
	55, 126, -48, 23, 52, -54, 57, 57, -129, -128,
	-120, -134, -134, -134, -134, -134, -54, -134, -134, -134,
	-134, 11, -110, 11, 92, -39, 52, 9, 92, 55,
	18, 112, 55, -90, 24, 25, -91, -193, -32, -66,
	-122, 60, 63, -31, 43, -54, -39, -39, -72, 68,
	74, 69, 70, -124, 99, -129, -123, -120, -65, -73,
	-76, -79, 64, 92, 90, 91, 76, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -135, 57, 59, 57, -64, -64, -122, -37,
	21, -36, -38, -193, 55, -193, -2, -36, -36, -39,
	-39, -80, 59, -36, -80, 59, -36, -36, -30, -81,
	-82, 78, -80, -122, -128, -193, -65, -122, -122, -36,
	-37, -36, -36, -95, 151, -54, 30, 55, -50, -52,
	-51, -53, 42, 46, 48, 43, 44, 45, 49, -132,
	22, -41, -192, -131, 151, -130, 22, -128, 59, -95,
	53, -41, -54, -41, -56, -128, 99, -103, -100, 55,
	236, 238, 239, 52, 71, -39, -151, 107, -169, -170,
	-171, -123, 59, 60, -160, -161, -162, -172, 137, -177,
	130, 132, 129, -163, 138, 124, 28, 56, -156, 68,
	74, -152, 213, -146, 54, -146, -146, -146, -146, -150,
	188, -150, -150, -150, 54, 54, -146, -146, -146, -154,
	54, -154, -154, -155, 54, -155, -126, 53, -54, -134,
	23, -134, -116, 120, 117, 118, -180, 116, 210, 188,
	66, 29, 15, 254, 151, 269, 57, 152, -122, -122,
	-54, -54, -54, 120, 117, -54, -54, -54, -134, -54,
	-113, 90, 12, -128, -128, -54, 38, -39, -39, -129,
	-89, -92, -106, 19, 11, 34, 34, -36, 68, 69,
	70, 112, -192, -73, -65, -65, -65, -35, 146, 73,
	-193, -193, -36, 55, -39, -193, -193, -193, 55, 53,
	22, 11, 11, -193, 11, 11, -193, -193, -36, -84,
	-82, 80, -39, -193, 112, -193, 55, 55, -193, -193,
	-193, -193, -63, 30, 34, -2, -192, -192, -98, -102,
	-80, -42, -43, -43, -42, -43, 42, 42, 42, 47,
	42, 47, 42, -51, -128, -193, -58, 50, 127, 51,
	-192, -130, -59, 12, -41, -59, -59, 112, -104, -105,
	240, 237, 243, 57, 59, 55, -171, 82, 54, 57,
	28, -163, -163, -164, 57, -164, 28, -148, 29, 68,
	-153, 214, 60, -150, -150, -151, 30, -151, -151, -151,
	-159, 59, -159, 60, 60, 52, -122, -134, -133, -186,
	131, 137, 138, 133, 57, 124, 28, 130, 132, 151,
	129, -186, -117, -118, 126, 22, 124, 28, 151, -185,
	53, 157, 157, 126, -134, -110, 59, -39, 39, 112,
	-54, -40, 11, 99, -123, -37, -35, 73, -65, -65,
	-193, -38, -138, 108, 185, 145, 183, 179, 199, 190,
	212, 181, 213, -135, -138, -65, -65, -65, -65, 263,
	-87, 81, -39, 79, -123, -65, -65, -97, 52, -98,
	-75, -77, -76, -192, -2, -93, -122, -96, -122, -59,
	55, 82, -46, -45, 52, 53, -47, 52, -45, 42,
	42, 124, 124, 124, -96, -87, -39, -59, 237, 241,
	242, -170, -171, -174, -173, -122, -177, -164, -164, 54,
	-149, 52, -65, 56, -151, -151, 57, 108, 56, 55,
	56, 55, 56, 55, -54, -133, -133, -54, -133, -122,
	-183, 266, -184, 57, -122, -122, -54, -113, -59, -41,
	-193, -65, -193, -146, -146, -146, -155, -146, 173, -146,
	173, -193, -193, 19, 19, 19, 19, -192, -34, 259,
	-39, 55, 55, 27, -97, 55, -193, -193, -193, 55,
	112, -193, 55, -87, -102, -39, -39, 54, -39, -192,
	-192, -192, -193, -91, 56, 55, -146, -94, -122, -157,
	210, 9, -150, 59, -150, 60, 60, -134, 26, -182,
	-181, -123, 54, -85, 13, -150, 57, -65, -65, -65,
	-65, -65, -193, 59, -65, -65, 28, -77, 34, -2,
	-192, -122, -122, -122, -91, -94, -94, -94, -94, -131,
	-176, -175, 53, 134, 66, -173, 56, 55, -158, 130,
	28, 129, -68, -151, -151, 56, 56, -192, 55, 82,
	-94, -86, 14, 16, -193, -193, -193, -193, -33, 92,
	266, -193, -193, 9, -75, -2, 112, 56, -193, -193,
	-193, -58, -175, 57, -165, 82, 59, 140, -122, -147,
	66, 28, 28, -178, -179, 151, -181, -171, 56, -39,
	-74, -193, 264, 49, 267, -98, -193, -122, 60, -54,
	59, -193, 55, -122, -185, 39, 265, 268, 54, -179,
	34, -183, 39, -94, 153, 266, 56, 154, 267, -188,
	-189, 52, -192, 268, -189, 52, 10, 9, -65, 150,
	-187, 141, 136, 139, 30, -187, -193, -193, 135, 29,
	68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 560, 0, 317, 317, 317, 317, 317, 317,
	0, 631, 614, 0, 0, 0, 0, -2, 304, 305,
	0, 307, 308, 857, 857, 857, 857, 857, 0, 0,
	857, 0, 35, 36, 855, 1, 3, 568, 0, 0,
	321, 324, 319, 0, 614, 614, 0, 0, 65, 66,
	0, 0, 0, 841, 0, 612, 612, 612, 632, 633,
	636, 637, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 0, 0, 0,
	615, 0, 610, 0, 610, 610, 610, 0, 254, 389,
	640, 641, 841, 0, 0, 0, 858, 0, 858, 858,
	267, 858, 858, 270, 858, 0, 858, 0, 277, 279,
	280, 281, 282, 0, 286, 858, 301, 302, 291, 303,
	306, 309, 310, 311, 312, 313, 857, 857, 316, 29,
	572, 0, 0, 560, 31, 0, 317, 322, 323, 327,
	325, 326, 318, 0, 335, 339, 0, 398, 0, 403,
	405, -2, -2, 0, 440, 441, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 468, 469, 470,
	471, 545, 546, 547, 548, 549, 550, 551, 552, 407,
	408, 542, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 533, 0, 504, 504, 504, 504, 504, 504,
	504, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 46, 389, 50, 0, 832, 596,
	-2, -2, 0, 0, 638, 639, -2, 749, -2, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 0, 0, 84, 0, 82, 0,
	858, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 255, 858, 858, 258, 859, 860, 858, 858,
	858, 0, 858, 858, 265, 266, 268, 269, 271, 858,
	858, 273, 0, 294, 292, 293, 288, 289, 0, 283,
	284, 287, 314, 315, 30, 856, 24, 0, 0, 569,
	0, 561, 562, 565, 568, 29, 324, 0, 329, 328,
	320, 0, 336, 0, 0, 0, 340, 0, 342, 343,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 426, 427, 428, 429, 430, 431, 404, 0,
	418, 0, 0, 0, 460, 461, 462, 463, 464, 465,
	466, 0, 331, 29, 0, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 534, 0, 488, 496,
	0, 489, 497, 490, 498, 491, 0, 492, 499, 493,
	500, 494, 495, 501, 0, 0, 0, 331, 0, 0,
	48, 0, 388, 0, 346, 348, 349, 350, -2, 0,
	372, -2, 0, 0, 0, 42, 43, 0, 0, 0,
	0, 51, 832, 53, 54, 0, 0, 0, 162, 605,
	606, 607, 603, 206, 0, 0, 150, 146, 90, 91,
	92, 139, 94, 139, 139, 139, 139, 159, 159, 159,
	159, 122, 123, 124, 125, 126, 0, 0, 109, 139,
	139, 139, 113, 129, 130, 131, 132, 133, 134, 135,
	136, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	141, 141, 141, 143, 143, 634, 68, 0, 858, 0,
	858, 80, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 611, 0, 858, 251, 252, 390, 642,
	643, 256, 257, 259, 260, 261, 262, 263, 264, 272,
	276, 0, 297, 0, 0, 278, 0, 573, 0, 0,
	0, 0, 0, 564, 566, 567, 572, 32, 327, 0,
	553, 0, 0, 0, 330, 27, 399, 400, 402, 419,
	0, 421, 423, 341, 337, 0, 543, -2, 409, 410,
	434, 435, 436, 0, 0, 0, 0, 432, 414, 0,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 459, 518, 519, 0, 457, 458, 467, 0,
	0, 332, 333, 437, 0, 591, 29, 0, 0, 0,
	0, 442, 545, 0, 442, 545, 0, 0, 0, 540,
	537, 0, 0, 542, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 387, 0, 0, 0, 0,
	0, 0, 377, 0, 0, 380, 0, 0, 0, 0,
	371, 0, 0, 392, 799, 373, 0, 375, 376, 396,
	0, 396, 45, 396, 47, 0, 391, 597, 52, 0,
	0, 57, 58, 598, 599, 600, 601, 0, 81, 207,
	209, 212, 213, 214, 85, 86, 87, 0, 0, 194,
	0, 0, 188, 188, 0, 186, 187, 83, 153, 151,
	0, 148, 147, 93, 0, 159, 159, 116, 117, 162,
	0, 162, 162, 162, 0, 0, 110, 111, 112, 104,
	0, 105, 106, 107, 0, 108, 0, 0, 858, 70,
	613, 71, 857, 0, 0, 626, 221, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 0, 72, 223,
	225, 224, 228, 0, 0, 0, 246, 858, 250, 294,
	275, 0, 0, 295, 296, 285, 0, 570, 571, 0,
	563, 25, 0, 608, 609, 554, 555, 344, 420, 422,
	424, 0, 331, 411, 432, 415, 0, 412, 0, 0,
	406, 472, 0, 0, 439, -2, 475, 476, 0, 0,
	0, 0, 0, 511, 0, 0, 512, 0, 560, 0,
	538, 0, 0, 487, 0, 506, 0, 0, 507, 508,
	509, 510, 585, 0, 0, -2, 0, 0, 396, 593,
	0, 347, 366, 368, 0, 363, 378, 379, 381, 0,
	383, 0, 385, 386, 351, 353, 354, 0, 0, 0,
	0, 374, 560, 0, 396, 40, 41, 0, 55, 56,
	0, 0, 62, 163, 164, 0, 210, 0, 0, 0,
	181, 188, 188, 184, 189, 185, 0, 155, 0, 152,
	89, 149, 0, 162, 162, 118, 0, 119, 120, 121,
	0, 137, 0, 0, 0, 0, 635, 69, 215, 857,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 857, 0, 857, 627, 628, 629, 630, 0, 75,
	0, 0, 0, 0, 249, 297, 298, 299, 574, 0,
	26, 396, 0, 338, 544, 0, 413, 0, 433, 416,
	473, 334, 0, 139, 139, 523, 139, 143, 526, 139,
	528, 139, 531, 0, 0, 0, 0, 0, 0, 0,
	535, 486, 541, 0, 543, 0, 0, 33, 0, 585,
	575, 587, 589, 0, 29, 0, 581, 0, 358, 560,
	0, 0, 360, 367, 0, 0, 361, 0, 362, 382,
	384, 0, 0, 0, 0, 568, 397, 39, 59, 60,
	61, 208, 211, 0, 190, 139, 193, 182, 183, 0,
	157, 0, 154, 140, 114, 115, 160, 161, 159, 0,
	159, 0, 144, 0, 858, 216, 217, 218, 219, 0,
	222, 0, 73, 74, 0, 227, 247, 274, 556, 345,
	474, 417, 477, 520, 159, 524, 525, 527, 529, 530,
	532, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	539, 0, 0, 0, 34, 0, 590, -2, 0, 0,
	0, 49, 0, 568, 594, 595, 364, 0, 369, 0,
	0, 0, 372, 38, 173, 0, 192, 0, 356, 165,
	158, 0, 162, 138, 162, 0, 0, 67, 0, 76,
	77, 0, 0, 558, 0, 521, 522, 0, 0, 0,
	0, 513, 485, 536, 0, 0, 0, 588, 0, -2,
	0, 583, 582, 359, 37, 0, 0, 0, 0, 392,
	172, 174, 0, 179, 0, 191, 0, 0, 170, 0,
	167, 169, 156, 127, 128, 142, 145, 0, 0, 0,
	0, 28, 0, 0, 480, 482, 481, 483, 0, 0,
	0, 502, 503, 0, 578, 29, 0, 365, 393, 394,
	395, 355, 175, 176, 0, 180, 178, 0, 357, 88,
	0, 166, 168, 0, 241, 0, 78, 79, 72, 559,
	557, 484, 0, 0, 0, 586, -2, 584, 177, 0,
	171, 240, 0, 0, 75, 514, 0, 517, 0, 242,
	0, 226, 515, 0, 0, 0, 195, 0, 0, 196,
	197, 0, 0, 516, 198, 0, 0, 0, 0, 0,
	199, 201, 202, 0, 0, 200, 243, 244, 203, 204,
	205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:441
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:488
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:579
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:616
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:914
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1074
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1191
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1199
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1205
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1282
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1294
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1376
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1392
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1396
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1412
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1428
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1433
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1540
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1545
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = "full "
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1643
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1657
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1661
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = SessionStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = GlobalStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Commit{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &Rollback{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1761
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1843
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1847
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1896
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1920
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1961
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1973
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1993
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2066
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2086
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
			yyVAL.indexHints = nil
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2095
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2099
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2103
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2112
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = IsNullStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = IsNotNullStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = IsTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = IsNotTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = IsFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = IsNotFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = EqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = LessThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = GreaterThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = LessEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = GreaterEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = NotEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2637
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2641
		{
			yyVAL.str = BooleanModeStr
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = QueryExpansionStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.str = string("")
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2747
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2753
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2776
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &NullVal{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2834
		{
			yyVAL.exprs = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2852
		{
			yyVAL.orderBy = nil
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2862
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2877
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.str = DescScr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2890
		{
			yyVAL.limit = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2898
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2902
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2907
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = ForUpdateStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = ShareModeStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2936
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2941
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2945
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2949
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2956
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2968
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2973
		{
			yyVAL.updateExprs = nil
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2977
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3029
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3039
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3049
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3053
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.bytes = []byte("charset")
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = &Default{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3088
		{
			yyVAL.byt = 0
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3090
		{
			yyVAL.byt = 1
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.str = ""
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = IgnoreStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3145
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3425
		{
			decNesting(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3430
		{
			skipToEnd(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3435
		{
			skipToEnd(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			skipToEnd(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
