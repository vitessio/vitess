//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const PRIMARY = 57449
const SHOW = 57450
const DESCRIBE = 57451
const EXPLAIN = 57452
const DATE = 57453
const ESCAPE = 57454
const REPAIR = 57455
const OPTIMIZE = 57456
const TRUNCATE = 57457
const MAXVALUE = 57458
const PARTITION = 57459
const REORGANIZE = 57460
const LESS = 57461
const THAN = 57462
const PROCEDURE = 57463
const TRIGGER = 57464
const VINDEX = 57465
const VINDEXES = 57466
const STATUS = 57467
const VARIABLES = 57468
const BEGIN = 57469
const START = 57470
const TRANSACTION = 57471
const COMMIT = 57472
const ROLLBACK = 57473
const BIT = 57474
const TINYINT = 57475
const SMALLINT = 57476
const MEDIUMINT = 57477
const INT = 57478
const INTEGER = 57479
const BIGINT = 57480
const INTNUM = 57481
const REAL = 57482
const DOUBLE = 57483
const FLOAT_TYPE = 57484
const DECIMAL = 57485
const NUMERIC = 57486
const TIME = 57487
const TIMESTAMP = 57488
const DATETIME = 57489
const YEAR = 57490
const CHAR = 57491
const VARCHAR = 57492
const BOOL = 57493
const CHARACTER = 57494
const VARBINARY = 57495
const NCHAR = 57496
const TEXT = 57497
const TINYTEXT = 57498
const MEDIUMTEXT = 57499
const LONGTEXT = 57500
const BLOB = 57501
const TINYBLOB = 57502
const MEDIUMBLOB = 57503
const LONGBLOB = 57504
const JSON = 57505
const ENUM = 57506
const NULLX = 57507
const AUTO_INCREMENT = 57508
const APPROXNUM = 57509
const SIGNED = 57510
const UNSIGNED = 57511
const ZEROFILL = 57512
const DATABASES = 57513
const TABLES = 57514
const VITESS_KEYSPACES = 57515
const VITESS_SHARDS = 57516
const VITESS_TABLETS = 57517
const VSCHEMA_TABLES = 57518
const NAMES = 57519
const CHARSET = 57520
const GLOBAL = 57521
const SESSION = 57522
const CURRENT_TIMESTAMP = 57523
const DATABASE = 57524
const CURRENT_DATE = 57525
const CURRENT_TIME = 57526
const LOCALTIME = 57527
const LOCALTIMESTAMP = 57528
const UTC_DATE = 57529
const UTC_TIME = 57530
const UTC_TIMESTAMP = 57531
const REPLACE = 57532
const CONVERT = 57533
const CAST = 57534
const GROUP_CONCAT = 57535
const SEPARATOR = 57536
const MATCH = 57537
const AGAINST = 57538
const BOOLEAN = 57539
const LANGUAGE = 57540
const WITH = 57541
const QUERY = 57542
const EXPANSION = 57543
const UNUSED = 57544

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 210,
	109, 505,
	-2, 501,
	-1, 211,
	109, 506,
	-2, 502,
	-1, 278,
	80, 643,
	109, 643,
	-2, 52,
	-1, 279,
	80, 616,
	109, 616,
	-2, 53,
	-1, 280,
	80, 605,
	109, 605,
	-2, 47,
	-1, 282,
	80, 630,
	109, 630,
	-2, 49,
	-1, 642,
	109, 508,
	-2, 504,
	-1, 821,
	5, 28,
	-2, 329,
	-1, 841,
	5, 27,
	-2, 452,
	-1, 1005,
	5, 28,
	-2, 453,
	-1, 1040,
	5, 27,
	-2, 455,
	-1, 1085,
	5, 28,
	-2, 456,
}

const yyPrivate = 57344

const yyLast = 8445

var yyAct = [...]int{

	241, 47, 957, 1076, 483, 935, 274, 482, 3, 771,
	755, 215, 932, 936, 240, 716, 1011, 732, 528, 189,
	768, 526, 879, 731, 217, 53, 183, 844, 858, 813,
	741, 644, 914, 677, 667, 847, 674, 689, 416, 422,
	515, 277, 530, 697, 436, 495, 264, 213, 47, 414,
	316, 287, 312, 428, 198, 188, 194, 764, 52, 1102,
	1093, 1100, 269, 729, 1083, 1098, 1092, 1082, 927, 265,
	184, 185, 186, 187, 999, 283, 291, 1056, 875, 748,
	1023, 1033, 756, 263, 994, 297, 268, 992, 557, 182,
	408, 409, 1099, 202, 1097, 1077, 899, 1064, 449, 448,
	458, 459, 451, 452, 453, 454, 455, 456, 457, 450,
	569, 698, 460, 1054, 298, 717, 719, 314, 896, 293,
	150, 307, 151, 151, 898, 153, 154, 155, 857, 593,
	588, 574, 575, 576, 577, 578, 579, 580, 743, 581,
	582, 583, 584, 585, 570, 571, 572, 573, 555, 556,
	856, 855, 558, 289, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 294, 162, 869, 313, 313, 313,
	313, 57, 313, 313, 962, 963, 964, 743, 208, 313,
	152, 1069, 309, 965, 311, 472, 473, 718, 1008, 862,
	807, 616, 546, 440, 756, 47, 59, 60, 61, 62,
	63, 302, 425, 308, 310, 288, 880, 460, 1055, 1053,
	469, 613, 435, 471, 897, 971, 895, 545, 424, 433,
	405, 406, 407, 1065, 410, 411, 450, 590, 742, 460,
	929, 413, 690, 1081, 831, 435, 690, 470, 873, 1072,
	481, 300, 485, 486, 487, 488, 489, 490, 491, 430,
	494, 496, 496, 496, 496, 496, 496, 496, 496, 504,
	505, 506, 507, 1027, 306, 972, 749, 742, 434, 433,
	527, 915, 740, 739, 651, 453, 454, 455, 456, 457,
	450, 745, 540, 460, 211, 435, 746, 283, 649, 650,
	648, 313, 1026, 917, 268, 888, 313, 497, 498, 499,
	500, 501, 502, 503, 149, 313, 313, 313, 313, 313,
	313, 313, 313, 887, 966, 73, 50, 434, 433, 160,
	876, 825, 160, 824, 931, 919, 647, 923, 668, 918,
	669, 916, 1087, 1036, 435, 539, 921, 1025, 886, 434,
	433, 1089, 415, 587, 970, 920, 160, 160, 592, 959,
	922, 924, 160, 600, 1044, 415, 435, 601, 602, 603,
	604, 605, 606, 607, 608, 262, 598, 426, 449, 448,
	458, 459, 451, 452, 453, 454, 455, 456, 457, 450,
	415, 415, 460, 448, 458, 459, 451, 452, 453, 454,
	455, 456, 457, 450, 542, 870, 460, 474, 475, 476,
	477, 478, 479, 480, 1044, 1045, 814, 1020, 1019, 313,
	313, 952, 415, 619, 620, 670, 449, 448, 458, 459,
	451, 452, 453, 454, 455, 456, 457, 450, 1007, 415,
	460, 634, 636, 637, 586, 160, 635, 160, 804, 805,
	806, 160, 977, 976, 621, 974, 973, 160, 819, 415,
	1058, 73, 73, 73, 73, 304, 73, 73, 645, 434,
	433, 609, 610, 73, 204, 512, 415, 1057, 646, 679,
	415, 21, 47, 548, 547, 622, 435, 299, 288, 239,
	967, 623, 638, 537, 23, 933, 485, 679, 539, 73,
	54, 642, 845, 681, 458, 459, 451, 452, 453, 454,
	455, 456, 457, 450, 640, 904, 460, 1003, 839, 512,
	71, 840, 975, 269, 269, 269, 269, 269, 700, 863,
	671, 672, 23, 283, 538, 845, 536, 193, 527, 819,
	720, 50, 678, 680, 512, 681, 269, 268, 268, 268,
	268, 268, 694, 284, 819, 687, 692, 160, 819, 1039,
	617, 283, 268, 50, 160, 160, 160, 723, 641, 701,
	268, 73, 704, 750, 713, 769, 772, 539, 726, 50,
	961, 757, 758, 759, 721, 73, 715, 160, 722, 160,
	73, 725, 160, 702, 703, 160, 705, 160, 909, 73,
	73, 73, 73, 73, 73, 73, 73, 642, 313, 511,
	736, 946, 866, 676, 765, 826, 770, 760, 449, 448,
	458, 459, 451, 452, 453, 454, 455, 456, 457, 450,
	65, 643, 460, 512, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 933,
	766, 767, 808, 848, 849, 889, 315, 315, 315, 315,
	792, 315, 315, 434, 433, 419, 423, 796, 315, 851,
	797, 23, 195, 645, 728, 733, 615, 642, 596, 412,
	435, 629, 441, 646, 854, 517, 520, 521, 522, 518,
	809, 519, 523, 853, 438, 451, 452, 453, 454, 455,
	456, 457, 450, 73, 73, 460, 1096, 160, 842, 843,
	707, 712, 614, 521, 522, 841, 484, 706, 50, 50,
	710, 1091, 73, 493, 901, 711, 160, 793, 434, 433,
	816, 1095, 73, 708, 817, 429, 830, 802, 709, 199,
	200, 821, 822, 823, 641, 435, 827, 881, 801, 427,
	852, 833, 417, 834, 835, 836, 837, 544, 305, 864,
	860, 861, 1001, 872, 418, 284, 315, 1074, 1073, 1037,
	867, 1029, 877, 878, 774, 73, 595, 525, 196, 197,
	315, 868, 429, 190, 313, 315, 1062, 191, 1061, 73,
	882, 883, 884, 54, 315, 315, 315, 315, 315, 315,
	315, 315, 313, 1031, 160, 800, 431, 160, 160, 160,
	160, 160, 892, 799, 517, 520, 521, 522, 518, 160,
	519, 523, 160, 845, 848, 849, 160, 1066, 1024, 612,
	160, 160, 751, 752, 753, 754, 891, 56, 810, 811,
	812, 58, 73, 535, 51, 1, 777, 761, 762, 763,
	908, 938, 1075, 47, 900, 907, 934, 956, 738, 733,
	939, 283, 730, 913, 928, 937, 948, 949, 950, 926,
	925, 286, 64, 737, 885, 1052, 1022, 744, 912, 874,
	943, 270, 942, 160, 747, 960, 1071, 871, 160, 551,
	552, 160, 73, 955, 550, 554, 953, 954, 315, 315,
	553, 549, 170, 275, 524, 541, 432, 66, 631, 632,
	968, 969, 894, 893, 775, 269, 157, 625, 951, 230,
	229, 232, 233, 234, 235, 292, 468, 438, 231, 236,
	315, 980, 798, 276, 940, 906, 983, 618, 997, 268,
	421, 982, 1060, 1030, 273, 829, 492, 688, 216, 290,
	990, 633, 228, 225, 227, 226, 624, 1002, 838, 442,
	484, 214, 206, 684, 685, 267, 508, 984, 516, 514,
	673, 513, 272, 1010, 986, 1013, 1014, 1015, 850, 846,
	1016, 266, 864, 1018, 691, 995, 996, 903, 998, 313,
	906, 733, 1063, 733, 628, 25, 55, 201, 1004, 1005,
	1006, 284, 1009, 910, 911, 19, 18, 17, 20, 1032,
	16, 15, 14, 29, 938, 73, 13, 1041, 12, 11,
	727, 10, 9, 8, 1040, 7, 73, 1038, 937, 284,
	6, 5, 295, 1051, 296, 4, 315, 315, 301, 1050,
	1059, 1028, 1049, 192, 303, 22, 2, 0, 0, 0,
	938, 0, 47, 0, 0, 1067, 0, 0, 1035, 1068,
	0, 0, 0, 0, 937, 0, 0, 73, 73, 0,
	0, 0, 0, 1046, 1047, 1048, 0, 1079, 0, 0,
	0, 0, 733, 1084, 0, 0, 73, 315, 283, 794,
	795, 0, 423, 160, 0, 0, 0, 0, 985, 0,
	682, 683, 73, 1094, 686, 0, 315, 420, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 693, 0,
	695, 696, 0, 1080, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 1088, 0, 73, 73, 0,
	0, 0, 158, 0, 510, 181, 0, 0, 0, 0,
	0, 0, 0, 534, 820, 0, 0, 73, 73, 0,
	73, 73, 0, 1105, 1106, 832, 0, 205, 0, 158,
	158, 285, 0, 0, 589, 158, 591, 0, 0, 594,
	0, 0, 597, 0, 160, 0, 1034, 0, 160, 0,
	0, 0, 987, 988, 73, 989, 0, 0, 991, 160,
	993, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 449, 448, 458, 459, 451, 452, 453, 454,
	455, 456, 457, 450, 0, 1021, 460, 0, 0, 0,
	0, 73, 803, 73, 73, 73, 160, 73, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	158, 0, 890, 315, 158, 0, 0, 0, 0, 0,
	158, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 818,
	1103, 0, 0, 0, 611, 784, 0, 315, 0, 0,
	0, 828, 73, 73, 0, 0, 930, 0, 0, 782,
	0, 0, 0, 630, 0, 73, 0, 0, 0, 0,
	944, 0, 0, 945, 0, 0, 947, 0, 0, 284,
	0, 0, 941, 859, 0, 0, 788, 0, 0, 73,
	0, 0, 0, 0, 0, 781, 0, 168, 0, 0,
	0, 0, 315, 315, 0, 315, 958, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	158, 178, 73, 0, 0, 0, 0, 158, 532, 158,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 981,
	0, 699, 0, 778, 783, 776, 0, 0, 0, 0,
	158, 0, 158, 0, 0, 158, 1000, 0, 158, 0,
	599, 0, 0, 484, 786, 789, 0, 0, 724, 0,
	0, 163, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 171, 167, 0, 0, 1012, 0, 1012, 1012,
	1012, 0, 1017, 0, 315, 0, 0, 0, 0, 780,
	0, 0, 0, 169, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 779, 0, 0, 0, 0, 315, 0,
	773, 0, 0, 0, 0, 790, 0, 0, 791, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 1043, 787,
	0, 0, 0, 166, 172, 174, 175, 176, 177, 0,
	958, 180, 179, 0, 0, 0, 0, 0, 0, 0,
	158, 449, 448, 458, 459, 451, 452, 453, 454, 455,
	456, 457, 450, 0, 1070, 460, 1078, 484, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 599, 0,
	0, 0, 444, 0, 447, 0, 284, 0, 0, 1086,
	461, 462, 463, 464, 465, 466, 467, 1090, 445, 446,
	443, 449, 448, 458, 459, 451, 452, 453, 454, 455,
	456, 457, 450, 0, 0, 460, 0, 0, 0, 205,
	0, 0, 0, 0, 205, 205, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 205, 205, 0, 158, 0, 285,
	158, 158, 158, 158, 158, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 158, 0, 0, 0, 532,
	0, 0, 0, 158, 158, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	0, 158, 110, 0, 158, 675, 0, 212, 0, 0,
	0, 89, 0, 209, 0, 0, 97, 249, 99, 0,
	0, 121, 106, 0, 599, 0, 0, 242, 243, 0,
	0, 0, 0, 0, 0, 0, 205, 50, 0, 0,
	210, 230, 229, 232, 233, 234, 235, 0, 0, 83,
	231, 236, 237, 238, 0, 0, 207, 223, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 979, 0, 0, 0, 220,
	221, 203, 0, 205, 0, 260, 0, 222, 0, 0,
	218, 219, 224, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 258, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 0, 142, 143, 144, 145, 107, 82,
	93, 120, 250, 259, 256, 257, 254, 255, 253, 252,
	251, 261, 244, 245, 247, 0, 246, 74, 0, 98,
	146, 115, 91, 136, 0, 0, 158, 0, 0, 0,
	23, 24, 48, 26, 27, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 42,
	0, 0, 0, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	43, 44, 0, 0, 45, 46, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 39,
	0, 40, 41, 0, 0, 0, 0, 0, 0, 532,
	0, 0, 0, 394, 384, 0, 357, 396, 335, 349,
	404, 350, 351, 378, 323, 365, 110, 347, 0, 338,
	318, 344, 319, 336, 359, 89, 362, 334, 386, 368,
	97, 402, 99, 373, 0, 121, 106, 0, 0, 361,
	388, 363, 383, 356, 379, 328, 372, 397, 348, 376,
	398, 49, 0, 0, 72, 0, 734, 735, 0, 0,
	0, 0, 0, 83, 0, 375, 393, 346, 377, 317,
	374, 0, 321, 324, 403, 391, 341, 342, 865, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 371,
	0, 0, 0, 325, 322, 0, 358, 0, 0, 0,
	327, 0, 340, 381, 285, 389, 355, 161, 392, 353,
	352, 395, 113, 387, 337, 345, 85, 343, 118, 111,
	0, 370, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 320, 0, 122, 135, 148, 333, 390, 142, 143,
	144, 145, 107, 82, 93, 120, 331, 332, 329, 330,
	366, 367, 399, 400, 401, 382, 326, 0, 0, 385,
	369, 74, 0, 98, 146, 115, 91, 136, 394, 384,
	0, 357, 396, 335, 349, 404, 350, 351, 378, 323,
	365, 110, 347, 0, 338, 318, 344, 319, 336, 359,
	89, 362, 334, 386, 368, 97, 402, 99, 373, 0,
	121, 106, 0, 0, 361, 388, 363, 383, 356, 379,
	328, 372, 397, 348, 376, 398, 0, 0, 0, 72,
	0, 734, 735, 0, 0, 0, 0, 0, 83, 0,
	375, 393, 346, 377, 317, 374, 0, 321, 324, 403,
	391, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 380, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 371, 0, 0, 0, 325, 322,
	0, 358, 0, 0, 0, 327, 0, 340, 381, 0,
	389, 355, 161, 392, 353, 352, 395, 113, 387, 337,
	345, 85, 343, 118, 111, 0, 370, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 320, 0, 122, 135,
	148, 333, 390, 142, 143, 144, 145, 107, 82, 93,
	120, 331, 332, 329, 330, 366, 367, 399, 400, 401,
	382, 326, 0, 0, 385, 369, 74, 0, 98, 146,
	115, 91, 136, 394, 384, 0, 357, 396, 335, 349,
	404, 350, 351, 378, 323, 365, 110, 347, 0, 338,
	318, 344, 319, 336, 359, 89, 362, 334, 386, 368,
	97, 402, 99, 373, 0, 121, 106, 0, 0, 361,
	388, 363, 383, 356, 379, 328, 372, 397, 348, 376,
	398, 50, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 375, 393, 346, 377, 317,
	374, 0, 321, 324, 403, 391, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 371,
	0, 0, 0, 325, 322, 0, 358, 0, 0, 0,
	327, 0, 340, 381, 0, 389, 355, 161, 392, 353,
	352, 395, 113, 387, 337, 345, 85, 343, 118, 111,
	0, 370, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 320, 0, 122, 135, 148, 333, 390, 142, 143,
	144, 145, 107, 82, 93, 120, 331, 332, 329, 330,
	366, 367, 399, 400, 401, 382, 326, 0, 0, 385,
	369, 74, 0, 98, 146, 115, 91, 136, 394, 384,
	0, 357, 396, 335, 349, 404, 350, 351, 378, 323,
	365, 110, 347, 0, 338, 318, 344, 319, 336, 359,
	89, 362, 334, 386, 368, 97, 402, 99, 373, 0,
	121, 106, 0, 0, 361, 388, 363, 383, 356, 379,
	328, 372, 397, 348, 376, 398, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	375, 393, 346, 377, 317, 374, 0, 321, 324, 403,
	391, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 380, 354, 0, 0, 0, 0, 0, 0,
	905, 0, 339, 0, 371, 0, 0, 0, 325, 322,
	0, 358, 0, 0, 0, 327, 0, 340, 381, 0,
	389, 355, 161, 392, 353, 352, 395, 113, 387, 337,
	345, 85, 343, 118, 111, 0, 370, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 320, 0, 122, 135,
	148, 333, 390, 142, 143, 144, 145, 107, 82, 93,
	120, 331, 332, 329, 330, 366, 367, 399, 400, 401,
	382, 326, 0, 0, 385, 369, 74, 0, 98, 146,
	115, 91, 136, 394, 384, 0, 357, 396, 335, 349,
	404, 350, 351, 378, 323, 365, 110, 347, 0, 338,
	318, 344, 319, 336, 359, 89, 362, 334, 386, 368,
	97, 402, 99, 373, 0, 121, 106, 0, 0, 361,
	388, 363, 383, 356, 379, 328, 372, 397, 348, 376,
	398, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 375, 393, 346, 377, 317,
	374, 0, 321, 324, 403, 391, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 639, 0, 339, 0, 371,
	0, 0, 0, 325, 322, 0, 358, 0, 0, 0,
	327, 0, 340, 381, 0, 389, 355, 161, 392, 353,
	352, 395, 113, 387, 337, 345, 85, 343, 118, 111,
	0, 370, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 320, 0, 122, 135, 148, 333, 390, 142, 143,
	144, 145, 107, 82, 93, 120, 331, 332, 329, 330,
	366, 367, 399, 400, 401, 382, 326, 0, 0, 385,
	369, 74, 0, 98, 146, 115, 91, 136, 394, 384,
	0, 357, 396, 335, 349, 404, 350, 351, 378, 323,
	365, 110, 347, 0, 338, 318, 344, 319, 336, 359,
	89, 362, 334, 386, 368, 97, 402, 99, 373, 0,
	121, 106, 0, 0, 361, 388, 363, 383, 356, 379,
	328, 372, 397, 348, 376, 398, 0, 0, 0, 72,
	0, 543, 0, 0, 0, 0, 0, 0, 83, 0,
	375, 393, 346, 377, 317, 374, 0, 321, 324, 403,
	391, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 380, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 371, 0, 0, 0, 325, 322,
	0, 358, 0, 0, 0, 327, 0, 340, 381, 0,
	389, 355, 161, 392, 353, 352, 395, 113, 387, 337,
	345, 85, 343, 118, 111, 0, 370, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 320, 0, 122, 135,
	148, 333, 390, 142, 143, 144, 145, 107, 82, 93,
	120, 331, 332, 329, 330, 366, 367, 399, 400, 401,
	382, 326, 0, 0, 385, 369, 74, 0, 98, 146,
	115, 91, 136, 394, 384, 0, 357, 396, 335, 349,
	404, 350, 351, 378, 323, 365, 110, 347, 0, 338,
	318, 344, 319, 336, 359, 89, 362, 334, 386, 368,
	97, 402, 99, 373, 0, 121, 106, 0, 0, 361,
	388, 363, 383, 356, 379, 328, 372, 397, 348, 376,
	398, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 375, 393, 346, 377, 317,
	374, 0, 321, 324, 403, 391, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 371,
	0, 0, 0, 325, 322, 0, 358, 0, 0, 0,
	327, 0, 340, 381, 0, 389, 355, 161, 392, 353,
	352, 395, 113, 387, 337, 345, 85, 343, 118, 111,
	0, 370, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 320, 0, 122, 135, 148, 333, 390, 142, 143,
	144, 145, 107, 82, 93, 120, 331, 332, 329, 330,
	366, 367, 399, 400, 401, 382, 326, 0, 0, 385,
	369, 74, 0, 98, 146, 115, 91, 136, 394, 384,
	0, 357, 396, 335, 349, 404, 350, 351, 378, 323,
	365, 110, 347, 0, 338, 318, 344, 319, 336, 359,
	89, 362, 334, 386, 368, 97, 402, 99, 373, 0,
	121, 106, 0, 0, 361, 388, 363, 383, 356, 379,
	328, 372, 397, 348, 376, 398, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	375, 393, 346, 377, 317, 374, 0, 321, 324, 403,
	391, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 380, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 371, 0, 0, 0, 325, 322,
	0, 358, 0, 0, 0, 327, 0, 340, 381, 0,
	389, 355, 161, 392, 353, 352, 395, 113, 387, 337,
	345, 85, 343, 118, 111, 0, 370, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 320, 0, 122, 135,
	148, 333, 390, 142, 143, 144, 145, 107, 82, 93,
	120, 331, 332, 329, 330, 366, 367, 399, 400, 401,
	382, 326, 0, 0, 385, 369, 74, 0, 98, 146,
	115, 91, 136, 394, 384, 0, 357, 396, 335, 349,
	404, 350, 351, 378, 323, 365, 110, 347, 0, 338,
	318, 344, 319, 336, 359, 89, 362, 334, 386, 368,
	97, 402, 99, 373, 0, 121, 106, 0, 0, 361,
	388, 363, 383, 356, 379, 328, 372, 397, 348, 376,
	398, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 375, 393, 346, 377, 317,
	374, 0, 321, 324, 403, 391, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 360, 364, 380, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 371,
	0, 0, 0, 325, 322, 0, 358, 0, 0, 0,
	327, 0, 340, 381, 0, 389, 355, 161, 392, 353,
	352, 395, 113, 387, 337, 345, 85, 343, 118, 111,
	0, 370, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 320, 0, 122, 135, 148, 333, 390, 142, 143,
	144, 145, 107, 82, 93, 120, 331, 332, 329, 330,
	366, 367, 399, 400, 401, 382, 326, 0, 0, 385,
	369, 74, 0, 98, 146, 115, 91, 136, 110, 0,
	0, 0, 0, 212, 0, 0, 0, 89, 0, 209,
	0, 0, 97, 249, 99, 0, 0, 121, 106, 0,
	0, 0, 0, 242, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 415, 210, 230, 229, 232,
	233, 234, 235, 0, 0, 83, 231, 236, 237, 238,
	0, 0, 207, 223, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 0, 0, 0,
	0, 260, 0, 222, 0, 0, 218, 219, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 258, 0, 113, 0, 0, 0, 85, 0,
	118, 111, 0, 0, 112, 117, 100, 127, 114, 134,
	140, 141, 125, 139, 75, 124, 133, 84, 119, 77,
	131, 123, 104, 94, 95, 76, 0, 116, 88, 92,
	87, 109, 128, 129, 86, 147, 80, 138, 79, 81,
	137, 108, 126, 132, 105, 102, 78, 130, 103, 101,
	96, 90, 0, 0, 0, 122, 135, 148, 0, 0,
	142, 143, 144, 145, 107, 82, 93, 120, 250, 259,
	256, 257, 254, 255, 253, 252, 251, 261, 244, 245,
	247, 0, 246, 74, 0, 98, 146, 115, 91, 136,
	110, 0, 0, 0, 0, 212, 0, 0, 0, 89,
	0, 209, 0, 0, 97, 249, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 210, 230,
	229, 232, 233, 234, 235, 0, 0, 83, 231, 236,
	237, 238, 0, 0, 207, 223, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 203,
	0, 0, 0, 260, 0, 222, 0, 0, 218, 219,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 258, 0, 113, 0, 0, 0,
	85, 0, 118, 111, 0, 0, 112, 117, 100, 127,
	114, 134, 140, 141, 125, 139, 75, 124, 133, 84,
	119, 77, 131, 123, 104, 94, 95, 76, 0, 116,
	88, 92, 87, 109, 128, 129, 86, 147, 80, 138,
	79, 81, 137, 108, 126, 132, 105, 102, 78, 130,
	103, 101, 96, 90, 0, 0, 0, 122, 135, 148,
	0, 0, 142, 143, 144, 145, 107, 82, 93, 120,
	250, 259, 256, 257, 254, 255, 253, 252, 251, 261,
	244, 245, 247, 23, 246, 74, 0, 98, 146, 115,
	91, 136, 0, 0, 0, 110, 0, 0, 0, 0,
	212, 0, 0, 0, 89, 0, 209, 0, 0, 97,
	249, 99, 0, 0, 121, 106, 0, 0, 0, 0,
	242, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 210, 230, 229, 232, 233, 234, 235,
	0, 0, 83, 231, 236, 237, 238, 0, 0, 207,
	223, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 0, 0, 0, 0, 260, 0,
	222, 0, 0, 218, 219, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 0, 258,
	0, 113, 0, 0, 0, 85, 0, 118, 111, 0,
	0, 112, 117, 100, 127, 114, 134, 140, 141, 125,
	139, 75, 124, 133, 84, 119, 77, 131, 123, 104,
	94, 95, 76, 0, 116, 88, 92, 87, 109, 128,
	129, 86, 147, 80, 138, 79, 81, 137, 108, 126,
	132, 105, 102, 78, 130, 103, 101, 96, 90, 0,
	0, 0, 122, 135, 148, 0, 0, 142, 143, 144,
	145, 107, 82, 93, 120, 250, 259, 256, 257, 254,
	255, 253, 252, 251, 261, 244, 245, 247, 0, 246,
	74, 0, 98, 146, 115, 91, 136, 110, 0, 0,
	0, 0, 212, 0, 0, 0, 89, 0, 209, 0,
	0, 97, 249, 99, 0, 0, 121, 106, 0, 0,
	0, 0, 242, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 210, 230, 229, 232, 233,
	234, 235, 0, 0, 83, 231, 236, 237, 238, 0,
	0, 207, 223, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 0, 0, 0, 0,
	260, 0, 222, 0, 0, 218, 219, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 258, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 0, 142,
	143, 144, 145, 107, 82, 93, 120, 250, 259, 256,
	257, 254, 255, 253, 252, 251, 261, 244, 245, 247,
	110, 246, 74, 0, 98, 146, 115, 91, 136, 89,
	0, 0, 0, 0, 97, 249, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 242, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 210, 230,
	229, 232, 233, 234, 235, 0, 0, 83, 231, 236,
	237, 238, 0, 0, 0, 223, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 0,
	0, 0, 0, 260, 0, 222, 0, 0, 218, 219,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 258, 0, 113, 0, 0, 0,
	85, 0, 118, 111, 0, 1104, 112, 117, 100, 127,
	114, 134, 140, 141, 125, 139, 75, 124, 133, 84,
	119, 77, 131, 123, 104, 94, 95, 76, 0, 116,
	88, 92, 87, 109, 128, 129, 86, 147, 80, 138,
	79, 81, 137, 108, 126, 132, 105, 102, 78, 130,
	103, 101, 96, 90, 0, 0, 0, 122, 135, 148,
	0, 0, 142, 143, 144, 145, 107, 82, 93, 120,
	250, 259, 256, 257, 254, 255, 253, 252, 251, 261,
	244, 245, 247, 110, 246, 74, 0, 98, 146, 115,
	91, 136, 89, 0, 0, 0, 0, 97, 249, 99,
	0, 0, 121, 106, 0, 0, 0, 0, 242, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 210, 230, 229, 232, 233, 234, 235, 0, 0,
	83, 231, 236, 237, 238, 0, 0, 0, 223, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 0, 0, 0, 0, 260, 0, 222, 0,
	0, 218, 219, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 258, 0, 113,
	0, 0, 0, 85, 0, 118, 111, 0, 0, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 81, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 0, 0,
	122, 135, 148, 0, 0, 142, 143, 144, 145, 107,
	82, 93, 120, 250, 259, 256, 257, 254, 255, 253,
	252, 251, 261, 244, 245, 247, 110, 246, 74, 0,
	98, 146, 115, 91, 136, 89, 0, 0, 0, 0,
	97, 0, 99, 0, 0, 121, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 449,
	448, 458, 459, 451, 452, 453, 454, 455, 456, 457,
	450, 0, 0, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	0, 0, 113, 0, 0, 0, 85, 0, 118, 111,
	0, 0, 112, 117, 100, 127, 114, 134, 140, 141,
	125, 139, 75, 124, 133, 84, 119, 77, 131, 123,
	104, 94, 95, 76, 0, 116, 88, 92, 87, 109,
	128, 129, 86, 147, 80, 138, 79, 81, 137, 108,
	126, 132, 105, 102, 78, 130, 103, 101, 96, 90,
	0, 0, 0, 122, 135, 148, 0, 0, 142, 143,
	144, 145, 107, 82, 93, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 98, 146, 115, 91, 136, 110, 0,
	0, 0, 437, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 97, 0, 99, 0, 0, 121, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 439, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	434, 433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 113, 0, 0, 0, 85, 0,
	118, 111, 0, 0, 112, 117, 100, 127, 114, 134,
	140, 141, 125, 139, 75, 124, 133, 84, 119, 77,
	131, 123, 104, 94, 95, 76, 0, 116, 88, 92,
	87, 109, 128, 129, 86, 147, 80, 138, 79, 81,
	137, 108, 126, 132, 105, 102, 78, 130, 103, 101,
	96, 90, 0, 0, 0, 122, 135, 148, 0, 110,
	142, 143, 144, 145, 107, 82, 93, 120, 89, 0,
	0, 0, 0, 97, 0, 99, 0, 0, 121, 106,
	0, 0, 0, 74, 0, 98, 146, 115, 91, 136,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	67, 0, 0, 0, 70, 113, 0, 0, 0, 85,
	0, 118, 111, 0, 0, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 0, 0, 122, 135, 148, 0,
	0, 142, 143, 144, 145, 107, 82, 93, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 98, 146, 115, 91,
	136, 110, 0, 0, 0, 531, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 97, 0, 99, 0, 0,
	121, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 533, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 0, 142, 143, 144, 145, 107, 82, 93,
	120, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 74, 0, 98, 146,
	115, 91, 136, 89, 0, 0, 0, 0, 97, 0,
	99, 0, 0, 121, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	113, 0, 0, 0, 85, 0, 118, 111, 0, 0,
	112, 117, 100, 127, 114, 134, 140, 141, 125, 139,
	75, 124, 133, 84, 119, 77, 131, 123, 104, 94,
	95, 76, 0, 116, 88, 92, 87, 109, 128, 129,
	86, 147, 80, 138, 79, 81, 137, 108, 126, 132,
	105, 102, 78, 130, 103, 101, 96, 90, 0, 0,
	0, 122, 135, 148, 0, 0, 142, 143, 144, 145,
	107, 82, 93, 120, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 74,
	0, 98, 146, 115, 91, 136, 89, 0, 0, 0,
	0, 97, 0, 99, 0, 0, 121, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 0, 0, 0, 122, 135, 148, 0, 110, 142,
	143, 144, 145, 107, 82, 93, 120, 89, 0, 0,
	0, 0, 97, 0, 99, 0, 0, 121, 106, 0,
	0, 0, 74, 0, 98, 146, 115, 91, 136, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 626,
	0, 0, 627, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 113, 0, 0, 0, 85, 0,
	118, 111, 0, 0, 112, 117, 100, 127, 114, 134,
	140, 141, 125, 139, 75, 124, 133, 84, 119, 77,
	131, 123, 104, 94, 95, 76, 0, 116, 88, 92,
	87, 109, 128, 129, 86, 147, 80, 138, 79, 81,
	137, 108, 126, 132, 105, 102, 78, 130, 103, 101,
	96, 90, 0, 0, 0, 122, 135, 148, 0, 0,
	142, 143, 144, 145, 107, 82, 93, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 98, 146, 115, 91, 136,
	110, 0, 0, 0, 531, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 97, 0, 99, 0, 0, 121,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	533, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 113, 0, 0, 0,
	85, 0, 118, 111, 0, 0, 529, 117, 100, 127,
	114, 134, 140, 141, 125, 139, 75, 124, 133, 84,
	119, 77, 131, 123, 104, 94, 95, 76, 0, 116,
	88, 92, 87, 109, 128, 129, 86, 147, 80, 138,
	79, 81, 137, 108, 126, 132, 105, 102, 78, 130,
	103, 101, 96, 90, 0, 0, 0, 122, 135, 148,
	0, 110, 142, 143, 144, 145, 107, 82, 93, 120,
	89, 0, 0, 0, 0, 97, 0, 99, 0, 0,
	121, 106, 0, 0, 0, 74, 0, 98, 146, 115,
	91, 136, 0, 0, 0, 0, 50, 0, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 110, 142, 143, 144, 145, 107, 82, 93,
	120, 89, 0, 0, 0, 0, 97, 0, 99, 0,
	0, 121, 106, 0, 0, 0, 74, 0, 98, 146,
	115, 91, 136, 0, 0, 0, 0, 0, 0, 0,
	159, 0, 533, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 110, 142, 143, 144, 145, 107, 82,
	93, 120, 89, 0, 0, 0, 0, 97, 0, 99,
	0, 0, 121, 106, 0, 0, 0, 74, 0, 98,
	146, 115, 91, 136, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 439, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 113,
	0, 0, 0, 85, 0, 118, 111, 0, 0, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 81, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 0, 0,
	122, 135, 148, 0, 0, 142, 143, 144, 145, 107,
	82, 93, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 74, 0,
	98, 146, 115, 91, 136, 509, 89, 0, 0, 0,
	0, 97, 0, 99, 0, 0, 121, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 113, 0, 0, 0, 85, 0, 118,
	111, 0, 0, 112, 117, 100, 127, 114, 134, 140,
	141, 125, 139, 75, 124, 133, 84, 119, 77, 131,
	123, 104, 94, 95, 76, 0, 116, 88, 92, 87,
	109, 128, 129, 86, 147, 80, 138, 79, 81, 137,
	108, 126, 132, 105, 102, 78, 130, 103, 101, 96,
	90, 271, 0, 0, 122, 135, 148, 0, 110, 142,
	143, 144, 145, 107, 82, 93, 120, 89, 0, 0,
	0, 0, 97, 0, 99, 0, 0, 121, 106, 0,
	0, 0, 74, 0, 98, 146, 115, 91, 136, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 113, 0, 0, 0, 85, 0,
	118, 111, 0, 0, 112, 117, 100, 127, 114, 134,
	140, 141, 125, 139, 75, 124, 133, 84, 119, 77,
	131, 123, 104, 94, 95, 76, 0, 116, 88, 92,
	87, 109, 128, 129, 86, 147, 80, 138, 79, 81,
	137, 108, 126, 132, 105, 102, 78, 130, 103, 101,
	96, 90, 0, 0, 0, 122, 135, 148, 0, 110,
	142, 143, 144, 145, 107, 82, 93, 120, 89, 0,
	0, 0, 0, 97, 0, 99, 0, 0, 121, 106,
	0, 0, 0, 74, 0, 98, 146, 115, 91, 136,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	161, 0, 0, 0, 0, 113, 0, 0, 0, 85,
	0, 118, 111, 0, 0, 112, 117, 100, 127, 114,
	134, 140, 141, 125, 139, 75, 124, 133, 84, 119,
	77, 131, 123, 104, 94, 95, 76, 0, 116, 88,
	92, 87, 109, 128, 129, 86, 147, 80, 138, 79,
	81, 137, 108, 126, 132, 105, 102, 78, 130, 103,
	101, 96, 90, 0, 0, 0, 122, 135, 148, 0,
	110, 142, 143, 144, 145, 107, 82, 93, 120, 89,
	0, 0, 0, 0, 97, 0, 99, 0, 0, 121,
	106, 0, 0, 0, 74, 0, 98, 146, 115, 91,
	136, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 113, 0, 0, 0,
	85, 0, 118, 111, 0, 0, 112, 117, 100, 127,
	114, 134, 140, 141, 125, 139, 75, 124, 133, 84,
	119, 77, 131, 123, 104, 94, 95, 76, 0, 116,
	88, 92, 87, 109, 128, 129, 86, 147, 80, 138,
	79, 81, 137, 108, 126, 132, 105, 102, 78, 130,
	103, 101, 96, 90, 0, 0, 0, 122, 135, 148,
	0, 110, 142, 143, 144, 145, 107, 82, 93, 120,
	89, 0, 0, 0, 0, 97, 0, 99, 0, 0,
	121, 106, 0, 0, 0, 74, 0, 98, 146, 115,
	91, 136, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 113, 0, 0,
	0, 85, 0, 118, 111, 0, 0, 112, 117, 100,
	127, 114, 134, 140, 141, 125, 139, 75, 124, 133,
	84, 119, 77, 131, 123, 104, 94, 95, 76, 0,
	116, 88, 92, 87, 109, 128, 129, 86, 147, 80,
	138, 79, 81, 137, 108, 126, 132, 105, 102, 78,
	130, 103, 101, 96, 90, 0, 0, 0, 122, 135,
	148, 0, 110, 142, 143, 144, 145, 107, 82, 93,
	120, 89, 0, 0, 0, 0, 97, 0, 99, 0,
	0, 121, 106, 0, 0, 0, 74, 0, 98, 146,
	115, 91, 136, 0, 0, 0, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 113, 0,
	0, 0, 85, 0, 118, 111, 0, 0, 112, 117,
	100, 127, 114, 134, 140, 141, 125, 139, 75, 124,
	133, 84, 119, 77, 131, 123, 104, 94, 95, 76,
	0, 116, 88, 92, 87, 109, 128, 129, 86, 147,
	80, 138, 79, 81, 137, 108, 126, 132, 105, 102,
	78, 130, 103, 101, 96, 90, 0, 0, 0, 122,
	135, 148, 0, 110, 142, 143, 144, 145, 107, 82,
	93, 120, 89, 0, 0, 0, 0, 97, 0, 99,
	0, 0, 121, 106, 0, 0, 0, 74, 0, 98,
	146, 115, 91, 136, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 113,
	0, 0, 0, 85, 0, 118, 111, 0, 0, 112,
	117, 100, 127, 114, 134, 140, 141, 125, 139, 75,
	124, 133, 84, 119, 77, 131, 123, 104, 94, 95,
	76, 0, 116, 88, 92, 87, 109, 128, 129, 86,
	147, 80, 138, 79, 281, 137, 108, 126, 132, 105,
	102, 78, 130, 103, 101, 96, 90, 0, 0, 0,
	122, 135, 148, 0, 0, 142, 143, 144, 145, 282,
	280, 279, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	98, 146, 115, 91, 136,
}
var yyPact = [...]int{

	1894, -1000, -162, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 768, 822, -1000, -1000, -1000, -1000, -1000, -1000, 567,
	5531, 1, 63, 8, 7541, 48, 1305, 8054, -1000, -57,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 655, -1000, -1000,
	-1000, -1000, -1000, 756, 761, 656, 748, 690, -1000, 4172,
	2, 6663, 7370, 8225, -1000, 422, 35, 8054, -131, -3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47,
	8054, -1000, 8054, -8, 421, -8, 8054, -1000, 92, -1000,
	-1000, -1000, 8054, 399, 718, 65, 2478, 2478, 2478, 2478,
	-52, 2478, 2478, 618, -1000, -1000, -1000, -1000, 2478, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 326, 723,
	4579, 4579, 768, -1000, 655, -1000, -1000, -1000, 704, -1000,
	-1000, 185, 785, -1000, 5360, 84, -1000, 4579, 1470, 500,
	-1000, -1000, 500, -1000, -1000, 75, -1000, -1000, 4965, 4965,
	4965, 4965, 4965, 4965, 4965, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 500,
	-1000, 4377, 500, 500, 500, 500, 500, 500, 4579, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 7199, 569, 634, -1000, -1000, -1000, 745, 6119,
	6492, 8054, 472, -1000, 281, 7883, 3123, -1000, -1000, -1000,
	-1000, 717, -1000, 137, -1000, 83, 419, -1000, -18, 378,
	2478, 11, 8054, 155, 8054, 2478, 9, 8054, 743, 617,
	8054, -1000, 3768, -1000, 2478, 2478, 2478, 2478, 2478, 2478,
	2478, 2478, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2478, 2478,
	-1000, -1000, 8054, -1000, -1000, -1000, -1000, 810, 121, 648,
	82, 496, -1000, 389, 756, 326, 690, 6290, 629, -1000,
	-1000, 8054, -1000, 4579, 4579, 364, -1000, 7005, -1000, -1000,
	2908, 125, 4965, 263, 200, 4965, 4965, 4965, 4965, 4965,
	4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965, 4965,
	272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 359,
	-1000, 655, 852, 852, 102, 102, 102, 102, 102, 102,
	5158, 1674, 326, 415, 198, 4377, 4172, 4172, 4579, 4579,
	4172, 751, 160, 198, 7712, -1000, 326, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4172, 4172, 4172, 4172, -23, 8054,
	-1000, 7883, 6663, 6663, 6663, 6663, 6663, -1000, 666, 659,
	-1000, 682, 669, 660, 8054, -1000, 411, 6119, 66, 500,
	-1000, 6834, -1000, -1000, -23, 6663, 8054, -1000, -1000, 7883,
	281, -1000, -1000, -1000, -1000, 4579, 3553, 2263, 149, 214,
	-107, -1000, -1000, 510, -1000, 510, 510, 510, 510, -87,
	-87, -87, -87, -1000, -1000, -1000, -1000, -1000, 554, -1000,
	510, 510, 510, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 551, 551, 551, 512, 512, 514, -1000, 8054, -1000,
	741, 1270, -1000, 8054, -1000, -1000, 8054, 2478, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 680, 4579, 4579, 3553, 4579, -1000, -1000,
	-1000, 723, -1000, 751, 784, -1000, 705, 694, 4172, -1000,
	-1000, 125, 148, -1000, -1000, 371, -1000, -1000, -1000, -1000,
	81, 500, -1000, 1420, -1000, -1000, -1000, -1000, 263, 4965,
	4965, 4965, 277, 1420, 1121, 401, 291, 102, 178, 178,
	124, 124, 124, 124, 124, 590, 590, -1000, -1000, -1000,
	326, -1000, -1000, -1000, 326, 4172, 490, -1000, -1000, 4579,
	-1000, 326, 394, 394, 269, 583, 394, 4172, 156, -1000,
	4579, 326, -1000, 394, 326, 394, 394, 478, 500, -1000,
	513, 634, 592, 608, 763, -1000, -1000, -1000, -1000, 642,
	-1000, 633, -1000, -1000, -1000, -1000, -1000, 33, 32, 10,
	7712, -1000, 801, 480, -1000, -1000, -1000, 198, -1000, 80,
	465, 2048, -1000, -1000, -1000, -1000, -1000, -1000, 549, 732,
	110, 339, -1000, -1000, 724, -1000, 171, -109, -1000, -1000,
	261, -87, -87, -1000, -1000, 101, 707, 101, 101, 101,
	280, -1000, -1000, -1000, -1000, 254, -1000, -1000, -1000, 236,
	-1000, 594, 7712, 2478, -1000, -1000, 96, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -38,
	-1000, 2478, -1000, 676, 198, 198, -1000, -1000, 8054, -1000,
	-1000, -1000, -1000, 494, -1000, -1000, -1000, 2693, 4172, -1000,
	277, 1420, 517, -1000, 4965, 4965, -1000, -1000, 394, 4172,
	198, -1000, -1000, -1000, 165, 272, 165, -145, 475, 151,
	-1000, 4579, 247, -1000, -1000, -1000, -1000, -1000, 588, 7883,
	500, -1000, 5926, 7712, 768, 4579, -1000, -1000, 4579, 548,
	-1000, 4579, -1000, -1000, -1000, 500, 500, 500, 357, -1000,
	768, -1000, 3338, 2263, -1000, 2263, 7712, -1000, 293, -1000,
	-1000, 519, 116, -1000, -1000, -1000, 425, 101, 101, -1000,
	288, 159, -1000, -1000, -1000, 391, -1000, 458, 388, 8054,
	-1000, -1000, -1000, 8054, -1000, -1000, -1000, -1000, -1000, 7712,
	-1000, -1000, -1000, 801, 6663, -1000, -1000, 326, -1000, 4965,
	1420, 1420, -1000, -1000, 326, 510, 510, -1000, 510, 512,
	-1000, 510, -67, 510, -70, 326, 326, 500, -137, -1000,
	198, 4579, -1000, 725, 434, 453, -1000, -1000, 3970, 326,
	374, 79, 357, 756, 198, 198, 7712, 198, 7712, 7712,
	7712, 5733, 7712, 756, 2048, -1000, 353, -1000, 510, -1000,
	-103, 809, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 279, 233, -1000, 204, 2478, -1000,
	-1000, 735, 780, 455, -1000, 1420, -1000, -1000, 25, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4965, 326, 275,
	198, 731, -1000, 500, -1000, -1000, 516, 7712, 7712, -1000,
	-1000, 350, -1000, 300, 300, 300, 66, -1000, -1000, 514,
	7712, -1000, 85, -1000, -121, -1000, 412, 395, -1000, 500,
	764, 760, -1000, -1000, 7, -1000, -1000, 808, -1000, 500,
	-1000, 655, 72, -1000, 7712, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 174, 730, -1000, 729, -1000, -1000, -1000, -39,
	-1000, 4579, 4579, 326, 19, -153, 7883, 453, 326, 7712,
	-1000, -1000, 274, -1000, -1000, 287, -1000, 7712, 198, 433,
	-1000, 673, -149, -158, 281, -1000, -1000, -1000, -1000, -39,
	688, -1000, 658, -1000, -1000, -42, -151, -45, -156, 500,
	-159, 4772, -1000, 325, 326, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1036, 7, 471, 1035, 1033, 1025, 1021, 1020, 1015,
	1013, 1012, 1011, 1009, 1008, 1006, 1003, 1002, 1001, 1000,
	998, 997, 996, 995, 171, 987, 986, 985, 53, 984,
	54, 982, 978, 29, 603, 36, 33, 464, 977, 21,
	46, 69, 971, 35, 969, 968, 962, 961, 40, 959,
	958, 871, 956, 955, 15, 27, 952, 951, 949, 948,
	47, 178, 946, 945, 944, 943, 942, 941, 31, 4,
	5, 14, 13, 938, 24, 11, 937, 37, 936, 935,
	933, 932, 25, 930, 39, 927, 19, 38, 924, 16,
	43, 28, 12, 6, 923, 41, 922, 304, 916, 85,
	915, 904, 903, 902, 897, 50, 284, 479, 117, 44,
	896, 895, 9, 1097, 63, 42, 18, 894, 26, 52,
	34, 893, 892, 32, 891, 890, 885, 884, 880, 879,
	266, 877, 876, 875, 10, 22, 874, 869, 57, 20,
	867, 866, 865, 864, 51, 863, 30, 862, 861, 852,
	23, 17, 848, 2, 847, 842, 3, 836, 835, 834,
	0, 49, 833, 831, 45,
}
var yyR1 = [...]int{

	0, 158, 159, 159, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 162, 162,
	46, 46, 90, 90, 10, 10, 10, 94, 94, 94,
	111, 111, 121, 121, 11, 11, 11, 11, 16, 147,
	148, 148, 148, 144, 124, 124, 124, 127, 127, 125,
	125, 125, 125, 125, 125, 125, 126, 126, 126, 126,
	126, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	143, 143, 130, 130, 138, 138, 139, 139, 139, 136,
	136, 137, 137, 140, 140, 140, 131, 131, 131, 131,
	131, 131, 133, 133, 141, 141, 134, 134, 134, 135,
	135, 142, 142, 142, 142, 142, 132, 132, 145, 152,
	152, 152, 152, 146, 146, 154, 154, 153, 149, 149,
	149, 150, 150, 150, 151, 151, 151, 12, 12, 12,
	12, 12, 157, 155, 155, 156, 156, 13, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 122, 122, 122,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 163, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 110, 110, 110, 109, 109, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 117, 117, 116, 116, 116, 115, 115,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 98, 98, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 164, 164, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 120, 120, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 95, 96, 96, 99, 99, 100, 100, 97, 97,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 102, 102, 102, 103, 103, 104, 104, 104, 112,
	112, 107, 107, 108, 108, 113, 113, 114, 114, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 160, 161, 118, 119, 119, 119,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 1, 2, 1,
	1, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 3, 4,
	2, 4, 2, 2, 2, 2, 3, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -158, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 132, 116, 125, 49, 144, 145,
	147, 148, 25, 126, 127, 130, 131, -160, 8, 207,
	53, -159, 220, -82, 15, -26, 5, -24, -163, -24,
	-24, -24, -24, -24, -147, 53, -104, 119, 70, 117,
	123, -107, 56, -106, 213, 144, 155, 149, 176, 168,
	166, 169, 195, 65, 147, 128, 164, 160, 158, 27,
	181, 218, 159, 196, 153, 154, 180, 32, 215, 34,
	136, 179, 175, 178, 152, 174, 38, 194, 171, 161,
	18, 131, 134, 124, 138, 217, 157, 135, 130, 148,
	197, 37, 185, 151, 145, 142, 172, 137, 162, 163,
	177, 150, 173, 146, 139, 186, 219, 170, 167, 143,
	140, 141, 190, 191, 192, 193, 216, 165, 187, -97,
	119, 121, 117, 117, 118, 119, 117, -51, -113, 56,
	-106, 119, 117, 106, 169, 112, 188, 118, 32, 138,
	-122, 117, 189, 141, 190, 191, 192, 193, 56, 197,
	196, -113, 146, -118, -118, -118, -118, -118, -2, -86,
	17, 16, -5, -3, -160, 6, 20, 21, -30, 39,
	40, -25, -36, 97, -37, -113, -56, 72, -61, 29,
	56, -106, 23, -60, -57, -75, -73, -74, 106, 107,
	95, 96, 103, 73, 108, -65, -63, -64, -66, 58,
	57, 66, 59, 60, 61, 62, 67, 68, 69, -107,
	-71, -160, 43, 44, 208, 209, 212, 210, 75, 33,
	198, 206, 205, 204, 202, 203, 200, 201, 122, 199,
	101, 207, -97, -39, -40, -41, -42, -53, -74, -160,
	-51, 11, -46, -51, -93, -121, -94, -95, 197, 196,
	195, 169, 194, -75, -107, -113, -148, -144, 56, 118,
	-51, 207, -100, 122, 117, -51, -51, -99, 122, 56,
	-99, -51, 109, -51, 56, 30, 199, 56, 138, 117,
	139, 119, -119, -160, -108, -107, -105, 71, 22, 24,
	183, 74, 106, 16, 75, 105, 208, 112, 47, 200,
	201, 198, 199, 188, 29, 10, 25, 126, 21, 99,
	114, 78, 79, 129, 23, 127, 69, 19, 50, 11,
	13, 14, 122, 121, 90, 118, 45, 8, 108, 26,
	87, 41, 28, 43, 88, 17, 202, 203, 31, 212,
	133, 101, 48, 35, 72, 67, 51, 70, 15, 46,
	89, 115, 207, 44, 6, 211, 30, 125, 42, 117,
	189, 77, 120, 68, 5, 123, 9, 49, 52, 204,
	205, 206, 33, 76, 12, -119, -119, -119, 142, 143,
	-119, -119, 51, -119, -161, 55, -87, 19, 31, -37,
	-113, -83, -84, -37, -82, -2, -24, 35, -28, 21,
	64, 11, -110, 71, 70, 87, -109, 22, -107, 58,
	109, -37, -58, 90, 72, 88, 89, 74, 92, 91,
	102, 95, 96, 97, 98, 99, 100, 101, 93, 94,
	105, 80, 81, 82, 83, 84, 85, 86, -98, -160,
	-74, -160, 110, 111, -61, -61, -61, -61, -61, -61,
	-61, -160, -2, -69, -37, -160, -160, -160, -160, -160,
	-160, -160, -78, -37, -160, -164, -160, -164, -164, -164,
	-164, -164, -164, -164, -160, -160, -160, -160, -52, 26,
	-51, 30, 54, -47, -49, -48, -50, 41, 45, 47,
	42, 43, 44, 48, -117, 22, -39, -160, -116, 134,
	-115, 22, -113, 58, -51, -162, 54, 11, 52, 54,
	-93, -111, -108, 58, 30, 80, 109, 55, 54, -124,
	-127, -129, -128, -125, -126, 166, 167, 106, 170, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 128,
	162, 163, 164, 165, 149, 150, 151, 152, 153, 154,
	155, 157, 158, 159, 160, 161, 56, -119, 119, -51,
	72, -51, -119, 120, -51, 23, 51, -51, -114, -113,
	-105, -119, -119, -119, -119, -119, -119, -119, -119, -119,
	-119, -51, 9, 90, 54, 18, 109, 54, -85, 24,
	25, -86, -161, -30, -62, -107, 59, 62, -29, 42,
	-51, -37, -37, -67, 67, 72, 68, 69, -109, 97,
	-114, -108, -105, -61, -68, -71, -74, 63, 90, 88,
	89, 74, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -120, 56, 58,
	56, -60, -60, -107, -35, 21, -34, -36, -161, 54,
	-161, -2, -34, -34, -37, -37, -34, -28, -76, -77,
	76, -107, -161, -34, -35, -34, -34, -90, 134, -51,
	-93, -40, -41, -41, -40, -41, 41, 41, 41, 46,
	41, 46, 41, -48, -113, -161, -54, 49, 121, 50,
	-160, -115, -90, -39, -51, -95, -118, -37, -108, -114,
	-149, -150, -151, -108, 58, 59, -144, -145, -152, 124,
	123, -146, 118, 28, -140, 67, 72, -136, 186, -130,
	53, -130, -130, -130, -130, -134, 169, -134, -134, -134,
	53, -130, -130, -130, -138, 53, -138, -138, -139, 53,
	-139, -112, 52, -51, 23, -101, 115, -157, 113, 183,
	169, 65, 29, 114, 15, 208, 134, 219, 56, 135,
	-51, -51, -119, 37, -37, -37, -84, -87, -96, 19,
	11, 33, 33, -34, 67, 68, 69, 109, -160, -68,
	-61, -61, -61, -33, 129, 71, -161, -161, -34, 54,
	-37, -161, -161, -161, 54, 52, 22, -161, -34, -79,
	-77, 78, -37, -161, -161, -161, -161, -161, -59, 30,
	33, -2, -160, -160, -55, 12, -44, -43, 51, 52,
	-45, 51, -43, 41, 41, 118, 118, 118, -91, -107,
	-55, -55, 109, 54, -151, 80, 53, 28, -146, 56,
	56, -131, 29, 67, -137, 187, 59, -134, -134, -135,
	105, 30, -135, -135, -135, -143, 58, 59, 59, 51,
	-107, -119, -118, -102, -103, 120, 22, 118, 28, 134,
	-119, 38, -51, -38, 11, 97, -108, -35, -33, 71,
	-61, -61, -161, -36, -123, 106, 166, 128, 164, 160,
	180, 171, 185, 162, 186, -120, -123, 213, -82, 79,
	-37, 77, -92, 51, -93, -70, -72, -71, -160, -2,
	-88, -107, -91, -82, -37, -37, 53, -37, -160, -160,
	-160, -161, 54, -82, -150, -151, -154, -153, -107, 56,
	-133, 51, 58, 59, 60, 67, 198, 55, -135, -135,
	56, 56, 106, 55, 54, 54, 55, 54, -51, -51,
	-118, -107, -55, -39, -161, -61, -161, -130, -130, -130,
	-139, -130, 154, -130, 154, -161, -161, -160, -32, 211,
	-37, 27, -92, 54, -161, -161, -161, 54, 109, -161,
	-86, -89, -107, -89, -89, -89, -116, -107, -86, 55,
	54, -130, -141, 183, 9, 58, 59, 59, -119, 26,
	-80, 13, -134, 56, -61, -161, 58, 28, -72, 33,
	-2, -160, -107, -107, 54, 55, -161, -161, -161, -54,
	-112, -153, -142, 124, 28, 123, 198, 55, 55, -160,
	-81, 14, 16, -31, 90, 216, 9, -70, -2, 109,
	-107, -132, 65, 28, 28, -155, -156, 134, -37, -69,
	-161, 214, 48, 217, -93, -161, -107, 58, -161, 54,
	-107, 38, 215, 218, -156, 33, 38, 136, 216, 137,
	217, -160, 218, -61, 133, -161, -161,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 436, 0, 211, 211, 211, 211, 211, 211, 0,
	496, 478, 0, 0, 0, 0, 197, 201, 202, 0,
	204, 205, 675, 675, 675, 675, 675, 0, 33, 34,
	673, 1, 3, 444, 0, 0, 215, 218, 213, 0,
	478, 0, 0, 0, 54, 0, 0, 663, 0, 476,
	497, 498, 501, 502, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 0,
	0, 479, 0, 474, 0, 474, 0, 172, 282, 505,
	506, 663, 0, 0, 0, 0, 676, 676, 676, 676,
	0, 676, 676, 190, 192, 193, 194, 195, 676, 198,
	199, 200, 203, 206, 207, 208, 209, 210, 27, 448,
	0, 0, 436, 29, 0, 211, 216, 217, 221, 219,
	220, 212, 0, 229, 233, 0, 290, 0, 295, 297,
	-2, -2, 0, 332, 333, 334, 335, 336, 0, 0,
	0, 0, 0, 0, 0, 359, 360, 361, 362, 421,
	422, 423, 424, 425, 426, 427, 428, 299, 300, 418,
	468, 0, 0, 0, 0, 0, 0, 0, 409, 0,
	383, 383, 383, 383, 383, 383, 383, 383, 0, 0,
	0, 0, 0, 0, 240, 242, 243, 244, 263, 0,
	265, 0, 0, 40, 44, 0, 0, 469, -2, -2,
	-2, 604, -2, 0, 418, 0, 0, 60, 0, 0,
	676, 0, 0, 0, 0, 676, 0, 0, 0, 0,
	0, 171, 0, 173, 676, 676, 676, 676, 676, 676,
	676, 676, 182, 677, 678, 503, 504, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 183, 184, 185, 676, 676,
	187, 188, 0, 196, 28, 674, 22, 0, 0, 445,
	0, 437, 438, 441, 444, 27, 218, 0, 223, 222,
	214, 0, 230, 0, 0, 0, 234, 0, 236, 237,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 320, 321, 322, 323, 296, 0,
	310, 0, 0, 0, 352, 353, 354, 355, 356, 357,
	0, 225, 27, 0, 330, 0, 0, 0, 0, 0,
	0, 221, 0, 410, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 0, 225, 0, 0, 42, 0,
	281, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	273, 0, 0, 0, 0, 264, 0, 0, 284, 635,
	266, 0, 268, 269, 42, 0, 0, 38, 39, 0,
	45, 675, 50, 51, 48, 0, 0, 148, 0, 113,
	109, 65, 66, 102, 68, 102, 102, 102, 102, 126,
	126, 126, 126, 94, 95, 96, 97, 98, 0, 81,
	102, 102, 102, 85, 69, 70, 71, 72, 73, 74,
	75, 104, 104, 104, 106, 106, 499, 56, 0, 58,
	0, 0, 160, 0, 168, 475, 0, 676, 283, 507,
	508, 174, 175, 176, 177, 178, 179, 180, 181, 186,
	189, 191, 449, 0, 0, 0, 0, 0, 440, 442,
	443, 448, 30, 221, 0, 429, 0, 0, 0, 224,
	25, 291, 292, 294, 311, 0, 313, 315, 235, 231,
	0, 419, -2, 301, 302, 326, 327, 328, 0, 0,
	0, 0, 324, 306, 0, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 351, 394, 395,
	0, 349, 350, 358, 0, 0, 226, 227, 329, 0,
	467, 27, 0, 0, 0, 0, 0, 0, 416, 413,
	0, 0, 384, 0, 0, 0, 0, 0, 0, 280,
	288, 241, 259, 261, 0, 256, 271, 272, 274, 0,
	276, 0, 278, 279, 245, 246, 247, 0, 0, 0,
	0, 267, 288, 288, 41, 470, 46, 471, 419, 0,
	59, 149, 151, 154, 155, 156, 61, 62, 0, 0,
	0, 0, 143, 144, 116, 114, 0, 111, 110, 67,
	0, 126, 126, 88, 89, 129, 0, 129, 129, 129,
	0, 82, 83, 84, 76, 0, 77, 78, 79, 0,
	80, 0, 0, 676, 477, 675, 491, 161, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 0,
	167, 676, 170, 0, 446, 447, 439, 23, 0, 472,
	473, 430, 431, 238, 312, 314, 316, 0, 225, 303,
	324, 307, 0, 304, 0, 0, 298, 363, 0, 0,
	331, -2, 366, 367, 0, 0, 0, 0, 436, 0,
	414, 0, 0, 374, 385, 386, 387, 388, 461, 0,
	0, -2, 0, 0, 436, 0, 253, 260, 0, 0,
	254, 0, 255, 275, 277, 0, 0, 0, 0, 251,
	436, 37, 0, 0, 152, 0, 0, 139, 0, 141,
	142, 122, 0, 115, 64, 112, 0, 129, 129, 90,
	0, 0, 91, 92, 93, 0, 100, 0, 0, 0,
	500, 57, 157, 0, 675, 492, 493, 494, 495, 0,
	169, 450, 24, 288, 0, 232, 420, 0, 305, 0,
	325, 308, 364, 228, 0, 102, 102, 399, 102, 106,
	402, 102, 404, 102, 407, 0, 0, 0, 411, 373,
	417, 0, 31, 0, 461, 451, 463, 465, 0, 27,
	0, 457, 0, 444, 289, 257, 0, 262, 0, 0,
	0, 265, 0, 444, 150, 153, 0, 145, 102, 140,
	124, 0, 117, 118, 119, 120, 121, 103, 86, 87,
	130, 127, 128, 99, 0, 0, 107, 0, 676, 158,
	159, 0, 432, 239, 365, 309, 368, 396, 126, 400,
	401, 403, 405, 406, 408, 370, 369, 0, 0, 0,
	415, 0, 32, 0, 466, -2, 0, 0, 0, 43,
	35, 0, 249, 0, 0, 0, 284, 252, 36, 499,
	0, 147, 131, 125, 0, 101, 0, 0, 55, 0,
	434, 0, 397, 398, 389, 372, 412, 0, 464, 0,
	-2, 0, 459, 458, 0, 258, 285, 286, 287, 248,
	138, 146, 136, 0, 133, 135, 123, 105, 108, 0,
	26, 0, 0, 0, 0, 0, 0, 454, 27, 0,
	250, 63, 0, 132, 134, 0, 163, 0, 435, 433,
	371, 0, 0, 0, 462, -2, 460, 137, 162, 0,
	0, 390, 0, 393, 164, 0, 391, 0, 0, 0,
	0, 0, 392, 0, 0, 165, 166,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 220,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:281
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:286
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:287
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:291
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:314
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:322
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:326
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:332
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:359
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:366
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:378
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:390
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:394
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:400
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:406
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:410
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:424
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:429
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:433
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:458
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:462
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:468
		{
			yyVAL.str = SessionStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.str = GlobalStr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:478
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:483
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:488
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:492
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:498
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:527
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:701
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:711
		{
			yyVAL.optVal = nil
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:715
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:720
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:724
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:732
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:736
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:742
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:750
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:754
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:769
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:773
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:782
		{
			yyVAL.optVal = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:786
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:794
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:811
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:829
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:833
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:838
		{
			yyVAL.str = ""
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:847
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.colKeyOpt = colKey
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:859
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:863
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:868
		{
			yyVAL.optVal = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:872
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:878
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:884
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:888
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:896
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:916
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:922
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:927
		{
			yyVAL.str = ""
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:935
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:951
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:975
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:980
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:985
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:989
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 162:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:995
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 165:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1027
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1035
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1040
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = SessionStr
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = GlobalStr
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.statement = &Begin{}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.statement = &Begin{}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &Commit{}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &Rollback{}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.statement = &OtherRead{}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.statement = &OtherRead{}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &OtherRead{}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1233
		{
			setAllowComments(yylex, true)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.bytes2 = nil
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.str = UnionStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.str = UnionAllStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.str = UnionDistinctStr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.str = SQLCacheStr
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.str = DistinctStr
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.str = StraightJoinHint
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.selectExprs = nil
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1453
		{
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1459
		{
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.empty = struct{}{}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.empty = struct{}{}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = JoinStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = JoinStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.str = JoinStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = StraightJoinStr
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.str = LeftJoinStr
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = LeftJoinStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = RightJoinStr
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = RightJoinStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.str = NaturalJoinStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.indexHints = nil
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.str = IsNullStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.str = IsNotNullStr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.str = IsTrueStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.str = IsNotTrueStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.str = IsFalseStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.str = IsNotFalseStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = EqualStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = LessThanStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = GreaterThanStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = LessEqualStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.str = GreaterEqualStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.str = NotEqualStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.expr = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1863
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1871
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1893
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.str = BooleanModeStr
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.str = QueryExpansionStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.str = string("")
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = &NullVal{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.exprs = nil
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.expr = nil
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.orderBy = nil
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.str = AscScr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.str = AscScr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.str = DescScr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.limit = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.str = ForUpdateStr
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.str = ShareModeStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2334
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2347
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.updateExprs = nil
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2407
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.byt = 0
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.byt = 1
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.str = IgnoreStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2728
		{
			decNesting(yylex)
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2733
		{
			forceEOF(yylex)
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2738
		{
			forceEOF(yylex)
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2742
		{
			forceEOF(yylex)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2746
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
