// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const UNDERSCORE_UTF8 = 57442
const UNDERSCORE_LATIN1 = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const FLUSH = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const INDEXES = 57468
const ACTION = 57469
const CASCADE = 57470
const CONSTRAINT = 57471
const FOREIGN = 57472
const NO = 57473
const REFERENCES = 57474
const RESTRICT = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const SAVEPOINT = 57502
const RELEASE = 57503
const WORK = 57504
const BIT = 57505
const TINYINT = 57506
const SMALLINT = 57507
const MEDIUMINT = 57508
const INT = 57509
const INTEGER = 57510
const BIGINT = 57511
const INTNUM = 57512
const REAL = 57513
const DOUBLE = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const TIME = 57518
const TIMESTAMP = 57519
const DATETIME = 57520
const YEAR = 57521
const CHAR = 57522
const VARCHAR = 57523
const BOOL = 57524
const CHARACTER = 57525
const VARBINARY = 57526
const NCHAR = 57527
const TEXT = 57528
const TINYTEXT = 57529
const MEDIUMTEXT = 57530
const LONGTEXT = 57531
const BLOB = 57532
const TINYBLOB = 57533
const MEDIUMBLOB = 57534
const LONGBLOB = 57535
const JSON = 57536
const ENUM = 57537
const GEOMETRY = 57538
const POINT = 57539
const LINESTRING = 57540
const POLYGON = 57541
const GEOMETRYCOLLECTION = 57542
const MULTIPOINT = 57543
const MULTILINESTRING = 57544
const MULTIPOLYGON = 57545
const NULLX = 57546
const AUTO_INCREMENT = 57547
const APPROXNUM = 57548
const SIGNED = 57549
const UNSIGNED = 57550
const ZEROFILL = 57551
const COLLATION = 57552
const DATABASES = 57553
const TABLES = 57554
const VITESS_METADATA = 57555
const VSCHEMA = 57556
const FULL = 57557
const PROCESSLIST = 57558
const COLUMNS = 57559
const FIELDS = 57560
const ENGINES = 57561
const PLUGINS = 57562
const EXTENDED = 57563
const NAMES = 57564
const CHARSET = 57565
const GLOBAL = 57566
const SESSION = 57567
const ISOLATION = 57568
const LEVEL = 57569
const READ = 57570
const WRITE = 57571
const ONLY = 57572
const REPEATABLE = 57573
const COMMITTED = 57574
const UNCOMMITTED = 57575
const SERIALIZABLE = 57576
const CURRENT_TIMESTAMP = 57577
const DATABASE = 57578
const CURRENT_DATE = 57579
const CURRENT_TIME = 57580
const LOCALTIME = 57581
const LOCALTIMESTAMP = 57582
const UTC_DATE = 57583
const UTC_TIME = 57584
const UTC_TIMESTAMP = 57585
const REPLACE = 57586
const CONVERT = 57587
const CAST = 57588
const SUBSTR = 57589
const SUBSTRING = 57590
const GROUP_CONCAT = 57591
const SEPARATOR = 57592
const TIMESTAMPADD = 57593
const TIMESTAMPDIFF = 57594
const MATCH = 57595
const AGAINST = 57596
const BOOLEAN = 57597
const LANGUAGE = 57598
const WITH = 57599
const QUERY = 57600
const EXPANSION = 57601
const UNUSED = 57602
const ARRAY = 57603
const CUME_DIST = 57604
const DESCRIPTION = 57605
const DENSE_RANK = 57606
const EMPTY = 57607
const EXCEPT = 57608
const FIRST_VALUE = 57609
const GROUPING = 57610
const GROUPS = 57611
const JSON_TABLE = 57612
const LAG = 57613
const LAST_VALUE = 57614
const LATERAL = 57615
const LEAD = 57616
const MEMBER = 57617
const NTH_VALUE = 57618
const NTILE = 57619
const OF = 57620
const OVER = 57621
const PERCENT_RANK = 57622
const RANK = 57623
const RECURSIVE = 57624
const ROW_NUMBER = 57625
const SYSTEM = 57626
const WINDOW = 57627
const ACTIVE = 57628
const ADMIN = 57629
const BUCKETS = 57630
const CLONE = 57631
const COMPONENT = 57632
const DEFINITION = 57633
const ENFORCED = 57634
const EXCLUDE = 57635
const FOLLOWING = 57636
const GEOMCOLLECTION = 57637
const GET_MASTER_PUBLIC_KEY = 57638
const HISTOGRAM = 57639
const HISTORY = 57640
const INACTIVE = 57641
const INVISIBLE = 57642
const LOCKED = 57643
const MASTER_COMPRESSION_ALGORITHMS = 57644
const MASTER_PUBLIC_KEY_PATH = 57645
const MASTER_TLS_CIPHERSUITES = 57646
const MASTER_ZSTD_COMPRESSION_LEVEL = 57647
const NESTED = 57648
const NETWORK_NAMESPACE = 57649
const NOWAIT = 57650
const NULLS = 57651
const OJ = 57652
const OLD = 57653
const OPTIONAL = 57654
const ORDINALITY = 57655
const ORGANIZATION = 57656
const OTHERS = 57657
const PATH = 57658
const PERSIST = 57659
const PERSIST_ONLY = 57660
const PRECEDING = 57661
const PRIVILEGE_CHECKS_USER = 57662
const PROCESS = 57663
const RANDOM = 57664
const REFERENCE = 57665
const REQUIRE_ROW_FORMAT = 57666
const RESOURCE = 57667
const RESPECT = 57668
const RESTART = 57669
const RETAIN = 57670
const REUSE = 57671
const ROLE = 57672
const SECONDARY = 57673
const SECONDARY_ENGINE = 57674
const SECONDARY_LOAD = 57675
const SECONDARY_UNLOAD = 57676
const SKIP = 57677
const SRID = 57678
const THREAD_PRIORITY = 57679
const TIES = 57680
const UNBOUNDED = 57681
const VCPU = 57682
const VISIBLE = 57683
const FORMAT = 57684
const TREE = 57685
const VITESS = 57686
const TRADITIONAL = 57687

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	33, 305,
	131, 305,
	143, 305,
	168, 319,
	169, 319,
	-2, 307,
	-1, 47,
	133, 329,
	-2, 327,
	-1, 70,
	38, 365,
	-2, 373,
	-1, 385,
	119, 695,
	-2, 691,
	-1, 386,
	119, 696,
	-2, 692,
	-1, 400,
	38, 366,
	-2, 378,
	-1, 401,
	38, 367,
	-2, 379,
	-1, 424,
	87, 947,
	-2, 72,
	-1, 425,
	87, 863,
	-2, 73,
	-1, 430,
	87, 831,
	-2, 657,
	-1, 432,
	87, 894,
	-2, 659,
	-1, 750,
	56, 54,
	58, 54,
	-2, 58,
	-1, 926,
	119, 698,
	-2, 694,
	-1, 1354,
	5, 616,
	17, 616,
	19, 616,
	31, 616,
	59, 616,
	-2, 404,
}

const yyPrivate = 57344

const yyLast = 17015

var yyAct = [...]int{

	385, 1593, 1583, 1393, 1550, 1281, 1186, 1466, 1499, 329,
	1453, 1206, 595, 1334, 344, 1367, 1004, 1031, 358, 1060,
	1187, 1331, 1335, 584, 717, 1232, 1030, 1340, 1346, 678,
	1074, 1300, 1040, 69, 3, 1027, 913, 89, 1125, 868,
	429, 280, 315, 300, 280, 1258, 1249, 724, 1006, 89,
	920, 280, 849, 393, 763, 727, 1174, 402, 1044, 990,
	1001, 722, 890, 744, 749, 946, 1054, 553, 331, 27,
	387, 418, 1070, 762, 983, 67, 280, 89, 734, 327,
	554, 280, 877, 280, 752, 65, 320, 70, 64, 426,
	743, 691, 7, 6, 5, 316, 423, 1093, 319, 573,
	1586, 1570, 1581, 1558, 415, 278, 1578, 1394, 692, 1569,
	1557, 1092, 1317, 1423, 558, 311, 1362, 1363, 72, 73,
	74, 75, 76, 1361, 91, 92, 93, 613, 408, 1022,
	1023, 1021, 359, 28, 29, 388, 58, 32, 33, 764,
	417, 765, 91, 92, 93, 555, 318, 557, 317, 276,
	272, 273, 274, 1091, 1240, 268, 1053, 1456, 266, 1283,
	270, 28, 1525, 640, 639, 649, 650, 642, 643, 644,
	645, 646, 647, 648, 641, 1061, 370, 651, 376, 377,
	374, 375, 373, 372, 371, 57, 91, 92, 93, 612,
	1414, 1412, 378, 379, 590, 308, 592, 1220, 389, 876,
	1219, 310, 306, 1221, 838, 1088, 1085, 1086, 608, 1084,
	601, 602, 609, 606, 607, 1284, 611, 837, 1285, 835,
	1580, 1577, 1551, 1280, 1045, 91, 92, 93, 589, 591,
	923, 878, 879, 880, 1543, 984, 1601, 598, 574, 284,
	1301, 1508, 1095, 1098, 560, 839, 270, 1286, 287, 1500,
	842, 1207, 1209, 836, 615, 826, 294, 269, 1532, 563,
	1277, 1357, 1597, 1356, 1502, 1355, 1279, 280, 565, 566,
	1047, 556, 280, 275, 575, 1047, 283, 271, 280, 267,
	1105, 1303, 1090, 1104, 280, 582, 1436, 1144, 588, 89,
	292, 1141, 1216, 89, 1179, 89, 299, 663, 664, 1154,
	1133, 89, 758, 738, 1089, 676, 580, 91, 92, 93,
	641, 89, 89, 651, 1028, 651, 1017, 587, 1305, 963,
	1309, 629, 1304, 869, 1302, 586, 285, 1541, 873, 1307,
	1556, 564, 1208, 631, 1501, 597, 572, 631, 1306, 1526,
	863, 79, 579, 1517, 1094, 1344, 621, 599, 581, 1509,
	1507, 1308, 1310, 296, 288, 766, 297, 298, 304, 1096,
	626, 627, 289, 291, 301, 1061, 286, 303, 302, 1278,
	1047, 1276, 570, 1046, 576, 577, 578, 1595, 1046, 80,
	1596, 1140, 1594, 1043, 1041, 625, 1042, 1319, 947, 59,
	91, 92, 93, 1039, 1045, 661, 663, 664, 828, 1238,
	663, 664, 91, 92, 93, 624, 622, 623, 585, 870,
	947, 89, 1151, 280, 280, 280, 897, 1268, 968, 969,
	1546, 594, 89, 715, 731, 594, 864, 594, 89, 679,
	895, 896, 894, 594, 426, 714, 630, 629, 1602, 567,
	57, 568, 1050, 1380, 569, 28, 559, 1561, 1051, 1264,
	1265, 1266, 893, 631, 1139, 1462, 1138, 1461, 660, 662,
	728, 1253, 1252, 694, 696, 698, 700, 702, 704, 705,
	1241, 630, 629, 1046, 742, 630, 629, 741, 716, 750,
	695, 697, 1603, 701, 703, 1563, 706, 1542, 631, 675,
	1479, 1459, 631, 680, 681, 682, 683, 684, 685, 686,
	687, 756, 690, 693, 693, 693, 699, 693, 693, 699,
	693, 707, 708, 709, 710, 711, 712, 713, 761, 751,
	1267, 1250, 28, 1115, 854, 1272, 1269, 1260, 1270, 1263,
	66, 1259, 561, 562, 397, 1261, 1262, 642, 643, 644,
	645, 646, 647, 648, 641, 1514, 748, 651, 1513, 1271,
	91, 92, 93, 280, 986, 965, 1376, 824, 89, 265,
	827, 1048, 829, 280, 280, 89, 89, 89, 1118, 1119,
	1120, 280, 1505, 1579, 280, 1565, 397, 280, 847, 848,
	1175, 280, 987, 89, 397, 552, 1175, 1343, 89, 89,
	89, 280, 89, 89, 1432, 964, 644, 645, 646, 647,
	648, 641, 89, 89, 651, 630, 629, 853, 630, 629,
	1505, 1554, 1321, 1332, 630, 629, 1343, 774, 885, 887,
	888, 851, 631, 628, 886, 631, 987, 830, 831, 1516,
	726, 631, 1343, 412, 413, 840, 1505, 397, 417, 1505,
	1533, 846, 649, 650, 642, 643, 644, 645, 646, 647,
	648, 641, 914, 891, 651, 859, 91, 92, 93, 1384,
	915, 916, 640, 639, 649, 650, 642, 643, 644, 645,
	646, 647, 648, 641, 987, 89, 651, 29, 843, 1505,
	1504, 1224, 347, 346, 349, 350, 351, 352, 1020, 924,
	594, 348, 353, 1157, 935, 938, 1156, 594, 594, 594,
	948, 1451, 1450, 892, 91, 92, 93, 1486, 89, 89,
	91, 92, 93, 976, 1223, 594, 1011, 926, 753, 1126,
	594, 594, 594, 753, 594, 594, 89, 930, 57, 925,
	1438, 397, 679, 280, 594, 594, 89, 1435, 397, 1386,
	1385, 280, 754, 917, 918, 1382, 1383, 1382, 1381, 280,
	280, 924, 68, 280, 280, 976, 397, 280, 280, 280,
	89, 956, 957, 927, 987, 397, 628, 397, 960, 977,
	29, 966, 426, 89, 554, 773, 772, 754, 970, 926,
	390, 841, 1002, 759, 29, 1032, 978, 755, 1282, 757,
	57, 982, 1571, 1468, 1181, 976, 1055, 979, 1443, 851,
	1182, 1075, 1372, 1347, 1348, 985, 1227, 1062, 1063, 1064,
	1071, 1066, 1065, 1012, 980, 1469, 976, 1014, 1013, 1078,
	1588, 57, 755, 1584, 753, 1010, 1374, 280, 89, 1015,
	89, 57, 1097, 1353, 1019, 57, 280, 280, 280, 280,
	280, 1035, 280, 280, 1350, 1332, 280, 89, 1254, 1056,
	1057, 1058, 1059, 874, 1076, 845, 1018, 1198, 1200, 1196,
	996, 997, 1199, 280, 1197, 1067, 1068, 1069, 280, 1352,
	280, 280, 1195, 1194, 403, 280, 89, 1575, 1568, 1325,
	1164, 1003, 725, 1237, 1573, 748, 1173, 1172, 404, 748,
	1245, 1079, 1112, 1072, 1073, 729, 730, 406, 1548, 405,
	1099, 1100, 1101, 1102, 1103, 1426, 1106, 1107, 771, 943,
	1108, 931, 932, 891, 583, 937, 940, 941, 992, 995,
	996, 997, 993, 944, 994, 998, 1425, 1110, 1347, 1348,
	718, 1547, 1111, 1484, 1235, 1229, 1430, 1081, 1464, 1116,
	955, 844, 719, 958, 959, 640, 639, 649, 650, 642,
	643, 644, 645, 646, 647, 648, 641, 1121, 1000, 651,
	594, 1429, 594, 892, 391, 392, 640, 639, 649, 650,
	642, 643, 644, 645, 646, 647, 648, 641, 280, 594,
	651, 394, 395, 68, 1135, 1163, 1175, 1428, 280, 280,
	280, 280, 280, 403, 1171, 1168, 1188, 388, 1134, 1328,
	280, 610, 1170, 1145, 280, 1590, 1589, 404, 280, 1142,
	386, 1150, 280, 867, 400, 401, 406, 1183, 405, 732,
	992, 995, 996, 997, 993, 951, 994, 998, 1167, 1222,
	1590, 89, 1176, 1530, 1457, 962, 1178, 1205, 1177, 390,
	1228, 66, 71, 1032, 1233, 1233, 63, 90, 1225, 1,
	1582, 281, 1190, 1191, 281, 1193, 1211, 1132, 1201, 90,
	389, 281, 1395, 1465, 1087, 593, 1549, 1212, 1498, 1214,
	1234, 1215, 1213, 1366, 1038, 1217, 1242, 1243, 1189, 89,
	89, 1192, 1029, 78, 551, 77, 281, 90, 1540, 862,
	596, 281, 1037, 281, 1036, 396, 1244, 1506, 1246, 1247,
	1248, 1230, 1231, 1455, 1049, 1239, 1052, 1373, 1236, 89,
	748, 1545, 779, 1251, 777, 778, 1184, 1185, 776, 781,
	748, 748, 748, 748, 748, 780, 1257, 775, 293, 421,
	875, 1273, 307, 999, 89, 767, 1003, 1077, 1210, 733,
	914, 81, 1275, 1274, 748, 1083, 1297, 872, 290, 604,
	1288, 1289, 1130, 1131, 605, 295, 659, 1169, 1218, 427,
	1299, 1290, 420, 1338, 967, 721, 1427, 1322, 1327, 1149,
	280, 688, 1312, 1148, 945, 747, 1311, 330, 884, 345,
	89, 342, 1298, 1296, 343, 89, 89, 971, 1333, 1180,
	633, 1188, 1297, 328, 322, 926, 1318, 746, 739, 991,
	989, 1336, 988, 416, 1349, 1345, 745, 925, 975, 399,
	1422, 89, 594, 1524, 398, 942, 50, 617, 312, 31,
	407, 1351, 22, 21, 20, 89, 19, 89, 89, 18,
	24, 1233, 1233, 17, 1326, 16, 15, 1032, 1358, 1032,
	571, 594, 35, 1342, 1365, 1420, 1379, 26, 25, 14,
	13, 1364, 12, 11, 10, 280, 1370, 1371, 9, 8,
	1359, 1369, 4, 620, 23, 677, 2, 0, 0, 0,
	1360, 0, 0, 0, 0, 280, 0, 281, 1377, 1378,
	0, 89, 281, 1396, 89, 89, 89, 280, 281, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 90,
	0, 1388, 0, 90, 0, 90, 0, 0, 0, 0,
	0, 90, 1401, 1402, 0, 1337, 1389, 28, 1391, 1387,
	0, 90, 90, 0, 640, 639, 649, 650, 642, 643,
	644, 645, 646, 647, 648, 641, 1410, 0, 651, 1390,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1400, 1405, 1188, 0, 1431, 0, 0, 600, 0,
	603, 0, 0, 0, 1440, 89, 614, 0, 1407, 1408,
	0, 1409, 0, 89, 1411, 0, 1413, 1032, 0, 0,
	0, 0, 1225, 0, 0, 0, 0, 0, 89, 0,
	1439, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 1458, 0, 1460, 356, 0, 0, 1467, 0, 1472,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 281, 281, 281, 0, 0, 1471, 0,
	1470, 0, 90, 0, 0, 1452, 89, 89, 90, 89,
	0, 88, 0, 0, 89, 0, 89, 89, 89, 280,
	1421, 1336, 89, 309, 1492, 1485, 1493, 1495, 1496, 1483,
	0, 0, 0, 0, 0, 1497, 0, 1503, 1487, 89,
	280, 0, 1510, 0, 0, 0, 1478, 0, 0, 1518,
	0, 428, 0, 0, 0, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 1491, 1511, 0, 1512, 0, 0, 0,
	1531, 1539, 0, 0, 0, 1336, 89, 1538, 0, 1537,
	0, 0, 0, 0, 0, 0, 0, 89, 89, 0,
	594, 0, 0, 0, 1552, 0, 0, 0, 0, 1467,
	1032, 0, 0, 89, 1519, 1553, 0, 1559, 0, 0,
	1188, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	1567, 0, 0, 281, 0, 1337, 0, 28, 90, 324,
	1572, 1574, 89, 281, 281, 90, 90, 90, 0, 0,
	0, 281, 1576, 0, 281, 1587, 0, 281, 0, 0,
	1419, 281, 1598, 90, 397, 0, 0, 1515, 90, 90,
	90, 281, 90, 90, 0, 0, 0, 0, 1562, 0,
	0, 0, 90, 90, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	832, 833, 834, 640, 639, 649, 650, 642, 643, 644,
	645, 646, 647, 648, 641, 1418, 0, 651, 852, 0,
	0, 0, 0, 856, 857, 858, 0, 860, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 866, 640,
	639, 649, 650, 642, 643, 644, 645, 646, 647, 648,
	641, 0, 0, 651, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 0, 428, 0, 428,
	0, 0, 0, 928, 929, 428, 0, 0, 0, 0,
	0, 0, 0, 1585, 0, 616, 618, 0, 90, 90,
	0, 0, 0, 0, 640, 639, 649, 650, 642, 643,
	644, 645, 646, 647, 648, 641, 90, 0, 651, 0,
	0, 961, 0, 281, 0, 0, 90, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 410, 0, 0, 281,
	281, 0, 0, 281, 281, 0, 0, 281, 281, 281,
	90, 0, 0, 0, 0, 0, 635, 0, 638, 1417,
	0, 0, 0, 90, 652, 653, 654, 655, 656, 657,
	658, 0, 636, 637, 634, 640, 639, 649, 650, 642,
	643, 644, 645, 646, 647, 648, 641, 0, 0, 651,
	0, 0, 0, 321, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 281, 90, 0,
	90, 0, 0, 0, 0, 0, 281, 281, 281, 281,
	281, 0, 281, 281, 0, 0, 281, 90, 640, 639,
	649, 650, 642, 643, 644, 645, 646, 647, 648, 641,
	0, 0, 651, 281, 0, 0, 0, 0, 281, 0,
	281, 281, 0, 0, 0, 281, 90, 0, 0, 0,
	0, 0, 0, 1080, 1291, 1082, 0, 0, 0, 0,
	0, 0, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 1109, 0, 640, 639, 649, 650, 642, 643,
	644, 645, 646, 647, 648, 641, 0, 0, 651, 640,
	639, 649, 650, 642, 643, 644, 645, 646, 647, 648,
	641, 0, 1128, 651, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1136, 1137, 0,
	0, 0, 428, 1143, 0, 0, 1146, 1147, 0, 428,
	428, 428, 0, 0, 1153, 0, 0, 0, 1155, 0,
	0, 1158, 1159, 1160, 1161, 1162, 0, 428, 281, 0,
	0, 0, 428, 428, 428, 0, 428, 428, 281, 281,
	281, 281, 281, 0, 0, 0, 428, 428, 0, 1127,
	281, 0, 0, 0, 281, 0, 0, 0, 281, 0,
	0, 0, 281, 0, 0, 0, 0, 1203, 1204, 640,
	639, 649, 650, 642, 643, 644, 645, 646, 647, 648,
	641, 90, 0, 651, 639, 649, 650, 642, 643, 644,
	645, 646, 647, 648, 641, 0, 0, 651, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 0, 919,
	632, 428, 0, 0, 0, 0, 0, 0, 0, 90,
	90, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 954, 0, 0, 321, 0, 279, 90,
	0, 305, 0, 0, 0, 689, 0, 0, 279, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 428, 90, 1256, 0, 0, 0, 0,
	411, 720, 723, 419, 0, 0, 1294, 1295, 279, 0,
	279, 0, 0, 0, 428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 428, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 90, 90, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 428, 0, 428, 90, 0, 90, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 90, 0, 0, 90, 90, 90, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	0, 0, 0, 855, 279, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 279, 0, 1433, 1434, 0, 1437, 871, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 90, 1448, 881, 882, 883, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 0, 933,
	934, 0, 0, 0, 0, 0, 90, 90, 0, 90,
	0, 0, 0, 1463, 90, 0, 90, 90, 90, 281,
	0, 0, 90, 0, 0, 1122, 1123, 1124, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 411, 0, 90,
	281, 0, 0, 1255, 428, 0, 0, 0, 0, 0,
	279, 279, 279, 0, 0, 0, 0, 0, 0, 1520,
	1521, 1522, 1523, 0, 1527, 0, 1528, 1529, 0, 0,
	0, 0, 0, 428, 0, 0, 90, 0, 0, 1534,
	0, 1535, 1536, 1026, 0, 0, 0, 90, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	1555, 0, 0, 0, 281, 0, 0, 0, 0, 428,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1564, 0, 0, 0, 0,
	0, 0, 90, 0, 428, 0, 949, 0, 0, 1339,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 1599, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	279, 428, 1368, 0, 0, 0, 0, 0, 0, 0,
	279, 279, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 279, 0, 0, 279, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1392, 0, 0, 1397, 1398,
	1399, 0, 0, 0, 0, 0, 1292, 1293, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 1313, 1314, 0, 1315, 1316, 0, 0, 0, 0,
	0, 1165, 1166, 723, 0, 0, 1323, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 411, 850, 0, 0, 0, 411, 411,
	0, 0, 411, 411, 411, 0, 0, 0, 950, 428,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 411, 411,
	411, 411, 428, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 0, 0, 0, 0, 0, 1375, 0, 0,
	279, 0, 0, 0, 0, 0, 850, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 279, 1008, 0, 0,
	279, 279, 0, 0, 279, 1016, 850, 0, 0, 0,
	1488, 1489, 0, 1490, 0, 0, 0, 0, 1454, 0,
	1454, 1454, 1454, 0, 0, 0, 1368, 0, 0, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 1320, 0,
	1544, 0, 0, 279, 279, 279, 279, 279, 0, 279,
	279, 428, 428, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 949, 0, 1560, 0, 0,
	279, 0, 0, 0, 0, 279, 0, 1113, 1114, 0,
	0, 0, 279, 0, 0, 0, 1566, 0, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 1474, 1475,
	1476, 1477, 0, 0, 0, 1480, 1481, 0, 0, 411,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 279, 279, 279, 279, 279,
	0, 0, 0, 0, 0, 0, 0, 1202, 1424, 0,
	0, 279, 797, 0, 0, 1008, 0, 0, 0, 279,
	0, 0, 0, 0, 321, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 1442, 0, 0, 1444, 810, 813,
	814, 815, 816, 817, 818, 0, 819, 820, 821, 822,
	823, 798, 799, 800, 801, 782, 783, 811, 0, 785,
	0, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 802, 803, 804, 805, 806, 807, 808, 809, 0,
	29, 30, 58, 32, 33, 1591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 34, 53, 54, 0, 56, 0,
	0, 0, 0, 0, 0, 1482, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	812, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 36, 37, 39, 38,
	41, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 61, 60, 0, 0,
	51, 52, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 46,
	47, 48, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 538, 526, 0, 483, 541, 456,
	473, 549, 474, 477, 514, 441, 496, 179, 471, 0,
	460, 436, 467, 437, 458, 485, 123, 489, 455, 528,
	499, 540, 151, 0, 461, 547, 153, 505, 0, 226,
	167, 0, 0, 0, 487, 530, 494, 523, 482, 515,
	446, 504, 542, 472, 512, 543, 0, 0, 950, 91,
	92, 93, 0, 1033, 1034, 0, 0, 0, 0, 0,
	113, 279, 509, 537, 469, 511, 513, 435, 506, 0,
	439, 442, 548, 533, 464, 465, 1226, 0, 0, 0,
	0, 0, 0, 486, 495, 520, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 0, 503, 0, 0,
	0, 443, 440, 0, 0, 0, 0, 484, 0, 0,
	0, 445, 0, 463, 521, 0, 433, 132, 525, 532,
	481, 282, 536, 479, 478, 539, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	529, 459, 468, 117, 466, 208, 186, 246, 502, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 438, 0, 227, 249, 264, 111, 454, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 450, 453, 448, 449, 497, 498, 544, 545, 546,
	522, 444, 0, 451, 452, 0, 527, 534, 535, 501,
	94, 103, 152, 261, 201, 128, 250, 434, 447, 121,
	457, 0, 0, 470, 475, 476, 488, 490, 491, 492,
	493, 500, 507, 508, 510, 516, 517, 518, 519, 524,
	531, 550, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 538, 526,
	0, 483, 541, 456, 473, 549, 474, 477, 514, 441,
	496, 179, 471, 0, 460, 436, 467, 437, 458, 485,
	123, 489, 455, 528, 499, 540, 151, 0, 461, 547,
	153, 505, 0, 226, 167, 0, 0, 0, 487, 530,
	494, 523, 482, 515, 446, 504, 542, 472, 512, 543,
	0, 0, 0, 91, 92, 93, 0, 1033, 1034, 0,
	0, 0, 0, 0, 113, 0, 509, 537, 469, 511,
	513, 435, 506, 0, 439, 442, 548, 533, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 486, 495, 520,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 503, 0, 0, 0, 443, 440, 0, 0, 0,
	0, 484, 0, 0, 0, 445, 0, 463, 521, 0,
	433, 132, 525, 532, 481, 282, 536, 479, 478, 539,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 529, 459, 468, 117, 466, 208,
	186, 246, 502, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 438, 0, 227, 249, 264,
	111, 454, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 450, 453, 448, 449, 497,
	498, 544, 545, 546, 522, 444, 0, 451, 452, 0,
	527, 534, 535, 501, 94, 103, 152, 261, 201, 128,
	250, 434, 447, 121, 457, 0, 0, 470, 475, 476,
	488, 490, 491, 492, 493, 500, 507, 508, 510, 516,
	517, 518, 519, 524, 531, 550, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 538, 526, 0, 483, 541, 456, 473, 549,
	474, 477, 514, 441, 496, 179, 471, 0, 460, 436,
	467, 437, 458, 485, 123, 489, 455, 528, 499, 540,
	151, 0, 461, 547, 153, 505, 0, 226, 167, 0,
	0, 0, 487, 530, 494, 523, 482, 515, 446, 504,
	542, 472, 512, 543, 57, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	509, 537, 469, 511, 513, 435, 506, 0, 439, 442,
	548, 533, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 486, 495, 520, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 462, 0, 503, 0, 0, 0, 443,
	440, 0, 0, 0, 0, 484, 0, 0, 0, 445,
	0, 463, 521, 0, 433, 132, 525, 532, 481, 282,
	536, 479, 478, 539, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 529, 459,
	468, 117, 466, 208, 186, 246, 502, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 438,
	0, 227, 249, 264, 111, 454, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 450,
	453, 448, 449, 497, 498, 544, 545, 546, 522, 444,
	0, 451, 452, 0, 527, 534, 535, 501, 94, 103,
	152, 261, 201, 128, 250, 434, 447, 121, 457, 0,
	0, 470, 475, 476, 488, 490, 491, 492, 493, 500,
	507, 508, 510, 516, 517, 518, 519, 524, 531, 550,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 538, 526, 0, 483,
	541, 456, 473, 549, 474, 477, 514, 441, 496, 179,
	471, 0, 460, 436, 467, 437, 458, 485, 123, 489,
	455, 528, 499, 540, 151, 0, 461, 547, 153, 505,
	0, 226, 167, 0, 0, 0, 487, 530, 494, 523,
	482, 515, 446, 504, 542, 472, 512, 543, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 509, 537, 469, 511, 513, 435,
	506, 0, 439, 442, 548, 533, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 486, 495, 520, 480, 0,
	0, 0, 0, 0, 0, 1330, 0, 462, 0, 503,
	0, 0, 0, 443, 440, 0, 0, 0, 0, 484,
	0, 0, 0, 445, 0, 463, 521, 0, 433, 132,
	525, 532, 481, 282, 536, 479, 478, 539, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 529, 459, 468, 117, 466, 208, 186, 246,
	502, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 438, 0, 227, 249, 264, 111, 454,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 450, 453, 448, 449, 497, 498, 544,
	545, 546, 522, 444, 0, 451, 452, 0, 527, 534,
	535, 501, 94, 103, 152, 261, 201, 128, 250, 434,
	447, 121, 457, 0, 0, 470, 475, 476, 488, 490,
	491, 492, 493, 500, 507, 508, 510, 516, 517, 518,
	519, 524, 531, 550, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	538, 526, 0, 483, 541, 456, 473, 549, 474, 477,
	514, 441, 496, 179, 471, 0, 460, 436, 467, 437,
	458, 485, 123, 489, 455, 528, 499, 540, 151, 0,
	461, 547, 153, 505, 0, 226, 167, 0, 0, 0,
	487, 530, 494, 523, 482, 515, 446, 504, 542, 472,
	512, 543, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 509, 537,
	469, 511, 513, 435, 506, 0, 439, 442, 548, 533,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 486,
	495, 520, 480, 0, 0, 0, 0, 0, 0, 1017,
	0, 462, 0, 503, 0, 0, 0, 443, 440, 0,
	0, 0, 0, 484, 0, 0, 0, 445, 0, 463,
	521, 0, 433, 132, 525, 532, 481, 282, 536, 479,
	478, 539, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 529, 459, 468, 117,
	466, 208, 186, 246, 502, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 438, 0, 227,
	249, 264, 111, 454, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 450, 453, 448,
	449, 497, 498, 544, 545, 546, 522, 444, 0, 451,
	452, 0, 527, 534, 535, 501, 94, 103, 152, 261,
	201, 128, 250, 434, 447, 121, 457, 0, 0, 470,
	475, 476, 488, 490, 491, 492, 493, 500, 507, 508,
	510, 516, 517, 518, 519, 524, 531, 550, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 538, 526, 0, 483, 541, 456,
	473, 549, 474, 477, 514, 441, 496, 179, 471, 0,
	460, 436, 467, 437, 458, 485, 123, 489, 455, 528,
	499, 540, 151, 0, 461, 547, 153, 505, 0, 226,
	167, 0, 0, 0, 487, 530, 494, 523, 482, 515,
	446, 504, 542, 472, 512, 543, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 509, 537, 469, 511, 513, 435, 506, 0,
	439, 442, 548, 533, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 486, 495, 520, 480, 0, 0, 0,
	0, 0, 0, 981, 0, 462, 0, 503, 0, 0,
	0, 443, 440, 0, 0, 0, 0, 484, 0, 0,
	0, 445, 0, 463, 521, 0, 433, 132, 525, 532,
	481, 282, 536, 479, 478, 539, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	529, 459, 468, 117, 466, 208, 186, 246, 502, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 438, 0, 227, 249, 264, 111, 454, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 450, 453, 448, 449, 497, 498, 544, 545, 546,
	522, 444, 0, 451, 452, 0, 527, 534, 535, 501,
	94, 103, 152, 261, 201, 128, 250, 434, 447, 121,
	457, 0, 0, 470, 475, 476, 488, 490, 491, 492,
	493, 500, 507, 508, 510, 516, 517, 518, 519, 524,
	531, 550, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 538, 526,
	0, 483, 541, 456, 473, 549, 474, 477, 514, 441,
	496, 179, 471, 0, 460, 436, 467, 437, 458, 485,
	123, 489, 455, 528, 499, 540, 151, 0, 461, 547,
	153, 505, 0, 226, 167, 0, 0, 0, 487, 530,
	494, 523, 482, 515, 446, 504, 542, 472, 512, 543,
	0, 0, 0, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 509, 537, 469, 511,
	513, 435, 506, 0, 439, 442, 548, 533, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 486, 495, 520,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 503, 0, 0, 0, 443, 440, 0, 0, 0,
	0, 484, 0, 0, 0, 445, 0, 463, 521, 0,
	433, 132, 525, 532, 481, 282, 536, 479, 478, 539,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 529, 459, 468, 117, 466, 208,
	186, 246, 502, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 438, 0, 227, 249, 264,
	111, 454, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 450, 453, 448, 449, 497,
	498, 544, 545, 546, 522, 444, 0, 451, 452, 0,
	527, 534, 535, 501, 94, 103, 152, 261, 201, 128,
	250, 434, 447, 121, 457, 0, 0, 470, 475, 476,
	488, 490, 491, 492, 493, 500, 507, 508, 510, 516,
	517, 518, 519, 524, 531, 550, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 538, 526, 0, 483, 541, 456, 473, 549,
	474, 477, 514, 441, 496, 179, 471, 0, 460, 436,
	467, 437, 458, 485, 123, 489, 455, 528, 499, 540,
	151, 0, 461, 547, 153, 505, 0, 226, 167, 0,
	0, 0, 487, 530, 494, 523, 482, 515, 446, 504,
	542, 472, 512, 543, 0, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	509, 537, 469, 511, 513, 435, 506, 0, 439, 442,
	548, 533, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 486, 495, 520, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 462, 0, 503, 0, 0, 0, 443,
	440, 0, 0, 0, 0, 484, 0, 0, 0, 445,
	0, 463, 521, 0, 433, 132, 525, 532, 481, 282,
	536, 479, 478, 539, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 529, 459,
	468, 117, 466, 208, 186, 246, 502, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 431, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 438,
	0, 227, 249, 264, 111, 454, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 432, 430, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 450,
	453, 448, 449, 497, 498, 544, 545, 546, 522, 444,
	0, 451, 452, 0, 527, 534, 535, 501, 94, 103,
	152, 261, 201, 128, 250, 434, 447, 121, 457, 0,
	0, 470, 475, 476, 488, 490, 491, 492, 493, 500,
	507, 508, 510, 516, 517, 518, 519, 524, 531, 550,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 538, 526, 0, 483,
	541, 456, 473, 549, 474, 477, 514, 441, 496, 179,
	471, 0, 460, 436, 467, 437, 458, 485, 123, 489,
	455, 528, 499, 540, 151, 0, 461, 547, 153, 505,
	0, 226, 167, 0, 0, 0, 487, 530, 494, 523,
	482, 515, 446, 504, 542, 472, 512, 543, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 509, 537, 469, 511, 513, 435,
	506, 0, 439, 442, 548, 533, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 486, 495, 520, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 462, 0, 503,
	0, 0, 0, 443, 440, 0, 0, 0, 0, 484,
	0, 0, 0, 445, 0, 463, 521, 0, 433, 132,
	525, 532, 481, 282, 536, 479, 478, 539, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 529, 459, 468, 117, 466, 208, 186, 246,
	502, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 760, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 431, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 438, 0, 227, 249, 264, 111, 454,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	432, 430, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 450, 453, 448, 449, 497, 498, 544,
	545, 546, 522, 444, 0, 451, 452, 0, 527, 534,
	535, 501, 94, 103, 152, 261, 201, 128, 250, 434,
	447, 121, 457, 0, 0, 470, 475, 476, 488, 490,
	491, 492, 493, 500, 507, 508, 510, 516, 517, 518,
	519, 524, 531, 550, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	538, 526, 0, 483, 541, 456, 473, 549, 474, 477,
	514, 441, 496, 179, 471, 0, 460, 436, 467, 437,
	458, 485, 123, 489, 455, 528, 499, 540, 151, 0,
	461, 547, 153, 505, 0, 226, 167, 0, 0, 0,
	487, 530, 494, 523, 482, 515, 446, 504, 542, 472,
	512, 543, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 509, 537,
	469, 511, 513, 435, 506, 0, 439, 442, 548, 533,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 486,
	495, 520, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 462, 0, 503, 0, 0, 0, 443, 440, 0,
	0, 0, 0, 484, 0, 0, 0, 445, 0, 463,
	521, 0, 433, 132, 525, 532, 481, 282, 536, 479,
	478, 539, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 529, 459, 468, 117,
	466, 208, 186, 246, 502, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 422,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 431, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 438, 0, 227,
	249, 264, 111, 454, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 432, 430, 425, 424, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 450, 453, 448,
	449, 497, 498, 544, 545, 546, 522, 444, 0, 451,
	452, 0, 527, 534, 535, 501, 94, 103, 152, 261,
	201, 128, 250, 434, 447, 121, 457, 0, 0, 470,
	475, 476, 488, 490, 491, 492, 493, 500, 507, 508,
	510, 516, 517, 518, 519, 524, 531, 550, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 921, 0, 326,
	0, 0, 0, 123, 0, 325, 0, 0, 0, 151,
	0, 922, 369, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 347,
	346, 349, 350, 351, 352, 0, 0, 113, 348, 353,
	354, 355, 0, 0, 0, 323, 340, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 338,
	409, 0, 0, 0, 383, 0, 339, 0, 0, 332,
	333, 335, 334, 336, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 382, 0, 0, 282, 0,
	0, 380, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 0, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 370, 381,
	376, 377, 374, 375, 373, 372, 371, 384, 362, 363,
	364, 365, 367, 0, 378, 379, 366, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 0,
	326, 0, 0, 0, 123, 0, 325, 0, 0, 0,
	151, 0, 0, 369, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 360, 361, 0, 0, 0, 0,
	0, 0, 1024, 0, 57, 0, 0, 91, 92, 93,
	347, 346, 349, 350, 351, 352, 0, 0, 113, 348,
	353, 354, 355, 1025, 0, 0, 323, 340, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	338, 0, 0, 0, 0, 383, 0, 339, 0, 0,
	332, 333, 335, 334, 336, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 382, 0, 0, 282,
	0, 0, 380, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 370,
	381, 376, 377, 374, 375, 373, 372, 371, 384, 362,
	363, 364, 365, 367, 0, 378, 379, 366, 94, 103,
	152, 261, 201, 128, 250, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 179, 0, 0, 0,
	0, 326, 0, 0, 0, 123, 0, 325, 0, 0,
	0, 151, 0, 0, 369, 153, 0, 0, 226, 167,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 397, 91, 92,
	93, 347, 346, 349, 350, 351, 352, 0, 0, 113,
	348, 353, 354, 355, 0, 0, 0, 323, 340, 0,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 338, 0, 0, 0, 0, 383, 0, 339, 0,
	0, 332, 333, 335, 334, 336, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 382, 0, 0,
	282, 0, 0, 380, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 188, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	370, 381, 376, 377, 374, 375, 373, 372, 371, 384,
	362, 363, 364, 365, 367, 0, 378, 379, 366, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 179, 0, 0,
	0, 0, 326, 0, 0, 0, 123, 0, 325, 0,
	0, 0, 151, 0, 0, 369, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 347, 346, 349, 350, 351, 352, 0, 0,
	113, 348, 353, 354, 355, 0, 0, 0, 323, 340,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 338, 409, 0, 0, 0, 383, 0, 339,
	0, 0, 332, 333, 335, 334, 336, 341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 382, 0,
	0, 282, 0, 0, 380, 0, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	0, 0, 0, 117, 0, 208, 186, 246, 0, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 0, 0, 227, 249, 264, 111, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 370, 381, 376, 377, 374, 375, 373, 372, 371,
	384, 362, 363, 364, 365, 367, 0, 378, 379, 366,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 0, 326, 0, 0, 0, 123, 0, 325,
	0, 0, 0, 151, 0, 0, 369, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	91, 92, 93, 347, 939, 349, 350, 351, 352, 0,
	0, 113, 348, 353, 354, 355, 0, 0, 0, 323,
	340, 0, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 338, 409, 0, 0, 0, 383, 0,
	339, 0, 0, 332, 333, 335, 334, 336, 341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 382,
	0, 0, 282, 0, 0, 380, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 171,
	108, 140, 224, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 370, 381, 376, 377, 374, 375, 373, 372,
	371, 384, 362, 363, 364, 365, 367, 0, 378, 379,
	366, 94, 103, 152, 261, 201, 128, 250, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 179,
	0, 0, 0, 0, 326, 0, 0, 0, 123, 0,
	325, 0, 0, 0, 151, 0, 0, 369, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 347, 936, 349, 350, 351, 352,
	0, 0, 113, 348, 353, 354, 355, 0, 0, 0,
	323, 340, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 338, 409, 0, 0, 0, 383,
	0, 339, 0, 0, 332, 333, 335, 334, 336, 341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	382, 0, 0, 282, 0, 0, 380, 0, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 370, 381, 376, 377, 374, 375, 373,
	372, 371, 384, 362, 363, 364, 365, 367, 0, 378,
	379, 366, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	390, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 326, 0, 0,
	0, 123, 0, 325, 0, 0, 0, 151, 0, 0,
	369, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 347, 346, 349,
	350, 351, 352, 0, 0, 113, 348, 353, 354, 355,
	0, 0, 0, 323, 340, 0, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 338, 0, 0,
	0, 0, 383, 0, 339, 0, 0, 332, 333, 335,
	334, 336, 341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 382, 0, 0, 282, 0, 0, 380,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 370, 381, 376, 377,
	374, 375, 373, 372, 371, 384, 362, 363, 364, 365,
	367, 0, 378, 379, 366, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 179, 0, 0, 0, 0, 326, 0,
	0, 0, 123, 0, 325, 0, 0, 0, 151, 0,
	0, 369, 153, 0, 0, 226, 167, 0, 0, 0,
	0, 0, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 91, 92, 93, 347, 346,
	349, 350, 351, 352, 0, 0, 113, 348, 353, 354,
	355, 0, 0, 0, 323, 340, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 338, 0,
	0, 0, 0, 383, 0, 339, 0, 0, 332, 333,
	335, 334, 336, 341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 382, 0, 0, 282, 0, 0,
	380, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 370, 381, 376,
	377, 374, 375, 373, 372, 371, 384, 362, 363, 364,
	365, 367, 0, 378, 379, 366, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 151,
	0, 0, 369, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 347,
	346, 349, 350, 351, 352, 0, 0, 113, 348, 353,
	354, 355, 0, 0, 0, 0, 340, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 338,
	0, 0, 0, 0, 383, 0, 339, 0, 0, 332,
	333, 335, 334, 336, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 382, 0, 0, 282, 0,
	0, 380, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 1592, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 370, 381,
	376, 377, 374, 375, 373, 372, 371, 384, 362, 363,
	364, 365, 367, 0, 378, 379, 366, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	151, 0, 0, 369, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 397, 91, 92, 93,
	347, 346, 349, 350, 351, 352, 0, 0, 113, 348,
	353, 354, 355, 0, 0, 0, 0, 340, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	338, 0, 0, 0, 0, 383, 0, 339, 0, 0,
	332, 333, 335, 334, 336, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 382, 0, 0, 282,
	0, 0, 380, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 370,
	381, 376, 377, 374, 375, 373, 372, 371, 384, 362,
	363, 364, 365, 367, 0, 378, 379, 366, 94, 103,
	152, 261, 201, 128, 250, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 151, 0, 0, 369, 153, 0, 0, 226, 167,
	0, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 91, 92,
	93, 347, 346, 349, 350, 351, 352, 0, 0, 113,
	348, 353, 354, 355, 0, 0, 0, 0, 340, 0,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 338, 0, 0, 0, 0, 383, 0, 339, 0,
	0, 332, 333, 335, 334, 336, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 382, 0, 0,
	282, 0, 0, 380, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 188, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	370, 381, 376, 377, 374, 375, 373, 372, 371, 384,
	362, 363, 364, 365, 367, 0, 378, 379, 366, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 640, 639, 649,
	650, 642, 643, 644, 645, 646, 647, 648, 641, 0,
	0, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 282, 0, 0, 0, 0, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	0, 0, 0, 117, 0, 208, 186, 246, 0, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 0, 0, 227, 249, 264, 111, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 735, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 737, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 630, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 282, 0, 0, 0, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 171,
	108, 140, 224, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 152, 261, 201, 128, 250, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	85, 86, 0, 82, 0, 0, 0, 87, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 226, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	132, 0, 0, 0, 282, 0, 0, 0, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 152, 261, 201, 128, 250,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 313, 179, 0, 0, 0, 1007, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 1009, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 282, 0, 0, 0,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 282,
	0, 0, 0, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	152, 261, 201, 128, 250, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 179, 0, 0, 0,
	1007, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 153, 0, 0, 226, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 1009, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	282, 0, 0, 0, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 1005, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 0, 973, 0, 0, 974, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 282, 0, 0, 0, 0, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	0, 0, 0, 117, 0, 208, 186, 246, 0, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 0, 0, 227, 249, 264, 111, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 770,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 769, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 282, 0, 0, 0, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 171,
	108, 140, 224, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 152, 261, 201, 128, 250, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	397, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 282, 0, 0, 0, 0, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 226, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 282, 0, 0, 0, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 152, 261, 201, 128, 250,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	153, 0, 0, 226, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 1009, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 282, 0, 0, 0, 0,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 0, 0, 0, 117, 0, 208,
	186, 246, 0, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 0, 0, 227, 249, 264,
	111, 0, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 152, 261, 201, 128,
	250, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 737, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 282, 0, 0, 0,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 740, 123, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 226, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 282, 0, 0,
	0, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	619, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 282, 0,
	0, 0, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 0, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 414, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 282, 0, 0, 0,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 226, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 277, 0, 282, 0, 0,
	0, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 282, 0,
	0, 0, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 0, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257,
}
var yyPact = [...]int{

	3144, -1000, -275, 1036, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 968, 778, -1000,
	-1000, -1000, -1000, -1000, -1000, 284, 11521, 26, 147, 20,
	16315, 146, 126, 16656, -1000, 28, -1000, 16, 16656, 24,
	11862, -1000, -1000, -81, -83, -1000, 9475, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 774, 944, 964, 966, 525,
	972, -1000, 8099, 112, 112, 15974, 6735, -1000, -1000, 490,
	16656, 140, 16656, -147, 109, 109, 109, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 129, 16656, 644, 644, 317,
	-1000, 16656, 103, 644, 103, 103, 103, 16656, -1000, 187,
	-1000, -1000, -1000, 16656, 644, 884, 313, 64, 4257, -1000,
	204, -1000, 4257, 42, 4257, -21, 989, 47, -40, -1000,
	4257, -1000, -1000, -1000, -1000, -1000, -1000, 121, -1000, -1000,
	16656, 15626, 128, 298, -1000, -1000, -1000, -1000, -1000, -1000,
	565, 531, -1000, 9475, 1697, 733, 733, -1000, -1000, 177,
	-1000, -1000, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498,
	10498, 10498, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 733, 186, -1000, 9134,
	733, 733, 733, 733, 733, 733, 733, 733, 9475, 733,
	733, 733, 733, 733, 733, 733, 733, 733, 733, 733,
	733, 733, 733, 733, 733, -1000, -1000, 968, -1000, 778,
	-1000, -1000, -1000, 911, 9475, 9475, 968, -1000, 844, 8099,
	-1000, -1000, 853, -1000, -1000, -1000, -1000, 354, 1008, -1000,
	11180, 184, 15285, 14262, 16656, 766, 731, -1000, -1000, 183,
	725, 6381, -104, -1000, -1000, -1000, 268, 13580, -1000, -1000,
	-1000, 878, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, 16656, -1000, 2928, -1000, 644, 4257, 123, 644,
	319, 644, 16656, 16656, 4257, 4257, 4257, 53, 87, 74,
	16656, 723, 117, 16656, 918, 800, 16656, 644, 644, -1000,
	5673, -1000, 4257, 313, -1000, 460, 9475, 4257, 4257, 4257,
	16656, 4257, 4257, -1000, -1000, -1000, 329, -1000, -1000, -1000,
	-1000, 4257, 4257, -1000, 1002, 312, -1000, -1000, -1000, -1000,
	9475, 233, -1000, 798, -1000, 22, -1000, -1000, -1000, -1000,
	-1000, 1036, -1000, -1000, -1000, -129, -1000, -1000, 9475, 9475,
	9475, 545, 239, 10498, 383, 335, 10498, 10498, 10498, 10498,
	10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498, 10498,
	10498, 596, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	644, -1000, 1033, 619, 619, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 10839, 7076, 5673, 525, 708, 968,
	8099, 8099, 9475, 9475, 8781, 8440, 8099, 888, 305, 531,
	16656, -1000, -1000, 10157, -1000, -1000, -1000, -1000, -1000, 475,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16656, 16656, 8099,
	8099, 8099, 8099, 8099, 964, 525, 853, -1000, 1026, 222,
	537, 713, -1000, 394, 964, 13239, 758, -1000, 853, -1000,
	-1000, -1000, 16656, -1000, -1000, 14944, -1000, -1000, 5319, 75,
	16656, -1000, 524, 975, -1000, -1000, -1000, 936, 12557, 12898,
	75, 660, 14262, 16656, -1000, -1000, 14262, 16656, 4965, 6027,
	-104, -1000, 630, -1000, -113, -117, 7417, 202, -1000, -1000,
	-1000, -1000, 3903, 247, 502, 369, -69, -1000, -1000, -1000,
	739, -1000, 739, 739, 739, 739, -25, -25, -25, -25,
	-1000, -1000, -1000, -1000, -1000, 755, 754, -1000, 739, 739,
	739, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 753,
	753, 753, 744, 744, 763, -1000, 16656, 4257, 914, 4257,
	-1000, 82, -1000, -1000, -1000, 16656, 16656, 16656, 16656, 16656,
	156, 16656, 16656, 665, -1000, 16656, 4257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 531, -1000, -1000, -1000, -1000,
	-1000, -1000, 16656, -1000, -1000, -1000, -1000, 16656, 313, 16656,
	16656, 531, -1000, 459, 16656, 16656, -1000, -1000, -1000, -1000,
	-1000, 531, 239, 243, -1000, -1000, 495, -1000, -1000, 1831,
	-1000, -1000, -1000, -1000, 383, 10498, 10498, 10498, 564, 1831,
	1931, 542, 1945, 203, 492, 492, 201, 201, 201, 201,
	201, 435, 435, -1000, -1000, -1000, 475, -1000, -1000, -1000,
	475, 8099, 8099, 655, 733, 181, -1000, 774, -1000, -1000,
	964, 697, 697, 398, 359, 280, 998, 697, 276, 992,
	697, 697, 8099, -1000, -1000, 327, -1000, 9475, 475, -1000,
	180, -1000, 1535, 638, 635, 697, 475, 475, 697, 697,
	911, -1000, -1000, 840, 9475, 9475, 9475, -1000, -1000, -1000,
	911, 983, -1000, 851, 850, 974, 8099, 14262, 853, -1000,
	-1000, -1000, 175, 764, 733, -1000, 16656, 14262, 14262, 14262,
	14262, 14262, -1000, 828, 827, -1000, 814, 812, 813, 16656,
	-1000, 706, 525, 12557, 198, 733, -1000, 14603, -1000, -1000,
	974, 14262, 568, -1000, 568, -1000, 173, -1000, -1000, 630,
	-104, -48, -1000, -1000, -1000, -1000, 531, -1000, 650, 623,
	3549, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 749, 644,
	-1000, 907, 242, 342, 644, 906, -1000, -1000, -1000, 854,
	-1000, 326, -72, -1000, -1000, 405, -25, -25, -1000, -1000,
	202, 860, 202, 202, 202, 457, 457, -1000, -1000, -1000,
	-1000, 397, -1000, -1000, -1000, 396, -1000, 793, 16656, 4257,
	-1000, -1000, -1000, -1000, 389, 389, 238, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 63, 732,
	-1000, -1000, -1000, -1000, -7, 52, 114, -1000, 4257, -1000,
	312, 312, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 564, 1831, 1816, -1000, 10498, 10498, -1000, -1000,
	697, 697, 8099, 5673, 968, 911, -1000, -1000, 127, 596,
	127, 10498, 10498, -1000, 10498, 10498, -1000, -159, 737, 301,
	-1000, 9475, 528, -1000, 5673, -1000, 10498, 10498, -1000, -1000,
	-1000, -1000, -1000, -1000, 838, 531, 531, -1000, -1000, 16656,
	-1000, -1000, -1000, -1000, 986, 9475, -1000, 616, -1000, 4611,
	790, 16656, 733, 1036, 12557, 16656, 574, -1000, 258, 975,
	748, 789, 873, -1000, -1000, -1000, -1000, 824, -1000, 788,
	-1000, -1000, -1000, -1000, -1000, 525, -1000, 134, 132, 130,
	16656, -1000, 968, 568, -1000, -1000, 212, -1000, -1000, -122,
	-133, -1000, -1000, -1000, 3903, -1000, 3903, 16656, 77, -1000,
	644, 644, -1000, -1000, -1000, 745, 771, 10498, -1000, -1000,
	-1000, 497, 202, 202, -1000, 330, -1000, -1000, -1000, 689,
	-1000, 687, 601, 681, 16656, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16656, -1000, -1000, -1000, -1000, -1000,
	16656, -167, 644, 16656, 16656, 16656, 16656, -1000, 313, 313,
	-1000, 10498, 1831, 1831, -1000, -1000, 475, -1000, 964, -1000,
	475, 739, 739, -1000, 739, 744, -1000, 739, 6, 739,
	5, 475, 475, 1760, 1626, 1571, 1226, 733, -154, -1000,
	531, 9475, -1000, 868, 847, -1000, -1000, 973, 945, 531,
	-1000, -1000, 909, 558, 536, -1000, -1000, 7758, 679, 167,
	672, -1000, 968, 16656, 9475, -1000, -1000, 9475, 741, -1000,
	9475, -1000, -1000, -1000, 968, 733, 733, 733, 672, 964,
	-1000, -1000, -1000, -1000, 3549, -1000, 643, -1000, 739, -1000,
	-1000, -1000, 16656, -65, 1025, 1831, -1000, -1000, -1000, -1000,
	-1000, -25, 427, -25, 392, -1000, 390, 4257, -1000, -1000,
	-1000, -1000, 912, -1000, 5673, -1000, -1000, 736, 759, -1000,
	-1000, -1000, -1000, 1831, -1000, 911, -1000, -1000, 165, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10498, 10498, 10498,
	10498, 10498, 964, 426, 531, 10498, 10498, -1000, 9475, 9475,
	905, -1000, 733, -1000, 671, 16656, 16656, -1000, 16656, 964,
	-1000, 531, 531, 16656, 531, 13921, 16656, 16656, 12204, -1000,
	193, 16656, -1000, 621, -1000, 213, -1000, -76, 202, -1000,
	202, 489, 486, -1000, 733, 571, -1000, 256, 16656, 16656,
	-1000, -1000, -1000, 1535, 1535, 1535, 1535, 65, 475, -1000,
	1535, 1535, 531, 565, 1024, -1000, 733, 1036, 139, -1000,
	-1000, -1000, 581, 578, -1000, 578, 578, 198, 193, -1000,
	644, 240, 423, -1000, 85, 16656, 349, 903, -1000, 870,
	-1000, -1000, -1000, -1000, -1000, 62, 5673, 3903, 552, -1000,
	-1000, -1000, -1000, -1000, 475, 58, -172, -1000, -1000, -1000,
	16656, 536, 16656, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	382, -1000, -1000, 16656, -1000, -1000, 421, -1000, -1000, 517,
	-1000, 16656, -1000, -1000, 732, -1000, 837, -164, -175, 529,
	-1000, -1000, 735, -1000, -1000, 62, 848, -167, -1000, 836,
	-1000, 16656, -1000, 59, -1000, -168, 514, 57, -173, 768,
	733, -176, 765, -1000, 996, 9816, -1000, -1000, 1021, 232,
	232, 1535, 475, -1000, -1000, -1000, 92, 409, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1266, 1265, 33, 69, 70, 1264, 1263, 1262, 94,
	93, 92, 1259, 1258, 1254, 1253, 1252, 1250, 1249, 1248,
	1247, 1242, 1240, 1236, 1235, 1233, 1230, 1229, 1226, 1224,
	1223, 1222, 87, 1220, 85, 1219, 1218, 1217, 1216, 1215,
	1214, 1213, 1210, 38, 230, 50, 55, 1209, 57, 1756,
	1208, 60, 90, 63, 1206, 28, 1205, 1204, 104, 1203,
	1202, 59, 1200, 1199, 64, 1198, 71, 1197, 11, 56,
	1194, 1193, 1190, 1189, 79, 1569, 1187, 1184, 14, 1181,
	1179, 108, 1178, 62, 29, 13, 18, 22, 1177, 68,
	1175, 9, 1174, 65, 1171, 1169, 1168, 1166, 47, 1165,
	61, 1164, 53, 24, 1163, 10, 74, 27, 21, 6,
	1162, 1159, 20, 96, 54, 73, 1158, 1157, 559, 1156,
	1155, 39, 1154, 1149, 1148, 23, 1147, 99, 446, 1145,
	1143, 1142, 1141, 40, 1010, 1404, 12, 78, 1139, 1137,
	1135, 2077, 52, 48, 16, 1133, 1132, 1130, 42, 1065,
	36, 1129, 1128, 31, 1127, 1125, 1119, 1118, 1115, 1114,
	1112, 66, 1111, 1108, 1107, 19, 35, 1106, 1105, 72,
	30, 1104, 1103, 1097, 46, 67, 1094, 1092, 58, 1090,
	1089, 25, 1088, 1085, 1084, 1083, 1082, 26, 17, 1074,
	15, 1073, 8, 1068, 32, 1066, 4, 1064, 7, 1063,
	3, 0, 1062, 5, 45, 1, 1050, 2, 1049, 1046,
	132, 1025, 84, 1042, 91,
}
var yyR1 = [...]int{

	0, 208, 209, 209, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 201,
	201, 201, 20, 3, 3, 3, 3, 2, 2, 8,
	4, 5, 5, 9, 9, 35, 35, 10, 11, 11,
	11, 11, 212, 212, 58, 58, 59, 59, 106, 106,
	12, 13, 13, 115, 115, 114, 114, 114, 116, 116,
	116, 116, 151, 151, 14, 14, 14, 14, 14, 14,
	14, 203, 203, 202, 200, 200, 199, 199, 198, 21,
	183, 185, 185, 184, 184, 184, 184, 175, 154, 154,
	154, 154, 157, 157, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 156, 156, 156, 156, 156, 158, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 174, 174, 161, 161,
	169, 169, 170, 170, 170, 167, 167, 168, 168, 171,
	171, 171, 163, 163, 164, 164, 172, 172, 165, 165,
	165, 166, 166, 166, 173, 173, 173, 173, 173, 162,
	162, 176, 176, 193, 193, 192, 192, 192, 182, 182,
	189, 189, 189, 189, 189, 179, 179, 179, 180, 180,
	178, 178, 181, 181, 191, 191, 190, 177, 177, 194,
	194, 194, 194, 206, 207, 205, 205, 205, 205, 205,
	186, 186, 186, 187, 187, 187, 188, 188, 188, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	197, 195, 195, 196, 196, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 122, 122, 124, 124, 120, 120, 123,
	123, 121, 121, 121, 125, 125, 125, 126, 126, 152,
	152, 152, 25, 25, 27, 27, 28, 29, 29, 146,
	146, 147, 147, 30, 31, 36, 36, 36, 36, 36,
	36, 38, 38, 38, 7, 7, 7, 7, 37, 37,
	37, 6, 6, 26, 26, 26, 26, 19, 213, 32,
	33, 33, 34, 34, 34, 40, 40, 40, 39, 39,
	39, 45, 45, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 44, 44, 46, 46, 46, 46,
	138, 138, 138, 137, 137, 50, 50, 51, 51, 52,
	52, 53, 53, 53, 90, 67, 67, 105, 105, 107,
	107, 54, 54, 54, 54, 55, 55, 56, 56, 57,
	57, 145, 145, 144, 144, 144, 143, 143, 60, 60,
	60, 62, 61, 61, 61, 61, 63, 63, 65, 65,
	64, 64, 66, 68, 68, 68, 68, 68, 69, 69,
	49, 49, 49, 49, 49, 49, 49, 119, 119, 71,
	71, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 82, 82, 82, 82, 82, 82, 72, 72, 72,
	72, 72, 72, 72, 43, 43, 83, 83, 83, 89,
	84, 84, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 79, 79, 79, 79,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 214,
	214, 81, 80, 80, 80, 80, 80, 80, 80, 41,
	41, 41, 41, 41, 150, 150, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 94,
	94, 42, 42, 92, 92, 93, 95, 95, 91, 91,
	91, 74, 74, 74, 74, 74, 74, 74, 74, 76,
	76, 76, 96, 96, 97, 97, 98, 98, 99, 99,
	100, 101, 101, 101, 102, 102, 102, 102, 103, 103,
	103, 73, 73, 73, 73, 104, 104, 104, 104, 108,
	108, 85, 85, 87, 87, 86, 88, 109, 109, 112,
	110, 110, 110, 113, 113, 113, 113, 111, 111, 111,
	140, 140, 140, 117, 117, 127, 127, 128, 128, 118,
	118, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 130, 130, 130, 131, 131, 132, 132, 132, 139,
	139, 135, 135, 136, 136, 141, 141, 142, 142, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 210,
	211, 148, 149, 149, 149,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 2, 4, 6, 6, 7, 4, 6, 5,
	8, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 4, 6, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 7, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	8, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 5, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 2, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -208, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -4, -210, 6,
	7, -35, 9, 10, 30, -21, 122, 123, 125, 124,
	158, 126, 151, 53, 172, 173, 175, 176, 177, 178,
	-38, 156, 157, 31, 32, 128, 34, 57, 8, 261,
	153, 152, 25, -209, 363, -34, 5, -98, 15, -3,
	-32, -213, -32, -32, -32, -32, -32, -183, -185, 57,
	95, -132, 132, 77, 253, 129, 130, 136, -135, -201,
	-134, 60, 61, 62, 271, 144, 303, 304, 172, 186,
	180, 207, 199, 272, 305, 145, 197, 200, 240, 142,
	306, 227, 234, 71, 175, 249, 307, 154, 195, 191,
	308, 280, 189, 27, 309, 236, 212, 310, 276, 238,
	190, 235, 128, 311, 147, 140, 312, 213, 217, 313,
	241, 314, 315, 316, 184, 185, 317, 143, 243, 211,
	141, 33, 273, 37, 162, 244, 215, 318, 210, 206,
	319, 320, 321, 322, 209, 183, 205, 41, 219, 218,
	220, 239, 202, 323, 324, 325, 148, 326, 192, 18,
	327, 328, 329, 330, 331, 247, 157, 332, 160, 333,
	334, 335, 336, 337, 338, 237, 214, 216, 137, 164,
	233, 275, 339, 245, 188, 340, 149, 161, 156, 248,
	150, 341, 342, 343, 344, 345, 346, 347, 176, 348,
	349, 350, 351, 171, 242, 251, 40, 224, 352, 182,
	139, 353, 173, 168, 229, 203, 163, 354, 355, 193,
	194, 208, 181, 204, 174, 165, 158, 356, 250, 225,
	277, 201, 198, 169, 357, 166, 167, 358, 230, 231,
	170, 274, 246, 196, 226, -118, 132, 253, 129, 231,
	134, 130, 130, 131, 132, 253, 129, 130, -64, -141,
	-201, -134, 132, 130, 113, 200, 240, 122, 228, 236,
	-124, 237, 164, -152, 130, -120, 227, 230, 231, 170,
	-201, 238, 242, 241, 232, -141, 174, -146, 179, -135,
	177, -64, -36, 359, 126, -148, -148, 229, 229, -148,
	-84, -49, -70, 79, -75, 29, 23, -74, -71, -91,
	-88, -89, 113, 114, 116, 115, 117, 102, 103, 110,
	80, 118, -79, -77, -78, -80, 64, 63, 72, 65,
	66, 67, 68, 73, 74, 75, -135, -141, -86, -210,
	47, 48, 262, 263, 264, 265, 270, 266, 82, 36,
	252, 260, 259, 258, 256, 257, 254, 255, 268, 269,
	135, 253, 129, 108, 261, -201, -134, -5, -4, -210,
	6, 20, 21, -102, 17, 16, -211, 59, -40, -47,
	42, 43, -48, 21, 35, 46, 44, -33, -46, 104,
	-49, -141, -118, -118, 11, -58, -59, -64, -66, -141,
	-110, -151, 174, -113, 242, 241, -136, -111, -135, -133,
	240, 200, 239, 127, 278, 78, 22, 24, 222, 81,
	113, 16, 82, 112, 262, 122, 51, 279, 254, 255,
	252, 264, 265, 253, 228, 29, 10, 281, 25, 152,
	21, 35, 106, 124, 85, 86, 155, 23, 153, 75,
	284, 19, 54, 11, 13, 285, 286, 14, 135, 134,
	97, 131, 49, 8, 118, 26, 94, 45, 287, 28,
	288, 289, 290, 291, 47, 95, 17, 256, 257, 31,
	292, 270, 159, 108, 52, 38, 79, 293, 294, 73,
	295, 76, 55, 77, 15, 50, 296, 297, 298, 299,
	96, 125, 261, 48, 300, 129, 6, 267, 30, 151,
	46, 301, 130, 84, 268, 269, 133, 74, 5, 136,
	32, 9, 53, 56, 258, 259, 260, 36, 83, 12,
	302, -184, 95, -175, -201, -64, 131, -64, 261, -128,
	135, -128, -128, 130, -64, -201, -201, 122, 124, 127,
	55, -22, -64, -127, 135, -201, -127, -127, -127, -64,
	119, -64, -201, 30, -125, 95, 12, 253, -201, 164,
	130, 165, 132, -149, -210, -136, -179, 131, 33, 143,
	-149, 168, 169, -149, -123, -122, 234, 235, 229, 233,
	12, 169, 229, 167, -149, 133, -135, -37, -135, 64,
	-7, -3, -10, -9, -11, 87, -148, -148, 58, 78,
	77, 94, -49, -72, 97, 79, 95, 96, 81, 99,
	98, 109, 102, 103, 104, 105, 106, 107, 108, 100,
	101, 112, 87, 88, 89, 90, 91, 92, 93, -119,
	-210, -89, -210, 120, 121, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -210, 119, -2, -84, -4,
	-210, -210, -210, -210, -210, -210, -210, -210, -94, -49,
	-210, -214, -81, -210, -214, -81, -214, -81, -214, -210,
	-214, -81, -214, -81, -214, -214, -81, -210, -210, -210,
	-210, -210, -210, -210, -98, -3, -32, -103, 19, 31,
	-49, -99, -100, -49, -98, 38, -44, -46, -48, 42,
	43, 70, 11, -138, -137, 22, -135, 64, 119, -65,
	26, -64, -51, -52, -53, -54, -67, -90, -210, -64,
	-64, -58, -212, 58, 11, 56, -212, 58, 119, 58,
	174, -113, -115, -114, 243, 245, 87, -140, -135, 64,
	29, 30, 59, 58, -64, -154, -157, -159, -158, -160,
	-155, -156, 197, 198, 113, 201, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 30, 154, 193, 194,
	195, 196, 213, 214, 215, 216, 217, 218, 219, 220,
	180, 199, 272, 181, 182, 183, 184, 185, 186, 188,
	189, 190, 191, 192, -201, -149, 132, -201, 79, -201,
	-64, -64, -149, -149, -149, 166, 166, 130, 130, 171,
	-64, 58, 133, -58, 23, 55, -64, -201, -201, -142,
	-141, -133, -149, -125, 64, -49, -149, -149, -149, -64,
	-149, -149, -180, 11, 97, -149, -149, 11, -121, 11,
	97, -49, -126, 95, 55, -147, 177, 211, 360, 361,
	362, -49, -49, -49, -82, 73, 79, 74, 75, -75,
	-83, -86, -89, 69, 97, 95, 96, 81, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -150, -201, 64, -201, -74, -74, -135,
	-45, 21, 35, -44, -136, -142, -133, -34, -211, -211,
	-98, -44, -44, -49, -49, -91, 64, -44, -91, 64,
	-44, -44, -39, 21, 35, -92, -93, 83, -91, -135,
	-141, -211, -75, -135, -135, -44, -45, -45, -44, -44,
	-102, -211, 9, 97, 58, 18, 58, -101, 24, 25,
	-102, -76, -135, 65, 68, -50, 58, 11, -48, -64,
	-137, 104, -142, -106, 160, -64, 30, 58, -60, -62,
	-61, -63, 45, 49, 51, 46, 47, 48, 52, -145,
	22, -51, -3, -210, -144, 160, -143, 22, -141, 64,
	-106, 56, -51, -64, -51, -66, -141, 104, -113, -115,
	58, 244, 246, 247, 55, 76, -49, -166, 112, -186,
	-187, -188, -136, 64, 65, -175, -176, -177, -189, 146,
	-194, 137, 139, 136, -178, 147, 131, 28, 59, -171,
	73, 79, -167, 225, -161, 57, -161, -161, -161, -161,
	-165, 200, -165, -165, -165, 57, 57, -161, -161, -161,
	-169, 57, -169, -169, -170, 57, -170, -139, 56, -64,
	-149, 23, -149, -129, 127, 124, 125, -197, 123, 222,
	200, 71, 29, 15, 262, 160, 277, -201, 161, -64,
	-64, -64, -64, -64, 127, 124, -64, -64, -64, -149,
	-64, -64, -125, -141, -141, 64, -64, -135, 73, 74,
	75, -83, -75, -75, -75, -43, 155, 78, -211, -211,
	-44, -44, -210, 119, -5, -102, -211, -211, 58, 56,
	22, 11, 11, -211, 11, 11, -211, -211, -44, -95,
	-93, 85, -49, -211, 119, -211, 58, 58, -211, -211,
	-211, -211, -211, -103, 40, -49, -49, -100, -103, -117,
	19, 11, 36, 36, -69, 12, -46, -51, -48, 119,
	-73, 30, 36, -3, -210, -210, -109, -112, -91, -52,
	-53, -53, -52, -53, 45, 45, 45, 50, 45, 50,
	45, -61, -141, -211, -211, -3, -68, 53, 134, 54,
	-210, -143, -69, -51, -69, -69, 119, -114, -116, 248,
	245, 251, -201, 64, 58, -188, 87, 57, -201, 28,
	-178, -178, -181, -201, -181, 28, -163, 29, 73, -168,
	226, 65, -165, -165, -166, 30, -166, -166, -166, -174,
	64, -174, 65, 65, 55, -135, -149, -148, -204, 142,
	138, 146, 147, 140, 60, 61, 62, 131, 28, 137,
	139, 160, 136, -204, -130, -131, 133, 22, 131, 28,
	160, -203, 56, 166, 222, 166, 133, -149, -121, -121,
	-43, 78, -75, -75, -211, -211, -45, -136, -98, -103,
	-153, 113, 197, 154, 195, 191, 211, 202, 224, 193,
	225, -150, -153, -75, -75, -75, -75, 271, -98, 86,
	-49, 84, -136, -75, -75, 41, -64, -96, 13, -49,
	104, -108, 55, -109, -85, -87, -86, -210, -104, -135,
	-107, -135, -69, 58, 87, -56, -55, 55, 56, -57,
	55, -55, 45, 45, -211, 131, 131, 131, -107, -98,
	-69, 245, 249, 250, -187, -188, -191, -190, -135, -194,
	-181, -181, 57, -164, 55, -75, 59, -166, -166, -201,
	113, 59, 58, 59, 58, 59, 58, -64, -148, -148,
	-64, -148, -135, -200, 274, -202, -201, -135, -135, -135,
	-64, -125, -125, -75, -211, -102, -211, -161, -161, -161,
	-170, -161, 185, -161, 185, -211, -211, 19, 19, 19,
	19, -210, -42, 267, -49, 58, 58, -97, 14, 16,
	27, -108, 58, -211, -211, 58, 119, -211, 58, -98,
	-112, -49, -49, 57, -49, -210, -210, -210, -211, -102,
	59, 58, -161, -105, -135, -172, 222, 9, -165, 64,
	-165, 65, 65, -149, 26, -199, -198, -136, 57, 56,
	-103, -165, -201, -75, -75, -75, -75, -75, -102, 64,
	-75, -75, -49, -84, 28, -87, 36, -3, -135, -135,
	-135, -102, -105, -105, -211, -105, -105, -144, -193, -192,
	56, 141, 71, -190, 59, 58, -173, 137, 28, 136,
	-78, -166, -166, 59, 59, -210, 58, 87, -105, -64,
	-211, -211, -211, -211, -41, 97, 274, -211, -211, -211,
	9, -85, 119, 59, -211, -211, -211, -68, -192, -201,
	-182, 87, 64, 149, -135, -162, 71, 28, 28, -195,
	-196, 160, -198, -188, 59, -211, 272, 52, 275, -109,
	-135, 65, -64, 64, -211, 58, -135, -203, 41, 273,
	276, 57, -196, 36, -200, 41, -105, 162, 274, 59,
	163, 275, -206, -207, 55, -210, 276, -207, 55, 10,
	9, -75, 159, -205, 150, 145, 148, 30, -205, -211,
	-211, 144, 29, 73,
}
var yyDef = [...]int{

	28, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 616, 0, 358,
	358, 358, 358, 358, 358, 0, 686, 669, 0, 0,
	0, 0, -2, 323, 324, 0, 326, -2, 0, 0,
	335, 991, 991, 0, 0, 991, 0, 989, 45, 46,
	341, 342, 343, 1, 3, 0, 362, 624, 0, 0,
	-2, 360, 0, 669, 669, 0, 0, 74, 75, 0,
	0, 0, 978, 0, 667, 667, 667, 687, 688, 691,
	692, 29, 30, 31, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 0, 0, 0, 0, 0,
	670, 0, 665, 0, 665, 665, 665, 0, 274, 440,
	695, 696, 978, 0, 0, 0, 314, 0, 992, 286,
	0, 288, 992, 0, 992, 0, 295, 0, 0, 301,
	992, 306, 320, 321, 308, 322, 325, 0, 330, 333,
	0, 348, 0, 0, 340, 353, 354, 991, 991, 357,
	32, 490, 450, 0, 455, 457, 0, 492, 493, 494,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 523, 524, 525, 601, 602, 603, 604,
	605, 606, 607, 608, 459, 460, 598, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	559, 559, 559, 559, 559, 559, 559, 559, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 616, 41, 0,
	358, 363, 364, 628, 0, 0, 616, 990, 0, 0,
	-2, -2, 374, 380, 381, 382, 383, 359, 0, 386,
	390, 0, 0, 0, 0, 0, 0, 54, 56, 440,
	60, 0, 967, 650, -2, -2, 0, 0, 693, 694,
	-2, 830, -2, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 0, 0, 93, 0, 91, 0, 992, 0, 0,
	0, 0, 0, 0, 992, 992, 992, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 275, 992, 314, 278, 0, 0, 992, 992, 992,
	0, 992, 992, 285, 993, 994, 0, 195, 196, 197,
	289, 992, 992, 291, 0, 311, 309, 310, 303, 304,
	0, 317, 298, 299, 302, 331, 334, 351, 349, 350,
	352, 344, 345, 346, 347, 0, 355, 356, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 478, 479, 480, 481, 482, 483, 456,
	0, 470, 0, 0, 0, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 0, 371, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 0, 0, 368, 0, 590,
	0, 543, 551, 0, 544, 552, 545, 553, 546, 0,
	547, 554, 548, 555, 549, 550, 556, 0, 0, 0,
	371, 371, 0, 0, 624, 0, 373, 33, 0, 0,
	625, 617, 618, 621, 624, 0, 395, 384, 375, 378,
	379, 361, 0, 387, 391, 0, 393, 394, 0, 58,
	0, 439, 0, 397, 399, 400, 401, 421, 0, 423,
	-2, 0, 0, 0, 52, 53, 0, 0, 0, 0,
	967, 651, 62, 63, 0, 0, 0, 171, 660, 661,
	662, 658, 220, 0, 0, 159, 155, 99, 100, 101,
	148, 103, 148, 148, 148, 148, 168, 168, 168, 168,
	131, 132, 133, 134, 135, 0, 0, 118, 148, 148,
	148, 122, 138, 139, 140, 141, 142, 143, 144, 145,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 150,
	150, 150, 152, 152, 689, 77, 0, 992, 0, 992,
	89, 0, 234, 236, 237, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 666, 0, 992, 271, 272, 441,
	697, 698, 276, 277, 315, 316, 279, 280, 281, 282,
	283, 284, 0, 198, 199, 290, 294, 0, 314, 0,
	0, 296, 297, 0, 0, 0, 332, 336, 337, 338,
	339, 491, 451, 452, 454, 471, 0, 473, 475, 461,
	462, 486, 487, 488, 0, 0, 0, 0, 484, 466,
	0, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 511, 574, 575, 0, 509, 510, 521,
	0, 0, 0, 372, 599, 0, -2, 0, 489, 645,
	624, 0, 0, 0, 0, 494, 601, 0, 494, 601,
	0, 0, 0, 369, 370, 596, 593, 0, 0, 598,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 42, 629, 0, 0, 0, 0, 620, 622, 623,
	628, 0, 609, 0, 0, 448, 0, 0, 376, 39,
	392, 388, 0, 0, 0, 438, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 431, 0, 0, 0, 0,
	422, 0, 0, 0, 443, 911, 424, 0, 426, 427,
	448, 0, 448, 55, 448, 57, 0, 442, 652, 61,
	0, 0, 66, 67, 653, 654, 655, 656, 0, 90,
	221, 223, 226, 227, 228, 94, 95, 96, 0, 0,
	208, 0, 0, 202, 202, 0, 200, 201, 92, 162,
	160, 0, 157, 156, 102, 0, 168, 168, 125, 126,
	171, 0, 171, 171, 171, 0, 0, 119, 120, 121,
	113, 0, 114, 115, 116, 0, 117, 0, 0, 992,
	79, 668, 80, 991, 0, 0, 681, 235, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 0, 81,
	239, 241, 240, 244, 0, 0, 0, 266, 992, 270,
	311, 311, 293, 312, 313, 318, 300, 328, 472, 474,
	476, 463, 484, 467, 0, 464, 0, 0, 458, 526,
	0, 0, 371, 0, 616, 628, 530, 531, 0, 0,
	0, 0, 0, 567, 0, 0, 568, 0, 616, 0,
	594, 0, 0, 542, 0, 561, 0, 0, 562, 563,
	564, 565, 566, 35, 0, 626, 627, 619, 34, 0,
	663, 664, 610, 611, 612, 0, 385, 396, 377, 0,
	639, 0, 0, 632, 0, 0, 448, 647, 0, 398,
	417, 419, 0, 414, 429, 430, 432, 0, 434, 0,
	436, 437, 402, 403, 404, 0, 405, 0, 0, 0,
	0, 425, 616, 448, 50, 51, 0, 64, 65, 0,
	0, 71, 172, 173, 0, 224, 0, 0, 0, 190,
	202, 202, 193, 203, 194, 0, 164, 0, 161, 98,
	158, 0, 171, 171, 127, 0, 128, 129, 130, 0,
	146, 0, 0, 0, 0, 690, 78, 229, 991, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 991, 0, 991, 682, 683, 684, 685,
	0, 84, 0, 0, 0, 0, 0, 269, 314, 314,
	465, 0, 485, 468, 527, 528, 0, 600, 624, 37,
	0, 148, 148, 579, 148, 152, 582, 148, 584, 148,
	587, 0, 0, 0, 0, 0, 0, 0, 591, 541,
	597, 0, 599, 0, 0, 630, 36, 614, 0, 449,
	389, 43, 0, 639, 631, 641, 643, 0, 0, 635,
	0, 409, 616, 0, 0, 411, 418, 0, 0, 412,
	0, 413, 433, 435, -2, 0, 0, 0, 0, 624,
	49, 68, 69, 70, 222, 225, 0, 204, 148, 207,
	191, 192, 0, 166, 0, 163, 149, 123, 124, 169,
	170, 168, 0, 168, 0, 153, 0, 992, 230, 231,
	232, 233, 0, 238, 0, 82, 83, 0, 0, 243,
	267, 287, 292, 469, 529, 628, 532, 576, 168, 580,
	581, 583, 585, 586, 588, 534, 533, 0, 0, 0,
	0, 0, 624, 0, 595, 0, 0, 40, 0, 0,
	0, 44, 0, 644, 0, 0, 0, 59, 0, 624,
	648, 649, 415, 0, 420, 0, 0, 0, 423, 48,
	182, 0, 206, 0, 407, 174, 167, 0, 171, 147,
	171, 0, 0, 76, 0, 85, 86, 0, 0, 0,
	38, 577, 578, 0, 0, 0, 0, 569, 0, 592,
	0, 0, 615, 613, 0, 642, 0, 634, 637, 636,
	410, 47, 0, 0, 445, 0, 0, 443, 181, 183,
	0, 188, 0, 205, 0, 0, 179, 0, 176, 178,
	165, 136, 137, 151, 154, 0, 0, 0, 0, 245,
	535, 537, 536, 538, 0, 0, 0, 540, 557, 558,
	0, 633, 0, 416, 444, 446, 447, 406, 184, 185,
	0, 189, 187, 0, 408, 97, 0, 175, 177, 0,
	261, 0, 87, 88, 81, 539, 0, 0, 0, 640,
	638, 186, 0, 180, 260, 0, 0, 84, 570, 0,
	573, 0, 262, 0, 242, 571, 0, 0, 0, 209,
	0, 0, 210, 211, 0, 0, 572, 212, 0, 0,
	0, 0, 0, 213, 215, 216, 0, 0, 214, 263,
	264, 217, 218, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	57, 59, 104, 102, 58, 103, 119, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 363,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:373
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:393
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:399
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:438
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:466
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:470
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:477
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.str = InsertStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.str = ReplaceStr
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:521
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:543
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:553
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:558
		{
			yyVAL.partitions = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:562
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:588
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:594
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = RepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = ReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = ReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.str = Serializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:647
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:669
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:673
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:684
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:689
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:700
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:712
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:719
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:726
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:730
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:741
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:745
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:749
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:755
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.sqlVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1000
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1018
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1085
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1089
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1111
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1132
		{
			yyVAL.sqlVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1263
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1280
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1284
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1288
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1292
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1298
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1304
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1318
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1322
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1326
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1347
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1387
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1392
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1499
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1515
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1519
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1535
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1543
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1551
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1556
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1594
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1637
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1658
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1663
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = "extended "
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = "full "
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1762
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1776
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			yyVAL.showFilter = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = SessionStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = GlobalStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Begin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Commit{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Rollback{}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1854
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = JSONStr
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = TreeStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = VitessStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = TraditionalStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = AnalyzeStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &OtherRead{}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			setAllowComments(yylex, true)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1979
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1985
		{
			yyVAL.bytes2 = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1989
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = UnionStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = UnionAllStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = UnionDistinctStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = SQLCacheStr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = DistinctStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = DistinctStr
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2034
		{
			yyVAL.selectExprs = nil
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2043
		{
			yyVAL.strs = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2059
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = SQLCacheStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = DistinctStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = DistinctStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = StraightJoinHint
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2095
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2109
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2113
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2118
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2138
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2186
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2219
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2243
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2249
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2254
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2259
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = JoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = JoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = StraightJoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.str = LeftJoinStr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = LeftJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = RightJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = RightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = NaturalJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2357
		{
			yyVAL.indexHints = nil
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2361
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2365
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2369
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2373
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2418
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.str = IsNullStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = IsNotNullStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = IsTrueStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = IsNotTrueStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = IsFalseStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = IsNotFalseStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.str = EqualStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.str = LessThanStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = GreaterThanStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.str = LessEqualStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.str = GreaterEqualStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.str = NotEqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2545
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2559
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 535:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 539:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2923
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.str = BooleanModeStr
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2931
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 572:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2935
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.str = QueryExpansionStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = nil
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = string("")
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3033
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3062
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &NullVal{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3111
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3120
		{
			yyVAL.exprs = nil
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = nil
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3138
		{
			yyVAL.orderBy = nil
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3142
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3152
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3163
		{
			yyVAL.str = AscScr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.str = AscScr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.str = DescScr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3176
		{
			yyVAL.limit = nil
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3180
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3184
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3188
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3193
		{
			yyVAL.str = ""
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3197
		{
			yyVAL.str = ForUpdateStr
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3201
		{
			yyVAL.str = ShareModeStr
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3222
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3226
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3236
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3240
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3244
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.updateExprs = nil
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3253
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3273
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3299
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3305
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3315
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3320
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3326
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3334
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3338
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.bytes = []byte("charset")
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.expr = &Default{}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3369
		{
			yyVAL.byt = 0
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3371
		{
			yyVAL.byt = 1
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3374
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3376
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3379
		{
			yyVAL.str = ""
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.str = IgnoreStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3406
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3419
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3421
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3423
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3426
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3428
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3776
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			decNesting(yylex)
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3790
		{
			skipToEnd(yylex)
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3795
		{
			skipToEnd(yylex)
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3799
		{
			skipToEnd(yylex)
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3803
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
