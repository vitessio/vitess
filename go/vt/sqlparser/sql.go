// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const AT_ID = 57398
const AT_AT_ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const ACTION = 57464
const CASCADE = 57465
const CONSTRAINT = 57466
const FOREIGN = 57467
const NO = 57468
const REFERENCES = 57469
const RESTRICT = 57470
const SHOW = 57471
const DESCRIBE = 57472
const EXPLAIN = 57473
const DATE = 57474
const ESCAPE = 57475
const REPAIR = 57476
const OPTIMIZE = 57477
const TRUNCATE = 57478
const MAXVALUE = 57479
const PARTITION = 57480
const REORGANIZE = 57481
const LESS = 57482
const THAN = 57483
const PROCEDURE = 57484
const TRIGGER = 57485
const VINDEX = 57486
const VINDEXES = 57487
const STATUS = 57488
const VARIABLES = 57489
const WARNINGS = 57490
const SEQUENCE = 57491
const BEGIN = 57492
const START = 57493
const TRANSACTION = 57494
const COMMIT = 57495
const ROLLBACK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const GEOMETRY = 57530
const POINT = 57531
const LINESTRING = 57532
const POLYGON = 57533
const GEOMETRYCOLLECTION = 57534
const MULTIPOINT = 57535
const MULTILINESTRING = 57536
const MULTIPOLYGON = 57537
const NULLX = 57538
const AUTO_INCREMENT = 57539
const APPROXNUM = 57540
const SIGNED = 57541
const UNSIGNED = 57542
const ZEROFILL = 57543
const COLLATION = 57544
const DATABASES = 57545
const TABLES = 57546
const VITESS_METADATA = 57547
const VSCHEMA = 57548
const FULL = 57549
const PROCESSLIST = 57550
const COLUMNS = 57551
const FIELDS = 57552
const ENGINES = 57553
const PLUGINS = 57554
const NAMES = 57555
const CHARSET = 57556
const GLOBAL = 57557
const SESSION = 57558
const ISOLATION = 57559
const LEVEL = 57560
const READ = 57561
const WRITE = 57562
const ONLY = 57563
const REPEATABLE = 57564
const COMMITTED = 57565
const UNCOMMITTED = 57566
const SERIALIZABLE = 57567
const CURRENT_TIMESTAMP = 57568
const DATABASE = 57569
const CURRENT_DATE = 57570
const CURRENT_TIME = 57571
const LOCALTIME = 57572
const LOCALTIMESTAMP = 57573
const UTC_DATE = 57574
const UTC_TIME = 57575
const UTC_TIMESTAMP = 57576
const REPLACE = 57577
const CONVERT = 57578
const CAST = 57579
const SUBSTR = 57580
const SUBSTRING = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const TIMESTAMPADD = 57584
const TIMESTAMPDIFF = 57585
const MATCH = 57586
const AGAINST = 57587
const BOOLEAN = 57588
const LANGUAGE = 57589
const WITH = 57590
const QUERY = 57591
const EXPANSION = 57592
const UNUSED = 57593
const ARRAY = 57594
const CUME_DIST = 57595
const DESCRIPTION = 57596
const DENSE_RANK = 57597
const EMPTY = 57598
const EXCEPT = 57599
const FIRST_VALUE = 57600
const GROUPING = 57601
const GROUPS = 57602
const JSON_TABLE = 57603
const LAG = 57604
const LAST_VALUE = 57605
const LATERAL = 57606
const LEAD = 57607
const MEMBER = 57608
const NTH_VALUE = 57609
const NTILE = 57610
const OF = 57611
const OVER = 57612
const PERCENT_RANK = 57613
const RANK = 57614
const RECURSIVE = 57615
const ROW_NUMBER = 57616
const SYSTEM = 57617
const WINDOW = 57618
const ACTIVE = 57619
const ADMIN = 57620
const BUCKETS = 57621
const CLONE = 57622
const COMPONENT = 57623
const DEFINITION = 57624
const ENFORCED = 57625
const EXCLUDE = 57626
const FOLLOWING = 57627
const GEOMCOLLECTION = 57628
const GET_MASTER_PUBLIC_KEY = 57629
const HISTOGRAM = 57630
const HISTORY = 57631
const INACTIVE = 57632
const INVISIBLE = 57633
const LOCKED = 57634
const MASTER_COMPRESSION_ALGORITHMS = 57635
const MASTER_PUBLIC_KEY_PATH = 57636
const MASTER_TLS_CIPHERSUITES = 57637
const MASTER_ZSTD_COMPRESSION_LEVEL = 57638
const NESTED = 57639
const NETWORK_NAMESPACE = 57640
const NOWAIT = 57641
const NULLS = 57642
const OJ = 57643
const OLD = 57644
const OPTIONAL = 57645
const ORDINALITY = 57646
const ORGANIZATION = 57647
const OTHERS = 57648
const PATH = 57649
const PERSIST = 57650
const PERSIST_ONLY = 57651
const PRECEDING = 57652
const PRIVILEGE_CHECKS_USER = 57653
const PROCESS = 57654
const RANDOM = 57655
const REFERENCE = 57656
const REQUIRE_ROW_FORMAT = 57657
const RESOURCE = 57658
const RESPECT = 57659
const RESTART = 57660
const RETAIN = 57661
const REUSE = 57662
const ROLE = 57663
const SECONDARY = 57664
const SECONDARY_ENGINE = 57665
const SECONDARY_LOAD = 57666
const SECONDARY_UNLOAD = 57667
const SKIP = 57668
const SRID = 57669
const THREAD_PRIORITY = 57670
const TIES = 57671
const UNBOUNDED = 57672
const VCPU = 57673
const VISIBLE = 57674

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 37,
	163, 307,
	164, 307,
	-2, 295,
	-1, 325,
	115, 651,
	-2, 647,
	-1, 326,
	115, 652,
	-2, 648,
	-1, 395,
	85, 900,
	-2, 66,
	-1, 396,
	85, 818,
	-2, 67,
	-1, 401,
	85, 787,
	-2, 613,
	-1, 403,
	85, 848,
	-2, 615,
	-1, 702,
	1, 360,
	5, 360,
	12, 360,
	13, 360,
	14, 360,
	15, 360,
	17, 360,
	19, 360,
	30, 360,
	31, 360,
	43, 360,
	44, 360,
	45, 360,
	46, 360,
	47, 360,
	49, 360,
	50, 360,
	53, 360,
	54, 360,
	56, 360,
	57, 360,
	350, 360,
	-2, 378,
	-1, 705,
	54, 47,
	56, 47,
	-2, 51,
	-1, 859,
	115, 654,
	-2, 650,
	-1, 1091,
	5, 33,
	-2, 446,
	-1, 1122,
	5, 32,
	-2, 587,
	-1, 1370,
	5, 33,
	-2, 588,
	-1, 1423,
	5, 32,
	-2, 590,
	-1, 1503,
	5, 33,
	-2, 591,
}

const yyPrivate = 57344

const yyLast = 16267

var yyAct = [...]int{

	325, 1537, 1125, 1527, 1219, 1332, 330, 974, 1491, 1390,
	1403, 1272, 1436, 356, 1143, 657, 343, 566, 947, 1306,
	1003, 997, 1273, 1269, 57, 304, 656, 3, 1170, 945,
	1126, 1017, 80, 555, 983, 970, 268, 973, 289, 268,
	1279, 1285, 1244, 332, 295, 884, 1082, 804, 895, 1187,
	1196, 822, 891, 564, 718, 1149, 400, 934, 987, 949,
	861, 699, 588, 594, 1013, 394, 389, 268, 80, 698,
	524, 525, 268, 913, 268, 927, 328, 313, 303, 717,
	600, 609, 386, 391, 707, 397, 671, 56, 1036, 296,
	297, 298, 299, 672, 704, 302, 61, 1530, 1514, 544,
	1525, 368, 1035, 374, 375, 372, 373, 371, 370, 369,
	1501, 1522, 317, 1333, 1513, 1500, 1261, 376, 377, 1362,
	529, 1300, 63, 64, 65, 66, 67, 1301, 1302, 964,
	266, 82, 83, 84, 301, 82, 83, 84, 965, 966,
	1245, 582, 1034, 1465, 622, 621, 631, 632, 624, 625,
	626, 627, 628, 629, 630, 623, 300, 719, 633, 720,
	1178, 388, 264, 260, 261, 262, 526, 1158, 528, 256,
	1157, 577, 254, 1159, 258, 578, 575, 576, 1247, 996,
	1221, 1393, 82, 83, 84, 1004, 1353, 1351, 580, 294,
	918, 1223, 1031, 1028, 1029, 1206, 1027, 790, 793, 1524,
	581, 570, 571, 561, 792, 563, 1521, 1492, 1218, 928,
	1484, 988, 1249, 1545, 1253, 1437, 1248, 545, 1246, 1445,
	531, 258, 1224, 1251, 797, 1202, 1203, 1204, 1038, 1041,
	1439, 990, 1250, 1222, 781, 1215, 560, 562, 794, 791,
	1541, 1217, 1295, 1294, 1293, 1252, 1254, 527, 1144, 1146,
	1473, 534, 894, 271, 259, 268, 536, 537, 1048, 1373,
	268, 1047, 546, 1230, 541, 1033, 268, 257, 1100, 1154,
	1097, 1110, 268, 553, 645, 646, 559, 80, 1076, 833,
	990, 263, 80, 713, 80, 613, 551, 1032, 255, 971,
	80, 82, 83, 84, 1205, 633, 960, 830, 1438, 1210,
	1207, 1198, 1208, 1201, 608, 1197, 1482, 827, 1199, 1200,
	82, 83, 84, 1466, 623, 557, 1004, 633, 823, 70,
	80, 558, 1209, 1446, 1444, 1454, 1037, 1145, 1499, 538,
	989, 539, 596, 1283, 540, 569, 597, 572, 990, 721,
	1216, 1039, 1214, 583, 1319, 584, 585, 1263, 914, 535,
	1539, 783, 1176, 1540, 543, 1538, 1095, 71, 1094, 1096,
	550, 1487, 547, 548, 549, 603, 552, 868, 82, 83,
	84, 643, 1505, 645, 646, 645, 646, 607, 606, 989,
	1399, 866, 867, 865, 268, 268, 268, 626, 627, 628,
	629, 630, 623, 80, 608, 633, 556, 836, 837, 80,
	587, 1398, 824, 82, 83, 84, 914, 598, 1107, 253,
	397, 1546, 607, 606, 697, 606, 622, 621, 631, 632,
	624, 625, 626, 627, 628, 629, 630, 623, 702, 608,
	633, 608, 54, 607, 606, 993, 1507, 989, 523, 1191,
	1265, 994, 986, 984, 864, 985, 1190, 1179, 607, 606,
	608, 982, 988, 1547, 607, 606, 674, 676, 678, 680,
	682, 684, 685, 675, 677, 608, 681, 683, 706, 686,
	1083, 608, 711, 1282, 383, 384, 715, 1483, 696, 617,
	705, 620, 1073, 1074, 1075, 1417, 1396, 634, 635, 636,
	637, 638, 639, 640, 586, 618, 619, 616, 622, 621,
	631, 632, 624, 625, 626, 627, 628, 629, 630, 623,
	1188, 1059, 633, 621, 631, 632, 624, 625, 626, 627,
	628, 629, 630, 623, 268, 530, 633, 832, 779, 80,
	809, 782, 1451, 784, 268, 268, 80, 80, 80, 82,
	83, 84, 268, 886, 22, 268, 1442, 1523, 268, 802,
	803, 1450, 268, 1315, 80, 82, 83, 84, 991, 80,
	80, 80, 268, 80, 80, 831, 1509, 587, 268, 268,
	1233, 80, 80, 624, 625, 626, 627, 628, 629, 630,
	623, 897, 780, 633, 607, 606, 1442, 1495, 808, 787,
	788, 789, 851, 853, 854, 82, 83, 84, 852, 1161,
	80, 608, 532, 533, 308, 268, 1368, 807, 806, 1442,
	587, 80, 811, 812, 813, 1089, 815, 816, 729, 1442,
	1474, 1453, 838, 1270, 819, 820, 1282, 798, 785, 786,
	862, 858, 1442, 1441, 885, 931, 795, 1388, 1387, 388,
	1375, 587, 801, 887, 1323, 631, 632, 624, 625, 626,
	627, 628, 629, 630, 623, 80, 814, 633, 1372, 587,
	863, 857, 817, 818, 346, 345, 348, 349, 350, 351,
	859, 904, 907, 347, 352, 709, 840, 915, 1325, 1324,
	1321, 1322, 1321, 1320, 1089, 587, 899, 24, 80, 80,
	931, 587, 855, 897, 587, 709, 268, 728, 727, 847,
	930, 24, 319, 24, 268, 268, 1162, 963, 268, 268,
	1150, 1120, 268, 268, 268, 80, 1121, 58, 710, 954,
	712, 708, 888, 889, 1150, 1113, 931, 1112, 80, 525,
	1422, 1089, 397, 708, 714, 834, 54, 955, 710, 796,
	708, 957, 54, 923, 924, 975, 1515, 702, 911, 1405,
	54, 702, 54, 1220, 931, 702, 998, 1406, 1089, 999,
	1000, 1001, 1002, 1005, 1006, 1007, 1380, 1021, 1282, 1018,
	806, 310, 1311, 1286, 1287, 1010, 1011, 1012, 1165, 958,
	961, 953, 268, 80, 1014, 80, 1009, 1040, 839, 1008,
	929, 268, 268, 268, 268, 268, 962, 268, 268, 978,
	1532, 268, 80, 956, 1528, 936, 939, 940, 941, 937,
	1019, 938, 942, 1313, 1292, 1286, 1287, 1289, 587, 1270,
	54, 1192, 268, 828, 268, 268, 800, 1137, 1135, 268,
	846, 1291, 1138, 1136, 1134, 1133, 1023, 1519, 1025, 1061,
	1015, 1016, 1139, 1512, 940, 941, 1229, 896, 898, 314,
	315, 858, 1517, 1071, 1070, 1052, 1056, 622, 621, 631,
	632, 624, 625, 626, 627, 628, 629, 630, 623, 1053,
	1054, 633, 1183, 726, 554, 1175, 1022, 1489, 1488, 862,
	601, 1064, 1420, 1173, 601, 1042, 1043, 1044, 1045, 1046,
	859, 1049, 1050, 602, 1167, 1051, 599, 602, 1065, 1366,
	589, 1066, 1401, 1024, 936, 939, 940, 941, 937, 863,
	938, 942, 590, 900, 901, 799, 1055, 906, 909, 910,
	944, 311, 312, 1060, 305, 1459, 1078, 306, 58, 1458,
	1069, 1408, 268, 268, 268, 268, 268, 1127, 1068, 1150,
	579, 1101, 922, 1098, 268, 925, 926, 268, 1534, 1533,
	62, 268, 821, 604, 1122, 268, 568, 567, 1534, 1470,
	326, 1394, 829, 60, 55, 1, 1526, 1334, 1402, 1030,
	1490, 1435, 1160, 899, 80, 702, 702, 702, 702, 702,
	1305, 1163, 981, 1166, 1151, 972, 1106, 1171, 1171, 69,
	702, 975, 81, 522, 1129, 1130, 269, 1132, 702, 269,
	1140, 1128, 68, 1481, 1131, 980, 979, 1443, 591, 595,
	1148, 1152, 1392, 1153, 992, 1177, 1172, 995, 1155, 1312,
	1180, 1181, 80, 80, 1174, 614, 1486, 269, 81, 734,
	732, 733, 269, 731, 269, 736, 735, 730, 282, 1182,
	392, 1184, 1185, 1186, 1168, 1169, 943, 722, 1020, 605,
	72, 1213, 80, 1212, 1026, 826, 573, 574, 284, 1189,
	658, 641, 1067, 1156, 398, 1277, 835, 593, 268, 669,
	1457, 1195, 1407, 1105, 668, 912, 1194, 80, 1085, 1211,
	331, 850, 1086, 344, 341, 342, 841, 1226, 1227, 1119,
	1091, 1092, 1093, 615, 1235, 329, 885, 1099, 1072, 321,
	1102, 1103, 701, 694, 935, 1225, 1109, 1228, 933, 932,
	1111, 387, 1288, 1114, 1115, 1116, 1117, 1118, 1284, 700,
	1232, 1361, 1464, 1271, 80, 80, 1237, 1127, 1266, 1262,
	1236, 845, 26, 59, 316, 1274, 1142, 19, 1243, 1256,
	18, 1255, 17, 20, 16, 1087, 1088, 15, 80, 14,
	1276, 542, 30, 21, 13, 12, 11, 10, 1064, 9,
	8, 7, 1231, 80, 1104, 80, 80, 859, 6, 1171,
	1171, 5, 1304, 1290, 1297, 4, 307, 23, 2, 0,
	975, 1281, 975, 0, 1318, 0, 0, 0, 1296, 0,
	0, 0, 0, 268, 0, 0, 0, 1309, 1310, 0,
	1303, 1308, 0, 0, 0, 0, 0, 1299, 323, 0,
	0, 0, 0, 268, 0, 269, 1316, 1317, 0, 80,
	269, 1335, 80, 80, 80, 268, 269, 0, 0, 0,
	0, 80, 269, 0, 268, 0, 0, 81, 0, 0,
	0, 1327, 81, 0, 81, 0, 0, 0, 1235, 0,
	81, 0, 0, 0, 0, 0, 1328, 0, 1330, 0,
	810, 0, 1340, 1342, 0, 0, 0, 1346, 1347, 0,
	1348, 0, 0, 1350, 0, 1352, 0, 702, 1241, 1242,
	81, 1349, 825, 0, 0, 0, 0, 1326, 1341, 1127,
	0, 0, 0, 0, 0, 1367, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 1376, 1329, 0, 848,
	849, 1163, 80, 1377, 0, 0, 0, 0, 0, 1339,
	0, 975, 0, 1386, 0, 0, 0, 80, 0, 1389,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 1395, 0, 1397, 269, 269, 269, 0, 1410, 0,
	0, 1404, 0, 81, 0, 0, 0, 0, 0, 81,
	0, 0, 658, 0, 0, 902, 903, 0, 1409, 0,
	0, 0, 0, 80, 80, 0, 80, 0, 0, 0,
	1400, 80, 1274, 80, 80, 80, 268, 1416, 0, 80,
	1429, 1421, 1430, 1432, 1433, 0, 0, 0, 1423, 0,
	0, 0, 1428, 0, 1434, 0, 80, 268, 1440, 0,
	0, 1447, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 1343, 0, 0,
	0, 1448, 0, 1449, 1471, 1345, 1274, 0, 1480, 0,
	0, 0, 0, 80, 0, 0, 1354, 1355, 1479, 1478,
	0, 1472, 0, 0, 80, 80, 0, 0, 0, 0,
	0, 0, 1494, 0, 1493, 0, 1369, 1370, 1371, 0,
	1374, 1404, 975, 1502, 80, 1497, 0, 1127, 0, 0,
	0, 0, 0, 0, 269, 268, 0, 1385, 0, 81,
	0, 0, 0, 80, 269, 269, 81, 81, 81, 0,
	1511, 1456, 269, 0, 0, 269, 0, 0, 269, 0,
	0, 0, 269, 0, 81, 0, 80, 1518, 1516, 81,
	81, 81, 269, 81, 81, 1520, 0, 0, 269, 269,
	1531, 81, 81, 0, 1062, 1063, 1542, 595, 0, 0,
	1365, 0, 647, 648, 649, 650, 651, 652, 653, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 81, 0, 1431, 0, 0, 0, 357, 51, 1506,
	622, 621, 631, 632, 624, 625, 626, 627, 628, 629,
	630, 623, 0, 0, 633, 0, 0, 0, 0, 0,
	1090, 0, 1460, 1461, 1462, 1463, 0, 1467, 279, 1468,
	1469, 0, 0, 0, 0, 81, 0, 1108, 0, 0,
	0, 1475, 0, 1476, 1477, 0, 0, 0, 0, 51,
	0, 0, 0, 82, 83, 84, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 81,
	0, 0, 0, 0, 0, 1498, 269, 0, 0, 0,
	0, 0, 0, 1503, 269, 269, 1364, 0, 269, 269,
	0, 0, 269, 269, 269, 81, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 272, 0, 81, 0,
	0, 0, 1359, 275, 0, 0, 0, 355, 0, 0,
	0, 283, 278, 0, 0, 0, 622, 621, 631, 632,
	624, 625, 626, 627, 628, 629, 630, 623, 0, 0,
	633, 0, 0, 0, 0, 0, 1543, 1544, 0, 79,
	0, 0, 0, 0, 281, 1358, 0, 0, 0, 0,
	288, 0, 269, 81, 0, 81, 0, 0, 0, 0,
	0, 269, 269, 269, 269, 269, 0, 269, 269, 0,
	0, 269, 81, 0, 0, 399, 0, 273, 0, 622,
	621, 631, 632, 624, 625, 626, 627, 628, 629, 630,
	623, 0, 269, 633, 269, 269, 0, 0, 0, 269,
	0, 0, 1357, 0, 285, 276, 0, 286, 287, 292,
	0, 0, 0, 277, 280, 0, 274, 291, 290, 0,
	1264, 0, 622, 621, 631, 632, 624, 625, 626, 627,
	628, 629, 630, 623, 860, 0, 633, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 565, 0, 0, 0, 0, 565,
	0, 565, 0, 0, 0, 0, 0, 565, 0, 622,
	621, 631, 632, 624, 625, 626, 627, 628, 629, 630,
	623, 0, 919, 633, 0, 0, 0, 51, 751, 0,
	0, 0, 269, 269, 269, 269, 269, 0, 1238, 0,
	0, 0, 642, 0, 269, 644, 0, 269, 0, 0,
	0, 269, 0, 0, 0, 269, 0, 1356, 622, 621,
	631, 632, 624, 625, 626, 627, 628, 629, 630, 623,
	0, 0, 633, 655, 81, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 0, 670, 673, 673, 673, 679,
	673, 673, 679, 673, 687, 688, 689, 690, 691, 692,
	693, 0, 703, 0, 0, 0, 0, 0, 1363, 739,
	0, 0, 0, 0, 399, 0, 0, 0, 658, 399,
	0, 399, 81, 81, 0, 0, 1378, 399, 0, 1379,
	0, 0, 1381, 0, 622, 621, 631, 632, 624, 625,
	626, 627, 628, 629, 630, 623, 0, 752, 633, 0,
	0, 0, 81, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	765, 768, 769, 770, 771, 772, 773, 81, 774, 775,
	776, 777, 778, 753, 754, 755, 756, 737, 738, 766,
	0, 740, 0, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 757, 758, 759, 760, 761, 762, 763,
	764, 0, 0, 0, 0, 1079, 1080, 1081, 0, 0,
	0, 0, 0, 0, 81, 81, 0, 0, 0, 0,
	399, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 0, 81, 0,
	0, 0, 0, 565, 565, 565, 0, 0, 0, 0,
	0, 767, 0, 81, 0, 81, 81, 0, 0, 0,
	0, 565, 0, 0, 0, 0, 565, 565, 565, 0,
	565, 565, 0, 0, 0, 0, 0, 0, 565, 565,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 1496, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 1084, 0, 0, 0, 81,
	0, 0, 81, 81, 81, 269, 0, 0, 0, 0,
	0, 81, 0, 0, 269, 622, 621, 631, 632, 624,
	625, 626, 627, 628, 629, 630, 623, 0, 0, 633,
	622, 621, 631, 632, 624, 625, 626, 627, 628, 629,
	630, 623, 51, 0, 633, 0, 399, 0, 0, 0,
	0, 0, 0, 399, 399, 399, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 0, 0, 399, 399, 399, 0,
	399, 399, 0, 0, 81, 0, 0, 0, 399, 399,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 703, 0, 81, 0, 703,
	0, 0, 1239, 1240, 81, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 1258, 611, 1259,
	1260, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1267, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 81, 0, 81, 0, 0, 0,
	0, 81, 0, 81, 81, 81, 269, 0, 0, 81,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	565, 0, 565, 0, 0, 0, 81, 269, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	0, 0, 0, 0, 1314, 920, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 81, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 1077, 0, 0, 0,
	24, 25, 52, 27, 28, 269, 0, 1344, 0, 0,
	0, 592, 0, 81, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 29, 48, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	399, 0, 399, 0, 0, 38, 0, 267, 0, 54,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 0, 0, 0, 1123, 1124, 0, 0, 703,
	703, 703, 703, 703, 0, 320, 0, 0, 390, 0,
	0, 0, 0, 267, 946, 267, 1147, 0, 0, 0,
	0, 399, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 32, 34, 33, 36, 0, 50, 0,
	0, 0, 0, 0, 0, 1411, 1412, 1413, 1414, 1415,
	0, 0, 0, 1418, 1419, 0, 0, 0, 0, 0,
	37, 44, 45, 0, 0, 46, 47, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 39, 40, 0, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	0, 51, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 267, 0, 1193,
	399, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 1278, 1280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 267, 267, 0, 1360,
	0, 0, 0, 0, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 0, 399, 1307, 0, 0, 0, 0, 0, 0,
	0, 1382, 1383, 1384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 1336,
	1337, 1338, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 1452,
	916, 0, 0, 0, 0, 267, 267, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 267, 0, 0, 267,
	1275, 399, 51, 805, 0, 0, 0, 0, 0, 1391,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 267,
	267, 0, 0, 0, 399, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	1425, 1426, 0, 1427, 0, 0, 0, 0, 1391, 0,
	1391, 1391, 1391, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 1391, 0, 0, 0, 320, 0, 0,
	0, 0, 320, 320, 0, 0, 320, 320, 320, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 320, 320, 320, 320, 320, 0, 267, 0, 0,
	0, 399, 399, 0, 0, 267, 951, 0, 0, 267,
	267, 0, 0, 267, 959, 805, 0, 0, 916, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 267, 267, 267, 267, 0, 267, 267,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 1057, 1058, 0, 0, 0,
	267, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 320, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 267, 267, 267, 267, 267, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 267, 0,
	0, 0, 951, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 497, 0, 454, 512, 427, 444, 520,
	445, 448, 485, 412, 467, 168, 442, 951, 431, 407,
	438, 408, 429, 456, 114, 460, 426, 499, 470, 511,
	140, 432, 518, 142, 476, 0, 214, 156, 267, 0,
	458, 501, 465, 494, 453, 486, 417, 475, 513, 443,
	483, 514, 0, 0, 0, 82, 83, 84, 0, 976,
	977, 0, 0, 0, 0, 0, 104, 0, 480, 508,
	440, 482, 484, 406, 477, 0, 410, 413, 519, 504,
	435, 436, 1164, 0, 0, 0, 0, 0, 0, 457,
	466, 491, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 917, 474, 0, 0, 0, 414, 411, 0,
	0, 455, 0, 0, 0, 416, 267, 434, 492, 0,
	404, 122, 496, 503, 452, 270, 507, 450, 449, 510,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 500, 430, 439, 108, 437, 196, 175,
	234, 473, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 232, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 98,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 409, 0, 215, 237, 252, 102, 425, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 160, 99, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	421, 424, 419, 420, 468, 469, 515, 516, 517, 493,
	415, 0, 422, 423, 0, 498, 505, 506, 472, 85,
	94, 141, 249, 189, 119, 238, 405, 418, 112, 428,
	0, 0, 441, 446, 447, 459, 461, 462, 463, 464,
	471, 478, 479, 481, 487, 488, 489, 490, 495, 502,
	521, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245, 509, 497, 0,
	454, 512, 427, 444, 520, 445, 448, 485, 412, 467,
	168, 442, 0, 431, 407, 438, 408, 429, 456, 114,
	460, 426, 499, 470, 511, 140, 432, 518, 142, 476,
	0, 214, 156, 0, 0, 458, 501, 465, 494, 453,
	486, 417, 475, 513, 443, 483, 514, 0, 0, 0,
	82, 83, 84, 0, 976, 977, 0, 0, 0, 0,
	0, 104, 0, 480, 508, 440, 482, 484, 406, 477,
	0, 410, 413, 519, 504, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 457, 466, 491, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 474, 0,
	0, 0, 414, 411, 0, 0, 455, 0, 0, 0,
	416, 0, 434, 492, 0, 404, 122, 496, 503, 452,
	270, 507, 450, 449, 510, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 500, 430,
	439, 108, 437, 196, 175, 234, 473, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 409, 0, 215, 237,
	252, 102, 425, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 421, 424, 419, 420, 468,
	469, 515, 516, 517, 493, 415, 0, 422, 423, 0,
	498, 505, 506, 472, 85, 94, 141, 249, 189, 119,
	238, 405, 418, 112, 428, 0, 0, 441, 446, 447,
	459, 461, 462, 463, 464, 471, 478, 479, 481, 487,
	488, 489, 490, 495, 502, 521, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 509, 497, 0, 454, 512, 427, 444, 520,
	445, 448, 485, 412, 467, 168, 442, 0, 431, 407,
	438, 408, 429, 456, 114, 460, 426, 499, 470, 511,
	140, 432, 518, 142, 476, 0, 214, 156, 0, 0,
	458, 501, 465, 494, 453, 486, 417, 475, 513, 443,
	483, 514, 54, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 480, 508,
	440, 482, 484, 406, 477, 0, 410, 413, 519, 504,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 457,
	466, 491, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 474, 0, 0, 0, 414, 411, 0,
	0, 455, 0, 0, 0, 416, 0, 434, 492, 0,
	404, 122, 496, 503, 452, 270, 507, 450, 449, 510,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 500, 430, 439, 108, 437, 196, 175,
	234, 473, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 232, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 98,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 409, 0, 215, 237, 252, 102, 425, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 160, 99, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	421, 424, 419, 420, 468, 469, 515, 516, 517, 493,
	415, 0, 422, 423, 0, 498, 505, 506, 472, 85,
	94, 141, 249, 189, 119, 238, 405, 418, 112, 428,
	0, 0, 441, 446, 447, 459, 461, 462, 463, 464,
	471, 478, 479, 481, 487, 488, 489, 490, 495, 502,
	521, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245, 509, 497, 0,
	454, 512, 427, 444, 520, 445, 448, 485, 412, 467,
	168, 442, 0, 431, 407, 438, 408, 429, 456, 114,
	460, 426, 499, 470, 511, 140, 432, 518, 142, 476,
	0, 214, 156, 0, 0, 458, 501, 465, 494, 453,
	486, 417, 475, 513, 443, 483, 514, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 480, 508, 440, 482, 484, 406, 477,
	0, 410, 413, 519, 504, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 457, 466, 491, 451, 0, 0,
	0, 0, 0, 0, 1234, 0, 433, 0, 474, 0,
	0, 0, 414, 411, 0, 0, 455, 0, 0, 0,
	416, 0, 434, 492, 0, 404, 122, 496, 503, 452,
	270, 507, 450, 449, 510, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 500, 430,
	439, 108, 437, 196, 175, 234, 473, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 409, 0, 215, 237,
	252, 102, 425, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 421, 424, 419, 420, 468,
	469, 515, 516, 517, 493, 415, 0, 422, 423, 0,
	498, 505, 506, 472, 85, 94, 141, 249, 189, 119,
	238, 405, 418, 112, 428, 0, 0, 441, 446, 447,
	459, 461, 462, 463, 464, 471, 478, 479, 481, 487,
	488, 489, 490, 495, 502, 521, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 509, 497, 0, 454, 512, 427, 444, 520,
	445, 448, 485, 412, 467, 168, 442, 0, 431, 407,
	438, 408, 429, 456, 114, 460, 426, 499, 470, 511,
	140, 432, 518, 142, 476, 0, 214, 156, 0, 0,
	458, 501, 465, 494, 453, 486, 417, 475, 513, 443,
	483, 514, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 480, 508,
	440, 482, 484, 406, 477, 0, 410, 413, 519, 504,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 457,
	466, 491, 451, 0, 0, 0, 0, 0, 0, 960,
	0, 433, 0, 474, 0, 0, 0, 414, 411, 0,
	0, 455, 0, 0, 0, 416, 0, 434, 492, 0,
	404, 122, 496, 503, 452, 270, 507, 450, 449, 510,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 500, 430, 439, 108, 437, 196, 175,
	234, 473, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 232, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 98,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 409, 0, 215, 237, 252, 102, 425, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 160, 99, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	421, 424, 419, 420, 468, 469, 515, 516, 517, 493,
	415, 0, 422, 423, 0, 498, 505, 506, 472, 85,
	94, 141, 249, 189, 119, 238, 405, 418, 112, 428,
	0, 0, 441, 446, 447, 459, 461, 462, 463, 464,
	471, 478, 479, 481, 487, 488, 489, 490, 495, 502,
	521, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245, 509, 497, 0,
	454, 512, 427, 444, 520, 445, 448, 485, 412, 467,
	168, 442, 0, 431, 407, 438, 408, 429, 456, 114,
	460, 426, 499, 470, 511, 140, 432, 518, 142, 476,
	0, 214, 156, 0, 0, 458, 501, 465, 494, 453,
	486, 417, 475, 513, 443, 483, 514, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 480, 508, 440, 482, 484, 406, 477,
	0, 410, 413, 519, 504, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 457, 466, 491, 451, 0, 0,
	0, 0, 0, 0, 856, 0, 433, 0, 474, 0,
	0, 0, 414, 411, 0, 0, 455, 0, 0, 0,
	416, 0, 434, 492, 0, 404, 122, 496, 503, 452,
	270, 507, 450, 449, 510, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 500, 430,
	439, 108, 437, 196, 175, 234, 473, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 409, 0, 215, 237,
	252, 102, 425, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 421, 424, 419, 420, 468,
	469, 515, 516, 517, 493, 415, 0, 422, 423, 0,
	498, 505, 506, 472, 85, 94, 141, 249, 189, 119,
	238, 405, 418, 112, 428, 0, 0, 441, 446, 447,
	459, 461, 462, 463, 464, 471, 478, 479, 481, 487,
	488, 489, 490, 495, 502, 521, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 509, 497, 0, 454, 512, 427, 444, 520,
	445, 448, 485, 412, 467, 168, 442, 0, 431, 407,
	438, 408, 429, 456, 114, 460, 426, 499, 470, 511,
	140, 432, 518, 142, 476, 0, 214, 156, 0, 0,
	458, 501, 465, 494, 453, 486, 417, 475, 513, 443,
	483, 514, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 480, 508,
	440, 482, 484, 406, 477, 0, 410, 413, 519, 504,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 457,
	466, 491, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 474, 0, 0, 0, 414, 411, 0,
	0, 455, 0, 0, 0, 416, 0, 434, 492, 0,
	404, 122, 496, 503, 452, 270, 507, 450, 449, 510,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 500, 430, 439, 108, 437, 196, 175,
	234, 473, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 232, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 98,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 409, 0, 215, 237, 252, 102, 425, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 160, 99, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	421, 424, 419, 420, 468, 469, 515, 516, 517, 493,
	415, 0, 422, 423, 0, 498, 505, 506, 472, 85,
	94, 141, 249, 189, 119, 238, 405, 418, 112, 428,
	0, 0, 441, 446, 447, 459, 461, 462, 463, 464,
	471, 478, 479, 481, 487, 488, 489, 490, 495, 502,
	521, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245, 509, 497, 0,
	454, 512, 427, 444, 520, 445, 448, 485, 412, 467,
	168, 442, 0, 431, 407, 438, 408, 429, 456, 114,
	460, 426, 499, 470, 511, 140, 432, 518, 142, 476,
	0, 214, 156, 0, 0, 458, 501, 465, 494, 453,
	486, 417, 475, 513, 443, 483, 514, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 480, 508, 440, 482, 484, 406, 477,
	0, 410, 413, 519, 504, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 457, 466, 491, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 474, 0,
	0, 0, 414, 411, 0, 0, 455, 0, 0, 0,
	416, 0, 434, 492, 0, 404, 122, 496, 503, 452,
	270, 507, 450, 449, 510, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 500, 430,
	439, 108, 437, 196, 175, 234, 473, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 402, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 409, 0, 215, 237,
	252, 102, 425, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 403, 401, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 421, 424, 419, 420, 468,
	469, 515, 516, 517, 493, 415, 0, 422, 423, 0,
	498, 505, 506, 472, 85, 94, 141, 249, 189, 119,
	238, 405, 418, 112, 428, 0, 0, 441, 446, 447,
	459, 461, 462, 463, 464, 471, 478, 479, 481, 487,
	488, 489, 490, 495, 502, 521, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 509, 497, 0, 454, 512, 427, 444, 520,
	445, 448, 485, 412, 467, 168, 442, 0, 431, 407,
	438, 408, 429, 456, 114, 460, 426, 499, 470, 511,
	140, 432, 518, 142, 476, 0, 214, 156, 0, 0,
	458, 501, 465, 494, 453, 486, 417, 475, 513, 443,
	483, 514, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 480, 508,
	440, 482, 484, 406, 477, 0, 410, 413, 519, 504,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 457,
	466, 491, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 474, 0, 0, 0, 414, 411, 0,
	0, 455, 0, 0, 0, 416, 0, 434, 492, 0,
	404, 122, 496, 503, 452, 270, 507, 450, 449, 510,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 500, 430, 439, 108, 437, 196, 175,
	234, 473, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 716, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 402,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 409, 0, 215, 237, 252, 102, 425, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 403, 401, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	421, 424, 419, 420, 468, 469, 515, 516, 517, 493,
	415, 0, 422, 423, 0, 498, 505, 506, 472, 85,
	94, 141, 249, 189, 119, 238, 405, 418, 112, 428,
	0, 0, 441, 446, 447, 459, 461, 462, 463, 464,
	471, 478, 479, 481, 487, 488, 489, 490, 495, 502,
	521, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245, 509, 497, 0,
	454, 512, 427, 444, 520, 445, 448, 485, 412, 467,
	168, 442, 0, 431, 407, 438, 408, 429, 456, 114,
	460, 426, 499, 470, 511, 140, 432, 518, 142, 476,
	0, 214, 156, 0, 0, 458, 501, 465, 494, 453,
	486, 417, 475, 513, 443, 483, 514, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 480, 508, 440, 482, 484, 406, 477,
	0, 410, 413, 519, 504, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 457, 466, 491, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 474, 0,
	0, 0, 414, 411, 0, 0, 455, 0, 0, 0,
	416, 0, 434, 492, 0, 404, 122, 496, 503, 452,
	270, 507, 450, 449, 510, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 500, 430,
	439, 108, 437, 196, 175, 234, 473, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 393, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 402, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 409, 0, 215, 237,
	252, 102, 425, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 403, 401, 396, 395, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 421, 424, 419, 420, 468,
	469, 515, 516, 517, 493, 415, 0, 422, 423, 0,
	498, 505, 506, 472, 85, 94, 141, 249, 189, 119,
	238, 405, 418, 112, 428, 0, 0, 441, 446, 447,
	459, 461, 462, 463, 464, 471, 478, 479, 481, 487,
	488, 489, 490, 495, 502, 521, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 892, 0, 327, 0, 0,
	0, 114, 0, 324, 0, 0, 0, 140, 893, 367,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 346, 345, 348, 349, 350,
	351, 0, 0, 104, 347, 352, 353, 354, 0, 0,
	0, 322, 339, 0, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 337, 318, 0, 0, 0,
	381, 0, 338, 0, 0, 333, 334, 335, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 380,
	0, 0, 270, 0, 0, 378, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 368, 379, 374,
	375, 372, 373, 371, 370, 369, 382, 360, 361, 362,
	363, 365, 0, 376, 377, 364, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 168, 0, 0, 0, 0, 327,
	0, 0, 0, 114, 0, 324, 0, 0, 0, 140,
	0, 367, 142, 0, 0, 214, 156, 0, 0, 0,
	0, 358, 359, 0, 0, 0, 0, 0, 0, 967,
	0, 54, 0, 0, 82, 83, 84, 346, 345, 348,
	349, 350, 351, 0, 0, 104, 347, 352, 353, 354,
	968, 0, 0, 322, 339, 0, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 337, 0, 0,
	0, 0, 381, 0, 338, 0, 0, 333, 334, 335,
	340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 380, 0, 0, 270, 0, 0, 378, 0, 187,
	0, 218, 125, 139, 100, 86, 96, 0, 124, 165,
	194, 198, 0, 0, 0, 108, 0, 196, 175, 234,
	0, 177, 195, 143, 224, 188, 233, 243, 244, 221,
	241, 248, 211, 89, 220, 232, 105, 206, 91, 230,
	217, 154, 134, 135, 90, 0, 192, 113, 120, 110,
	167, 227, 228, 109, 251, 97, 240, 93, 98, 239,
	161, 223, 231, 155, 148, 92, 229, 153, 147, 138,
	117, 127, 185, 145, 186, 128, 158, 157, 159, 0,
	0, 0, 215, 237, 252, 102, 0, 222, 246, 247,
	0, 0, 103, 121, 116, 184, 160, 99, 130, 212,
	137, 144, 191, 250, 174, 197, 106, 236, 213, 368,
	379, 374, 375, 372, 373, 371, 370, 369, 382, 360,
	361, 362, 363, 365, 0, 376, 377, 364, 85, 94,
	141, 249, 189, 119, 238, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 123, 126,
	129, 131, 132, 133, 136, 146, 149, 150, 151, 152,
	162, 163, 164, 166, 169, 170, 171, 172, 173, 176,
	178, 179, 180, 181, 182, 183, 190, 193, 199, 200,
	201, 202, 203, 204, 205, 207, 208, 209, 210, 216,
	219, 225, 226, 235, 242, 245, 168, 0, 0, 0,
	0, 327, 0, 0, 0, 114, 0, 324, 0, 0,
	0, 140, 0, 367, 142, 0, 0, 214, 156, 0,
	0, 0, 0, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 587, 82, 83, 84, 346,
	345, 348, 349, 350, 351, 0, 0, 104, 347, 352,
	353, 354, 0, 0, 0, 322, 339, 0, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 337,
	0, 0, 0, 0, 381, 0, 338, 0, 0, 333,
	334, 335, 340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 380, 0, 0, 270, 0, 0, 378,
	0, 187, 0, 218, 125, 139, 100, 86, 96, 0,
	124, 165, 194, 198, 0, 0, 0, 108, 0, 196,
	175, 234, 0, 177, 195, 143, 224, 188, 233, 243,
	244, 221, 241, 248, 211, 89, 220, 232, 105, 206,
	91, 230, 217, 154, 134, 135, 90, 0, 192, 113,
	120, 110, 167, 227, 228, 109, 251, 97, 240, 93,
	98, 239, 161, 223, 231, 155, 148, 92, 229, 153,
	147, 138, 117, 127, 185, 145, 186, 128, 158, 157,
	159, 0, 0, 0, 215, 237, 252, 102, 0, 222,
	246, 247, 0, 0, 103, 121, 116, 184, 160, 99,
	130, 212, 137, 144, 191, 250, 174, 197, 106, 236,
	213, 368, 379, 374, 375, 372, 373, 371, 370, 369,
	382, 360, 361, 362, 363, 365, 0, 376, 377, 364,
	85, 94, 141, 249, 189, 119, 238, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	123, 126, 129, 131, 132, 133, 136, 146, 149, 150,
	151, 152, 162, 163, 164, 166, 169, 170, 171, 172,
	173, 176, 178, 179, 180, 181, 182, 183, 190, 193,
	199, 200, 201, 202, 203, 204, 205, 207, 208, 209,
	210, 216, 219, 225, 226, 235, 242, 245, 168, 0,
	0, 0, 0, 327, 0, 0, 0, 114, 0, 324,
	0, 0, 0, 140, 0, 367, 142, 0, 0, 214,
	156, 0, 0, 0, 0, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 346, 345, 348, 349, 350, 351, 0, 0, 104,
	347, 352, 353, 354, 0, 0, 0, 322, 339, 0,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 337, 318, 0, 0, 0, 381, 0, 338, 0,
	0, 333, 334, 335, 340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 380, 0, 0, 270, 0,
	0, 378, 0, 187, 0, 218, 125, 139, 100, 86,
	96, 0, 124, 165, 194, 198, 0, 0, 0, 108,
	0, 196, 175, 234, 0, 177, 195, 143, 224, 188,
	233, 243, 244, 221, 241, 248, 211, 89, 220, 232,
	105, 206, 91, 230, 217, 154, 134, 135, 90, 0,
	192, 113, 120, 110, 167, 227, 228, 109, 251, 97,
	240, 93, 98, 239, 161, 223, 231, 155, 148, 92,
	229, 153, 147, 138, 117, 127, 185, 145, 186, 128,
	158, 157, 159, 0, 0, 0, 215, 237, 252, 102,
	0, 222, 246, 247, 0, 0, 103, 121, 116, 184,
	160, 99, 130, 212, 137, 144, 191, 250, 174, 197,
	106, 236, 213, 368, 379, 374, 375, 372, 373, 371,
	370, 369, 382, 360, 361, 362, 363, 365, 0, 376,
	377, 364, 85, 94, 141, 249, 189, 119, 238, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 123, 126, 129, 131, 132, 133, 136, 146,
	149, 150, 151, 152, 162, 163, 164, 166, 169, 170,
	171, 172, 173, 176, 178, 179, 180, 181, 182, 183,
	190, 193, 199, 200, 201, 202, 203, 204, 205, 207,
	208, 209, 210, 216, 219, 225, 226, 235, 242, 245,
	168, 0, 0, 0, 0, 327, 0, 0, 0, 114,
	0, 324, 0, 0, 0, 140, 0, 367, 142, 0,
	0, 214, 156, 0, 0, 0, 0, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	82, 83, 84, 346, 908, 348, 349, 350, 351, 0,
	0, 104, 347, 352, 353, 354, 0, 0, 0, 322,
	339, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 337, 318, 0, 0, 0, 381, 0,
	338, 0, 0, 333, 334, 335, 340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 380, 0, 0,
	270, 0, 0, 378, 0, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 0, 0,
	0, 108, 0, 196, 175, 234, 0, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 0, 0, 215, 237,
	252, 102, 0, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 368, 379, 374, 375, 372,
	373, 371, 370, 369, 382, 360, 361, 362, 363, 365,
	0, 376, 377, 364, 85, 94, 141, 249, 189, 119,
	238, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 0, 0, 327, 0, 0,
	0, 114, 0, 324, 0, 0, 0, 140, 0, 367,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 346, 905, 348, 349, 350,
	351, 0, 0, 104, 347, 352, 353, 354, 0, 0,
	0, 322, 339, 0, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 337, 318, 0, 0, 0,
	381, 0, 338, 0, 0, 333, 334, 335, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 380,
	0, 0, 270, 0, 0, 378, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 368, 379, 374,
	375, 372, 373, 371, 370, 369, 382, 360, 361, 362,
	363, 365, 0, 376, 377, 364, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 327, 0, 0, 0, 114, 0, 324, 0, 0,
	0, 140, 0, 367, 142, 0, 0, 214, 156, 0,
	0, 0, 0, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 346,
	345, 348, 349, 350, 351, 0, 0, 104, 347, 352,
	353, 354, 0, 0, 0, 322, 339, 0, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 337,
	0, 0, 0, 0, 381, 0, 338, 0, 0, 333,
	334, 335, 340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 380, 0, 0, 270, 0, 0, 378,
	0, 187, 0, 218, 125, 139, 100, 86, 96, 0,
	124, 165, 194, 198, 0, 0, 0, 108, 0, 196,
	175, 234, 0, 177, 195, 143, 224, 188, 233, 243,
	244, 221, 241, 248, 211, 89, 220, 232, 105, 206,
	91, 230, 217, 154, 134, 135, 90, 0, 192, 113,
	120, 110, 167, 227, 228, 109, 251, 97, 240, 93,
	98, 239, 161, 223, 231, 155, 148, 92, 229, 153,
	147, 138, 117, 127, 185, 145, 186, 128, 158, 157,
	159, 0, 0, 0, 215, 237, 252, 102, 0, 222,
	246, 247, 0, 0, 103, 121, 116, 184, 160, 99,
	130, 212, 137, 144, 191, 250, 174, 197, 106, 236,
	213, 368, 379, 374, 375, 372, 373, 371, 370, 369,
	382, 360, 361, 362, 363, 365, 0, 376, 377, 364,
	85, 94, 141, 249, 189, 119, 238, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	123, 126, 129, 131, 132, 133, 136, 146, 149, 150,
	151, 152, 162, 163, 164, 166, 169, 170, 171, 172,
	173, 176, 178, 179, 180, 181, 182, 183, 190, 193,
	199, 200, 201, 202, 203, 204, 205, 207, 208, 209,
	210, 216, 219, 225, 226, 235, 242, 245, 168, 0,
	0, 0, 0, 327, 0, 0, 0, 114, 0, 324,
	0, 0, 0, 140, 0, 367, 142, 0, 0, 214,
	156, 0, 0, 0, 0, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 346, 345, 348, 349, 350, 351, 0, 0, 104,
	347, 352, 353, 354, 0, 0, 0, 322, 339, 0,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 381, 0, 338, 0,
	0, 333, 334, 335, 340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 380, 0, 0, 270, 0,
	0, 378, 0, 187, 0, 218, 125, 139, 100, 86,
	96, 0, 124, 165, 194, 198, 0, 0, 0, 108,
	0, 196, 175, 234, 0, 177, 195, 143, 224, 188,
	233, 243, 244, 221, 241, 248, 211, 89, 220, 232,
	105, 206, 91, 230, 217, 154, 134, 135, 90, 0,
	192, 113, 120, 110, 167, 227, 228, 109, 251, 97,
	240, 93, 98, 239, 161, 223, 231, 155, 148, 92,
	229, 153, 147, 138, 117, 127, 185, 145, 186, 128,
	158, 157, 159, 0, 0, 0, 215, 237, 252, 102,
	0, 222, 246, 247, 0, 0, 103, 121, 116, 184,
	160, 99, 130, 212, 137, 144, 191, 250, 174, 197,
	106, 236, 213, 368, 379, 374, 375, 372, 373, 371,
	370, 369, 382, 360, 361, 362, 363, 365, 0, 376,
	377, 364, 85, 94, 141, 249, 189, 119, 238, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 123, 126, 129, 131, 132, 133, 136, 146,
	149, 150, 151, 152, 162, 163, 164, 166, 169, 170,
	171, 172, 173, 176, 178, 179, 180, 181, 182, 183,
	190, 193, 199, 200, 201, 202, 203, 204, 205, 207,
	208, 209, 210, 216, 219, 225, 226, 235, 242, 245,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 140, 0, 367, 142, 0,
	0, 214, 156, 0, 0, 0, 0, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	82, 83, 84, 346, 345, 348, 349, 350, 351, 0,
	0, 104, 347, 352, 353, 354, 0, 0, 0, 0,
	339, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 337, 0, 0, 0, 0, 381, 0,
	338, 0, 0, 333, 334, 335, 340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 380, 0, 0,
	270, 0, 0, 378, 0, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 0, 0,
	0, 108, 0, 196, 175, 234, 1536, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 0, 0, 215, 237,
	252, 102, 0, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 368, 379, 374, 375, 372,
	373, 371, 370, 369, 382, 360, 361, 362, 363, 365,
	0, 376, 377, 364, 85, 94, 141, 249, 189, 119,
	238, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 140, 0, 367,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 587, 82, 83, 84, 346, 345, 348, 349, 350,
	351, 0, 0, 104, 347, 352, 353, 354, 0, 0,
	0, 0, 339, 0, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 337, 0, 0, 0, 0,
	381, 0, 338, 0, 0, 333, 334, 335, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 380,
	0, 0, 270, 0, 0, 378, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 368, 379, 374,
	375, 372, 373, 371, 370, 369, 382, 360, 361, 362,
	363, 365, 0, 376, 377, 364, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 140,
	0, 367, 142, 0, 0, 214, 156, 0, 0, 0,
	0, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 82, 83, 84, 346, 345, 348,
	349, 350, 351, 0, 0, 104, 347, 352, 353, 354,
	0, 0, 0, 0, 339, 0, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 337, 0, 0,
	0, 0, 381, 0, 338, 0, 0, 333, 334, 335,
	340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 380, 0, 0, 270, 0, 0, 378, 0, 187,
	0, 218, 125, 139, 100, 86, 96, 0, 124, 165,
	194, 198, 0, 0, 0, 108, 0, 196, 175, 234,
	0, 177, 195, 143, 224, 188, 233, 243, 244, 221,
	241, 248, 211, 89, 220, 232, 105, 206, 91, 230,
	217, 154, 134, 135, 90, 0, 192, 113, 120, 110,
	167, 227, 228, 109, 251, 97, 240, 93, 98, 239,
	161, 223, 231, 155, 148, 92, 229, 153, 147, 138,
	117, 127, 185, 145, 186, 128, 158, 157, 159, 0,
	0, 0, 215, 237, 252, 102, 0, 222, 246, 247,
	0, 0, 103, 121, 116, 184, 160, 99, 130, 212,
	137, 144, 191, 250, 174, 197, 106, 236, 213, 368,
	379, 374, 375, 372, 373, 371, 370, 369, 382, 360,
	361, 362, 363, 365, 0, 376, 377, 364, 85, 94,
	141, 249, 189, 119, 238, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 123, 126,
	129, 131, 132, 133, 136, 146, 149, 150, 151, 152,
	162, 163, 164, 166, 169, 170, 171, 172, 173, 176,
	178, 179, 180, 181, 182, 183, 190, 193, 199, 200,
	201, 202, 203, 204, 205, 207, 208, 209, 210, 216,
	219, 225, 226, 235, 242, 245, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 140, 0, 0, 142, 0, 0, 214, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 621, 631, 632, 624, 625,
	626, 627, 628, 629, 630, 623, 0, 0, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 270, 0, 0, 0,
	0, 187, 0, 218, 125, 139, 100, 86, 96, 0,
	124, 165, 194, 198, 0, 0, 0, 108, 0, 196,
	175, 234, 0, 177, 195, 143, 224, 188, 233, 243,
	244, 221, 241, 248, 211, 89, 220, 232, 105, 206,
	91, 230, 217, 154, 134, 135, 90, 0, 192, 113,
	120, 110, 167, 227, 228, 109, 251, 97, 240, 93,
	98, 239, 161, 223, 231, 155, 148, 92, 229, 153,
	147, 138, 117, 127, 185, 145, 186, 128, 158, 157,
	159, 0, 0, 0, 215, 237, 252, 102, 0, 222,
	246, 247, 0, 0, 103, 121, 116, 184, 160, 99,
	130, 212, 137, 144, 191, 250, 174, 197, 106, 236,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 141, 249, 189, 119, 238, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	123, 126, 129, 131, 132, 133, 136, 146, 149, 150,
	151, 152, 162, 163, 164, 166, 169, 170, 171, 172,
	173, 176, 178, 179, 180, 181, 182, 183, 190, 193,
	199, 200, 201, 202, 203, 204, 205, 207, 208, 209,
	210, 216, 219, 225, 226, 235, 242, 245, 168, 0,
	0, 0, 610, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 140, 0, 0, 142, 0, 0, 214,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 612, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 607, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 270, 0,
	0, 0, 0, 187, 0, 218, 125, 139, 100, 86,
	96, 0, 124, 165, 194, 198, 0, 0, 0, 108,
	0, 196, 175, 234, 0, 177, 195, 143, 224, 188,
	233, 243, 244, 221, 241, 248, 211, 89, 220, 232,
	105, 206, 91, 230, 217, 154, 134, 135, 90, 0,
	192, 113, 120, 110, 167, 227, 228, 109, 251, 97,
	240, 93, 98, 239, 161, 223, 231, 155, 148, 92,
	229, 153, 147, 138, 117, 127, 185, 145, 186, 128,
	158, 157, 159, 0, 0, 0, 215, 237, 252, 102,
	0, 222, 246, 247, 0, 0, 103, 121, 116, 184,
	160, 99, 130, 212, 137, 144, 191, 250, 174, 197,
	106, 236, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 141, 249, 189, 119, 238, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 123, 126, 129, 131, 132, 133, 136, 146,
	149, 150, 151, 152, 162, 163, 164, 166, 169, 170,
	171, 172, 173, 176, 178, 179, 180, 181, 182, 183,
	190, 193, 199, 200, 201, 202, 203, 204, 205, 207,
	208, 209, 210, 216, 219, 225, 226, 235, 242, 245,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 140, 0, 0, 142, 0,
	0, 214, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 76, 77, 0,
	73, 0, 0, 0, 78, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 0, 0,
	0, 108, 0, 196, 175, 234, 0, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 0, 0, 215, 237,
	252, 102, 0, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 141, 249, 189, 119,
	238, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 0, 950, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 140, 0, 0,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 952, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 270, 0, 0, 0, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 140, 0, 0, 142, 0, 0, 214, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 270, 0, 0, 0,
	0, 187, 0, 218, 125, 139, 100, 86, 96, 0,
	124, 165, 194, 198, 0, 0, 0, 108, 0, 196,
	175, 234, 0, 177, 195, 143, 224, 188, 233, 243,
	244, 221, 241, 248, 211, 89, 220, 232, 105, 206,
	91, 230, 217, 154, 134, 135, 90, 0, 192, 113,
	120, 110, 167, 227, 228, 109, 251, 97, 240, 93,
	98, 239, 161, 223, 231, 155, 148, 92, 229, 153,
	147, 138, 117, 127, 185, 145, 186, 128, 158, 157,
	159, 0, 0, 0, 215, 237, 252, 102, 0, 222,
	246, 247, 0, 0, 103, 121, 116, 184, 160, 99,
	130, 212, 137, 144, 191, 250, 174, 197, 106, 236,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 141, 249, 189, 119, 238, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	123, 126, 129, 131, 132, 133, 136, 146, 149, 150,
	151, 152, 162, 163, 164, 166, 169, 170, 171, 172,
	173, 176, 178, 179, 180, 181, 182, 183, 190, 193,
	199, 200, 201, 202, 203, 204, 205, 207, 208, 209,
	210, 216, 219, 225, 226, 235, 242, 245, 168, 0,
	0, 0, 950, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 140, 0, 0, 142, 0, 0, 214,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 952, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 270, 0,
	0, 0, 0, 187, 0, 218, 125, 139, 100, 86,
	96, 0, 124, 165, 194, 198, 0, 0, 0, 108,
	0, 196, 175, 234, 0, 948, 195, 143, 224, 188,
	233, 243, 244, 221, 241, 248, 211, 89, 220, 232,
	105, 206, 91, 230, 217, 154, 134, 135, 90, 0,
	192, 113, 120, 110, 167, 227, 228, 109, 251, 97,
	240, 93, 98, 239, 161, 223, 231, 155, 148, 92,
	229, 153, 147, 138, 117, 127, 185, 145, 186, 128,
	158, 157, 159, 0, 0, 0, 215, 237, 252, 102,
	0, 222, 246, 247, 0, 0, 103, 121, 116, 184,
	160, 99, 130, 212, 137, 144, 191, 250, 174, 197,
	106, 236, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 141, 249, 189, 119, 238, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 123, 126, 129, 131, 132, 133, 136, 146,
	149, 150, 151, 152, 162, 163, 164, 166, 169, 170,
	171, 172, 173, 176, 178, 179, 180, 181, 182, 183,
	190, 193, 199, 200, 201, 202, 203, 204, 205, 207,
	208, 209, 210, 216, 219, 225, 226, 235, 242, 245,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 140, 0, 0, 142, 0,
	0, 214, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 0, 843, 0, 0, 844, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	270, 0, 0, 0, 0, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 0, 0,
	0, 108, 0, 196, 175, 234, 0, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 0, 0, 215, 237,
	252, 102, 0, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 141, 249, 189, 119,
	238, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 725, 0, 0, 0, 140, 0, 0,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 724, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 270, 0, 0, 0, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 140,
	0, 0, 142, 0, 0, 214, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 270, 0, 0, 0, 0, 187,
	0, 218, 125, 139, 100, 86, 96, 0, 124, 165,
	194, 198, 0, 0, 0, 108, 0, 196, 175, 234,
	0, 177, 195, 143, 224, 188, 233, 243, 244, 221,
	241, 248, 211, 89, 220, 232, 105, 206, 91, 230,
	217, 154, 134, 135, 90, 0, 192, 113, 120, 110,
	167, 227, 228, 109, 251, 97, 240, 93, 98, 239,
	161, 223, 231, 155, 148, 92, 229, 153, 147, 138,
	117, 127, 185, 145, 186, 128, 158, 157, 159, 0,
	0, 0, 215, 237, 252, 102, 0, 222, 246, 247,
	0, 0, 103, 121, 116, 184, 160, 99, 130, 212,
	137, 144, 191, 250, 174, 197, 106, 236, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	141, 249, 189, 119, 238, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 123, 126,
	129, 131, 132, 133, 136, 146, 149, 150, 151, 152,
	162, 163, 164, 166, 169, 170, 171, 172, 173, 176,
	178, 179, 180, 181, 182, 183, 190, 193, 199, 200,
	201, 202, 203, 204, 205, 207, 208, 209, 210, 216,
	219, 225, 226, 235, 242, 245, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 140, 0, 0, 142, 0, 0, 214, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 270, 0, 0, 0,
	0, 187, 0, 218, 125, 139, 100, 86, 96, 0,
	124, 165, 194, 198, 0, 0, 0, 108, 0, 196,
	175, 234, 0, 177, 195, 143, 224, 188, 233, 243,
	244, 221, 241, 248, 211, 89, 220, 232, 105, 206,
	91, 230, 217, 154, 134, 135, 90, 0, 192, 113,
	120, 110, 167, 227, 228, 109, 251, 97, 240, 93,
	98, 239, 161, 223, 231, 155, 148, 92, 229, 153,
	147, 138, 117, 127, 185, 145, 186, 128, 158, 157,
	159, 0, 0, 0, 215, 237, 252, 102, 0, 222,
	246, 247, 0, 0, 103, 121, 116, 184, 160, 99,
	130, 212, 137, 144, 191, 250, 174, 197, 106, 236,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 141, 249, 189, 119, 238, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	123, 126, 129, 131, 132, 133, 136, 146, 149, 150,
	151, 152, 162, 163, 164, 166, 169, 170, 171, 172,
	173, 176, 178, 179, 180, 181, 182, 183, 190, 193,
	199, 200, 201, 202, 203, 204, 205, 207, 208, 209,
	210, 216, 219, 225, 226, 235, 242, 245, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 140, 0, 0, 142, 0, 0, 214,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 952, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 270, 0,
	0, 0, 0, 187, 0, 218, 125, 139, 100, 86,
	96, 0, 124, 165, 194, 198, 0, 0, 0, 108,
	0, 196, 175, 234, 0, 177, 195, 143, 224, 188,
	233, 243, 244, 221, 241, 248, 211, 89, 220, 232,
	105, 206, 91, 230, 217, 154, 134, 135, 90, 0,
	192, 113, 120, 110, 167, 227, 228, 109, 251, 97,
	240, 93, 98, 239, 161, 223, 231, 155, 148, 92,
	229, 153, 147, 138, 117, 127, 185, 145, 186, 128,
	158, 157, 159, 0, 0, 0, 215, 237, 252, 102,
	0, 222, 246, 247, 0, 0, 103, 121, 116, 184,
	160, 99, 130, 212, 137, 144, 191, 250, 174, 197,
	106, 236, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 141, 249, 189, 119, 238, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 123, 126, 129, 131, 132, 133, 136, 146,
	149, 150, 151, 152, 162, 163, 164, 166, 169, 170,
	171, 172, 173, 176, 178, 179, 180, 181, 182, 183,
	190, 193, 199, 200, 201, 202, 203, 204, 205, 207,
	208, 209, 210, 216, 219, 225, 226, 235, 242, 245,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 140, 0, 0, 142, 0,
	0, 214, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 612, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	270, 0, 0, 0, 0, 187, 0, 218, 125, 139,
	100, 86, 96, 0, 124, 165, 194, 198, 0, 0,
	0, 108, 0, 196, 175, 234, 0, 177, 195, 143,
	224, 188, 233, 243, 244, 221, 241, 248, 211, 89,
	220, 232, 105, 206, 91, 230, 217, 154, 134, 135,
	90, 0, 192, 113, 120, 110, 167, 227, 228, 109,
	251, 97, 240, 93, 98, 239, 161, 223, 231, 155,
	148, 92, 229, 153, 147, 138, 117, 127, 185, 145,
	186, 128, 158, 157, 159, 0, 0, 0, 215, 237,
	252, 102, 0, 222, 246, 247, 0, 0, 103, 121,
	116, 184, 160, 99, 130, 212, 137, 144, 191, 250,
	174, 197, 106, 236, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 141, 249, 189, 119,
	238, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 123, 126, 129, 131, 132, 133,
	136, 146, 149, 150, 151, 152, 162, 163, 164, 166,
	169, 170, 171, 172, 173, 176, 178, 179, 180, 181,
	182, 183, 190, 193, 199, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 216, 219, 225, 226, 235,
	242, 245, 168, 0, 0, 0, 0, 0, 0, 0,
	695, 114, 0, 0, 0, 0, 0, 140, 0, 0,
	142, 0, 0, 214, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 270, 0, 0, 0, 0, 187, 0, 218,
	125, 139, 100, 86, 96, 0, 124, 165, 194, 198,
	0, 0, 0, 108, 0, 196, 175, 234, 0, 177,
	195, 143, 224, 188, 233, 243, 244, 221, 241, 248,
	211, 89, 220, 232, 105, 206, 91, 230, 217, 154,
	134, 135, 90, 0, 192, 113, 120, 110, 167, 227,
	228, 109, 251, 97, 240, 93, 98, 239, 161, 223,
	231, 155, 148, 92, 229, 153, 147, 138, 117, 127,
	185, 145, 186, 128, 158, 157, 159, 0, 0, 0,
	215, 237, 252, 102, 0, 222, 246, 247, 0, 0,
	103, 121, 116, 184, 160, 99, 130, 212, 137, 144,
	191, 250, 174, 197, 106, 236, 213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 141, 249,
	189, 119, 238, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 123, 126, 129, 131,
	132, 133, 136, 146, 149, 150, 151, 152, 162, 163,
	164, 166, 169, 170, 171, 172, 173, 176, 178, 179,
	180, 181, 182, 183, 190, 193, 199, 200, 201, 202,
	203, 204, 205, 207, 208, 209, 210, 216, 219, 225,
	226, 235, 242, 245, 385, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 140, 0, 0, 142,
	0, 0, 214, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 270, 0, 0, 0, 0, 187, 0, 218, 125,
	139, 100, 86, 96, 0, 124, 165, 194, 198, 0,
	0, 0, 108, 0, 196, 175, 234, 0, 177, 195,
	143, 224, 188, 233, 243, 244, 221, 241, 248, 211,
	89, 220, 232, 105, 206, 91, 230, 217, 154, 134,
	135, 90, 0, 192, 113, 120, 110, 167, 227, 228,
	109, 251, 97, 240, 93, 98, 239, 161, 223, 231,
	155, 148, 92, 229, 153, 147, 138, 117, 127, 185,
	145, 186, 128, 158, 157, 159, 0, 0, 0, 215,
	237, 252, 102, 0, 222, 246, 247, 0, 0, 103,
	121, 116, 184, 160, 99, 130, 212, 137, 144, 191,
	250, 174, 197, 106, 236, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 94, 141, 249, 189,
	119, 238, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 123, 126, 129, 131, 132,
	133, 136, 146, 149, 150, 151, 152, 162, 163, 164,
	166, 169, 170, 171, 172, 173, 176, 178, 179, 180,
	181, 182, 183, 190, 193, 199, 200, 201, 202, 203,
	204, 205, 207, 208, 209, 210, 216, 219, 225, 226,
	235, 242, 245, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 140, 0,
	0, 142, 0, 0, 214, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 265, 0, 270, 0, 0, 0, 0, 187, 0,
	218, 125, 139, 100, 86, 96, 0, 124, 165, 194,
	198, 0, 0, 0, 108, 0, 196, 175, 234, 0,
	177, 195, 143, 224, 188, 233, 243, 244, 221, 241,
	248, 211, 89, 220, 232, 105, 206, 91, 230, 217,
	154, 134, 135, 90, 0, 192, 113, 120, 110, 167,
	227, 228, 109, 251, 97, 240, 93, 98, 239, 161,
	223, 231, 155, 148, 92, 229, 153, 147, 138, 117,
	127, 185, 145, 186, 128, 158, 157, 159, 0, 0,
	0, 215, 237, 252, 102, 0, 222, 246, 247, 0,
	0, 103, 121, 116, 184, 160, 99, 130, 212, 137,
	144, 191, 250, 174, 197, 106, 236, 213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 94, 141,
	249, 189, 119, 238, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 123, 126, 129,
	131, 132, 133, 136, 146, 149, 150, 151, 152, 162,
	163, 164, 166, 169, 170, 171, 172, 173, 176, 178,
	179, 180, 181, 182, 183, 190, 193, 199, 200, 201,
	202, 203, 204, 205, 207, 208, 209, 210, 216, 219,
	225, 226, 235, 242, 245, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	140, 0, 0, 142, 0, 0, 214, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 270, 0, 0, 0, 0,
	187, 0, 218, 125, 139, 100, 86, 96, 0, 124,
	165, 194, 198, 0, 0, 0, 108, 0, 196, 175,
	234, 0, 177, 195, 143, 224, 188, 233, 243, 244,
	221, 241, 248, 211, 89, 220, 232, 105, 206, 91,
	230, 217, 154, 134, 135, 90, 0, 192, 113, 120,
	110, 167, 227, 228, 109, 251, 97, 240, 93, 98,
	239, 161, 223, 231, 155, 148, 92, 229, 153, 147,
	138, 117, 127, 185, 145, 186, 128, 158, 157, 159,
	0, 0, 0, 215, 237, 252, 102, 0, 222, 246,
	247, 0, 0, 103, 121, 116, 184, 160, 99, 130,
	212, 137, 144, 191, 250, 174, 197, 106, 236, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	94, 141, 249, 189, 119, 238, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 123,
	126, 129, 131, 132, 133, 136, 146, 149, 150, 151,
	152, 162, 163, 164, 166, 169, 170, 171, 172, 173,
	176, 178, 179, 180, 181, 182, 183, 190, 193, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 209, 210,
	216, 219, 225, 226, 235, 242, 245,
}
var yyPact = [...]int{

	2434, -1000, -263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 913, 958, -1000, -1000, -1000, -1000, -1000, -1000,
	264, 11582, 44, 128, 37, 15585, 127, 1575, 15917, -1000,
	20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -65, -87,
	-1000, 697, -1000, -1000, -1000, -1000, -1000, 907, 911, 765,
	901, 808, -1000, 8250, 91, 91, 15253, 6922, -1000, -1000,
	345, 15917, 120, 15917, -132, 89, 89, 89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 125, 15917, 497, 497, 211, -1000, 15917,
	86, 497, 86, 86, 86, 15917, -1000, 171, -1000, -1000,
	-1000, 15917, 497, 844, 303, 77, 4507, -1000, 946, 945,
	-1000, 4507, 38, 4507, -50, 928, 24, -21, -1000, 4507,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 343, 881, 9590, 9590, 913, -1000, 697,
	-1000, -1000, -1000, 859, -1000, -1000, 297, 942, -1000, 11250,
	170, -1000, 9590, 402, 687, -1000, -1000, 687, -1000, -1000,
	158, -1000, -1000, 10586, 10586, 10586, 10586, 10586, 10586, 10586,
	10586, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 687, -1000, 9258, 687, 687,
	687, 687, 687, 687, 687, 687, 9590, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 14914, 13918, 15917, 684, 664, -1000, -1000,
	168, 678, 6577, -77, -1000, -1000, -1000, 254, 13254, -1000,
	-1000, -1000, 843, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 641, 15917, -1000, 1858, -1000, 497, 4507, 106,
	497, 274, 497, 15917, 15917, 4507, 4507, 4507, 36, 78,
	72, 15917, 683, 95, 15917, 892, 773, 15917, 497, 497,
	-1000, 5887, -1000, 4507, 303, -1000, 468, 9590, 4507, 4507,
	4507, 15917, 4507, 4507, -1000, -1000, -1000, 15917, 15917, -1000,
	4507, 4507, -1000, 941, 307, -1000, -1000, -1000, -1000, 9590,
	214, -1000, 770, -1000, -1000, -1000, -1000, -1000, -1000, 953,
	202, 509, 164, 679, -1000, 373, 907, 343, 808, 12922,
	786, -1000, -1000, -1000, 15917, -1000, 9590, 9590, 521, -1000,
	14582, -1000, -1000, 5542, 212, 10586, 377, 288, 10586, 10586,
	10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586,
	10586, 10586, 10586, 481, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 497, -1000, 697, 603, 603, 185, 185, 185,
	185, 185, 185, 185, 10918, 7254, 343, 637, 379, 9258,
	8250, 8250, 9590, 9590, 8914, 8582, 8250, 863, 267, 379,
	15917, -1000, -1000, 10254, -1000, -1000, -1000, -1000, -1000, 343,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15917, 15917, 8250,
	8250, 8250, 8250, 8250, 54, 15917, -1000, 670, 861, -1000,
	-1000, -1000, 898, 12258, 12590, 54, 665, 13918, 15917, -1000,
	-1000, 13918, 15917, 5197, 6232, 678, -77, 651, -1000, -106,
	-99, 7586, 179, -1000, -1000, -1000, -1000, 4162, 310, 501,
	364, -38, -1000, -1000, -1000, 701, -1000, 701, 701, 701,
	701, -7, -7, -7, -7, -1000, -1000, -1000, -1000, -1000,
	734, 731, -1000, 701, 701, 701, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 729, 729, 729, 714, 714, 713,
	-1000, 15917, 4507, 880, 4507, -1000, 73, -1000, -1000, -1000,
	15917, 15917, 15917, 15917, 15917, 138, 15917, 15917, 677, -1000,
	15917, 4507, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	379, -1000, -1000, -1000, -1000, -1000, -1000, 307, 307, -1000,
	-1000, 15917, 303, 15917, 15917, 379, -1000, 449, 15917, -1000,
	800, 9590, 9590, 5887, 9590, -1000, -1000, -1000, 881, -1000,
	863, 919, -1000, 819, 818, 8250, -1000, -1000, 212, 339,
	-1000, -1000, 411, -1000, -1000, -1000, -1000, 163, 687, -1000,
	2114, -1000, -1000, -1000, -1000, 377, 10586, 10586, 10586, 320,
	2114, 2099, 547, 416, 185, 285, 285, 207, 207, 207,
	207, 207, 473, 473, -1000, -1000, -1000, 343, -1000, -1000,
	-1000, 343, 8250, 8250, 675, -1000, -1000, 9590, -1000, 343,
	628, 628, 302, 337, 259, 932, 628, 257, 930, 628,
	628, 8250, 325, -1000, 9590, 343, -1000, 156, -1000, 761,
	671, 669, 628, 343, 343, 628, 628, 681, 687, -1000,
	15917, 13918, 13918, 13918, 13918, 13918, -1000, 792, 791, -1000,
	785, 784, 799, 15917, -1000, 634, 12258, 197, 687, -1000,
	14250, -1000, -1000, 927, 13918, 698, -1000, 698, -1000, 154,
	-1000, -1000, 651, -77, -69, -1000, -1000, -1000, -1000, 379,
	-1000, 537, 650, 3817, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 723, 497, -1000, 866, 203, 252, 497, 855, -1000,
	-1000, -1000, 846, -1000, 281, -58, -1000, -1000, 384, -7,
	-7, -1000, -1000, 179, 842, 179, 179, 179, 448, 448,
	-1000, -1000, -1000, -1000, 383, -1000, -1000, -1000, 376, -1000,
	768, 15917, 4507, -1000, -1000, -1000, -1000, 167, 167, 213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 53, 699, -1000, -1000, -1000, -1000, 19, 30, 93,
	-1000, 4507, -1000, 303, 303, 307, -1000, -1000, -1000, -1000,
	-1000, 806, 379, 379, 148, -1000, -1000, 15917, -1000, -1000,
	-1000, -1000, 559, -1000, -1000, -1000, 4852, 8250, -1000, 320,
	2114, 1822, -1000, 10586, 10586, -1000, -1000, 628, 628, 8250,
	379, -1000, -1000, -1000, 29, 481, 29, 10586, 10586, -1000,
	10586, 10586, -1000, -146, 702, 263, -1000, 9590, 358, -1000,
	5887, -1000, 10586, 10586, -1000, -1000, -1000, -1000, -1000, 766,
	15917, 687, -1000, 12258, 15917, 712, -1000, 248, 861, 720,
	764, 762, -1000, -1000, -1000, -1000, 788, -1000, 771, -1000,
	-1000, -1000, -1000, -1000, 117, 116, 115, 15917, -1000, 913,
	9590, 698, -1000, -1000, 194, -1000, -1000, -115, -113, -1000,
	-1000, -1000, 4162, -1000, 4162, 15917, 69, -1000, 497, 497,
	-1000, -1000, -1000, 717, 760, 10586, -1000, -1000, -1000, 496,
	179, 179, -1000, 233, -1000, -1000, -1000, 626, -1000, 624,
	588, 622, 15917, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15917, -1000, -1000, -1000, -1000, -1000, 15917, -152,
	497, 15917, 15917, 15917, 15917, -1000, -1000, -1000, 303, -1000,
	5887, -1000, 927, 13918, -1000, -1000, 343, -1000, 10586, 2114,
	2114, -1000, -1000, -1000, 343, 701, 701, -1000, 701, 714,
	-1000, 701, 10, 701, 9, 343, 343, 1898, 1773, 1716,
	1673, 687, -139, -1000, 379, 9590, -1000, 1610, 1484, -1000,
	872, 570, 550, -1000, -1000, 7918, 343, 602, 144, 584,
	-1000, 913, 15917, 9590, -1000, -1000, 9590, 711, -1000, 9590,
	-1000, -1000, -1000, 687, 687, 687, 584, 907, 379, -1000,
	-1000, -1000, -1000, 3817, -1000, 581, -1000, 701, -1000, -1000,
	-1000, 15917, -33, 952, 2114, -1000, -1000, -1000, -1000, -1000,
	-7, 424, -7, 338, -1000, 317, 4507, -1000, -1000, -1000,
	-1000, 876, -1000, 5887, -1000, -1000, 694, 703, -1000, -1000,
	-1000, 918, 579, -1000, 2114, -1000, -1000, 124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10586, 10586, 10586, 10586,
	10586, 907, 423, 379, 10586, 10586, 854, -1000, 687, -1000,
	-1000, 695, 15917, 15917, -1000, 15917, 907, -1000, 379, 379,
	15917, 379, 13586, 15917, 15917, 11914, -1000, 161, 15917, -1000,
	576, -1000, 191, -1000, -142, 179, -1000, 179, 494, 475,
	-1000, 687, 565, -1000, 240, 15917, 15917, 915, 909, -1000,
	-1000, 761, 761, 761, 761, 48, 343, -1000, 761, 761,
	950, -1000, 687, -1000, 697, 135, -1000, -1000, -1000, 563,
	553, -1000, 553, 553, 197, 161, -1000, 497, 221, 415,
	-1000, 66, 15917, 292, 850, -1000, 849, -1000, -1000, -1000,
	-1000, -1000, 52, 5887, 4162, 530, -1000, -1000, 9590, 9590,
	-1000, -1000, -1000, -1000, 343, 65, -156, -1000, -1000, -1000,
	15917, 550, 343, 15917, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 309, -1000, -1000, 15917, -1000, -1000, 374, -1000, -1000,
	510, -1000, 15917, -1000, -1000, 699, 379, 525, -1000, 803,
	-150, -169, 417, -1000, -1000, -1000, 691, -1000, -1000, 52,
	817, -152, -1000, 797, -1000, 15917, -1000, 49, -1000, -154,
	490, 41, -166, 751, 687, -170, 747, -1000, 939, 9922,
	-1000, -1000, 949, 210, 210, 761, 343, -1000, -1000, -1000,
	74, 382, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1178, 26, 544, 1177, 1176, 1175, 1171, 1168, 1161,
	1160, 1159, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1149,
	1147, 1144, 1143, 1142, 1140, 1137, 96, 1134, 1133, 1132,
	80, 1131, 77, 1122, 1121, 46, 252, 52, 48, 702,
	1120, 29, 69, 61, 1119, 41, 1118, 1112, 82, 1111,
	1109, 57, 1108, 1104, 94, 1103, 66, 1102, 14, 55,
	1099, 1095, 1093, 1089, 76, 1208, 1086, 1085, 16, 1084,
	1083, 93, 1081, 60, 15, 11, 13, 22, 1080, 43,
	6, 1075, 73, 1074, 1073, 1072, 1070, 24, 1067, 63,
	1066, 25, 62, 1065, 9, 75, 40, 23, 2, 83,
	79, 1064, 30, 65, 54, 1063, 1062, 409, 1061, 1058,
	51, 1057, 1056, 33, 1055, 99, 525, 1054, 1053, 1051,
	1050, 56, 960, 1697, 17, 81, 1049, 1048, 1047, 2451,
	47, 59, 18, 1046, 44, 53, 45, 1040, 1038, 42,
	1037, 1036, 1035, 1033, 1031, 1030, 1029, 21, 1026, 1024,
	1019, 20, 35, 1017, 1015, 64, 31, 1014, 1012, 1007,
	49, 70, 1006, 1005, 58, 28, 1003, 1002, 993, 989,
	985, 37, 7, 982, 19, 980, 12, 971, 34, 970,
	8, 969, 10, 968, 5, 0, 967, 4, 50, 1,
	966, 3, 965, 964, 1577, 190, 84, 950, 86,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 185, 185, 185, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 29, 29,
	8, 9, 9, 9, 9, 196, 196, 48, 48, 49,
	49, 95, 95, 10, 10, 10, 10, 100, 100, 104,
	104, 104, 105, 105, 105, 105, 137, 137, 11, 11,
	11, 11, 11, 11, 11, 187, 187, 186, 184, 184,
	183, 183, 182, 17, 167, 169, 169, 168, 168, 168,
	168, 161, 140, 140, 140, 140, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 142, 142, 142,
	142, 142, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 146, 146, 146, 146, 146, 146, 146, 146,
	160, 160, 147, 147, 155, 155, 156, 156, 156, 153,
	153, 154, 154, 157, 157, 157, 149, 149, 150, 150,
	158, 158, 151, 151, 151, 152, 152, 152, 159, 159,
	159, 159, 159, 148, 148, 162, 162, 177, 177, 176,
	176, 176, 166, 166, 173, 173, 173, 173, 173, 164,
	164, 165, 165, 175, 175, 174, 163, 163, 178, 178,
	178, 178, 190, 191, 189, 189, 189, 189, 189, 170,
	170, 170, 171, 171, 171, 172, 172, 172, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 181,
	179, 179, 180, 180, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 111, 111, 109, 109, 112, 112, 110,
	110, 110, 113, 113, 113, 114, 114, 138, 138, 138,
	21, 21, 23, 23, 24, 25, 22, 22, 22, 22,
	22, 22, 22, 16, 197, 26, 27, 27, 28, 28,
	28, 32, 32, 32, 30, 30, 30, 31, 31, 37,
	37, 36, 36, 38, 38, 38, 38, 126, 126, 126,
	125, 125, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 57, 57, 94, 94, 96, 96, 44, 44,
	44, 44, 45, 45, 46, 46, 47, 47, 133, 133,
	132, 132, 132, 131, 131, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 56,
	58, 58, 58, 58, 58, 59, 59, 39, 39, 39,
	39, 39, 39, 39, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 72, 72,
	72, 72, 72, 72, 62, 62, 62, 62, 62, 62,
	62, 35, 35, 73, 73, 73, 79, 74, 74, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 69, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 198, 198, 71, 70, 70, 70,
	70, 70, 70, 70, 33, 33, 33, 33, 33, 136,
	136, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 83, 83, 34, 34, 81, 81,
	82, 84, 84, 80, 80, 80, 64, 64, 64, 64,
	64, 64, 64, 64, 66, 66, 66, 85, 85, 86,
	86, 87, 87, 88, 88, 89, 90, 90, 90, 91,
	91, 91, 91, 92, 92, 92, 63, 63, 63, 63,
	63, 63, 93, 93, 93, 93, 97, 97, 75, 75,
	77, 77, 76, 78, 98, 98, 102, 99, 99, 103,
	103, 103, 103, 101, 101, 101, 128, 128, 128, 106,
	106, 115, 115, 116, 116, 107, 107, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 118, 118, 118,
	119, 119, 120, 120, 120, 127, 127, 123, 123, 124,
	124, 129, 129, 130, 130, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 194, 195, 134, 135, 135, 135,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 4, 4, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 6, 6, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 118, 119, 121, 120, 153, 122, 146, 51, 167,
	168, 170, 171, 25, 147, 148, 151, 152, 31, 32,
	124, -194, 8, 252, 55, -193, 350, -87, 15, -28,
	5, -26, -197, -26, -26, -26, -26, -26, -167, -169,
	55, 93, -120, 128, 75, 244, 125, 126, 132, -123,
	-185, -122, 58, 59, 60, 262, 139, 294, 295, 167,
	178, 172, 199, 191, 263, 296, 140, 189, 192, 231,
	138, 297, 219, 226, 69, 170, 240, 298, 149, 187,
	183, 299, 271, 181, 27, 300, 228, 204, 301, 267,
	182, 227, 124, 302, 142, 136, 303, 205, 209, 304,
	232, 305, 306, 307, 176, 177, 308, 234, 203, 137,
	33, 264, 36, 157, 235, 207, 309, 202, 198, 310,
	311, 312, 313, 201, 175, 197, 40, 211, 210, 212,
	230, 194, 314, 315, 316, 143, 317, 184, 18, 318,
	319, 320, 321, 322, 238, 152, 323, 155, 324, 325,
	326, 327, 328, 329, 229, 206, 208, 133, 159, 266,
	330, 236, 180, 331, 144, 156, 151, 239, 145, 332,
	333, 334, 335, 336, 337, 338, 171, 339, 340, 341,
	342, 166, 233, 242, 39, 216, 343, 174, 135, 344,
	168, 163, 221, 195, 158, 345, 346, 185, 186, 200,
	173, 196, 169, 160, 153, 347, 241, 217, 268, 193,
	190, 164, 348, 161, 162, 349, 222, 223, 165, 265,
	237, 188, 218, -107, 128, 244, 125, 223, 130, 126,
	126, 127, 128, 244, 125, 126, -54, -129, -185, -122,
	128, 126, 111, 192, 231, 118, 220, 228, 127, 33,
	229, 159, -138, 126, -109, 219, 222, 223, 165, -185,
	233, 232, 224, -129, 169, -134, -134, -134, -134, -134,
	221, 221, -134, -2, -91, 17, 16, -5, -3, -194,
	6, 20, 21, -32, 41, 42, -27, -38, 102, -39,
	-129, -60, 77, -65, 29, -185, -122, 23, -64, -61,
	-80, -78, -79, 111, 112, 113, 100, 101, 108, 78,
	114, -69, -67, -68, -70, 62, 61, 70, 63, 64,
	65, 66, 71, 72, 73, -123, -76, -194, 45, 46,
	253, 254, 255, 256, 261, 257, 80, 35, 243, 251,
	250, 249, 247, 248, 245, 246, 259, 260, 131, 244,
	125, 106, 252, -107, -107, 11, -48, -49, -54, -56,
	-129, -99, -137, 169, -103, 233, 232, -124, -101, -123,
	-121, 231, 192, 230, 123, 269, 76, 22, 24, 214,
	79, 111, 16, 80, 110, 253, 118, 49, 270, 245,
	246, 243, 255, 256, 244, 220, 29, 10, 272, 25,
	147, 21, 34, 104, 120, 83, 84, 150, 23, 148,
	73, 275, 19, 52, 11, 13, 276, 277, 14, 131,
	130, 95, 127, 47, 8, 114, 26, 92, 43, 278,
	28, 279, 280, 281, 282, 45, 93, 17, 247, 248,
	31, 283, 261, 154, 106, 50, 37, 77, 284, 285,
	71, 286, 74, 53, 75, 15, 48, 287, 288, 289,
	290, 94, 121, 252, 46, 291, 125, 6, 258, 30,
	146, 44, 292, 126, 82, 259, 260, 129, 72, 5,
	132, 32, 9, 51, 54, 249, 250, 251, 35, 81,
	12, 293, -168, 93, -161, -185, -54, 127, -54, 252,
	-116, 131, -116, -116, 126, -54, -185, -185, 118, 120,
	123, 53, -18, -54, -115, 131, -185, -115, -115, -115,
	-54, 115, -54, -185, 30, -113, 93, 12, 244, -185,
	159, 126, 160, 128, -135, -194, -124, 11, 11, -135,
	163, 164, -135, -112, -111, 226, 227, 221, 225, 12,
	164, 221, 162, -135, -134, -134, -195, 57, -92, 19,
	31, -39, -129, -88, -89, -39, -87, -2, -26, 37,
	-30, 21, 34, 68, 11, -126, 76, 75, 92, -125,
	22, -123, 62, 115, -39, -62, 95, 77, 93, 94,
	79, 97, 96, 107, 100, 101, 102, 103, 104, 105,
	106, 98, 99, 110, 85, 86, 87, 88, 89, 90,
	91, -108, -194, -79, -194, 116, 117, -65, -65, -65,
	-65, -65, -65, -65, -65, -194, -2, -74, -39, -194,
	-194, -194, -194, -194, -194, -194, -194, -194, -83, -39,
	-194, -198, -71, -194, -198, -71, -198, -71, -198, -194,
	-198, -71, -198, -71, -198, -198, -71, -194, -194, -194,
	-194, -194, -194, -194, -55, 26, -54, -41, -42, -43,
	-44, -57, -79, -194, -54, -54, -48, -196, 56, 11,
	54, -196, 56, 115, 56, -99, 169, -100, -104, 234,
	236, 85, -128, -123, 62, 29, 30, 57, 56, -54,
	-140, -143, -145, -144, -146, -141, -142, 189, 190, 111,
	193, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 30, 149, 185, 186, 187, 188, 205, 206, 207,
	208, 209, 210, 211, 212, 172, 191, 263, 173, 174,
	175, 176, 177, 178, 180, 181, 182, 183, 184, -185,
	-135, 128, -185, 77, -185, -54, -54, -135, -135, -135,
	161, 161, 126, 126, 166, -54, 56, 129, -48, 23,
	53, -54, -185, -185, -130, -129, -121, -135, -113, 62,
	-39, -135, -135, -135, -54, -135, -135, -54, -54, -135,
	-135, 11, -110, 11, 95, -39, -114, 93, 53, 9,
	95, 56, 18, 115, 56, -90, 24, 25, -91, -195,
	-32, -66, -123, 63, 66, -31, 44, -54, -39, -39,
	-72, 71, 77, 72, 73, -125, 102, -130, -124, -121,
	-65, -73, -76, -79, 67, 95, 93, 94, 79, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -136, -185, 62, -185, -64, -64,
	-123, -37, 21, 34, -36, -38, -195, 56, -195, -2,
	-36, -36, -39, -39, -80, 62, -36, -80, 62, -36,
	-36, -30, -81, -82, 81, -80, -123, -129, -195, -65,
	-123, -123, -36, -37, -37, -36, -36, -95, 155, -54,
	30, 56, -50, -52, -51, -53, 43, 47, 49, 44,
	45, 46, 50, -133, 22, -41, -194, -132, 155, -131,
	22, -129, 62, -95, 54, -41, -54, -41, -56, -129,
	102, -103, -100, 56, 235, 237, 238, 53, 74, -39,
	-152, 110, -170, -171, -172, -124, 62, 63, -161, -162,
	-163, -173, 141, -178, 133, 135, 132, -164, 142, 127,
	28, 57, -157, 71, 77, -153, 217, -147, 55, -147,
	-147, -147, -147, -151, 192, -151, -151, -151, 55, 55,
	-147, -147, -147, -155, 55, -155, -155, -156, 55, -156,
	-127, 54, -54, -135, 23, -135, -117, 123, 120, 121,
	-181, 119, 214, 192, 69, 29, 15, 253, 155, 268,
	-185, 156, -54, -54, -54, -54, -54, 123, 120, -54,
	-54, -54, -135, -110, -110, -54, -113, -129, -129, 62,
	-54, 39, -39, -39, -130, -89, -92, -106, 19, 11,
	35, 35, -36, 71, 72, 73, 115, -194, -73, -65,
	-65, -65, -35, 150, 76, -195, -195, -36, -36, 56,
	-39, -195, -195, -195, 56, 54, 22, 11, 11, -195,
	11, 11, -195, -195, -36, -84, -82, 83, -39, -195,
	115, -195, 56, 56, -195, -195, -195, -195, -195, -63,
	30, 35, -2, -194, -194, -98, -102, -80, -42, -43,
	-43, -42, -43, 43, 43, 43, 48, 43, 48, 43,
	-51, -129, -195, -58, 51, 130, 52, -194, -131, -59,
	12, -41, -59, -59, 115, -104, -105, 239, 236, 242,
	-185, 62, 56, -172, 85, 55, -185, 28, -164, -164,
	-165, -185, -165, 28, -149, 29, 71, -154, 218, 63,
	-151, -151, -152, 30, -152, -152, -152, -160, 62, -160,
	63, 63, 53, -123, -135, -134, -188, 138, 134, 141,
	142, 136, 58, 59, 60, 127, 28, 133, 135, 155,
	132, -188, -118, -119, 129, 22, 127, 28, 155, -187,
	54, 161, 214, 161, 129, -135, -113, -113, -110, 40,
	115, -54, -40, 11, 102, -124, -37, -35, 76, -65,
	-65, -195, -195, -38, -139, 111, 189, 149, 187, 183,
	203, 194, 216, 185, 217, -136, -139, -65, -65, -65,
	-65, 262, -87, 84, -39, 82, -124, -65, -65, -97,
	53, -98, -75, -77, -76, -194, -2, -93, -123, -96,
	-123, -59, 56, 85, -46, -45, 53, 54, -47, 53,
	-45, 43, 43, 127, 127, 127, -96, -87, -39, -59,
	236, 240, 241, -171, -172, -175, -174, -123, -178, -165,
	-165, 55, -150, 53, -65, 57, -152, -152, -185, 111,
	57, 56, 57, 56, 57, 56, -54, -134, -134, -54,
	-134, -123, -184, 265, -186, -185, -123, -123, -123, -54,
	-113, -59, -41, -195, -65, -195, -147, -147, -147, -156,
	-147, 177, -147, 177, -195, -195, 19, 19, 19, 19,
	-194, -34, 258, -39, 56, 56, 27, -97, 56, -195,
	-195, -195, 56, 115, -195, 56, -87, -102, -39, -39,
	55, -39, -194, -194, -194, -195, -91, 57, 56, -147,
	-94, -123, -158, 214, 9, -151, 62, -151, 63, 63,
	-135, 26, -183, -182, -124, 55, 54, -85, 13, -151,
	-185, -65, -65, -65, -65, -65, -91, 62, -65, -65,
	28, -77, 35, -2, -194, -123, -123, -123, -91, -94,
	-94, -195, -94, -94, -132, -177, -176, 54, 137, 69,
	-174, 57, 56, -159, 133, 28, 132, -68, -152, -152,
	57, 57, -194, 56, 85, -94, -54, -86, 14, 16,
	-195, -195, -195, -195, -33, 95, 265, -195, -195, -195,
	9, -75, -2, 115, 57, -195, -195, -195, -58, -176,
	-185, -166, 85, 62, 144, -123, -148, 69, 28, 28,
	-179, -180, 155, -182, -172, 57, -39, -74, -195, 263,
	50, 266, -98, -195, -123, 63, -54, 62, -195, 56,
	-123, -187, 40, 264, 267, 55, -180, 35, -184, 40,
	-94, 157, 265, 57, 158, 266, -190, -191, 53, -194,
	267, -191, 53, 10, 9, -65, 154, -189, 145, 140,
	143, 30, -189, -195, -195, 139, 29, 71,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 571, 0, 324, 324, 324, 324, 324, 324,
	0, 642, 625, 0, 0, 0, 0, -2, 311, 312,
	0, 314, 315, 944, 944, 944, 944, 944, 0, 0,
	944, 0, 38, 39, 942, 1, 3, 579, 0, 0,
	328, 331, 326, 0, 625, 625, 0, 0, 68, 69,
	0, 0, 0, 931, 0, 623, 623, 623, 643, 644,
	647, 648, 24, 25, 26, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 0, 0, 0, 0, 0, 626, 0,
	621, 0, 621, 621, 621, 0, 263, 397, 651, 652,
	931, 0, 0, 0, 302, 0, 945, 275, 0, 0,
	278, 945, 0, 945, 0, 285, 0, 0, 291, 945,
	308, 309, 296, 310, 313, 316, 317, 318, 319, 320,
	944, 944, 323, 32, 583, 0, 0, 571, 34, 0,
	324, 329, 330, 334, 332, 333, 325, 0, 343, 347,
	0, 407, 0, 412, 414, -2, -2, 0, 449, 450,
	451, 452, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 477, 478, 479, 480, 556, 557, 558, 559, 560,
	561, 562, 563, 416, 417, 553, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 0, 514, 514,
	514, 514, 514, 514, 514, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 49,
	397, 53, 0, 920, 607, -2, -2, 0, 0, 649,
	650, -2, 786, -2, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 0, 0, 87, 0, 85, 0, 945, 0,
	0, 0, 0, 0, 0, 945, 945, 945, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 264, 945, 302, 267, 0, 0, 945, 945,
	945, 0, 945, 945, 274, 946, 947, 0, 0, 279,
	945, 945, 281, 0, 299, 297, 298, 293, 294, 0,
	305, 288, 289, 292, 321, 322, 33, 943, 27, 0,
	0, 580, 0, 572, 573, 576, 579, 32, 331, 0,
	337, 335, 336, 327, 0, 344, 0, 0, 0, 348,
	0, 350, 351, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 434, 435, 436, 437, 438, 439,
	440, 413, 0, 427, 0, 0, 0, 469, 470, 471,
	472, 473, 474, 475, 0, 339, 32, 0, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 545,
	0, 498, 506, 0, 499, 507, 500, 508, 501, 0,
	502, 509, 503, 510, 504, 505, 511, 0, 0, 0,
	339, 339, 0, 0, 51, 0, 396, 0, 354, 356,
	357, 358, -2, 0, 380, -2, 0, 0, 0, 45,
	46, 0, 0, 0, 0, 54, 920, 56, 57, 0,
	0, 0, 165, 616, 617, 618, 614, 209, 0, 0,
	153, 149, 93, 94, 95, 142, 97, 142, 142, 142,
	142, 162, 162, 162, 162, 125, 126, 127, 128, 129,
	0, 0, 112, 142, 142, 142, 116, 132, 133, 134,
	135, 136, 137, 138, 139, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 144, 144, 144, 146, 146, 645,
	71, 0, 945, 0, 945, 83, 0, 223, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 622,
	0, 945, 260, 261, 398, 653, 654, 265, 266, 303,
	304, 268, 269, 270, 271, 272, 273, 299, 299, 280,
	284, 0, 302, 0, 0, 286, 287, 0, 0, 584,
	0, 0, 0, 0, 0, 575, 577, 578, 583, 35,
	334, 0, 564, 0, 0, 0, 338, 30, 408, 409,
	411, 428, 0, 430, 432, 349, 345, 0, 554, -2,
	418, 419, 443, 444, 445, 0, 0, 0, 0, 441,
	423, 0, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 468, 529, 530, 0, 466, 467,
	476, 0, 0, 0, 340, 341, 446, 0, 602, 32,
	0, 0, 0, 0, 451, 556, 0, 451, 556, 0,
	0, 0, 551, 548, 0, 0, 553, 0, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 0, 385, 0, 0, 388,
	0, 0, 0, 0, 379, 0, 0, 400, 865, 381,
	0, 383, 384, 405, 0, 405, 48, 405, 50, 0,
	399, 608, 55, 0, 0, 60, 61, 609, 610, 611,
	612, 0, 84, 210, 212, 215, 216, 217, 88, 89,
	90, 0, 0, 197, 0, 0, 191, 191, 0, 189,
	190, 86, 156, 154, 0, 151, 150, 96, 0, 162,
	162, 119, 120, 165, 0, 165, 165, 165, 0, 0,
	113, 114, 115, 107, 0, 108, 109, 110, 0, 111,
	0, 0, 945, 73, 624, 74, 944, 0, 0, 637,
	224, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 0, 75, 228, 230, 229, 233, 0, 0, 0,
	255, 945, 259, 302, 302, 299, 283, 300, 301, 306,
	290, 0, 581, 582, 0, 574, 28, 0, 619, 620,
	565, 566, 352, 429, 431, 433, 0, 339, 420, 441,
	424, 0, 421, 0, 0, 415, 481, 0, 0, 0,
	448, -2, 485, 486, 0, 0, 0, 0, 0, 522,
	0, 0, 523, 0, 571, 0, 549, 0, 0, 497,
	0, 516, 0, 0, 517, 518, 519, 520, 521, 596,
	0, 0, -2, 0, 0, 405, 604, 0, 355, 374,
	376, 0, 371, 386, 387, 389, 0, 391, 0, 393,
	394, 359, 361, 362, 0, 0, 0, 0, 382, 571,
	0, 405, 43, 44, 0, 58, 59, 0, 0, 65,
	166, 167, 0, 213, 0, 0, 0, 184, 191, 191,
	187, 192, 188, 0, 158, 0, 155, 92, 152, 0,
	165, 165, 121, 0, 122, 123, 124, 0, 140, 0,
	0, 0, 0, 646, 72, 218, 944, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 944, 0, 944, 638, 639, 640, 641, 0, 78,
	0, 0, 0, 0, 0, 258, 276, 277, 302, 585,
	0, 29, 405, 0, 346, 555, 0, 422, 0, 442,
	425, 482, 483, 342, 0, 142, 142, 534, 142, 146,
	537, 142, 539, 142, 542, 0, 0, 0, 0, 0,
	0, 0, 546, 496, 552, 0, 554, 0, 0, 36,
	0, 596, 586, 598, 600, 0, 32, 0, 592, 0,
	366, 571, 0, 0, 368, 375, 0, 0, 369, 0,
	370, 390, 392, 0, 0, 0, 0, 579, 406, 42,
	62, 63, 64, 211, 214, 0, 193, 142, 196, 185,
	186, 0, 160, 0, 157, 143, 117, 118, 163, 164,
	162, 0, 162, 0, 147, 0, 945, 219, 220, 221,
	222, 0, 227, 0, 76, 77, 0, 0, 232, 256,
	282, 567, 353, 484, 426, 487, 531, 162, 535, 536,
	538, 540, 541, 543, 489, 488, 0, 0, 0, 0,
	0, 579, 0, 550, 0, 0, 0, 37, 0, 601,
	-2, 0, 0, 0, 52, 0, 579, 605, 606, 372,
	0, 377, 0, 0, 0, 380, 41, 176, 0, 195,
	0, 364, 168, 161, 0, 165, 141, 165, 0, 0,
	70, 0, 79, 80, 0, 0, 0, 569, 0, 532,
	533, 0, 0, 0, 0, 524, 0, 547, 0, 0,
	0, 599, 0, -2, 0, 594, 593, 367, 40, 0,
	0, 402, 0, 0, 400, 175, 177, 0, 182, 0,
	194, 0, 0, 173, 0, 170, 172, 159, 130, 131,
	145, 148, 0, 0, 0, 0, 234, 31, 0, 0,
	490, 492, 491, 493, 0, 0, 0, 495, 512, 513,
	0, 589, 32, 0, 373, 401, 403, 404, 363, 178,
	179, 0, 183, 181, 0, 365, 91, 0, 169, 171,
	0, 250, 0, 81, 82, 75, 570, 568, 494, 0,
	0, 0, 597, -2, 595, 180, 0, 174, 249, 0,
	0, 78, 525, 0, 528, 0, 251, 0, 231, 526,
	0, 0, 0, 198, 0, 0, 199, 200, 0, 0,
	527, 201, 0, 0, 0, 0, 0, 202, 204, 205,
	0, 0, 203, 252, 253, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 105, 97, 3,
	55, 57, 102, 100, 56, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 350,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:324
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:329
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:330
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:356
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:362
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:376
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:394
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:417
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:428
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:440
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:494
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:504
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:509
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:513
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:531
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:589
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:600
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:622
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:632
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:637
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:648
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:659
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:665
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:679
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:683
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:708
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:935
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:971
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1042
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1051
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1085
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1099
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1105
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1119
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1212
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1216
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1220
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1254
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1315
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1320
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1427
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1443
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1447
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1463
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1479
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1484
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &OtherRead{}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1565
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1570
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[4].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1591
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1596
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = "full "
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1701
		{
			yyVAL.showFilter = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1705
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1709
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1715
		{
			yyVAL.showFilter = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = SessionStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = GlobalStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.statement = &Begin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &Begin{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &Commit{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Rollback{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherRead{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherRead{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1805
		{
			setAllowComments(yylex, true)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.bytes2 = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = UnionStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = UnionAllStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = UnionDistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = SQLCacheStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = DistinctStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = DistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = StraightJoinHint
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.selectExprs = nil
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1905
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1910
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1918
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1930
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1978
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2011
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2015
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2019
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2023
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2031
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2035
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2041
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2043
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2046
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2051
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = JoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = StraightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = LeftJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = LeftJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = RightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = RightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = NaturalJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2144
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2149
		{
			yyVAL.indexHints = nil
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2153
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2157
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2161
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2165
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = IsNullStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = IsNotNullStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = IsTrueStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = IsNotTrueStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = IsFalseStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = IsNotFalseStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = EqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = LessThanStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = GreaterThanStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = LessEqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = GreaterEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = NotEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2351
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2357
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2459
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = BooleanModeStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2715
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2719
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = QueryExpansionStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2803
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2823
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2842
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2846
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2904
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2908
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2922
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2936
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2960
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2964
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2968
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2972
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2977
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3015
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3019
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3038
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3043
		{
			yyVAL.updateExprs = nil
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3047
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3093
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3099
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3115
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3119
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3123
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3127
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.bytes = []byte("charset")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.expr = &Default{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3158
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3160
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.str = IgnoreStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3208
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3212
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3238
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			decNesting(yylex)
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3576
		{
			skipToEnd(yylex)
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3581
		{
			skipToEnd(yylex)
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			skipToEnd(yylex)
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
