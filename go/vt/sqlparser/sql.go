//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 189,
	103, 319,
	-2, 315,
	-1, 190,
	103, 320,
	-2, 316,
	-1, 315,
	103, 322,
	-2, 318,
}

const yyNprod = 434
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3590

var yyAct = [...]int{

	449, 457, 352, 551, 622, 290, 267, 184, 398, 621,
	500, 227, 589, 515, 531, 560, 291, 445, 269, 335,
	263, 257, 436, 529, 530, 225, 469, 314, 165, 204,
	333, 266, 545, 32, 213, 442, 230, 185, 713, 706,
	264, 397, 3, 712, 180, 699, 188, 186, 711, 180,
	409, 705, 325, 698, 625, 666, 166, 167, 168, 169,
	228, 319, 73, 493, 199, 494, 323, 493, 429, 494,
	180, 493, 180, 494, 431, 170, 180, 688, 366, 365,
	375, 376, 368, 369, 370, 371, 372, 373, 374, 367,
	192, 328, 377, 569, 65, 250, 252, 64, 351, 65,
	203, 67, 68, 69, 195, 179, 350, 356, 355, 233,
	349, 495, 193, 70, 66, 495, 387, 388, 604, 495,
	601, 377, 452, 440, 357, 370, 371, 372, 373, 374,
	367, 422, 496, 377, 396, 221, 496, 217, 367, 476,
	496, 377, 658, 661, 689, 322, 324, 321, 701, 194,
	571, 694, 220, 474, 475, 473, 357, 697, 355, 430,
	570, 428, 628, 251, 356, 355, 502, 356, 355, 516,
	196, 630, 197, 198, 357, 516, 202, 577, 223, 207,
	695, 357, 326, 180, 357, 215, 676, 613, 614, 180,
	553, 554, 555, 327, 356, 355, 228, 180, 463, 465,
	466, 180, 680, 464, 180, 224, 472, 180, 685, 451,
	451, 357, 587, 451, 34, 180, 200, 188, 186, 248,
	215, 434, 232, 255, 219, 188, 186, 255, 353, 356,
	355, 433, 451, 313, 606, 451, 573, 451, 505, 180,
	260, 258, 180, 201, 336, 254, 357, 611, 316, 253,
	587, 188, 186, 345, 256, 505, 451, 259, 315, 450,
	451, 451, 433, 331, 289, 433, 443, 433, 219, 540,
	348, 228, 610, 591, 594, 595, 596, 592, 354, 593,
	597, 219, 358, 210, 385, 45, 344, 245, 671, 218,
	443, 389, 390, 391, 392, 393, 394, 222, 423, 236,
	644, 231, 595, 596, 234, 187, 609, 237, 228, 642,
	674, 640, 399, 239, 643, 247, 641, 673, 639, 407,
	356, 355, 638, 710, 366, 365, 375, 376, 368, 369,
	370, 371, 372, 373, 374, 367, 709, 357, 377, 329,
	174, 175, 330, 180, 704, 707, 341, 340, 702, 425,
	677, 453, 211, 411, 412, 413, 414, 415, 416, 417,
	446, 561, 375, 376, 368, 369, 370, 371, 372, 373,
	374, 367, 63, 533, 377, 460, 461, 470, 15, 471,
	468, 448, 492, 477, 478, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 504, 506,
	467, 336, 255, 343, 602, 332, 336, 336, 503, 539,
	177, 518, 178, 283, 282, 284, 285, 286, 287, 497,
	498, 288, 509, 510, 336, 336, 336, 336, 206, 180,
	520, 317, 180, 315, 523, 513, 235, 691, 599, 336,
	180, 205, 206, 441, 171, 172, 255, 458, 541, 692,
	339, 633, 503, 534, 527, 544, 526, 459, 338, 229,
	536, 229, 353, 292, 528, 632, 586, 399, 538, 258,
	241, 183, 700, 649, 15, 34, 187, 315, 549, 552,
	36, 31, 1, 71, 187, 598, 229, 229, 547, 548,
	470, 212, 471, 435, 318, 557, 558, 559, 42, 427,
	556, 563, 229, 426, 320, 191, 337, 336, 567, 568,
	187, 347, 572, 244, 346, 511, 690, 612, 579, 336,
	580, 581, 582, 583, 550, 566, 631, 585, 576, 524,
	575, 406, 525, 514, 268, 444, 578, 462, 279, 276,
	278, 180, 277, 35, 240, 342, 605, 359, 607, 608,
	584, 261, 249, 208, 534, 590, 588, 446, 603, 600,
	37, 38, 39, 40, 532, 619, 432, 507, 508, 665,
	687, 336, 173, 615, 238, 33, 620, 627, 176, 14,
	623, 624, 617, 618, 424, 519, 13, 521, 522, 12,
	11, 10, 9, 180, 180, 180, 180, 629, 8, 7,
	438, 647, 6, 635, 646, 637, 534, 534, 534, 534,
	645, 5, 634, 523, 636, 654, 4, 2, 0, 0,
	0, 656, 657, 0, 662, 663, 0, 660, 0, 652,
	653, 552, 0, 0, 668, 0, 0, 655, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 669, 399, 0, 188, 186, 675, 226, 499,
	226, 229, 0, 0, 0, 0, 679, 0, 564, 512,
	681, 0, 246, 517, 0, 0, 0, 684, 0, 0,
	574, 0, 686, 0, 0, 678, 226, 229, 696, 693,
	0, 682, 683, 0, 0, 0, 703, 0, 0, 0,
	0, 226, 438, 0, 0, 229, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 542, 616, 543, 0, 546,
	546, 546, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 15, 16, 17, 18, 0, 366, 365, 375, 376,
	368, 369, 370, 371, 372, 373, 374, 367, 0, 0,
	377, 0, 0, 395, 19, 0, 190, 400, 401, 402,
	403, 404, 405, 0, 408, 410, 410, 410, 410, 410,
	410, 410, 410, 418, 419, 420, 421, 47, 0, 0,
	0, 0, 74, 0, 55, 0, 0, 0, 0, 229,
	0, 0, 0, 50, 0, 182, 0, 0, 0, 0,
	182, 0, 59, 54, 0, 0, 0, 447, 0, 0,
	0, 0, 0, 454, 455, 456, 0, 0, 0, 0,
	46, 182, 0, 182, 0, 0, 0, 182, 0, 0,
	0, 20, 21, 23, 22, 24, 0, 0, 626, 0,
	0, 0, 0, 0, 25, 26, 27, 0, 0, 28,
	29, 30, 0, 366, 365, 375, 376, 368, 369, 370,
	371, 372, 373, 374, 367, 0, 229, 377, 0, 650,
	0, 651, 591, 594, 595, 596, 592, 55, 593, 597,
	164, 437, 672, 0, 0, 0, 50, 0, 0, 49,
	0, 58, 56, 60, 0, 59, 54, 0, 535, 52,
	368, 369, 370, 371, 372, 373, 374, 367, 0, 0,
	377, 0, 0, 46, 187, 439, 48, 15, 53, 62,
	57, 51, 61, 0, 0, 356, 355, 0, 55, 0,
	0, 0, 0, 0, 182, 0, 182, 50, 0, 0,
	182, 0, 357, 0, 0, 0, 59, 54, 182, 0,
	0, 47, 182, 47, 0, 182, 0, 0, 182, 0,
	0, 228, 47, 0, 181, 0, 182, 565, 0, 0,
	0, 182, 0, 164, 182, 0, 0, 0, 0, 47,
	0, 0, 49, 0, 58, 56, 60, 0, 226, 0,
	182, 0, 52, 182, 47, 0, 0, 0, 0, 535,
	0, 0, 0, 47, 447, 0, 0, 0, 55, 48,
	0, 53, 62, 57, 51, 61, 0, 50, 0, 0,
	0, 0, 55, 0, 164, 0, 59, 54, 0, 0,
	0, 50, 0, 49, 0, 58, 56, 60, 0, 0,
	59, 54, 0, 52, 46, 0, 0, 242, 0, 0,
	243, 535, 535, 535, 535, 228, 0, 0, 181, 0,
	48, 0, 53, 62, 57, 51, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 659, 0, 0, 664,
	0, 0, 47, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 58, 56, 60, 164, 0,
	0, 0, 0, 52, 0, 0, 0, 49, 0, 58,
	56, 60, 0, 0, 0, 0, 0, 52, 0, 0,
	48, 0, 53, 62, 57, 51, 61, 0, 0, 0,
	0, 47, 0, 0, 48, 0, 53, 62, 57, 51,
	61, 47, 0, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	182, 55, 0, 182, 501, 0, 265, 0, 0, 0,
	50, 182, 0, 0, 47, 300, 0, 0, 0, 59,
	54, 0, 0, 0, 0, 293, 294, 47, 0, 47,
	0, 47, 47, 47, 228, 562, 0, 189, 283, 282,
	284, 285, 286, 287, 0, 0, 288, 280, 281, 0,
	0, 262, 274, 0, 299, 366, 365, 375, 376, 368,
	369, 370, 371, 372, 373, 374, 367, 0, 0, 377,
	0, 0, 0, 0, 271, 272, 334, 0, 0, 0,
	311, 0, 273, 0, 0, 270, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	309, 47, 0, 0, 0, 0, 49, 0, 58, 56,
	60, 0, 182, 0, 0, 0, 52, 0, 301, 310,
	307, 308, 305, 306, 304, 303, 302, 312, 295, 296,
	298, 0, 297, 48, 0, 53, 62, 57, 51, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 182, 182, 182, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 47, 0,
	0, 47, 0, 47, 153, 140, 114, 155, 92, 106,
	163, 107, 108, 134, 80, 122, 55, 104, 0, 95,
	76, 101, 77, 93, 116, 50, 119, 91, 142, 125,
	161, 0, 129, 0, 59, 54, 0, 0, 118, 147,
	120, 139, 113, 135, 85, 128, 156, 105, 132, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 152, 103, 133, 75, 130, 0, 78, 81,
	162, 150, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 117, 121, 136, 111, 0, 0, 0, 0, 0,
	0, 648, 0, 96, 0, 127, 0, 0, 0, 82,
	79, 115, 0, 0, 0, 84, 0, 97, 137, 0,
	148, 112, 164, 151, 110, 109, 154, 157, 146, 94,
	102, 49, 100, 58, 56, 60, 90, 149, 143, 144,
	145, 52, 0, 88, 89, 86, 87, 123, 124, 158,
	159, 160, 138, 83, 0, 0, 141, 126, 48, 0,
	53, 62, 57, 51, 61, 153, 140, 114, 155, 92,
	106, 163, 107, 108, 134, 80, 122, 55, 104, 0,
	95, 76, 101, 77, 93, 116, 50, 119, 91, 142,
	125, 161, 0, 129, 0, 59, 54, 0, 0, 118,
	147, 120, 139, 113, 135, 85, 128, 156, 105, 132,
	228, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 152, 103, 133, 75, 130, 0, 78,
	81, 162, 150, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 117, 121, 136, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 127, 0, 0, 0,
	82, 79, 115, 0, 0, 0, 84, 0, 97, 137,
	0, 148, 112, 164, 151, 110, 109, 154, 157, 146,
	94, 102, 49, 100, 58, 56, 60, 90, 149, 143,
	144, 145, 52, 0, 88, 89, 86, 87, 123, 124,
	158, 159, 160, 138, 83, 0, 0, 141, 126, 48,
	0, 53, 62, 57, 51, 61, 153, 140, 114, 155,
	92, 106, 163, 107, 108, 134, 80, 122, 55, 104,
	0, 95, 76, 101, 77, 93, 116, 50, 119, 91,
	142, 125, 161, 0, 129, 0, 59, 54, 0, 0,
	118, 147, 120, 139, 113, 135, 85, 128, 156, 105,
	132, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 152, 103, 133, 75, 130, 0,
	78, 81, 162, 150, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 117, 121, 136, 111, 0, 0, 0,
	0, 0, 0, 537, 0, 96, 0, 127, 0, 0,
	0, 82, 79, 115, 0, 0, 0, 84, 0, 97,
	137, 0, 148, 112, 164, 151, 110, 109, 154, 157,
	146, 94, 102, 49, 100, 58, 56, 60, 90, 149,
	143, 144, 145, 52, 0, 88, 89, 86, 87, 123,
	124, 158, 159, 160, 138, 83, 0, 0, 141, 126,
	48, 0, 53, 62, 57, 51, 61, 153, 140, 114,
	155, 92, 106, 163, 107, 108, 134, 80, 122, 55,
	104, 0, 95, 76, 101, 77, 93, 116, 50, 119,
	91, 142, 125, 161, 0, 129, 0, 59, 54, 0,
	0, 118, 147, 120, 139, 113, 135, 85, 128, 156,
	105, 132, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 152, 103, 133, 75, 130,
	0, 78, 81, 162, 150, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 117, 121, 136, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 127, 0,
	0, 0, 82, 79, 115, 0, 0, 0, 84, 0,
	97, 137, 0, 148, 112, 164, 151, 110, 109, 154,
	157, 146, 94, 102, 49, 100, 58, 56, 60, 90,
	149, 143, 144, 145, 52, 0, 88, 89, 86, 87,
	123, 124, 158, 159, 160, 138, 83, 0, 0, 141,
	126, 48, 0, 53, 62, 57, 51, 61, 153, 140,
	114, 155, 92, 106, 163, 107, 108, 134, 80, 122,
	55, 104, 0, 95, 76, 101, 77, 93, 116, 50,
	119, 91, 142, 125, 161, 0, 129, 0, 59, 54,
	0, 0, 118, 147, 120, 139, 113, 135, 85, 128,
	156, 105, 132, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 152, 103, 133, 75,
	130, 0, 78, 81, 162, 150, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 117, 121, 136, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 127,
	0, 0, 0, 82, 79, 115, 0, 0, 0, 84,
	0, 97, 137, 0, 148, 112, 164, 151, 110, 109,
	154, 157, 146, 94, 102, 49, 100, 58, 56, 60,
	90, 149, 143, 144, 145, 52, 0, 88, 89, 86,
	87, 123, 124, 158, 159, 160, 138, 83, 0, 0,
	141, 126, 48, 0, 53, 62, 57, 51, 61, 153,
	140, 114, 155, 92, 106, 163, 107, 108, 134, 80,
	122, 55, 104, 0, 95, 76, 101, 77, 93, 116,
	50, 119, 91, 142, 125, 161, 0, 129, 0, 59,
	54, 0, 0, 118, 147, 120, 139, 113, 135, 85,
	128, 156, 105, 132, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 152, 103, 133,
	75, 130, 0, 78, 81, 162, 150, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 117, 121, 136, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	127, 0, 0, 0, 82, 79, 115, 0, 0, 0,
	84, 0, 97, 137, 0, 148, 112, 164, 151, 110,
	109, 154, 157, 146, 94, 102, 49, 100, 58, 56,
	60, 90, 149, 143, 144, 145, 52, 0, 88, 89,
	86, 87, 123, 124, 158, 159, 160, 138, 83, 0,
	0, 141, 126, 48, 0, 53, 62, 57, 51, 61,
	153, 140, 114, 155, 92, 106, 163, 107, 108, 134,
	80, 122, 55, 104, 0, 95, 76, 101, 77, 93,
	116, 50, 119, 91, 142, 125, 161, 0, 129, 0,
	59, 54, 0, 0, 118, 147, 120, 139, 113, 135,
	85, 128, 156, 105, 132, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 152, 103,
	133, 75, 130, 0, 78, 81, 162, 150, 98, 99,
	0, 0, 0, 0, 0, 0, 0, 117, 121, 136,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 127, 0, 0, 0, 82, 79, 115, 0, 0,
	0, 84, 0, 97, 137, 0, 148, 112, 164, 151,
	110, 109, 154, 157, 146, 94, 102, 49, 100, 58,
	56, 60, 90, 149, 143, 144, 145, 52, 0, 88,
	89, 86, 87, 123, 124, 158, 159, 160, 138, 83,
	0, 0, 141, 126, 48, 0, 53, 62, 57, 51,
	61, 55, 0, 0, 0, 0, 265, 0, 0, 0,
	50, 0, 0, 0, 0, 300, 0, 0, 0, 59,
	54, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 189, 283, 282,
	284, 285, 286, 287, 0, 0, 288, 280, 281, 0,
	0, 262, 274, 0, 299, 366, 365, 375, 376, 368,
	369, 370, 371, 372, 373, 374, 367, 0, 0, 377,
	0, 0, 0, 0, 271, 272, 334, 0, 0, 0,
	311, 0, 273, 0, 0, 270, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	309, 0, 0, 0, 0, 0, 49, 0, 58, 56,
	60, 0, 0, 0, 0, 0, 52, 0, 301, 310,
	307, 308, 305, 306, 304, 303, 302, 312, 295, 296,
	298, 0, 297, 48, 0, 53, 62, 57, 51, 61,
	55, 0, 0, 0, 0, 265, 0, 0, 0, 50,
	0, 0, 0, 0, 300, 0, 0, 0, 59, 54,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 451, 189, 283, 282, 284,
	285, 286, 287, 0, 0, 288, 280, 281, 0, 0,
	262, 274, 0, 299, 365, 375, 376, 368, 369, 370,
	371, 372, 373, 374, 367, 0, 0, 377, 0, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 311,
	0, 273, 0, 0, 270, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 309,
	0, 0, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 0, 0, 0, 0, 52, 0, 301, 310, 307,
	308, 305, 306, 304, 303, 302, 312, 295, 296, 298,
	15, 297, 48, 0, 53, 62, 57, 51, 61, 0,
	0, 55, 0, 0, 0, 0, 265, 0, 0, 0,
	50, 0, 0, 0, 0, 300, 0, 0, 0, 59,
	54, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 189, 283, 282,
	284, 285, 286, 287, 0, 0, 288, 280, 281, 0,
	0, 262, 274, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 0, 0, 0, 0,
	311, 0, 273, 0, 0, 270, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	309, 0, 0, 0, 0, 0, 49, 0, 58, 56,
	60, 0, 0, 0, 0, 0, 52, 0, 301, 310,
	307, 308, 305, 306, 304, 303, 302, 312, 295, 296,
	298, 0, 297, 48, 0, 53, 62, 57, 51, 61,
	55, 0, 0, 0, 0, 265, 0, 0, 0, 50,
	0, 0, 0, 0, 300, 0, 0, 0, 59, 54,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 189, 283, 282, 284,
	285, 286, 287, 0, 0, 288, 280, 281, 0, 0,
	262, 274, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 311,
	0, 273, 0, 0, 270, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 309,
	0, 0, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 0, 0, 0, 0, 52, 0, 301, 310, 307,
	308, 305, 306, 304, 303, 302, 312, 295, 296, 298,
	55, 297, 48, 0, 53, 62, 57, 51, 61, 50,
	0, 0, 0, 0, 300, 0, 0, 0, 59, 54,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 189, 283, 282, 284,
	285, 286, 287, 0, 0, 288, 280, 281, 0, 0,
	0, 274, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 311,
	0, 273, 0, 0, 270, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 309,
	0, 0, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 0, 0, 0, 0, 52, 0, 301, 310, 307,
	308, 305, 306, 304, 303, 302, 312, 295, 296, 298,
	55, 297, 48, 0, 53, 62, 57, 51, 61, 50,
	0, 0, 0, 0, 300, 0, 0, 0, 59, 54,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 189, 283, 282, 284,
	285, 286, 287, 0, 0, 288, 0, 0, 0, 0,
	55, 274, 0, 299, 214, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 54,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 311,
	0, 273, 0, 0, 270, 275, 181, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 309,
	0, 0, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 0, 0, 0, 0, 52, 0, 301, 310, 307,
	308, 305, 306, 304, 303, 302, 312, 295, 296, 298,
	55, 297, 48, 0, 53, 62, 57, 51, 61, 50,
	0, 0, 0, 0, 0, 55, 164, 0, 59, 54,
	0, 0, 0, 0, 50, 49, 0, 58, 56, 60,
	0, 0, 0, 59, 54, 52, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 46, 48, 439, 53, 62, 57, 51, 61, 50,
	0, 0, 0, 0, 0, 55, 0, 0, 59, 54,
	0, 0, 0, 209, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 54, 0, 181, 0, 216, 0,
	0, 0, 0, 0, 41, 0, 43, 0, 0, 0,
	44, 181, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 164, 0, 0, 0, 52, 0, 0, 0, 0,
	49, 0, 58, 56, 60, 0, 0, 0, 0, 0,
	52, 0, 48, 0, 53, 62, 57, 51, 61, 0,
	0, 0, 0, 0, 0, 55, 164, 48, 0, 53,
	62, 57, 51, 61, 50, 49, 0, 58, 56, 60,
	55, 164, 0, 59, 54, 52, 0, 0, 0, 50,
	49, 0, 58, 56, 60, 0, 0, 0, 59, 54,
	52, 189, 48, 0, 53, 62, 57, 51, 61, 0,
	0, 0, 0, 0, 0, 55, 46, 48, 0, 53,
	62, 57, 51, 61, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 54, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 58, 56, 60, 0, 164, 0, 0, 0,
	52, 0, 0, 0, 0, 49, 0, 58, 56, 60,
	0, 0, 0, 0, 0, 52, 0, 48, 0, 53,
	62, 57, 51, 61, 0, 0, 0, 0, 0, 0,
	0, 164, 48, 0, 53, 62, 57, 51, 61, 0,
	49, 0, 58, 56, 60, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 48, 364, 53,
	62, 57, 51, 61, 378, 379, 380, 381, 382, 383,
	384, 0, 362, 363, 360, 366, 365, 375, 376, 368,
	369, 370, 371, 372, 373, 374, 367, 0, 0, 377,
}
var yyPact = [...]int{

	725, -1000, -123, 470, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3213, -16, 3, -10, 2, 2265, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 468, 425, 303, -1000, -21, 3408, 461,
	3358, -26, 0, 3408, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -7, 3408, -1000, 3408, -52, 163, -52,
	3408, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 408, -1000, -1000, 118, 3278, 323, 3133,
	34, -1000, -1000, 3408, 173, -1000, 77, -1000, 32, -1000,
	-1000, 3408, 111, 152, 1510, 3408, 1510, -5, 3408, 414,
	250, 3408, -1000, -1000, 273, 991, -1000, -1000, 258, 3408,
	-1000, 3358, 48, -1000, 3263, -1000, -1000, 2114, 458, 3358,
	2823, 1963, 1510, 409, -57, -1000, -1000, -1000, -1000, -1000,
	-1000, 38, -1000, 3408, -1000, -1000, 3408, 1510, 2404, -1000,
	440, -1000, 316, 315, 372, 3358, 3373, -1000, 230, -1000,
	-2, -6, -14, -1000, -1000, -1000, -1000, 448, 2823, -1000,
	102, -1000, 2823, 3489, -1000, 221, -1000, 12, -1000, -1000,
	3083, 3083, 3083, 3083, 3083, 3083, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 221,
	31, -1000, 2684, 221, 221, 221, 221, 221, 221, 2823,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, -1000, 28, -1000, -1000, -1000, 249, 3373,
	-1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 211, -1000, -1000, 860, 20, 3408, -1000, -1000,
	-1000, -1000, 241, 221, 470, 217, 208, 19, 448, 221,
	221, 221, 431, 442, 102, 2823, 2823, 136, 74, 2953,
	146, 70, 3083, 3083, 3083, 3083, 3083, 3083, 3083, 3083,
	3083, 3083, 3083, 3083, 3083, 3083, 3083, 14, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 468, 359, 359, 21,
	21, 21, 21, 21, 767, 1164, 1963, 209, 204, 102,
	2404, 2404, 2823, 2823, 3373, 422, 98, 102, 3373, -1000,
	158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2404, 2404,
	2404, 2404, 1812, 3408, -1000, -1000, 3408, -1000, -1000, -1000,
	-1000, -1000, 458, 2404, 1005, -1000, -1000, 3228, -1000, -1000,
	1661, -1000, -1000, 383, 218, -1000, -1000, 2543, -1000, -1000,
	3373, -1000, 3373, 431, 3373, 3373, 3373, -1000, 2823, 2823,
	74, 92, -1000, -1000, 128, -1000, -1000, -1000, 2389, -1000,
	-1000, -1000, -1000, 146, 3083, 3083, 3083, 238, 2389, 1149,
	274, 2527, 21, 33, 33, 41, 41, 41, 41, 41,
	810, 810, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	158, 2404, 216, 221, -1000, 2823, -1000, 180, 180, 42,
	129, 185, -1000, 2404, 104, -1000, 2823, 158, -1000, 180,
	158, 180, 180, -1000, 1510, -1000, -1000, 454, -1000, 199,
	234, -1000, -1000, -1000, 417, 911, -1000, -1000, 17, 377,
	221, -1000, 15, -1000, -1000, 183, -1000, 183, 183, 255,
	196, -1000, 164, -1000, -1000, -1000, -1000, 238, 2389, 650,
	-1000, 3083, 3083, -1000, 180, 2404, 102, -1000, -1000, 14,
	14, 14, -95, 3373, 214, 88, -1000, 2823, 99, -1000,
	-1000, -1000, -1000, -1000, -1000, 452, 436, 1005, 1005, 1005,
	1005, -1000, 283, 279, -1000, 272, 270, 261, 3408, -1000,
	161, 1359, 465, -1000, 3373, -1000, 3373, -1000, -1000, 2823,
	2823, 2823, -1000, -1000, -1000, -1000, 3083, 2389, 2389, -1000,
	158, 158, 10, 158, 158, 221, -1000, -92, -1000, 102,
	2823, 448, 2823, 2823, 234, 239, 833, -1000, -1000, -1000,
	-1000, 278, -1000, 271, -1000, -1000, -1000, -1000, -1000, 3358,
	-1000, -1000, 102, 102, -1000, 2389, -1000, -1000, -1000, 130,
	-1000, 321, -1000, -1000, 3083, 158, 147, 102, 431, 102,
	187, 2823, 2823, -1000, -1000, 173, 157, 14, -8, -1000,
	-1000, 419, 102, 102, 18, 124, -1000, 158, 7, -108,
	-1000, 464, 63, -1000, 319, 158, -1000, 308, -100, -115,
	-1000, 310, 14, -1000, -1000, 300, -1000, 287, -1000, -104,
	-1000, -110, -116, -1000,
}
var yyPgo = [...]int{

	0, 617, 41, 616, 611, 602, 599, 598, 592, 591,
	590, 589, 586, 579, 543, 578, 575, 29, 574, 572,
	570, 569, 15, 166, 10, 30, 19, 566, 23, 24,
	14, 564, 556, 12, 555, 105, 553, 373, 552, 32,
	21, 551, 40, 547, 545, 31, 20, 544, 542, 540,
	539, 538, 537, 26, 8, 535, 16, 17, 534, 18,
	6, 533, 13, 531, 530, 527, 526, 2, 524, 3,
	517, 1, 516, 515, 514, 513, 35, 7, 37, 506,
	372, 173, 505, 504, 503, 499, 498, 494, 36, 756,
	264, 11, 22, 493, 5, 27, 34, 491, 485, 28,
	25, 4, 9, 483, 482, 481, 480, 463, 0, 50,
}
var yyR1 = [...]int{

	0, 104, 105, 105, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 5, 6, 7, 7, 7, 8, 8, 8,
	8, 9, 10, 10, 10, 11, 103, 103, 103, 12,
	13, 13, 13, 13, 13, 106, 14, 15, 15, 16,
	16, 16, 19, 19, 19, 17, 17, 18, 18, 24,
	24, 23, 23, 25, 25, 25, 25, 93, 93, 93,
	92, 92, 27, 27, 28, 28, 29, 29, 30, 30,
	30, 37, 31, 31, 31, 31, 98, 98, 97, 97,
	97, 96, 96, 32, 32, 32, 32, 33, 33, 33,
	33, 34, 34, 36, 36, 35, 35, 38, 38, 38,
	38, 39, 39, 40, 40, 26, 26, 26, 26, 26,
	26, 42, 42, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 52, 52, 52, 52, 52,
	52, 43, 43, 43, 43, 43, 43, 43, 22, 22,
	53, 53, 53, 59, 54, 54, 101, 101, 101, 101,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 50,
	50, 50, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 49, 49, 49, 49, 49, 49, 49, 49, 109,
	109, 51, 51, 51, 51, 20, 20, 20, 20, 20,
	102, 102, 102, 102, 102, 102, 102, 102, 63, 63,
	21, 21, 61, 61, 62, 64, 64, 60, 60, 60,
	45, 45, 45, 45, 45, 45, 45, 47, 47, 47,
	65, 65, 66, 66, 67, 67, 68, 68, 69, 70,
	70, 70, 71, 71, 71, 71, 72, 72, 72, 73,
	73, 75, 75, 74, 74, 74, 74, 76, 76, 44,
	44, 55, 55, 57, 57, 56, 58, 77, 77, 78,
	79, 79, 81, 81, 82, 82, 80, 80, 83, 83,
	83, 83, 83, 83, 83, 84, 84, 84, 85, 85,
	86, 86, 86, 87, 87, 90, 90, 91, 91, 94,
	94, 95, 95, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 107, 108,
	99, 100, 100, 100,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 13, 7, 3, 7,
	7, 8, 7, 3, 5, 8, 4, 6, 7, 7,
	4, 5, 4, 5, 5, 3, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 5, 5, 3, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 1, 1, 1, 3, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 2, 4, 5, 7, 2, 4, 6, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 1,
	3, 0, 3, 1, 3, 3, 5, 0, 5, 2,
	1, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -104, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, -13, 6, 7, 8, 9, 29,
	106, 107, 109, 108, 110, 119, 120, 121, 124, 125,
	126, -105, 156, -16, 5, -14, -106, -14, -14, -14,
	-14, 111, -86, 113, 117, -90, 53, -89, 149, 122,
	26, 154, 132, 151, 36, 17, 125, 153, 124, 35,
	126, 155, 152, -80, 113, 115, 111, 111, 112, 113,
	111, -103, 53, -88, -89, 66, 21, 23, 69, 101,
	15, 70, 100, 144, 106, 45, 136, 137, 134, 135,
	127, 28, 9, 24, 120, 20, 94, 108, 73, 74,
	123, 22, 121, 64, 18, 48, 10, 12, 13, 116,
	115, 85, 112, 43, 7, 102, 25, 82, 39, 27,
	41, 83, 16, 138, 139, 30, 148, 96, 46, 33,
	67, 62, 49, 65, 14, 44, 84, 109, 143, 42,
	6, 147, 29, 129, 130, 131, 119, 40, 111, 128,
	72, 114, 63, 5, 117, 8, 47, 118, 140, 141,
	142, 31, 71, 11, 113, -99, -99, -99, -99, -99,
	-2, 19, 20, -19, 37, 38, -15, -80, -37, -35,
	-94, 53, -89, 10, -77, -78, -60, -90, -94, 53,
	-89, -82, 116, 112, -35, 111, -35, -35, -81, 116,
	53, -81, -35, -99, -17, 33, 20, 61, -36, 25,
	-35, 29, -97, -96, 21, -94, 55, 103, -35, 51,
	75, 103, -35, 67, 53, -100, -107, -91, 50, -90,
	-88, -35, -100, 114, -35, 22, 49, -35, -18, 40,
	-47, -90, 56, 59, -75, 29, -107, -35, -77, -38,
	47, 115, 48, -96, -95, -94, -88, -40, 11, -78,
	-26, -41, 67, -46, -42, 22, -45, -60, -58, -59,
	101, 90, 91, 98, 68, 102, -50, -48, -49, -51,
	63, 64, 55, 54, 56, 57, 58, 59, 62, -90,
	-94, -56, -107, 41, 42, 144, 145, 148, 146, 70,
	31, 134, 142, 141, 140, 138, 139, 136, 137, 116,
	135, 96, 143, -91, -95, -88, -100, 22, -87, 118,
	-83, 109, 107, 28, 108, 14, 144, 155, 53, -35,
	-35, -100, -23, -25, 92, -26, -94, -79, 18, 10,
	31, 31, -44, 31, -2, -77, -74, -90, -40, 112,
	112, 112, -67, 14, -26, 66, 65, 82, -26, -43,
	85, 67, 83, 84, 69, 87, 86, 97, 90, 91,
	92, 93, 94, 95, 96, 88, 89, 100, 75, 76,
	77, 78, 79, 80, 81, -59, -107, 104, 105, -46,
	-46, -46, -46, -46, -46, -107, 103, -2, -54, -26,
	-107, -107, -107, -107, -107, -107, -63, -26, -107, -109,
	-107, -109, -109, -109, -109, -109, -109, -109, -107, -107,
	-107, -107, 103, 49, -90, -99, -84, -85, 114, 21,
	112, 27, -27, 51, 10, -93, -92, 21, -90, 55,
	103, -35, -76, 49, -55, -57, -56, -107, -76, -108,
	51, 52, 103, -67, -107, -107, -107, -71, 16, 15,
	-26, -26, -52, 62, 67, 63, 64, -42, -46, -53,
	-56, -59, 60, 85, 83, 84, 69, -46, -46, -46,
	-46, -46, -46, -46, -46, -46, -46, -46, -46, -46,
	-46, -46, -101, 53, 55, 101, 122, -45, -45, -90,
	-24, 20, -23, -91, -108, 51, -108, -23, -23, -26,
	-26, -73, -90, -17, -61, -62, 71, -90, -108, -23,
	-24, -23, -23, -91, -35, -35, -99, -40, -25, -28,
	-29, -30, -31, -37, -59, -107, -92, 92, -95, 26,
	51, -108, -90, -90, -71, -39, -90, -39, -39, -26,
	-68, -69, -26, 62, 63, 64, -53, -46, -46, -46,
	-22, 123, 66, -108, -23, -107, -26, -108, -108, 51,
	118, 21, -108, 51, -23, -64, -62, 73, -26, -108,
	-108, -108, -108, -108, -100, -65, 12, 51, -32, -33,
	-34, 39, 43, 45, 40, 41, 42, 46, -98, 21,
	-28, 103, 27, -57, 103, -108, 51, -108, -108, 51,
	17, 51, -70, 23, 24, -22, 66, -46, -46, -108,
	-24, -102, -101, -102, -102, 149, -90, -67, 74, -26,
	72, -66, 13, 15, -29, -30, -29, -30, 39, 39,
	39, 44, 39, 44, 39, -33, -94, -108, 92, 8,
	-90, -90, -26, -26, -69, -46, -108, -108, 132, -107,
	-101, 133, -108, -108, -107, -21, 147, -26, -67, -26,
	-54, 49, 49, 39, 39, -77, 56, 29, -46, -108,
	55, -71, -26, -26, -108, 51, -101, -20, 85, 152,
	-72, 18, 30, -101, 133, 56, -108, 150, 46, 153,
	8, 85, 29, -108, 36, 151, 154, 35, -101, 36,
	36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 45, 45, 45, 45, 45,
	310, 296, 0, 0, 0, 0, 430, 430, 430, 430,
	430, 1, 3, 0, 49, 52, 47, 296, 0, 0,
	0, 294, 0, 426, 311, 312, 315, 316, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 427, 0, 0, 297, 0, 292, 0, 292,
	0, 430, 36, 37, 38, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 426, 40, 41, 42, 43, 44,
	18, 50, 51, 55, 53, 54, 46, 0, 0, 88,
	105, 319, 320, 0, 23, 287, 0, 237, 0, -2,
	-2, 0, 0, 0, 431, 0, 431, 0, 0, 0,
	0, 0, 35, 39, 57, 0, 56, 48, 271, 0,
	104, 0, 107, 89, 0, 91, 92, 0, 113, 0,
	0, 0, 431, 0, 313, 26, 432, 433, 428, 317,
	318, 0, 30, 0, 32, 293, 0, 431, 0, 58,
	0, 247, 0, 0, 0, 0, 0, 103, 113, 81,
	0, 0, 0, 90, 106, 321, 322, 254, 0, 288,
	289, 115, 0, 120, 123, 0, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 185, 186, 187, 188,
	121, 122, 240, 241, 242, 243, 244, 245, 246, 237,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 209, 209, 209, 209, 209, 209, 209, 209, 0,
	0, 0, 0, 238, 0, -2, 24, 295, 0, 0,
	430, 305, 298, 299, 300, 301, 302, 303, 304, 31,
	33, 34, 72, 61, 63, 67, 0, 0, 290, 291,
	248, 249, 277, 0, 280, 277, 0, 273, 254, 0,
	0, 0, 262, 0, 114, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	143, 144, 145, 146, 147, 134, 0, 0, 0, 179,
	180, 181, 182, 183, 0, 59, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 55, 0, 229, 0, 201,
	0, 202, 203, 204, 205, 206, 207, 208, 0, 59,
	0, 0, 0, 0, 314, 27, 0, 430, 306, 307,
	308, 309, 113, 0, 0, 64, 68, 0, 70, 71,
	0, 17, 19, 0, 279, 281, 283, 0, 20, 272,
	0, 429, 0, 262, 0, 0, 0, 22, 0, 0,
	116, 117, 119, 135, 0, 137, 139, 124, 125, 126,
	150, 151, 152, 0, 0, 0, 0, 148, 130, 0,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 178, 156, 157, 158, 159, 176, 177, 184,
	0, 0, 60, 238, 153, 0, 285, 0, 0, 0,
	0, 0, 269, 0, 235, 232, 0, 0, 210, 0,
	0, 0, 0, 239, 431, 28, 29, 250, 62, 73,
	74, 76, 77, 78, 86, 0, 69, 65, 0, 0,
	0, 284, 275, 274, 21, 0, 111, 0, 0, 263,
	255, 256, 259, 136, 138, 140, 127, 148, 131, 0,
	128, 0, 0, 189, 0, 59, 155, 192, 193, 0,
	0, 0, 0, 0, 254, 0, 233, 0, 0, 200,
	211, 212, 213, 214, 25, 252, 0, 0, 0, 0,
	0, 93, 0, 0, 96, 0, 0, 0, 0, 87,
	0, 0, 0, 282, 0, 108, 0, 109, 110, 0,
	0, 0, 258, 260, 261, 129, 0, 149, 132, 190,
	0, 0, 220, 0, 0, 0, 270, 230, 199, 236,
	0, 254, 0, 0, 75, 82, 0, 85, 94, 95,
	97, 0, 99, 0, 101, 102, 79, 80, 66, 0,
	276, 112, 264, 265, 257, 133, 191, 194, 221, 0,
	225, 0, 195, 196, 0, 0, 0, 234, 262, 253,
	251, 0, 0, 98, 100, 278, 0, 0, 215, 198,
	231, 266, 83, 84, 222, 0, 226, 0, 0, 0,
	16, 0, 0, 223, 0, 0, 197, 0, 0, 0,
	267, 0, 0, 227, 216, 0, 219, 0, 224, 217,
	268, 0, 0, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:301
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:306
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:312
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:318
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:326
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:331
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:347
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:351
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:367
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:373
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:379
		{
			yyVAL.statement = &Other{}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:383
		{
			yyVAL.statement = &Other{}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:387
		{
			yyVAL.statement = &Other{}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:391
		{
			yyVAL.statement = &Other{}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:395
		{
			yyVAL.statement = &Other{}
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:400
		{
			setAllowComments(yylex, true)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:404
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:410
		{
			yyVAL.bytes2 = nil
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:414
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:420
		{
			yyVAL.str = UnionStr
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:424
		{
			yyVAL.str = UnionAllStr
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:428
		{
			yyVAL.str = UnionDistinctStr
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:433
		{
			yyVAL.str = ""
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:437
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:441
		{
			yyVAL.str = SQLCacheStr
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:446
		{
			yyVAL.str = ""
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:450
		{
			yyVAL.str = DistinctStr
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:455
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:459
		{
			yyVAL.str = StraightJoinHint
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:464
		{
			yyVAL.selectExprs = nil
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:468
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:474
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:478
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:484
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:488
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:492
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:501
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:505
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:509
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:516
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:521
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:525
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:531
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:535
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:545
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:553
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:559
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:572
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:576
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:580
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:584
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:589
		{
			yyVAL.empty = struct{}{}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:591
		{
			yyVAL.empty = struct{}{}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:594
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:598
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:602
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:609
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:615
		{
			yyVAL.str = JoinStr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:619
		{
			yyVAL.str = JoinStr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:623
		{
			yyVAL.str = JoinStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:627
		{
			yyVAL.str = StraightJoinStr
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:633
		{
			yyVAL.str = LeftJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:637
		{
			yyVAL.str = LeftJoinStr
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:641
		{
			yyVAL.str = RightJoinStr
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:645
		{
			yyVAL.str = RightJoinStr
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:651
		{
			yyVAL.str = NaturalJoinStr
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:655
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:665
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:669
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:675
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:679
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:684
		{
			yyVAL.indexHints = nil
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:688
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:692
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:696
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:702
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:706
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:711
		{
			yyVAL.expr = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:715
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:725
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:729
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:733
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:737
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:741
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:751
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:757
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:761
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:765
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:769
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:773
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:777
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:781
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:785
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:789
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:793
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:797
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:801
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:807
		{
			yyVAL.str = IsNullStr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:811
		{
			yyVAL.str = IsNotNullStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:815
		{
			yyVAL.str = IsTrueStr
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:819
		{
			yyVAL.str = IsNotTrueStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:823
		{
			yyVAL.str = IsFalseStr
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:827
		{
			yyVAL.str = IsNotFalseStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:833
		{
			yyVAL.str = EqualStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.str = LessThanStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:841
		{
			yyVAL.str = GreaterThanStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:845
		{
			yyVAL.str = LessEqualStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:849
		{
			yyVAL.str = GreaterEqualStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:853
		{
			yyVAL.str = NotEqualStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:857
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:862
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:866
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:872
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:876
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:880
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:886
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:892
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:896
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:920
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:924
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:928
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:932
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:936
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:940
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:944
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:948
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:952
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:956
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:960
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:964
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:968
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:972
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:976
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:980
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:984
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:988
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:992
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:996
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1000
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1008
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1022
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1026
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1030
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1048
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1052
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1056
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1074
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1078
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1082
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1086
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1090
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1094
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1098
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1130
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1135
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1140
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1154
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1158
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1172
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1176
		{
			yyVAL.str = BooleanModeStr
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1180
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1184
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1188
		{
			yyVAL.str = QueryExpansionStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1195
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1199
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1203
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1207
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1211
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1215
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1219
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1223
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1228
		{
			yyVAL.expr = nil
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1232
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1237
		{
			yyVAL.str = string("")
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1241
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1247
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1251
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1257
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1262
		{
			yyVAL.expr = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1272
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1286
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1290
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1294
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1298
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1302
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1306
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1310
		{
			yyVAL.expr = &NullVal{}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1316
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1325
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1329
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1334
		{
			yyVAL.exprs = nil
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1338
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1343
		{
			yyVAL.expr = nil
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1347
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1352
		{
			yyVAL.orderBy = nil
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1356
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1362
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1366
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1372
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1377
		{
			yyVAL.str = AscScr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			yyVAL.str = AscScr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1385
		{
			yyVAL.str = DescScr
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1390
		{
			yyVAL.limit = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1398
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1402
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1407
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1411
		{
			yyVAL.str = ForUpdateStr
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1415
		{
			yyVAL.str = ShareModeStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1421
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1425
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1430
		{
			yyVAL.columns = nil
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1434
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1440
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1444
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1448
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1452
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1457
		{
			yyVAL.updateExprs = nil
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1461
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1467
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1471
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1477
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1481
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1487
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1491
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1497
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1503
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1513
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1517
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1523
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1532
		{
			yyVAL.byt = 0
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1534
		{
			yyVAL.byt = 1
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1537
		{
			yyVAL.empty = struct{}{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1542
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1544
		{
			yyVAL.str = IgnoreStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1548
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1550
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1552
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1554
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1556
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1558
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1560
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1563
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1565
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1567
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1571
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1573
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1576
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1578
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1580
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1583
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1585
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1589
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1600
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1606
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1610
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1617
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1747
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1756
		{
			decNesting(yylex)
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1761
		{
			forceEOF(yylex)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1766
		{
			forceEOF(yylex)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1770
		{
			forceEOF(yylex)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1774
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
