//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const VINDEX = 57464
const VINDEXES = 57465
const BIT = 57466
const TINYINT = 57467
const SMALLINT = 57468
const MEDIUMINT = 57469
const INT = 57470
const INTEGER = 57471
const BIGINT = 57472
const INTNUM = 57473
const REAL = 57474
const DOUBLE = 57475
const FLOAT_TYPE = 57476
const DECIMAL = 57477
const NUMERIC = 57478
const TIME = 57479
const TIMESTAMP = 57480
const DATETIME = 57481
const YEAR = 57482
const CHAR = 57483
const VARCHAR = 57484
const BOOL = 57485
const CHARACTER = 57486
const VARBINARY = 57487
const NCHAR = 57488
const TEXT = 57489
const TINYTEXT = 57490
const MEDIUMTEXT = 57491
const LONGTEXT = 57492
const BLOB = 57493
const TINYBLOB = 57494
const MEDIUMBLOB = 57495
const LONGBLOB = 57496
const JSON = 57497
const ENUM = 57498
const NULLX = 57499
const AUTO_INCREMENT = 57500
const APPROXNUM = 57501
const SIGNED = 57502
const UNSIGNED = 57503
const ZEROFILL = 57504
const DATABASES = 57505
const TABLES = 57506
const VITESS_KEYSPACES = 57507
const VITESS_SHARDS = 57508
const VITESS_TABLETS = 57509
const VSCHEMA_TABLES = 57510
const NAMES = 57511
const CHARSET = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 193,
	79, 587,
	108, 587,
	-2, 41,
	-1, 195,
	79, 610,
	108, 610,
	-2, 43,
	-1, 200,
	108, 488,
	-2, 484,
	-1, 201,
	108, 489,
	-2, 485,
	-1, 623,
	108, 491,
	-2, 487,
	-1, 764,
	5, 22,
	-2, 435,
	-1, 778,
	5, 23,
	-2, 312,
	-1, 952,
	5, 23,
	-2, 436,
	-1, 1000,
	5, 22,
	-2, 438,
	-1, 1046,
	5, 23,
	-2, 439,
}

const yyPrivate = 57344

const yyLast = 8063

var yyAct = [...]int{

	368, 38, 1038, 870, 893, 550, 341, 609, 871, 418,
	3, 192, 649, 367, 230, 662, 626, 166, 44, 721,
	232, 928, 841, 731, 833, 958, 420, 867, 417, 160,
	803, 745, 767, 782, 770, 625, 698, 390, 396, 38,
	635, 339, 658, 203, 196, 330, 588, 171, 165, 182,
	422, 228, 186, 728, 406, 181, 175, 43, 1069, 1060,
	197, 1066, 1055, 730, 161, 162, 163, 164, 622, 328,
	1064, 1059, 1054, 941, 993, 207, 1015, 799, 642, 970,
	180, 1041, 516, 515, 525, 526, 518, 519, 520, 521,
	522, 523, 524, 517, 48, 650, 527, 988, 986, 1021,
	898, 899, 900, 201, 1063, 1061, 213, 1039, 223, 901,
	823, 589, 610, 612, 214, 50, 51, 52, 53, 637,
	209, 1013, 820, 131, 132, 132, 484, 479, 822, 63,
	134, 135, 136, 141, 781, 780, 141, 779, 205, 210,
	637, 1031, 143, 133, 539, 540, 978, 204, 229, 229,
	229, 229, 229, 229, 955, 141, 141, 845, 786, 229,
	643, 141, 549, 437, 562, 733, 218, 517, 793, 225,
	527, 227, 38, 518, 519, 520, 521, 522, 523, 524,
	517, 393, 907, 527, 611, 804, 527, 419, 392, 502,
	224, 226, 503, 505, 504, 503, 852, 436, 1042, 943,
	321, 322, 323, 324, 325, 650, 432, 229, 505, 636,
	327, 505, 229, 746, 634, 633, 1014, 1012, 821, 481,
	819, 229, 229, 229, 229, 229, 229, 229, 229, 1053,
	636, 902, 908, 797, 705, 141, 1034, 141, 746, 491,
	857, 141, 222, 216, 504, 503, 398, 141, 703, 704,
	702, 63, 63, 63, 63, 63, 63, 974, 478, 973,
	1048, 505, 63, 483, 504, 503, 812, 394, 826, 827,
	828, 945, 492, 493, 494, 495, 496, 497, 498, 499,
	722, 505, 723, 141, 691, 693, 694, 489, 639, 692,
	141, 141, 141, 640, 811, 63, 800, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 41,
	63, 527, 141, 329, 141, 63, 329, 141, 1024, 701,
	141, 972, 141, 810, 63, 63, 63, 63, 63, 63,
	63, 63, 906, 333, 391, 834, 1050, 329, 536, 538,
	1004, 329, 1004, 1005, 1017, 929, 967, 966, 1016, 516,
	515, 525, 526, 518, 519, 520, 521, 522, 523, 524,
	517, 895, 336, 527, 887, 329, 548, 931, 794, 552,
	553, 554, 555, 556, 557, 558, 724, 561, 563, 563,
	563, 563, 563, 563, 563, 563, 571, 572, 573, 574,
	954, 329, 933, 477, 937, 220, 932, 215, 930, 839,
	329, 913, 912, 935, 186, 186, 186, 186, 186, 197,
	579, 204, 934, 903, 591, 910, 909, 936, 938, 434,
	419, 19, 613, 736, 329, 403, 329, 429, 186, 608,
	141, 525, 526, 518, 519, 520, 521, 522, 523, 524,
	517, 197, 866, 527, 762, 439, 438, 763, 736, 768,
	950, 581, 621, 627, 593, 594, 616, 596, 623, 592,
	19, 618, 595, 580, 651, 652, 653, 41, 430, 604,
	428, 402, 768, 615, 614, 577, 578, 403, 851, 619,
	850, 868, 911, 630, 434, 839, 999, 606, 607, 229,
	45, 403, 664, 839, 787, 403, 504, 503, 575, 63,
	41, 508, 644, 663, 141, 881, 41, 141, 141, 141,
	141, 141, 790, 505, 434, 507, 660, 661, 659, 141,
	19, 504, 503, 141, 699, 771, 772, 141, 666, 839,
	172, 141, 141, 654, 551, 55, 130, 897, 505, 38,
	686, 560, 63, 564, 565, 566, 567, 568, 569, 570,
	868, 506, 813, 552, 774, 520, 521, 522, 523, 524,
	517, 487, 608, 527, 735, 326, 41, 504, 503, 17,
	623, 408, 411, 412, 413, 409, 41, 410, 414, 587,
	601, 725, 726, 141, 505, 602, 777, 179, 141, 765,
	766, 141, 63, 603, 599, 412, 413, 743, 764, 600,
	776, 598, 620, 365, 597, 176, 177, 645, 646, 647,
	648, 1062, 1058, 753, 825, 687, 170, 738, 739, 1057,
	737, 742, 655, 656, 657, 754, 750, 397, 759, 61,
	775, 758, 331, 748, 805, 749, 796, 751, 752, 435,
	627, 395, 788, 948, 332, 221, 1036, 1035, 784, 785,
	760, 63, 997, 791, 976, 668, 486, 198, 801, 802,
	416, 173, 174, 397, 167, 63, 757, 919, 229, 688,
	689, 45, 695, 696, 756, 792, 1027, 168, 778, 1026,
	996, 768, 806, 807, 808, 1028, 229, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 816,
	971, 527, 501, 47, 49, 427, 42, 541, 542, 543,
	544, 545, 546, 547, 1, 671, 699, 63, 551, 815,
	1037, 740, 741, 356, 355, 358, 359, 360, 361, 63,
	892, 632, 357, 362, 624, 202, 846, 824, 54, 829,
	631, 391, 809, 1011, 969, 638, 798, 641, 896, 1033,
	795, 231, 231, 231, 231, 231, 231, 442, 443, 441,
	445, 444, 231, 440, 873, 415, 38, 431, 840, 197,
	63, 63, 665, 56, 869, 874, 856, 872, 818, 817,
	883, 884, 885, 669, 208, 535, 878, 755, 191, 63,
	875, 576, 389, 838, 836, 231, 1025, 995, 837, 855,
	877, 889, 627, 888, 627, 559, 891, 854, 848, 849,
	231, 744, 853, 342, 690, 231, 354, 859, 351, 860,
	861, 862, 863, 890, 231, 231, 231, 231, 231, 231,
	231, 231, 904, 905, 353, 352, 582, 63, 761, 509,
	343, 340, 334, 408, 411, 412, 413, 409, 916, 410,
	414, 184, 886, 771, 772, 918, 399, 407, 405, 141,
	735, 404, 189, 923, 773, 924, 623, 186, 769, 63,
	63, 939, 697, 942, 940, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	63, 63, 185, 63, 63, 947, 957, 949, 946, 183,
	927, 865, 847, 992, 1040, 627, 965, 788, 922, 960,
	961, 962, 858, 963, 926, 229, 586, 141, 20, 46,
	178, 141, 16, 15, 14, 13, 24, 63, 12, 11,
	10, 9, 8, 7, 879, 6, 5, 880, 4, 169,
	882, 18, 991, 951, 952, 953, 63, 956, 2, 984,
	0, 873, 0, 0, 1001, 0, 0, 0, 0, 998,
	0, 0, 0, 1000, 872, 0, 975, 0, 0, 0,
	141, 1009, 1010, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 63, 63, 63,
	141, 63, 0, 889, 63, 1020, 0, 979, 980, 583,
	873, 0, 38, 1029, 0, 0, 198, 0, 0, 989,
	990, 1030, 0, 872, 0, 0, 0, 0, 63, 0,
	678, 0, 187, 944, 0, 0, 0, 185, 0, 0,
	1006, 1007, 1008, 1044, 676, 197, 0, 0, 198, 551,
	1045, 231, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 1056, 0, 968, 0, 0, 63, 63,
	0, 682, 1023, 0, 1065, 0, 830, 831, 832, 0,
	675, 63, 0, 0, 0, 190, 366, 0, 0, 0,
	206, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	981, 982, 231, 983, 0, 0, 985, 0, 987, 0,
	1046, 0, 0, 0, 0, 0, 139, 1049, 63, 159,
	1052, 994, 0, 0, 0, 0, 0, 0, 672, 677,
	670, 0, 0, 0, 0, 0, 0, 0, 139, 139,
	199, 0, 0, 0, 139, 63, 0, 1070, 1071, 680,
	683, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 231, 211, 0, 212, 0, 0, 0,
	217, 0, 0, 0, 0, 747, 219, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 551, 0, 0, 0, 920, 921, 0,
	0, 0, 401, 0, 679, 0, 149, 0, 139, 0,
	139, 426, 0, 0, 139, 681, 0, 783, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 231,
	158, 480, 0, 482, 0, 0, 485, 0, 0, 488,
	0, 0, 0, 0, 185, 185, 185, 185, 185, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	185, 0, 0, 139, 424, 139, 0, 0, 185, 0,
	814, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 977, 0, 0, 139, 146, 139, 0, 231,
	139, 151, 148, 139, 0, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 39, 21, 22,
	0, 0, 150, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 145, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 500,
	0, 700, 41, 835, 1022, 147, 152, 154, 155, 156,
	157, 0, 0, 0, 0, 0, 198, 0, 0, 876,
	783, 0, 0, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 0, 0, 527, 0, 0,
	231, 231, 0, 231, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 25, 26, 28, 27, 30, 0, 0, 0, 0,
	0, 0, 0, 590, 31, 34, 35, 917, 1067, 36,
	37, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 843, 514, 0, 231,
	0, 617, 0, 528, 529, 530, 531, 532, 533, 534,
	0, 512, 513, 510, 516, 515, 525, 526, 518, 519,
	520, 521, 522, 523, 524, 517, 0, 139, 527, 199,
	139, 139, 139, 139, 139, 959, 0, 959, 959, 959,
	0, 964, 605, 0, 231, 0, 139, 40, 0, 0,
	424, 0, 667, 0, 139, 139, 0, 684, 0, 0,
	685, 199, 0, 0, 490, 0, 0, 0, 231, 516,
	515, 525, 526, 518, 519, 520, 521, 522, 523, 524,
	517, 0, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 0, 139, 527, 1002, 1003,
	0, 139, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 1032, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 0, 0, 734, 490, 0, 0, 0,
	734, 734, 198, 0, 734, 1047, 62, 0, 0, 0,
	0, 0, 0, 1051, 0, 72, 0, 0, 734, 734,
	734, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 516, 515, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 0, 0, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 100, 0, 0, 185, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	121, 122, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 128, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	129, 0, 0, 123, 124, 125, 126, 94, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 64, 0, 85, 127, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 0, 0, 460, 0, 0,
	0, 0, 139, 0, 0, 0, 914, 0, 0, 199,
	915, 465, 466, 467, 468, 469, 470, 471, 0, 472,
	473, 474, 475, 476, 461, 462, 463, 464, 446, 447,
	0, 0, 449, 0, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 490, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 97, 263, 0, 254, 234, 260, 235, 252, 275,
	77, 278, 250, 302, 284, 84, 318, 86, 289, 0,
	106, 93, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 62,
	0, 628, 629, 0, 0, 0, 0, 0, 72, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 789, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 241, 238,
	0, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	305, 271, 142, 308, 269, 268, 311, 100, 303, 253,
	261, 73, 259, 105, 98, 199, 286, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 236,
	0, 107, 117, 129, 249, 306, 123, 124, 125, 126,
	94, 71, 247, 248, 245, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 64, 0, 85,
	127, 102, 79, 118, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 97, 263, 0, 254,
	234, 260, 235, 252, 275, 77, 278, 250, 302, 284,
	84, 318, 86, 289, 0, 106, 93, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 62, 0, 628, 629, 0, 0,
	0, 0, 0, 72, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 241, 238, 0, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 305, 271, 142, 308, 269,
	268, 311, 100, 303, 253, 261, 73, 259, 105, 98,
	0, 286, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 236, 0, 107, 117, 129, 249,
	306, 123, 124, 125, 126, 94, 71, 247, 248, 245,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 64, 0, 85, 127, 102, 79, 118, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 97, 263, 0, 254, 234, 260, 235, 252, 275,
	77, 278, 250, 302, 284, 84, 318, 86, 289, 0,
	106, 93, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	1019, 0, 255, 0, 287, 0, 0, 0, 241, 238,
	0, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	305, 271, 142, 308, 269, 268, 311, 100, 303, 253,
	261, 73, 259, 105, 98, 0, 286, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 236,
	0, 107, 117, 129, 249, 306, 123, 124, 125, 126,
	94, 71, 247, 248, 245, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 64, 0, 85,
	127, 102, 79, 118, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 97, 263, 0, 254,
	234, 260, 235, 252, 275, 77, 278, 250, 302, 284,
	84, 318, 86, 289, 0, 106, 93, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 41, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 241, 238, 0, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 305, 271, 142, 308, 269,
	268, 311, 100, 303, 253, 261, 73, 259, 105, 98,
	0, 286, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 236, 0, 107, 117, 129, 249,
	306, 123, 124, 125, 126, 94, 71, 247, 248, 245,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 64, 0, 85, 127, 102, 79, 118, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 97, 263, 0, 254, 234, 260, 235, 252, 275,
	77, 278, 250, 302, 284, 84, 318, 86, 289, 0,
	106, 93, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	925, 0, 255, 0, 287, 0, 0, 0, 241, 238,
	0, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	305, 271, 142, 308, 269, 268, 311, 100, 303, 253,
	261, 73, 259, 105, 98, 0, 286, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 236,
	0, 107, 117, 129, 249, 306, 123, 124, 125, 126,
	94, 71, 247, 248, 245, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 64, 0, 85,
	127, 102, 79, 118, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 97, 263, 0, 254,
	234, 260, 235, 252, 275, 77, 278, 250, 302, 284,
	84, 318, 86, 289, 0, 106, 93, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 62, 0, 433, 0, 0, 0,
	0, 0, 0, 72, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 241, 238, 0, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 305, 271, 142, 308, 269,
	268, 311, 100, 303, 253, 261, 73, 259, 105, 98,
	0, 286, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 236, 0, 107, 117, 129, 249,
	306, 123, 124, 125, 126, 94, 71, 247, 248, 245,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 64, 0, 85, 127, 102, 79, 118, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 97, 263, 0, 254, 234, 260, 235, 252, 275,
	77, 278, 250, 302, 284, 84, 318, 86, 289, 0,
	106, 93, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 241, 238,
	0, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	305, 271, 142, 308, 269, 268, 311, 100, 303, 253,
	261, 73, 259, 105, 98, 0, 286, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 236,
	0, 107, 117, 129, 249, 306, 123, 124, 125, 126,
	94, 71, 247, 248, 245, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 64, 0, 85,
	127, 102, 79, 118, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 97, 263, 0, 254,
	234, 260, 235, 252, 275, 77, 278, 250, 302, 284,
	84, 318, 86, 289, 0, 106, 93, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 241, 238, 0, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 305, 271, 142, 308, 269,
	268, 311, 100, 303, 253, 261, 73, 259, 105, 98,
	0, 286, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 236, 0, 107, 117, 129, 249,
	306, 123, 124, 125, 126, 94, 71, 247, 248, 245,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 64, 0, 85, 127, 102, 79, 118, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 97, 263, 0, 254, 234, 260, 235, 252, 275,
	77, 278, 250, 302, 284, 84, 318, 86, 289, 0,
	106, 93, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 241, 238,
	0, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	305, 271, 142, 308, 269, 268, 311, 100, 303, 253,
	261, 73, 259, 105, 98, 0, 286, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 236,
	0, 107, 117, 129, 249, 306, 123, 124, 125, 126,
	94, 71, 247, 248, 245, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 64, 0, 85,
	127, 102, 79, 118, 97, 0, 0, 729, 0, 338,
	0, 0, 0, 77, 0, 337, 0, 0, 84, 376,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 200, 356, 355, 358, 359, 360, 361, 0,
	0, 72, 357, 362, 363, 364, 0, 0, 335, 349,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 347, 732, 0, 0, 0, 387, 0, 348,
	0, 0, 344, 345, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 385, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 128, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 129, 0, 0, 123,
	124, 125, 126, 94, 71, 377, 386, 383, 384, 381,
	382, 380, 379, 378, 388, 371, 372, 374, 0, 373,
	64, 0, 85, 127, 102, 79, 118, 97, 0, 0,
	0, 0, 338, 0, 0, 0, 77, 0, 337, 0,
	0, 84, 376, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 329, 200, 356, 355, 358, 359,
	360, 361, 0, 0, 72, 357, 362, 363, 364, 0,
	0, 335, 349, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 347, 0, 0, 0, 0,
	387, 0, 348, 0, 0, 344, 345, 350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 385, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 128, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 129,
	0, 0, 123, 124, 125, 126, 94, 71, 377, 386,
	383, 384, 381, 382, 380, 379, 378, 388, 371, 372,
	374, 0, 373, 64, 0, 85, 127, 102, 79, 118,
	97, 0, 0, 0, 0, 338, 0, 0, 0, 77,
	0, 337, 0, 0, 84, 376, 86, 0, 0, 106,
	93, 0, 0, 0, 0, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 200, 356,
	355, 358, 359, 360, 361, 0, 0, 72, 357, 362,
	363, 364, 0, 0, 335, 349, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 347, 732,
	0, 0, 0, 387, 0, 348, 0, 0, 344, 345,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 385, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 121, 122, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	128, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 129, 0, 0, 123, 124, 125, 126, 94,
	71, 377, 386, 383, 384, 381, 382, 380, 379, 378,
	388, 371, 372, 374, 19, 373, 64, 0, 85, 127,
	102, 79, 118, 0, 0, 97, 0, 0, 0, 0,
	338, 0, 0, 0, 77, 0, 337, 0, 0, 84,
	376, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 200, 356, 355, 358, 359, 360, 361,
	0, 0, 72, 357, 362, 363, 364, 0, 0, 335,
	349, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 347, 0, 0, 0, 0, 387, 0,
	348, 0, 0, 344, 345, 350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 385,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 128, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 129, 0, 0,
	123, 124, 125, 126, 94, 71, 377, 386, 383, 384,
	381, 382, 380, 379, 378, 388, 371, 372, 374, 0,
	373, 64, 0, 85, 127, 102, 79, 118, 97, 0,
	0, 0, 0, 338, 0, 0, 0, 77, 0, 337,
	0, 0, 84, 376, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 200, 356, 355, 358,
	359, 360, 361, 0, 0, 72, 357, 362, 363, 364,
	0, 0, 335, 349, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 347, 0, 0, 0,
	0, 387, 0, 348, 0, 0, 344, 345, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 385, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	121, 122, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 128, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	129, 0, 0, 123, 124, 125, 126, 94, 71, 377,
	386, 383, 384, 381, 382, 380, 379, 378, 388, 371,
	372, 374, 97, 373, 64, 0, 85, 127, 102, 79,
	118, 77, 0, 0, 0, 0, 84, 376, 86, 0,
	0, 106, 93, 0, 0, 0, 0, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	200, 356, 355, 358, 359, 360, 361, 0, 0, 72,
	357, 362, 363, 364, 0, 0, 0, 349, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	347, 0, 0, 0, 0, 387, 0, 348, 0, 0,
	344, 345, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 385, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 1068, 99, 104,
	87, 110, 101, 116, 121, 122, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 128, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 129, 0, 0, 123, 124, 125,
	126, 94, 71, 377, 386, 383, 384, 381, 382, 380,
	379, 378, 388, 371, 372, 374, 97, 373, 64, 0,
	85, 127, 102, 79, 118, 77, 0, 0, 0, 0,
	84, 376, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 200, 356, 355, 358, 359, 360,
	361, 0, 0, 72, 357, 362, 363, 364, 0, 0,
	0, 349, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 0, 0, 387,
	0, 348, 0, 0, 344, 345, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	385, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 129, 0,
	0, 123, 124, 125, 126, 94, 71, 377, 386, 383,
	384, 381, 382, 380, 379, 378, 388, 371, 372, 374,
	0, 373, 64, 0, 85, 127, 102, 79, 118, 97,
	0, 0, 0, 842, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 844,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 504, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 128,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 129, 97, 0, 123, 124, 125, 126, 94, 71,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 0, 64, 0, 85, 127, 102,
	79, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 57, 0, 0, 0, 60, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 121, 122, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 128, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 129, 0, 0, 123, 124, 125,
	126, 94, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	85, 127, 102, 79, 118, 97, 0, 0, 0, 423,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 425, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 128, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 129, 0, 0,
	123, 124, 125, 126, 94, 71, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 64, 0, 85, 127, 102, 79, 118, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 128,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 129, 0, 0, 123, 124, 125, 126, 94, 71,
	0, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 64, 0, 85, 127, 102,
	79, 118, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 121, 122, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 128, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 129, 97, 0, 123, 124,
	125, 126, 94, 71, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 0, 64,
	0, 85, 127, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 584, 0, 0,
	585, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 121, 122,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 128, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 129, 0,
	0, 123, 124, 125, 126, 94, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 85, 127, 102, 79, 118, 97,
	0, 0, 0, 423, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 425,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 421, 104, 87, 110, 101,
	116, 121, 122, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 128,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 129, 97, 0, 123, 124, 125, 126, 94, 71,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 0, 64, 0, 85, 127, 102,
	79, 118, 0, 0, 0, 0, 0, 41, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 121, 122, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 128, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 129, 97, 0, 123, 124, 125,
	126, 94, 71, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 0, 0, 64, 0,
	85, 127, 102, 79, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 844, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 128, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 129, 97, 0,
	123, 124, 125, 126, 94, 71, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 64, 0, 85, 127, 102, 79, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 425, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	121, 122, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 128, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	129, 97, 0, 123, 124, 125, 126, 94, 71, 400,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 64, 0, 85, 127, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 188, 0,
	0, 107, 117, 129, 0, 97, 123, 124, 125, 126,
	94, 71, 0, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 0, 64, 0, 85,
	127, 102, 79, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 121, 122, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 128, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 129, 97, 0,
	123, 124, 125, 126, 94, 71, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 64, 0, 85, 127, 102, 79, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 142,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	121, 122, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 128, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	129, 97, 0, 123, 124, 125, 126, 94, 71, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 0, 64, 0, 85, 127, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 121, 122, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 128, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 129, 97, 0, 123, 124, 125, 126,
	94, 71, 0, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 0, 64, 0, 85,
	127, 102, 79, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 121, 122, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 128, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 129, 97, 0, 123,
	124, 125, 126, 94, 71, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 0,
	64, 0, 85, 127, 102, 79, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 121,
	122, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 128, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 129,
	97, 0, 123, 124, 125, 126, 94, 71, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 0, 64, 0, 85, 127, 102, 79, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 121, 122, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	128, 69, 120, 68, 194, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 129, 0, 0, 123, 124, 125, 126, 195,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 85, 127,
	102, 79, 118,
}
var yyPact = [...]int{

	1300, -1000, -153, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 657, 698, -1000,
	-1000, -1000, -1000, -1000, 483, 5305, 5, 27, 14, 7201,
	26, 1175, 7690, -1000, -1000, -1000, -1000, -1000, 514, -1000,
	-1000, -1000, -1000, -1000, 648, 662, 524, 642, 567, -1000,
	4, 6385, 7038, 7853, -1000, 356, 21, 7690, -122, -1,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23, 7690, -1000, 7690, -7, 342, -7, 7690, -1000, 58,
	-1000, -1000, -1000, 7690, 340, 616, 53, 2589, 2589, 2589,
	2589, 2589, 2589, 515, -1000, -1000, -1000, -1000, 2589, -1000,
	-1000, -1000, -1000, -1000, -1000, 262, 614, 4581, 4581, 657,
	-1000, 514, -1000, -1000, -1000, 607, -1000, -1000, 183, 6874,
	442, 531, -1000, -1000, -1000, 639, 5866, 6222, 7690, 417,
	-1000, 2999, 366, -1000, 610, -1000, -1000, 118, -1000, 55,
	-1000, -1000, 392, -1000, 1700, 338, 2589, 9, 7690, 148,
	7690, 2589, 7, 7690, 634, 511, 7690, -1000, 3614, -1000,
	2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7690, -1000, -1000, -1000,
	-1000, 694, 100, 498, -1000, 4581, 1374, 448, 448, -1000,
	-1000, 35, -1000, -1000, 4949, 4949, 4949, 4949, 4949, 4949,
	4949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 448, 54, -1000, 4388, 448,
	448, 448, 448, 448, 448, 4581, 448, 448, 448, 448,
	448, 448, 448, 448, 448, 448, 448, 448, 448, 445,
	-1000, 452, 648, 262, 567, 6029, 538, -1000, -1000, -22,
	7690, -1000, 7527, 6385, 6385, 6385, 6385, 6385, -1000, 564,
	561, -1000, 554, 540, 553, 7690, -1000, 372, 262, 5866,
	64, 448, -1000, 6711, -1000, -1000, -22, 6385, 7690, -1000,
	-1000, -1000, -1000, -1000, 7527, -1000, 4581, 3409, 2179, 92,
	222, -100, -1000, -1000, 450, -1000, 450, 450, 450, 450,
	-66, -66, -66, -66, -1000, -1000, -1000, -1000, -1000, 481,
	-1000, 450, 450, 450, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 466, 466, 466, 451, 451, 477, -1000, 7690,
	-1000, 633, 1006, -1000, 7690, -1000, -1000, 7690, 2589, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 579, 4581, 4581, 218, 4581, 4581, 107, 4949,
	257, 161, 4949, 4949, 4949, 4949, 4949, 4949, 4949, 4949,
	4949, 4949, 4949, 4949, 4949, 4949, 4949, 225, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 321, -1000, 514, 667,
	667, 82, 82, 82, 82, 82, 82, 1581, 3807, 3409,
	370, 125, 4388, 4193, 4193, 4581, 4581, 4193, 643, 138,
	125, 7364, -1000, 262, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4193, 4193, 4193, 4193, 4581, -1000, -1000, -1000, 614,
	-1000, 643, 656, -1000, 599, 596, 4193, -1000, 415, 448,
	-1000, 461, 531, 475, 504, 803, -1000, -1000, -1000, -1000,
	560, -1000, 546, -1000, -1000, -1000, -1000, -1000, 262, -1000,
	20, 18, 17, 7364, -1000, 670, 438, -1000, -1000, -1000,
	125, -1000, 50, -1000, 441, 1974, -1000, -1000, -1000, -1000,
	-1000, -1000, 460, 626, 113, 313, -1000, -1000, 608, -1000,
	167, -102, -1000, -1000, 238, -66, -66, -1000, -1000, 81,
	605, 81, 81, 81, 266, -1000, -1000, -1000, -1000, 236,
	-1000, -1000, -1000, 208, -1000, 502, 7364, 2589, -1000, -1000,
	101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -23, -1000, 2589, -1000, 577, 107, 122,
	-1000, -1000, 202, -1000, -1000, 125, 125, 1429, -1000, -1000,
	-1000, -1000, 257, 4949, 4949, 4949, 207, 1429, 1283, 339,
	1453, 82, 459, 459, 66, 66, 66, 66, 66, 79,
	79, -1000, -1000, -1000, 262, -1000, -1000, -1000, 262, 4193,
	440, -1000, -1000, 5142, 49, 448, 4581, -1000, 346, 346,
	427, 175, 346, 4193, 163, -1000, 4581, 262, -1000, 346,
	262, 346, 346, -1000, -1000, 7690, -1000, -1000, -1000, -1000,
	432, 500, 7527, 448, -1000, 5682, 7364, 657, 4581, -1000,
	-1000, 4581, 453, -1000, 4581, -1000, -1000, -1000, -1000, 448,
	448, 448, 311, -1000, 657, -1000, 3204, 2179, -1000, 2179,
	7364, -1000, 306, -1000, -1000, 487, 43, -1000, -1000, -1000,
	359, 81, 81, -1000, 277, 127, -1000, -1000, -1000, 362,
	-1000, 429, 348, 7690, -1000, -1000, -1000, 7690, -1000, -1000,
	-1000, -1000, -1000, 7364, -1000, -1000, -1000, -1000, -1000, -1000,
	207, 1429, 597, -1000, 4949, 4949, -1000, -1000, 346, 4193,
	-1000, -1000, 6548, -1000, -1000, 2794, 4193, 125, -1000, -1000,
	240, 225, 240, -130, 476, 121, -1000, 4581, 195, -1000,
	-1000, -1000, -1000, -1000, -1000, 670, 6385, -1000, 617, 431,
	397, -1000, -1000, 4000, 262, 337, 46, 311, 648, 125,
	125, 7364, 125, 7364, 7364, 7364, 5498, 7364, 648, -1000,
	1974, -1000, 293, -1000, 450, -1000, -96, 692, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	264, 201, -1000, 199, 2589, -1000, -1000, 629, -1000, 4949,
	1429, 1429, -1000, -1000, -1000, -1000, 38, 262, 262, 450,
	450, -1000, 450, 451, -1000, 450, -48, 450, -49, 262,
	262, 448, -127, -1000, 125, 4581, 668, 424, 625, -1000,
	448, -1000, -1000, 454, 7364, 7364, -1000, -1000, 289, -1000,
	287, 287, 287, 64, -1000, -1000, -1000, 7364, -1000, 94,
	-1000, -112, -1000, 294, 290, -1000, 448, 1429, 2384, -1000,
	-1000, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4949, 262, 261, 125, 666, 661, 677, -1000, 448,
	-1000, 514, 33, -1000, 7364, -1000, -1000, -1000, -1000, -1000,
	-1000, 172, 620, -1000, 619, -1000, -1000, -1000, -26, -1000,
	-1000, -1000, -8, -1000, -1000, -1000, 4581, 4581, 7527, 397,
	262, 7364, -1000, -1000, 203, -1000, -1000, 283, -1000, 7364,
	262, 25, -145, 125, 395, 366, -1000, -1000, -1000, -1000,
	-26, 587, -1000, 575, -134, -149, -1000, -30, -1000, 574,
	-1000, -32, -136, 448, -146, 4765, -150, 259, 262, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 948, 9, 569, 941, 939, 938, 936, 935, 933,
	932, 931, 930, 929, 928, 926, 925, 924, 923, 922,
	94, 920, 919, 918, 38, 916, 56, 904, 903, 24,
	63, 53, 23, 165, 901, 28, 55, 49, 899, 34,
	868, 864, 862, 861, 54, 858, 857, 1022, 856, 851,
	7, 32, 842, 841, 839, 838, 41, 362, 836, 835,
	834, 818, 816, 814, 36, 5, 3, 13, 8, 813,
	840, 6, 811, 31, 805, 799, 797, 796, 18, 792,
	37, 791, 17, 45, 790, 25, 46, 33, 27, 11,
	788, 44, 787, 536, 785, 106, 784, 783, 779, 778,
	773, 772, 20, 103, 603, 14, 22, 768, 767, 1076,
	68, 50, 26, 765, 29, 51, 19, 21, 763, 761,
	760, 759, 758, 757, 160, 750, 749, 748, 12, 30,
	747, 746, 42, 15, 745, 744, 743, 742, 43, 740,
	40, 738, 735, 734, 35, 16, 731, 4, 730, 720,
	2, 715, 714, 706, 0, 69, 705, 704, 164,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 156, 156, 42, 42, 86, 86, 9,
	9, 90, 90, 90, 108, 108, 10, 10, 10, 10,
	15, 141, 142, 142, 142, 138, 118, 118, 118, 121,
	121, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 137, 137, 124, 124, 132, 132, 133, 133,
	133, 130, 130, 131, 131, 134, 134, 134, 125, 125,
	125, 125, 125, 125, 127, 127, 135, 135, 128, 128,
	128, 129, 129, 136, 136, 136, 136, 136, 126, 126,
	139, 146, 146, 146, 146, 140, 140, 148, 148, 147,
	143, 143, 143, 144, 144, 144, 145, 145, 145, 11,
	11, 11, 11, 11, 151, 149, 149, 150, 150, 12,
	13, 13, 13, 14, 14, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 19,
	19, 19, 19, 19, 157, 20, 21, 21, 22, 22,
	22, 26, 26, 26, 24, 24, 25, 25, 31, 31,
	30, 30, 32, 32, 32, 32, 107, 107, 107, 106,
	106, 34, 34, 35, 35, 36, 36, 37, 37, 37,
	49, 49, 85, 85, 87, 87, 38, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 113, 113, 112, 112,
	112, 111, 111, 43, 43, 43, 45, 44, 44, 44,
	44, 46, 46, 48, 48, 47, 47, 50, 50, 50,
	50, 51, 51, 33, 33, 33, 33, 33, 33, 33,
	94, 94, 53, 53, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 63, 63, 63, 63, 63, 63,
	54, 54, 54, 54, 54, 54, 54, 29, 29, 64,
	64, 64, 70, 65, 65, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 61, 61, 61, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
	60, 60, 60, 60, 60, 60, 158, 158, 62, 62,
	62, 62, 27, 27, 27, 27, 27, 116, 116, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 74, 74, 28, 28, 72, 72, 73, 75,
	75, 71, 71, 71, 56, 56, 56, 56, 56, 56,
	56, 56, 58, 58, 58, 76, 76, 77, 77, 78,
	78, 79, 79, 80, 81, 81, 81, 82, 82, 82,
	82, 83, 83, 83, 55, 55, 55, 55, 55, 55,
	84, 84, 84, 84, 88, 88, 66, 66, 68, 68,
	67, 69, 89, 89, 91, 92, 92, 95, 95, 96,
	96, 93, 93, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 98, 98, 98, 99, 99, 100,
	100, 100, 101, 101, 104, 104, 105, 105, 109, 109,
	110, 110, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 154, 155, 114,
	115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 6, 1, 1, 1, 3, 0, 4, 5,
	3, 1, 2, 1, 1, 1, 2, 8, 4, 6,
	4, 4, 1, 3, 3, 8, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 4, 5, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	2, 4, 2, 2, 2, 2, 3, 2, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -152, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -154, 7,
	197, 52, -153, 210, -78, 14, -22, 5, -20, -157,
	-20, -20, -20, -20, -141, 52, -100, 118, 69, 116,
	122, -104, 55, -103, 203, 147, 141, 168, 160, 158,
	161, 187, 64, 127, 156, 152, 150, 26, 173, 208,
	151, 145, 146, 172, 31, 205, 33, 135, 171, 167,
	170, 144, 166, 37, 186, 163, 153, 17, 130, 133,
	123, 137, 207, 149, 134, 129, 36, 177, 143, 164,
	136, 154, 155, 169, 142, 165, 138, 178, 209, 162,
	159, 139, 140, 182, 183, 184, 185, 206, 157, 179,
	-93, 118, 120, 116, 116, 117, 118, 116, -47, -109,
	55, -103, 118, 116, 105, 161, 111, 180, 117, 31,
	137, 116, 181, 140, 182, 183, 184, 185, 55, -109,
	-114, -114, -114, -114, -114, -2, -82, 16, 15, -5,
	-3, -154, 6, 19, 20, -26, 38, 39, -21, -93,
	-35, -36, -37, -38, -49, -70, -154, -47, 10, -42,
	-47, -90, -89, 187, 161, 186, -91, -71, -104, -109,
	55, -103, -142, -138, 55, 117, -47, 197, -96, 121,
	116, -47, -47, -95, 121, 55, -95, -47, 108, -47,
	55, 29, 189, 55, 137, 116, 138, 118, -115, -154,
	-105, -104, -102, 70, 21, 23, 175, 73, 105, 15,
	74, 104, 198, 111, 46, 190, 191, 188, 189, 180,
	28, 9, 24, 125, 20, 98, 113, 77, 78, 128,
	22, 126, 68, 18, 49, 10, 12, 13, 121, 120,
	89, 117, 44, 7, 107, 25, 86, 40, 27, 42,
	87, 16, 192, 193, 30, 202, 132, 100, 47, 34,
	71, 66, 50, 69, 14, 45, 88, 114, 197, 43,
	6, 201, 29, 124, 41, 116, 181, 76, 119, 67,
	5, 122, 8, 48, 51, 194, 195, 196, 32, 75,
	11, -115, -115, -115, -115, -115, 50, -115, -155, 54,
	-83, 18, 30, -33, -52, 71, -57, 28, 22, -56,
	-53, -71, -69, -70, 105, 106, 94, 95, 102, 72,
	107, -61, -59, -60, -62, 57, 56, 65, 58, 59,
	60, 61, 66, 67, 68, -104, -109, -67, -154, 42,
	43, 198, 199, 202, 200, 74, 32, 188, 196, 195,
	194, 192, 193, 190, 191, 121, 189, 100, 197, -79,
	-80, -33, -78, -2, -20, 34, -24, 20, 63, -48,
	25, -47, 29, 53, -43, -45, -44, -46, 40, 44,
	46, 41, 42, 43, 47, -113, 21, -35, -2, -154,
	-112, 133, -111, 21, -109, 57, -47, -156, 53, 10,
	51, -108, -105, 57, 53, 29, 79, 108, 54, 53,
	-118, -121, -123, -122, -119, -120, 158, 159, 105, 162,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	127, 154, 155, 156, 157, 141, 142, 143, 144, 145,
	146, 147, 149, 150, 151, 152, 153, 55, -115, 118,
	-47, 71, -47, -115, 119, -47, 22, 50, -47, -110,
	-109, -102, -115, -115, -115, -115, -115, -115, -115, -115,
	-47, 8, 89, 70, 69, 86, 53, 17, -33, -54,
	89, 71, 87, 88, 73, 91, 90, 101, 94, 95,
	96, 97, 98, 99, 100, 92, 93, 104, 79, 80,
	81, 82, 83, 84, 85, -94, -154, -70, -154, 109,
	110, -57, -57, -57, -57, -57, -57, -57, -154, 108,
	-65, -33, -154, -154, -154, -154, -154, -154, -154, -74,
	-33, -154, -158, -154, -158, -158, -158, -158, -158, -158,
	-158, -154, -154, -154, -154, 53, -81, 23, 24, -82,
	-155, -26, -58, -104, 58, 61, -25, 41, -86, 133,
	-47, -89, -36, -37, -37, -36, -37, 40, 40, 40,
	45, 40, 45, 40, -44, -109, -155, -155, -2, -50,
	48, 120, 49, -154, -111, -86, -35, -47, -114, -91,
	-33, -105, -110, -102, -143, -144, -145, -105, 57, 58,
	-138, -139, -146, 123, 122, -140, 117, 27, -134, 66,
	71, -130, 178, -124, 52, -124, -124, -124, -124, -128,
	161, -128, -128, -128, 52, -124, -124, -124, -132, 52,
	-132, -132, -133, 52, -133, -101, 51, -47, 22, -97,
	114, -151, 112, 175, 161, 64, 28, 113, 14, 198,
	133, 209, 55, 134, -47, -47, -115, 36, -33, -33,
	-63, 66, 71, 67, 68, -33, -33, -57, -64, -67,
	-70, 62, 89, 87, 88, 73, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -116, 55, 57, 55, -56, -56, -104, -31, 20,
	-30, -32, 96, -33, -109, -105, 53, -155, -30, -30,
	-33, -33, -30, -24, -72, -73, 75, -104, -155, -30,
	-31, -30, -30, -80, -83, -92, 18, 10, 32, 32,
	-30, -55, 29, 32, -2, -154, -154, -51, 11, -40,
	-39, 50, 51, -41, 50, -39, 40, 40, -155, 117,
	117, 117, -87, -104, -51, -51, 108, 53, -145, 79,
	52, 27, -140, 55, 55, -125, 28, 66, -131, 179,
	58, -128, -128, -129, 104, 29, -129, -129, -129, -137,
	57, 58, 58, 50, -104, -115, -114, -98, -99, 119,
	21, 117, 27, 133, -115, 37, 66, 67, 68, -64,
	-57, -57, -57, -29, 128, 70, -155, -155, -30, 53,
	-107, -106, 21, -104, 57, 108, -154, -33, -155, -155,
	53, 51, 21, -155, -30, -75, -73, 77, -33, -155,
	-155, -155, -155, -155, -47, -34, 10, -88, 50, -89,
	-66, -68, -67, -154, -2, -84, -104, -87, -78, -33,
	-33, 52, -33, -154, -154, -154, -155, 53, -78, -105,
	-144, -145, -148, -147, -104, 55, -127, 50, 57, 58,
	59, 66, 188, 54, -129, -129, 55, 55, 105, 54,
	53, 53, 54, 53, -47, -47, -114, -104, -29, 70,
	-57, -57, -155, -32, -106, 96, -110, -31, -117, 105,
	158, 127, 156, 152, 172, 163, 177, 154, 178, -116,
	-117, 203, -78, 78, -33, 76, -51, -35, 26, -88,
	53, -155, -155, -155, 53, 108, -155, -82, -85, -104,
	-85, -85, -85, -112, -104, -82, 54, 53, -124, -135,
	175, 8, 57, 58, 58, -115, 25, -57, 108, -155,
	-155, -124, -124, -124, -133, -124, 146, -124, 146, -155,
	-155, -154, -28, 201, -33, -76, 12, 27, -68, 32,
	-2, -154, -104, -104, 53, 54, -155, -155, -155, -50,
	-147, -136, 123, 27, 122, 188, 54, 54, -154, 96,
	-128, 55, -57, -155, 57, -77, 13, 15, 8, -66,
	-2, 108, -104, -126, 64, 27, 27, -149, -150, 133,
	-27, 89, 206, -33, -65, -89, -155, -104, 57, -155,
	53, -104, -155, 204, 47, 207, -150, 32, 37, 205,
	208, 135, 37, 136, 206, -154, 207, -57, 132, 208,
	-155, -155,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 419, 0, 194,
	194, 194, 194, 194, 0, 479, 461, 0, 0, 0,
	0, 0, 188, 649, 649, 649, 649, 649, 0, 28,
	29, 647, 1, 3, 427, 0, 0, 198, 201, 196,
	461, 0, 0, 0, 46, 0, 0, 637, 0, 459,
	480, 481, 484, 485, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	0, 0, 462, 0, 457, 0, 457, 0, 164, 265,
	488, 489, 637, 0, 0, 0, 0, 650, 650, 650,
	650, 650, 650, 180, 182, 183, 184, 185, 650, 187,
	189, 190, 191, 192, 193, 22, 431, 0, 0, 419,
	24, 0, 194, 199, 200, 204, 202, 203, 195, 0,
	0, 223, 225, 226, 227, 246, 0, 248, 0, 0,
	35, 0, 40, -2, 586, -2, 452, 0, 401, 0,
	-2, -2, 0, 52, 0, 0, 650, 0, 0, 0,
	0, 650, 0, 0, 0, 0, 0, 163, 0, 165,
	650, 650, 650, 650, 650, 650, 650, 650, 174, 651,
	652, 486, 487, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 175, 176, 177, 178, 179, 0, 186, 23, 648,
	18, 0, 0, 428, 273, 0, 278, 280, 0, 315,
	316, 317, 318, 319, 0, 0, 0, 0, 0, 0,
	0, 342, 343, 344, 345, 404, 405, 406, 407, 408,
	409, 410, 411, 282, 283, 401, 0, 451, 0, 0,
	0, 0, 0, 0, 0, 392, 0, 366, 366, 366,
	366, 366, 366, 366, 366, 0, 0, 0, 0, 420,
	421, 424, 427, 22, 201, 0, 206, 205, 197, 37,
	0, 264, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 256, 0, 0, 0, 0, 247, 0, 22, 0,
	267, 615, 249, 0, 251, 252, 37, 0, 0, 33,
	34, 649, 44, 45, 0, 42, 0, 0, 140, 0,
	105, 101, 57, 58, 94, 60, 94, 94, 94, 94,
	118, 118, 118, 118, 86, 87, 88, 89, 90, 0,
	73, 94, 94, 94, 77, 61, 62, 63, 64, 65,
	66, 67, 96, 96, 96, 98, 98, 482, 48, 0,
	50, 0, 0, 152, 0, 160, 458, 0, 650, 266,
	490, 491, 166, 167, 168, 169, 170, 171, 172, 173,
	181, 432, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 301,
	302, 303, 304, 305, 306, 279, 0, 293, 0, 0,
	0, 335, 336, 337, 338, 339, 340, 0, 208, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 204, 0,
	393, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	365, 0, 208, 0, 0, 0, 423, 425, 426, 431,
	25, 204, 0, 412, 0, 0, 0, 207, 0, 0,
	263, 271, 224, 242, 244, 0, 239, 254, 255, 257,
	0, 259, 0, 261, 262, 228, 229, 312, 22, 230,
	0, 0, 0, 0, 250, 271, 271, 36, 39, 453,
	454, 402, 0, -2, 51, 141, 143, 146, 147, 148,
	53, 54, 0, 0, 0, 0, 135, 136, 108, 106,
	0, 103, 102, 59, 0, 118, 118, 80, 81, 121,
	0, 121, 121, 121, 0, 74, 75, 76, 68, 0,
	69, 70, 71, 0, 72, 0, 0, 650, 460, 649,
	474, 153, 463, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 0, 159, 650, 162, 0, 274, 275,
	277, 294, 0, 296, 298, 429, 430, 284, 285, 309,
	310, 311, 0, 0, 0, 0, 307, 289, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 334, 377, 378, 0, 332, 333, 341, 0, 0,
	209, 210, 212, 216, 0, 402, 0, 450, 0, 0,
	0, 0, 0, 0, 399, 396, 0, 0, 367, 0,
	0, 0, 0, 422, 19, 0, 455, 456, 413, 414,
	221, 444, 0, 0, -2, 0, 0, 419, 0, 236,
	243, 0, 0, 237, 0, 238, 258, 260, -2, 0,
	0, 0, 0, 234, 419, 32, 0, 0, 144, 0,
	0, 131, 0, 133, 134, 114, 0, 107, 56, 104,
	0, 121, 121, 82, 0, 0, 83, 84, 85, 0,
	92, 0, 0, 0, 483, 49, 149, 0, 649, 475,
	476, 477, 478, 0, 161, 433, 295, 297, 299, 286,
	307, 290, 0, 287, 0, 0, 281, 346, 0, 0,
	213, 217, 0, 219, 220, 0, 208, 314, 349, 350,
	0, 0, 0, 0, 419, 0, 397, 0, 0, 357,
	368, 369, 370, 371, 20, 271, 0, 26, 0, 444,
	434, 446, 448, 0, 22, 0, 440, 0, 427, 272,
	240, 0, 245, 0, 0, 0, 248, 0, 427, 403,
	142, 145, 0, 137, 94, 132, 116, 0, 109, 110,
	111, 112, 113, 95, 78, 79, 122, 119, 120, 91,
	0, 0, 99, 0, 650, 150, 151, 0, 288, 0,
	308, 291, 347, 211, 218, 214, 0, 0, 0, 94,
	94, 382, 94, 98, 385, 94, 387, 94, 390, 0,
	0, 0, 394, 356, 400, 0, 415, 222, 0, 27,
	0, 449, -2, 0, 0, 0, 38, 30, 0, 232,
	0, 0, 0, 267, 235, 31, 130, 0, 139, 123,
	117, 0, 93, 0, 0, 47, 0, 292, 0, 348,
	351, 379, 118, 383, 384, 386, 388, 389, 391, 353,
	352, 0, 0, 0, 398, 417, 0, 0, 447, 0,
	-2, 0, 442, 441, 0, 241, 268, 269, 270, 231,
	138, 128, 0, 125, 127, 115, 97, 100, 0, 215,
	380, 381, 372, 355, 395, 21, 0, 0, 0, 437,
	22, 0, 233, 55, 0, 124, 126, 0, 155, 0,
	0, 0, 0, 418, 416, 445, -2, 443, 129, 154,
	0, 0, 354, 0, 0, 0, 156, 0, 373, 0,
	376, 0, 374, 0, 0, 0, 0, 0, 0, 375,
	157, 158,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 210,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:275
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:280
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:304
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:350
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:362
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:378
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:384
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:394
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:404
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:408
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:413
		{
			yyVAL.partitions = nil
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:417
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:423
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:453
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:462
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:475
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:487
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:491
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:497
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:671
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:681
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:685
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:712
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:720
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:743
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:764
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:777
		{
			yyVAL.optVal = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:781
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:786
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:790
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:795
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:799
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:803
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:808
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:812
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:817
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.colKeyOpt = colKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:829
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:838
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:848
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:858
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:866
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:886
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:897
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:905
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:935
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:941
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:945
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:950
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:955
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:959
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:965
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:981
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:985
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:991
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:997
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1005
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1010
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.statement = &OtherRead{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.statement = &OtherRead{}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &OtherRead{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1159
		{
			setAllowComments(yylex, true)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.bytes2 = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.str = UnionStr
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.str = UnionAllStr
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = UnionDistinctStr
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.str = SQLCacheStr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.str = DistinctStr
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = StraightJoinHint
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.selectExprs = nil
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1379
		{
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1385
		{
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.empty = struct{}{}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = JoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = JoinStr
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.str = JoinStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.str = StraightJoinStr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.str = LeftJoinStr
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = LeftJoinStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = RightJoinStr
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = RightJoinStr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.str = NaturalJoinStr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1458
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.indexHints = nil
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.expr = nil
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = IsNullStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = IsNotNullStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = IsTrueStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = IsNotTrueStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = IsFalseStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.str = IsNotFalseStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = EqualStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = LessThanStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = GreaterThanStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = LessEqualStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.str = GreaterEqualStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = NotEqualStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1789
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1819
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 354:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.str = BooleanModeStr
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.str = QueryExpansionStr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = string("")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.expr = &NullVal{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.exprs = nil
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.orderBy = nil
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.str = AscScr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.str = AscScr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.str = DescScr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.limit = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.str = ForUpdateStr
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = ShareModeStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2273
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.updateExprs = nil
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.byt = 0
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.byt = 1
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = IgnoreStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2636
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			decNesting(yylex)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2650
		{
			forceEOF(yylex)
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2655
		{
			forceEOF(yylex)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2659
		{
			forceEOF(yylex)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2663
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
