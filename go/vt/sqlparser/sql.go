//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 206,
	103, 327,
	-2, 323,
	-1, 207,
	103, 328,
	-2, 324,
	-1, 408,
	5, 21,
	-2, 278,
	-1, 426,
	103, 330,
	-2, 326,
	-1, 571,
	5, 22,
	-2, 161,
	-1, 595,
	5, 22,
	-2, 279,
	-1, 638,
	5, 21,
	-2, 281,
	-1, 711,
	5, 22,
	-2, 282,
}

const yyPrivate = 57344

const yyLast = 3803

var yyAct = [...]int{

	222, 666, 367, 525, 619, 207, 234, 201, 526, 492,
	643, 258, 309, 618, 307, 183, 487, 630, 677, 564,
	230, 39, 522, 557, 490, 456, 420, 224, 177, 56,
	425, 506, 281, 287, 83, 176, 233, 366, 3, 38,
	202, 231, 629, 295, 43, 192, 744, 739, 743, 732,
	64, 742, 176, 738, 622, 203, 731, 176, 660, 59,
	178, 179, 180, 181, 45, 46, 47, 48, 68, 63,
	212, 430, 217, 182, 413, 415, 574, 489, 209, 176,
	73, 176, 74, 74, 315, 176, 55, 480, 311, 481,
	323, 322, 76, 77, 78, 312, 535, 534, 533, 546,
	210, 379, 213, 79, 75, 548, 682, 324, 649, 221,
	598, 236, 356, 357, 568, 538, 365, 82, 303, 335,
	334, 344, 345, 337, 338, 339, 340, 341, 342, 343,
	336, 299, 480, 346, 481, 482, 339, 340, 341, 342,
	343, 336, 414, 575, 346, 336, 173, 346, 346, 36,
	437, 321, 480, 324, 481, 58, 483, 67, 65, 69,
	730, 302, 326, 322, 435, 61, 718, 335, 334, 344,
	345, 337, 338, 339, 340, 341, 342, 343, 336, 324,
	482, 346, 57, 463, 62, 71, 66, 60, 70, 440,
	547, 216, 545, 576, 227, 282, 325, 461, 462, 460,
	482, 483, 176, 624, 176, 507, 176, 581, 283, 507,
	323, 322, 727, 305, 176, 289, 728, 56, 36, 176,
	56, 483, 176, 394, 395, 176, 284, 324, 459, 314,
	688, 652, 655, 719, 285, 692, 306, 323, 322, 327,
	323, 322, 218, 434, 436, 433, 337, 338, 339, 340,
	341, 342, 343, 336, 324, 223, 346, 324, 358, 359,
	360, 361, 362, 363, 496, 323, 322, 323, 322, 368,
	219, 550, 551, 552, 626, 421, 377, 715, 223, 523,
	438, 301, 324, 40, 324, 397, 664, 223, 684, 223,
	256, 439, 56, 448, 450, 451, 590, 176, 449, 396,
	203, 411, 176, 562, 223, 176, 597, 223, 203, 301,
	56, 593, 423, 664, 54, 301, 424, 562, 176, 427,
	562, 176, 496, 223, 176, 56, 392, 36, 408, 722,
	417, 398, 445, 446, 443, 452, 453, 562, 539, 204,
	416, 457, 422, 18, 354, 189, 523, 318, 16, 455,
	404, 479, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 495, 497, 56,
	454, 381, 382, 383, 384, 385, 386, 387, 494, 368,
	632, 509, 501, 502, 56, 18, 18, 36, 419, 36,
	187, 725, 426, 484, 485, 250, 249, 251, 252, 253,
	254, 724, 282, 255, 72, 701, 511, 498, 406, 504,
	407, 637, 704, 203, 524, 56, 702, 705, 741, 527,
	706, 703, 672, 673, 515, 514, 700, 197, 737, 36,
	36, 537, 193, 194, 549, 444, 56, 56, 532, 520,
	288, 458, 536, 519, 735, 689, 541, 529, 499, 500,
	196, 293, 503, 286, 426, 225, 668, 671, 672, 673,
	669, 542, 670, 674, 428, 635, 510, 226, 512, 513,
	591, 317, 457, 676, 190, 191, 288, 518, 184, 695,
	185, 521, 554, 555, 556, 517, 553, 40, 560, 694,
	663, 259, 35, 421, 200, 679, 320, 42, 56, 571,
	572, 573, 310, 44, 577, 310, 570, 37, 1, 583,
	80, 584, 585, 586, 587, 675, 294, 582, 563, 429,
	50, 544, 176, 543, 432, 208, 516, 35, 530, 594,
	595, 596, 393, 188, 280, 693, 662, 580, 368, 579,
	376, 505, 235, 447, 56, 176, 246, 592, 243, 176,
	245, 604, 603, 244, 599, 399, 405, 668, 671, 672,
	673, 669, 612, 670, 674, 328, 561, 723, 228, 412,
	290, 56, 458, 607, 667, 665, 631, 400, 608, 610,
	611, 494, 578, 589, 204, 614, 617, 613, 659, 620,
	621, 625, 204, 717, 310, 310, 176, 403, 41, 616,
	623, 195, 636, 56, 56, 527, 56, 56, 56, 628,
	310, 56, 645, 646, 15, 642, 627, 14, 650, 651,
	647, 656, 657, 13, 654, 12, 11, 10, 9, 8,
	648, 7, 6, 5, 638, 4, 661, 186, 17, 2,
	176, 680, 0, 0, 683, 0, 685, 686, 0, 527,
	0, 0, 0, 0, 486, 56, 310, 426, 0, 0,
	691, 0, 604, 257, 0, 0, 0, 0, 0, 508,
	176, 176, 176, 176, 0, 0, 707, 681, 709, 690,
	35, 176, 711, 697, 176, 699, 203, 710, 56, 714,
	56, 0, 0, 174, 716, 0, 0, 204, 721, 0,
	531, 0, 633, 308, 720, 368, 308, 696, 0, 698,
	199, 0, 205, 0, 0, 199, 498, 0, 729, 726,
	0, 540, 310, 0, 355, 0, 0, 0, 198, 736,
	0, 0, 733, 734, 0, 0, 0, 199, 0, 199,
	740, 0, 0, 199, 0, 0, 633, 0, 364, 0,
	0, 369, 370, 371, 372, 373, 374, 375, 0, 378,
	380, 380, 380, 380, 380, 380, 380, 380, 388, 389,
	390, 391, 0, 0, 0, 0, 633, 633, 633, 633,
	211, 0, 409, 566, 0, 0, 0, 18, 0, 0,
	633, 0, 0, 0, 0, 0, 308, 0, 64, 0,
	0, 0, 214, 0, 215, 0, 0, 59, 220, 0,
	0, 308, 0, 0, 0, 609, 68, 63, 344, 345,
	337, 338, 339, 340, 341, 342, 343, 336, 0, 310,
	346, 36, 0, 0, 175, 335, 334, 344, 345, 337,
	338, 339, 340, 341, 342, 343, 336, 35, 0, 346,
	0, 0, 0, 0, 0, 0, 566, 0, 0, 310,
	199, 369, 297, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 199, 0, 0,
	199, 0, 0, 199, 0, 0, 0, 0, 640, 641,
	0, 644, 644, 644, 173, 0, 310, 0, 0, 528,
	0, 35, 0, 58, 0, 67, 65, 69, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 308, 0, 292, 0, 0, 0, 300,
	57, 0, 62, 71, 66, 60, 70, 304, 0, 0,
	310, 0, 313, 0, 0, 316, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 199, 0, 205, 0, 0,
	297, 0, 0, 418, 0, 205, 0, 418, 0, 0,
	204, 0, 0, 712, 0, 713, 199, 0, 0, 199,
	0, 0, 199, 0, 0, 0, 569, 335, 334, 344,
	345, 337, 338, 339, 340, 341, 342, 343, 336, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 565, 0, 0, 0,
	410, 59, 0, 0, 558, 600, 601, 602, 493, 418,
	68, 63, 0, 0, 493, 493, 0, 0, 493, 0,
	0, 431, 0, 0, 441, 0, 0, 442, 55, 0,
	567, 0, 493, 493, 493, 493, 0, 0, 0, 0,
	323, 322, 0, 0, 0, 0, 0, 493, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 634, 0, 0, 528, 0, 64, 639, 0,
	0, 0, 0, 0, 0, 0, 59, 308, 0, 0,
	0, 0, 0, 0, 0, 68, 63, 0, 173, 0,
	0, 653, 0, 0, 658, 0, 0, 58, 0, 67,
	65, 69, 0, 55, 0, 0, 678, 61, 0, 528,
	0, 35, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 62, 71, 66, 60,
	70, 0, 493, 0, 0, 0, 634, 634, 634, 634,
	0, 0, 0, 0, 0, 0, 0, 0, 493, 0,
	678, 18, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 49, 64, 51, 0, 0, 0, 53, 0, 0,
	0, 59, 58, 0, 67, 65, 69, 0, 0, 0,
	68, 63, 61, 199, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 55, 57,
	0, 62, 71, 66, 60, 70, 493, 0, 0, 0,
	0, 0, 418, 493, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 335, 334, 344, 345, 337,
	338, 339, 340, 341, 342, 343, 336, 0, 605, 346,
	0, 0, 606, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 67,
	65, 69, 0, 0, 0, 0, 0, 61, 199, 335,
	334, 344, 345, 337, 338, 339, 340, 341, 342, 343,
	336, 0, 0, 346, 57, 0, 62, 71, 66, 60,
	70, 0, 0, 0, 0, 0, 0, 0, 199, 199,
	199, 199, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 199, 205, 162, 149, 123, 164, 101, 115,
	172, 116, 117, 143, 89, 131, 64, 113, 0, 104,
	85, 110, 86, 102, 125, 59, 128, 100, 151, 134,
	170, 0, 138, 0, 68, 63, 0, 0, 127, 156,
	129, 148, 122, 144, 94, 137, 165, 114, 141, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 161, 112, 142, 84, 139, 0, 87, 90,
	171, 159, 107, 108, 0, 0, 0, 0, 0, 0,
	0, 126, 130, 145, 120, 0, 0, 0, 0, 0,
	0, 687, 0, 105, 0, 136, 0, 0, 0, 91,
	88, 124, 0, 0, 0, 93, 0, 106, 146, 0,
	157, 121, 173, 160, 119, 118, 163, 166, 155, 103,
	111, 58, 109, 67, 65, 69, 99, 158, 152, 153,
	154, 61, 0, 97, 98, 95, 96, 132, 133, 167,
	168, 169, 147, 92, 0, 0, 150, 135, 57, 0,
	62, 71, 66, 60, 70, 162, 149, 123, 164, 101,
	115, 172, 116, 117, 143, 89, 131, 64, 113, 0,
	104, 85, 110, 86, 102, 125, 59, 128, 100, 151,
	134, 170, 0, 138, 0, 68, 63, 0, 0, 127,
	156, 129, 148, 122, 144, 94, 137, 165, 114, 141,
	36, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 161, 112, 142, 84, 139, 0, 87,
	90, 171, 159, 107, 108, 0, 0, 0, 0, 0,
	0, 0, 126, 130, 145, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 136, 0, 0, 0,
	91, 88, 124, 0, 0, 0, 93, 0, 106, 146,
	0, 157, 121, 173, 160, 119, 118, 163, 166, 155,
	103, 111, 58, 109, 67, 65, 69, 99, 158, 152,
	153, 154, 61, 0, 97, 98, 95, 96, 132, 133,
	167, 168, 169, 147, 92, 0, 0, 150, 135, 57,
	0, 62, 71, 66, 60, 70, 162, 149, 123, 164,
	101, 115, 172, 116, 117, 143, 89, 131, 64, 113,
	0, 104, 85, 110, 86, 102, 125, 59, 128, 100,
	151, 134, 170, 0, 138, 0, 68, 63, 0, 0,
	127, 156, 129, 148, 122, 144, 94, 137, 165, 114,
	141, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 161, 112, 142, 84, 139, 0,
	87, 90, 171, 159, 107, 108, 0, 0, 0, 0,
	0, 0, 0, 126, 130, 145, 120, 0, 0, 0,
	0, 0, 0, 615, 0, 105, 0, 136, 0, 0,
	0, 91, 88, 124, 0, 0, 0, 93, 0, 106,
	146, 0, 157, 121, 173, 160, 119, 118, 163, 166,
	155, 103, 111, 58, 109, 67, 65, 69, 99, 158,
	152, 153, 154, 61, 0, 97, 98, 95, 96, 132,
	133, 167, 168, 169, 147, 92, 0, 0, 150, 135,
	57, 0, 62, 71, 66, 60, 70, 162, 149, 123,
	164, 101, 115, 172, 116, 117, 143, 89, 131, 64,
	113, 0, 104, 85, 110, 86, 102, 125, 59, 128,
	100, 151, 134, 170, 0, 138, 0, 68, 63, 0,
	0, 127, 156, 129, 148, 122, 144, 94, 137, 165,
	114, 141, 0, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 161, 112, 142, 84, 139,
	0, 87, 90, 171, 159, 107, 108, 0, 0, 0,
	0, 0, 0, 0, 126, 130, 145, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 136, 0,
	0, 0, 91, 88, 124, 0, 0, 0, 93, 0,
	106, 146, 0, 157, 121, 173, 160, 119, 118, 163,
	166, 155, 103, 111, 58, 109, 67, 65, 69, 99,
	158, 152, 153, 154, 61, 0, 97, 98, 95, 96,
	132, 133, 167, 168, 169, 147, 92, 0, 0, 150,
	135, 57, 0, 62, 71, 66, 60, 70, 162, 149,
	123, 164, 101, 115, 172, 116, 117, 143, 89, 131,
	64, 113, 0, 104, 85, 110, 86, 102, 125, 59,
	128, 100, 151, 134, 170, 0, 138, 0, 68, 63,
	0, 0, 127, 156, 129, 148, 122, 144, 94, 137,
	165, 114, 141, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 161, 112, 142, 84,
	139, 0, 87, 90, 171, 159, 107, 108, 0, 0,
	0, 0, 0, 0, 0, 126, 130, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 136,
	0, 0, 0, 91, 88, 124, 0, 0, 0, 93,
	0, 106, 146, 0, 157, 121, 173, 160, 119, 118,
	163, 166, 155, 103, 111, 58, 109, 67, 65, 69,
	99, 158, 152, 153, 154, 61, 0, 97, 98, 95,
	96, 132, 133, 167, 168, 169, 147, 92, 0, 0,
	150, 135, 57, 0, 62, 71, 66, 60, 70, 162,
	149, 123, 164, 101, 115, 172, 116, 117, 143, 89,
	131, 64, 113, 0, 104, 85, 110, 86, 102, 125,
	59, 128, 100, 151, 134, 170, 0, 138, 0, 68,
	63, 0, 0, 127, 156, 129, 148, 122, 144, 94,
	137, 165, 114, 141, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 161, 112, 142,
	84, 139, 0, 87, 90, 171, 159, 107, 108, 0,
	0, 0, 0, 0, 0, 0, 126, 130, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	136, 0, 0, 0, 91, 88, 124, 0, 0, 0,
	93, 0, 106, 146, 0, 157, 121, 173, 160, 119,
	118, 163, 166, 155, 103, 111, 58, 109, 67, 65,
	69, 99, 158, 152, 153, 154, 61, 0, 97, 98,
	95, 96, 132, 133, 167, 168, 169, 147, 92, 0,
	0, 150, 135, 57, 0, 62, 71, 66, 60, 70,
	162, 149, 123, 164, 101, 115, 172, 116, 117, 143,
	89, 131, 64, 113, 0, 104, 85, 110, 86, 102,
	125, 59, 128, 100, 151, 134, 170, 0, 138, 0,
	68, 63, 0, 0, 127, 156, 129, 148, 122, 144,
	94, 137, 165, 114, 141, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 161, 112,
	142, 84, 139, 0, 87, 90, 171, 159, 107, 108,
	0, 0, 0, 0, 0, 0, 0, 126, 130, 145,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 136, 0, 0, 0, 91, 88, 124, 0, 0,
	0, 93, 0, 106, 146, 0, 157, 121, 173, 160,
	119, 118, 163, 166, 155, 103, 111, 58, 109, 67,
	65, 69, 99, 158, 152, 153, 154, 61, 0, 97,
	98, 95, 96, 132, 133, 167, 168, 169, 147, 92,
	0, 0, 150, 135, 57, 0, 62, 71, 66, 60,
	70, 64, 0, 0, 488, 0, 232, 0, 0, 0,
	59, 0, 0, 0, 0, 267, 0, 0, 0, 68,
	63, 0, 0, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 36, 0, 0, 206, 250, 249,
	251, 252, 253, 254, 0, 0, 255, 247, 248, 0,
	0, 229, 241, 0, 266, 334, 344, 345, 337, 338,
	339, 340, 341, 342, 343, 336, 0, 0, 346, 0,
	0, 0, 0, 0, 238, 239, 491, 0, 0, 0,
	278, 0, 240, 0, 0, 237, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	276, 0, 0, 0, 0, 0, 58, 0, 67, 65,
	69, 0, 0, 0, 0, 0, 61, 0, 268, 277,
	274, 275, 272, 273, 271, 270, 269, 279, 262, 263,
	265, 0, 264, 57, 0, 62, 71, 66, 60, 70,
	64, 0, 0, 0, 0, 232, 0, 0, 0, 59,
	0, 0, 0, 0, 267, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 260, 261, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 0, 206, 250, 249, 251,
	252, 253, 254, 0, 0, 255, 247, 248, 0, 0,
	229, 241, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 239, 491, 0, 0, 0, 278,
	0, 240, 0, 0, 237, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 276,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 268, 277, 274,
	275, 272, 273, 271, 270, 269, 279, 262, 263, 265,
	0, 264, 57, 0, 62, 71, 66, 60, 70, 64,
	0, 0, 0, 0, 232, 0, 0, 0, 59, 0,
	0, 0, 0, 267, 0, 0, 0, 68, 63, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 223, 206, 250, 249, 251, 252,
	253, 254, 0, 0, 255, 247, 248, 0, 0, 229,
	241, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 278, 0,
	240, 0, 0, 237, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 276, 0,
	0, 0, 0, 0, 58, 0, 67, 65, 69, 0,
	0, 0, 0, 0, 61, 0, 268, 277, 274, 275,
	272, 273, 271, 270, 269, 279, 262, 263, 265, 18,
	264, 57, 0, 62, 71, 66, 60, 70, 0, 0,
	64, 0, 0, 0, 0, 232, 0, 0, 0, 59,
	0, 0, 0, 0, 267, 0, 0, 0, 68, 63,
	0, 0, 0, 0, 260, 261, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 0, 206, 250, 249, 251,
	252, 253, 254, 0, 0, 255, 247, 248, 0, 0,
	229, 241, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 239, 0, 0, 0, 0, 278,
	0, 240, 0, 0, 237, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 276,
	0, 0, 0, 0, 0, 58, 0, 67, 65, 69,
	0, 0, 0, 0, 0, 61, 0, 268, 277, 274,
	275, 272, 273, 271, 270, 269, 279, 262, 263, 265,
	0, 264, 57, 0, 62, 71, 66, 60, 70, 64,
	0, 0, 0, 0, 232, 0, 0, 0, 59, 0,
	0, 0, 0, 267, 0, 0, 0, 68, 63, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 206, 250, 249, 251, 252,
	253, 254, 0, 0, 255, 247, 248, 0, 0, 229,
	241, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 278, 0,
	240, 0, 0, 237, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 276, 0,
	0, 0, 0, 0, 58, 0, 67, 65, 69, 0,
	0, 0, 0, 0, 61, 0, 268, 277, 274, 275,
	272, 273, 271, 270, 269, 279, 262, 263, 265, 64,
	264, 57, 0, 62, 71, 66, 60, 70, 59, 0,
	0, 0, 0, 267, 0, 0, 0, 68, 63, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 206, 250, 249, 251, 252,
	253, 254, 0, 0, 255, 247, 248, 0, 0, 0,
	241, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 278, 0,
	240, 0, 0, 237, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 276, 0,
	0, 0, 0, 0, 58, 0, 67, 65, 69, 0,
	0, 0, 0, 0, 61, 0, 268, 277, 274, 275,
	272, 273, 271, 270, 269, 279, 262, 263, 265, 64,
	264, 57, 0, 62, 71, 66, 60, 70, 59, 0,
	0, 0, 0, 267, 0, 0, 0, 68, 63, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 206, 250, 249, 251, 252,
	253, 254, 0, 0, 255, 0, 64, 0, 0, 0,
	241, 0, 266, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 63, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 278, 0,
	240, 0, 55, 237, 242, 401, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 276, 0,
	0, 0, 0, 0, 58, 0, 67, 65, 69, 0,
	0, 0, 0, 0, 61, 0, 268, 277, 274, 275,
	272, 273, 271, 270, 269, 279, 262, 263, 265, 0,
	264, 57, 0, 62, 71, 66, 60, 70, 0, 64,
	0, 0, 173, 296, 0, 0, 0, 0, 59, 0,
	0, 58, 0, 67, 65, 69, 0, 68, 63, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 64, 298, 57, 0,
	62, 71, 66, 60, 70, 59, 0, 0, 0, 0,
	0, 0, 64, 0, 68, 63, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 36,
	68, 63, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	567, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 64, 0, 58, 0, 67, 65, 69, 0,
	0, 59, 0, 0, 61, 0, 0, 0, 0, 0,
	68, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 173, 62, 71, 66, 60, 70, 175, 0,
	298, 58, 0, 67, 65, 69, 64, 0, 173, 0,
	0, 61, 0, 0, 291, 59, 0, 58, 0, 67,
	65, 69, 0, 0, 68, 63, 0, 61, 57, 0,
	62, 71, 66, 60, 70, 0, 0, 0, 0, 0,
	0, 0, 175, 64, 57, 0, 62, 71, 66, 60,
	70, 0, 59, 0, 0, 0, 0, 64, 173, 0,
	0, 68, 63, 0, 0, 0, 59, 58, 0, 67,
	65, 69, 0, 0, 0, 68, 63, 61, 0, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 57, 0, 62, 71, 66, 60,
	70, 64, 173, 0, 0, 0, 0, 0, 0, 0,
	59, 58, 0, 67, 65, 69, 0, 0, 0, 68,
	63, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 57, 173,
	62, 71, 66, 60, 70, 0, 0, 0, 58, 0,
	67, 65, 69, 173, 0, 0, 0, 0, 61, 0,
	0, 0, 58, 0, 67, 65, 69, 0, 0, 0,
	0, 0, 61, 0, 0, 57, 0, 62, 71, 66,
	60, 70, 18, 19, 20, 21, 0, 0, 0, 57,
	0, 62, 71, 66, 60, 70, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 22, 58, 0, 67, 65,
	69, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 36, 0, 0, 0,
	0, 0, 330, 57, 333, 62, 71, 66, 60, 70,
	347, 348, 349, 350, 351, 352, 353, 0, 331, 332,
	329, 335, 334, 344, 345, 337, 338, 339, 340, 341,
	342, 343, 336, 0, 0, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 24, 26, 25, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 30, 31, 0, 0,
	32, 33, 34,
}
var yyPact = [...]int{

	3676, -1000, -117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 473, 492, -1000, -1000,
	-1000, -1000, -1000, 1070, -33, -7, -19, -8, 2245, 3584,
	-1000, -1000, -1000, -1000, -1000, 337, -1000, -1000, -1000, 462,
	465, 339, 455, 395, -1000, -32, 3584, 484, 3540, -38,
	-12, 3584, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -9, 3584, -1000, 3584, -44, 189, -44, 3584,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 203, 437, 2942, 2942, 473, -1000, 337, -1000,
	-1000, -1000, 420, -1000, -1000, 154, 3489, 422, 3342, 28,
	3584, 258, -1000, 86, -1000, 15, -1000, -1000, 3584, 146,
	183, 1490, -18, 3584, 1490, -30, 3584, 449, 298, 3584,
	-1000, -1000, -1000, -1000, -1000, 488, 66, 145, -1000, 2942,
	3665, -1000, 277, -1000, 8, -1000, -1000, 3202, 3202, 3202,
	3202, 3202, 3202, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 277, 13, -1000, 2803,
	277, 277, 277, 277, 277, 277, 2942, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	275, -1000, 200, 462, 203, 395, 3249, 310, -1000, -1000,
	379, 3584, -1000, 3540, 27, -1000, 3445, -1000, -1000, 2094,
	482, 3540, 2942, 1943, 1490, 442, -47, -1000, -1000, -1000,
	-1000, -1000, 3584, 136, -1000, 3584, -1000, -1000, 3584, 1490,
	-1000, 400, 2942, 2942, 231, 2942, 2942, 71, 3072, 168,
	114, 3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202, 3202,
	3202, 3202, 3202, 3202, 3202, 3202, 34, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 337, 341, 341, 47, 47,
	47, 47, 47, 33, 2384, 1943, 203, 271, 175, 2803,
	2523, 2523, 2942, 2942, 2523, 456, 138, 175, 3526, -1000,
	203, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2523, 2523,
	2523, 2523, 2942, -1000, -1000, -1000, 437, -1000, 456, 467,
	-1000, 412, 408, 2523, -1000, 297, 3540, 277, -1000, 1165,
	-1000, 264, -1000, -14, -15, -16, -1000, -1000, -1000, -1000,
	473, 2942, -1000, 175, -1000, 12, -1000, -1000, -1000, 289,
	3526, 1490, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 398, 71, 97, -1000, -1000, 209,
	-1000, -1000, 175, 175, -1000, 1213, -1000, -1000, -1000, -1000,
	168, 3202, 3202, 3202, 901, 1213, 1169, 730, 2368, 47,
	44, 44, 48, 48, 48, 48, 48, 156, 156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 203, 2523, 266,
	-1000, -1000, 995, 11, 277, -1000, 2942, -1000, 203, 252,
	252, 25, 172, 252, 2523, 134, -1000, 2942, 203, -1000,
	252, 203, 252, 252, -1000, -1000, 3584, -1000, -1000, -1000,
	-1000, 286, -1000, 444, 230, 260, -1000, -1000, 2662, 203,
	255, 7, 473, 277, 277, 277, 462, 175, 1792, 3584,
	-1000, -1000, -1000, 3584, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 901, 1213, 749, -1000, 3202, 3202,
	-1000, 252, 2523, -1000, -1000, 3395, -1000, -1000, 1641, 2523,
	175, -1000, -1000, -1000, 34, 34, 34, -95, 269, 129,
	-1000, 2942, 202, -1000, -1000, -1000, -1000, -1000, -1000, 482,
	3379, 438, -1000, 277, -1000, -1000, 380, 3526, 3526, 462,
	3526, 3526, 3526, -1000, -1000, 1490, -1000, -1000, -1000, 3202,
	1213, 1213, -1000, -1000, -1000, -1000, 5, 203, 203, 99,
	203, 203, 277, -89, -1000, 175, 2942, 478, 262, 417,
	-1000, -1000, -1000, 452, 781, 487, -1000, 277, -1000, 337,
	3, -1000, -1000, 237, -1000, 237, 237, -1000, 1213, 1339,
	-1000, -1000, -1000, 174, -1000, 416, -1000, -1000, 3202, 203,
	180, 175, 476, 464, 3379, 3379, 3379, 3379, -1000, 387,
	366, -1000, 377, 373, 381, 3584, -1000, 235, 781, 3540,
	260, 203, 3526, -1000, 3526, -1000, -1000, -1000, 226, 34,
	81, -1000, -1000, -1000, 2942, 2942, 417, 280, 518, -1000,
	-1000, -1000, -1000, 362, -1000, 352, -1000, -1000, -1000, -1000,
	258, -1000, -1000, -1000, 79, 160, -1000, 203, 10, -104,
	175, 213, 2942, 2942, -1000, -1000, -1000, 415, 203, -1000,
	392, -98, -107, 175, 175, 34, -1000, -1000, 382, -1000,
	-1000, -101, -105, -108, -1000,
}
var yyPgo = [...]int{

	0, 639, 37, 348, 638, 637, 635, 633, 632, 631,
	629, 628, 627, 626, 625, 623, 617, 614, 44, 601,
	598, 33, 597, 45, 593, 588, 23, 77, 16, 24,
	9, 583, 18, 42, 17, 576, 575, 1, 574, 728,
	570, 380, 569, 10, 26, 568, 41, 565, 556, 36,
	20, 555, 553, 550, 548, 546, 543, 25, 2, 3,
	11, 8, 542, 111, 6, 541, 31, 540, 539, 536,
	535, 21, 534, 32, 532, 15, 27, 528, 22, 7,
	40, 526, 404, 191, 525, 524, 523, 521, 520, 519,
	88, 5, 290, 12, 19, 518, 663, 30, 43, 516,
	515, 28, 14, 4, 13, 510, 508, 507, 491, 0,
	503, 101,
}
var yyR1 = [...]int{

	0, 106, 107, 107, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 7, 8, 9,
	10, 10, 10, 10, 11, 11, 11, 11, 12, 13,
	13, 13, 14, 105, 105, 105, 15, 16, 17, 17,
	17, 17, 17, 110, 18, 19, 19, 20, 20, 20,
	23, 23, 23, 21, 21, 22, 22, 28, 28, 27,
	27, 29, 29, 29, 29, 95, 95, 95, 94, 94,
	31, 31, 32, 32, 33, 33, 34, 34, 34, 41,
	35, 35, 35, 35, 100, 100, 99, 99, 99, 98,
	98, 36, 36, 36, 36, 37, 37, 37, 37, 38,
	38, 40, 40, 39, 39, 42, 42, 42, 42, 43,
	43, 44, 44, 30, 30, 30, 30, 30, 30, 46,
	46, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 56, 56, 56, 56, 56, 56, 47,
	47, 47, 47, 47, 47, 47, 26, 26, 57, 57,
	57, 63, 58, 58, 103, 103, 103, 103, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 54, 54, 54,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 53,
	53, 53, 53, 53, 53, 53, 53, 111, 111, 55,
	55, 55, 55, 24, 24, 24, 24, 24, 104, 104,
	104, 104, 104, 104, 104, 104, 67, 67, 25, 25,
	65, 65, 66, 68, 68, 64, 64, 64, 49, 49,
	49, 49, 49, 49, 49, 51, 51, 51, 69, 69,
	70, 70, 71, 71, 72, 72, 73, 74, 74, 74,
	75, 75, 75, 75, 76, 76, 76, 48, 48, 48,
	48, 48, 48, 77, 77, 77, 77, 78, 78, 59,
	59, 61, 61, 60, 62, 79, 79, 80, 81, 81,
	83, 83, 84, 84, 82, 82, 85, 85, 85, 85,
	85, 85, 85, 86, 86, 86, 87, 87, 88, 88,
	88, 89, 89, 92, 92, 93, 93, 96, 96, 97,
	97, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 108, 109, 101, 102,
	102, 102,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 8, 7, 3,
	5, 8, 4, 6, 6, 7, 7, 4, 5, 4,
	5, 5, 3, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 1,
	1, 1, 3, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 2,
	4, 5, 7, 2, 4, 6, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -106, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, 7,
	8, 9, 29, 106, 107, 109, 108, 110, 119, 47,
	120, 121, 124, 125, 126, -108, 50, -107, 156, -71,
	14, -20, 5, -18, -110, -18, -18, -18, -18, 111,
	-88, 113, 65, 117, -92, 53, -91, 149, 122, 26,
	154, 132, 151, 36, 17, 125, 153, 124, 35, 126,
	155, 152, -82, 113, 115, 111, 111, 112, 113, 111,
	-105, 53, -90, -91, 66, 21, 23, 69, 101, 15,
	70, 100, 144, 106, 45, 136, 137, 134, 135, 127,
	28, 9, 24, 120, 20, 94, 108, 73, 74, 123,
	22, 121, 64, 18, 48, 10, 12, 13, 116, 115,
	85, 112, 43, 7, 102, 25, 82, 39, 27, 41,
	83, 16, 138, 139, 30, 148, 96, 46, 33, 67,
	62, 49, 65, 14, 44, 84, 109, 143, 42, 6,
	147, 29, 129, 130, 131, 119, 40, 111, 128, 72,
	114, 63, 5, 117, 8, 47, 118, 140, 141, 142,
	31, 71, 11, 113, -96, 53, -91, -101, -101, -101,
	-101, -101, -2, -75, 16, 15, -5, -3, -108, 6,
	19, 20, -23, 37, 38, -19, -82, -41, -39, -96,
	10, -79, -80, -64, -92, -96, 53, -91, -84, 116,
	112, -39, 143, 111, -39, -39, -83, 116, 53, -83,
	-39, -101, -109, 52, -76, 18, 30, -30, -45, 67,
	-50, -46, 22, -49, -64, -62, -63, 101, 90, 91,
	98, 68, 102, -54, -52, -53, -55, 63, 64, 55,
	54, 56, 57, 58, 59, 62, -92, -96, -60, -108,
	41, 42, 144, 145, 148, 146, 70, 31, 134, 142,
	141, 140, 138, 139, 136, 137, 116, 135, 96, 143,
	-72, -73, -30, -71, -2, -18, 33, -21, 20, 61,
	-40, 25, -39, 29, -99, -98, 21, -96, 55, 103,
	-39, 51, 75, 103, -39, 67, 53, -102, -108, -93,
	-92, -90, 113, -39, -102, 114, -39, 22, 49, -39,
	8, 85, 66, 65, 82, 51, 17, -30, -47, 85,
	67, 83, 84, 69, 87, 86, 97, 90, 91, 92,
	93, 94, 95, 96, 88, 89, 100, 75, 76, 77,
	78, 79, 80, 81, -63, -108, 104, 105, -50, -50,
	-50, -50, -50, -50, -108, 103, -2, -58, -30, -108,
	-108, -108, -108, -108, -108, -108, -67, -30, -108, -111,
	-108, -111, -111, -111, -111, -111, -111, -111, -108, -108,
	-108, -108, 51, -74, 23, 24, -75, -109, -23, -51,
	-92, 56, 59, -22, 40, -48, 29, 31, -2, -108,
	-39, -79, -42, 47, 115, 48, -98, -97, -96, -90,
	-44, 11, -80, -30, -93, -97, -90, -102, 22, -89,
	118, -39, -85, 109, 107, 28, 108, 14, 144, 155,
	53, -39, -39, -102, 35, -30, -30, -56, 62, 67,
	63, 64, -30, -30, -46, -50, -57, -60, -63, 60,
	85, 83, 84, 69, -50, -50, -50, -50, -50, -50,
	-50, -50, -50, -50, -50, -50, -50, -50, -50, -103,
	53, 55, 101, 122, -49, -49, -92, -28, 20, -27,
	-29, 92, -30, -96, -93, -109, 51, -109, -2, -27,
	-27, -30, -30, -27, -21, -65, -66, 71, -92, -109,
	-27, -28, -27, -27, -73, -76, -81, 18, 10, 31,
	31, -27, -78, 49, -79, -59, -61, -60, -108, -2,
	-77, -92, -44, 112, 112, 112, -71, -30, 103, 49,
	-92, -102, -101, -86, -87, 114, 21, 112, 27, 36,
	62, 63, 64, -57, -50, -50, -50, -26, 123, 66,
	-109, -27, 51, -95, -94, 21, -92, 55, 103, -108,
	-30, -109, -109, -109, 51, 118, 21, -109, -27, -68,
	-66, 73, -30, -109, -109, -109, -109, -109, -39, -31,
	10, 26, -78, 51, -109, -109, -109, 51, 103, -71,
	-108, -108, -108, -75, -93, -39, -39, -101, -26, 66,
	-50, -50, -109, -29, -94, 92, -97, -28, -104, -103,
	-104, -104, 149, -71, 74, -30, 72, -44, -32, -33,
	-34, -35, -41, -63, -108, 27, -61, 31, -2, -108,
	-92, -92, -75, -43, -92, -43, -43, -102, -50, 103,
	-109, -109, 132, -108, -103, 133, -109, -109, -108, -25,
	147, -30, -69, 12, 51, -36, -37, -38, 39, 43,
	45, 40, 41, 42, 46, -100, 21, -32, -108, 8,
	-59, -2, 103, -109, 51, -109, -109, 92, 56, 29,
	-50, -109, 55, -70, 13, 15, -33, -34, -33, -34,
	39, 39, 39, 44, 39, 44, 39, -37, -96, -109,
	-79, -109, -92, -92, -109, 51, -103, -24, 85, 152,
	-30, -58, 49, 49, 39, 39, -103, 133, 56, -109,
	150, 46, 153, -30, -30, 29, -109, 36, 151, 154,
	-103, 36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 262, 0, 53, 53,
	53, 53, 53, 318, 304, 0, 0, 0, 0, 0,
	438, 438, 438, 438, 438, 0, 436, 1, 3, 270,
	0, 0, 57, 60, 55, 304, 0, 0, 0, 302,
	0, 434, 0, 319, 320, 323, 324, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 435, 0, 0, 305, 0, 300, 0, 300, 0,
	438, 43, 44, 45, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 434, 47, 327, 328, 48, 49, 50,
	51, 52, 21, 274, 0, 0, 262, 23, 0, 53,
	58, 59, 63, 61, 62, 54, 0, 0, 96, 113,
	0, 29, 295, 0, 245, 0, -2, -2, 0, 0,
	0, 439, 0, 0, 439, 0, 0, 0, 0, 0,
	42, 46, 22, 437, 17, 0, 0, 271, 123, 0,
	128, 131, 0, 168, 169, 170, 171, 0, 0, 0,
	0, 0, 0, 193, 194, 195, 196, 129, 130, 248,
	249, 250, 251, 252, 253, 254, 245, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 217, 217,
	217, 217, 217, 217, 217, 217, 0, 0, 0, 0,
	263, 264, 267, 270, 21, 60, 0, 65, 64, 56,
	0, 0, 112, 0, 115, 97, 0, 99, 100, 0,
	121, 0, 0, 0, 439, 0, 321, 32, 440, 441,
	325, 326, 0, 0, 37, 0, 39, 301, 0, 439,
	275, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 150, 151,
	152, 153, 154, 155, 142, 0, 0, 0, 187, 188,
	189, 190, 191, 0, 67, 0, 21, 0, 162, 0,
	0, 0, 0, 0, 0, 63, 0, 237, 0, 209,
	0, 210, 211, 212, 213, 214, 215, 216, 0, 67,
	0, 0, 0, 266, 268, 269, 274, 24, 63, 0,
	255, 0, 0, 0, 66, 287, 0, 0, -2, 0,
	111, 121, 89, 0, 0, 0, 98, 114, 329, 330,
	262, 0, 296, 297, 246, 0, -2, 30, 303, 0,
	0, 439, 438, 313, 306, 307, 308, 309, 310, 311,
	312, 38, 40, 41, 0, 124, 125, 127, 143, 0,
	145, 147, 272, 273, 132, 133, 134, 158, 159, 160,
	0, 0, 0, 0, 156, 138, 0, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 186,
	164, 165, 166, 167, 184, 185, 192, 0, 0, 68,
	69, 71, 75, 0, 246, 161, 0, 293, 21, 0,
	0, 0, 0, 0, 0, 243, 240, 0, 0, 218,
	0, 0, 0, 0, 265, 18, 0, 298, 299, 256,
	257, 80, 25, 0, 287, 277, 289, 291, 0, 21,
	0, 283, 262, 0, 0, 0, 270, 122, 0, 0,
	322, 33, 34, 0, 438, 314, 315, 316, 317, 276,
	144, 146, 148, 135, 156, 139, 0, 136, 0, 0,
	197, 0, 0, 72, 76, 0, 78, 79, 0, 67,
	163, -2, 200, 201, 0, 0, 0, 0, 262, 0,
	241, 0, 0, 208, 219, 220, 221, 222, 19, 121,
	0, 0, 26, 0, 292, -2, 0, 0, 0, 270,
	0, 0, 0, 28, 247, 439, 35, 36, 137, 0,
	157, 140, 198, 70, 77, 73, 0, 0, 0, 228,
	0, 0, 0, 238, 207, 244, 0, 258, 81, 82,
	84, 85, 86, 94, 0, 0, 290, 0, -2, 0,
	285, 284, 27, 0, 119, 0, 0, 31, 141, 0,
	199, 202, 229, 0, 233, 0, 203, 204, 0, 0,
	0, 242, 260, 0, 0, 0, 0, 0, 101, 0,
	0, 104, 0, 0, 0, 0, 95, 0, 0, 0,
	280, 21, 0, 116, 0, 117, 118, 74, 0, 0,
	223, 206, 239, 20, 0, 0, 83, 90, 0, 93,
	102, 103, 105, 0, 107, 0, 109, 110, 87, 88,
	288, -2, 286, 120, 230, 0, 234, 0, 0, 0,
	261, 259, 0, 0, 106, 108, 231, 0, 0, 205,
	0, 0, 0, 91, 92, 0, 235, 224, 0, 227,
	232, 225, 0, 0, 226,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:214
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:219
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:220
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:224
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:242
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:250
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:254
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:261
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:267
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:271
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:277
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:281
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:288
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:298
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:310
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:322
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:328
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:332
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:337
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:341
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:347
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:351
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:356
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:367
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:373
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:381
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:386
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:396
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &Other{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:437
		{
			yyVAL.statement = &Other{}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:441
		{
			yyVAL.statement = &Other{}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &Other{}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:449
		{
			yyVAL.statement = &Other{}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			setAllowComments(yylex, true)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:458
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:464
		{
			yyVAL.bytes2 = nil
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:468
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.str = UnionStr
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:478
		{
			yyVAL.str = UnionAllStr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:482
		{
			yyVAL.str = UnionDistinctStr
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:487
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:491
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.str = SQLCacheStr
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:500
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:504
		{
			yyVAL.str = DistinctStr
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:509
		{
			yyVAL.str = ""
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.str = StraightJoinHint
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:518
		{
			yyVAL.selectExprs = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:532
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:542
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:546
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:550
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:555
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:570
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:575
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:579
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:589
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:603
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:607
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:613
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:626
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:630
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:634
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:638
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:643
		{
			yyVAL.empty = struct{}{}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.empty = struct{}{}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:669
		{
			yyVAL.str = JoinStr
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:673
		{
			yyVAL.str = JoinStr
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:677
		{
			yyVAL.str = JoinStr
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.str = StraightJoinStr
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:687
		{
			yyVAL.str = LeftJoinStr
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:691
		{
			yyVAL.str = LeftJoinStr
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:695
		{
			yyVAL.str = RightJoinStr
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:699
		{
			yyVAL.str = RightJoinStr
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:705
		{
			yyVAL.str = NaturalJoinStr
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:709
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:733
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.indexHints = nil
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:742
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:746
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:750
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:756
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:760
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.expr = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:775
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:783
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:787
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:791
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:795
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:819
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:823
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:827
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:831
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:835
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:839
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:843
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:847
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:851
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.str = IsNullStr
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.str = IsNotNullStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.str = IsTrueStr
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.str = IsNotTrueStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:877
		{
			yyVAL.str = IsFalseStr
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.str = IsNotFalseStr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.str = EqualStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.str = LessThanStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = GreaterThanStr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.str = LessEqualStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.str = GreaterEqualStr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:907
		{
			yyVAL.str = NotEqualStr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.expr = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:920
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:926
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:934
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:950
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:986
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:990
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:994
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 205:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = ""
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = BooleanModeStr
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.str = QueryExpansionStr
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.expr = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.str = string("")
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.expr = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.expr = &NullVal{}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.exprs = nil
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.expr = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.orderBy = nil
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.str = AscScr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = AscScr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = DescScr
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.limit = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = ForUpdateStr
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = ShareModeStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1503
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.updateExprs = nil
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.byt = 0
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.byt = 1
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.str = IgnoreStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			decNesting(yylex)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1821
		{
			forceEOF(yylex)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1826
		{
			forceEOF(yylex)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			forceEOF(yylex)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
