//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	renamePairs       []*RenamePair
	renamePair        *RenamePair
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const BOOL = 57501
const CHARACTER = 57502
const VARBINARY = 57503
const NCHAR = 57504
const TEXT = 57505
const TINYTEXT = 57506
const MEDIUMTEXT = 57507
const LONGTEXT = 57508
const BLOB = 57509
const TINYBLOB = 57510
const MEDIUMBLOB = 57511
const LONGBLOB = 57512
const JSON = 57513
const ENUM = 57514
const GEOMETRY = 57515
const POINT = 57516
const LINESTRING = 57517
const POLYGON = 57518
const GEOMETRYCOLLECTION = 57519
const MULTIPOINT = 57520
const MULTILINESTRING = 57521
const MULTIPOLYGON = 57522
const NULLX = 57523
const AUTO_INCREMENT = 57524
const APPROXNUM = 57525
const SIGNED = 57526
const UNSIGNED = 57527
const ZEROFILL = 57528
const DATABASES = 57529
const TABLES = 57530
const VITESS_KEYSPACES = 57531
const VITESS_SHARDS = 57532
const VITESS_TABLETS = 57533
const VSCHEMA_TABLES = 57534
const EXTENDED = 57535
const FULL = 57536
const PROCESSLIST = 57537
const NAMES = 57538
const CHARSET = 57539
const GLOBAL = 57540
const SESSION = 57541
const ISOLATION = 57542
const LEVEL = 57543
const READ = 57544
const WRITE = 57545
const ONLY = 57546
const REPEATABLE = 57547
const COMMITTED = 57548
const UNCOMMITTED = 57549
const SERIALIZABLE = 57550
const CURRENT_TIMESTAMP = 57551
const DATABASE = 57552
const CURRENT_DATE = 57553
const CURRENT_TIME = 57554
const LOCALTIME = 57555
const LOCALTIMESTAMP = 57556
const UTC_DATE = 57557
const UTC_TIME = 57558
const UTC_TIMESTAMP = 57559
const REPLACE = 57560
const CONVERT = 57561
const CAST = 57562
const SUBSTR = 57563
const SUBSTRING = 57564
const GROUP_CONCAT = 57565
const SEPARATOR = 57566
const MATCH = 57567
const AGAINST = 57568
const BOOLEAN = 57569
const LANGUAGE = 57570
const WITH = 57571
const QUERY = 57572
const EXPANSION = 57573
const UNUSED = 57574

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 266,
	151, 266,
	-2, 256,
	-1, 238,
	109, 590,
	-2, 586,
	-1, 239,
	109, 591,
	-2, 587,
	-1, 308,
	80, 749,
	-2, 58,
	-1, 309,
	80, 710,
	-2, 59,
	-1, 314,
	80, 694,
	-2, 552,
	-1, 316,
	80, 731,
	-2, 554,
	-1, 577,
	52, 41,
	54, 41,
	-2, 43,
	-1, 711,
	109, 593,
	-2, 589,
	-1, 916,
	5, 28,
	-2, 398,
	-1, 941,
	5, 27,
	-2, 527,
	-1, 1165,
	5, 28,
	-2, 528,
	-1, 1209,
	5, 27,
	-2, 530,
	-1, 1271,
	5, 28,
	-2, 531,
}

const yyPrivate = 57344

const yyLast = 10896

var yyAct = [...]int{

	269, 47, 1262, 857, 648, 773, 524, 1073, 1101, 1171,
	1002, 268, 809, 523, 3, 243, 791, 1074, 569, 813,
	217, 1220, 1070, 571, 774, 960, 837, 1047, 908, 812,
	851, 1005, 736, 746, 743, 993, 823, 587, 211, 949,
	944, 762, 713, 457, 463, 423, 586, 313, 47, 847,
	410, 307, 442, 770, 573, 294, 222, 558, 477, 444,
	469, 216, 299, 241, 890, 226, 304, 302, 52, 1291,
	1281, 1289, 1269, 53, 1287, 858, 1280, 1065, 1159, 414,
	293, 874, 212, 213, 214, 215, 437, 1229, 1096, 1097,
	805, 806, 538, 230, 745, 873, 1095, 295, 1244, 490,
	489, 499, 500, 492, 493, 494, 495, 496, 497, 498,
	491, 1268, 804, 501, 57, 181, 177, 178, 179, 588,
	452, 589, 878, 310, 1183, 984, 678, 245, 1107, 1108,
	1109, 872, 968, 679, 830, 967, 1112, 1110, 969, 59,
	60, 61, 62, 63, 838, 1198, 1148, 1146, 210, 439,
	1288, 441, 425, 448, 449, 490, 489, 499, 500, 492,
	493, 494, 495, 496, 497, 498, 491, 239, 1286, 501,
	1263, 1026, 1221, 771, 426, 417, 438, 440, 175, 869,
	866, 867, 174, 865, 175, 1223, 792, 794, 647, 298,
	657, 959, 958, 957, 443, 443, 443, 443, 76, 443,
	1227, 909, 186, 412, 420, 186, 443, 825, 876, 879,
	189, 825, 825, 176, 513, 514, 1023, 1249, 1168, 1034,
	924, 902, 1025, 47, 180, 685, 481, 432, 810, 186,
	186, 76, 501, 682, 885, 186, 466, 76, 510, 411,
	978, 512, 491, 871, 1254, 501, 474, 445, 446, 447,
	1030, 450, 1222, 476, 1245, 1116, 1126, 436, 454, 1067,
	793, 947, 476, 1048, 763, 870, 838, 590, 522, 651,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 416,
	537, 539, 539, 539, 539, 539, 539, 539, 539, 547,
	548, 549, 550, 1050, 465, 1013, 1111, 1228, 1226, 824,
	570, 982, 875, 824, 824, 1117, 720, 1267, 822, 820,
	1257, 455, 821, 886, 1024, 877, 1022, 763, 50, 931,
	718, 719, 717, 1011, 471, 1052, 1029, 1056, 716, 1051,
	173, 1049, 428, 429, 430, 920, 1054, 919, 467, 1273,
	1189, 827, 186, 1188, 186, 1053, 828, 737, 300, 738,
	186, 418, 419, 475, 474, 232, 1013, 186, 1055, 1057,
	997, 76, 76, 76, 76, 310, 76, 996, 511, 578,
	476, 985, 584, 76, 540, 541, 542, 543, 544, 545,
	546, 921, 1274, 183, 1011, 1255, 1252, 1012, 899, 900,
	901, 292, 1017, 1014, 1007, 1008, 1015, 1010, 1009, 1205,
	76, 1186, 494, 495, 496, 497, 498, 491, 1134, 1016,
	501, 303, 994, 1104, 443, 1019, 413, 1103, 688, 689,
	1277, 456, 443, 703, 705, 706, 979, 298, 704, 475,
	474, 1213, 1260, 1213, 456, 443, 443, 443, 443, 443,
	443, 443, 443, 970, 475, 474, 476, 860, 1012, 443,
	443, 1069, 739, 1017, 1014, 1007, 1008, 1015, 1010, 1009,
	186, 476, 1213, 1214, 475, 474, 646, 186, 186, 186,
	1016, 1180, 1179, 76, 655, 267, 1006, 1092, 456, 76,
	666, 476, 663, 831, 1167, 456, 690, 667, 668, 669,
	670, 671, 672, 673, 674, 456, 714, 664, 684, 1123,
	1122, 675, 676, 1119, 1120, 1233, 74, 1119, 1118, 475,
	474, 914, 456, 47, 492, 493, 494, 495, 496, 497,
	498, 491, 662, 421, 501, 424, 476, 526, 652, 711,
	650, 431, 645, 692, 683, 555, 456, 707, 433, 312,
	750, 710, 748, 456, 1232, 415, 709, 755, 758, 581,
	475, 474, 23, 764, 597, 596, 299, 299, 299, 299,
	299, 434, 427, 411, 21, 1071, 1113, 476, 945, 945,
	775, 570, 1037, 795, 460, 464, 939, 740, 741, 940,
	299, 76, 748, 767, 750, 946, 23, 186, 186, 76,
	582, 482, 580, 186, 1163, 760, 186, 555, 799, 50,
	186, 1125, 76, 76, 76, 76, 76, 76, 76, 76,
	54, 776, 715, 1208, 779, 914, 76, 76, 946, 23,
	221, 186, 751, 752, 788, 525, 1121, 555, 759, 796,
	926, 797, 802, 50, 536, 801, 76, 839, 840, 841,
	186, 553, 766, 310, 768, 769, 76, 923, 817, 914,
	577, 443, 554, 443, 777, 778, 814, 780, 971, 798,
	945, 580, 443, 803, 914, 583, 50, 649, 686, 312,
	312, 312, 312, 925, 312, 853, 555, 656, 50, 1193,
	832, 312, 852, 298, 298, 298, 298, 298, 1086, 76,
	922, 849, 850, 560, 563, 564, 565, 561, 298, 562,
	566, 974, 880, 861, 848, 863, 843, 298, 479, 950,
	951, 903, 223, 842, 883, 65, 855, 1106, 1071, 998,
	186, 953, 660, 186, 186, 186, 186, 186, 453, 714,
	698, 891, 785, 711, 892, 186, 1285, 786, 186, 236,
	956, 783, 186, 955, 782, 710, 784, 186, 186, 781,
	1279, 76, 258, 257, 260, 261, 262, 263, 1033, 50,
	904, 259, 264, 787, 76, 564, 565, 887, 653, 654,
	1284, 942, 943, 897, 658, 227, 228, 661, 691, 470,
	896, 312, 458, 989, 941, 595, 435, 592, 981, 1259,
	1258, 1161, 898, 468, 459, 1206, 975, 1194, 862, 299,
	659, 568, 680, 930, 499, 500, 492, 493, 494, 495,
	496, 497, 498, 491, 470, 186, 501, 963, 76, 954,
	76, 699, 224, 225, 186, 186, 895, 218, 186, 76,
	700, 701, 972, 1238, 894, 747, 749, 219, 962, 913,
	964, 965, 54, 1237, 1196, 715, 946, 472, 1246, 1184,
	988, 765, 990, 991, 992, 928, 681, 443, 976, 977,
	986, 987, 56, 560, 563, 564, 565, 561, 58, 562,
	566, 579, 814, 950, 951, 51, 1, 859, 1001, 995,
	868, 790, 525, 443, 1261, 753, 754, 1219, 1100, 312,
	819, 811, 409, 64, 1253, 818, 1225, 312, 1018, 1182,
	826, 772, 983, 1004, 829, 1105, 1256, 980, 602, 1000,
	312, 312, 312, 312, 312, 312, 312, 312, 1003, 600,
	601, 599, 604, 603, 312, 312, 298, 598, 197, 800,
	305, 567, 591, 854, 1041, 1027, 473, 66, 1040, 1021,
	1020, 1076, 864, 47, 694, 1072, 808, 1028, 1046, 1059,
	677, 884, 1075, 1058, 479, 775, 1077, 312, 1088, 1089,
	1090, 775, 1039, 76, 451, 199, 186, 509, 893, 1080,
	1082, 966, 711, 311, 1078, 687, 462, 1236, 1195, 929,
	76, 535, 761, 244, 1062, 702, 515, 516, 517, 518,
	519, 520, 521, 1099, 256, 253, 856, 742, 255, 1114,
	1115, 1098, 1066, 254, 1094, 424, 881, 756, 756, 882,
	693, 938, 483, 756, 242, 234, 297, 551, 1081, 559,
	557, 556, 422, 76, 76, 952, 76, 948, 296, 1036,
	756, 814, 1158, 814, 1243, 697, 1093, 25, 299, 888,
	889, 55, 464, 229, 1127, 19, 18, 17, 20, 16,
	76, 911, 15, 186, 186, 912, 1137, 1129, 14, 312,
	1132, 186, 916, 917, 918, 29, 1157, 13, 12, 11,
	76, 927, 312, 10, 9, 8, 933, 1136, 934, 935,
	936, 937, 7, 1144, 6, 5, 4, 220, 22, 833,
	834, 835, 836, 2, 1039, 1162, 0, 0, 1173, 1174,
	1175, 0, 1170, 0, 915, 844, 845, 846, 0, 0,
	76, 76, 0, 0, 1178, 1176, 0, 0, 972, 932,
	0, 0, 0, 0, 0, 443, 312, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 1191, 312, 0, 76,
	0, 76, 76, 0, 0, 1185, 1192, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 312, 0, 0, 1076, 298, 186, 1210, 0, 1197,
	0, 0, 0, 0, 76, 1075, 0, 1190, 0, 0,
	1209, 1207, 0, 0, 0, 1003, 814, 76, 186, 1224,
	0, 0, 0, 1218, 76, 1235, 0, 0, 1230, 0,
	1231, 0, 76, 1234, 0, 186, 0, 0, 0, 1076,
	0, 47, 0, 0, 0, 0, 1247, 0, 0, 0,
	1075, 0, 0, 712, 1248, 1045, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 1251, 1035, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 1270, 0, 76, 0, 76, 76, 76, 186,
	76, 0, 775, 0, 0, 1275, 76, 0, 0, 0,
	0, 961, 1091, 0, 0, 0, 0, 0, 461, 1282,
	1283, 0, 1155, 456, 0, 0, 0, 1068, 312, 1290,
	0, 0, 76, 76, 76, 0, 0, 0, 0, 0,
	0, 0, 1083, 1084, 0, 0, 1085, 0, 0, 1087,
	0, 0, 0, 184, 0, 0, 209, 0, 0, 490,
	489, 499, 500, 492, 493, 494, 495, 496, 497, 498,
	491, 999, 312, 501, 312, 76, 76, 0, 233, 0,
	184, 184, 0, 0, 0, 0, 184, 1124, 76, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 312, 1140,
	0, 76, 0, 0, 0, 1152, 456, 0, 0, 1131,
	1149, 1150, 1151, 0, 0, 1154, 0, 0, 312, 0,
	0, 76, 0, 0, 0, 0, 1135, 0, 1164, 1165,
	1166, 0, 1169, 0, 0, 0, 0, 0, 456, 0,
	312, 0, 490, 489, 499, 500, 492, 493, 494, 495,
	496, 497, 498, 491, 0, 756, 501, 76, 1079, 961,
	0, 756, 0, 0, 0, 1160, 0, 0, 0, 0,
	0, 76, 525, 0, 490, 489, 499, 500, 492, 493,
	494, 495, 496, 497, 498, 491, 0, 312, 501, 312,
	1102, 0, 0, 184, 0, 184, 0, 0, 905, 906,
	907, 184, 0, 0, 0, 0, 0, 0, 184, 0,
	1204, 489, 499, 500, 492, 493, 494, 495, 496, 497,
	498, 491, 1128, 0, 501, 1215, 1216, 1217, 0, 0,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	0, 0, 1133, 195, 0, 23, 24, 48, 26, 27,
	312, 1239, 1240, 1241, 1242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 205, 0, 28,
	0, 0, 1141, 1142, 0, 1143, 0, 0, 1145, 0,
	1147, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	0, 0, 50, 0, 0, 1266, 0, 0, 0, 0,
	1271, 0, 1172, 0, 1172, 1172, 1172, 0, 1177, 0,
	0, 184, 0, 1276, 312, 0, 0, 190, 184, 575,
	184, 0, 0, 192, 0, 0, 1181, 0, 0, 0,
	198, 194, 0, 1264, 525, 0, 0, 0, 0, 0,
	312, 312, 312, 0, 1294, 1295, 0, 0, 0, 0,
	0, 30, 31, 33, 32, 35, 0, 196, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 43, 44, 0, 0, 45, 46, 34,
	0, 0, 0, 1211, 1212, 0, 0, 0, 191, 1043,
	1044, 38, 39, 0, 40, 41, 1102, 0, 0, 0,
	0, 0, 1060, 1061, 0, 1063, 1064, 0, 0, 1172,
	0, 0, 0, 0, 0, 193, 0, 201, 202, 203,
	204, 208, 0, 0, 0, 0, 207, 206, 0, 1250,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 184,
	0, 0, 0, 0, 184, 0, 0, 184, 0, 0,
	0, 665, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 756, 0, 0, 1272, 0, 0, 0, 0,
	0, 0, 184, 0, 49, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 485, 0, 488, 0, 0,
	0, 184, 0, 502, 503, 504, 505, 506, 507, 508,
	665, 486, 487, 484, 490, 489, 499, 500, 492, 493,
	494, 495, 496, 497, 498, 491, 0, 0, 501, 0,
	0, 0, 1139, 0, 490, 489, 499, 500, 492, 493,
	494, 495, 496, 497, 498, 491, 1153, 0, 501, 0,
	0, 233, 0, 0, 0, 0, 233, 233, 0, 0,
	757, 757, 233, 0, 0, 0, 757, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 233, 233, 233,
	0, 184, 0, 757, 184, 184, 184, 184, 184, 0,
	0, 0, 619, 0, 0, 0, 789, 0, 0, 184,
	0, 0, 0, 575, 0, 0, 0, 0, 184, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 489,
	499, 500, 492, 493, 494, 495, 496, 497, 498, 491,
	1042, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1199, 1200, 0, 1201, 1202, 1203, 0, 0,
	490, 489, 499, 500, 492, 493, 494, 495, 496, 497,
	498, 491, 0, 0, 501, 0, 0, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 910,
	0, 0, 0, 0, 0, 184, 184, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 490,
	489, 499, 500, 492, 493, 494, 495, 496, 497, 498,
	491, 0, 0, 501, 665, 0, 0, 0, 0, 633,
	634, 635, 636, 637, 638, 639, 233, 640, 641, 642,
	643, 644, 621, 622, 623, 624, 605, 606, 0, 0,
	608, 0, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 625, 626, 627, 628, 629, 630, 631, 632,
	490, 489, 499, 500, 492, 493, 494, 495, 496, 497,
	498, 491, 0, 233, 501, 0, 0, 0, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 1032, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 757, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 75,
	575, 815, 816, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 973, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 757, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 815, 816, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 50, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 1038, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	708, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 315, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 316, 314, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 585, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 315, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 316, 314, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	378, 397, 349, 380, 318, 377, 0, 322, 325, 407,
	395, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	363, 367, 383, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 374, 0, 0, 0, 326, 323,
	0, 361, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 306, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	315, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 316, 314, 309, 308,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 125, 0, 0, 744, 0, 240, 0,
	0, 0, 93, 0, 237, 0, 0, 107, 279, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 270, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 238, 258, 257, 260, 261, 262, 263, 0, 0,
	86, 259, 264, 265, 266, 0, 0, 235, 251, 0,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 231, 0, 0, 0, 290, 0, 250, 0,
	0, 246, 247, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 288,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 280, 289, 286, 287, 284, 285, 283, 282, 281,
	291, 272, 273, 274, 275, 277, 0, 276, 77, 0,
	108, 169, 133, 95, 160, 125, 0, 0, 0, 0,
	240, 0, 0, 0, 93, 0, 237, 0, 0, 107,
	279, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	270, 271, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 456, 238, 258, 257, 260, 261, 262, 263,
	0, 0, 86, 259, 264, 265, 266, 0, 0, 235,
	251, 0, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 0, 0, 0, 0, 290, 0,
	250, 0, 0, 246, 247, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 0, 276,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 0, 240, 0, 0, 0, 93, 0, 237, 0,
	0, 107, 279, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 270, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 238, 258, 257, 260, 261,
	262, 263, 0, 0, 86, 259, 264, 265, 266, 0,
	0, 235, 251, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 231, 0, 0, 0,
	290, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 288, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 280, 289, 286, 287, 284,
	285, 283, 282, 281, 291, 272, 273, 274, 275, 277,
	0, 276, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 807, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 235, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 288, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 280, 289, 286,
	287, 284, 285, 283, 282, 281, 291, 272, 273, 274,
	275, 277, 23, 276, 77, 0, 108, 169, 133, 95,
	160, 0, 0, 0, 125, 0, 0, 0, 0, 240,
	0, 0, 0, 93, 0, 237, 0, 0, 107, 279,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 270,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 238, 258, 257, 260, 261, 262, 263, 0,
	0, 86, 259, 264, 265, 266, 0, 0, 235, 251,
	0, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 0, 0, 0, 0, 290, 0, 250,
	0, 0, 246, 247, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	288, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 280, 289, 286, 287, 284, 285, 283, 282,
	281, 291, 272, 273, 274, 275, 277, 0, 276, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	0, 240, 0, 0, 0, 93, 0, 237, 0, 0,
	107, 279, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 270, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 238, 258, 257, 260, 261, 262,
	263, 0, 0, 86, 259, 264, 265, 266, 0, 0,
	235, 251, 0, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 0, 0, 0, 0, 290,
	0, 250, 0, 0, 246, 247, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 125,
	276, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 0, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 288, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 1293, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 280, 289, 286,
	287, 284, 285, 283, 282, 281, 291, 272, 273, 274,
	275, 277, 125, 276, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 0, 0, 0, 107, 279, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	238, 258, 257, 260, 261, 262, 263, 0, 0, 86,
	259, 264, 265, 266, 0, 0, 0, 251, 0, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 0, 0, 0, 0, 290, 0, 250, 0, 0,
	246, 247, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 288, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	280, 289, 286, 287, 284, 285, 283, 282, 281, 291,
	272, 273, 274, 275, 277, 125, 276, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 489,
	499, 500, 492, 493, 494, 495, 496, 497, 498, 491,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 478, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 480, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 475,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 169, 133, 95, 160, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 72, 0, 67, 0, 0, 0, 73, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	69, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 108, 169, 133,
	95, 160, 125, 0, 0, 0, 574, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 576, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 77, 0, 108, 169, 133, 95, 160,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 695, 0, 0, 696, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 169,
	133, 95, 160, 93, 0, 594, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 593, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	574, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 576, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	572, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 576, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 480, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	77, 0, 108, 169, 133, 95, 160, 552, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 169, 133, 95,
	160, 93, 0, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 77, 0, 108, 169, 133, 95, 160,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 169,
	133, 95, 160, 93, 0, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160,
}
var yyPact = [...]int{

	1499, -1000, -182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 827, 857, -1000, -1000, -1000, -1000, -1000, -1000, 662,
	7282, 61, 94, -3, 9977, 91, 1471, 10646, -1000, -6,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 613, -1000, -1000,
	-1000, -1000, -1000, 810, 821, 706, 802, 736, -1000, 5459,
	55, 8861, 9754, 4763, -1000, 507, 83, 10646, -156, 10200,
	51, 51, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 85, 10646, -1000, 10646, 50, 506, 50,
	50, 50, 10646, -1000, 118, -1000, -1000, -1000, -1000, 10646,
	505, 756, 30, 2803, 2803, 2803, 2803, 3, 2803, -91,
	677, -1000, -1000, -1000, -1000, 2803, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 440, 763, 6158, 6158,
	827, -1000, 613, -1000, -1000, -1000, 758, -1000, -1000, 260,
	836, -1000, 7059, 117, -1000, 6158, 1673, 625, -1000, -1000,
	625, -1000, -1000, 104, -1000, -1000, 6604, 6604, 6604, 6604,
	6604, 6604, 6604, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 625, -1000, 5926,
	625, 625, 625, 625, 625, 625, 625, 625, 6158, 625,
	625, 625, 625, 625, 625, 625, 625, 625, 625, 625,
	625, 625, 9531, 622, 652, -1000, -1000, -1000, 779, 7960,
	8638, 10646, 538, -1000, 611, 4518, -98, -1000, -1000, -1000,
	187, 8406, -1000, -1000, -1000, 755, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 500,
	-1000, 1812, 476, 2803, 67, 615, 474, 197, 472, 10646,
	10646, 2803, 623, -1000, 68, 10646, 777, 671, 10646, 466,
	426, -1000, 4273, -1000, 2803, 2803, 2803, 2803, 2803, 2803,
	2803, 2803, -1000, -1000, -1000, -1000, -1000, -1000, 2803, 2803,
	-1000, -79, -1000, 10646, -1000, -1000, -1000, -1000, 847, 143,
	480, 116, 614, -1000, 394, 810, 440, 736, 8183, 688,
	-1000, -1000, 10646, -1000, 6158, 6158, 356, -1000, 9307, -1000,
	-1000, 3293, 166, 6604, 265, 232, 6604, 6604, 6604, 6604,
	6604, 6604, 6604, 6604, 6604, 6604, 6604, 6604, 6604, 6604,
	6604, 291, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	396, -1000, 613, 695, 695, 127, 127, 127, 127, 127,
	127, 6827, 4995, 440, 488, 439, 5926, 5459, 5459, 6158,
	6158, 10423, 10423, 5459, 793, 188, 439, 10423, -1000, 440,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5459, 5459, 5459,
	5459, 31, 10646, -1000, 10423, 8861, 8861, 8861, 8861, 8861,
	-1000, 708, 703, -1000, 700, 691, 722, 10646, -1000, 481,
	7960, 137, 625, -1000, 9084, -1000, -1000, 31, 607, 8861,
	10646, -1000, -1000, 4028, 611, -98, 609, -1000, -106, -130,
	5691, 123, -1000, -1000, -1000, -1000, 2558, 183, 274, -68,
	-1000, -1000, -1000, 627, -1000, 627, 627, 627, 627, -33,
	-33, -33, -33, -1000, -1000, -1000, -1000, -1000, 660, 653,
	-1000, 627, 627, 627, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	651, 651, 651, 629, 629, 664, -1000, 10646, -171, 391,
	2803, 775, 2803, -1000, 66, -1000, 10646, 10646, -1000, -1000,
	10646, 2803, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 223, -1000, -1000,
	-1000, -1000, 730, 6158, 6158, 3783, 6158, -1000, -1000, -1000,
	763, -1000, 793, 815, -1000, 747, 740, 5459, -1000, -1000,
	166, 175, -1000, -1000, 321, -1000, -1000, -1000, -1000, 112,
	625, -1000, 1919, -1000, -1000, -1000, -1000, 265, 6604, 6604,
	6604, 64, 1919, 1858, 711, 1379, 127, 305, 305, 140,
	140, 140, 140, 140, 419, 419, -1000, -1000, -1000, 440,
	-1000, -1000, -1000, 440, 5459, 610, -1000, -1000, 6158, -1000,
	440, 457, 457, 283, 359, 636, -1000, 111, 619, 457,
	5459, 241, -1000, 6158, 440, -1000, 457, 440, 457, 457,
	546, 625, -1000, 606, -1000, 181, 652, 658, 670, 822,
	-1000, -1000, -1000, -1000, 702, -1000, 699, -1000, -1000, -1000,
	-1000, -1000, 73, 72, 71, 10200, -1000, 834, 8861, 573,
	-1000, -1000, 609, -98, -87, -1000, -1000, -1000, 439, -1000,
	387, 604, 2313, -1000, -1000, -1000, -1000, -1000, -1000, 648,
	768, 179, 184, 370, -1000, -1000, 759, -1000, 234, -78,
	-1000, -1000, 312, -33, -33, -1000, -1000, 123, 753, 123,
	123, 123, 354, 354, -1000, -1000, -1000, -1000, 308, -1000,
	-1000, -1000, 301, -1000, 668, 10200, 2803, -1000, 3538, -1000,
	-1000, -1000, -1000, -1000, -1000, 328, 267, 194, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29,
	-1000, -1000, 2803, -1000, 238, 10646, 10646, 720, 439, 439,
	110, -1000, -1000, 10646, -1000, -1000, -1000, -1000, 561, -1000,
	-1000, -1000, 3048, 5459, -1000, 64, 1919, 1809, -1000, 6604,
	6604, -1000, -1000, 457, 5459, 439, -1000, -1000, -1000, 157,
	291, 157, 6604, 6604, 3783, 6604, 6604, -166, 595, 180,
	-1000, 6158, 374, -1000, -1000, -1000, -1000, -1000, 667, 10423,
	625, -1000, 7737, 10200, 827, 10423, 6158, 6158, -1000, -1000,
	6158, 635, -1000, 6158, -1000, -1000, -1000, 625, 625, 625,
	423, -1000, 827, 573, -1000, -1000, -1000, -123, -135, -1000,
	-1000, 2558, -1000, 2558, 10200, -1000, 361, 357, -1000, -1000,
	666, 70, -1000, -1000, -1000, 511, 123, 123, -1000, 199,
	-1000, -1000, -1000, 453, -1000, 449, 572, 445, 10646, -1000,
	-1000, 547, -1000, 176, -1000, -1000, 10200, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10200,
	10646, -1000, -1000, -1000, -1000, -1000, 10200, -1000, -1000, 350,
	6158, -1000, -1000, -1000, 3538, -1000, 834, 8861, -1000, -1000,
	440, -1000, 6604, 1919, 1919, -1000, -1000, 440, 627, 627,
	-1000, 627, 629, -1000, 627, -15, 627, -16, 440, 440,
	1311, 1777, -1000, 1228, 1693, 625, -163, -1000, 439, 6158,
	-1000, 764, 514, 540, -1000, -1000, 5227, 440, 430, 109,
	423, 810, -1000, 439, 439, 439, 10200, 439, 10200, 10200,
	10200, 7514, 10200, 810, -1000, -1000, -1000, -1000, 2313, -1000,
	417, -1000, 627, -1000, -1000, -75, 840, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -33, 343,
	-33, 284, -1000, 281, 2803, 3538, 2558, -1000, 626, -1000,
	-1000, -1000, -1000, 771, -1000, 439, 831, 543, -1000, 1919,
	-1000, -1000, 89, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6604, 6604, -1000, 6604, 6604, 6604, 440, 341,
	439, 767, -1000, 625, -1000, -1000, 580, 10200, 10200, -1000,
	-1000, 408, -1000, 379, 379, 379, 137, -1000, -1000, 120,
	10200, -1000, 172, -1000, -139, 123, -1000, 123, 489, 450,
	-1000, -1000, -1000, 10200, 625, 829, 817, -1000, -1000, 1343,
	1343, 1343, 1343, 8, -1000, -1000, 839, -1000, 625, -1000,
	613, 108, -1000, 10200, -1000, -1000, -1000, -1000, -1000, 120,
	-1000, 330, 164, 327, -1000, 245, 762, -1000, 761, -1000,
	-1000, -1000, -1000, -1000, 377, 28, -1000, 6158, 6158, -1000,
	-1000, -1000, -1000, 440, 63, -175, 10423, 540, 440, 10200,
	-1000, -1000, -1000, 280, -1000, -1000, -1000, 324, -1000, -1000,
	615, 366, -1000, 10200, 439, 528, -1000, 712, -169, -178,
	515, -1000, -1000, -1000, -1000, -171, -1000, 28, 737, -1000,
	698, -1000, -1000, -1000, 24, -172, 5, -176, 625, -179,
	6381, -1000, 1343, 440, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1093, 13, 564, 1088, 1087, 1086, 1085, 1084, 1082,
	1075, 1074, 1073, 1069, 1068, 1067, 1065, 1058, 1052, 1049,
	1048, 1047, 1046, 1045, 114, 1043, 1041, 1037, 60, 1035,
	65, 1034, 1032, 28, 94, 34, 33, 355, 1029, 18,
	55, 97, 1028, 39, 1027, 1025, 67, 1022, 45, 1021,
	57, 1020, 1019, 348, 1017, 1016, 16, 40, 1015, 1014,
	1012, 1011, 63, 739, 1010, 1003, 998, 995, 994, 985,
	42, 6, 7, 11, 17, 983, 127, 15, 982, 41,
	981, 979, 978, 977, 73, 976, 44, 975, 20, 43,
	974, 9, 53, 25, 22, 5, 66, 46, 973, 24,
	51, 37, 971, 968, 330, 967, 965, 964, 951, 950,
	947, 152, 279, 942, 940, 939, 937, 47, 167, 475,
	59, 58, 936, 933, 932, 1278, 64, 54, 23, 931,
	38, 52, 32, 930, 928, 27, 927, 923, 922, 921,
	920, 919, 908, 483, 907, 906, 905, 26, 12, 904,
	902, 49, 30, 900, 899, 896, 35, 50, 895, 36,
	894, 893, 892, 891, 29, 19, 890, 8, 888, 21,
	887, 884, 2, 880, 10, 878, 3, 877, 4, 31,
	876, 875, 0, 311, 871, 868, 92,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 184,
	184, 46, 46, 92, 92, 10, 10, 10, 10, 97,
	97, 101, 101, 101, 102, 102, 102, 102, 133, 133,
	11, 11, 11, 11, 11, 11, 11, 178, 178, 177,
	176, 176, 175, 175, 174, 16, 161, 162, 162, 162,
	157, 136, 136, 136, 136, 139, 139, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 142,
	142, 142, 142, 142, 142, 142, 142, 156, 156, 143,
	143, 151, 151, 152, 152, 152, 149, 149, 150, 150,
	153, 153, 153, 144, 144, 144, 144, 144, 144, 144,
	146, 146, 154, 154, 147, 147, 147, 148, 148, 155,
	155, 155, 155, 155, 145, 145, 158, 158, 170, 170,
	169, 169, 169, 160, 160, 166, 166, 166, 166, 166,
	159, 159, 168, 168, 167, 163, 163, 163, 164, 164,
	164, 165, 165, 165, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 173, 171, 171, 172, 172, 13,
	47, 47, 48, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 109, 109, 106, 106, 107, 107,
	108, 108, 108, 110, 110, 110, 134, 134, 134, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	185, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 122, 122, 122, 121, 121, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 55, 55, 91, 91,
	93, 93, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 129, 129, 128, 128, 128, 127, 127, 49,
	49, 49, 51, 50, 50, 50, 50, 52, 52, 54,
	54, 53, 53, 56, 56, 56, 56, 57, 57, 37,
	37, 37, 37, 37, 37, 37, 105, 105, 59, 59,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	69, 69, 69, 69, 69, 69, 60, 60, 60, 60,
	60, 60, 60, 33, 33, 70, 70, 70, 76, 71,
	71, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 67, 67, 67, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	66, 66, 66, 66, 66, 66, 66, 66, 186, 186,
	68, 68, 68, 68, 31, 31, 31, 31, 31, 132,
	132, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 80, 80, 32, 32, 78, 78,
	79, 81, 81, 77, 77, 77, 62, 62, 62, 62,
	62, 62, 62, 62, 64, 64, 64, 82, 82, 83,
	83, 84, 84, 85, 85, 86, 87, 87, 87, 88,
	88, 88, 88, 89, 89, 89, 61, 61, 61, 61,
	61, 61, 90, 90, 90, 90, 94, 94, 72, 72,
	74, 74, 73, 75, 95, 95, 99, 96, 96, 100,
	100, 100, 98, 98, 98, 124, 124, 124, 103, 103,
	111, 111, 112, 112, 104, 104, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 114, 114, 114, 115,
	115, 116, 116, 116, 123, 123, 119, 119, 120, 120,
	125, 125, 126, 126, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 182, 183, 130, 131, 131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	1, 3, 3, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -182, 8, 235,
	53, -181, 250, -84, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -161, 53, -116, 121, 70, 148,
	227, 118, 119, 125, -119, 56, -118, 243, 152, 163,
	157, 184, 176, 174, 177, 214, 65, 155, 223, 136,
	172, 168, 166, 27, 189, 248, 167, 131, 130, 190,
	194, 215, 161, 162, 217, 188, 132, 32, 245, 34,
	144, 218, 192, 187, 183, 186, 160, 182, 38, 196,
	195, 197, 213, 179, 169, 18, 221, 139, 142, 191,
	193, 126, 146, 247, 219, 165, 143, 138, 222, 156,
	216, 225, 37, 201, 159, 129, 153, 150, 180, 145,
	170, 171, 185, 158, 181, 154, 147, 140, 224, 202,
	249, 178, 175, 151, 149, 206, 207, 208, 209, 246,
	220, 173, 203, -104, 121, 123, 119, 119, 120, 121,
	227, 118, 119, -53, -125, 56, -118, 121, 148, 119,
	106, 177, 112, 204, 120, 32, 146, -134, 119, -106,
	149, 206, 207, 208, 209, 56, 216, 215, 210, -125,
	154, -130, -130, -130, -130, -130, -2, -88, 17, 16,
	-5, -3, -182, 6, 20, 21, -30, 39, 40, -25,
	-36, 97, -37, -125, -58, 72, -63, 29, 56, -118,
	23, -62, -59, -77, -75, -76, 106, 107, 95, 96,
	103, 73, 108, -67, -65, -66, -68, 58, 57, 66,
	59, 60, 61, 62, 67, 68, 69, -119, -73, -182,
	43, 44, 236, 237, 238, 239, 242, 240, 75, 33,
	226, 234, 233, 232, 230, 231, 228, 229, 124, 227,
	101, 235, -104, -39, -40, -41, -42, -55, -76, -182,
	-53, 11, -46, -53, -96, -133, 154, -100, 216, 215,
	-120, -98, -119, -117, 214, 177, 213, 117, 71, 22,
	24, 199, 74, 106, 16, 75, 105, 236, 112, 47,
	228, 229, 226, 238, 239, 227, 204, 29, 10, 25,
	134, 21, 99, 114, 78, 79, 137, 23, 135, 69,
	19, 50, 11, 13, 14, 124, 123, 90, 120, 45,
	8, 108, 26, 87, 41, 28, 43, 88, 17, 230,
	231, 31, 242, 141, 101, 48, 35, 72, 67, 51,
	70, 15, 46, 89, 115, 235, 44, 118, 6, 241,
	30, 133, 42, 119, 205, 77, 122, 68, 5, 125,
	9, 49, 52, 232, 233, 234, 33, 76, 12, -162,
	-157, 56, 120, -53, 235, -119, -112, 124, -112, -112,
	119, -53, -47, -48, -53, -111, 124, 56, -111, -111,
	-111, -53, 109, -53, 56, 30, 227, 56, 146, 119,
	147, 121, -131, -182, -120, -131, -131, -131, 150, 151,
	-131, -107, 211, 51, -131, -183, 55, -89, 19, 31,
	-37, -125, -85, -86, -37, -84, -2, -24, 35, -28,
	21, 64, 11, -122, 71, 70, 87, -121, 22, -119,
	58, 109, -37, -60, 90, 72, 88, 89, 74, 92,
	91, 102, 95, 96, 97, 98, 99, 100, 101, 93,
	94, 105, 80, 81, 82, 83, 84, 85, 86, -105,
	-182, -76, -182, 110, 111, -63, -63, -63, -63, -63,
	-63, -63, -182, -2, -71, -37, -182, -182, -182, -182,
	-182, -182, -182, -182, -182, -80, -37, -182, -186, -182,
	-186, -186, -186, -186, -186, -186, -186, -182, -182, -182,
	-182, -54, 26, -53, 30, 54, -49, -51, -50, -52,
	41, 45, 47, 42, 43, 44, 48, -129, 22, -39,
	-182, -128, 142, -127, 22, -125, 58, -53, -46, -184,
	54, 11, 52, 54, -96, 154, -97, -101, 217, 219,
	80, -124, -119, 58, 29, 30, 55, 54, -136, -139,
	-141, -140, -142, -137, -138, 174, 175, 106, 178, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 30,
	136, 170, 171, 172, 173, 190, 191, 192, 193, 194,
	195, 196, 197, 157, 158, 159, 160, 161, 162, 163,
	165, 166, 167, 168, 169, 56, -131, 121, -178, 52,
	56, 72, 56, -53, -53, -131, 54, 122, -53, 23,
	51, -53, 56, 56, -126, -125, -117, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -109, 205, 212,
	-53, 9, 90, 54, 18, 109, 54, -87, 24, 25,
	-88, -183, -30, -64, -119, 59, 62, -29, 42, -53,
	-37, -37, -69, 67, 72, 68, 69, -121, 97, -126,
	-120, -117, -63, -70, -73, -76, 63, 90, 88, 89,
	74, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -132, 56, 58, 56,
	-62, -62, -119, -35, 21, -34, -36, -183, 54, -183,
	-2, -34, -34, -37, -37, -77, -119, -125, -77, -34,
	-28, -78, -79, 76, -77, -183, -34, -35, -34, -34,
	-92, 142, -53, -95, -99, -77, -40, -41, -41, -40,
	-41, 41, 41, 41, 46, 41, 46, 41, -50, -125,
	-183, -56, 49, 123, 50, -182, -127, -92, 52, -39,
	-53, -100, -97, 54, 218, 220, 221, 51, -37, -148,
	105, -163, -164, -165, -120, 58, 59, -157, -158, -166,
	126, 129, 125, -159, 120, 28, -153, 67, 72, -149,
	202, -143, 53, -143, -143, -143, -143, -147, 177, -147,
	-147, -147, 53, 53, -143, -143, -143, -151, 53, -151,
	-151, -152, 53, -152, -123, 52, -53, -176, 246, -177,
	56, -131, 23, -131, -113, 117, 114, 115, -173, 113,
	199, 177, 65, 29, 15, 236, 142, 249, 56, 143,
	-48, -53, -53, -131, -108, 11, 90, 37, -37, -37,
	-126, -86, -89, -103, 19, 11, 33, 33, -34, 67,
	68, 69, 109, -182, -70, -63, -63, -63, -33, 137,
	71, -183, -183, -34, 54, -37, -183, -183, -183, 54,
	52, 22, 54, 11, 109, 54, 11, -183, -34, -81,
	-79, 78, -37, -183, -183, -183, -183, -183, -61, 30,
	33, -2, -182, -182, -57, 54, 12, 80, -44, -43,
	51, 52, -45, 51, -43, 41, 41, 120, 120, 120,
	-93, -119, -57, -39, -57, -101, -102, 222, 219, 225,
	56, 54, -165, 80, 53, 28, -159, -159, 56, 56,
	-144, 29, 67, -150, 203, 59, -147, -147, -148, 30,
	-148, -148, -148, -156, 58, -156, 59, 59, 51, -119,
	-131, -175, -174, -120, -130, -179, 148, 127, 128, 131,
	130, 56, 120, 28, 126, 129, 142, 125, -179, 148,
	-114, -115, 122, 22, 120, 28, 142, -131, -110, 88,
	12, -125, -125, 38, 109, -53, -38, 11, 97, -120,
	-35, -33, 71, -63, -63, -183, -36, -135, 106, 174,
	136, 172, 168, 188, 179, 201, 170, 202, -132, -135,
	-63, -63, -120, -63, -63, 243, -84, 79, -37, 77,
	-94, 51, -95, -72, -74, -73, -182, -2, -90, -119,
	-93, -84, -99, -37, -37, -37, 53, -37, -182, -182,
	-182, -183, 54, -84, -57, 219, 223, 224, -164, -165,
	-168, -167, -119, 56, 56, -146, 51, 58, 59, 60,
	67, 226, 66, 55, -148, -148, 56, 106, 55, 54,
	55, 54, 55, 54, -53, 54, 80, -130, -119, -130,
	-119, -53, -130, -119, 58, -37, -57, -39, -183, -63,
	-183, -143, -143, -143, -152, -143, 162, -143, 162, -183,
	-183, -183, 54, 19, -183, 54, 19, -182, -32, 241,
	-37, 27, -94, 54, -183, -183, -183, 54, 109, -183,
	-88, -91, -119, -91, -91, -91, -128, -119, -88, 55,
	54, -143, -154, 199, 9, -147, 58, -147, 59, 59,
	-131, -174, -165, 53, 26, -82, 13, -147, 56, -63,
	-63, -63, -63, -63, -183, 58, 28, -74, 33, -2,
	-182, -119, -119, 54, 55, -183, -183, -183, -56, -170,
	-169, 52, 132, 65, -167, -155, 126, 28, 125, 226,
	-148, -148, 55, 55, -91, -182, -83, 14, 16, -183,
	-183, -183, -183, -31, 90, 246, 9, -72, -2, 109,
	-119, -169, 56, -160, 80, 58, -145, 65, 28, 28,
	55, -171, -172, 142, -37, -71, -183, 244, 48, 247,
	-95, -183, -119, 59, 58, -178, -183, 54, -119, 38,
	245, 248, -176, -172, 33, 38, 144, 246, 145, 247,
	-182, 248, -63, 141, -183, -183,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 511, 0, 280, 280, 280, 280, 280, 280, 0,
	581, 564, 0, 0, 0, 0, -2, 270, 271, 0,
	273, 274, 786, 786, 786, 786, 786, 0, 33, 34,
	784, 1, 3, 519, 0, 0, 284, 287, 282, 0,
	564, 0, 0, 0, 60, 0, 0, 773, 0, 774,
	562, 562, 562, 582, 583, 586, 587, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 0, 0, 565, 0, 560, 0, 560,
	560, 560, 0, 229, 351, 590, 591, 773, 774, 0,
	0, 0, 0, 787, 787, 787, 787, 0, 787, 258,
	247, 249, 250, 251, 252, 787, 267, 268, 257, 269,
	272, 275, 276, 277, 278, 279, 27, 523, 0, 0,
	511, 29, 0, 280, 285, 286, 290, 288, 289, 281,
	0, 298, 302, 0, 359, 0, 364, 366, -2, -2,
	0, 401, 402, 403, 404, 405, 0, 0, 0, 0,
	0, 0, 0, 428, 429, 430, 431, 496, 497, 498,
	499, 500, 501, 502, 503, 368, 369, 493, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 0,
	458, 458, 458, 458, 458, 458, 458, 458, 0, 0,
	0, 0, 0, 0, 309, 311, 312, 313, 332, 0,
	334, 0, 0, 41, 45, 0, 764, 547, -2, -2,
	0, 0, 588, 589, -2, 693, -2, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 0,
	77, 0, 0, 787, 0, 67, 0, 0, 0, 0,
	0, 787, 219, 220, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 230, 787, 787, 787, 787, 787, 787,
	787, 787, 239, 788, 789, 240, 241, 242, 787, 787,
	244, 0, 259, 0, 253, 28, 785, 22, 0, 0,
	520, 0, 512, 513, 516, 519, 27, 287, 0, 292,
	291, 283, 0, 299, 0, 0, 0, 303, 0, 305,
	306, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 387, 388, 389, 390, 391, 392, 365,
	0, 379, 0, 0, 0, 421, 422, 423, 424, 425,
	426, 0, 294, 27, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 0, 485, 0, 450, 0,
	451, 452, 453, 454, 455, 456, 457, 0, 294, 0,
	0, 43, 0, 350, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 342, 0, 0, 0, 0, 333, 0,
	0, 353, 737, 335, 0, 337, 338, -2, 0, 0,
	0, 39, 40, 0, 46, 764, 48, 49, 0, 0,
	0, 157, 555, 556, 557, 553, 185, 0, 140, 136,
	82, 83, 84, 129, 86, 129, 129, 129, 129, 154,
	154, 154, 154, 112, 113, 114, 115, 116, 0, 0,
	99, 129, 129, 129, 103, 119, 120, 121, 122, 123,
	124, 125, 126, 87, 88, 89, 90, 91, 92, 93,
	131, 131, 131, 133, 133, 584, 62, 0, 70, 0,
	787, 0, 787, 75, 0, 201, 0, 0, 223, 561,
	0, 787, 226, 227, 352, 592, 593, 231, 232, 233,
	234, 235, 236, 237, 238, 243, 246, 260, 254, 255,
	248, 524, 0, 0, 0, 0, 0, 515, 517, 518,
	523, 30, 290, 0, 504, 0, 0, 0, 293, 25,
	360, 361, 363, 380, 0, 382, 384, 304, 300, 0,
	494, -2, 370, 371, 395, 396, 397, 0, 0, 0,
	0, 393, 375, 0, 406, 407, 408, 409, 410, 411,
	412, 413, 414, 415, 416, 417, 420, 469, 470, 0,
	418, 419, 427, 0, 0, 295, 296, 398, 0, 542,
	27, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 491, 488, 0, 0, 459, 0, 0, 0, 0,
	0, 0, 349, 357, 544, 0, 310, 328, 330, 0,
	325, 340, 341, 343, 0, 345, 0, 347, 348, 314,
	315, 316, 0, 0, 0, 0, 336, 357, 0, 357,
	42, 548, 47, 0, 0, 52, 53, 549, 550, 551,
	0, 76, 186, 188, 191, 192, 193, 78, 79, 0,
	0, 0, 0, 0, 180, 181, 143, 141, 0, 138,
	137, 85, 0, 154, 154, 106, 107, 157, 0, 157,
	157, 157, 0, 0, 100, 101, 102, 94, 0, 95,
	96, 97, 0, 98, 0, 0, 787, 64, 0, 68,
	69, 65, 563, 66, 786, 0, 0, 576, 202, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 0,
	221, 222, 787, 225, 263, 0, 0, 0, 521, 522,
	0, 514, 23, 0, 558, 559, 505, 506, 307, 381,
	383, 385, 0, 294, 372, 393, 376, 0, 373, 0,
	0, 367, 432, 0, 0, 400, -2, 435, 436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 0,
	489, 0, 0, 449, 460, 461, 462, 463, 536, 0,
	0, -2, 0, 0, 511, 0, 0, 0, 322, 329,
	0, 0, 323, 0, 324, 344, 346, 0, 0, 0,
	0, 320, 511, 357, 38, 50, 51, 0, 0, 57,
	158, 0, 189, 0, 0, 175, 0, 0, 178, 179,
	150, 0, 142, 81, 139, 0, 157, 157, 108, 0,
	109, 110, 111, 0, 127, 0, 0, 0, 0, 585,
	63, 71, 72, 0, 194, 786, 0, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 786, 0,
	0, 786, 577, 578, 579, 580, 0, 224, 245, 0,
	0, 261, 262, 525, 0, 24, 357, 0, 301, 495,
	0, 374, 0, 394, 377, 433, 297, 0, 129, 129,
	474, 129, 133, 477, 129, 479, 129, 482, 0, 0,
	0, 0, 494, 0, 0, 0, 486, 448, 492, 0,
	31, 0, 536, 526, 538, 540, 0, 27, 0, 532,
	0, 519, 545, 358, 546, 326, 0, 331, 0, 0,
	0, 334, 0, 519, 37, 54, 55, 56, 187, 190,
	0, 182, 129, 176, 177, 152, 0, 144, 145, 146,
	147, 148, 149, 130, 104, 105, 155, 156, 154, 0,
	154, 0, 134, 0, 787, 0, 0, 195, 0, 196,
	198, 199, 200, 0, 264, 265, 507, 308, 434, 378,
	437, 471, 154, 475, 476, 478, 480, 481, 483, 439,
	438, 440, 0, 0, 443, 0, 0, 0, 0, 0,
	490, 0, 32, 0, 541, -2, 0, 0, 0, 44,
	35, 0, 318, 0, 0, 0, 353, 321, 36, 167,
	0, 184, 159, 153, 0, 157, 128, 157, 0, 0,
	61, 73, 74, 0, 0, 509, 0, 472, 473, 0,
	0, 0, 0, 464, 447, 487, 0, 539, 0, -2,
	0, 534, 533, 0, 327, 354, 355, 356, 317, 166,
	168, 0, 173, 0, 183, 164, 0, 161, 163, 151,
	117, 118, 132, 135, 0, 0, 26, 0, 0, 441,
	442, 444, 445, 0, 0, 0, 0, 529, 27, 0,
	319, 169, 170, 0, 174, 172, 80, 0, 160, 162,
	67, 0, 215, 0, 510, 508, 446, 0, 0, 0,
	537, -2, 535, 171, 165, 70, 214, 0, 0, 465,
	0, 468, 197, 216, 0, 466, 0, 0, 0, 0,
	0, 467, 0, 0, 217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 250,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:306
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:311
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:339
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:357
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:374
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:391
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:403
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:449
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:453
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:458
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:462
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:538
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:543
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:548
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:556
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:564
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:568
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:573
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:588
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:604
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:610
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:616
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:623
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:639
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:645
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:864
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:869
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:873
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:878
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:882
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:894
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:908
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:940
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:969
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:973
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1064
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1211
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, RenamePairs: []*RenamePair{{From: yyDollar[4].tableName, To: yyDollar[7].tableName}}}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1216
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: RenameStr, RenamePairs: yyDollar[3].renamePairs}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.renamePairs = []*RenamePair{yyDollar[1].renamePair}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.renamePairs = append(yyVAL.renamePairs, yyDollar[3].renamePair)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.renamePair = &RenamePair{From: yyDollar[1].tableName, To: yyDollar[3].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1292
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1300
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1305
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1395
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1570
		{
			setAllowComments(yylex, true)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.bytes2 = nil
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = UnionStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = UnionAllStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = UnionDistinctStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = SQLCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = DistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = StraightJoinHint
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.selectExprs = nil
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.str = StraightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = NaturalJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.indexHints = nil
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.str = IsNullStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.str = IsNotNullStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.str = IsTrueStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.str = IsNotTrueStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.str = IsFalseStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.str = IsNotFalseStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.str = EqualStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.str = LessThanStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.str = GreaterThanStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.str = LessEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.str = GreaterEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = NotEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2200
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2230
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.str = BooleanModeStr
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = QueryExpansionStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.expr = nil
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.str = string("")
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = &NullVal{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2575
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.exprs = nil
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.expr = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.orderBy = nil
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.str = AscScr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.str = AscScr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.str = DescScr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.limit = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2666
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.str = ForUpdateStr
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.str = ShareModeStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2695
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2700
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2708
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.updateExprs = nil
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.bytes = []byte("charset")
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.expr = &Default{}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.byt = 0
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.byt = 1
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.str = ""
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.str = IgnoreStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2861
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3150
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3159
		{
			decNesting(yylex)
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3164
		{
			forceEOF(yylex)
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3169
		{
			forceEOF(yylex)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3173
		{
			forceEOF(yylex)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3177
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
