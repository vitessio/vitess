// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA = 57545
const VSCHEMA_TABLES = 57546
const VITESS_TARGET = 57547
const FULL = 57548
const PROCESSLIST = 57549
const COLUMNS = 57550
const FIELDS = 57551
const ENGINES = 57552
const PLUGINS = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 300,
	160, 300,
	-2, 290,
	-1, 267,
	112, 636,
	-2, 632,
	-1, 268,
	112, 637,
	-2, 633,
	-1, 331,
	82, 807,
	-2, 60,
	-1, 332,
	82, 764,
	-2, 61,
	-1, 337,
	82, 743,
	-2, 598,
	-1, 339,
	82, 785,
	-2, 600,
	-1, 597,
	1, 352,
	5, 352,
	12, 352,
	13, 352,
	14, 352,
	15, 352,
	17, 352,
	19, 352,
	30, 352,
	31, 352,
	42, 352,
	43, 352,
	44, 352,
	45, 352,
	46, 352,
	48, 352,
	49, 352,
	52, 352,
	53, 352,
	55, 352,
	56, 352,
	266, 352,
	-2, 370,
	-1, 600,
	53, 43,
	55, 43,
	-2, 45,
	-1, 740,
	112, 639,
	-2, 635,
	-1, 958,
	5, 30,
	-2, 436,
	-1, 987,
	5, 29,
	-2, 572,
	-1, 1240,
	5, 30,
	-2, 573,
	-1, 1295,
	5, 29,
	-2, 575,
	-1, 1376,
	5, 30,
	-2, 576,
}

const yyPrivate = 57344

const yyLast = 12140

var yyAct = [...]int{

	268, 1411, 1401, 1197, 1364, 1079, 272, 990, 562, 844,
	1008, 1274, 1132, 1166, 991, 1260, 57, 821, 246, 1133,
	1129, 1307, 840, 887, 873, 853, 923, 843, 1139, 1033,
	1014, 1102, 81, 561, 3, 819, 208, 336, 1145, 208,
	765, 775, 705, 1059, 1050, 857, 950, 298, 808, 823,
	772, 742, 793, 593, 610, 237, 494, 500, 609, 594,
	255, 330, 883, 514, 325, 801, 435, 208, 81, 327,
	932, 506, 208, 56, 208, 1404, 774, 1388, 1399, 1374,
	1396, 1198, 1387, 1373, 867, 245, 1124, 1234, 440, 1318,
	468, 203, 199, 200, 201, 1161, 1162, 1160, 270, 61,
	238, 239, 240, 241, 834, 259, 244, 576, 488, 1340,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 243, 906, 538, 63, 64, 65, 66, 67,
	1174, 1175, 1176, 835, 836, 242, 1041, 905, 1179, 1177,
	1021, 484, 611, 1020, 612, 195, 1022, 197, 866, 485,
	482, 483, 218, 1263, 453, 874, 470, 1280, 472, 1217,
	1215, 236, 477, 478, 680, 910, 487, 1082, 1081, 678,
	1398, 1395, 1365, 1078, 904, 802, 231, 1356, 858, 1419,
	1103, 454, 1415, 442, 1308, 197, 1009, 1011, 469, 471,
	1083, 684, 671, 860, 860, 1345, 208, 1310, 679, 208,
	860, 599, 1155, 1154, 1153, 208, 438, 681, 445, 210,
	198, 208, 202, 1316, 81, 1243, 81, 1105, 81, 81,
	1183, 81, 1034, 81, 901, 898, 899, 211, 897, 436,
	917, 841, 81, 916, 214, 550, 551, 205, 1089, 968,
	196, 1075, 222, 217, 944, 714, 518, 1077, 528, 460,
	1107, 538, 1111, 450, 1106, 538, 1104, 513, 1354, 908,
	911, 1109, 81, 1010, 436, 1309, 502, 706, 326, 711,
	1108, 1184, 70, 437, 220, 439, 467, 963, 1066, 1341,
	230, 1326, 1143, 1110, 1112, 503, 613, 874, 1413, 859,
	859, 1414, 1126, 1412, 1372, 903, 859, 434, 490, 491,
	925, 856, 854, 511, 855, 794, 212, 1064, 71, 852,
	858, 299, 51, 1178, 1317, 1315, 447, 902, 448, 513,
	794, 449, 977, 208, 208, 208, 441, 512, 511, 81,
	1039, 673, 1359, 224, 215, 81, 225, 226, 227, 229,
	508, 228, 234, 1076, 513, 1074, 216, 219, 707, 213,
	233, 232, 504, 512, 511, 1420, 456, 457, 458, 592,
	907, 749, 1378, 51, 531, 532, 533, 534, 535, 528,
	513, 251, 538, 909, 1065, 747, 748, 746, 924, 1070,
	1067, 1060, 1068, 1063, 863, 512, 511, 1061, 1062, 601,
	864, 261, 1128, 1270, 1421, 717, 718, 446, 607, 1380,
	452, 1069, 513, 443, 444, 54, 459, 732, 734, 735,
	1269, 194, 461, 733, 1054, 745, 274, 1053, 466, 578,
	579, 580, 581, 582, 583, 584, 529, 530, 531, 532,
	533, 534, 535, 528, 1042, 208, 538, 1355, 1291, 962,
	81, 961, 1267, 512, 511, 208, 208, 81, 713, 22,
	1086, 208, 1352, 766, 208, 767, 1200, 208, 512, 511,
	513, 208, 1051, 81, 81, 941, 942, 943, 81, 81,
	81, 81, 81, 81, 1034, 513, 322, 323, 81, 81,
	1023, 1029, 1024, 1313, 1397, 712, 333, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 693, 768,
	538, 690, 512, 511, 297, 689, 81, 1383, 493, 250,
	208, 1313, 1368, 1313, 493, 604, 81, 674, 685, 513,
	672, 719, 1313, 1346, 591, 465, 600, 465, 669, 465,
	465, 691, 465, 462, 465, 455, 79, 1313, 1312, 1258,
	1257, 1245, 493, 465, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 740, 605, 538, 603,
	81, 1242, 493, 51, 493, 721, 1190, 1189, 1381, 743,
	1186, 1187, 335, 1186, 1185, 1323, 784, 788, 547, 736,
	1322, 549, 795, 288, 287, 290, 291, 292, 293, 738,
	1319, 208, 289, 294, 956, 493, 1180, 951, 779, 208,
	208, 805, 493, 208, 208, 777, 493, 81, 1015, 560,
	861, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	81, 575, 577, 577, 577, 577, 577, 577, 577, 577,
	585, 586, 587, 588, 1092, 598, 621, 798, 829, 497,
	501, 1142, 780, 781, 791, 804, 675, 676, 790, 769,
	770, 805, 682, 620, 619, 326, 519, 58, 688, 875,
	876, 877, 797, 1015, 799, 800, 827, 832, 831, 972,
	805, 24, 208, 81, 1130, 81, 24, 1142, 956, 81,
	81, 208, 208, 777, 208, 208, 548, 848, 208, 81,
	970, 563, 889, 967, 965, 985, 828, 956, 603, 986,
	574, 492, 1238, 1325, 1294, 208, 1142, 208, 208, 805,
	208, 728, 1188, 971, 869, 870, 871, 872, 335, 54,
	335, 24, 335, 335, 54, 335, 1025, 335, 885, 886,
	880, 881, 882, 833, 969, 956, 335, 966, 964, 603,
	597, 606, 810, 813, 814, 815, 811, 333, 812, 816,
	715, 465, 740, 810, 813, 814, 815, 811, 465, 812,
	816, 683, 54, 1146, 1147, 252, 516, 1389, 1362, 54,
	1276, 1265, 868, 933, 465, 465, 934, 1250, 888, 465,
	465, 465, 465, 465, 465, 1171, 1146, 1147, 1080, 465,
	465, 1028, 803, 884, 743, 879, 878, 891, 946, 1406,
	1402, 1173, 1149, 940, 1130, 830, 208, 208, 208, 208,
	208, 992, 1055, 54, 709, 687, 727, 1002, 208, 1000,
	1152, 208, 1003, 1151, 1001, 208, 999, 998, 1004, 208,
	814, 815, 1393, 335, 1386, 987, 256, 257, 1088, 615,
	929, 507, 1391, 939, 81, 976, 938, 1046, 618, 463,
	955, 495, 1038, 1026, 779, 1361, 505, 1360, 1292, 993,
	1017, 51, 996, 496, 1016, 1005, 994, 995, 974, 997,
	1036, 1030, 1236, 892, 1013, 1272, 564, 894, 708, 686,
	818, 507, 914, 915, 247, 918, 919, 1035, 1018, 920,
	253, 254, 81, 81, 1043, 1044, 1045, 937, 1047, 1048,
	1049, 1031, 1032, 729, 730, 936, 922, 1330, 248, 58,
	820, 928, 1329, 1278, 598, 1015, 486, 1408, 1407, 1408,
	704, 81, 509, 1342, 1052, 1264, 710, 60, 62, 602,
	55, 1, 1400, 1199, 1273, 900, 208, 739, 744, 1363,
	1306, 1165, 1071, 851, 335, 81, 842, 69, 433, 68,
	1353, 335, 1058, 850, 849, 1314, 563, 1262, 862, 782,
	783, 1040, 865, 1172, 1358, 1085, 1037, 335, 335, 626,
	624, 625, 335, 335, 335, 335, 335, 335, 623, 628,
	627, 622, 335, 335, 465, 221, 465, 328, 817, 81,
	81, 1125, 992, 1131, 1096, 1114, 1095, 614, 1101, 890,
	465, 510, 72, 1113, 1073, 839, 740, 1072, 896, 480,
	723, 481, 223, 81, 546, 597, 935, 1019, 334, 597,
	516, 1141, 1136, 335, 1137, 333, 81, 716, 81, 81,
	499, 1157, 1328, 1277, 1134, 1150, 975, 1164, 845, 573,
	792, 1156, 265, 273, 731, 286, 283, 1159, 285, 284,
	722, 945, 984, 1163, 520, 1168, 208, 271, 263, 596,
	589, 1169, 1170, 809, 771, 807, 1181, 1182, 806, 1148,
	1144, 595, 1091, 208, 786, 786, 1233, 1339, 726, 81,
	786, 26, 81, 81, 208, 59, 258, 19, 18, 17,
	81, 20, 16, 208, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 930, 931, 538, 501, 15, 14,
	451, 335, 1204, 988, 989, 1192, 30, 598, 598, 598,
	598, 598, 1205, 21, 335, 13, 12, 1193, 1206, 1195,
	11, 1213, 820, 739, 1012, 10, 9, 1090, 8, 7,
	598, 6, 5, 4, 249, 23, 2, 0, 0, 992,
	0, 0, 1237, 0, 0, 0, 0, 1247, 1246, 0,
	0, 0, 0, 744, 81, 0, 0, 0, 0, 957,
	0, 0, 81, 1026, 0, 0, 1256, 335, 0, 335,
	0, 0, 0, 912, 913, 0, 978, 0, 1210, 1211,
	0, 1212, 81, 335, 1214, 0, 1216, 0, 0, 81,
	0, 0, 0, 0, 465, 720, 0, 0, 0, 0,
	1266, 0, 1268, 0, 0, 0, 464, 0, 0, 335,
	0, 0, 597, 597, 597, 597, 597, 0, 0, 0,
	0, 0, 465, 0, 0, 0, 1279, 597, 0, 0,
	0, 0, 0, 81, 81, 597, 81, 0, 0, 0,
	0, 81, 1259, 81, 81, 81, 208, 1191, 1293, 81,
	0, 0, 845, 776, 778, 1300, 1301, 0, 1302, 1303,
	1304, 0, 1311, 1305, 1194, 1295, 0, 81, 0, 796,
	0, 0, 0, 0, 0, 1203, 1134, 0, 0, 1320,
	0, 1321, 1327, 0, 0, 0, 0, 0, 1135, 0,
	51, 0, 0, 0, 0, 0, 0, 1343, 0, 786,
	0, 0, 0, 0, 81, 0, 1350, 1087, 552, 553,
	554, 555, 556, 557, 558, 559, 81, 81, 1351, 0,
	1344, 0, 0, 0, 0, 0, 1367, 1366, 0, 1370,
	0, 0, 1134, 0, 0, 0, 81, 0, 335, 992,
	1375, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 1094, 0, 0, 81, 0, 0, 1127,
	0, 0, 0, 0, 1385, 1230, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 1390, 1392,
	81, 0, 0, 0, 0, 0, 1056, 335, 0, 0,
	0, 0, 0, 1405, 598, 1394, 0, 1158, 0, 0,
	1416, 0, 0, 527, 526, 536, 537, 529, 530, 531,
	532, 533, 534, 535, 528, 335, 0, 538, 0, 0,
	1097, 0, 473, 0, 474, 475, 1232, 476, 0, 479,
	0, 0, 0, 0, 845, 0, 845, 0, 489, 335,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 0, 0, 538, 1252, 1253, 1254, 0, 0,
	953, 0, 0, 335, 954, 0, 0, 0, 0, 0,
	0, 958, 959, 960, 0, 0, 0, 0, 0, 0,
	786, 0, 973, 1138, 1140, 0, 0, 979, 0, 980,
	981, 982, 983, 465, 0, 0, 0, 0, 1094, 597,
	0, 0, 0, 0, 0, 0, 0, 1140, 0, 0,
	1235, 1007, 0, 0, 0, 0, 0, 563, 0, 0,
	335, 0, 335, 1167, 0, 1248, 0, 0, 1249, 0,
	0, 1251, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 0, 0, 1296, 0, 0, 0, 0, 1379, 0,
	0, 0, 0, 741, 0, 0, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 0, 845, 1196, 1324, 0, 1201, 1202, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 498, 0, 0,
	0, 0, 522, 0, 525, 0, 1135, 0, 51, 0,
	539, 540, 541, 542, 543, 544, 545, 1275, 523, 524,
	521, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 206, 0, 538, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 786, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 1100, 0, 0,
	0, 262, 0, 677, 206, 0, 0, 0, 335, 206,
	0, 206, 0, 0, 0, 0, 1261, 0, 0, 694,
	695, 0, 0, 0, 696, 697, 698, 699, 700, 701,
	1227, 493, 0, 0, 702, 703, 335, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1369, 563, 0, 0, 0, 1224, 493, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	0, 0, 538, 0, 1275, 845, 0, 1297, 1298, 0,
	1299, 0, 0, 0, 0, 1261, 0, 1261, 1261, 1261,
	0, 0, 0, 1167, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 0, 0, 538, 0,
	0, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 948, 949, 206, 0, 0, 206, 1207, 0, 0,
	0, 0, 206, 0, 1209, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 1218, 1219, 1220, 1357, 1223,
	0, 0, 1226, 0, 1229, 0, 0, 0, 0, 0,
	335, 335, 0, 0, 0, 0, 0, 1239, 1240, 1241,
	0, 1244, 0, 0, 0, 0, 0, 786, 0, 0,
	1377, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	24, 25, 52, 27, 28, 0, 0, 0, 0, 0,
	1384, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 29, 48, 49, 0, 0, 893,
	0, 895, 0, 0, 1261, 0, 0, 0, 1221, 493,
	0, 0, 0, 0, 38, 921, 0, 0, 54, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 0,
	206, 206, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 0, 0,
	538, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 0, 0, 538, 0, 0, 0, 31,
	32, 34, 33, 36, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 0, 0, 1231, 1098, 1099, 37, 44, 45, 0,
	0, 46, 47, 35, 1347, 1348, 1349, 1115, 1116, 1117,
	1118, 1228, 1120, 1121, 1122, 1123, 39, 40, 0, 41,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 1371, 206, 206, 1225, 0, 1376, 0, 206, 0,
	0, 206, 0, 0, 206, 0, 0, 0, 692, 0,
	0, 0, 0, 0, 0, 1382, 643, 527, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 0,
	0, 538, 0, 0, 0, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 0, 538,
	0, 0, 0, 0, 0, 53, 0, 206, 0, 1057,
	0, 1417, 1418, 0, 0, 0, 692, 0, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	0, 0, 538, 0, 0, 0, 0, 1084, 0, 0,
	1208, 0, 0, 0, 631, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 262, 538,
	0, 0, 0, 262, 262, 0, 0, 787, 787, 262,
	1222, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 644, 0, 262, 262, 262, 262, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 206, 825, 0, 0,
	206, 206, 0, 657, 658, 659, 660, 661, 662, 663,
	0, 664, 665, 666, 667, 668, 645, 646, 647, 648,
	629, 630, 0, 0, 632, 0, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 649, 650, 651, 652,
	653, 654, 655, 656, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 0, 0, 538, 0,
	0, 0, 0, 0, 1281, 1282, 952, 1283, 1284, 206,
	1285, 1286, 0, 1287, 1288, 1289, 0, 0, 206, 206,
	0, 206, 206, 0, 0, 206, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 0, 0,
	538, 0, 206, 0, 926, 927, 0, 206, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 787, 206, 206, 206, 206, 206, 1271, 0,
	0, 0, 0, 0, 0, 1006, 0, 0, 206, 0,
	0, 0, 825, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1409, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 787, 138, 0, 0, 0, 0, 269,
	0, 0, 0, 102, 0, 266, 0, 0, 0, 119,
	309, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 837, 0,
	54, 0, 0, 267, 288, 287, 290, 291, 292, 293,
	0, 0, 95, 289, 294, 295, 296, 838, 0, 0,
	264, 281, 0, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 0, 0, 0, 0, 320,
	206, 280, 0, 0, 275, 276, 277, 282, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 108, 0, 0,
	206, 209, 0, 0, 318, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	787, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 310, 319,
	316, 317, 314, 315, 313, 312, 311, 321, 302, 303,
	304, 305, 307, 0, 306, 82, 0, 120, 190, 147,
	105, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 421, 412, 0,
	383, 424, 361, 375, 432, 376, 377, 405, 347, 391,
	138, 373, 0, 364, 342, 370, 343, 362, 385, 102,
	388, 360, 414, 394, 423, 119, 430, 121, 399, 0,
	158, 130, 0, 0, 387, 416, 389, 410, 382, 406,
	352, 398, 425, 374, 403, 426, 0, 0, 0, 80,
	0, 846, 847, 0, 0, 0, 0, 0, 95, 0,
	401, 420, 372, 402, 404, 341, 400, 0, 345, 348,
	431, 418, 367, 368, 1027, 0, 0, 0, 0, 0,
	787, 386, 390, 407, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 206, 397, 0, 0, 0, 349,
	346, 0, 0, 384, 0, 0, 0, 351, 0, 366,
	408, 0, 340, 108, 411, 417, 381, 209, 419, 379,
	378, 422, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 415, 363, 371, 98, 369, 152,
	140, 174, 396, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 344, 0, 159, 176, 193, 93, 359, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 355, 358, 353, 354, 392, 393,
	427, 428, 429, 409, 350, 0, 356, 357, 0, 413,
	395, 82, 0, 120, 190, 147, 105, 177, 421, 412,
	0, 383, 424, 361, 375, 432, 376, 377, 405, 347,
	391, 138, 373, 0, 364, 342, 370, 343, 362, 385,
	102, 388, 360, 414, 394, 423, 119, 430, 121, 399,
	0, 158, 130, 0, 0, 387, 416, 389, 410, 382,
	406, 352, 398, 425, 374, 403, 426, 0, 0, 0,
	80, 0, 846, 847, 0, 0, 0, 0, 0, 95,
	0, 401, 420, 372, 402, 404, 341, 400, 0, 345,
	348, 431, 418, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 386, 390, 407, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 0, 397, 0, 0, 0,
	349, 346, 0, 0, 384, 0, 0, 0, 351, 0,
	366, 408, 0, 340, 108, 411, 417, 381, 209, 419,
	379, 378, 422, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 415, 363, 371, 98, 369,
	152, 140, 174, 396, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 344, 0, 159, 176, 193, 93, 359, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 355, 358, 353, 354, 392,
	393, 427, 428, 429, 409, 350, 0, 356, 357, 0,
	413, 395, 82, 0, 120, 190, 147, 105, 177, 421,
	412, 0, 383, 424, 361, 375, 432, 376, 377, 405,
	347, 391, 138, 373, 0, 364, 342, 370, 343, 362,
	385, 102, 388, 360, 414, 394, 423, 119, 430, 121,
	399, 0, 158, 130, 0, 0, 387, 416, 389, 410,
	382, 406, 352, 398, 425, 374, 403, 426, 54, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 401, 420, 372, 402, 404, 341, 400, 0,
	345, 348, 431, 418, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 386, 390, 407, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 397, 0, 0,
	0, 349, 346, 0, 0, 384, 0, 0, 0, 351,
	0, 366, 408, 0, 340, 108, 411, 417, 381, 209,
	419, 379, 378, 422, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 415, 363, 371, 98,
	369, 152, 140, 174, 396, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 344, 0, 159, 176, 193, 93, 359,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 355, 358, 353, 354,
	392, 393, 427, 428, 429, 409, 350, 0, 356, 357,
	0, 413, 395, 82, 0, 120, 190, 147, 105, 177,
	421, 412, 0, 383, 424, 361, 375, 432, 376, 377,
	405, 347, 391, 138, 373, 0, 364, 342, 370, 343,
	362, 385, 102, 388, 360, 414, 394, 423, 119, 430,
	121, 399, 0, 158, 130, 0, 0, 387, 416, 389,
	410, 382, 406, 352, 398, 425, 374, 403, 426, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 401, 420, 372, 402, 404, 341, 400,
	0, 345, 348, 431, 418, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 386, 390, 407, 380, 0, 0,
	0, 0, 0, 0, 1093, 0, 365, 0, 397, 0,
	0, 0, 349, 346, 0, 0, 384, 0, 0, 0,
	351, 0, 366, 408, 0, 340, 108, 411, 417, 381,
	209, 419, 379, 378, 422, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 415, 363, 371,
	98, 369, 152, 140, 174, 396, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 344, 0, 159, 176, 193, 93,
	359, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 355, 358, 353,
	354, 392, 393, 427, 428, 429, 409, 350, 0, 356,
	357, 0, 413, 395, 82, 0, 120, 190, 147, 105,
	177, 421, 412, 0, 383, 424, 361, 375, 432, 376,
	377, 405, 347, 391, 138, 373, 0, 364, 342, 370,
	343, 362, 385, 102, 388, 360, 414, 394, 423, 119,
	430, 121, 399, 0, 158, 130, 0, 0, 387, 416,
	389, 410, 382, 406, 352, 398, 425, 374, 403, 426,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 401, 420, 372, 402, 404, 341,
	400, 0, 345, 348, 431, 418, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 386, 390, 407, 380, 0,
	0, 0, 0, 0, 0, 737, 0, 365, 0, 397,
	0, 0, 0, 349, 346, 0, 0, 384, 0, 0,
	0, 351, 0, 366, 408, 0, 340, 108, 411, 417,
	381, 209, 419, 379, 378, 422, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 415, 363,
	371, 98, 369, 152, 140, 174, 396, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 344, 0, 159, 176, 193,
	93, 359, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 355, 358,
	353, 354, 392, 393, 427, 428, 429, 409, 350, 0,
	356, 357, 0, 413, 395, 82, 0, 120, 190, 147,
	105, 177, 421, 412, 0, 383, 424, 361, 375, 432,
	376, 377, 405, 347, 391, 138, 373, 0, 364, 342,
	370, 343, 362, 385, 102, 388, 360, 414, 394, 423,
	119, 430, 121, 399, 0, 158, 130, 0, 0, 387,
	416, 389, 410, 382, 406, 352, 398, 425, 374, 403,
	426, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 401, 420, 372, 402, 404,
	341, 400, 0, 345, 348, 431, 418, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 407, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	397, 0, 0, 0, 349, 346, 0, 0, 384, 0,
	0, 0, 351, 0, 366, 408, 0, 340, 108, 411,
	417, 381, 209, 419, 379, 378, 422, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 415,
	363, 371, 98, 369, 152, 140, 174, 396, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 344, 0, 159, 176,
	193, 93, 359, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 355,
	358, 353, 354, 392, 393, 427, 428, 429, 409, 350,
	0, 356, 357, 0, 413, 395, 82, 0, 120, 190,
	147, 105, 177, 421, 412, 0, 383, 424, 361, 375,
	432, 376, 377, 405, 347, 391, 138, 373, 0, 364,
	342, 370, 343, 362, 385, 102, 388, 360, 414, 394,
	423, 119, 430, 121, 399, 0, 158, 130, 0, 0,
	387, 416, 389, 410, 382, 406, 352, 398, 425, 374,
	403, 426, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 401, 420, 372, 402,
	404, 341, 400, 0, 345, 348, 431, 418, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 386, 390, 407,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 397, 0, 0, 0, 349, 346, 0, 0, 384,
	0, 0, 0, 351, 0, 366, 408, 0, 340, 108,
	411, 417, 381, 209, 419, 379, 378, 422, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	415, 363, 371, 98, 369, 152, 140, 174, 396, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 344, 0, 159,
	176, 193, 93, 359, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	355, 358, 353, 354, 392, 393, 427, 428, 429, 409,
	350, 0, 356, 357, 0, 413, 395, 82, 0, 120,
	190, 147, 105, 177, 421, 412, 0, 383, 424, 361,
	375, 432, 376, 377, 405, 347, 391, 138, 373, 0,
	364, 342, 370, 343, 362, 385, 102, 388, 360, 414,
	394, 423, 119, 430, 121, 399, 0, 158, 130, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 425,
	374, 403, 426, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 401, 420, 372,
	402, 404, 341, 400, 0, 345, 348, 431, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	108, 411, 417, 381, 209, 419, 379, 378, 422, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 415, 363, 371, 98, 369, 152, 140, 174, 396,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 338, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 344, 0,
	159, 176, 193, 93, 359, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 339, 337,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 355, 358, 353, 354, 392, 393, 427, 428, 429,
	409, 350, 0, 356, 357, 0, 413, 395, 82, 0,
	120, 190, 147, 105, 177, 421, 412, 0, 383, 424,
	361, 375, 432, 376, 377, 405, 347, 391, 138, 373,
	0, 364, 342, 370, 343, 362, 385, 102, 388, 360,
	414, 394, 423, 119, 430, 121, 399, 0, 158, 130,
	0, 0, 387, 416, 389, 410, 382, 406, 352, 398,
	425, 374, 403, 426, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 401, 420,
	372, 402, 404, 341, 400, 0, 345, 348, 431, 418,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 386,
	390, 407, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 397, 0, 0, 0, 349, 346, 0,
	0, 384, 0, 0, 0, 351, 0, 366, 408, 0,
	340, 108, 411, 417, 381, 209, 419, 379, 378, 422,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 415, 363, 371, 98, 369, 152, 140, 174,
	396, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 344,
	0, 159, 176, 193, 93, 359, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 355, 358, 353, 354, 392, 393, 427, 428,
	429, 409, 350, 0, 356, 357, 0, 413, 395, 82,
	0, 120, 190, 147, 105, 177, 421, 412, 0, 383,
	424, 361, 375, 432, 376, 377, 405, 347, 391, 138,
	373, 0, 364, 342, 370, 343, 362, 385, 102, 388,
	360, 414, 394, 423, 119, 430, 121, 399, 0, 158,
	130, 0, 0, 387, 416, 389, 410, 382, 406, 352,
	398, 425, 374, 403, 426, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 401,
	420, 372, 402, 404, 341, 400, 0, 345, 348, 431,
	418, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	386, 390, 407, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 0, 397, 0, 0, 0, 349, 346,
	0, 0, 384, 0, 0, 0, 351, 0, 366, 408,
	0, 340, 108, 411, 417, 381, 209, 419, 379, 378,
	422, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 415, 363, 371, 98, 369, 152, 140,
	174, 396, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 608, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 338, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	344, 0, 159, 176, 193, 93, 359, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	339, 337, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 355, 358, 353, 354, 392, 393, 427,
	428, 429, 409, 350, 0, 356, 357, 0, 413, 395,
	82, 0, 120, 190, 147, 105, 177, 421, 412, 0,
	383, 424, 361, 375, 432, 376, 377, 405, 347, 391,
	138, 373, 0, 364, 342, 370, 343, 362, 385, 102,
	388, 360, 414, 394, 423, 119, 430, 121, 399, 0,
	158, 130, 0, 0, 387, 416, 389, 410, 382, 406,
	352, 398, 425, 374, 403, 426, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	401, 420, 372, 402, 404, 341, 400, 0, 345, 348,
	431, 418, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 407, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 397, 0, 0, 0, 349,
	346, 0, 0, 384, 0, 0, 0, 351, 0, 366,
	408, 0, 340, 108, 411, 417, 381, 209, 419, 379,
	378, 422, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 415, 363, 371, 98, 369, 152,
	140, 174, 396, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 329, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 338,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 344, 0, 159, 176, 193, 93, 359, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 339, 337, 332, 331, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 355, 358, 353, 354, 392, 393,
	427, 428, 429, 409, 350, 0, 356, 357, 0, 413,
	395, 82, 0, 120, 190, 147, 105, 177, 138, 0,
	0, 773, 0, 269, 0, 0, 0, 102, 0, 266,
	0, 0, 0, 119, 309, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 267, 288, 287,
	290, 291, 292, 293, 0, 0, 95, 289, 294, 295,
	296, 0, 0, 0, 264, 281, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 260,
	0, 0, 0, 320, 0, 280, 0, 0, 275, 276,
	277, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 318, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 310, 319, 316, 317, 314, 315, 313, 312,
	311, 321, 302, 303, 304, 305, 307, 0, 306, 82,
	0, 120, 190, 147, 105, 177, 138, 0, 0, 0,
	0, 269, 0, 0, 0, 102, 0, 266, 0, 0,
	0, 119, 309, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 493, 267, 288, 287, 290, 291,
	292, 293, 0, 0, 95, 289, 294, 295, 296, 0,
	0, 0, 264, 281, 0, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 320, 0, 280, 0, 0, 275, 276, 277, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 318, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	310, 319, 316, 317, 314, 315, 313, 312, 311, 321,
	302, 303, 304, 305, 307, 0, 306, 82, 0, 120,
	190, 147, 105, 177, 138, 0, 0, 0, 0, 269,
	0, 0, 0, 102, 0, 266, 0, 0, 0, 119,
	309, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 267, 288, 287, 290, 291, 292, 293,
	0, 0, 95, 289, 294, 295, 296, 0, 0, 0,
	264, 281, 0, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 260, 0, 0, 0, 320,
	0, 280, 0, 0, 275, 276, 277, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 318, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 310, 319,
	316, 317, 314, 315, 313, 312, 311, 321, 302, 303,
	304, 305, 307, 24, 306, 82, 0, 120, 190, 147,
	105, 177, 0, 0, 0, 138, 0, 0, 0, 0,
	269, 0, 0, 0, 102, 0, 266, 0, 0, 0,
	119, 309, 121, 0, 0, 158, 130, 0, 0, 0,
	0, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 267, 288, 287, 290, 291, 292,
	293, 0, 0, 95, 289, 294, 295, 296, 0, 0,
	0, 264, 281, 0, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	320, 0, 280, 0, 0, 275, 276, 277, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 209, 0, 0, 318, 0, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 0,
	0, 0, 98, 0, 152, 140, 174, 0, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 0, 0, 159, 176,
	193, 93, 0, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 310,
	319, 316, 317, 314, 315, 313, 312, 311, 321, 302,
	303, 304, 305, 307, 0, 306, 82, 0, 120, 190,
	147, 105, 177, 138, 0, 0, 0, 0, 269, 0,
	0, 0, 102, 0, 266, 0, 0, 0, 119, 309,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 267, 288, 287, 290, 291, 292, 293, 0,
	0, 95, 289, 294, 295, 296, 0, 0, 0, 264,
	281, 0, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 0, 0, 0, 0, 320, 0,
	280, 0, 0, 275, 276, 277, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 318, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 310, 319, 316,
	317, 314, 315, 313, 312, 311, 321, 302, 303, 304,
	305, 307, 138, 306, 82, 0, 120, 190, 147, 105,
	177, 102, 0, 0, 0, 0, 0, 119, 309, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 267, 288, 287, 290, 291, 292, 293, 0, 0,
	95, 289, 294, 295, 296, 0, 0, 0, 0, 281,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 320, 0, 280,
	0, 0, 275, 276, 277, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 318, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 1410, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 310, 319, 316, 317,
	314, 315, 313, 312, 311, 321, 302, 303, 304, 305,
	307, 138, 306, 82, 0, 120, 190, 147, 105, 177,
	102, 0, 0, 0, 0, 0, 119, 309, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	267, 288, 287, 290, 291, 292, 293, 0, 0, 95,
	289, 294, 295, 296, 0, 0, 0, 0, 281, 0,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 0, 0, 0, 0, 320, 0, 280, 0,
	0, 275, 276, 277, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 318, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 310, 319, 316, 317, 314,
	315, 313, 312, 311, 321, 302, 303, 304, 305, 307,
	138, 306, 82, 0, 120, 190, 147, 105, 177, 102,
	0, 0, 0, 0, 0, 119, 0, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	0, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 515, 0, 0,
	0, 82, 102, 120, 190, 147, 105, 177, 119, 0,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 517, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 512, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 0, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 82, 102, 120, 190, 147, 105,
	177, 119, 0, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	76, 77, 0, 73, 0, 0, 0, 78, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 824, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	826, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	82, 0, 120, 190, 147, 105, 177, 102, 0, 0,
	0, 0, 0, 119, 0, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 0, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 82,
	0, 120, 190, 147, 105, 177, 102, 0, 0, 0,
	0, 0, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 824, 0, 0, 0, 82, 102,
	120, 190, 147, 105, 177, 119, 0, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 826, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	0, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 822, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 82, 102, 120, 190, 147, 105, 177, 119, 0,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 724, 0, 0, 725, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 0, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 82, 0, 120, 190, 147, 105,
	177, 102, 0, 617, 0, 0, 0, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 616, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 82, 102, 120, 190, 147, 105, 177,
	119, 0, 121, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 209, 0, 0, 0, 0, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 0,
	0, 0, 98, 0, 152, 140, 174, 0, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 0, 0, 159, 176,
	193, 93, 0, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 82, 102, 120, 190,
	147, 105, 177, 119, 0, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 826,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 0, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 82,
	102, 120, 190, 147, 105, 177, 119, 0, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 789, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 0, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 785, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 82, 102, 120, 190, 147,
	105, 177, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 517, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 82, 0,
	120, 190, 147, 105, 177, 590, 102, 0, 0, 0,
	0, 0, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 82, 102,
	120, 190, 147, 105, 177, 119, 0, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	0, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 82, 102, 120, 190, 147, 105, 177, 119, 0,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 204, 0,
	209, 0, 0, 0, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 82, 102, 120, 190, 147, 105,
	177, 119, 0, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 0, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	82, 102, 120, 190, 147, 105, 177, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 120, 190, 147, 105, 177,
}
var yyPact = [...]int{

	1854, -1000, -193, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 894, 922, -1000, -1000, -1000, -1000, -1000, -1000,
	218, 7888, 20, 87, -31, 11175, 86, 119, 11641, -1000,
	-3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -81, -94,
	-1000, 715, -1000, -1000, -1000, -1000, -1000, 867, 892, 759,
	870, 796, -1000, 6206, 58, 58, 10942, 5462, -1000, -1000,
	207, 11641, 82, 11641, -163, 55, 55, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 85, 11641, 201, -1000, 11641, 53,
	478, 53, 53, 53, 11641, -1000, 137, -1000, -1000, -1000,
	11641, 476, 819, 3374, 33, 3374, -1000, 3374, 3374, -1000,
	3374, 3, 3374, -75, 904, -1000, -1000, -1000, -1000, -50,
	-1000, 3374, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 508, 832, 6705, 6705, 894,
	-1000, 715, -1000, -1000, -1000, 820, -1000, -1000, 275, 911,
	-1000, 7655, 134, -1000, 6705, 1528, 708, -1000, -1000, 708,
	-1000, -1000, 122, -1000, -1000, 7183, 7183, 7183, 7183, 7183,
	7183, 7183, 7183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 708, -1000, 6457,
	708, 708, 708, 708, 708, 708, 708, 708, 6705, 708,
	708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
	708, 708, 10709, 9537, 11641, 504, -1000, 686, 5201, -91,
	-1000, -1000, -1000, 204, 9304, -1000, -1000, -1000, 818, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 598, 11641, -1000, 2036, -1000, 471, 3374,
	67, 463, 257, 460, 11641, 11641, 3374, 12, 41, 84,
	11641, 706, 65, 11641, 856, 763, 11641, 448, 444, -1000,
	4940, -1000, 3374, 3374, -1000, -1000, -1000, 3374, 3374, 3374,
	3374, 3374, 3374, -1000, -1000, -1000, -1000, 3374, 3374, -1000,
	909, 256, -1000, -1000, -1000, -1000, 6705, -1000, 762, -1000,
	-1000, -1000, -1000, -1000, -1000, 917, 177, 430, 133, 695,
	-1000, 371, 867, 508, 796, 9065, 773, -1000, -1000, 11641,
	-1000, 6705, 6705, 339, -1000, 10469, -1000, -1000, 3896, 168,
	7183, 351, 285, 7183, 7183, 7183, 7183, 7183, 7183, 7183,
	7183, 7183, 7183, 7183, 7183, 7183, 7183, 7183, 396, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 442, -1000, 715,
	525, 525, 148, 148, 148, 148, 148, 148, 148, 7422,
	5710, 508, 550, 281, 6457, 6206, 6206, 6705, 6705, 10236,
	10003, 6206, 860, 227, 281, 11874, -1000, 508, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6206, 6206, 6206, 6206, 24,
	11641, -1000, 615, 700, -1000, -1000, -1000, 858, 8599, 8832,
	24, 643, 9537, 11641, -1000, -1000, 4679, 686, -91, 678,
	-1000, -130, -103, 2566, 124, -1000, -1000, -1000, -1000, 3113,
	172, 554, 316, -64, -1000, -1000, -1000, 718, -1000, 718,
	718, 718, 718, -32, -32, -32, -32, -1000, -1000, -1000,
	-1000, -1000, 742, 741, -1000, 718, 718, 718, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 739, 739, 739, 724, 724, 744,
	-1000, 11641, 3374, 854, 3374, -1000, 108, -1000, 11408, 11408,
	11641, 11641, 113, 11641, 11641, 684, -1000, 11641, 3374, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11641, 288, 11641, 11641, 281, 11641,
	-1000, 802, 6705, 6705, 4418, 6705, -1000, -1000, -1000, 832,
	-1000, 860, 886, -1000, 812, 809, 6206, -1000, -1000, 168,
	230, -1000, -1000, 397, -1000, -1000, -1000, -1000, 132, 708,
	-1000, 2052, -1000, -1000, -1000, -1000, 351, 7183, 7183, 7183,
	451, 2052, 2193, 999, 393, 148, 265, 265, 144, 144,
	144, 144, 144, 329, 329, -1000, -1000, -1000, 508, -1000,
	-1000, -1000, 508, 6206, 680, -1000, -1000, 6705, -1000, 508,
	539, 539, 386, 255, 683, 682, -1000, 127, 679, 658,
	539, 6206, 242, -1000, 6705, 508, -1000, 539, 508, 539,
	539, 665, 708, -1000, 11874, 9537, 9537, 9537, 9537, 9537,
	-1000, 785, 784, -1000, 777, 775, 786, 11641, -1000, 546,
	8599, 136, 708, -1000, 9770, -1000, -1000, 903, 9537, 596,
	-1000, -1000, 678, -91, -95, -1000, -1000, -1000, -1000, 281,
	-1000, 423, 671, 2852, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 737, 424, -1000, 843, 166, 165, 417, 842, -1000,
	-1000, -1000, 823, -1000, 262, -77, -1000, -1000, 374, -32,
	-32, -1000, -1000, 124, 817, 124, 124, 124, 403, 403,
	-1000, -1000, -1000, -1000, 357, -1000, -1000, -1000, 354, -1000,
	760, 11408, 3374, -1000, -1000, -1000, -1000, 250, 250, 219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 22, 735, -1000, -1000, -1000, 11, 10, 64, -1000,
	3374, -1000, 256, -1000, 391, 6705, -1000, -1000, -1000, 799,
	281, 281, 126, -1000, -1000, 11641, -1000, -1000, -1000, -1000,
	623, -1000, -1000, -1000, 3635, 6206, -1000, 451, 2052, 1357,
	-1000, 7183, 7183, -1000, -1000, 539, 6206, 281, -1000, -1000,
	-1000, 72, 396, 72, 7183, 7183, 7183, 7183, 4418, 7183,
	7183, 7183, 7183, -173, 642, 211, -1000, 6705, 313, -1000,
	-1000, -1000, -1000, -1000, 752, 11874, 708, -1000, 8360, 11408,
	651, -1000, 200, 700, 734, 750, 711, -1000, -1000, -1000,
	-1000, 781, -1000, 778, -1000, -1000, -1000, -1000, -1000, 80,
	79, 78, 11408, -1000, 894, 6705, 596, -1000, -1000, -1000,
	-138, -144, -1000, -1000, -1000, 3113, -1000, 3113, 11408, 40,
	-1000, 417, 417, -1000, -1000, -1000, 731, 749, 71, -1000,
	-1000, -1000, 540, 124, 124, -1000, 163, -1000, -1000, -1000,
	518, -1000, 515, 657, 511, 11641, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11641, -1000, -1000, -1000, -1000, -1000, 11408, -181,
	399, 11408, 11408, 11641, -1000, 288, -1000, 281, -1000, 4157,
	-1000, 903, 9537, -1000, -1000, 508, -1000, 7183, 2052, 2052,
	-1000, -1000, 508, 718, 718, -1000, 718, 724, -1000, 718,
	-12, 718, -13, 508, 508, 1843, 2151, 1671, 2025, -1000,
	1635, 1992, 1320, 1974, 708, -170, -1000, 281, 6705, -1000,
	845, 622, 647, -1000, -1000, 5958, 508, 506, 103, 486,
	-1000, 894, 11874, 6705, -1000, -1000, 6705, 723, -1000, 6705,
	-1000, -1000, -1000, 708, 708, 708, 486, 867, 281, -1000,
	-1000, -1000, -1000, 2852, -1000, 484, -1000, 718, -1000, -1000,
	-1000, 11408, -56, 916, -1000, -1000, -1000, -1000, 717, -1000,
	-1000, -1000, -1000, -1000, -1000, -32, 383, -32, 350, -1000,
	333, 3374, -1000, -1000, -1000, -1000, 849, -1000, 4157, -1000,
	-1000, 716, -1000, -1000, -1000, 900, 654, -1000, 2052, -1000,
	-1000, 100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7183, 7183, -1000, 7183, 7183, -1000, 7183, 7183, -1000,
	7183, 7183, 7183, 508, 379, 281, 830, -1000, 708, -1000,
	-1000, 670, 11408, 11408, -1000, 11408, 867, -1000, 281, 281,
	11408, 281, 11408, 11408, 11408, 8121, -1000, 131, 11408, -1000,
	482, -1000, 185, -1000, -153, 534, 124, -1000, 124, 524,
	519, -1000, 708, 648, -1000, 199, 11408, 898, 891, -1000,
	-1000, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 17,
	-1000, -1000, 914, -1000, 708, -1000, 715, 83, -1000, -1000,
	-1000, 467, 458, 458, 458, 136, 131, -1000, 395, 176,
	378, -1000, 37, 11408, 266, 829, -1000, 827, 714, -1000,
	-1000, -1000, -1000, -1000, 21, 4157, 3113, 456, -1000, 6705,
	6705, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 508,
	34, -184, 11874, 647, 508, 11408, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 302, -1000, -1000, 11641, -1000, -1000, 340,
	-1000, -1000, 512, 452, -1000, 11408, -1000, -1000, 735, 281,
	628, -1000, 795, -179, -187, 586, -1000, -1000, -1000, 713,
	-1000, -1000, -1000, 21, 808, -181, -1000, 793, -1000, 11408,
	-1000, 18, -1000, -182, 428, 16, -185, 748, 708, -189,
	747, -1000, 908, 6944, -1000, -1000, 910, 152, 152, 1858,
	508, -1000, -1000, -1000, 44, 326, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1146, 33, 449, 1145, 1144, 1143, 1142, 1141, 1139,
	1138, 1136, 1135, 1130, 1126, 1125, 1123, 1116, 1110, 1109,
	1108, 1092, 1091, 1089, 1088, 1087, 99, 1086, 1085, 1081,
	71, 1078, 60, 1077, 1076, 46, 76, 50, 41, 391,
	1072, 35, 53, 59, 1071, 38, 1070, 1069, 64, 1068,
	48, 1065, 1063, 201, 1060, 1059, 10, 30, 1058, 1057,
	1054, 1052, 98, 1042, 1050, 1049, 1048, 1046, 1045, 1044,
	51, 8, 12, 47, 19, 1043, 416, 6, 1040, 52,
	1039, 1036, 1033, 1032, 16, 1030, 57, 1027, 18, 56,
	1024, 15, 65, 28, 20, 7, 69, 58, 1018, 14,
	61, 54, 1017, 1016, 411, 1014, 1012, 42, 1011, 1009,
	26, 154, 326, 1008, 1007, 1004, 1002, 37, 0, 504,
	418, 63, 1001, 999, 997, 1597, 70, 49, 17, 988,
	55, 1216, 40, 987, 985, 31, 981, 980, 979, 978,
	971, 970, 969, 84, 966, 964, 963, 24, 22, 962,
	961, 62, 23, 958, 957, 955, 44, 66, 954, 953,
	45, 29, 950, 949, 948, 947, 946, 27, 9, 943,
	13, 941, 21, 940, 25, 939, 4, 935, 11, 934,
	3, 933, 5, 43, 1, 932, 2, 931, 930, 311,
	701, 929, 928, 107,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 191, 191, 48, 48, 92, 92, 10, 10, 10,
	10, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	133, 133, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 181, 180, 180, 179, 179, 178, 17, 163, 165,
	165, 164, 164, 164, 164, 157, 136, 136, 136, 136,
	139, 139, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 142,
	142, 142, 156, 156, 143, 143, 151, 151, 152, 152,
	152, 149, 149, 150, 150, 153, 153, 153, 144, 144,
	144, 144, 144, 144, 144, 144, 146, 146, 146, 154,
	154, 147, 147, 147, 148, 148, 148, 155, 155, 155,
	155, 155, 145, 145, 158, 158, 173, 173, 172, 172,
	172, 162, 162, 169, 169, 169, 169, 169, 160, 160,
	161, 161, 171, 171, 170, 159, 159, 174, 174, 174,
	174, 185, 186, 184, 184, 184, 184, 184, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 177, 175, 175, 176, 176, 13, 18, 18, 14,
	14, 14, 14, 14, 15, 15, 19, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 108, 108,
	106, 106, 109, 109, 107, 107, 107, 110, 110, 110,
	134, 134, 134, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 16, 192, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 122,
	122, 122, 121, 121, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 55, 55, 91, 91, 93, 93,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	129, 129, 128, 128, 128, 127, 127, 49, 49, 49,
	51, 50, 50, 50, 50, 52, 52, 54, 54, 53,
	53, 56, 56, 56, 56, 57, 57, 39, 39, 39,
	39, 39, 39, 39, 105, 105, 59, 59, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 69, 69,
	69, 69, 69, 69, 60, 60, 60, 60, 60, 60,
	60, 35, 35, 70, 70, 70, 76, 71, 71, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 67, 67, 67, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 66, 66, 66, 66, 66,
	66, 66, 66, 193, 193, 68, 68, 68, 68, 33,
	33, 33, 33, 33, 132, 132, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 80,
	80, 34, 34, 78, 78, 79, 81, 81, 77, 77,
	77, 62, 62, 62, 62, 62, 62, 62, 62, 64,
	64, 64, 82, 82, 83, 83, 84, 84, 85, 85,
	86, 87, 87, 87, 88, 88, 88, 88, 89, 89,
	89, 61, 61, 61, 61, 61, 61, 90, 90, 90,
	90, 94, 94, 72, 72, 74, 74, 73, 75, 95,
	95, 99, 96, 96, 100, 100, 100, 100, 98, 98,
	98, 124, 124, 124, 103, 103, 111, 111, 112, 112,
	104, 104, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 114, 115, 115, 116, 116, 116,
	123, 123, 119, 119, 120, 120, 125, 125, 126, 126,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 189, 190, 130, 131,
	131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 4, 2, 0, 3, 5, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 7, 5, 5, 5, 12, 7,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 2,
	2, 2, 2, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -189, 8, 251, 54, -188, 266, -84, 15, -28,
	5, -26, -192, -26, -26, -26, -26, -26, -163, -165,
	54, 90, -116, 125, 72, 243, 122, 123, 129, -119,
	57, -118, 259, 135, 162, 173, 167, 194, 186, 136,
	184, 187, 230, 214, 225, 66, 165, 239, 145, 182,
	178, 176, 27, 227, 199, 264, 177, 226, 121, 138,
	133, 200, 204, 231, 171, 172, 233, 198, 134, 33,
	261, 35, 153, 234, 202, 197, 193, 196, 170, 192,
	39, 206, 205, 207, 229, 189, 139, 179, 18, 237,
	148, 151, 228, 201, 203, 130, 155, 263, 235, 175,
	140, 152, 147, 238, 141, 166, 232, 241, 38, 211,
	169, 132, 163, 159, 216, 190, 154, 180, 181, 195,
	168, 191, 164, 156, 149, 240, 212, 265, 188, 185,
	160, 157, 158, 217, 218, 219, 220, 221, 222, 161,
	262, 236, 183, 213, -104, 125, 220, 127, 123, 123,
	124, 125, 243, 122, 123, -53, -125, 57, -118, 125,
	123, 108, 187, 230, 115, 215, 227, 124, 33, 228,
	155, -134, 123, -106, 214, 217, 218, 219, 222, 220,
	161, 57, 232, 231, 223, -125, 164, -130, -130, -130,
	-130, -130, 216, 216, -130, -2, -88, 17, 16, -5,
	-3, -189, 6, 20, 21, -32, 40, 41, -27, -38,
	99, -39, -125, -58, 74, -63, 29, 57, -118, 23,
	-62, -59, -77, -75, -76, 108, 109, 110, 97, 98,
	105, 75, 111, -67, -65, -66, -68, 59, 58, 67,
	60, 61, 62, 63, 68, 69, 70, -119, -73, -189,
	44, 45, 252, 253, 254, 255, 258, 256, 77, 34,
	242, 250, 249, 248, 246, 247, 244, 245, 128, 243,
	103, 251, -104, -104, 11, -48, -53, -96, -133, 164,
	-100, 232, 231, -120, -98, -119, -117, 230, 187, 229,
	120, 73, 22, 24, 209, 76, 108, 16, 77, 107,
	252, 115, 48, 244, 245, 242, 254, 255, 243, 215,
	29, 10, 25, 143, 21, 101, 117, 80, 81, 146,
	23, 144, 70, 19, 51, 11, 13, 14, 128, 127,
	92, 124, 46, 8, 111, 26, 89, 42, 28, 44,
	90, 17, 246, 247, 31, 258, 150, 103, 49, 36,
	74, 68, 71, 52, 72, 15, 47, 91, 118, 251,
	45, 122, 6, 257, 30, 142, 43, 123, 79, 126,
	69, 5, 129, 32, 9, 50, 53, 248, 249, 250,
	34, 78, 12, -164, 90, -157, 57, -53, 124, -53,
	251, -112, 128, -112, -112, 123, -53, 115, 117, 120,
	52, -18, -53, -111, 128, 57, -111, -111, -111, -53,
	112, -53, 57, 30, -131, -189, -120, 243, 57, 155,
	123, 156, 125, -131, -131, -131, -131, 159, 160, -131,
	-109, -108, 225, 226, 216, 224, 12, 216, 158, -131,
	-130, -130, -190, 56, -89, 19, 31, -39, -125, -85,
	-86, -39, -84, -2, -26, 36, -30, 21, 65, 11,
	-122, 73, 72, 89, -121, 22, -119, 59, 112, -39,
	-60, 92, 74, 90, 91, 76, 94, 93, 104, 97,
	98, 99, 100, 101, 102, 103, 95, 96, 107, 82,
	83, 84, 85, 86, 87, 88, -105, -189, -76, -189,
	113, 114, -63, -63, -63, -63, -63, -63, -63, -63,
	-189, -2, -71, -39, -189, -189, -189, -189, -189, -189,
	-189, -189, -189, -80, -39, -189, -193, -189, -193, -193,
	-193, -193, -193, -193, -193, -189, -189, -189, -189, -54,
	26, -53, -41, -42, -43, -44, -55, -76, -189, -53,
	-53, -48, -191, 55, 11, 53, 55, -96, 164, -97,
	-101, 233, 235, 82, -124, -119, 59, 29, 30, 56,
	55, -53, -136, -139, -141, -140, -142, -137, -138, 184,
	185, 108, 188, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 30, 145, 180, 181, 182, 183, 200,
	201, 202, 203, 204, 205, 206, 207, 167, 168, 169,
	170, 171, 172, 173, 175, 176, 177, 178, 179, 57,
	-131, 125, 57, 74, 57, -53, -53, -131, 157, 157,
	123, 123, -53, 55, 126, -48, 23, 52, -53, 57,
	57, -126, -125, -117, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, 11, -107, 11, 92, -39, 52,
	9, 92, 55, 18, 112, 55, -87, 24, 25, -88,
	-190, -32, -64, -119, 60, 63, -31, 43, -53, -39,
	-39, -69, 68, 74, 69, 70, -121, 99, -126, -120,
	-117, -63, -70, -73, -76, 64, 92, 90, 91, 76,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -132, 57, 59, 57, -62,
	-62, -119, -37, 21, -36, -38, -190, 55, -190, -2,
	-36, -36, -39, -39, -77, 59, -119, -125, -77, 59,
	-36, -30, -78, -79, 78, -77, -190, -36, -37, -36,
	-36, -92, 151, -53, 30, 55, -49, -51, -50, -52,
	42, 46, 48, 43, 44, 45, 49, -129, 22, -41,
	-189, -128, 151, -127, 22, -125, 59, -92, 53, -41,
	-53, -100, -97, 55, 234, 236, 237, 52, 71, -39,
	-148, 107, -166, -167, -168, -120, 59, 60, -157, -158,
	-159, -169, 137, -174, 130, 132, 129, -160, 138, 124,
	28, 56, -153, 68, 74, -149, 212, -143, 54, -143,
	-143, -143, -143, -147, 187, -147, -147, -147, 54, 54,
	-143, -143, -143, -151, 54, -151, -151, -152, 54, -152,
	-123, 53, -53, -131, 23, -131, -113, 120, 117, 118,
	-177, 116, 209, 187, 66, 29, 15, 252, 151, 265,
	57, 152, -119, -119, -53, -53, 120, 117, -53, -53,
	-53, -131, -53, -110, 90, 12, -125, -125, -53, 38,
	-39, -39, -126, -86, -89, -103, 19, 11, 34, 34,
	-36, 68, 69, 70, 112, -189, -70, -63, -63, -63,
	-35, 146, 73, -190, -190, -36, 55, -39, -190, -190,
	-190, 55, 53, 22, 55, 11, 55, 11, 112, 55,
	11, 55, 11, -190, -36, -81, -79, 80, -39, -190,
	-190, -190, -190, -190, -61, 30, 34, -2, -189, -189,
	-95, -99, -77, -42, -43, -43, -42, -43, 42, 42,
	42, 47, 42, 47, 42, -50, -125, -190, -56, 50,
	127, 51, -189, -127, -57, 12, -41, -57, -101, -102,
	238, 235, 241, 57, 59, 55, -168, 82, 54, 57,
	28, -160, -160, -161, 57, -161, 28, -144, 29, 68,
	-150, 213, 60, -147, -147, -148, 30, -148, -148, -148,
	-156, 59, -156, 60, 60, 52, -119, -131, -130, -183,
	131, 137, 138, 133, 57, 124, 28, 130, 132, 151,
	129, -183, -114, -115, 126, 22, 124, 28, 151, -182,
	53, 157, 157, 126, -131, -107, 59, -39, 39, 112,
	-53, -40, 11, 99, -120, -37, -35, 73, -63, -63,
	-190, -38, -135, 108, 184, 145, 182, 178, 198, 189,
	211, 180, 212, -132, -135, -63, -63, -63, -63, -120,
	-63, -63, -63, -63, 259, -84, 81, -39, 79, -94,
	52, -95, -72, -74, -73, -189, -2, -90, -119, -93,
	-119, -57, 55, 82, -46, -45, 52, 53, -47, 52,
	-45, 42, 42, 124, 124, 124, -93, -84, -39, -57,
	235, 239, 240, -167, -168, -171, -170, -119, -174, -161,
	-161, 54, -146, 52, 59, 60, 61, 68, 242, 67,
	56, -148, -148, 57, 108, 56, 55, 56, 55, 56,
	55, -53, -130, -130, -53, -130, -119, -180, 262, -181,
	57, -119, -119, -53, -110, -57, -41, -190, -63, -190,
	-143, -143, -143, -152, -143, 172, -143, 172, -190, -190,
	-190, 55, 19, -190, 55, 19, -190, 55, 19, -190,
	55, 19, -189, -34, 257, -39, 27, -94, 55, -190,
	-190, -190, 55, 112, -190, 55, -84, -99, -39, -39,
	54, -39, -189, -189, -189, -190, -88, 56, 55, -143,
	-91, -119, -154, 209, 9, 54, -147, 59, -147, 60,
	60, -131, 26, -179, -178, -120, 54, -82, 13, -147,
	57, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-190, 59, 28, -74, 34, -2, -189, -119, -119, -119,
	-88, -91, -91, -91, -91, -128, -173, -172, 53, 134,
	66, -170, 56, 55, -155, 130, 28, 129, 242, 56,
	-148, -148, 56, 56, -189, 55, 82, -91, -83, 14,
	16, -190, -190, -190, -190, -190, -190, -190, -190, -33,
	92, 262, 9, -72, -2, 112, 56, -190, -190, -190,
	-56, -172, 57, -162, 82, 59, 140, -119, -145, 66,
	28, 28, 54, -175, -176, 151, -178, -168, 56, -39,
	-71, -190, 260, 49, 263, -95, -190, -119, 60, -53,
	59, 56, -190, 55, -119, -182, 39, 261, 264, 54,
	-176, 34, -180, 39, -91, 153, 262, 56, 154, 263,
	-185, -186, 52, -189, 264, -186, 52, 10, 9, -63,
	150, -184, 141, 136, 139, 30, -184, -190, -190, 135,
	29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 556, 0, 317, 317, 317, 317, 317, 317,
	0, 627, 610, 0, 0, 0, 0, -2, 304, 305,
	0, 307, 308, 848, 848, 848, 848, 848, 0, 0,
	848, 0, 35, 36, 846, 1, 3, 564, 0, 0,
	321, 324, 319, 0, 610, 610, 0, 0, 62, 63,
	0, 0, 0, 832, 0, 608, 608, 608, 628, 629,
	632, 633, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 0, 0, 0, 611, 0, 606,
	0, 606, 606, 606, 0, 255, 389, 636, 637, 832,
	0, 0, 0, 849, 0, 849, 267, 849, 849, 270,
	849, 0, 849, 0, 277, 279, 280, 281, 282, 0,
	286, 849, 301, 302, 291, 303, 306, 309, 310, 311,
	312, 313, 848, 848, 316, 29, 568, 0, 0, 556,
	31, 0, 317, 322, 323, 327, 325, 326, 318, 0,
	335, 339, 0, 397, 0, 402, 404, -2, -2, 0,
	439, 440, 441, 442, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 468, 469, 470, 541, 542, 543,
	544, 545, 546, 547, 548, 406, 407, 538, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	503, 503, 503, 503, 503, 503, 503, 503, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 47, 0, 823,
	592, -2, -2, 0, 0, 634, 635, -2, 742, -2,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 0, 0, 81, 0, 79, 0, 849,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 256, 849, 849, 259, 850, 851, 849, 849, 849,
	849, 849, 849, 266, 268, 269, 271, 849, 849, 273,
	0, 294, 292, 293, 288, 289, 0, 283, 284, 287,
	314, 315, 30, 847, 24, 0, 0, 565, 0, 557,
	558, 561, 564, 29, 324, 0, 329, 328, 320, 0,
	336, 0, 0, 0, 340, 0, 342, 343, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 424,
	425, 426, 427, 428, 429, 430, 403, 0, 417, 0,
	0, 0, 459, 460, 461, 462, 463, 464, 465, 0,
	331, 29, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 0, 530, 0, 495, 0, 496, 497,
	498, 499, 500, 501, 502, 0, 331, 0, 0, 45,
	0, 388, 0, 346, 348, 349, 350, -2, 0, 372,
	-2, 0, 0, 0, 41, 42, 0, 48, 823, 50,
	51, 0, 0, 0, 164, 601, 602, 603, 599, 208,
	0, 0, 145, 141, 87, 88, 89, 134, 91, 134,
	134, 134, 134, 161, 161, 161, 161, 117, 118, 119,
	120, 121, 0, 0, 104, 134, 134, 134, 108, 124,
	125, 126, 127, 128, 129, 130, 131, 92, 93, 94,
	95, 96, 97, 98, 136, 136, 136, 138, 138, 630,
	65, 0, 849, 0, 849, 77, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 249, 607, 0, 849, 252,
	253, 390, 638, 639, 257, 258, 260, 261, 262, 263,
	264, 265, 272, 276, 0, 297, 0, 0, 278, 0,
	569, 0, 0, 0, 0, 0, 560, 562, 563, 568,
	32, 327, 0, 549, 0, 0, 0, 330, 27, 398,
	399, 401, 418, 0, 420, 422, 341, 337, 0, 539,
	-2, 408, 409, 433, 434, 435, 0, 0, 0, 0,
	431, 413, 0, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 458, 514, 515, 0, 456,
	457, 466, 0, 0, 332, 333, 436, 0, 587, 29,
	0, 0, 0, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 536, 533, 0, 0, 504, 0, 0, 0,
	0, 0, 0, 387, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 380, 0, 0, 0, 0, 371, 0,
	0, 391, 792, 373, 0, 375, 376, 395, 0, 395,
	44, 593, 49, 0, 0, 54, 55, 594, 595, 596,
	597, 0, 78, 209, 211, 214, 215, 216, 82, 83,
	84, 0, 0, 196, 0, 0, 190, 190, 0, 188,
	189, 80, 148, 146, 0, 143, 142, 90, 0, 161,
	161, 111, 112, 164, 0, 164, 164, 164, 0, 0,
	105, 106, 107, 99, 0, 100, 101, 102, 0, 103,
	0, 0, 849, 67, 609, 68, 848, 0, 0, 622,
	223, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 0, 69, 225, 227, 226, 0, 0, 0, 247,
	849, 251, 294, 275, 0, 0, 295, 296, 285, 0,
	566, 567, 0, 559, 25, 0, 604, 605, 550, 551,
	344, 419, 421, 423, 0, 331, 410, 431, 414, 0,
	411, 0, 0, 405, 471, 0, 0, 438, -2, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 0, 534, 0, 0, 494,
	505, 506, 507, 508, 581, 0, 0, -2, 0, 0,
	395, 589, 0, 347, 366, 368, 0, 363, 378, 379,
	381, 0, 383, 0, 385, 386, 351, 353, 354, 0,
	0, 0, 0, 374, 556, 0, 395, 40, 52, 53,
	0, 0, 59, 165, 166, 0, 212, 0, 0, 0,
	183, 190, 190, 186, 191, 187, 0, 156, 0, 147,
	86, 144, 0, 164, 164, 113, 0, 114, 115, 116,
	0, 132, 0, 0, 0, 0, 631, 66, 217, 848,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 848, 0, 848, 623, 624, 625, 626, 0, 72,
	0, 0, 0, 0, 250, 297, 298, 299, 570, 0,
	26, 395, 0, 338, 540, 0, 412, 0, 432, 415,
	472, 334, 0, 134, 134, 519, 134, 138, 522, 134,
	524, 134, 527, 0, 0, 0, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 531, 493, 537, 0, 33,
	0, 581, 571, 583, 585, 0, 29, 0, 577, 0,
	358, 556, 0, 0, 360, 367, 0, 0, 361, 0,
	362, 382, 384, 0, 0, 0, 0, 564, 396, 39,
	56, 57, 58, 210, 213, 0, 192, 134, 195, 184,
	185, 0, 159, 0, 149, 150, 151, 152, 153, 155,
	135, 109, 110, 162, 163, 161, 0, 161, 0, 139,
	0, 849, 218, 219, 220, 221, 0, 224, 0, 70,
	71, 0, 229, 248, 274, 552, 345, 473, 416, 476,
	516, 161, 520, 521, 523, 525, 526, 528, 478, 477,
	479, 0, 0, 485, 0, 0, 482, 0, 0, 488,
	0, 0, 0, 0, 0, 535, 0, 34, 0, 586,
	-2, 0, 0, 0, 46, 0, 564, 590, 591, 364,
	0, 369, 0, 0, 0, 372, 38, 175, 0, 194,
	0, 356, 167, 160, 0, 0, 164, 133, 164, 0,
	0, 64, 0, 73, 74, 0, 0, 554, 0, 517,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	492, 532, 0, 584, 0, -2, 0, 579, 578, 359,
	37, 0, 0, 0, 0, 391, 174, 176, 0, 181,
	0, 193, 0, 0, 172, 0, 169, 171, 157, 154,
	122, 123, 137, 140, 0, 0, 0, 0, 28, 0,
	0, 480, 481, 486, 487, 483, 484, 489, 490, 0,
	0, 0, 0, 574, 29, 0, 365, 392, 393, 394,
	355, 177, 178, 0, 182, 180, 0, 357, 85, 0,
	168, 170, 0, 0, 242, 0, 75, 76, 69, 555,
	553, 491, 0, 0, 0, 582, -2, 580, 179, 0,
	173, 158, 241, 0, 0, 72, 510, 0, 513, 0,
	243, 0, 228, 511, 0, 0, 0, 197, 0, 0,
	198, 199, 0, 0, 512, 200, 0, 0, 0, 0,
	0, 201, 203, 204, 0, 0, 202, 244, 245, 205,
	206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 266,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:351
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:359
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:470
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:474
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:583
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:587
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:626
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:633
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:655
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:669
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:888
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:893
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:897
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:906
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:964
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1045
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1076
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1080
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1100
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1178
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1189
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1193
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1207
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1284
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1301
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1322
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1374
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1380
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1390
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1394
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1410
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1426
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1431
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1534
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1539
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1557
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = "full "
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1651
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1655
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1659
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = SessionStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = GlobalStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Commit{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Rollback{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1745
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1749
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1841
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1846
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1870
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1914
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1951
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1965
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1967
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1971
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1979
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1982
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1987
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2002
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2074
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2079
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2083
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2087
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2091
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2110
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = IsNullStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = IsNotNullStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = IsTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = IsNotTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = IsFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = IsNotFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.str = EqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.str = LessThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = GreaterThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = LessEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = GreaterEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = NotEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2277
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = BooleanModeStr
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2617
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = QueryExpansionStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = string("")
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2715
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2744
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &NullVal{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			yyVAL.exprs = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2820
		{
			yyVAL.orderBy = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.str = AscScr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.str = AscScr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.str = DescScr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2858
		{
			yyVAL.limit = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2866
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2875
		{
			yyVAL.str = ""
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.str = ForUpdateStr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2883
		{
			yyVAL.str = ShareModeStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2909
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2917
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2928
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2932
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2936
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.updateExprs = nil
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2945
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2997
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3013
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3017
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3025
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.bytes = []byte("charset")
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &Default{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3056
		{
			yyVAL.byt = 0
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.byt = 1
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3061
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3066
		{
			yyVAL.str = ""
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.str = IgnoreStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3113
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			decNesting(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3393
		{
			skipToEnd(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3398
		{
			skipToEnd(yylex)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			skipToEnd(yylex)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
