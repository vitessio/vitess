//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const SUBSTR = 57541
const SUBSTRING = 57542
const GROUP_CONCAT = 57543
const SEPARATOR = 57544
const MATCH = 57545
const AGAINST = 57546
const BOOLEAN = 57547
const LANGUAGE = 57548
const WITH = 57549
const QUERY = 57550
const EXPANSION = 57551
const UNUSED = 57552

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 215,
	109, 540,
	-2, 536,
	-1, 216,
	109, 541,
	-2, 537,
	-1, 284,
	80, 683,
	-2, 46,
	-1, 285,
	80, 656,
	-2, 47,
	-1, 290,
	80, 643,
	-2, 502,
	-1, 292,
	80, 670,
	-2, 504,
	-1, 656,
	109, 543,
	-2, 539,
	-1, 847,
	5, 28,
	-2, 349,
	-1, 872,
	5, 27,
	-2, 478,
	-1, 1077,
	5, 28,
	-2, 479,
	-1, 1121,
	5, 27,
	-2, 481,
	-1, 1174,
	5, 28,
	-2, 482,
}

const yyPrivate = 57344

const yyLast = 8988

var yyAct = [...]int{

	246, 47, 601, 992, 718, 492, 220, 491, 3, 1016,
	736, 993, 1165, 245, 1083, 794, 791, 926, 774, 539,
	989, 751, 788, 891, 537, 194, 839, 53, 277, 719,
	875, 966, 929, 917, 750, 760, 681, 289, 688, 880,
	691, 707, 658, 425, 385, 431, 784, 747, 47, 715,
	283, 526, 218, 821, 541, 193, 199, 188, 203, 272,
	52, 445, 276, 161, 281, 1193, 1183, 1191, 1172, 1189,
	795, 1182, 437, 984, 1071, 389, 1137, 406, 768, 908,
	57, 767, 1171, 222, 967, 1095, 270, 1110, 775, 506,
	271, 280, 1060, 1058, 187, 1190, 388, 690, 417, 418,
	207, 189, 190, 191, 192, 59, 60, 61, 62, 63,
	809, 1188, 969, 396, 1166, 950, 716, 1135, 737, 739,
	397, 392, 155, 607, 808, 1021, 1022, 1023, 154, 209,
	155, 947, 600, 1026, 1024, 890, 889, 949, 888, 408,
	762, 410, 387, 762, 971, 275, 975, 393, 970, 1157,
	968, 813, 1080, 167, 156, 973, 157, 158, 159, 216,
	807, 481, 482, 953, 972, 407, 409, 855, 902, 974,
	976, 386, 412, 412, 412, 412, 627, 412, 412, 833,
	630, 449, 401, 394, 412, 395, 748, 1030, 469, 400,
	74, 738, 937, 444, 164, 459, 402, 164, 469, 1040,
	47, 442, 443, 442, 878, 552, 775, 434, 804, 801,
	802, 708, 800, 1136, 1134, 478, 986, 444, 480, 444,
	935, 164, 164, 74, 604, 433, 405, 164, 948, 74,
	946, 761, 633, 634, 761, 811, 814, 1031, 906, 759,
	758, 708, 1160, 862, 439, 490, 1101, 494, 495, 496,
	497, 498, 499, 500, 501, 502, 1170, 505, 507, 507,
	507, 507, 507, 507, 507, 507, 515, 516, 517, 518,
	806, 1025, 50, 399, 830, 831, 832, 538, 443, 442,
	852, 435, 661, 936, 805, 153, 1100, 629, 941, 938,
	931, 932, 939, 934, 933, 444, 921, 665, 521, 920,
	851, 479, 850, 764, 940, 909, 1018, 545, 765, 810,
	943, 663, 664, 662, 164, 682, 164, 683, 443, 442,
	164, 1176, 812, 628, 903, 428, 432, 164, 443, 442,
	1117, 74, 74, 74, 74, 444, 74, 74, 1098, 443,
	442, 918, 450, 74, 895, 444, 269, 551, 508, 509,
	510, 511, 512, 513, 514, 797, 444, 1179, 424, 424,
	275, 460, 461, 462, 463, 464, 465, 466, 459, 74,
	684, 469, 1125, 1163, 937, 598, 493, 403, 462, 463,
	464, 465, 466, 459, 398, 504, 469, 1125, 424, 412,
	1125, 1126, 1092, 1091, 1141, 412, 443, 442, 1011, 424,
	50, 386, 935, 988, 412, 412, 412, 412, 412, 412,
	412, 412, 1140, 444, 1079, 424, 1037, 1036, 412, 412,
	603, 23, 605, 1033, 1034, 608, 1033, 1032, 611, 164,
	648, 650, 651, 845, 424, 649, 164, 164, 164, 614,
	523, 424, 74, 693, 424, 870, 990, 74, 871, 876,
	625, 559, 558, 21, 1027, 612, 548, 23, 956, 635,
	411, 54, 876, 693, 1075, 936, 659, 522, 50, 644,
	941, 938, 931, 932, 939, 934, 933, 523, 1039, 1035,
	877, 47, 896, 845, 1120, 550, 940, 656, 877, 857,
	854, 523, 930, 23, 637, 494, 631, 549, 200, 547,
	845, 845, 695, 654, 50, 423, 700, 703, 652, 198,
	413, 235, 234, 237, 238, 239, 240, 1105, 769, 244,
	236, 241, 523, 789, 276, 276, 276, 276, 276, 720,
	876, 1020, 856, 853, 685, 686, 660, 1005, 899, 538,
	50, 740, 881, 882, 990, 50, 695, 276, 74, 717,
	72, 164, 785, 164, 74, 712, 164, 780, 779, 164,
	65, 164, 602, 74, 74, 74, 74, 74, 74, 74,
	74, 743, 645, 646, 286, 705, 744, 74, 74, 792,
	922, 164, 884, 288, 722, 723, 733, 725, 610, 390,
	776, 777, 778, 696, 697, 742, 74, 741, 421, 704,
	164, 745, 643, 887, 755, 886, 74, 275, 275, 275,
	275, 275, 412, 711, 721, 713, 714, 724, 730, 727,
	790, 728, 275, 731, 493, 726, 729, 698, 699, 793,
	275, 204, 205, 414, 415, 416, 815, 419, 420, 816,
	1187, 786, 787, 1181, 422, 770, 771, 772, 773, 74,
	952, 528, 531, 532, 533, 529, 834, 530, 534, 818,
	438, 781, 782, 783, 732, 74, 532, 533, 656, 1186,
	905, 828, 913, 827, 436, 557, 659, 822, 426, 823,
	164, 404, 746, 164, 164, 164, 164, 164, 1162, 1161,
	427, 288, 288, 288, 288, 164, 288, 288, 164, 1118,
	900, 1073, 164, 288, 1106, 835, 164, 164, 798, 609,
	74, 536, 201, 202, 438, 195, 873, 874, 74, 826,
	213, 1146, 196, 872, 54, 1145, 1108, 825, 877, 447,
	467, 468, 460, 461, 462, 463, 464, 465, 466, 459,
	829, 440, 469, 1154, 1096, 626, 660, 56, 861, 58,
	546, 51, 1, 796, 925, 803, 1164, 1015, 819, 820,
	164, 432, 757, 749, 885, 384, 64, 164, 756, 1133,
	164, 74, 897, 893, 894, 457, 467, 468, 460, 461,
	462, 463, 464, 465, 466, 459, 1094, 844, 469, 910,
	911, 763, 907, 286, 412, 901, 766, 1019, 1159, 904,
	562, 563, 288, 859, 561, 565, 564, 554, 560, 528,
	531, 532, 533, 529, 919, 530, 534, 412, 175, 881,
	882, 282, 912, 846, 914, 915, 916, 535, 553, 441,
	66, 945, 944, 799, 942, 391, 477, 824, 863, 287,
	997, 632, 430, 1144, 1107, 860, 503, 706, 221, 599,
	647, 233, 230, 954, 232, 606, 231, 928, 638, 869,
	451, 219, 211, 960, 615, 616, 617, 618, 619, 620,
	621, 622, 995, 959, 47, 991, 274, 720, 623, 624,
	519, 996, 527, 720, 978, 994, 965, 985, 977, 1007,
	1008, 1009, 525, 656, 524, 279, 883, 879, 999, 273,
	74, 955, 1070, 1000, 1151, 642, 1001, 25, 288, 55,
	74, 206, 19, 18, 288, 17, 20, 16, 15, 14,
	1014, 1012, 29, 288, 288, 288, 288, 288, 288, 288,
	288, 1013, 13, 12, 11, 10, 9, 288, 288, 8,
	636, 7, 6, 5, 483, 484, 485, 486, 487, 488,
	489, 1038, 74, 74, 4, 74, 639, 276, 1028, 1029,
	655, 197, 22, 2, 0, 0, 447, 0, 0, 288,
	0, 0, 0, 1045, 0, 0, 74, 0, 0, 0,
	0, 1049, 0, 0, 164, 1069, 1048, 1041, 0, 0,
	0, 0, 987, 74, 1056, 0, 0, 692, 694, 0,
	1043, 0, 0, 1046, 0, 0, 0, 1002, 1003, 687,
	0, 1004, 1074, 710, 1006, 0, 0, 0, 0, 701,
	701, 0, 1085, 1086, 1087, 709, 1082, 0, 0, 0,
	1088, 0, 0, 74, 74, 897, 0, 0, 1090, 412,
	275, 0, 701, 735, 0, 0, 1053, 1054, 0, 1055,
	0, 1097, 1057, 1099, 1059, 0, 74, 1103, 74, 74,
	0, 286, 1104, 0, 0, 0, 0, 0, 0, 752,
	288, 0, 817, 1109, 0, 0, 995, 0, 288, 1122,
	0, 0, 164, 0, 0, 0, 1121, 1119, 0, 994,
	74, 0, 0, 0, 0, 0, 1093, 0, 0, 1130,
	0, 0, 1132, 74, 164, 0, 0, 1143, 1131, 0,
	74, 0, 0, 74, 0, 0, 164, 0, 1072, 0,
	1142, 995, 0, 47, 1155, 493, 0, 0, 0, 0,
	1156, 288, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 655, 0, 0, 0, 1138, 0, 1139, 0, 0,
	288, 0, 1168, 0, 0, 0, 0, 0, 0, 1173,
	0, 720, 0, 0, 0, 74, 1177, 74, 74, 74,
	164, 74, 657, 74, 0, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	842, 1192, 1185, 1184, 843, 0, 0, 0, 74, 74,
	74, 847, 848, 849, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 864, 0, 865, 866, 867,
	868, 1152, 458, 457, 467, 468, 460, 461, 462, 463,
	464, 465, 466, 459, 429, 0, 469, 0, 0, 74,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 924, 0, 0, 0, 0, 0,
	892, 752, 0, 0, 0, 74, 0, 0, 0, 162,
	288, 0, 186, 0, 0, 1167, 493, 951, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 162, 162, 0, 0,
	0, 0, 162, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 923, 288, 0, 288, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	23, 24, 48, 26, 27, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 1068, 42,
	964, 0, 0, 288, 28, 1153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 37, 0, 288, 0, 50, 0, 0,
	0, 0, 0, 0, 836, 837, 838, 0, 0, 162,
	701, 162, 0, 998, 892, 162, 701, 1010, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 752, 0, 752,
	0, 0, 0, 0, 0, 0, 288, 0, 288, 1017,
	458, 457, 467, 468, 460, 461, 462, 463, 464, 465,
	466, 459, 0, 0, 469, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 0, 0, 36, 43, 44, 0, 0,
	45, 46, 34, 1044, 958, 1050, 0, 0, 0, 0,
	1047, 0, 1052, 288, 38, 39, 0, 40, 41, 0,
	0, 0, 0, 1061, 1062, 1063, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 1076, 1077, 1078, 162, 1081, 0, 0, 0, 0,
	0, 162, 543, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 752, 1084, 0, 1084, 1084, 1084,
	0, 1089, 0, 288, 0, 0, 0, 49, 458, 457,
	467, 468, 460, 461, 462, 463, 464, 465, 466, 459,
	927, 752, 469, 0, 0, 0, 0, 0, 288, 288,
	288, 962, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 980, 1116, 982, 983, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 1128, 1129, 0, 0, 0, 0, 0, 1123,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 1147, 1148, 1149,
	1150, 0, 0, 0, 0, 1084, 162, 0, 162, 173,
	0, 162, 0, 0, 162, 0, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 162, 1169, 0, 0,
	0, 0, 1174, 0, 0, 0, 0, 0, 0, 0,
	1178, 0, 0, 0, 701, 162, 0, 1175, 0, 0,
	0, 0, 1051, 0, 613, 0, 1180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 1197, 0, 168, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 176, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	210, 210, 0, 0, 702, 702, 210, 0, 0, 0,
	0, 174, 0, 0, 178, 0, 0, 0, 0, 0,
	210, 210, 210, 210, 0, 162, 0, 702, 162, 162,
	162, 162, 162, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 169, 162, 0, 0, 0, 543, 0, 0,
	0, 162, 162, 0, 0, 1111, 1112, 0, 1113, 1114,
	1115, 171, 177, 179, 180, 181, 182, 0, 0, 185,
	184, 453, 0, 456, 0, 0, 0, 0, 0, 470,
	471, 472, 473, 474, 475, 476, 0, 454, 455, 452,
	458, 457, 467, 468, 460, 461, 462, 463, 464, 465,
	466, 459, 0, 0, 469, 162, 0, 0, 0, 0,
	0, 0, 162, 113, 0, 162, 689, 0, 217, 0,
	0, 0, 90, 0, 214, 0, 0, 100, 256, 102,
	0, 0, 124, 109, 0, 613, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 210, 50, 0,
	0, 215, 235, 234, 237, 238, 239, 240, 0, 0,
	84, 236, 241, 242, 243, 0, 0, 212, 228, 0,
	255, 458, 457, 467, 468, 460, 461, 462, 463, 464,
	465, 466, 459, 1194, 0, 469, 0, 0, 0, 0,
	225, 226, 208, 0, 210, 0, 267, 0, 227, 0,
	0, 223, 224, 229, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 165, 0, 0, 265, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	0, 146, 147, 148, 149, 110, 83, 96, 123, 257,
	266, 263, 264, 261, 262, 260, 259, 258, 268, 249,
	250, 251, 252, 254, 0, 253, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 1067, 424, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	613, 0, 458, 457, 467, 468, 460, 461, 462, 463,
	464, 465, 466, 459, 0, 702, 469, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 363, 0, 336, 375, 314, 328,
	383, 329, 330, 357, 300, 344, 113, 326, 0, 317,
	295, 323, 296, 315, 338, 90, 341, 313, 365, 347,
	100, 381, 102, 352, 0, 124, 109, 162, 0, 340,
	367, 342, 362, 335, 358, 305, 351, 376, 327, 355,
	377, 0, 0, 0, 73, 0, 753, 754, 0, 162,
	0, 0, 0, 84, 0, 354, 372, 325, 356, 294,
	353, 162, 298, 301, 382, 370, 320, 321, 898, 0,
	0, 0, 0, 0, 0, 339, 343, 359, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 318, 0, 350,
	0, 0, 0, 302, 299, 0, 337, 0, 0, 0,
	304, 0, 319, 360, 0, 293, 368, 334, 165, 371,
	332, 331, 374, 116, 0, 543, 127, 95, 94, 366,
	316, 324, 86, 322, 121, 114, 139, 349, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 297, 0, 125,
	140, 152, 312, 369, 146, 147, 148, 149, 110, 83,
	96, 123, 308, 311, 306, 307, 345, 346, 378, 379,
	380, 361, 303, 0, 309, 310, 0, 364, 348, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 373, 363, 0, 336, 375, 314,
	328, 383, 329, 330, 357, 300, 344, 113, 326, 0,
	317, 295, 323, 296, 315, 338, 90, 341, 313, 365,
	347, 100, 381, 102, 352, 0, 124, 109, 0, 702,
	340, 367, 342, 362, 335, 358, 305, 351, 376, 327,
	355, 377, 0, 0, 0, 73, 0, 753, 754, 0,
	0, 0, 0, 0, 84, 0, 354, 372, 325, 356,
	294, 353, 0, 298, 301, 382, 370, 320, 321, 0,
	0, 0, 0, 0, 0, 0, 339, 343, 359, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	350, 0, 0, 0, 302, 299, 0, 337, 0, 0,
	0, 304, 0, 319, 360, 0, 293, 368, 334, 165,
	371, 332, 331, 374, 116, 0, 0, 127, 95, 94,
	366, 316, 324, 86, 322, 121, 114, 139, 349, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 297, 0,
	125, 140, 152, 312, 369, 146, 147, 148, 149, 110,
	83, 96, 123, 308, 311, 306, 307, 345, 346, 378,
	379, 380, 361, 303, 0, 309, 310, 0, 364, 348,
	75, 0, 101, 150, 118, 92, 141, 373, 363, 0,
	336, 375, 314, 328, 383, 329, 330, 357, 300, 344,
	113, 326, 0, 317, 295, 323, 296, 315, 338, 90,
	341, 313, 365, 347, 100, 381, 102, 352, 0, 124,
	109, 0, 0, 340, 367, 342, 362, 335, 358, 305,
	351, 376, 327, 355, 377, 50, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 354,
	372, 325, 356, 294, 353, 0, 298, 301, 382, 370,
	320, 321, 0, 0, 0, 0, 0, 0, 0, 339,
	343, 359, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 0, 350, 0, 0, 0, 302, 299, 0,
	337, 0, 0, 0, 304, 0, 319, 360, 0, 293,
	368, 334, 165, 371, 332, 331, 374, 116, 0, 0,
	127, 95, 94, 366, 316, 324, 86, 322, 121, 114,
	139, 349, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 297, 0, 125, 140, 152, 312, 369, 146, 147,
	148, 149, 110, 83, 96, 123, 308, 311, 306, 307,
	345, 346, 378, 379, 380, 361, 303, 0, 309, 310,
	0, 364, 348, 75, 0, 101, 150, 118, 92, 141,
	373, 363, 0, 336, 375, 314, 328, 383, 329, 330,
	357, 300, 344, 113, 326, 0, 317, 295, 323, 296,
	315, 338, 90, 341, 313, 365, 347, 100, 381, 102,
	352, 0, 124, 109, 0, 0, 340, 367, 342, 362,
	335, 358, 305, 351, 376, 327, 355, 377, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 354, 372, 325, 356, 294, 353, 0, 298,
	301, 382, 370, 320, 321, 0, 0, 0, 0, 0,
	0, 0, 339, 343, 359, 333, 0, 0, 0, 0,
	0, 0, 957, 0, 318, 0, 350, 0, 0, 0,
	302, 299, 0, 337, 0, 0, 0, 304, 0, 319,
	360, 0, 293, 368, 334, 165, 371, 332, 331, 374,
	116, 0, 0, 127, 95, 94, 366, 316, 324, 86,
	322, 121, 114, 139, 349, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 297, 0, 125, 140, 152, 312,
	369, 146, 147, 148, 149, 110, 83, 96, 123, 308,
	311, 306, 307, 345, 346, 378, 379, 380, 361, 303,
	0, 309, 310, 0, 364, 348, 75, 0, 101, 150,
	118, 92, 141, 373, 363, 0, 336, 375, 314, 328,
	383, 329, 330, 357, 300, 344, 113, 326, 0, 317,
	295, 323, 296, 315, 338, 90, 341, 313, 365, 347,
	100, 381, 102, 352, 0, 124, 109, 0, 0, 340,
	367, 342, 362, 335, 358, 305, 351, 376, 327, 355,
	377, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 354, 372, 325, 356, 294,
	353, 0, 298, 301, 382, 370, 320, 321, 0, 0,
	0, 0, 0, 0, 0, 339, 343, 359, 333, 0,
	0, 0, 0, 0, 0, 653, 0, 318, 0, 350,
	0, 0, 0, 302, 299, 0, 337, 0, 0, 0,
	304, 0, 319, 360, 0, 293, 368, 334, 165, 371,
	332, 331, 374, 116, 0, 0, 127, 95, 94, 366,
	316, 324, 86, 322, 121, 114, 139, 349, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 297, 0, 125,
	140, 152, 312, 369, 146, 147, 148, 149, 110, 83,
	96, 123, 308, 311, 306, 307, 345, 346, 378, 379,
	380, 361, 303, 0, 309, 310, 0, 364, 348, 75,
	0, 101, 150, 118, 92, 141, 373, 363, 0, 336,
	375, 314, 328, 383, 329, 330, 357, 300, 344, 113,
	326, 0, 317, 295, 323, 296, 315, 338, 90, 341,
	313, 365, 347, 100, 381, 102, 352, 0, 124, 109,
	0, 0, 340, 367, 342, 362, 335, 358, 305, 351,
	376, 327, 355, 377, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 354, 372,
	325, 356, 294, 353, 0, 298, 301, 382, 370, 320,
	321, 0, 0, 0, 0, 0, 0, 0, 339, 343,
	359, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	318, 0, 350, 0, 0, 0, 302, 299, 0, 337,
	0, 0, 0, 304, 0, 319, 360, 0, 293, 368,
	334, 165, 371, 332, 331, 374, 116, 0, 0, 127,
	95, 94, 366, 316, 324, 86, 322, 121, 114, 139,
	349, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	297, 0, 125, 140, 152, 312, 369, 146, 147, 148,
	149, 110, 83, 96, 123, 308, 311, 306, 307, 345,
	346, 378, 379, 380, 361, 303, 0, 309, 310, 0,
	364, 348, 75, 0, 101, 150, 118, 92, 141, 373,
	363, 0, 336, 375, 314, 328, 383, 329, 330, 357,
	300, 344, 113, 326, 0, 317, 295, 323, 296, 315,
	338, 90, 341, 313, 365, 347, 100, 381, 102, 352,
	0, 124, 109, 0, 0, 340, 367, 342, 362, 335,
	358, 305, 351, 376, 327, 355, 377, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 354, 372, 325, 356, 294, 353, 0, 298, 301,
	382, 370, 320, 321, 0, 0, 0, 0, 0, 0,
	0, 339, 343, 359, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 0, 350, 0, 0, 0, 302,
	299, 0, 337, 0, 0, 0, 304, 0, 319, 360,
	0, 293, 368, 334, 165, 371, 332, 331, 374, 116,
	0, 0, 127, 95, 94, 366, 316, 324, 86, 322,
	121, 114, 139, 349, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 297, 0, 125, 140, 152, 312, 369,
	146, 147, 148, 149, 110, 83, 96, 123, 308, 311,
	306, 307, 345, 346, 378, 379, 380, 361, 303, 0,
	309, 310, 0, 364, 348, 75, 0, 101, 150, 118,
	92, 141, 373, 363, 0, 336, 375, 314, 328, 383,
	329, 330, 357, 300, 344, 113, 326, 0, 317, 295,
	323, 296, 315, 338, 90, 341, 313, 365, 347, 100,
	381, 102, 352, 0, 124, 109, 0, 0, 340, 367,
	342, 362, 335, 358, 305, 351, 376, 327, 355, 377,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 354, 372, 325, 356, 294, 353,
	0, 298, 301, 382, 370, 320, 321, 0, 0, 0,
	0, 0, 0, 0, 339, 343, 359, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 318, 0, 350, 0,
	0, 0, 302, 299, 0, 337, 0, 0, 0, 304,
	0, 319, 360, 0, 293, 368, 334, 165, 371, 332,
	331, 374, 116, 0, 0, 127, 95, 94, 366, 316,
	324, 86, 322, 121, 114, 139, 349, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 291, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 297, 0, 125, 140,
	152, 312, 369, 146, 147, 148, 149, 292, 290, 96,
	123, 308, 311, 306, 307, 345, 346, 378, 379, 380,
	361, 303, 0, 309, 310, 0, 364, 348, 75, 0,
	101, 150, 118, 92, 141, 373, 363, 0, 336, 375,
	314, 328, 383, 329, 330, 357, 300, 344, 113, 326,
	0, 317, 295, 323, 296, 315, 338, 90, 341, 313,
	365, 347, 100, 381, 102, 352, 0, 124, 109, 0,
	0, 340, 367, 342, 362, 335, 358, 305, 351, 376,
	327, 355, 377, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 354, 372, 325,
	356, 294, 353, 0, 298, 301, 382, 370, 320, 321,
	0, 0, 0, 0, 0, 0, 0, 339, 343, 359,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 318,
	0, 350, 0, 0, 0, 302, 299, 0, 337, 0,
	0, 0, 304, 0, 319, 360, 0, 293, 368, 334,
	165, 371, 332, 331, 374, 116, 0, 0, 127, 95,
	94, 366, 316, 324, 86, 322, 121, 114, 139, 349,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 297,
	0, 125, 140, 152, 312, 369, 146, 147, 148, 149,
	110, 83, 96, 123, 308, 311, 306, 307, 345, 346,
	378, 379, 380, 361, 303, 0, 309, 310, 0, 364,
	348, 75, 0, 101, 150, 118, 92, 141, 373, 363,
	0, 336, 375, 314, 328, 383, 329, 330, 357, 300,
	344, 113, 326, 0, 317, 295, 323, 296, 315, 338,
	90, 341, 313, 365, 347, 100, 381, 102, 352, 0,
	124, 109, 0, 0, 340, 367, 342, 362, 335, 358,
	305, 351, 376, 327, 355, 377, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	354, 372, 325, 356, 294, 353, 0, 298, 301, 382,
	370, 320, 321, 0, 0, 0, 0, 0, 0, 0,
	339, 343, 359, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 318, 0, 350, 0, 0, 0, 302, 299,
	0, 337, 0, 0, 0, 304, 0, 319, 360, 0,
	293, 368, 334, 165, 371, 332, 331, 374, 116, 0,
	0, 127, 95, 94, 366, 316, 324, 86, 322, 121,
	114, 139, 349, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 291, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 297, 0, 125, 140, 152, 312, 369, 146,
	147, 148, 149, 292, 290, 285, 284, 308, 311, 306,
	307, 345, 346, 378, 379, 380, 361, 303, 0, 309,
	310, 0, 364, 348, 75, 0, 101, 150, 118, 92,
	141, 113, 0, 0, 0, 0, 217, 0, 0, 0,
	90, 0, 214, 0, 0, 100, 256, 102, 0, 0,
	124, 109, 1064, 424, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 424, 215,
	235, 234, 237, 238, 239, 240, 0, 0, 84, 236,
	241, 242, 243, 0, 0, 212, 228, 0, 255, 458,
	457, 467, 468, 460, 461, 462, 463, 464, 465, 466,
	459, 0, 0, 469, 0, 0, 0, 0, 225, 226,
	0, 0, 0, 0, 267, 0, 227, 0, 0, 223,
	224, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 265, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 257, 266, 263,
	264, 261, 262, 260, 259, 258, 268, 249, 250, 251,
	252, 254, 0, 253, 75, 0, 101, 150, 118, 92,
	141, 113, 0, 0, 0, 0, 217, 0, 0, 0,
	90, 0, 214, 0, 0, 100, 256, 102, 0, 0,
	124, 109, 0, 424, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 215,
	235, 234, 237, 238, 239, 240, 0, 0, 84, 236,
	241, 242, 243, 0, 0, 212, 228, 0, 255, 458,
	457, 467, 468, 460, 461, 462, 463, 464, 465, 466,
	459, 0, 0, 469, 0, 0, 0, 0, 225, 226,
	208, 0, 0, 0, 267, 0, 227, 0, 0, 223,
	224, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 265, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 257, 266, 263,
	264, 261, 262, 260, 259, 258, 268, 249, 250, 251,
	252, 254, 23, 253, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 113, 0, 0, 0, 0, 217,
	0, 0, 0, 90, 0, 214, 0, 0, 100, 256,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 215, 235, 234, 237, 238, 239, 240, 961,
	0, 84, 236, 241, 242, 243, 0, 0, 212, 228,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 458,
	457, 467, 468, 460, 461, 462, 463, 464, 465, 466,
	459, 225, 226, 469, 0, 0, 0, 267, 0, 227,
	0, 0, 223, 224, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 265,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	257, 266, 263, 264, 261, 262, 260, 259, 258, 268,
	249, 250, 251, 252, 254, 0, 253, 75, 0, 101,
	150, 118, 92, 141, 113, 0, 0, 0, 0, 217,
	0, 0, 0, 90, 0, 214, 0, 0, 100, 256,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 215, 235, 234, 237, 238, 239, 240, 841,
	0, 84, 236, 241, 242, 243, 0, 0, 212, 228,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 458,
	457, 467, 468, 460, 461, 462, 463, 464, 465, 466,
	459, 225, 226, 469, 0, 0, 0, 267, 0, 227,
	0, 0, 223, 224, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 265,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	257, 266, 263, 264, 261, 262, 260, 259, 258, 268,
	249, 250, 251, 252, 254, 113, 253, 75, 0, 101,
	150, 118, 92, 141, 90, 0, 0, 0, 0, 100,
	256, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 215, 235, 234, 237, 238, 239, 240,
	0, 0, 84, 236, 241, 242, 243, 0, 0, 0,
	228, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 0, 0, 0, 0, 267, 0,
	227, 0, 0, 223, 224, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	265, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 1195, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 0, 146, 147, 148, 149, 110, 83, 96,
	123, 257, 266, 263, 264, 261, 262, 260, 259, 258,
	268, 249, 250, 251, 252, 254, 113, 253, 75, 0,
	101, 150, 118, 92, 141, 90, 0, 0, 0, 0,
	100, 256, 102, 0, 0, 124, 109, 0, 0, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 215, 235, 234, 237, 238, 239,
	240, 0, 0, 84, 236, 241, 242, 243, 0, 0,
	0, 228, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 0, 0, 0, 0, 267,
	0, 227, 0, 0, 223, 224, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 265, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 1065, 146, 147, 148, 149, 110, 83,
	96, 123, 257, 266, 263, 264, 261, 262, 260, 259,
	258, 268, 249, 250, 251, 252, 254, 113, 253, 75,
	0, 101, 150, 118, 92, 141, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 458, 457, 467, 468, 460,
	461, 462, 463, 464, 465, 466, 459, 0, 0, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	458, 457, 467, 468, 460, 461, 462, 463, 464, 465,
	466, 459, 0, 0, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 110,
	83, 96, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 113, 0, 0,
	0, 446, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 448, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 443,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	580, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 568, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 73, 0, 581, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 587, 588, 589, 590,
	591, 592, 0, 593, 594, 595, 596, 597, 582, 583,
	584, 585, 566, 567, 0, 0, 569, 0, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 0, 0,
	0, 0, 0, 0, 70, 0, 67, 0, 0, 0,
	71, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 69, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 113, 0, 0, 0, 542, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 544, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 75, 0, 101,
	150, 118, 92, 141, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 0, 146, 147, 148, 149, 110, 83, 96,
	123, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 75, 0,
	101, 150, 118, 92, 141, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 113, 146, 147, 148, 149, 110, 83,
	96, 123, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 0, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	0, 73, 0, 0, 640, 0, 0, 641, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 556, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 73, 0,
	555, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	113, 0, 0, 0, 542, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	544, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 540, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 113, 146, 147,
	148, 149, 110, 83, 96, 123, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 50, 0, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 163, 0, 544, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 113, 146, 147, 148, 149, 110, 83, 96, 123,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 0, 0, 0, 0, 0, 73,
	0, 448, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 75, 0, 101, 150, 118, 92,
	141, 520, 90, 0, 0, 0, 0, 100, 0, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 278, 0, 0, 125, 140, 152, 0,
	113, 146, 147, 148, 149, 110, 83, 96, 123, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 113, 146, 147,
	148, 149, 110, 83, 96, 123, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 113, 146, 147, 148, 149, 110, 83, 96, 123,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 113, 146,
	147, 148, 149, 110, 83, 96, 123, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 0, 75, 0, 101, 150, 118, 92,
	141, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 0, 146, 147, 148, 149,
	110, 83, 96, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141,
}
var yyPact = [...]int{

	1324, -1000, -168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 742, -1000, -1000, -1000, -1000, -1000, -1000, 507,
	5966, 8, 36, 38, 8229, 35, 1597, 8760, -1000, -58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 487, -1000, -1000,
	-1000, -1000, -1000, 698, 706, 492, 692, 592, -1000, 4553,
	0, 7319, 8052, 4133, -1000, 345, 23, 8760, -138, 8406,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29, 8760, -1000, 8760, -3, 328, -3,
	8760, -1000, 73, -1000, -1000, -1000, -1000, 8760, 321, 651,
	21, 2572, 2572, 2572, 2572, -50, 2572, 2572, 547, -1000,
	-1000, -1000, -1000, 2572, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 304, 659, 4976, 4976, 709, -1000, 487,
	-1000, -1000, -1000, 639, -1000, -1000, 180, 730, -1000, 5789,
	72, -1000, 4976, 1729, 347, -1000, -1000, 347, -1000, -1000,
	51, -1000, -1000, 5378, 5378, 5378, 5378, 5378, 5378, 5378,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 347, -1000, 4766, 347, 347, 347,
	347, 347, 347, 347, 347, 4976, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 7875,
	437, 610, -1000, -1000, -1000, 689, 6578, 7142, 8760, 445,
	-1000, 431, 3687, -1000, -1000, -1000, 125, 6932, -1000, -1000,
	-1000, 645, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 397, -1000, 5890, 319, 2572, 12,
	510, 8760, 152, 8760, 2572, 2, 8760, 686, 537, 8760,
	-1000, 3910, -1000, 2572, 2572, 2572, 2572, 2572, 2572, 2572,
	2572, -1000, -1000, -1000, -1000, -1000, -1000, 2572, 2572, -1000,
	-1000, 8760, -1000, -1000, -1000, -1000, 736, 86, 269, 71,
	442, -1000, 208, 698, 304, 592, 6755, 560, -1000, -1000,
	8760, -1000, 4976, 4976, 363, -1000, 7673, -1000, -1000, 3018,
	106, 5378, 219, 223, 5378, 5378, 5378, 5378, 5378, 5378,
	5378, 5378, 5378, 5378, 5378, 5378, 5378, 5378, 5378, 259,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 314, -1000,
	487, 454, 454, 83, 83, 83, 83, 83, 83, 5579,
	1825, 304, 389, 132, 4766, 4553, 4553, 4976, 4976, 8583,
	8583, 4553, 693, 135, 132, 8406, -1000, 304, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4553, 4553, 4553, 4553, -24,
	8760, -1000, 8583, 7319, 7319, 7319, 7319, 7319, -1000, 584,
	578, -1000, 580, 577, 623, 8760, -1000, 386, 6578, 69,
	347, -1000, 7496, -1000, -1000, -24, 7319, 8760, -1000, -1000,
	3687, 431, 4976, 81, -1000, -1000, -1000, -1000, 2349, 115,
	236, -111, -1000, -1000, 465, -1000, 465, 465, 465, 465,
	-87, -87, -87, -87, -1000, -1000, -1000, -1000, -1000, 505,
	504, -1000, 465, 465, 465, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 499, 499, 499, 470, 470, 527, -1000,
	8760, -154, 299, -1000, 685, 95, -1000, 8760, -1000, -1000,
	8760, 2572, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 622, 4976, 4976,
	3464, 4976, -1000, -1000, -1000, 659, -1000, 693, 708, -1000,
	640, 638, 4553, -1000, -1000, 106, 130, -1000, -1000, 207,
	-1000, -1000, -1000, -1000, 70, 347, -1000, 1810, -1000, -1000,
	-1000, -1000, 219, 5378, 5378, 5378, 1447, 1810, 4968, 637,
	683, 83, 281, 281, 93, 93, 93, 93, 93, 266,
	266, -1000, -1000, -1000, 304, -1000, -1000, -1000, 304, 4553,
	429, -1000, -1000, 4976, -1000, 304, 379, 379, 248, 258,
	479, -1000, 58, 478, 379, 4553, 165, -1000, 4976, 304,
	-1000, 379, 304, 379, 379, 415, 347, -1000, 476, -1000,
	124, 610, 491, 531, 768, -1000, -1000, -1000, -1000, 564,
	-1000, 562, -1000, -1000, -1000, -1000, -1000, 19, 17, 16,
	8406, -1000, 716, 468, -1000, -1000, 132, -1000, 288, 428,
	2118, -1000, -1000, -1000, -1000, -1000, -1000, 485, 672, 112,
	268, -1000, -1000, 641, -1000, 171, -114, -1000, -1000, 246,
	-87, -87, -1000, -1000, 81, 642, 81, 81, 81, 283,
	283, -1000, -1000, -1000, -1000, 240, -1000, -1000, -1000, 237,
	-1000, 529, 8406, 2572, -1000, 3241, -1000, -1000, -1000, -1000,
	346, 164, 109, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -25, -1000, 2572, -1000, 612, 132,
	132, 54, -1000, -1000, 8760, -1000, -1000, -1000, -1000, 447,
	-1000, -1000, -1000, 2795, 4553, -1000, 1447, 1810, 4758, -1000,
	5378, 5378, -1000, -1000, 379, 4553, 132, -1000, -1000, -1000,
	-22, 259, -22, 5378, 5378, 3464, 5378, 5378, -148, 446,
	137, -1000, 4976, 326, -1000, -1000, -1000, -1000, -1000, 493,
	8583, 347, -1000, 6377, 8406, 709, 8583, 4976, 4976, -1000,
	-1000, 4976, 484, -1000, 4976, -1000, -1000, -1000, 347, 347,
	347, 344, -1000, 709, -1000, -1000, 2349, -1000, 2349, 8406,
	-1000, 250, -1000, -1000, 480, 67, -1000, -1000, -1000, 399,
	81, 81, -1000, 131, -1000, -1000, -1000, 372, -1000, 369,
	425, 362, 8760, -1000, -1000, 424, -1000, 119, -1000, -1000,
	8406, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8406, 8760, -1000, -1000, -1000, -1000, -1000,
	8406, -1000, -1000, 3241, -1000, 716, 7319, -1000, -1000, 304,
	-1000, 5378, 1810, 1810, -1000, -1000, 304, 465, 465, -1000,
	465, 470, -1000, 465, -67, 465, -68, 304, 304, 4328,
	5554, -1000, 2001, 1329, 347, -145, -1000, 132, 4976, -1000,
	674, 395, 410, -1000, -1000, 4343, 304, 360, 43, 344,
	698, -1000, 132, 132, 132, 8406, 132, 8406, 8406, 8406,
	6176, 8406, 698, 2118, -1000, 338, -1000, 465, -1000, -104,
	735, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -87, 280, -87, 227, -1000, 187, 2572, 3241,
	2349, -1000, 464, -1000, -1000, -1000, -1000, 678, 713, 423,
	-1000, 1810, -1000, -1000, 31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5378, 5378, -1000, 5378, 5378, 5378,
	304, 272, 132, 671, -1000, 347, -1000, -1000, 451, 8406,
	8406, -1000, -1000, 336, -1000, 333, 333, 333, 69, -1000,
	-1000, 527, 8406, -1000, 89, -1000, -128, 81, -1000, 81,
	357, 339, -1000, -1000, -1000, 8406, 347, 711, 705, -1000,
	-1000, 4538, 4538, 4538, 4538, 1131, -1000, -1000, 734, -1000,
	347, -1000, 487, 40, -1000, 8406, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 177, 661, -1000, 660, -1000, -1000, -1000,
	-1000, -1000, 318, -26, -1000, 4976, 4976, -1000, -1000, -1000,
	-1000, 304, 34, -157, 8583, 410, 304, 8406, -1000, -1000,
	263, -1000, -1000, 510, 303, -1000, 8406, 132, 409, -1000,
	605, -152, -160, 408, -1000, -1000, -1000, -154, -1000, -26,
	636, -1000, 602, -1000, -1000, -1000, -31, -155, -48, -158,
	347, -161, 5177, -1000, 4538, 304, -1000, -1000,
}
var yyPgo = [...]int{

	0, 963, 7, 453, 962, 961, 954, 943, 942, 941,
	939, 936, 935, 934, 933, 932, 922, 919, 918, 917,
	916, 915, 913, 912, 80, 911, 909, 907, 72, 905,
	58, 904, 902, 26, 97, 38, 40, 129, 901, 24,
	90, 59, 899, 39, 897, 896, 895, 894, 51, 892,
	882, 28, 880, 876, 10, 30, 862, 861, 860, 859,
	52, 720, 858, 856, 854, 852, 851, 850, 42, 5,
	3, 13, 11, 848, 83, 6, 847, 41, 846, 845,
	844, 843, 27, 842, 45, 841, 25, 43, 840, 14,
	49, 23, 20, 4, 64, 839, 29, 50, 837, 285,
	836, 113, 835, 833, 832, 831, 830, 37, 159, 519,
	510, 61, 829, 16, 828, 1234, 53, 54, 19, 827,
	57, 460, 36, 821, 818, 31, 808, 806, 805, 804,
	801, 800, 78, 799, 798, 797, 18, 47, 796, 792,
	46, 22, 791, 786, 769, 33, 44, 768, 35, 766,
	765, 763, 34, 21, 762, 9, 757, 756, 12, 755,
	17, 754, 15, 753, 2, 32, 752, 751, 0, 505,
	750, 749, 89,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 164, 164, 163, 162, 162, 161, 161,
	160, 16, 149, 150, 150, 150, 146, 126, 126, 126,
	129, 129, 127, 127, 127, 127, 127, 127, 127, 128,
	128, 128, 128, 128, 130, 130, 130, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 145, 145, 132, 132, 140, 140,
	141, 141, 141, 138, 138, 139, 139, 142, 142, 142,
	133, 133, 133, 133, 133, 133, 133, 135, 135, 143,
	143, 136, 136, 136, 137, 137, 144, 144, 144, 144,
	144, 134, 134, 147, 154, 154, 154, 154, 148, 148,
	156, 156, 155, 151, 151, 151, 152, 152, 152, 153,
	153, 153, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 159, 157, 157, 158, 158, 13, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 124, 124, 124,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 171, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 112, 112, 112, 111, 111, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 119, 119, 118, 118, 118, 117, 117,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 100, 100, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 172,
	172, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	122, 122, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 96, 94, 94,
	97, 97, 95, 95, 95, 114, 114, 114, 98, 98,
	101, 101, 102, 102, 99, 99, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 104, 105,
	105, 106, 106, 106, 113, 113, 109, 109, 110, 110,
	115, 115, 116, 116, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 168, 169, 120, 121, 121,
	121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 8, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 3, 4,
	2, 4, 2, 2, 2, 2, 3, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -168, 8, 213,
	53, -167, 228, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, -106, 120, 70, 146,
	118, 124, -109, 56, -108, 221, 150, 161, 155, 182,
	174, 172, 175, 201, 65, 153, 134, 170, 166, 164,
	27, 187, 226, 165, 130, 129, 202, 159, 160, 186,
	32, 223, 34, 142, 185, 181, 184, 158, 180, 38,
	200, 177, 167, 18, 137, 140, 125, 144, 225, 163,
	141, 136, 154, 203, 37, 191, 157, 128, 151, 148,
	178, 143, 168, 169, 183, 156, 179, 152, 145, 138,
	192, 227, 176, 173, 149, 147, 196, 197, 198, 199,
	224, 171, 193, -99, 120, 122, 118, 118, 119, 120,
	118, -51, -115, 56, -108, 120, 146, 118, 106, 175,
	112, 194, 119, 32, 144, -124, 118, 195, 147, 196,
	197, 198, 199, 56, 203, 202, -115, 152, -120, -120,
	-120, -120, -120, -2, -86, 17, 16, -5, -3, -168,
	6, 20, 21, -30, 39, 40, -25, -36, 97, -37,
	-115, -56, 72, -61, 29, 56, -108, 23, -60, -57,
	-75, -73, -74, 106, 107, 95, 96, 103, 73, 108,
	-65, -63, -64, -66, 58, 57, 66, 59, 60, 61,
	62, 67, 68, 69, -109, -71, -168, 43, 44, 214,
	215, 216, 217, 220, 218, 75, 33, 204, 212, 211,
	210, 208, 209, 206, 207, 123, 205, 101, 213, -99,
	-39, -40, -41, -42, -53, -74, -168, -51, 11, -46,
	-51, -94, -123, -97, 203, 202, -110, -95, -109, -107,
	201, 175, 200, 117, 71, 22, 24, 189, 74, 106,
	16, 75, 105, 214, 112, 47, 206, 207, 204, 216,
	217, 205, 194, 29, 10, 25, 132, 21, 99, 114,
	78, 79, 135, 23, 133, 69, 19, 50, 11, 13,
	14, 123, 122, 90, 119, 45, 8, 108, 26, 87,
	41, 28, 43, 88, 17, 208, 209, 31, 220, 139,
	101, 48, 35, 72, 67, 51, 70, 15, 46, 89,
	115, 213, 44, 6, 219, 30, 131, 42, 118, 195,
	77, 121, 68, 5, 124, 9, 49, 52, 210, 211,
	212, 33, 76, 12, -150, -146, 56, 119, -51, 213,
	-109, -102, 123, 118, -51, -51, -101, 123, 56, -101,
	-51, 109, -51, 56, 30, 205, 56, 144, 118, 145,
	120, -121, -168, -110, -121, -121, -121, 148, 149, -121,
	-121, 51, -121, -169, 55, -87, 19, 31, -37, -115,
	-83, -84, -37, -82, -2, -24, 35, -28, 21, 64,
	11, -112, 71, 70, 87, -111, 22, -109, 58, 109,
	-37, -58, 90, 72, 88, 89, 74, 92, 91, 102,
	95, 96, 97, 98, 99, 100, 101, 93, 94, 105,
	80, 81, 82, 83, 84, 85, 86, -100, -168, -74,
	-168, 110, 111, -61, -61, -61, -61, -61, -61, -61,
	-168, -2, -69, -37, -168, -168, -168, -168, -168, -168,
	-168, -168, -168, -78, -37, -168, -172, -168, -172, -172,
	-172, -172, -172, -172, -172, -168, -168, -168, -168, -52,
	26, -51, 30, 54, -47, -49, -48, -50, 41, 45,
	47, 42, 43, 44, 48, -119, 22, -39, -168, -118,
	140, -117, 22, -115, 58, -51, -170, 54, 11, 52,
	54, -94, 80, -114, -109, 58, 29, 30, 55, 54,
	-126, -129, -131, -130, -127, -128, 172, 173, 106, 176,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	30, 134, 168, 169, 170, 171, 155, 156, 157, 158,
	159, 160, 161, 163, 164, 165, 166, 167, 56, -121,
	120, -164, 52, -51, 72, -51, -121, 121, -51, 23,
	51, -51, -116, -115, -107, -121, -121, -121, -121, -121,
	-121, -121, -121, -121, -121, -51, 9, 90, 54, 18,
	109, 54, -85, 24, 25, -86, -169, -30, -62, -109,
	59, 62, -29, 42, -51, -37, -37, -67, 67, 72,
	68, 69, -111, 97, -116, -110, -107, -61, -68, -71,
	-74, 63, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -122, 56, 58, 56, -60, -60, -109, -35, 21,
	-34, -36, -169, 54, -169, -2, -34, -34, -37, -37,
	-75, -109, -115, -75, -34, -28, -76, -77, 76, -109,
	-169, -34, -35, -34, -34, -90, 140, -51, -93, -96,
	-75, -40, -41, -41, -40, -41, 41, 41, 41, 46,
	41, 46, 41, -48, -115, -169, -54, 49, 122, 50,
	-168, -117, -90, -39, -51, -97, -37, -137, 105, -151,
	-152, -153, -110, 58, 59, -146, -147, -154, 125, 124,
	-148, 119, 28, -142, 67, 72, -138, 192, -132, 53,
	-132, -132, -132, -132, -136, 175, -136, -136, -136, 53,
	53, -132, -132, -132, -140, 53, -140, -140, -141, 53,
	-141, -113, 52, -51, -162, 224, -163, 56, 23, -103,
	117, 114, 115, -159, 113, 189, 175, 65, 29, 15,
	214, 140, 227, 56, 141, -51, -51, -121, 37, -37,
	-37, -116, -84, -87, -98, 19, 11, 33, 33, -34,
	67, 68, 69, 109, -168, -68, -61, -61, -61, -33,
	135, 71, -169, -169, -34, 54, -37, -169, -169, -169,
	54, 52, 22, 54, 11, 109, 54, 11, -169, -34,
	-79, -77, 78, -37, -169, -169, -169, -169, -169, -59,
	30, 33, -2, -168, -168, -55, 54, 12, 80, -44,
	-43, 51, 52, -45, 51, -43, 41, 41, 119, 119,
	119, -91, -109, -55, -55, 56, 54, -153, 80, 53,
	28, -148, 56, 56, -133, 29, 67, -139, 193, 59,
	-136, -136, -137, 30, -137, -137, -137, -145, 58, -145,
	59, 59, 51, -109, -121, -161, -160, -110, -120, -165,
	146, 126, 127, 130, 129, 56, 119, 28, 125, 128,
	140, 124, -165, 146, -104, -105, 121, 22, 119, 28,
	140, -121, 38, 109, -51, -38, 11, 97, -110, -35,
	-33, 71, -61, -61, -169, -36, -125, 106, 172, 134,
	170, 166, 186, 177, 191, 168, 192, -122, -125, -61,
	-61, -110, -61, -61, 221, -82, 79, -37, 77, -92,
	51, -93, -70, -72, -71, -168, -2, -88, -109, -91,
	-82, -96, -37, -37, -37, 53, -37, -168, -168, -168,
	-169, 54, -82, -152, -153, -156, -155, -109, 56, -135,
	51, 58, 59, 60, 67, 204, 66, 55, -137, -137,
	56, 106, 55, 54, 55, 54, 55, 54, -51, 54,
	80, -120, -109, -120, -109, -51, -120, -109, -55, -39,
	-169, -61, -169, -132, -132, -132, -141, -132, 160, -132,
	160, -169, -169, -169, 54, 19, -169, 54, 19, -168,
	-32, 219, -37, 27, -92, 54, -169, -169, -169, 54,
	109, -169, -86, -89, -109, -89, -89, -89, -118, -109,
	-86, 55, 54, -132, -143, 189, 9, -136, 58, -136,
	59, 59, -121, -160, -153, 53, 26, -80, 13, -136,
	56, -61, -61, -61, -61, -61, -169, 58, 28, -72,
	33, -2, -168, -109, -109, 54, 55, -169, -169, -169,
	-54, -113, -155, -144, 125, 28, 124, 204, -137, -137,
	55, 55, -89, -168, -81, 14, 16, -169, -169, -169,
	-169, -31, 90, 224, 9, -70, -2, 109, -109, -134,
	65, 28, 28, 55, -157, -158, 140, -37, -69, -169,
	222, 48, 225, -93, -169, -109, 58, -164, -169, 54,
	-109, 38, 223, 226, -162, -158, 33, 38, 142, 224,
	143, 225, -168, 226, -61, 139, -169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 462, 0, 231, 231, 231, 231, 231, 231, 0,
	531, 514, 0, 0, 0, 0, 217, 221, 222, 0,
	224, 225, 717, 717, 717, 717, 717, 0, 33, 34,
	715, 1, 3, 470, 0, 0, 235, 238, 233, 0,
	514, 0, 0, 0, 48, 0, 0, 705, 0, 706,
	512, 532, 533, 536, 537, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 707, 708, 709, 710, 711,
	712, 713, 714, 0, 0, 515, 0, 510, 0, 510,
	0, 192, 302, 540, 541, 705, 706, 0, 0, 0,
	0, 718, 718, 718, 718, 0, 718, 718, 210, 212,
	213, 214, 215, 718, 218, 219, 220, 223, 226, 227,
	228, 229, 230, 27, 474, 0, 0, 462, 29, 0,
	231, 236, 237, 241, 239, 240, 232, 0, 249, 253,
	0, 310, 0, 315, 317, -2, -2, 0, 352, 353,
	354, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 447, 448, 449, 450, 451, 452,
	453, 454, 319, 320, 444, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 435, 0, 409, 409, 409,
	409, 409, 409, 409, 409, 0, 0, 0, 0, 0,
	0, 260, 262, 263, 264, 283, 0, 285, 0, 0,
	40, 44, 0, 498, -2, -2, 0, 0, 538, 539,
	-2, 642, -2, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 0, 63, 0, 0, 718, 0,
	53, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	191, 0, 193, 718, 718, 718, 718, 718, 718, 718,
	718, 202, 719, 720, 203, 204, 205, 718, 718, 207,
	208, 0, 216, 28, 716, 22, 0, 0, 471, 0,
	463, 464, 467, 470, 27, 238, 0, 243, 242, 234,
	0, 250, 0, 0, 0, 254, 0, 256, 257, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 338, 339, 340, 341, 342, 343, 316, 0, 330,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	245, 27, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 436, 0, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 0, 245, 0, 0, 42,
	0, 301, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 293, 0, 0, 0, 0, 284, 0, 0, 304,
	675, 286, 0, 288, 289, 42, 0, 0, 38, 39,
	0, 45, 0, 134, 505, 506, 507, 503, 153, 0,
	117, 113, 68, 69, 106, 71, 106, 106, 106, 106,
	131, 131, 131, 131, 97, 98, 99, 100, 101, 0,
	0, 84, 106, 106, 106, 88, 72, 73, 74, 75,
	76, 77, 78, 108, 108, 108, 110, 110, 534, 50,
	0, 56, 0, 61, 0, 0, 169, 0, 188, 511,
	0, 718, 303, 542, 543, 194, 195, 196, 197, 198,
	199, 200, 201, 206, 209, 211, 475, 0, 0, 0,
	0, 0, 466, 468, 469, 474, 30, 241, 0, 455,
	0, 0, 0, 244, 25, 311, 312, 314, 331, 0,
	333, 335, 255, 251, 0, 445, -2, 321, 322, 346,
	347, 348, 0, 0, 0, 0, 344, 326, 0, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 371, 420, 421, 0, 369, 370, 378, 0, 0,
	246, 247, 349, 0, 493, 27, 0, 0, 0, 0,
	0, 444, 0, 0, 0, 0, 442, 439, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 300, 308, 495,
	0, 261, 279, 281, 0, 276, 291, 292, 294, 0,
	296, 0, 298, 299, 265, 266, 267, 0, 0, 0,
	0, 287, 308, 308, 41, 499, 500, 501, 0, 62,
	154, 156, 159, 160, 161, 64, 65, 0, 0, 0,
	0, 148, 149, 120, 118, 0, 115, 114, 70, 0,
	131, 131, 91, 92, 134, 0, 134, 134, 134, 0,
	0, 85, 86, 87, 79, 0, 80, 81, 82, 0,
	83, 0, 0, 718, 52, 0, 54, 55, 513, 717,
	0, 0, 526, 170, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 0, 187, 718, 190, 0, 472,
	473, 0, 465, 23, 0, 508, 509, 456, 457, 258,
	332, 334, 336, 0, 245, 323, 344, 327, 0, 324,
	0, 0, 318, 383, 0, 0, 351, -2, 386, 387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	0, 440, 0, 0, 400, 411, 412, 413, 414, 487,
	0, 0, -2, 0, 0, 462, 0, 0, 0, 273,
	280, 0, 0, 274, 0, 275, 295, 297, 0, 0,
	0, 0, 271, 462, 37, 135, 0, 157, 0, 0,
	144, 0, 146, 147, 127, 0, 119, 67, 116, 0,
	134, 134, 93, 0, 94, 95, 96, 0, 104, 0,
	0, 0, 0, 535, 51, 57, 58, 0, 162, 717,
	0, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 717, 0, 0, 717, 527, 528, 529, 530,
	0, 189, 476, 0, 24, 308, 0, 252, 446, 0,
	325, 0, 345, 328, 384, 248, 0, 106, 106, 425,
	106, 110, 428, 106, 430, 106, 433, 0, 0, 0,
	0, 445, 0, 0, 0, 437, 399, 443, 0, 31,
	0, 487, 477, 489, 491, 0, 27, 0, 483, 0,
	470, 496, 309, 497, 277, 0, 282, 0, 0, 0,
	285, 0, 470, 155, 158, 0, 150, 106, 145, 129,
	0, 121, 122, 123, 124, 125, 126, 107, 89, 90,
	132, 133, 131, 0, 131, 0, 111, 0, 718, 0,
	0, 163, 0, 164, 166, 167, 168, 0, 458, 259,
	385, 329, 388, 422, 131, 426, 427, 429, 431, 432,
	434, 390, 389, 391, 0, 0, 394, 0, 0, 0,
	0, 0, 441, 0, 32, 0, 492, -2, 0, 0,
	0, 43, 35, 0, 269, 0, 0, 0, 304, 272,
	36, 534, 0, 152, 136, 130, 0, 134, 105, 134,
	0, 0, 49, 59, 60, 0, 0, 460, 0, 423,
	424, 0, 0, 0, 0, 415, 398, 438, 0, 490,
	0, -2, 0, 485, 484, 0, 278, 305, 306, 307,
	268, 143, 151, 141, 0, 138, 140, 128, 102, 103,
	109, 112, 0, 0, 26, 0, 0, 392, 393, 395,
	396, 0, 0, 0, 0, 480, 27, 0, 270, 66,
	0, 137, 139, 53, 0, 183, 0, 461, 459, 397,
	0, 0, 0, 488, -2, 486, 142, 56, 182, 0,
	0, 416, 0, 419, 165, 184, 0, 417, 0, 0,
	0, 0, 0, 418, 0, 0, 185, 186,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 228,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:293
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:298
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:299
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:303
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:326
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:344
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:378
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:390
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:436
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:441
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:445
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:451
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:461
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:465
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:471
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:476
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:481
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:489
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:498
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:502
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:508
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:513
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:529
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:535
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:541
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:548
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:555
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:560
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:564
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:570
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:754
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:759
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:763
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:768
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:772
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:780
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:784
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:790
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:817
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:825
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:830
		{
			yyVAL.optVal = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:834
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:859
		{
			yyVAL.optVal = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:863
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:868
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.str = ""
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:881
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:885
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:890
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:899
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:903
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:907
		{
			yyVAL.colKeyOpt = colKey
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:911
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:920
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:924
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:930
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:936
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:964
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:968
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:974
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:979
		{
			yyVAL.str = ""
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1058
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1063
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1123
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1131
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1136
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.str = SessionStr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.str = GlobalStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Begin{}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Begin{}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &Commit{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Rollback{}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.statement = &OtherRead{}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &OtherRead{}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.statement = &OtherRead{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1329
		{
			setAllowComments(yylex, true)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.bytes2 = nil
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.str = UnionStr
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.str = UnionAllStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.str = UnionDistinctStr
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.str = SQLCacheStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.str = DistinctStr
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.str = StraightJoinHint
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.selectExprs = nil
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1549
		{
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1555
		{
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.empty = struct{}{}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.empty = struct{}{}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = JoinStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = JoinStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.str = StraightJoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = LeftJoinStr
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = LeftJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = RightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = RightJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = NaturalJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1628
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.indexHints = nil
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = IsNullStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = IsNotNullStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = IsTrueStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.str = IsNotTrueStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = IsFalseStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = IsNotFalseStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.str = EqualStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.str = LessThanStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = GreaterThanStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = LessEqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = GreaterEqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = NotEqualStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = nil
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1959
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 395:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 396:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 397:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = BooleanModeStr
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 418:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = QueryExpansionStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.str = string("")
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = nil
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &NullVal{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.exprs = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.expr = nil
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.orderBy = nil
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = AscScr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.str = AscScr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.str = DescScr
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.limit = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.str = ForUpdateStr
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.str = ShareModeStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2467
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.updateExprs = nil
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.bytes = []byte("charset")
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = &Default{}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.byt = 0
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.byt = 1
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.str = IgnoreStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.empty = struct{}{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.empty = struct{}{}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			decNesting(yylex)
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2900
		{
			forceEOF(yylex)
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2905
		{
			forceEOF(yylex)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			forceEOF(yylex)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2913
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
