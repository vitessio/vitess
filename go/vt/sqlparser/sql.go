//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const BIT_LITERAL = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const INTERVAL = 57430
const JSON_EXTRACT_OP = 57431
const JSON_UNQUOTE_EXTRACT_OP = 57432
const CREATE = 57433
const ALTER = 57434
const DROP = 57435
const RENAME = 57436
const ANALYZE = 57437
const TABLE = 57438
const INDEX = 57439
const VIEW = 57440
const TO = 57441
const IGNORE = 57442
const IF = 57443
const UNIQUE = 57444
const USING = 57445
const PRIMARY = 57446
const SHOW = 57447
const DESCRIBE = 57448
const EXPLAIN = 57449
const DATE = 57450
const ESCAPE = 57451
const REPAIR = 57452
const OPTIMIZE = 57453
const TRUNCATE = 57454
const MAXVALUE = 57455
const PARTITION = 57456
const REORGANIZE = 57457
const LESS = 57458
const THAN = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const TIME = 57473
const TIMESTAMP = 57474
const DATETIME = 57475
const YEAR = 57476
const CHAR = 57477
const VARCHAR = 57478
const BOOL = 57479
const CHARACTER = 57480
const VARBINARY = 57481
const NCHAR = 57482
const TEXT = 57483
const TINYTEXT = 57484
const MEDIUMTEXT = 57485
const LONGTEXT = 57486
const BLOB = 57487
const TINYBLOB = 57488
const MEDIUMBLOB = 57489
const LONGBLOB = 57490
const JSON = 57491
const ENUM = 57492
const NULLX = 57493
const AUTO_INCREMENT = 57494
const APPROXNUM = 57495
const SIGNED = 57496
const UNSIGNED = 57497
const ZEROFILL = 57498
const DATABASES = 57499
const TABLES = 57500
const VITESS_KEYSPACES = 57501
const VITESS_SHARDS = 57502
const VSCHEMA_TABLES = 57503
const NAMES = 57504
const CHARSET = 57505
const CURRENT_TIMESTAMP = 57506
const DATABASE = 57507
const CURRENT_DATE = 57508
const CURRENT_TIME = 57509
const LOCALTIME = 57510
const LOCALTIMESTAMP = 57511
const UTC_DATE = 57512
const UTC_TIME = 57513
const UTC_TIMESTAMP = 57514
const REPLACE = 57515
const CONVERT = 57516
const CAST = 57517
const GROUP_CONCAT = 57518
const SEPARATOR = 57519
const MATCH = 57520
const AGAINST = 57521
const BOOLEAN = 57522
const LANGUAGE = 57523
const WITH = 57524
const QUERY = 57525
const EXPANSION = 57526
const UNUSED = 57527

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 263,
	77, 555,
	105, 555,
	-2, 38,
	-1, 265,
	77, 577,
	105, 577,
	-2, 40,
	-1, 270,
	105, 456,
	-2, 452,
	-1, 271,
	105, 457,
	-2, 453,
	-1, 543,
	5, 21,
	-2, 403,
	-1, 580,
	105, 459,
	-2, 455,
	-1, 733,
	5, 22,
	-2, 281,
	-1, 824,
	5, 22,
	-2, 404,
	-1, 896,
	5, 21,
	-2, 406,
	-1, 963,
	5, 22,
	-2, 407,
}

const yyPrivate = 57344

const yyLast = 7312

var yyAct = [...]int{

	331, 37, 502, 839, 968, 606, 305, 262, 721, 901,
	300, 440, 685, 619, 380, 3, 722, 271, 873, 235,
	678, 379, 43, 794, 583, 600, 786, 571, 291, 579,
	330, 702, 592, 718, 757, 655, 688, 582, 37, 294,
	687, 353, 62, 359, 273, 303, 240, 135, 227, 368,
	42, 255, 234, 383, 244, 251, 635, 266, 134, 267,
	615, 995, 250, 47, 986, 228, 992, 292, 227, 227,
	633, 981, 249, 990, 227, 985, 980, 886, 933, 277,
	753, 599, 843, 49, 50, 51, 52, 955, 607, 928,
	926, 989, 987, 969, 777, 639, 910, 283, 229, 230,
	231, 232, 233, 623, 632, 971, 469, 468, 478, 479,
	471, 472, 473, 474, 475, 476, 477, 470, 284, 279,
	480, 774, 410, 125, 126, 126, 442, 776, 128, 129,
	130, 736, 448, 940, 735, 391, 443, 734, 275, 280,
	564, 566, 307, 227, 422, 227, 131, 758, 127, 227,
	62, 629, 634, 627, 427, 428, 429, 430, 431, 432,
	433, 594, 434, 435, 436, 437, 438, 423, 424, 425,
	426, 408, 409, 637, 640, 411, 390, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 747, 911, 607,
	909, 492, 493, 254, 594, 918, 827, 631, 469, 468,
	478, 479, 471, 472, 473, 474, 475, 476, 477, 470,
	565, 630, 480, 798, 775, 874, 773, 972, 740, 501,
	274, 473, 474, 475, 476, 477, 470, 979, 286, 480,
	852, 399, 470, 636, 387, 480, 787, 876, 328, 480,
	455, 37, 514, 805, 638, 392, 458, 398, 593, 456,
	457, 456, 888, 703, 445, 356, 381, 890, 878, 289,
	882, 355, 877, 60, 875, 458, 227, 458, 751, 880,
	529, 530, 947, 227, 227, 361, 227, 441, 879, 62,
	853, 593, 441, 881, 883, 703, 591, 810, 590, 457,
	456, 268, 803, 447, 62, 596, 227, 662, 227, 62,
	597, 227, 489, 491, 227, 357, 458, 914, 457, 456,
	913, 660, 661, 659, 457, 456, 779, 780, 781, 494,
	495, 496, 497, 498, 499, 458, 679, 766, 680, 500,
	765, 458, 504, 505, 506, 507, 508, 509, 510, 754,
	513, 515, 515, 515, 515, 515, 515, 515, 515, 523,
	524, 525, 526, 966, 453, 648, 650, 651, 958, 912,
	649, 804, 764, 544, 976, 293, 293, 255, 255, 255,
	255, 290, 267, 546, 690, 531, 62, 543, 851, 40,
	841, 227, 381, 748, 227, 227, 227, 227, 394, 658,
	255, 942, 293, 460, 681, 227, 562, 439, 254, 227,
	906, 905, 227, 267, 285, 227, 274, 227, 227, 792,
	293, 573, 533, 457, 456, 951, 570, 568, 62, 608,
	609, 610, 950, 548, 532, 550, 558, 459, 580, 547,
	458, 549, 858, 857, 602, 603, 604, 605, 567, 855,
	854, 826, 293, 457, 456, 490, 587, 560, 561, 612,
	613, 614, 621, 441, 576, 848, 844, 845, 846, 575,
	458, 227, 693, 293, 643, 847, 227, 366, 293, 227,
	62, 401, 400, 654, 18, 693, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 18, 37, 719, 656, 396, 617, 618, 396, 895,
	290, 819, 822, 44, 572, 504, 365, 18, 366, 254,
	254, 254, 254, 572, 541, 290, 542, 62, 40, 562,
	290, 856, 792, 741, 254, 527, 578, 584, 366, 40,
	580, 62, 254, 241, 601, 40, 620, 707, 682, 683,
	792, 124, 792, 724, 366, 37, 695, 696, 267, 720,
	699, 40, 767, 396, 700, 744, 616, 611, 54, 725,
	729, 719, 62, 451, 706, 539, 708, 709, 732, 710,
	694, 711, 731, 723, 728, 555, 552, 40, 551, 717,
	556, 16, 988, 705, 516, 517, 518, 519, 520, 521,
	522, 248, 984, 553, 737, 778, 644, 535, 554, 983,
	62, 739, 245, 246, 268, 716, 657, 742, 755, 756,
	293, 297, 354, 468, 478, 479, 471, 472, 473, 474,
	475, 476, 477, 470, 746, 441, 480, 239, 692, 557,
	733, 374, 375, 715, 750, 268, 769, 759, 290, 290,
	397, 62, 62, 760, 761, 762, 469, 468, 478, 479,
	471, 472, 473, 474, 475, 476, 477, 470, 295, 949,
	480, 370, 373, 374, 375, 371, 948, 372, 376, 893,
	296, 783, 784, 785, 461, 469, 468, 478, 479, 471,
	472, 473, 474, 475, 476, 477, 470, 745, 820, 480,
	656, 290, 770, 799, 864, 782, 916, 471, 472, 473,
	474, 475, 476, 477, 470, 625, 503, 480, 62, 584,
	450, 378, 360, 512, 469, 468, 478, 479, 471, 472,
	473, 474, 475, 476, 477, 470, 360, 791, 480, 236,
	227, 242, 243, 809, 714, 831, 832, 833, 684, 358,
	290, 807, 713, 961, 237, 44, 960, 936, 572, 789,
	937, 828, 704, 790, 821, 454, 46, 834, 62, 62,
	48, 62, 62, 801, 802, 329, 389, 806, 837, 41,
	1, 628, 812, 577, 813, 814, 815, 816, 967, 836,
	268, 838, 589, 727, 581, 227, 272, 53, 588, 227,
	849, 850, 823, 824, 825, 62, 225, 763, 865, 866,
	908, 842, 657, 595, 752, 598, 946, 749, 404, 405,
	863, 403, 872, 62, 407, 406, 257, 257, 269, 869,
	255, 290, 257, 724, 885, 884, 897, 580, 871, 868,
	887, 645, 646, 256, 652, 653, 402, 227, 861, 894,
	896, 892, 903, 904, 62, 62, 891, 288, 900, 62,
	62, 62, 132, 723, 62, 377, 382, 393, 793, 867,
	441, 742, 768, 290, 622, 55, 907, 835, 584, 772,
	584, 915, 771, 626, 278, 917, 488, 62, 712, 503,
	261, 726, 697, 698, 528, 260, 352, 931, 959, 935,
	276, 257, 924, 257, 808, 511, 724, 257, 37, 701,
	921, 922, 354, 923, 938, 306, 925, 647, 927, 317,
	945, 314, 939, 316, 315, 534, 540, 952, 462, 304,
	298, 563, 253, 362, 62, 692, 723, 369, 954, 796,
	367, 259, 252, 818, 932, 970, 62, 538, 19, 45,
	919, 920, 956, 247, 267, 962, 15, 738, 14, 13,
	12, 23, 929, 930, 11, 10, 9, 8, 62, 281,
	62, 282, 254, 584, 974, 287, 7, 6, 5, 941,
	4, 943, 944, 238, 17, 2, 0, 0, 0, 290,
	290, 982, 290, 840, 0, 0, 0, 62, 0, 0,
	991, 0, 0, 0, 319, 318, 321, 322, 323, 324,
	957, 0, 993, 320, 325, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 257, 0, 862, 0, 0, 0,
	0, 257, 385, 0, 257, 0, 370, 373, 374, 375,
	371, 0, 372, 376, 796, 975, 730, 290, 978, 0,
	0, 0, 0, 0, 257, 835, 257, 0, 0, 257,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 997, 0, 0, 898, 899, 0, 800, 0,
	902, 902, 902, 0, 0, 290, 0, 0, 811, 0,
	0, 0, 364, 0, 18, 38, 20, 21, 0, 0,
	0, 0, 388, 0, 0, 0, 0, 0, 290, 503,
	0, 0, 31, 0, 829, 830, 0, 22, 0, 0,
	0, 0, 444, 0, 446, 0, 0, 449, 0, 0,
	452, 0, 0, 0, 0, 30, 0, 0, 40, 257,
	0, 269, 257, 257, 257, 257, 0, 0, 0, 0,
	0, 0, 0, 559, 0, 840, 0, 257, 0, 0,
	385, 0, 0, 569, 0, 257, 257, 290, 0, 0,
	0, 0, 269, 0, 0, 569, 478, 479, 471, 472,
	473, 474, 475, 476, 477, 470, 268, 0, 480, 964,
	0, 965, 0, 0, 0, 889, 24, 25, 27, 26,
	28, 0, 0, 0, 0, 0, 0, 545, 0, 0,
	29, 32, 33, 0, 0, 34, 35, 36, 977, 257,
	788, 0, 0, 0, 257, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 574, 0, 0, 0, 0, 0,
	469, 468, 478, 479, 471, 472, 473, 474, 475, 476,
	477, 470, 95, 0, 480, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	103, 91, 0, 0, 0, 934, 691, 569, 39, 0,
	0, 691, 691, 0, 0, 691, 0, 624, 61, 0,
	0, 0, 641, 0, 0, 642, 0, 71, 0, 691,
	691, 691, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 0, 0, 269, 0, 0,
	0, 0, 0, 469, 468, 478, 479, 471, 472, 473,
	474, 475, 476, 477, 470, 0, 0, 480, 0, 0,
	0, 0, 0, 0, 0, 973, 503, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	464, 63, 467, 83, 121, 99, 78, 115, 481, 482,
	483, 484, 485, 486, 487, 0, 465, 466, 463, 469,
	468, 478, 479, 471, 472, 473, 474, 475, 476, 477,
	470, 0, 691, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 569, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 860, 0, 213, 203, 176,
	215, 154, 168, 223, 169, 170, 197, 142, 184, 95,
	166, 0, 157, 137, 163, 138, 155, 178, 76, 181,
	153, 205, 187, 221, 84, 192, 0, 103, 91, 0,
	0, 180, 207, 182, 202, 175, 198, 147, 191, 216,
	167, 195, 0, 0, 0, 61, 0, 585, 586, 0,
	0, 0, 0, 0, 71, 0, 194, 212, 165, 196,
	136, 193, 0, 140, 143, 222, 210, 160, 161, 743,
	0, 0, 0, 0, 0, 0, 179, 183, 199, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	190, 0, 0, 269, 144, 141, 177, 0, 0, 0,
	146, 0, 159, 200, 0, 208, 174, 224, 211, 172,
	171, 214, 217, 98, 206, 156, 164, 72, 162, 102,
	96, 113, 189, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 139, 0, 104, 114, 123, 152, 209, 118, 119,
	120, 92, 70, 150, 151, 148, 149, 185, 186, 218,
	219, 220, 201, 145, 0, 0, 204, 188, 63, 0,
	83, 121, 99, 78, 115, 213, 203, 176, 215, 154,
	168, 223, 169, 170, 197, 142, 184, 95, 166, 0,
	157, 137, 163, 138, 155, 178, 76, 181, 153, 205,
	187, 221, 84, 192, 0, 103, 91, 0, 0, 180,
	207, 182, 202, 175, 198, 147, 191, 216, 167, 195,
	0, 0, 0, 61, 0, 585, 586, 0, 0, 0,
	0, 0, 71, 0, 194, 212, 165, 196, 136, 193,
	0, 140, 143, 222, 210, 160, 161, 0, 0, 0,
	0, 0, 0, 0, 179, 183, 199, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 190, 0,
	0, 0, 144, 141, 177, 0, 0, 0, 146, 0,
	159, 200, 0, 208, 174, 224, 211, 172, 171, 214,
	217, 98, 206, 156, 164, 72, 162, 102, 96, 113,
	189, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 139,
	0, 104, 114, 123, 152, 209, 118, 119, 120, 92,
	70, 150, 151, 148, 149, 185, 186, 218, 219, 220,
	201, 145, 0, 0, 204, 188, 63, 0, 83, 121,
	99, 78, 115, 213, 203, 176, 215, 154, 168, 223,
	169, 170, 197, 142, 184, 95, 166, 0, 157, 137,
	163, 138, 155, 178, 76, 181, 153, 205, 187, 221,
	84, 192, 0, 103, 91, 0, 0, 180, 207, 182,
	202, 175, 198, 147, 191, 216, 167, 195, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 194, 212, 165, 196, 136, 193, 0, 140,
	143, 222, 210, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 179, 183, 199, 173, 0, 0, 0, 0,
	0, 0, 953, 0, 158, 0, 190, 0, 0, 0,
	144, 141, 177, 0, 0, 0, 146, 0, 159, 200,
	0, 208, 174, 224, 211, 172, 171, 214, 217, 98,
	206, 156, 164, 72, 162, 102, 96, 113, 189, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 139, 0, 104,
	114, 123, 152, 209, 118, 119, 120, 92, 70, 150,
	151, 148, 149, 185, 186, 218, 219, 220, 201, 145,
	0, 0, 204, 188, 63, 0, 83, 121, 99, 78,
	115, 213, 203, 176, 215, 154, 168, 223, 169, 170,
	197, 142, 184, 95, 166, 0, 157, 137, 163, 138,
	155, 178, 76, 181, 153, 205, 187, 221, 84, 192,
	0, 103, 91, 0, 0, 180, 207, 182, 202, 175,
	198, 147, 191, 216, 167, 195, 40, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	194, 212, 165, 196, 136, 193, 0, 140, 143, 222,
	210, 160, 161, 0, 0, 0, 0, 0, 0, 0,
	179, 183, 199, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 190, 0, 0, 0, 144, 141,
	177, 0, 0, 0, 146, 0, 159, 200, 0, 208,
	174, 224, 211, 172, 171, 214, 217, 98, 206, 156,
	164, 72, 162, 102, 96, 113, 189, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 139, 0, 104, 114, 123,
	152, 209, 118, 119, 120, 92, 70, 150, 151, 148,
	149, 185, 186, 218, 219, 220, 201, 145, 0, 0,
	204, 188, 63, 0, 83, 121, 99, 78, 115, 213,
	203, 176, 215, 154, 168, 223, 169, 170, 197, 142,
	184, 95, 166, 0, 157, 137, 163, 138, 155, 178,
	76, 181, 153, 205, 187, 221, 84, 192, 0, 103,
	91, 0, 0, 180, 207, 182, 202, 175, 198, 147,
	191, 216, 167, 195, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 194, 212,
	165, 196, 136, 193, 0, 140, 143, 222, 210, 160,
	161, 0, 0, 0, 0, 0, 0, 0, 179, 183,
	199, 173, 0, 0, 0, 0, 0, 0, 870, 0,
	158, 0, 190, 0, 0, 0, 144, 141, 177, 0,
	0, 0, 146, 0, 159, 200, 0, 208, 174, 224,
	211, 172, 171, 214, 217, 98, 206, 156, 164, 72,
	162, 102, 96, 113, 189, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 139, 0, 104, 114, 123, 152, 209,
	118, 119, 120, 92, 70, 150, 151, 148, 149, 185,
	186, 218, 219, 220, 201, 145, 0, 0, 204, 188,
	63, 0, 83, 121, 99, 78, 115, 213, 203, 176,
	215, 154, 168, 223, 169, 170, 197, 142, 184, 95,
	166, 0, 157, 137, 163, 138, 155, 178, 76, 181,
	153, 205, 187, 221, 84, 192, 0, 103, 91, 0,
	0, 180, 207, 182, 202, 175, 198, 147, 191, 216,
	167, 195, 0, 0, 0, 61, 0, 395, 0, 0,
	0, 0, 0, 0, 71, 0, 194, 212, 165, 196,
	136, 193, 0, 140, 143, 222, 210, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 179, 183, 199, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	190, 0, 0, 0, 144, 141, 177, 0, 0, 0,
	146, 0, 159, 200, 0, 208, 174, 224, 211, 172,
	171, 214, 217, 98, 206, 156, 164, 72, 162, 102,
	96, 113, 189, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 139, 0, 104, 114, 123, 152, 209, 118, 119,
	120, 92, 70, 150, 151, 148, 149, 185, 186, 218,
	219, 220, 201, 145, 0, 0, 204, 188, 63, 0,
	83, 121, 99, 78, 115, 213, 203, 176, 215, 154,
	168, 223, 169, 170, 197, 142, 184, 95, 166, 0,
	157, 137, 163, 138, 155, 178, 76, 181, 153, 205,
	187, 221, 84, 192, 0, 103, 91, 0, 0, 180,
	207, 182, 202, 175, 198, 147, 191, 216, 167, 195,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 194, 212, 165, 196, 136, 193,
	0, 140, 143, 222, 210, 160, 161, 0, 0, 0,
	0, 0, 0, 0, 179, 183, 199, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 190, 0,
	0, 0, 144, 141, 177, 0, 0, 0, 146, 0,
	159, 200, 0, 208, 174, 224, 211, 172, 171, 214,
	217, 98, 206, 156, 164, 72, 162, 102, 96, 113,
	189, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 139,
	0, 104, 114, 123, 152, 209, 118, 119, 120, 92,
	70, 150, 151, 148, 149, 185, 186, 218, 219, 220,
	201, 145, 0, 0, 204, 188, 63, 0, 83, 121,
	99, 78, 115, 213, 203, 176, 215, 154, 168, 223,
	169, 170, 197, 142, 184, 95, 166, 0, 157, 137,
	163, 138, 155, 178, 76, 181, 153, 205, 187, 221,
	84, 192, 0, 103, 91, 0, 0, 180, 207, 182,
	202, 175, 198, 147, 191, 216, 167, 195, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 194, 212, 165, 196, 136, 193, 0, 140,
	143, 222, 210, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 179, 183, 199, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 190, 0, 0, 0,
	144, 141, 177, 0, 0, 0, 146, 0, 159, 200,
	0, 208, 174, 224, 211, 172, 171, 214, 217, 98,
	206, 156, 164, 72, 162, 102, 96, 113, 189, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 139, 0, 104,
	114, 123, 152, 209, 118, 119, 120, 92, 70, 150,
	151, 148, 149, 185, 186, 218, 219, 220, 201, 145,
	0, 0, 204, 188, 63, 0, 83, 121, 99, 78,
	115, 213, 203, 176, 215, 154, 168, 223, 169, 170,
	197, 142, 184, 95, 166, 0, 157, 137, 163, 138,
	155, 178, 76, 181, 153, 205, 187, 221, 84, 192,
	0, 103, 91, 0, 0, 180, 207, 182, 202, 175,
	198, 147, 191, 216, 167, 195, 0, 0, 0, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	194, 212, 165, 196, 136, 193, 0, 140, 143, 222,
	210, 160, 161, 0, 0, 0, 0, 0, 0, 0,
	179, 183, 199, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 190, 0, 0, 0, 144, 141,
	177, 0, 0, 0, 146, 0, 159, 200, 0, 208,
	174, 224, 211, 172, 171, 214, 217, 98, 206, 156,
	164, 72, 162, 102, 96, 113, 189, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 139, 0, 104, 114, 123,
	152, 209, 118, 119, 120, 92, 70, 150, 151, 148,
	149, 185, 186, 218, 219, 220, 201, 145, 0, 0,
	204, 188, 63, 0, 83, 121, 99, 78, 115, 213,
	203, 176, 215, 154, 168, 223, 169, 170, 197, 142,
	184, 95, 166, 0, 157, 137, 163, 138, 155, 178,
	76, 181, 153, 205, 187, 221, 84, 192, 0, 103,
	91, 0, 0, 180, 207, 182, 202, 175, 198, 147,
	191, 216, 167, 195, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 194, 212,
	165, 196, 136, 193, 0, 140, 143, 222, 210, 160,
	161, 0, 0, 0, 0, 0, 0, 0, 179, 183,
	199, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 190, 0, 0, 0, 144, 141, 177, 0,
	0, 0, 146, 0, 159, 200, 0, 208, 174, 224,
	211, 172, 171, 214, 217, 98, 206, 156, 164, 72,
	162, 102, 96, 113, 189, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 139, 0, 104, 114, 123, 152, 209,
	118, 119, 120, 92, 70, 150, 151, 148, 149, 185,
	186, 218, 219, 220, 201, 145, 0, 0, 204, 188,
	63, 0, 83, 121, 99, 78, 115, 95, 0, 0,
	686, 0, 302, 0, 0, 0, 76, 0, 301, 0,
	0, 339, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 270, 319, 318, 321, 322, 323, 324,
	0, 0, 71, 320, 325, 326, 327, 0, 0, 299,
	312, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 310, 689, 0, 0, 0, 350, 0,
	311, 0, 0, 308, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 348, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 340, 349, 346, 347, 344, 345, 343, 342, 341,
	351, 334, 335, 337, 0, 336, 63, 0, 83, 121,
	99, 78, 115, 95, 0, 0, 0, 0, 302, 0,
	0, 0, 76, 0, 301, 0, 0, 339, 84, 0,
	0, 103, 91, 0, 0, 0, 0, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 270,
	319, 318, 321, 322, 323, 324, 0, 0, 71, 320,
	325, 326, 327, 0, 0, 299, 312, 0, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 309, 310,
	689, 0, 0, 0, 350, 0, 311, 0, 0, 308,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 348, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	0, 0, 118, 119, 120, 92, 70, 340, 349, 346,
	347, 344, 345, 343, 342, 341, 351, 334, 335, 337,
	0, 336, 63, 0, 83, 121, 99, 78, 115, 95,
	0, 0, 0, 0, 302, 0, 0, 0, 76, 0,
	301, 0, 0, 339, 84, 0, 0, 103, 91, 0,
	0, 0, 0, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 293, 270, 319, 318, 321, 322,
	323, 324, 0, 0, 71, 320, 325, 326, 327, 0,
	0, 299, 312, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 309, 310, 0, 0, 0, 0,
	350, 0, 311, 0, 0, 308, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	348, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 0, 0, 118, 119,
	120, 92, 70, 340, 349, 346, 347, 344, 345, 343,
	342, 341, 351, 334, 335, 337, 18, 336, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 95, 0, 0,
	0, 0, 302, 0, 0, 0, 76, 0, 301, 0,
	0, 339, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 270, 319, 318, 321, 322, 323, 324,
	0, 0, 71, 320, 325, 326, 327, 0, 0, 299,
	312, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 310, 0, 0, 0, 0, 350, 0,
	311, 0, 0, 308, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 348, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 340, 349, 346, 347, 344, 345, 343, 342, 341,
	351, 334, 335, 337, 0, 336, 63, 0, 83, 121,
	99, 78, 115, 95, 0, 0, 0, 0, 302, 0,
	0, 0, 76, 0, 301, 0, 0, 339, 84, 0,
	0, 103, 91, 0, 0, 0, 0, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 270,
	319, 318, 321, 322, 323, 324, 0, 0, 71, 320,
	325, 326, 327, 0, 0, 299, 312, 0, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 309, 310,
	0, 0, 0, 0, 350, 0, 311, 0, 0, 308,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 348, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	0, 0, 118, 119, 120, 92, 70, 340, 349, 346,
	347, 344, 345, 343, 342, 341, 351, 334, 335, 337,
	95, 336, 63, 0, 83, 121, 99, 78, 115, 76,
	0, 0, 0, 0, 339, 84, 0, 0, 103, 91,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 270, 319, 318, 321,
	322, 323, 324, 0, 0, 71, 320, 325, 326, 327,
	0, 0, 0, 312, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 309, 310, 0, 0, 0,
	0, 350, 0, 311, 0, 0, 308, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 348, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 994, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 0, 0, 118,
	119, 120, 92, 70, 340, 349, 346, 347, 344, 345,
	343, 342, 341, 351, 334, 335, 337, 95, 336, 63,
	0, 83, 121, 99, 78, 115, 76, 0, 0, 0,
	0, 339, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 270, 319, 318, 321, 322, 323, 324,
	0, 0, 71, 320, 325, 326, 327, 0, 0, 0,
	312, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 310, 0, 0, 0, 0, 350, 0,
	311, 0, 0, 308, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 348, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 340, 349, 346, 347, 344, 345, 343, 342, 341,
	351, 334, 335, 337, 0, 336, 63, 0, 83, 121,
	99, 78, 115, 95, 0, 0, 0, 795, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 797, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 457, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 56, 0,
	0, 0, 59, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 0, 0, 118,
	119, 120, 92, 70, 0, 0, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 63,
	0, 83, 121, 99, 78, 115, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 92,
	70, 0, 0, 18, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 63, 0, 83, 121,
	99, 78, 115, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 95, 0, 118, 119, 120, 92, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 63, 0, 83, 121, 99, 78, 115,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	536, 0, 0, 537, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 0, 0,
	118, 119, 120, 92, 70, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 384, 0, 0, 0,
	63, 76, 83, 121, 99, 78, 115, 84, 0, 0,
	103, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	386, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 40, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 95, 0, 118, 119,
	120, 92, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 91, 0, 0, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 797, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 95, 0, 118, 119, 120, 92, 70,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 63, 0, 83, 121, 99,
	78, 115, 0, 0, 0, 0, 0, 0, 0, 226,
	0, 386, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 363, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 258, 0, 0, 104, 114, 123, 0, 95, 118,
	119, 120, 92, 70, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 103, 91, 0, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 95, 0, 118, 119, 120,
	92, 70, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 103, 91, 0, 0, 63, 0, 83,
	121, 99, 78, 115, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 95, 0, 118, 119, 120, 92, 70, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	103, 91, 0, 0, 63, 0, 83, 121, 99, 78,
	115, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 95, 0, 118, 119,
	120, 92, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 91, 0, 0, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 264, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 0, 0, 118, 119, 120, 265, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 83, 121, 99,
	78, 115,
}
var yyPact = [...]int{

	1078, -1000, -153, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 731, 751, -1000, -1000,
	-1000, -1000, -1000, 508, 5013, 8, 35, 15, 33, 3384,
	6952, -1000, -1000, -1000, -1000, -1000, -1000, 501, -1000, -1000,
	-1000, -1000, -1000, 713, 729, 527, 712, 565, -1000, 7,
	5852, 6481, 7109, -1000, 353, 24, 6952, -111, 1, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 26, 6952, -1000, 6952, 0, 351,
	0, 6952, 2790, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 314, 640, 4316, 4316, 731, -1000,
	501, -1000, -1000, -1000, 706, -1000, -1000, 214, 6323, 477,
	622, -1000, -1000, -1000, 690, 5367, 5695, 129, 6952, 125,
	-1000, 2592, 447, -1000, 611, -1000, -1000, 170, -1000, 126,
	-1000, -1000, 420, -1000, 19, 344, 2196, 21, 6952, 185,
	6952, 2196, 16, 6952, 688, 514, 6952, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 747, 153, 376, -1000, 4316,
	1351, 479, 479, -1000, -1000, 85, -1000, -1000, 4670, 4670,
	4670, 4670, 4670, 4670, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 479, 114,
	-1000, 4130, 479, 479, 479, 479, 479, 479, 4316, 479,
	479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 474, -1000, 247, 713, 314, 565, 5524, 525,
	-1000, -1000, 485, 6952, -1000, 6795, 5852, 5852, 5852, 5852,
	-1000, 539, 537, -1000, 554, 536, 590, 6952, -1000, 416,
	314, 5367, 93, -1000, 6166, -1000, -1000, 3186, 737, 5852,
	6952, -1000, -1000, -1000, -1000, -1000, 6795, -1000, 4316, 2988,
	1800, 167, 231, -91, -1000, -1000, 484, -1000, 484, 484,
	484, 484, -67, -67, -67, -67, -1000, -1000, -1000, -1000,
	-1000, 507, -1000, 484, 484, 484, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 506, 506, 506, 486, 486, -17,
	-1000, -1000, -1000, 6952, -1000, 683, 42, -1000, 6952, -1000,
	-1000, 6952, 2196, -1000, -1000, 561, 4316, 4316, 291, 4316,
	4316, 162, 4670, 329, 226, 4670, 4670, 4670, 4670, 4670,
	4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670, 4670,
	273, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 341,
	-1000, 501, 940, 940, 137, 137, 137, 137, 137, 1225,
	3570, 2988, 411, 346, 4130, 3756, 3756, 4316, 4316, 3756,
	692, 180, 346, 6638, -1000, 314, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3756, 3756, 3756, 3756, 4316, -1000, -1000,
	-1000, 640, -1000, 692, 724, -1000, 602, 574, 3756, -1000,
	512, 6795, 479, -1000, 5190, -1000, 502, 622, 511, 987,
	-1000, -1000, -1000, -1000, 533, -1000, 529, -1000, -1000, -1000,
	-1000, -1000, 314, -1000, 23, 20, 17, -1000, -1000, -1000,
	-1000, 731, 4316, 493, -1000, -1000, -1000, 346, -1000, 113,
	-1000, 472, 1602, -1000, -1000, -1000, -1000, -1000, -1000, 505,
	660, 134, 330, -1000, -1000, 606, -1000, 204, -93, -1000,
	-1000, 283, -67, -67, -1000, -1000, 45, 608, 45, 45,
	45, 307, -1000, -1000, -1000, -1000, 274, -1000, -1000, -1000,
	271, -1000, 503, 6638, 2196, -1000, -1000, 100, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-37, -1000, -1000, -1000, 559, 162, 181, -1000, -1000, 252,
	-1000, -1000, 346, 346, 587, -1000, -1000, -1000, -1000, 329,
	4670, 4670, 4670, 110, 587, 1142, 1076, 524, 137, 127,
	127, 133, 133, 133, 133, 133, 605, 605, -1000, -1000,
	-1000, 314, -1000, -1000, -1000, 314, 3756, 471, -1000, -1000,
	4856, 108, 479, 4316, -1000, 358, 358, 241, 222, 358,
	3756, 212, -1000, 4316, 314, -1000, 358, 314, 358, 358,
	-1000, -1000, 6952, -1000, -1000, -1000, -1000, 491, -1000, 662,
	444, 451, -1000, -1000, 3942, 314, 390, 91, 731, 4316,
	4316, -1000, -1000, -1000, 479, 479, 479, 713, 346, -1000,
	2790, 1800, -1000, 1800, 6638, -1000, 327, -1000, -1000, -87,
	401, -1000, -1000, -1000, 403, 45, 45, -1000, 325, 177,
	-1000, -1000, -1000, 388, -1000, 470, 381, 6952, -1000, -1000,
	-1000, 6952, -1000, -1000, -1000, -1000, -1000, 6638, -1000, -1000,
	-1000, -1000, -1000, 110, 587, 626, -1000, 4670, 4670, -1000,
	-1000, 358, 3756, -1000, -1000, 6009, -1000, -1000, 2394, 3756,
	346, -1000, -1000, 112, 273, 112, -119, 489, 176, -1000,
	4316, 183, -1000, -1000, -1000, -1000, -1000, -1000, 737, 5852,
	642, -1000, 479, -1000, -1000, 468, 6638, 6638, 713, 346,
	346, 6638, 6638, 6638, -1000, -1000, 1602, -1000, 349, -1000,
	484, -1000, 69, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 304, 254, -1000, 251, 2196,
	-1000, -1000, 671, -1000, 4670, 587, 587, -1000, -1000, -1000,
	-1000, 90, 314, 314, 484, 484, -1000, 484, 486, -1000,
	484, -50, 484, -51, 314, 314, 479, -116, -1000, 346,
	4316, 735, 457, 742, -1000, 479, -1000, 501, 28, -1000,
	-1000, 340, -1000, 340, 340, -1000, 6638, -1000, 210, 639,
	-1000, 632, -1000, 370, 363, -1000, 479, 587, 1998, -1000,
	-1000, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4670, 314, 303, 346, 733, 728, 6795, 451, 314,
	6638, -1000, 6638, -1000, -1000, -1000, -1000, 298, -1000, -1000,
	-1000, -1000, -38, -1000, -1000, -1000, 18, -1000, -1000, -1000,
	4316, 4316, 447, -1000, -1000, -1000, -1000, 313, -1000, 6638,
	314, 30, -129, 346, 424, -1000, -38, 568, -1000, 556,
	-123, -137, -1000, -41, -1000, 546, -1000, -43, -126, 479,
	-134, 4493, -140, 558, 314, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 975, 14, 581, 974, 973, 970, 968, 967, 966,
	957, 956, 955, 954, 951, 950, 949, 948, 946, 63,
	943, 939, 938, 43, 937, 54, 935, 934, 26, 40,
	12, 36, 374, 933, 21, 62, 55, 932, 931, 930,
	49, 927, 833, 923, 922, 921, 9, 27, 920, 919,
	918, 916, 45, 10, 915, 914, 913, 911, 909, 907,
	35, 2, 8, 30, 16, 905, 142, 6, 899, 31,
	895, 894, 889, 888, 22, 886, 41, 884, 19, 39,
	881, 33, 7, 880, 57, 878, 541, 876, 97, 874,
	873, 872, 869, 865, 864, 28, 17, 238, 126, 23,
	858, 857, 765, 29, 53, 856, 855, 65, 11, 20,
	18, 852, 847, 836, 815, 814, 811, 809, 808, 25,
	807, 806, 5, 34, 805, 804, 60, 13, 803, 801,
	800, 797, 44, 788, 32, 787, 786, 784, 37, 24,
	782, 3, 781, 778, 4, 771, 770, 769, 0, 67,
	766, 760, 242,
}
var yyR1 = [...]int{

	0, 146, 147, 147, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 150, 150, 38, 38, 9, 9, 83, 83,
	83, 101, 101, 10, 10, 10, 10, 14, 135, 136,
	136, 136, 132, 113, 113, 113, 116, 116, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	117, 117, 117, 117, 117, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 131,
	131, 119, 119, 126, 126, 127, 127, 127, 124, 124,
	125, 125, 128, 128, 128, 120, 120, 120, 120, 120,
	129, 129, 122, 122, 122, 123, 123, 130, 130, 130,
	130, 130, 121, 121, 133, 140, 140, 140, 140, 134,
	134, 142, 142, 141, 137, 137, 137, 138, 138, 138,
	139, 139, 139, 11, 11, 11, 11, 11, 145, 143,
	143, 144, 144, 12, 13, 13, 13, 15, 111, 111,
	111, 112, 112, 16, 17, 17, 18, 18, 18, 18,
	18, 18, 151, 19, 20, 20, 21, 21, 21, 25,
	25, 25, 23, 23, 24, 24, 30, 30, 29, 29,
	31, 31, 31, 31, 100, 100, 100, 99, 99, 33,
	33, 34, 34, 35, 35, 36, 36, 36, 44, 37,
	37, 37, 37, 106, 106, 105, 105, 105, 104, 104,
	39, 39, 39, 39, 40, 40, 40, 40, 41, 41,
	43, 43, 42, 42, 45, 45, 45, 45, 46, 46,
	47, 47, 32, 32, 32, 32, 32, 32, 32, 87,
	87, 49, 49, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 59, 59, 59, 59, 59, 59, 50,
	50, 50, 50, 50, 50, 50, 28, 28, 60, 60,
	60, 66, 61, 61, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 57, 57, 57, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 56, 56, 56, 56,
	56, 56, 56, 56, 152, 152, 58, 58, 58, 58,
	26, 26, 26, 26, 26, 109, 109, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	70, 70, 27, 27, 68, 68, 69, 71, 71, 67,
	67, 67, 52, 52, 52, 52, 52, 52, 52, 52,
	54, 54, 54, 72, 72, 73, 73, 74, 74, 75,
	75, 76, 77, 77, 77, 78, 78, 78, 78, 79,
	79, 79, 51, 51, 51, 51, 51, 51, 80, 80,
	80, 80, 81, 81, 62, 62, 64, 64, 63, 65,
	82, 82, 84, 85, 85, 88, 88, 89, 89, 86,
	86, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 91, 91, 91, 92, 92, 93, 93, 93,
	94, 94, 97, 97, 98, 98, 102, 102, 103, 103,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	148, 149, 107, 108, 108, 108,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 1, 1, 2, 8, 4, 6, 4, 4, 1,
	3, 3, 7, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 4, 5, 7, 1,
	3, 8, 8, 5, 4, 5, 5, 3, 1, 1,
	1, 0, 1, 4, 2, 1, 2, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -146, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 108, 109, 111, 110, 112, 122,
	47, 24, 123, 124, 127, 128, 129, -148, 7, 190,
	50, -147, 203, -74, 14, -21, 5, -19, -151, -19,
	-19, -19, -19, -135, 50, -93, 115, 67, 113, 119,
	-97, 53, -96, 196, 141, 135, 162, 154, 152, 155,
	180, 62, 125, 150, 146, 144, 26, 167, 201, 145,
	139, 140, 166, 198, 32, 133, 165, 161, 164, 138,
	160, 36, 179, 157, 147, 17, 128, 131, 121, 200,
	143, 132, 127, 35, 171, 137, 158, 134, 148, 149,
	163, 136, 159, 129, 172, 202, 156, 153, 176, 177,
	178, 199, 151, 173, -86, 115, 117, 113, 113, 114,
	115, 113, -111, 53, -95, -96, 68, 21, 23, 169,
	71, 103, 15, 72, 102, 191, 108, 45, 183, 184,
	181, 182, 174, 28, 9, 24, 123, 20, 96, 110,
	75, 76, 126, 22, 124, 66, 18, 48, 10, 12,
	13, 118, 117, 87, 114, 43, 7, 104, 25, 84,
	39, 27, 41, 85, 16, 185, 186, 30, 195, 130,
	98, 46, 33, 69, 64, 49, 67, 14, 44, 86,
	111, 190, 42, 6, 194, 29, 122, 40, 113, 175,
	74, 116, 65, 5, 119, 8, 47, 120, 187, 188,
	189, 31, 73, 11, 115, -102, 53, -96, -107, -107,
	-107, -107, -107, -107, -2, -78, 16, 15, -5, -3,
	-148, 6, 19, 20, -25, 37, 38, -20, -86, -34,
	-35, -36, -37, -44, -66, -148, -42, -102, 10, -38,
	-42, -83, -82, 180, 155, 179, -84, -67, -97, -102,
	53, -96, -136, -132, 53, 114, -42, 190, -89, 118,
	113, -42, -42, -88, 118, 53, -88, -42, -112, -98,
	-97, -95, -149, 52, -79, 18, 30, -32, -48, 69,
	-53, 28, 22, -52, -49, -67, -65, -66, 103, 92,
	93, 100, 70, 104, -57, -55, -56, -58, 55, 54,
	63, 56, 57, 58, 59, 64, 65, 66, -97, -102,
	-63, -148, 41, 42, 191, 192, 195, 193, 72, 31,
	181, 189, 188, 187, 185, 186, 183, 184, 118, 182,
	98, 190, -75, -76, -32, -74, -2, -19, 33, -23,
	20, 61, -43, 25, -42, 29, 51, -39, -40, -41,
	39, 43, 45, 40, 41, 42, 46, -106, 21, -34,
	-2, -148, -105, -104, 21, -102, 55, 105, -42, -150,
	51, 10, 120, -101, -98, 55, 51, 29, 77, 105,
	52, 51, -113, -116, -118, -117, -114, -115, 152, 153,
	103, 156, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 125, 148, 149, 150, 151, 135, 136, 137,
	138, 139, 140, 141, 143, 144, 145, 146, 147, 53,
	-108, -148, -98, 115, -42, 69, -42, -108, 116, -42,
	22, 49, -42, -107, 8, 87, 68, 67, 84, 51,
	17, -32, -50, 87, 69, 85, 86, 71, 89, 88,
	99, 92, 93, 94, 95, 96, 97, 98, 90, 91,
	102, 77, 78, 79, 80, 81, 82, 83, -87, -148,
	-66, -148, 106, 107, -53, -53, -53, -53, -53, -53,
	-148, 105, -61, -32, -148, -148, -148, -148, -148, -148,
	-148, -70, -32, -148, -152, -148, -152, -152, -152, -152,
	-152, -152, -152, -148, -148, -148, -148, 51, -77, 23,
	24, -78, -149, -25, -54, -97, 56, 59, -24, 40,
	-51, 29, 31, -2, -148, -42, -82, -35, -36, -35,
	-36, 39, 39, 39, 44, 39, 44, 39, -40, -102,
	-149, -149, -2, -45, 47, 117, 48, -104, -103, -102,
	-95, -47, 11, -34, -42, -107, -84, -32, -98, -103,
	-95, -137, -138, -139, -98, 55, 56, -132, -133, -140,
	121, 119, -134, 114, 27, -128, 64, 69, -124, 172,
	-119, 50, -119, -119, -119, -119, -122, 155, -122, -122,
	-122, 50, -119, -119, -119, -126, 50, -126, -126, -127,
	50, -127, -94, 120, -42, 22, -90, 111, -145, 109,
	169, 155, 62, 28, 110, 14, 191, 131, 202, 53,
	132, -42, -42, -108, 35, -32, -32, -59, 64, 69,
	65, 66, -32, -32, -53, -60, -63, -66, 60, 87,
	85, 86, 71, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -109, 53,
	55, 53, -52, -52, -97, -30, 20, -29, -31, 94,
	-32, -102, -98, 51, -149, -29, -29, -32, -32, -29,
	-23, -68, -69, 73, -97, -149, -29, -30, -29, -29,
	-76, -79, -85, 18, 10, 31, 31, -29, -81, 49,
	-82, -62, -64, -63, -148, -2, -80, -97, -47, 49,
	49, 39, 39, -149, 114, 114, 114, -74, -32, -47,
	105, 51, -139, 77, 50, 27, -134, 53, 53, -120,
	28, 64, -125, 173, 56, -122, -122, -123, 102, 29,
	-123, -123, -123, -131, 55, 56, 56, 49, -97, -108,
	-107, -91, -92, 116, 21, 114, 27, 131, 36, 64,
	65, 66, -60, -53, -53, -53, -28, 126, 68, -149,
	-149, -29, 51, -100, -99, 21, -97, 55, 105, -148,
	-32, -149, -149, 51, 120, 21, -149, -29, -71, -69,
	75, -32, -149, -149, -149, -149, -149, -42, -33, 10,
	26, -81, 51, -149, -149, -149, 51, 105, -74, -32,
	-32, -148, -148, -148, -78, -98, -138, -139, -142, -141,
	-97, 53, -129, 169, 55, 56, 57, 64, 52, -123,
	-123, 53, 53, 103, 52, 51, 51, 52, 51, -42,
	-42, -107, -97, -28, 68, -53, -53, -149, -31, -99,
	94, -103, -30, -110, 103, 152, 125, 150, 146, 166,
	157, 171, 148, 172, -109, -110, 196, -74, 76, -32,
	74, -47, -34, 27, -64, 31, -2, -148, -97, -97,
	-78, -46, -97, -46, -46, 52, 51, -119, -130, 121,
	27, 119, 55, 56, 56, -108, 25, -53, 105, -149,
	-149, -119, -119, -119, -127, -119, 140, -119, 140, -149,
	-149, -148, -27, 194, -32, -72, 12, 8, -62, -2,
	105, -149, 51, -149, -149, -141, -121, 62, 27, 27,
	52, 52, -148, 94, -122, 53, -53, -149, 55, -73,
	13, 15, -82, -149, -97, -97, 55, -143, -144, 131,
	-26, 87, 199, -32, -61, -149, 51, -97, -149, 197,
	46, 200, -144, 31, 36, 198, 201, 133, 36, 134,
	199, -148, 200, -53, 130, 201, -149, -149,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 387, 0, 172, 172,
	172, 172, 172, 0, 447, 429, 0, 0, 0, 0,
	165, 612, 612, 612, 612, 612, 612, 0, 27, 28,
	610, 1, 3, 395, 0, 0, 176, 179, 174, 429,
	0, 0, 0, 43, 0, 0, 603, 0, 427, 448,
	449, 452, 453, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 604, 605,
	606, 607, 608, 609, 0, 0, 430, 0, 425, 0,
	425, 0, 161, 158, 159, 160, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471, 472, 473,
	474, 475, 476, 477, 478, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 603, 164, 456, 457, 166, 167,
	168, 169, 170, 171, 21, 399, 0, 0, 387, 23,
	0, 172, 177, 178, 182, 180, 181, 173, 0, 0,
	201, 203, 204, 205, 213, 0, 215, 232, 0, 0,
	34, 0, 37, -2, 554, -2, 420, 0, 369, 0,
	-2, -2, 0, 49, 0, 0, 613, 0, 0, 0,
	0, 613, 0, 0, 0, 0, 0, 157, 612, 162,
	454, 455, 22, 611, 17, 0, 0, 396, 242, 0,
	247, 249, 0, 284, 285, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 310, 311, 312, 313, 372, 373,
	374, 375, 376, 377, 378, 379, 251, 252, 369, 0,
	419, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	334, 334, 334, 334, 334, 334, 334, 334, 0, 0,
	0, 0, 388, 389, 392, 395, 21, 179, 0, 184,
	183, 175, 0, 0, 231, 0, 0, 0, 0, 0,
	220, 0, 0, 223, 0, 0, 0, 0, 214, 0,
	21, 0, 234, 216, 0, 218, 219, 0, 240, 0,
	0, 32, 33, 612, 41, 42, 0, 39, 0, 0,
	134, 0, 102, 98, 54, 55, 91, 57, 91, 91,
	91, 91, 112, 112, 112, 112, 83, 84, 85, 86,
	87, 0, 70, 91, 91, 91, 74, 58, 59, 60,
	61, 62, 63, 64, 93, 93, 93, 95, 95, 450,
	45, 614, 615, 0, 47, 0, 0, 146, 0, 154,
	426, 0, 613, 163, 400, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 270, 271, 272, 273, 274, 275, 248, 0,
	262, 0, 0, 0, 304, 305, 306, 307, 308, 0,
	186, 0, 0, 282, 0, 0, 0, 0, 0, 0,
	182, 0, 361, 0, 326, 0, 327, 328, 329, 330,
	331, 332, 333, 0, 186, 0, 0, 0, 391, 393,
	394, 399, 24, 182, 0, 380, 0, 0, 0, 185,
	412, 0, 0, -2, 0, 230, 240, 202, 209, 0,
	212, 221, 222, 224, 0, 226, 0, 228, 229, 206,
	207, 281, 21, 208, 0, 0, 0, 217, 233, 458,
	459, 387, 0, 240, 35, 36, 421, 422, 370, 0,
	-2, 48, 135, 137, 140, 141, 142, 50, 51, 0,
	0, 0, 0, 129, 130, 105, 103, 0, 100, 99,
	56, 0, 112, 112, 77, 78, 115, 0, 115, 115,
	115, 0, 71, 72, 73, 65, 0, 66, 67, 68,
	0, 69, 0, 0, 613, 428, 612, 442, 147, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 153, 155, 156, 0, 243, 244, 246, 263, 0,
	265, 267, 397, 398, 253, 254, 278, 279, 280, 0,
	0, 0, 0, 276, 258, 0, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 303, 345,
	346, 0, 301, 302, 309, 0, 0, 187, 188, 190,
	194, 0, 370, 0, 418, 0, 0, 0, 0, 0,
	0, 367, 364, 0, 0, 335, 0, 0, 0, 0,
	390, 18, 0, 423, 424, 381, 382, 199, 25, 0,
	412, 402, 414, 416, 0, 21, 0, 408, 387, 0,
	0, 225, 227, -2, 0, 0, 0, 395, 241, 31,
	0, 0, 138, 0, 0, 125, 0, 127, 128, 110,
	0, 104, 53, 101, 0, 115, 115, 79, 0, 0,
	80, 81, 82, 0, 89, 0, 0, 0, 451, 46,
	143, 0, 612, 443, 444, 445, 446, 0, 401, 264,
	266, 268, 255, 276, 259, 0, 256, 0, 0, 250,
	314, 0, 0, 191, 195, 0, 197, 198, 0, 186,
	283, 317, 318, 0, 0, 0, 0, 387, 0, 365,
	0, 0, 325, 336, 337, 338, 339, 19, 240, 0,
	0, 26, 0, 417, -2, 0, 0, 0, 395, 210,
	211, 0, 0, 0, 30, 371, 136, 139, 0, 131,
	91, 126, 117, 111, 106, 107, 108, 109, 92, 75,
	76, 116, 113, 114, 88, 0, 0, 96, 0, 613,
	144, 145, 0, 257, 0, 277, 260, 315, 189, 196,
	192, 0, 0, 0, 91, 91, 350, 91, 95, 353,
	91, 355, 91, 358, 0, 0, 0, 362, 324, 368,
	0, 383, 200, 0, 415, 0, -2, 0, 410, 409,
	29, 0, 238, 0, 0, 124, 0, 133, 122, 0,
	119, 121, 90, 0, 0, 44, 0, 261, 0, 316,
	319, 347, 112, 351, 352, 354, 356, 357, 359, 321,
	320, 0, 0, 0, 366, 385, 0, 0, 405, 21,
	0, 235, 0, 236, 237, 132, 52, 0, 118, 120,
	94, 97, 0, 193, 348, 349, 340, 323, 363, 20,
	0, 0, 413, -2, 411, 239, 123, 0, 149, 0,
	0, 0, 0, 386, 384, 148, 0, 0, 322, 0,
	0, 0, 150, 0, 341, 0, 344, 0, 342, 0,
	0, 0, 0, 0, 0, 343, 151, 152,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	50, 52, 94, 92, 51, 93, 105, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 203,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:271
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:276
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:277
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:299
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:307
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:311
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:324
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:345
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:356
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:378
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:384
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:388
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:393
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:394
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:402
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:408
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:433
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:438
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:453
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:460
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:467
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:476
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:482
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:502
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:655
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:660
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:665
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:669
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:674
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:678
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:704
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:708
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:731
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:757
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:761
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:766
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:770
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:774
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:779
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.colKeyOpt = colKey
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:804
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:809
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:813
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:819
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:825
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:829
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:857
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:863
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:868
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = yyDollar[1].str
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:912
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:916
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:921
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:926
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:936
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:942
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:946
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:952
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:956
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:962
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:968
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:976
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:981
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1001
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1010
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1030
		{
			if yyDollar[2].str != ShowUnsupportedStr {
				yyVAL.statement = &Show{Type: yyDollar[2].str, Target: yyDollar[3].colIdent}
			} else {
				yyVAL.statement = &Show{Type: yyDollar[2].str}
			}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &OtherRead{}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = &OtherRead{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &OtherRead{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1075
		{
			setAllowComments(yylex, true)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.bytes2 = nil
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.str = UnionStr
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = UnionAllStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = UnionDistinctStr
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.str = SQLCacheStr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = DistinctStr
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = StraightJoinHint
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.selectExprs = nil
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.empty = struct{}{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.empty = struct{}{}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.str = JoinStr
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.str = JoinStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = JoinStr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = StraightJoinStr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = LeftJoinStr
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.str = LeftJoinStr
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.str = RightJoinStr
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.str = RightJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = NaturalJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.indexHints = nil
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.expr = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = IsNullStr
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = IsNotNullStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = IsTrueStr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = IsNotTrueStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = IsFalseStr
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = IsNotFalseStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = EqualStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = LessThanStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = GreaterThanStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = LessEqualStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.str = GreaterEqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.str = NotEqualStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.expr = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1667
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1675
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1697
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 322:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.str = BooleanModeStr
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = QueryExpansionStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = nil
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.str = string("")
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.expr = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = &NullVal{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.exprs = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.orderBy = nil
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.str = AscScr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.str = AscScr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = DescScr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.limit = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.str = ForUpdateStr
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.str = ShareModeStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2138
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2151
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.updateExprs = nil
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2211
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.byt = 0
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.byt = 1
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.str = IgnoreStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			decNesting(yylex)
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2523
		{
			forceEOF(yylex)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2528
		{
			forceEOF(yylex)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			forceEOF(yylex)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
