// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA = 57545
const VSCHEMA_TABLES = 57546
const VITESS_TARGET = 57547
const FULL = 57548
const PROCESSLIST = 57549
const COLUMNS = 57550
const FIELDS = 57551
const ENGINES = 57552
const PLUGINS = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const TIMESTAMPADD = 57583
const TIMESTAMPDIFF = 57584
const MATCH = 57585
const AGAINST = 57586
const BOOLEAN = 57587
const LANGUAGE = 57588
const WITH = 57589
const QUERY = 57590
const EXPANSION = 57591
const UNUSED = 57592

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 298,
	160, 298,
	-2, 288,
	-1, 268,
	112, 643,
	-2, 639,
	-1, 269,
	112, 644,
	-2, 640,
	-1, 334,
	82, 817,
	-2, 60,
	-1, 335,
	82, 774,
	-2, 61,
	-1, 340,
	82, 753,
	-2, 605,
	-1, 342,
	82, 795,
	-2, 607,
	-1, 611,
	1, 350,
	5, 350,
	12, 350,
	13, 350,
	14, 350,
	15, 350,
	17, 350,
	19, 350,
	30, 350,
	31, 350,
	42, 350,
	43, 350,
	44, 350,
	45, 350,
	46, 350,
	48, 350,
	49, 350,
	52, 350,
	53, 350,
	55, 350,
	56, 350,
	268, 350,
	-2, 368,
	-1, 614,
	53, 43,
	55, 43,
	-2, 45,
	-1, 756,
	112, 646,
	-2, 642,
	-1, 978,
	5, 30,
	-2, 434,
	-1, 1010,
	5, 29,
	-2, 579,
	-1, 1267,
	5, 30,
	-2, 580,
	-1, 1323,
	5, 29,
	-2, 582,
	-1, 1404,
	5, 30,
	-2, 583,
}

const yyPrivate = 57344

const yyLast = 12399

var yyAct = [...]int{

	269, 1438, 1428, 1220, 1392, 1013, 567, 1102, 1160, 1161,
	273, 1031, 863, 1335, 286, 1300, 1194, 247, 1014, 1287,
	872, 440, 840, 1157, 906, 838, 892, 57, 943, 299,
	1037, 859, 81, 1167, 471, 862, 209, 1056, 339, 209,
	275, 781, 238, 791, 1173, 1128, 1082, 970, 721, 842,
	788, 1073, 809, 607, 876, 624, 827, 608, 758, 499,
	902, 505, 623, 333, 790, 820, 511, 209, 81, 952,
	566, 3, 209, 271, 209, 519, 330, 300, 51, 328,
	256, 56, 1431, 1415, 1426, 1402, 1423, 239, 240, 241,
	242, 1221, 1414, 245, 1150, 1401, 581, 1259, 445, 1189,
	1190, 1188, 336, 582, 61, 473, 853, 260, 1367, 532,
	531, 541, 542, 534, 535, 536, 537, 538, 539, 540,
	533, 493, 246, 543, 204, 200, 201, 202, 244, 51,
	63, 64, 65, 66, 67, 925, 311, 252, 317, 318,
	315, 316, 314, 313, 312, 1044, 243, 1064, 1043, 924,
	885, 1045, 319, 320, 854, 855, 625, 489, 626, 196,
	1290, 198, 893, 1306, 1242, 490, 487, 488, 1240, 237,
	458, 475, 1129, 477, 482, 483, 1107, 929, 694, 492,
	696, 1105, 1425, 1422, 1393, 877, 923, 1101, 821, 1442,
	1446, 1385, 1032, 1034, 459, 447, 198, 209, 1336, 1109,
	209, 1344, 1106, 474, 476, 700, 209, 1104, 879, 1131,
	1098, 1338, 209, 687, 695, 81, 1100, 81, 1183, 81,
	81, 879, 81, 1182, 81, 1181, 443, 697, 450, 937,
	211, 199, 1206, 81, 555, 556, 920, 917, 918, 1374,
	916, 1270, 1133, 1115, 1137, 203, 1132, 988, 1130, 219,
	1057, 964, 730, 1135, 197, 523, 465, 455, 533, 860,
	543, 543, 1134, 81, 727, 722, 518, 517, 516, 1033,
	1152, 927, 930, 232, 765, 1136, 1138, 945, 507, 1337,
	1368, 810, 613, 1207, 518, 70, 495, 496, 763, 764,
	762, 472, 470, 893, 470, 1440, 470, 470, 1441, 470,
	1439, 470, 1345, 1343, 878, 1383, 1353, 922, 1400, 441,
	470, 553, 1099, 689, 1097, 886, 936, 878, 206, 935,
	452, 71, 453, 508, 212, 454, 209, 209, 209, 921,
	51, 215, 81, 1171, 517, 516, 1062, 516, 81, 223,
	218, 1154, 439, 627, 882, 552, 723, 446, 554, 329,
	883, 518, 606, 518, 442, 944, 444, 810, 509, 997,
	961, 962, 963, 748, 750, 751, 336, 611, 812, 749,
	1388, 221, 926, 461, 462, 463, 565, 231, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 928, 580, 583,
	583, 583, 589, 583, 583, 589, 583, 597, 598, 599,
	600, 601, 602, 213, 612, 733, 734, 615, 621, 584,
	586, 588, 590, 592, 594, 595, 585, 587, 1447, 591,
	593, 513, 596, 1406, 448, 449, 1296, 54, 1295, 1077,
	225, 216, 879, 226, 227, 228, 230, 761, 229, 235,
	209, 1381, 1076, 217, 220, 81, 214, 234, 233, 1408,
	209, 209, 81, 517, 516, 729, 209, 1448, 782, 209,
	783, 441, 209, 983, 22, 1065, 209, 1384, 81, 81,
	518, 1317, 1089, 81, 81, 81, 81, 81, 81, 451,
	1293, 1112, 457, 81, 81, 1074, 441, 982, 464, 981,
	1341, 1424, 728, 1223, 466, 536, 537, 538, 539, 540,
	533, 1087, 1057, 543, 709, 195, 517, 516, 1052, 517,
	516, 81, 784, 517, 516, 209, 1046, 706, 1047, 1410,
	498, 81, 470, 518, 251, 735, 518, 705, 878, 470,
	518, 1341, 1396, 875, 873, 707, 874, 690, 701, 1341,
	498, 871, 877, 1341, 1375, 470, 470, 1341, 1340, 498,
	470, 470, 470, 470, 470, 470, 759, 298, 755, 688,
	470, 470, 756, 1285, 1284, 81, 685, 760, 1088, 467,
	325, 326, 460, 1093, 1090, 1083, 1091, 1086, 1272, 498,
	1350, 1084, 1085, 1269, 498, 800, 804, 1213, 1212, 79,
	737, 811, 1349, 754, 1158, 1092, 752, 1170, 81, 81,
	1209, 1210, 1209, 1208, 618, 209, 976, 498, 605, 1203,
	614, 824, 498, 209, 209, 497, 1118, 209, 209, 793,
	498, 81, 634, 633, 880, 338, 847, 823, 617, 785,
	786, 1170, 51, 24, 81, 796, 797, 793, 1265, 1352,
	795, 806, 848, 1038, 807, 824, 619, 569, 617, 1038,
	1211, 817, 824, 611, 1048, 336, 867, 611, 852, 24,
	976, 1322, 58, 1002, 816, 1001, 818, 819, 864, 289,
	288, 291, 292, 293, 294, 894, 895, 896, 290, 295,
	846, 54, 24, 1008, 850, 851, 824, 1009, 209, 81,
	839, 81, 1170, 992, 612, 81, 81, 209, 209, 976,
	209, 209, 976, 617, 209, 81, 620, 54, 54, 908,
	534, 535, 536, 537, 538, 539, 540, 533, 990, 987,
	543, 209, 635, 209, 209, 731, 209, 699, 1416, 985,
	54, 1302, 691, 692, 887, 253, 1103, 991, 698, 1277,
	907, 329, 904, 905, 704, 532, 531, 541, 542, 534,
	535, 536, 537, 538, 539, 540, 533, 1199, 1051, 543,
	903, 1433, 989, 986, 898, 755, 470, 897, 470, 756,
	1255, 498, 338, 984, 338, 910, 338, 338, 266, 338,
	1429, 338, 470, 54, 1174, 1175, 1201, 1177, 1158, 1078,
	338, 725, 759, 953, 703, 954, 1025, 744, 971, 1023,
	1180, 1026, 743, 760, 1024, 1179, 1022, 960, 532, 531,
	541, 542, 534, 535, 536, 537, 538, 539, 540, 533,
	521, 966, 543, 1021, 1420, 209, 209, 209, 209, 209,
	257, 258, 1413, 965, 1015, 1114, 1027, 209, 833, 834,
	209, 949, 512, 1418, 209, 959, 958, 1069, 209, 829,
	832, 833, 834, 830, 975, 831, 835, 510, 500, 1174,
	1175, 996, 632, 81, 468, 611, 611, 611, 611, 611,
	501, 1061, 994, 1039, 1390, 1049, 1389, 736, 1016, 1040,
	611, 1019, 1320, 1017, 1018, 1059, 1020, 822, 611, 338,
	1053, 1010, 1028, 1036, 1263, 629, 1298, 864, 1011, 1012,
	849, 913, 612, 612, 612, 612, 612, 702, 1041, 837,
	795, 81, 81, 512, 1058, 1066, 1067, 839, 248, 1035,
	254, 255, 1357, 957, 1068, 612, 1070, 1071, 1072, 1054,
	1055, 956, 249, 58, 1356, 792, 794, 1304, 1038, 491,
	720, 81, 514, 1108, 1435, 1434, 1435, 1371, 1015, 1291,
	1075, 726, 60, 62, 616, 55, 209, 1, 1081, 888,
	889, 890, 891, 1427, 1094, 81, 1222, 1299, 919, 1391,
	911, 1334, 1193, 870, 861, 899, 900, 901, 69, 933,
	934, 438, 938, 939, 262, 68, 940, 1382, 869, 470,
	868, 1111, 1342, 1289, 829, 832, 833, 834, 830, 1120,
	831, 835, 338, 942, 881, 1063, 884, 1200, 948, 338,
	1060, 1387, 81, 81, 1159, 1122, 1121, 640, 470, 1015,
	1127, 638, 1151, 1145, 1139, 338, 338, 756, 639, 1140,
	338, 338, 338, 338, 338, 338, 81, 637, 642, 1162,
	338, 338, 641, 636, 1169, 222, 331, 836, 628, 81,
	909, 81, 81, 515, 72, 557, 558, 559, 560, 561,
	562, 563, 564, 1192, 1178, 1185, 1096, 1095, 739, 1184,
	1187, 915, 485, 1196, 486, 224, 551, 955, 521, 209,
	1042, 338, 1164, 864, 1191, 864, 337, 1163, 1165, 51,
	732, 504, 1197, 1198, 1355, 1303, 209, 995, 1204, 1205,
	578, 808, 81, 274, 747, 81, 287, 81, 81, 284,
	209, 285, 738, 1007, 525, 272, 81, 264, 610, 209,
	603, 828, 787, 826, 825, 1215, 1176, 1225, 1172, 609,
	1117, 1258, 802, 802, 1366, 742, 26, 1216, 802, 1218,
	1229, 59, 259, 19, 1231, 18, 17, 20, 1230, 16,
	1120, 15, 14, 973, 456, 814, 815, 974, 1238, 611,
	30, 21, 13, 12, 978, 979, 980, 11, 10, 9,
	8, 7, 6, 5, 4, 993, 250, 23, 338, 2,
	999, 1015, 1000, 1264, 0, 1003, 1004, 1005, 1006, 1274,
	0, 338, 81, 0, 0, 0, 612, 1273, 0, 0,
	81, 0, 0, 1283, 1049, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 864, 0, 1257, 0,
	0, 0, 0, 502, 506, 1292, 0, 1294, 1116, 0,
	0, 0, 0, 0, 0, 0, 338, 0, 338, 0,
	524, 0, 931, 932, 0, 0, 1301, 0, 0, 1279,
	1280, 1281, 338, 1305, 0, 0, 0, 0, 0, 0,
	81, 81, 0, 81, 0, 1321, 0, 0, 81, 0,
	81, 81, 81, 209, 0, 568, 81, 0, 338, 0,
	0, 1328, 470, 0, 579, 1162, 0, 1329, 0, 1330,
	1331, 1332, 1339, 81, 757, 1333, 1346, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 1354, 0, 1347, 0, 1348, 0, 0, 0,
	0, 1372, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 81, 1163, 1126, 1379, 1324, 0, 1380, 0,
	0, 0, 1162, 81, 81, 0, 0, 0, 0, 0,
	0, 1214, 813, 0, 1398, 0, 1395, 503, 1394, 0,
	0, 0, 0, 0, 0, 81, 1351, 1403, 1217, 0,
	0, 802, 1015, 0, 0, 0, 209, 1301, 864, 0,
	0, 0, 1228, 0, 81, 1373, 469, 0, 0, 0,
	1163, 0, 51, 207, 1412, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1419, 81, 1252, 498,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 263, 0, 0, 207, 0, 1421, 1443, 0, 207,
	498, 207, 0, 0, 0, 1235, 1236, 0, 1237, 0,
	0, 1239, 0, 1241, 0, 0, 532, 531, 541, 542,
	534, 535, 536, 537, 538, 539, 540, 533, 1079, 338,
	543, 0, 0, 0, 0, 0, 724, 532, 531, 541,
	542, 534, 535, 536, 537, 538, 539, 540, 533, 0,
	1232, 543, 0, 0, 0, 802, 0, 1234, 338, 0,
	0, 745, 746, 1430, 0, 0, 1256, 0, 1243, 1244,
	1245, 1286, 1248, 0, 0, 1251, 0, 1254, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 0, 1271, 0, 0, 0,
	0, 0, 967, 968, 969, 0, 338, 0, 0, 0,
	0, 0, 0, 1282, 568, 0, 0, 798, 799, 0,
	0, 0, 0, 0, 207, 0, 802, 207, 0, 1166,
	1168, 0, 0, 207, 0, 0, 0, 0, 0, 207,
	532, 531, 541, 542, 534, 535, 536, 537, 538, 539,
	540, 533, 0, 1168, 543, 541, 542, 534, 535, 536,
	537, 538, 539, 540, 533, 0, 338, 543, 338, 1195,
	0, 0, 858, 478, 0, 479, 480, 0, 481, 0,
	484, 0, 527, 0, 530, 0, 0, 1316, 0, 494,
	544, 545, 546, 547, 548, 549, 550, 0, 528, 529,
	526, 532, 531, 541, 542, 534, 535, 536, 537, 538,
	539, 540, 533, 0, 0, 543, 0, 0, 0, 1219,
	0, 0, 1224, 0, 1226, 1227, 0, 0, 1407, 0,
	0, 0, 0, 338, 0, 0, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 0, 0, 0, 1369, 1370, 0,
	0, 0, 0, 207, 207, 207, 0, 0, 0, 1376,
	1377, 1378, 531, 541, 542, 534, 535, 536, 537, 538,
	539, 540, 533, 950, 951, 543, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 1399, 0, 0, 0, 0,
	0, 0, 1404, 0, 1249, 498, 0, 0, 0, 338,
	1124, 1125, 0, 0, 0, 0, 0, 1288, 0, 0,
	1409, 0, 0, 1141, 1142, 1143, 1144, 0, 1146, 1147,
	1148, 1149, 338, 0, 0, 0, 0, 0, 977, 338,
	1155, 1156, 532, 531, 541, 542, 534, 535, 536, 537,
	538, 539, 540, 533, 0, 998, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 207, 0,
	0, 0, 0, 207, 0, 0, 207, 1325, 1326, 207,
	1327, 0, 0, 708, 0, 1288, 0, 1288, 1288, 1288,
	1202, 686, 0, 1195, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 0, 0, 0, 710, 711, 0, 0, 0, 712,
	713, 714, 715, 716, 717, 1246, 498, 0, 0, 718,
	719, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 1386,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	338, 338, 0, 532, 531, 541, 542, 534, 535, 536,
	537, 538, 539, 540, 533, 0, 0, 543, 0, 802,
	1113, 0, 1405, 263, 0, 0, 0, 0, 263, 263,
	0, 0, 803, 803, 263, 0, 0, 0, 803, 0,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1262, 0, 0, 0, 0, 263, 263, 263,
	263, 0, 207, 0, 1288, 0, 0, 0, 0, 0,
	207, 844, 1153, 0, 207, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 25, 52, 27, 28, 0,
	532, 531, 541, 542, 534, 535, 536, 537, 538, 539,
	540, 533, 0, 43, 543, 0, 0, 0, 29, 48,
	49, 0, 0, 1186, 0, 1307, 1308, 0, 1309, 1310,
	0, 1311, 1312, 0, 1313, 1314, 1315, 0, 38, 0,
	1318, 1319, 54, 532, 531, 541, 542, 534, 535, 536,
	537, 538, 539, 540, 533, 207, 0, 543, 0, 0,
	0, 0, 0, 0, 207, 207, 0, 207, 207, 0,
	0, 207, 0, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 912, 0, 914, 207, 1253,
	946, 947, 0, 207, 0, 0, 0, 0, 708, 0,
	0, 941, 0, 31, 32, 34, 33, 36, 0, 50,
	263, 532, 531, 541, 542, 534, 535, 536, 537, 538,
	539, 540, 533, 0, 0, 543, 0, 0, 0, 0,
	37, 44, 45, 0, 0, 46, 47, 35, 0, 1260,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	39, 40, 0, 41, 42, 0, 1275, 263, 0, 1276,
	645, 0, 1278, 532, 531, 541, 542, 534, 535, 536,
	537, 538, 539, 540, 533, 263, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 803, 207, 207, 207, 207, 207, 658, 0, 0,
	0, 1247, 0, 0, 1029, 0, 0, 207, 0, 1436,
	0, 844, 0, 0, 0, 207, 0, 0, 0, 671,
	674, 675, 676, 677, 678, 679, 0, 680, 681, 682,
	683, 684, 659, 660, 661, 662, 643, 644, 672, 53,
	646, 0, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 663, 664, 665, 666, 667, 668, 669, 670,
	532, 531, 541, 542, 534, 535, 536, 537, 538, 539,
	540, 533, 1123, 0, 543, 532, 531, 541, 542, 534,
	535, 536, 537, 538, 539, 540, 533, 0, 0, 543,
	0, 0, 532, 531, 541, 542, 534, 535, 536, 537,
	538, 539, 540, 533, 0, 803, 543, 0, 1080, 0,
	0, 0, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 0, 1110, 972, 0,
	0, 1397, 568, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 532, 531,
	541, 542, 534, 535, 536, 537, 538, 539, 540, 533,
	0, 0, 543, 0, 0, 0, 803, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 520, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 522, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 109, 207, 0, 0, 210,
	0, 0, 0, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 803, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 89, 121, 191, 148,
	106, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 426, 415,
	844, 386, 429, 364, 378, 437, 379, 380, 408, 350,
	394, 139, 376, 0, 367, 345, 373, 346, 365, 388,
	103, 391, 363, 417, 397, 428, 120, 435, 122, 402,
	0, 159, 131, 0, 0, 390, 419, 392, 413, 385,
	409, 355, 401, 430, 377, 406, 431, 0, 0, 0,
	80, 0, 865, 866, 0, 0, 0, 0, 0, 96,
	0, 404, 425, 375, 405, 407, 344, 403, 0, 348,
	351, 436, 421, 370, 371, 1050, 0, 0, 0, 0,
	0, 0, 389, 393, 410, 383, 0, 0, 0, 803,
	0, 0, 0, 0, 368, 0, 400, 0, 0, 0,
	352, 349, 0, 207, 387, 0, 0, 0, 354, 0,
	369, 411, 0, 343, 109, 414, 420, 384, 210, 424,
	382, 381, 427, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 418, 366, 374, 99, 372,
	153, 141, 175, 399, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 347, 0, 160, 177, 194, 94, 362, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 358, 361, 356, 357, 395,
	396, 432, 433, 434, 412, 353, 0, 359, 360, 0,
	416, 422, 423, 398, 82, 89, 121, 191, 148, 106,
	178, 426, 415, 0, 386, 429, 364, 378, 437, 379,
	380, 408, 350, 394, 139, 376, 0, 367, 345, 373,
	346, 365, 388, 103, 391, 363, 417, 397, 428, 120,
	435, 122, 402, 0, 159, 131, 0, 0, 390, 419,
	392, 413, 385, 409, 355, 401, 430, 377, 406, 431,
	0, 0, 0, 80, 0, 865, 866, 0, 0, 0,
	0, 0, 96, 0, 404, 425, 375, 405, 407, 344,
	403, 0, 348, 351, 436, 421, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 389, 393, 410, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 0, 400,
	0, 0, 0, 352, 349, 0, 0, 387, 0, 0,
	0, 354, 0, 369, 411, 0, 343, 109, 414, 420,
	384, 210, 424, 382, 381, 427, 146, 0, 162, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 418, 366,
	374, 99, 372, 153, 141, 175, 399, 142, 152, 123,
	167, 147, 174, 182, 183, 164, 181, 190, 84, 163,
	173, 97, 156, 86, 171, 161, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 168, 169, 100, 193,
	91, 180, 88, 92, 179, 136, 166, 172, 130, 127,
	87, 170, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 347, 0, 160, 177, 194,
	94, 362, 165, 184, 185, 186, 187, 188, 189, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 157, 117,
	124, 149, 192, 140, 154, 98, 176, 158, 358, 361,
	356, 357, 395, 396, 432, 433, 434, 412, 353, 0,
	359, 360, 0, 416, 422, 423, 398, 82, 89, 121,
	191, 148, 106, 178, 426, 415, 0, 386, 429, 364,
	378, 437, 379, 380, 408, 350, 394, 139, 376, 0,
	367, 345, 373, 346, 365, 388, 103, 391, 363, 417,
	397, 428, 120, 435, 122, 402, 0, 159, 131, 0,
	0, 390, 419, 392, 413, 385, 409, 355, 401, 430,
	377, 406, 431, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 404, 425, 375,
	405, 407, 344, 403, 0, 348, 351, 436, 421, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 389, 393,
	410, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 0, 400, 0, 0, 0, 352, 349, 0, 0,
	387, 0, 0, 0, 354, 0, 369, 411, 0, 343,
	109, 414, 420, 384, 210, 424, 382, 381, 427, 146,
	0, 162, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 418, 366, 374, 99, 372, 153, 141, 175, 399,
	142, 152, 123, 167, 147, 174, 182, 183, 164, 181,
	190, 84, 163, 173, 97, 156, 86, 171, 161, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 168,
	169, 100, 193, 91, 180, 88, 92, 179, 136, 166,
	172, 130, 127, 87, 170, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 347, 0,
	160, 177, 194, 94, 362, 165, 184, 185, 186, 187,
	188, 189, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 157, 117, 124, 149, 192, 140, 154, 98, 176,
	158, 358, 361, 356, 357, 395, 396, 432, 433, 434,
	412, 353, 0, 359, 360, 0, 416, 422, 423, 398,
	82, 89, 121, 191, 148, 106, 178, 426, 415, 0,
	386, 429, 364, 378, 437, 379, 380, 408, 350, 394,
	139, 376, 0, 367, 345, 373, 346, 365, 388, 103,
	391, 363, 417, 397, 428, 120, 435, 122, 402, 0,
	159, 131, 0, 0, 390, 419, 392, 413, 385, 409,
	355, 401, 430, 377, 406, 431, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	404, 425, 375, 405, 407, 344, 403, 0, 348, 351,
	436, 421, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 389, 393, 410, 383, 0, 0, 0, 0, 0,
	0, 1119, 0, 368, 0, 400, 0, 0, 0, 352,
	349, 0, 0, 387, 0, 0, 0, 354, 0, 369,
	411, 0, 343, 109, 414, 420, 384, 210, 424, 382,
	381, 427, 146, 0, 162, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 418, 366, 374, 99, 372, 153,
	141, 175, 399, 142, 152, 123, 167, 147, 174, 182,
	183, 164, 181, 190, 84, 163, 173, 97, 156, 86,
	171, 161, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 168, 169, 100, 193, 91, 180, 88, 92,
	179, 136, 166, 172, 130, 127, 87, 170, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 347, 0, 160, 177, 194, 94, 362, 165, 184,
	185, 186, 187, 188, 189, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 157, 117, 124, 149, 192, 140,
	154, 98, 176, 158, 358, 361, 356, 357, 395, 396,
	432, 433, 434, 412, 353, 0, 359, 360, 0, 416,
	422, 423, 398, 82, 89, 121, 191, 148, 106, 178,
	426, 415, 0, 386, 429, 364, 378, 437, 379, 380,
	408, 350, 394, 139, 376, 0, 367, 345, 373, 346,
	365, 388, 103, 391, 363, 417, 397, 428, 120, 435,
	122, 402, 0, 159, 131, 0, 0, 390, 419, 392,
	413, 385, 409, 355, 401, 430, 377, 406, 431, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 404, 425, 375, 405, 407, 344, 403,
	0, 348, 351, 436, 421, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 389, 393, 410, 383, 0, 0,
	0, 0, 0, 0, 753, 0, 368, 0, 400, 0,
	0, 0, 352, 349, 0, 0, 387, 0, 0, 0,
	354, 0, 369, 411, 0, 343, 109, 414, 420, 384,
	210, 424, 382, 381, 427, 146, 0, 162, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 418, 366, 374,
	99, 372, 153, 141, 175, 399, 142, 152, 123, 167,
	147, 174, 182, 183, 164, 181, 190, 84, 163, 173,
	97, 156, 86, 171, 161, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 168, 169, 100, 193, 91,
	180, 88, 92, 179, 136, 166, 172, 130, 127, 87,
	170, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 347, 0, 160, 177, 194, 94,
	362, 165, 184, 185, 186, 187, 188, 189, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 157, 117, 124,
	149, 192, 140, 154, 98, 176, 158, 358, 361, 356,
	357, 395, 396, 432, 433, 434, 412, 353, 0, 359,
	360, 0, 416, 422, 423, 398, 82, 89, 121, 191,
	148, 106, 178, 426, 415, 0, 386, 429, 364, 378,
	437, 379, 380, 408, 350, 394, 139, 376, 0, 367,
	345, 373, 346, 365, 388, 103, 391, 363, 417, 397,
	428, 120, 435, 122, 402, 0, 159, 131, 0, 0,
	390, 419, 392, 413, 385, 409, 355, 401, 430, 377,
	406, 431, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 404, 425, 375, 405,
	407, 344, 403, 0, 348, 351, 436, 421, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 389, 393, 410,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	0, 400, 0, 0, 0, 352, 349, 0, 0, 387,
	0, 0, 0, 354, 0, 369, 411, 0, 343, 109,
	414, 420, 384, 210, 424, 382, 381, 427, 146, 0,
	162, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	418, 366, 374, 99, 372, 153, 141, 175, 399, 142,
	152, 123, 167, 147, 174, 182, 183, 164, 181, 190,
	84, 163, 173, 97, 156, 86, 171, 161, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 168, 169,
	100, 193, 91, 180, 88, 92, 179, 136, 166, 172,
	130, 127, 87, 170, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 347, 0, 160,
	177, 194, 94, 362, 165, 184, 185, 186, 187, 188,
	189, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	157, 117, 124, 149, 192, 140, 154, 98, 176, 158,
	358, 361, 356, 357, 395, 396, 432, 433, 434, 412,
	353, 0, 359, 360, 0, 416, 422, 423, 398, 82,
	89, 121, 191, 148, 106, 178, 426, 415, 0, 386,
	429, 364, 378, 437, 379, 380, 408, 350, 394, 139,
	376, 0, 367, 345, 373, 346, 365, 388, 103, 391,
	363, 417, 397, 428, 120, 435, 122, 402, 0, 159,
	131, 0, 0, 390, 419, 392, 413, 385, 409, 355,
	401, 430, 377, 406, 431, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 404,
	425, 375, 405, 407, 344, 403, 0, 348, 351, 436,
	421, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	389, 393, 410, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 0, 400, 0, 0, 0, 352, 349,
	0, 0, 387, 0, 0, 0, 354, 0, 369, 411,
	0, 343, 109, 414, 420, 384, 210, 424, 382, 381,
	427, 146, 0, 162, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 418, 366, 374, 99, 372, 153, 141,
	175, 399, 142, 152, 123, 167, 147, 174, 182, 183,
	164, 181, 190, 84, 163, 173, 97, 156, 86, 171,
	161, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 168, 169, 100, 193, 91, 180, 88, 92, 179,
	136, 166, 172, 130, 127, 87, 170, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	347, 0, 160, 177, 194, 94, 362, 165, 184, 185,
	186, 187, 188, 189, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 157, 117, 124, 149, 192, 140, 154,
	98, 176, 158, 358, 361, 356, 357, 395, 396, 432,
	433, 434, 412, 353, 0, 359, 360, 0, 416, 422,
	423, 398, 82, 89, 121, 191, 148, 106, 178, 426,
	415, 0, 386, 429, 364, 378, 437, 379, 380, 408,
	350, 394, 139, 376, 0, 367, 345, 373, 346, 365,
	388, 103, 391, 363, 417, 397, 428, 120, 435, 122,
	402, 0, 159, 131, 0, 0, 390, 419, 392, 413,
	385, 409, 355, 401, 430, 377, 406, 431, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 404, 425, 375, 405, 407, 344, 403, 0,
	348, 351, 436, 421, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 389, 393, 410, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 0, 400, 0, 0,
	0, 352, 349, 0, 0, 387, 0, 0, 0, 354,
	0, 369, 411, 0, 343, 109, 414, 420, 384, 210,
	424, 382, 381, 427, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 418, 366, 374, 99,
	372, 153, 141, 175, 399, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 341, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 347, 0, 160, 177, 194, 94, 362,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 342, 340, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 358, 361, 356, 357,
	395, 396, 432, 433, 434, 412, 353, 0, 359, 360,
	0, 416, 422, 423, 398, 82, 89, 121, 191, 148,
	106, 178, 426, 415, 0, 386, 429, 364, 378, 437,
	379, 380, 408, 350, 394, 139, 376, 0, 367, 345,
	373, 346, 365, 388, 103, 391, 363, 417, 397, 428,
	120, 435, 122, 402, 0, 159, 131, 0, 0, 390,
	419, 392, 413, 385, 409, 355, 401, 430, 377, 406,
	431, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 404, 425, 375, 405, 407,
	344, 403, 0, 348, 351, 436, 421, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 389, 393, 410, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 0,
	400, 0, 0, 0, 352, 349, 0, 0, 387, 0,
	0, 0, 354, 0, 369, 411, 0, 343, 109, 414,
	420, 384, 210, 424, 382, 381, 427, 146, 0, 162,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 418,
	366, 374, 99, 372, 153, 141, 175, 399, 142, 152,
	123, 167, 147, 174, 182, 183, 164, 181, 190, 84,
	163, 173, 97, 156, 86, 171, 161, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 168, 169, 100,
	193, 91, 180, 88, 92, 179, 136, 166, 172, 130,
	127, 87, 170, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 347, 0, 160, 177,
	194, 94, 362, 165, 184, 185, 186, 187, 188, 189,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 157,
	117, 124, 149, 192, 140, 154, 98, 176, 158, 358,
	361, 356, 357, 395, 396, 432, 433, 434, 412, 353,
	0, 359, 360, 0, 416, 422, 423, 398, 82, 89,
	121, 191, 148, 106, 178, 426, 415, 0, 386, 429,
	364, 378, 437, 379, 380, 408, 350, 394, 139, 376,
	0, 367, 345, 373, 346, 365, 388, 103, 391, 363,
	417, 397, 428, 120, 435, 122, 402, 0, 159, 131,
	0, 0, 390, 419, 392, 413, 385, 409, 355, 401,
	430, 377, 406, 431, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 404, 425,
	375, 405, 407, 344, 403, 0, 348, 351, 436, 421,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 389,
	393, 410, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 368, 0, 400, 0, 0, 0, 352, 349, 0,
	0, 387, 0, 0, 0, 354, 0, 369, 411, 0,
	343, 109, 414, 420, 384, 210, 424, 382, 381, 427,
	146, 0, 162, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 418, 366, 374, 99, 372, 153, 141, 175,
	399, 142, 152, 123, 167, 147, 174, 182, 183, 164,
	181, 190, 84, 163, 622, 97, 156, 86, 171, 161,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	168, 169, 100, 193, 91, 180, 88, 341, 179, 136,
	166, 172, 130, 127, 87, 170, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 347,
	0, 160, 177, 194, 94, 362, 165, 184, 185, 186,
	187, 188, 189, 0, 0, 95, 108, 104, 143, 342,
	340, 114, 157, 117, 124, 149, 192, 140, 154, 98,
	176, 158, 358, 361, 356, 357, 395, 396, 432, 433,
	434, 412, 353, 0, 359, 360, 0, 416, 422, 423,
	398, 82, 89, 121, 191, 148, 106, 178, 426, 415,
	0, 386, 429, 364, 378, 437, 379, 380, 408, 350,
	394, 139, 376, 0, 367, 345, 373, 346, 365, 388,
	103, 391, 363, 417, 397, 428, 120, 435, 122, 402,
	0, 159, 131, 0, 0, 390, 419, 392, 413, 385,
	409, 355, 401, 430, 377, 406, 431, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 404, 425, 375, 405, 407, 344, 403, 0, 348,
	351, 436, 421, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 389, 393, 410, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 0, 400, 0, 0, 0,
	352, 349, 0, 0, 387, 0, 0, 0, 354, 0,
	369, 411, 0, 343, 109, 414, 420, 384, 210, 424,
	382, 381, 427, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 418, 366, 374, 99, 372,
	153, 141, 175, 399, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 332, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	341, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 347, 0, 160, 177, 194, 94, 362, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 342, 340, 335, 334, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 358, 361, 356, 357, 395,
	396, 432, 433, 434, 412, 353, 0, 359, 360, 0,
	416, 422, 423, 398, 82, 89, 121, 191, 148, 106,
	178, 139, 0, 0, 0, 0, 270, 0, 0, 0,
	103, 0, 267, 0, 0, 0, 120, 310, 122, 0,
	0, 159, 131, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 856, 0, 54, 0, 0,
	268, 289, 288, 291, 292, 293, 294, 0, 0, 96,
	290, 295, 296, 297, 857, 0, 0, 265, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 323, 0, 281, 0,
	0, 276, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 210, 0,
	0, 321, 0, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 175, 0, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 160, 177, 194, 94, 0, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 311, 322, 317, 318, 315,
	316, 314, 313, 312, 324, 303, 304, 305, 306, 308,
	0, 319, 320, 307, 82, 89, 121, 191, 148, 106,
	178, 139, 0, 0, 789, 0, 270, 0, 0, 0,
	103, 0, 267, 0, 0, 0, 120, 310, 122, 0,
	0, 159, 131, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	268, 289, 288, 291, 292, 293, 294, 0, 0, 96,
	290, 295, 296, 297, 0, 0, 0, 265, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 261, 0, 0, 0, 323, 0, 281, 0,
	0, 276, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 210, 0,
	0, 321, 0, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 175, 0, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 160, 177, 194, 94, 0, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 311, 322, 317, 318, 315,
	316, 314, 313, 312, 324, 303, 304, 305, 306, 308,
	0, 319, 320, 307, 82, 89, 121, 191, 148, 106,
	178, 139, 0, 0, 0, 0, 270, 0, 0, 0,
	103, 0, 267, 0, 0, 0, 120, 310, 122, 0,
	0, 159, 131, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 498,
	268, 289, 288, 291, 292, 293, 294, 0, 0, 96,
	290, 295, 296, 297, 0, 0, 0, 265, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 323, 0, 281, 0,
	0, 276, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 210, 0,
	0, 321, 0, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 175, 0, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 160, 177, 194, 94, 0, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 311, 322, 317, 318, 315,
	316, 314, 313, 312, 324, 303, 304, 305, 306, 308,
	0, 319, 320, 307, 82, 89, 121, 191, 148, 106,
	178, 139, 0, 0, 0, 0, 270, 0, 0, 0,
	103, 0, 267, 0, 0, 0, 120, 310, 122, 0,
	0, 159, 131, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	268, 289, 288, 291, 292, 293, 294, 0, 0, 96,
	290, 295, 296, 297, 0, 0, 0, 265, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 261, 0, 0, 0, 323, 0, 281, 0,
	0, 276, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 210, 0,
	0, 321, 0, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 175, 0, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 160, 177, 194, 94, 0, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 311, 322, 317, 318, 315,
	316, 314, 313, 312, 324, 303, 304, 305, 306, 308,
	24, 319, 320, 307, 82, 89, 121, 191, 148, 106,
	178, 0, 139, 0, 0, 0, 0, 270, 0, 0,
	0, 103, 0, 267, 0, 0, 0, 120, 310, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 268, 289, 288, 291, 292, 293, 294, 0, 0,
	96, 290, 295, 296, 297, 0, 0, 0, 265, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 323, 0, 281,
	0, 0, 276, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 321, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 311, 322, 317, 318,
	315, 316, 314, 313, 312, 324, 303, 304, 305, 306,
	308, 0, 319, 320, 307, 82, 89, 121, 191, 148,
	106, 178, 139, 0, 0, 0, 0, 270, 0, 0,
	0, 103, 0, 267, 0, 0, 0, 120, 310, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 268, 289, 288, 291, 292, 293, 294, 0, 0,
	96, 290, 295, 296, 297, 0, 0, 0, 265, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 323, 0, 281,
	0, 0, 276, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 321, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 311, 322, 317, 318,
	315, 316, 314, 313, 312, 324, 303, 304, 305, 306,
	308, 0, 319, 320, 307, 82, 89, 121, 191, 148,
	106, 178, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 310, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 268, 289, 288, 291, 292, 293, 294, 0, 0,
	96, 290, 295, 296, 297, 0, 0, 0, 0, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 323, 0, 281,
	0, 0, 276, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 321, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 1437, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 311, 322, 317, 318,
	315, 316, 314, 313, 312, 324, 303, 304, 305, 306,
	308, 0, 319, 320, 307, 82, 89, 121, 191, 148,
	106, 178, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 310, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	498, 268, 289, 288, 291, 292, 293, 294, 0, 0,
	96, 290, 295, 296, 297, 0, 0, 0, 0, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 323, 0, 281,
	0, 0, 276, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 321, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 311, 322, 317, 318,
	315, 316, 314, 313, 312, 324, 303, 304, 305, 306,
	308, 0, 319, 320, 307, 82, 89, 121, 191, 148,
	106, 178, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 310, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 268, 289, 288, 291, 292, 293, 294, 0, 0,
	96, 290, 295, 296, 297, 0, 0, 0, 0, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 323, 0, 281,
	0, 0, 276, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 321, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 311, 322, 317, 318,
	315, 316, 314, 313, 312, 324, 303, 304, 305, 306,
	308, 0, 319, 320, 307, 82, 89, 121, 191, 148,
	106, 178, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 532, 531, 541,
	542, 534, 535, 536, 537, 538, 539, 540, 533, 0,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 0, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 191, 148,
	106, 178, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 76, 77, 0,
	73, 0, 0, 0, 78, 146, 0, 162, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 175, 0, 142, 152, 123, 167,
	147, 174, 182, 183, 164, 181, 190, 84, 163, 173,
	97, 156, 86, 171, 161, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 168, 169, 100, 193, 91,
	180, 88, 92, 179, 136, 166, 172, 130, 127, 87,
	170, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 160, 177, 194, 94,
	0, 165, 184, 185, 186, 187, 188, 189, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 157, 117, 124,
	149, 192, 140, 154, 98, 176, 158, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 89, 121, 191,
	148, 106, 178, 139, 0, 0, 0, 843, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 845, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	210, 0, 0, 0, 0, 146, 0, 162, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 175, 0, 142, 152, 123, 167,
	147, 174, 182, 183, 164, 181, 190, 84, 163, 173,
	97, 156, 86, 171, 161, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 168, 169, 100, 193, 91,
	180, 88, 92, 179, 136, 166, 172, 130, 127, 87,
	170, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 160, 177, 194, 94,
	0, 165, 184, 185, 186, 187, 188, 189, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 157, 117, 124,
	149, 192, 140, 154, 98, 176, 158, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 191,
	148, 106, 178, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 210, 0, 0, 0, 0, 146, 0, 162, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 175, 0, 142, 152, 123,
	167, 147, 174, 182, 183, 164, 181, 190, 84, 163,
	173, 97, 156, 86, 171, 161, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 168, 169, 100, 193,
	91, 180, 88, 92, 179, 136, 166, 172, 130, 127,
	87, 170, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 160, 177, 194,
	94, 0, 165, 184, 185, 186, 187, 188, 189, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 157, 117,
	124, 149, 192, 140, 154, 98, 176, 158, 0, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	191, 148, 106, 178, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 210, 0, 0, 0, 0, 146, 0, 162,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 175, 0, 142, 152,
	123, 167, 147, 174, 182, 183, 164, 181, 190, 84,
	163, 173, 97, 156, 86, 171, 161, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 168, 169, 100,
	193, 91, 180, 88, 92, 179, 136, 166, 172, 130,
	127, 87, 170, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 160, 177,
	194, 94, 0, 165, 184, 185, 186, 187, 188, 189,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 157,
	117, 124, 149, 192, 140, 154, 98, 176, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 191, 148, 106, 178, 139, 0, 0, 0, 843,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 845, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 210, 0, 0, 0, 0, 146, 0, 162,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 175, 0, 841, 152,
	123, 167, 147, 174, 182, 183, 164, 181, 190, 84,
	163, 173, 97, 156, 86, 171, 161, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 168, 169, 100,
	193, 91, 180, 88, 92, 179, 136, 166, 172, 130,
	127, 87, 170, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 160, 177,
	194, 94, 0, 165, 184, 185, 186, 187, 188, 189,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 157,
	117, 124, 149, 192, 140, 154, 98, 176, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 191, 148, 106, 178, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 740, 0,
	0, 741, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 210, 0, 0, 0, 0, 146, 0,
	162, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 175, 0, 142,
	152, 123, 167, 147, 174, 182, 183, 164, 181, 190,
	84, 163, 173, 97, 156, 86, 171, 161, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 168, 169,
	100, 193, 91, 180, 88, 92, 179, 136, 166, 172,
	130, 127, 87, 170, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 160,
	177, 194, 94, 0, 165, 184, 185, 186, 187, 188,
	189, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	157, 117, 124, 149, 192, 140, 154, 98, 176, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 191, 148, 106, 178, 103, 0, 631, 0,
	0, 0, 120, 0, 122, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 630, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 210, 0, 0, 0, 0, 146,
	0, 162, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 175, 0,
	142, 152, 123, 167, 147, 174, 182, 183, 164, 181,
	190, 84, 163, 173, 97, 156, 86, 171, 161, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 168,
	169, 100, 193, 91, 180, 88, 92, 179, 136, 166,
	172, 130, 127, 87, 170, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	160, 177, 194, 94, 0, 165, 184, 185, 186, 187,
	188, 189, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 157, 117, 124, 149, 192, 140, 154, 98, 176,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 191, 148, 106, 178, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 210, 0, 0, 0, 0,
	146, 0, 162, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 175,
	0, 142, 152, 123, 167, 147, 174, 182, 183, 164,
	181, 190, 84, 163, 173, 97, 156, 86, 171, 161,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	168, 169, 100, 193, 91, 180, 88, 92, 179, 136,
	166, 172, 130, 127, 87, 170, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 160, 177, 194, 94, 0, 165, 184, 185, 186,
	187, 188, 189, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 157, 117, 124, 149, 192, 140, 154, 98,
	176, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 191, 148, 106, 178, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	845, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 210, 0, 0, 0,
	0, 146, 0, 162, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	175, 0, 142, 152, 123, 167, 147, 174, 182, 183,
	164, 181, 190, 84, 163, 173, 97, 156, 86, 171,
	161, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 168, 169, 100, 193, 91, 180, 88, 92, 179,
	136, 166, 172, 130, 127, 87, 170, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 160, 177, 194, 94, 0, 165, 184, 185,
	186, 187, 188, 189, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 157, 117, 124, 149, 192, 140, 154,
	98, 176, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 191, 148, 106, 178, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 805, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 210, 0, 0,
	0, 0, 146, 0, 162, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 175, 0, 142, 152, 123, 167, 147, 174, 182,
	183, 164, 181, 190, 84, 163, 173, 97, 156, 86,
	171, 161, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 168, 169, 100, 193, 91, 180, 88, 92,
	179, 136, 166, 172, 130, 127, 87, 170, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 160, 177, 194, 94, 0, 165, 184,
	185, 186, 187, 188, 189, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 157, 117, 124, 149, 192, 140,
	154, 98, 176, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 191, 148, 106, 178,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 801, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 210, 0,
	0, 0, 0, 146, 0, 162, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 175, 0, 142, 152, 123, 167, 147, 174,
	182, 183, 164, 181, 190, 84, 163, 173, 97, 156,
	86, 171, 161, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 168, 169, 100, 193, 91, 180, 88,
	92, 179, 136, 166, 172, 130, 127, 87, 170, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 160, 177, 194, 94, 0, 165,
	184, 185, 186, 187, 188, 189, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 157, 117, 124, 149, 192,
	140, 154, 98, 176, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 191, 148, 106,
	178, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 522, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 210,
	0, 0, 0, 0, 146, 0, 162, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 175, 0, 142, 152, 123, 167, 147,
	174, 182, 183, 164, 181, 190, 84, 163, 173, 97,
	156, 86, 171, 161, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 168, 169, 100, 193, 91, 180,
	88, 92, 179, 136, 166, 172, 130, 127, 87, 170,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 160, 177, 194, 94, 0,
	165, 184, 185, 186, 187, 188, 189, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 157, 117, 124, 149,
	192, 140, 154, 98, 176, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 82, 89, 121, 191, 148,
	106, 178, 604, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 210, 0, 0, 0, 0, 146, 0, 162, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 175, 0, 142, 152, 123,
	167, 147, 174, 182, 183, 164, 181, 190, 84, 163,
	173, 97, 156, 86, 171, 161, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 168, 169, 100, 193,
	91, 180, 88, 92, 179, 136, 166, 172, 130, 127,
	87, 170, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 160, 177, 194,
	94, 0, 165, 184, 185, 186, 187, 188, 189, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 157, 117,
	124, 149, 192, 140, 154, 98, 176, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	191, 148, 106, 178, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 210, 0, 0, 0, 0, 146, 0, 162,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 175, 0, 142, 152,
	123, 167, 147, 174, 182, 183, 164, 181, 190, 84,
	163, 173, 97, 156, 86, 171, 161, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 168, 169, 100,
	193, 91, 180, 88, 92, 179, 136, 166, 172, 130,
	127, 87, 170, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 160, 177,
	194, 94, 0, 165, 184, 185, 186, 187, 188, 189,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 157,
	117, 124, 149, 192, 140, 154, 98, 176, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 191, 148, 106, 178, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 205, 0, 210, 0, 0, 0, 0, 146, 0,
	162, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 175, 0, 142,
	152, 123, 167, 147, 174, 182, 183, 164, 181, 190,
	84, 163, 173, 97, 156, 86, 171, 161, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 168, 169,
	100, 193, 91, 180, 88, 92, 179, 136, 166, 172,
	130, 127, 87, 170, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 160,
	177, 194, 94, 0, 165, 184, 185, 186, 187, 188,
	189, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	157, 117, 124, 149, 192, 140, 154, 98, 176, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 191, 148, 106, 178, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 210, 0, 0, 0, 0, 146,
	0, 162, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 175, 0,
	142, 152, 123, 167, 147, 174, 182, 183, 164, 181,
	190, 84, 163, 173, 97, 156, 86, 171, 161, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 168,
	169, 100, 193, 91, 180, 88, 92, 179, 136, 166,
	172, 130, 127, 87, 170, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	160, 177, 194, 94, 0, 165, 184, 185, 186, 187,
	188, 189, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 157, 117, 124, 149, 192, 140, 154, 98, 176,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 191, 148, 106, 178, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 210, 0, 0, 0, 0,
	146, 0, 162, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 175,
	0, 142, 152, 123, 167, 147, 174, 182, 183, 164,
	181, 190, 84, 163, 173, 97, 156, 86, 171, 161,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	168, 169, 100, 193, 91, 180, 88, 92, 179, 136,
	166, 172, 130, 127, 87, 170, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 160, 177, 194, 94, 0, 165, 184, 185, 186,
	187, 188, 189, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 157, 117, 124, 149, 192, 140, 154, 98,
	176, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 191, 148, 106, 178, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 210, 0, 0, 0,
	0, 146, 0, 162, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	175, 0, 142, 152, 123, 167, 147, 174, 182, 183,
	164, 181, 190, 84, 163, 173, 97, 156, 86, 171,
	161, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 168, 169, 100, 193, 91, 180, 88, 92, 179,
	136, 166, 172, 130, 127, 87, 170, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 160, 177, 194, 94, 0, 165, 184, 185,
	186, 187, 188, 189, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 157, 117, 124, 149, 192, 140, 154,
	98, 176, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 89, 121, 191, 148, 106, 178,
}
var yyPact = [...]int{

	1988, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 918, 947, -1000, -1000, -1000, -1000, -1000, -1000,
	231, 8015, 34, 108, 2, 11408, 107, 216, 11890, -1000,
	5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -70, -88,
	-1000, 676, -1000, -1000, -1000, -1000, -1000, 901, 916, 729,
	900, 790, -1000, 6273, 69, 69, 11167, 5273, -1000, -1000,
	252, 11890, 102, 11890, -153, 67, 67, 67, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 105, 11890, 205, -1000, 11890,
	66, 515, 66, 66, 66, 11890, -1000, 144, -1000, -1000,
	-1000, 11890, 512, 834, 3169, 48, 3169, -1000, 3169, 3169,
	-1000, 3169, 15, 3169, -59, 927, -1000, -1000, -1000, -1000,
	-37, -1000, 3169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 493, 839, 6774, 6774,
	918, -1000, 676, -1000, -1000, -1000, 821, -1000, -1000, 356,
	931, -1000, 2364, 143, -1000, 6774, 1548, 654, -1000, -1000,
	654, -1000, -1000, 121, -1000, -1000, 7524, 7524, 7524, 7524,
	7524, 7524, 7524, 7524, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 654, -1000,
	6524, 654, 654, 654, 654, 654, 654, 654, 654, 6774,
	654, 654, 654, 654, 654, 654, 654, 654, 654, 654,
	654, 654, 654, 654, 654, 10926, 9720, 11890, 593, -1000,
	651, 5010, -77, -1000, -1000, -1000, 261, 9479, -1000, -1000,
	-1000, 832, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 567, 11890,
	-1000, 2052, -1000, 509, 3169, 88, 502, 239, 480, 11890,
	11890, 3169, 21, 57, 104, 11890, 672, 79, 11890, 884,
	742, 11890, 470, 460, -1000, 4747, -1000, 3169, 3169, -1000,
	-1000, -1000, 3169, 3169, 3169, 3169, 3169, 3169, -1000, -1000,
	-1000, -1000, 3169, 3169, -1000, 929, 254, -1000, -1000, -1000,
	-1000, 6774, -1000, 739, -1000, -1000, -1000, -1000, -1000, -1000,
	942, 172, 437, 140, 670, -1000, 381, 901, 493, 790,
	9238, 759, -1000, -1000, 11890, -1000, 6774, 6774, 295, -1000,
	10684, -1000, -1000, 3695, 177, 7524, 373, 198, 7524, 7524,
	7524, 7524, 7524, 7524, 7524, 7524, 7524, 7524, 7524, 7524,
	7524, 7524, 7524, 401, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 455, -1000, 676, 611, 611, 153, 153, 153,
	153, 153, 153, 153, 7774, 5773, 493, 564, 195, 6524,
	6273, 6273, 6774, 6774, 10443, 10202, 6273, 892, 203, 195,
	12131, -1000, -1000, 7274, -1000, -1000, -1000, -1000, -1000, 493,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11649, 11649, 6273,
	6273, 6273, 6273, 37, 11890, -1000, 597, 952, -1000, -1000,
	-1000, 887, 8747, 8997, 37, 573, 9720, 11890, -1000, -1000,
	4484, 651, -77, 603, -1000, -128, -82, 5523, 152, -1000,
	-1000, -1000, -1000, 2906, 404, 568, 276, -62, -1000, -1000,
	-1000, 680, -1000, 680, 680, 680, 680, -25, -25, -25,
	-25, -1000, -1000, -1000, -1000, -1000, 713, 710, -1000, 680,
	680, 680, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	706, 706, 706, 686, 686, 722, -1000, 11890, 3169, 878,
	3169, -1000, 120, -1000, 11649, 11649, 11890, 11890, 199, 11890,
	11890, 648, -1000, 11890, 3169, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11890, 265, 11890, 11890, 195, 11890, -1000, 803, 6774, 6774,
	4221, 6774, -1000, -1000, -1000, 839, -1000, 892, 912, -1000,
	812, 811, 6273, -1000, -1000, 177, 264, -1000, -1000, 292,
	-1000, -1000, -1000, -1000, 139, 654, -1000, 1950, -1000, -1000,
	-1000, -1000, 373, 7524, 7524, 7524, 652, 1950, 2265, 1500,
	1608, 153, 396, 396, 154, 154, 154, 154, 154, 613,
	613, -1000, -1000, -1000, 493, -1000, -1000, -1000, 493, 6273,
	644, -1000, -1000, 6774, -1000, 493, 551, 551, 434, 441,
	718, 708, -1000, 135, 707, 682, 551, 6273, 279, -1000,
	6774, 493, -1000, 1384, 610, 608, 551, 493, 551, 551,
	653, 654, -1000, 12131, 9720, 9720, 9720, 9720, 9720, -1000,
	781, 764, -1000, 757, 754, 794, 11890, -1000, 556, 8747,
	142, 654, -1000, 9961, -1000, -1000, 926, 9720, 631, -1000,
	-1000, 603, -77, -90, -1000, -1000, -1000, -1000, 195, -1000,
	459, 599, 2643, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	704, 451, -1000, 862, 180, 193, 445, 857, -1000, -1000,
	-1000, 842, -1000, 268, -66, -1000, -1000, 405, -25, -25,
	-1000, -1000, 152, 817, 152, 152, 152, 426, 426, -1000,
	-1000, -1000, -1000, 382, -1000, -1000, -1000, 369, -1000, 737,
	11649, 3169, -1000, -1000, -1000, -1000, 444, 444, 188, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36, 683, -1000, -1000, -1000, 50, 45, 12131, 73, -1000,
	3169, -1000, 254, -1000, 422, 6774, -1000, -1000, -1000, 796,
	195, 195, 131, -1000, -1000, 11890, -1000, -1000, -1000, -1000,
	605, -1000, -1000, -1000, 3432, 6273, -1000, 652, 1950, 2199,
	-1000, 7524, 7524, -1000, -1000, 551, 6273, 195, -1000, -1000,
	-1000, 64, 401, 64, 7524, 7524, 7524, 7524, 4221, 7524,
	7524, 7524, 7524, -167, 647, 189, -1000, 6774, 262, -1000,
	-1000, 7524, 7524, -1000, -1000, -1000, -1000, 736, 12131, 654,
	-1000, 8506, 11649, 637, -1000, 251, 952, 732, 735, 807,
	-1000, -1000, -1000, -1000, 763, -1000, 758, -1000, -1000, -1000,
	-1000, -1000, 101, 99, 94, 11649, -1000, 918, 6774, 631,
	-1000, -1000, -1000, -134, -140, -1000, -1000, -1000, 2906, -1000,
	2906, 11649, 47, -1000, 445, 445, -1000, -1000, -1000, 703,
	734, 7524, -1000, -1000, -1000, 553, 152, 152, -1000, 175,
	-1000, -1000, -1000, 547, -1000, 545, 595, 532, 11890, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11890, -1000, -1000, -1000, -1000,
	-1000, 11649, -173, 436, 11649, 429, 11649, 11649, 576, 11890,
	-1000, 265, -1000, 195, -1000, 3958, -1000, 926, 9720, -1000,
	-1000, 493, -1000, 7524, 1950, 1950, -1000, -1000, 493, 680,
	680, -1000, 680, 686, -1000, 680, -4, 680, -8, 493,
	493, 1820, 2182, 1689, 2167, -1000, 1363, 2070, 715, 1487,
	654, -160, -1000, 195, 6774, 2018, 1907, -1000, 867, 542,
	583, -1000, -1000, 6023, 493, 528, 129, 523, -1000, 918,
	12131, 6774, -1000, -1000, 6774, 685, -1000, 6774, -1000, -1000,
	-1000, 654, 654, 654, 523, 901, 195, -1000, -1000, -1000,
	-1000, 2643, -1000, 508, -1000, 680, -1000, -1000, -1000, 11649,
	-49, 940, 1950, -1000, -1000, -1000, -1000, -1000, -25, 421,
	-25, 368, -1000, 366, 3169, -1000, -1000, -1000, -1000, 870,
	-1000, 3958, -1000, -1000, 677, -1000, -1000, -1000, -1000, -1000,
	924, 590, -1000, 1950, -1000, -1000, 106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7524, 7524, -1000, 7524,
	7524, -1000, 7524, 7524, -1000, 7524, 7524, 7524, 493, 412,
	195, 7524, 7524, 854, -1000, 654, -1000, -1000, 627, 11649,
	11649, -1000, 11649, 901, -1000, 195, 195, 11649, 195, 11649,
	11649, 11649, 8265, -1000, 145, 11649, -1000, 492, -1000, 173,
	-1000, -106, 152, -1000, 152, 536, 524, -1000, 654, 584,
	-1000, 224, 11649, 920, 906, -1000, -1000, 1384, 1384, 1384,
	1384, 1384, 1384, 1384, 1384, 16, -1000, -1000, 1384, 1384,
	938, -1000, 654, -1000, 676, 127, -1000, -1000, -1000, 488,
	484, 484, 484, 142, 145, -1000, 384, 223, 408, -1000,
	51, 11649, 304, 848, -1000, 846, -1000, -1000, -1000, -1000,
	-1000, 33, 3958, 2906, 476, -1000, 6774, 6774, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 493, 46, -180, -1000,
	-1000, 12131, 583, 493, 11649, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 363, -1000, -1000, 11890, -1000, -1000, 390, -1000,
	-1000, 464, -1000, 11649, -1000, -1000, 683, 195, 582, -1000,
	793, -171, -183, 576, -1000, -1000, -1000, 674, -1000, -1000,
	33, 809, -173, -1000, 785, -1000, 11649, -1000, 30, -1000,
	-178, 435, 28, -181, 728, 654, -184, 709, -1000, 935,
	7024, -1000, -1000, 937, 159, 159, 1384, 493, -1000, -1000,
	-1000, 55, 389, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1179, 70, 464, 1177, 1176, 1174, 1173, 1172, 1171,
	1170, 1169, 1168, 1167, 1163, 1162, 1161, 1160, 1154, 1152,
	1151, 1149, 1147, 1146, 1145, 1143, 104, 1142, 1141, 1136,
	66, 1135, 80, 1134, 1131, 47, 64, 50, 43, 984,
	1130, 25, 53, 57, 1129, 44, 1128, 1126, 79, 1124,
	56, 1123, 1121, 282, 1120, 1118, 11, 30, 1117, 1115,
	1114, 1113, 73, 778, 1112, 1111, 14, 1109, 1106, 103,
	1104, 58, 6, 8, 29, 9, 1103, 40, 10, 1101,
	52, 1100, 1097, 1095, 1094, 27, 1091, 61, 1090, 17,
	59, 1088, 19, 65, 33, 23, 5, 76, 62, 1086,
	18, 63, 55, 1080, 1077, 505, 1076, 1075, 48, 1074,
	1072, 28, 170, 347, 1071, 1067, 1066, 1054, 38, 0,
	557, 34, 75, 1053, 1050, 1048, 1367, 69, 49, 22,
	1047, 42, 1396, 41, 1046, 1045, 45, 1043, 1042, 1038,
	1037, 1028, 1021, 1017, 315, 1011, 1010, 1007, 26, 31,
	1006, 1005, 60, 24, 1004, 993, 992, 51, 21, 990,
	988, 54, 37, 987, 985, 981, 978, 974, 35, 12,
	973, 16, 972, 13, 971, 20, 969, 4, 968, 15,
	967, 3, 966, 7, 46, 1, 963, 2, 957, 955,
	77, 368, 954, 953, 96,
}
var yyR1 = [...]int{

	0, 188, 189, 189, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 192, 192, 48, 48, 93, 93, 10, 10, 10,
	10, 98, 98, 102, 102, 102, 103, 103, 103, 103,
	134, 134, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 182, 181, 181, 180, 180, 179, 17, 164, 166,
	166, 165, 165, 165, 165, 158, 137, 137, 137, 137,
	140, 140, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 143, 143, 143, 143,
	143, 143, 143, 143, 157, 157, 144, 144, 152, 152,
	153, 153, 153, 150, 150, 151, 151, 154, 154, 154,
	146, 146, 147, 147, 155, 155, 148, 148, 148, 149,
	149, 149, 156, 156, 156, 156, 156, 145, 145, 159,
	159, 174, 174, 173, 173, 173, 163, 163, 170, 170,
	170, 170, 170, 161, 161, 162, 162, 172, 172, 171,
	160, 160, 175, 175, 175, 175, 186, 187, 185, 185,
	185, 185, 185, 167, 167, 167, 168, 168, 168, 169,
	169, 169, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 178,
	176, 176, 177, 177, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 109, 109, 107, 107,
	110, 110, 108, 108, 108, 111, 111, 111, 135, 135,
	135, 21, 21, 23, 23, 24, 25, 22, 22, 22,
	22, 22, 22, 22, 16, 193, 26, 27, 27, 28,
	28, 28, 32, 32, 32, 30, 30, 31, 31, 37,
	37, 36, 36, 38, 38, 38, 38, 123, 123, 123,
	122, 122, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 55, 55, 92, 92, 94, 94, 44, 44,
	44, 44, 45, 45, 46, 46, 47, 47, 130, 130,
	129, 129, 129, 128, 128, 49, 49, 49, 51, 50,
	50, 50, 50, 52, 52, 54, 54, 53, 53, 56,
	56, 56, 56, 57, 57, 39, 39, 39, 39, 39,
	39, 39, 106, 106, 59, 59, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 70, 70, 70, 70,
	70, 70, 60, 60, 60, 60, 60, 60, 60, 35,
	35, 71, 71, 71, 77, 72, 72, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 194,
	194, 69, 68, 68, 68, 68, 33, 33, 33, 33,
	33, 133, 133, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 81, 81, 34, 34,
	79, 79, 80, 82, 82, 78, 78, 78, 62, 62,
	62, 62, 62, 62, 62, 62, 64, 64, 64, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 88, 88,
	88, 89, 89, 89, 89, 90, 90, 90, 61, 61,
	61, 61, 61, 61, 91, 91, 91, 91, 95, 95,
	73, 73, 75, 75, 74, 76, 96, 96, 100, 97,
	97, 101, 101, 101, 101, 99, 99, 99, 125, 125,
	125, 104, 104, 112, 112, 113, 113, 105, 105, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 116, 116, 117, 117, 117, 124, 124, 120,
	120, 121, 121, 126, 126, 127, 127, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 190, 191, 131, 132,
	132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 0, 1, 1, 3, 2,
	3, 1, 10, 11, 11, 12, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 7, 7, 4, 5, 7,
	5, 5, 5, 12, 7, 6, 7, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 3, 3, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 2, 2, 2,
	2, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -188, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -190, 8, 251, 54, -189, 268, -85, 15, -28,
	5, -26, -193, -26, -26, -26, -26, -26, -164, -166,
	54, 90, -117, 125, 72, 243, 122, 123, 129, -120,
	57, -119, 261, 135, 162, 173, 167, 194, 186, 262,
	136, 184, 187, 230, 214, 225, 66, 165, 239, 145,
	182, 178, 176, 27, 227, 199, 266, 177, 226, 121,
	138, 133, 200, 204, 231, 171, 172, 233, 198, 134,
	33, 263, 35, 153, 234, 202, 197, 193, 196, 170,
	192, 39, 206, 205, 207, 229, 189, 139, 179, 18,
	237, 148, 151, 228, 201, 203, 130, 155, 265, 235,
	175, 140, 152, 147, 238, 141, 166, 232, 241, 38,
	211, 169, 132, 163, 159, 216, 190, 154, 180, 181,
	195, 168, 191, 164, 156, 149, 240, 212, 267, 188,
	185, 160, 157, 158, 217, 218, 219, 220, 221, 222,
	161, 264, 236, 183, 213, -105, 125, 220, 127, 123,
	123, 124, 125, 243, 122, 123, -53, -126, 57, -119,
	125, 123, 108, 187, 230, 115, 215, 227, 124, 33,
	228, 155, -135, 123, -107, 214, 217, 218, 219, 222,
	220, 161, 57, 232, 231, 223, -126, 164, -131, -131,
	-131, -131, -131, 216, 216, -131, -2, -89, 17, 16,
	-5, -3, -190, 6, 20, 21, -32, 40, 41, -27,
	-38, 99, -39, -126, -58, 74, -63, 29, 57, -119,
	23, -62, -59, -78, -76, -77, 108, 109, 110, 97,
	98, 105, 75, 111, -67, -65, -66, -68, 59, 58,
	67, 60, 61, 62, 63, 68, 69, 70, -120, -74,
	-190, 44, 45, 252, 253, 254, 255, 260, 256, 77,
	34, 242, 250, 249, 248, 246, 247, 244, 245, 258,
	259, 128, 243, 103, 251, -105, -105, 11, -48, -53,
	-97, -134, 164, -101, 232, 231, -121, -99, -120, -118,
	230, 187, 229, 120, 73, 22, 24, 209, 76, 108,
	16, 77, 107, 252, 115, 48, 244, 245, 242, 254,
	255, 243, 215, 29, 10, 25, 143, 21, 101, 117,
	80, 81, 146, 23, 144, 70, 19, 51, 11, 13,
	14, 128, 127, 92, 124, 46, 8, 111, 26, 89,
	42, 28, 44, 90, 17, 246, 247, 31, 260, 150,
	103, 49, 36, 74, 68, 71, 52, 72, 15, 47,
	91, 118, 251, 45, 122, 6, 257, 30, 142, 43,
	123, 79, 258, 259, 126, 69, 5, 129, 32, 9,
	50, 53, 248, 249, 250, 34, 78, 12, -165, 90,
	-158, 57, -53, 124, -53, 251, -113, 128, -113, -113,
	123, -53, 115, 117, 120, 52, -18, -53, -112, 128,
	57, -112, -112, -112, -53, 112, -53, 57, 30, -132,
	-190, -121, 243, 57, 155, 123, 156, 125, -132, -132,
	-132, -132, 159, 160, -132, -110, -109, 225, 226, 216,
	224, 12, 216, 158, -132, -131, -131, -191, 56, -90,
	19, 31, -39, -126, -86, -87, -39, -85, -2, -26,
	36, -30, 21, 65, 11, -123, 73, 72, 89, -122,
	22, -120, 59, 112, -39, -60, 92, 74, 90, 91,
	76, 94, 93, 104, 97, 98, 99, 100, 101, 102,
	103, 95, 96, 107, 82, 83, 84, 85, 86, 87,
	88, -106, -190, -77, -190, 113, 114, -63, -63, -63,
	-63, -63, -63, -63, -63, -190, -2, -72, -39, -190,
	-190, -190, -190, -190, -190, -190, -190, -190, -81, -39,
	-190, -194, -69, -190, -194, -69, -194, -69, -194, -190,
	-194, -69, -194, -69, -194, -194, -69, -190, -190, -190,
	-190, -190, -190, -54, 26, -53, -41, -42, -43, -44,
	-55, -77, -190, -53, -53, -48, -192, 55, 11, 53,
	55, -97, 164, -98, -102, 233, 235, 82, -125, -120,
	59, 29, 30, 56, 55, -53, -137, -140, -142, -141,
	-143, -138, -139, 184, 185, 108, 188, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 30, 145, 180,
	181, 182, 183, 200, 201, 202, 203, 204, 205, 206,
	207, 167, 186, 262, 168, 169, 170, 171, 172, 173,
	175, 176, 177, 178, 179, 57, -132, 125, 57, 74,
	57, -53, -53, -132, 157, 157, 123, 123, -53, 55,
	126, -48, 23, 52, -53, 57, 57, -127, -126, -118,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	11, -108, 11, 92, -39, 52, 9, 92, 55, 18,
	112, 55, -88, 24, 25, -89, -191, -32, -64, -120,
	60, 63, -31, 43, -53, -39, -39, -70, 68, 74,
	69, 70, -122, 99, -127, -121, -118, -63, -71, -74,
	-77, 64, 92, 90, 91, 76, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -133, 57, 59, 57, -62, -62, -120, -37, 21,
	-36, -38, -191, 55, -191, -2, -36, -36, -39, -39,
	-78, 59, -120, -126, -78, 59, -36, -30, -79, -80,
	78, -78, -191, -63, -120, -120, -36, -37, -36, -36,
	-93, 151, -53, 30, 55, -49, -51, -50, -52, 42,
	46, 48, 43, 44, 45, 49, -130, 22, -41, -190,
	-129, 151, -128, 22, -126, 59, -93, 53, -41, -53,
	-101, -98, 55, 234, 236, 237, 52, 71, -39, -149,
	107, -167, -168, -169, -121, 59, 60, -158, -159, -160,
	-170, 137, -175, 130, 132, 129, -161, 138, 124, 28,
	56, -154, 68, 74, -150, 212, -144, 54, -144, -144,
	-144, -144, -148, 187, -148, -148, -148, 54, 54, -144,
	-144, -144, -152, 54, -152, -152, -153, 54, -153, -124,
	53, -53, -132, 23, -132, -114, 120, 117, 118, -178,
	116, 209, 187, 66, 29, 15, 252, 151, 267, 57,
	152, -120, -120, -53, -53, 120, 117, 30, -53, -53,
	-53, -132, -53, -111, 90, 12, -126, -126, -53, 38,
	-39, -39, -127, -87, -90, -104, 19, 11, 34, 34,
	-36, 68, 69, 70, 112, -190, -71, -63, -63, -63,
	-35, 146, 73, -191, -191, -36, 55, -39, -191, -191,
	-191, 55, 53, 22, 55, 11, 55, 11, 112, 55,
	11, 55, 11, -191, -36, -82, -80, 80, -39, -191,
	-191, 55, 55, -191, -191, -191, -191, -61, 30, 34,
	-2, -190, -190, -96, -100, -78, -42, -43, -43, -42,
	-43, 42, 42, 42, 47, 42, 47, 42, -50, -126,
	-191, -56, 50, 127, 51, -190, -128, -57, 12, -41,
	-57, -102, -103, 238, 235, 241, 57, 59, 55, -169,
	82, 54, 57, 28, -161, -161, -162, 57, -162, 28,
	-146, 29, 68, -151, 213, 60, -148, -148, -149, 30,
	-149, -149, -149, -157, 59, -157, 60, 60, 52, -120,
	-132, -131, -184, 131, 137, 138, 133, 57, 124, 28,
	130, 132, 151, 129, -184, -115, -116, 126, 22, 124,
	28, 151, -183, 53, 157, 131, 157, 131, -96, 126,
	-132, -108, 59, -39, 39, 112, -53, -40, 11, 99,
	-121, -37, -35, 73, -63, -63, -191, -38, -136, 108,
	184, 145, 182, 178, 198, 189, 211, 180, 212, -133,
	-136, -63, -63, -63, -63, -121, -63, -63, -63, -63,
	261, -85, 81, -39, 79, -63, -63, -95, 52, -96,
	-73, -75, -74, -190, -2, -91, -120, -94, -120, -57,
	55, 82, -46, -45, 52, 53, -47, 52, -45, 42,
	42, 124, 124, 124, -94, -85, -39, -57, 235, 239,
	240, -168, -169, -172, -171, -120, -175, -162, -162, 54,
	-147, 52, -63, 56, -149, -149, 57, 108, 56, 55,
	56, 55, 56, 55, -53, -131, -131, -53, -131, -120,
	-181, 264, -182, 57, -120, -158, -120, -120, -53, -111,
	-57, -41, -191, -63, -191, -144, -144, -144, -153, -144,
	172, -144, 172, -191, -191, -191, 55, 19, -191, 55,
	19, -191, 55, 19, -191, 55, 19, -190, -34, 257,
	-39, 55, 55, 27, -95, 55, -191, -191, -191, 55,
	112, -191, 55, -85, -100, -39, -39, 54, -39, -190,
	-190, -190, -191, -89, 56, 55, -144, -92, -120, -155,
	209, 9, -148, 59, -148, 60, 60, -132, 26, -180,
	-179, -121, 54, -83, 13, -148, 57, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -191, 59, -63, -63,
	28, -75, 34, -2, -190, -120, -120, -120, -89, -92,
	-92, -92, -92, -129, -174, -173, 53, 134, 66, -171,
	56, 55, -156, 130, 28, 129, -66, -149, -149, 56,
	56, -190, 55, 82, -92, -84, 14, 16, -191, -191,
	-191, -191, -191, -191, -191, -191, -33, 92, 264, -191,
	-191, 9, -73, -2, 112, 56, -191, -191, -191, -56,
	-173, 57, -163, 82, 59, 140, -120, -145, 66, 28,
	28, -176, -177, 151, -179, -169, 56, -39, -72, -191,
	262, 49, 265, -96, -191, -120, 60, -53, 59, -191,
	55, -120, -183, 39, 263, 266, 54, -177, 34, -181,
	39, -92, 153, 264, 56, 154, 265, -186, -187, 52,
	-190, 266, -187, 52, 10, 9, -63, 150, -185, 141,
	136, 139, 30, -185, -191, -191, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 563, 0, 315, 315, 315, 315, 315, 315,
	0, 634, 617, 0, 0, 0, 0, -2, 302, 303,
	0, 305, 306, 858, 858, 858, 858, 858, 0, 0,
	858, 0, 35, 36, 856, 1, 3, 571, 0, 0,
	319, 322, 317, 0, 617, 617, 0, 0, 62, 63,
	0, 0, 0, 842, 0, 615, 615, 615, 635, 636,
	639, 640, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 0, 0, 0, 618, 0,
	613, 0, 613, 613, 613, 0, 253, 387, 643, 644,
	842, 0, 0, 0, 859, 0, 859, 265, 859, 859,
	268, 859, 0, 859, 0, 275, 277, 278, 279, 280,
	0, 284, 859, 299, 300, 289, 301, 304, 307, 308,
	309, 310, 311, 858, 858, 314, 29, 575, 0, 0,
	563, 31, 0, 315, 320, 321, 325, 323, 324, 316,
	0, 333, 337, 0, 395, 0, 400, 402, -2, -2,
	0, 437, 438, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 465, 466, 467, 468, 548, 549,
	550, 551, 552, 553, 554, 555, 404, 405, 545, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	0, 509, 509, 509, 509, 509, 509, 509, 509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	47, 0, 833, 599, -2, -2, 0, 0, 641, 642,
	-2, 752, -2, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 0, 0,
	81, 0, 79, 0, 859, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 254, 859, 859, 257,
	860, 861, 859, 859, 859, 859, 859, 859, 264, 266,
	267, 269, 859, 859, 271, 0, 292, 290, 291, 286,
	287, 0, 281, 282, 285, 312, 313, 30, 857, 24,
	0, 0, 572, 0, 564, 565, 568, 571, 29, 322,
	0, 327, 326, 318, 0, 334, 0, 0, 0, 338,
	0, 340, 341, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 423, 424, 425, 426, 427,
	428, 401, 0, 415, 0, 0, 0, 457, 458, 459,
	460, 461, 462, 463, 0, 329, 29, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 537,
	0, 493, 501, 0, 494, 502, 495, 503, 496, 0,
	497, 504, 498, 505, 499, 500, 506, 0, 0, 0,
	329, 0, 0, 45, 0, 386, 0, 344, 346, 347,
	348, -2, 0, 370, -2, 0, 0, 0, 41, 42,
	0, 48, 833, 50, 51, 0, 0, 0, 159, 608,
	609, 610, 606, 203, 0, 0, 147, 143, 87, 88,
	89, 136, 91, 136, 136, 136, 136, 156, 156, 156,
	156, 119, 120, 121, 122, 123, 0, 0, 106, 136,
	136, 136, 110, 126, 127, 128, 129, 130, 131, 132,
	133, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	138, 138, 138, 140, 140, 637, 65, 0, 859, 0,
	859, 77, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 247, 614, 0, 859, 250, 251, 388, 645, 646,
	255, 256, 258, 259, 260, 261, 262, 263, 270, 274,
	0, 295, 0, 0, 276, 0, 576, 0, 0, 0,
	0, 0, 567, 569, 570, 575, 32, 325, 0, 556,
	0, 0, 0, 328, 27, 396, 397, 399, 416, 0,
	418, 420, 339, 335, 0, 546, -2, 406, 407, 431,
	432, 433, 0, 0, 0, 0, 429, 411, 0, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 456, 521, 522, 0, 454, 455, 464, 0, 0,
	330, 331, 434, 0, 594, 29, 0, 0, 0, 0,
	0, 0, 545, 0, 0, 0, 0, 0, 543, 540,
	0, 0, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 0, 0, 0, 0, 0, 0, 375,
	0, 0, 378, 0, 0, 0, 0, 369, 0, 0,
	389, 802, 371, 0, 373, 374, 393, 0, 393, 44,
	600, 49, 0, 0, 54, 55, 601, 602, 603, 604,
	0, 78, 204, 206, 209, 210, 211, 82, 83, 84,
	0, 0, 191, 0, 0, 185, 185, 0, 183, 184,
	80, 150, 148, 0, 145, 144, 90, 0, 156, 156,
	113, 114, 159, 0, 159, 159, 159, 0, 0, 107,
	108, 109, 101, 0, 102, 103, 104, 0, 105, 0,
	0, 859, 67, 616, 68, 858, 0, 0, 629, 218,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	0, 69, 220, 222, 221, 0, 0, 0, 0, 245,
	859, 249, 292, 273, 0, 0, 293, 294, 283, 0,
	573, 574, 0, 566, 25, 0, 611, 612, 557, 558,
	342, 417, 419, 421, 0, 329, 408, 429, 412, 0,
	409, 0, 0, 403, 469, 0, 0, 436, -2, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 0, 541, 0, 0, 492,
	511, 0, 0, 512, 513, 514, 515, 588, 0, 0,
	-2, 0, 0, 393, 596, 0, 345, 364, 366, 0,
	361, 376, 377, 379, 0, 381, 0, 383, 384, 349,
	351, 352, 0, 0, 0, 0, 372, 563, 0, 393,
	40, 52, 53, 0, 0, 59, 160, 161, 0, 207,
	0, 0, 0, 178, 185, 185, 181, 186, 182, 0,
	152, 0, 149, 86, 146, 0, 159, 159, 115, 0,
	116, 117, 118, 0, 134, 0, 0, 0, 0, 638,
	66, 212, 858, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 858, 0, 858, 630, 631, 632,
	633, 0, 72, 0, 0, 0, 0, 0, 225, 0,
	248, 295, 296, 297, 577, 0, 26, 393, 0, 336,
	547, 0, 410, 0, 430, 413, 470, 332, 0, 136,
	136, 526, 136, 140, 529, 136, 531, 136, 534, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 538, 491, 544, 0, 0, 0, 33, 0, 588,
	578, 590, 592, 0, 29, 0, 584, 0, 356, 563,
	0, 0, 358, 365, 0, 0, 359, 0, 360, 380,
	382, 0, 0, 0, 0, 571, 394, 39, 56, 57,
	58, 205, 208, 0, 187, 136, 190, 179, 180, 0,
	154, 0, 151, 137, 111, 112, 157, 158, 156, 0,
	156, 0, 141, 0, 859, 213, 214, 215, 216, 0,
	219, 0, 70, 71, 0, 226, 224, 227, 246, 272,
	559, 343, 471, 414, 474, 523, 156, 527, 528, 530,
	532, 533, 535, 476, 475, 477, 0, 0, 483, 0,
	0, 480, 0, 0, 486, 0, 0, 0, 0, 0,
	542, 0, 0, 0, 34, 0, 593, -2, 0, 0,
	0, 46, 0, 571, 597, 598, 362, 0, 367, 0,
	0, 0, 370, 38, 170, 0, 189, 0, 354, 162,
	155, 0, 159, 135, 159, 0, 0, 64, 0, 73,
	74, 0, 0, 561, 0, 524, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 490, 539, 0, 0,
	0, 591, 0, -2, 0, 586, 585, 357, 37, 0,
	0, 0, 0, 389, 169, 171, 0, 176, 0, 188,
	0, 0, 167, 0, 164, 166, 153, 124, 125, 139,
	142, 0, 0, 0, 0, 28, 0, 0, 478, 479,
	484, 485, 481, 482, 487, 488, 0, 0, 0, 507,
	508, 0, 581, 29, 0, 363, 390, 391, 392, 353,
	172, 173, 0, 177, 175, 0, 355, 85, 0, 163,
	165, 0, 240, 0, 75, 76, 69, 562, 560, 489,
	0, 0, 0, 589, -2, 587, 174, 0, 168, 239,
	0, 0, 72, 517, 0, 520, 0, 241, 0, 223,
	518, 0, 0, 0, 192, 0, 0, 193, 194, 0,
	0, 519, 195, 0, 0, 0, 0, 0, 196, 198,
	199, 0, 0, 197, 242, 243, 200, 201, 202,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 268,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:348
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:354
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:372
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:379
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:406
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:468
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:473
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:564
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:586
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:617
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:623
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:629
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:636
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:647
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:653
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:672
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:694
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:904
		{
			yyVAL.sqlVal = nil
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1002
		{
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1032
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.sqlVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1094
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1135
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 192:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1172
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 193:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1176
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 194:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1180
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 195:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1184
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1214
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1267
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1275
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1279
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1284
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1305
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{
				Action:         SetVschemaUpdatesStr,
				Table:          yyDollar[4].tableName,
				VschemaUpdates: yyDollar[6].updateExprs,
			}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DDL{
				Action:     AddAuthColumnStr,
				Table:      yyDollar[4].tableName,
				AuthColumn: yyDollar[7].columnDefinition,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{
				Action:     DropAuthColumnStr,
				Table:      yyDollar[4].tableName,
				AuthColumn: &ColumnDefinition{Name: yyDollar[7].colIdent},
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1381
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1397
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1401
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1417
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1433
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1541
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1546
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1564
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = "full "
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.showFilter = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.str = SessionStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = GlobalStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Begin{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Commit{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Rollback{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &OtherRead{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1752
		{
			setAllowComments(yylex, true)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1756
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1762
		{
			yyVAL.bytes2 = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1772
		{
			yyVAL.str = UnionStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.str = UnionAllStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = UnionDistinctStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = SQLCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = DistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = StraightJoinHint
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1816
		{
			yyVAL.selectExprs = nil
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1836
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1848
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1921
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1954
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1958
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1972
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1974
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1984
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1989
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = JoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = StraightJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = LeftJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = LeftJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = RightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = RightJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = NaturalJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2086
		{
			yyVAL.indexHints = nil
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2090
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2094
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2098
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = IsNullStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = IsNotNullStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.str = IsTrueStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.str = IsNotTrueStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = IsFalseStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = IsNotFalseStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = EqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = LessThanStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = GreaterThanStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = LessEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = GreaterEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = NotEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = BooleanModeStr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = QueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2752
		{
			yyVAL.str = string("")
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2772
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2795
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2853
		{
			yyVAL.exprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2871
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2896
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.str = DescScr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2909
		{
			yyVAL.limit = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2917
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2921
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = ForUpdateStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = ShareModeStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2960
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2964
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2968
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2979
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2987
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2992
		{
			yyVAL.updateExprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2996
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3068
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3076
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.bytes = []byte("charset")
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.byt = 0
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.byt = 1
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3117
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = IgnoreStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3157
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3433
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			decNesting(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3447
		{
			skipToEnd(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3452
		{
			skipToEnd(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			skipToEnd(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
