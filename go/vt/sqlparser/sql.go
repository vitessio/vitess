// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const KEYSPACES = 57566
const VITESS_KEYSPACES = 57567
const VITESS_SHARDS = 57568
const VITESS_TABLETS = 57569
const NAMES = 57570
const CHARSET = 57571
const GLOBAL = 57572
const SESSION = 57573
const ISOLATION = 57574
const LEVEL = 57575
const READ = 57576
const WRITE = 57577
const ONLY = 57578
const REPEATABLE = 57579
const COMMITTED = 57580
const UNCOMMITTED = 57581
const SERIALIZABLE = 57582
const CURRENT_TIMESTAMP = 57583
const DATABASE = 57584
const CURRENT_DATE = 57585
const CURRENT_TIME = 57586
const LOCALTIME = 57587
const LOCALTIMESTAMP = 57588
const UTC_DATE = 57589
const UTC_TIME = 57590
const UTC_TIMESTAMP = 57591
const REPLACE = 57592
const CONVERT = 57593
const CAST = 57594
const SUBSTR = 57595
const SUBSTRING = 57596
const GROUP_CONCAT = 57597
const SEPARATOR = 57598
const TIMESTAMPADD = 57599
const TIMESTAMPDIFF = 57600
const MATCH = 57601
const AGAINST = 57602
const BOOLEAN = 57603
const LANGUAGE = 57604
const WITH = 57605
const QUERY = 57606
const EXPANSION = 57607
const UNUSED = 57608
const ARRAY = 57609
const CUME_DIST = 57610
const DESCRIPTION = 57611
const DENSE_RANK = 57612
const EMPTY = 57613
const EXCEPT = 57614
const FIRST_VALUE = 57615
const GROUPING = 57616
const GROUPS = 57617
const JSON_TABLE = 57618
const LAG = 57619
const LAST_VALUE = 57620
const LATERAL = 57621
const LEAD = 57622
const MEMBER = 57623
const NTH_VALUE = 57624
const NTILE = 57625
const OF = 57626
const OVER = 57627
const PERCENT_RANK = 57628
const RANK = 57629
const RECURSIVE = 57630
const ROW_NUMBER = 57631
const SYSTEM = 57632
const WINDOW = 57633
const ACTIVE = 57634
const ADMIN = 57635
const BUCKETS = 57636
const CLONE = 57637
const COMPONENT = 57638
const DEFINITION = 57639
const ENFORCED = 57640
const EXCLUDE = 57641
const FOLLOWING = 57642
const GEOMCOLLECTION = 57643
const GET_MASTER_PUBLIC_KEY = 57644
const HISTOGRAM = 57645
const HISTORY = 57646
const INACTIVE = 57647
const INVISIBLE = 57648
const LOCKED = 57649
const MASTER_COMPRESSION_ALGORITHMS = 57650
const MASTER_PUBLIC_KEY_PATH = 57651
const MASTER_TLS_CIPHERSUITES = 57652
const MASTER_ZSTD_COMPRESSION_LEVEL = 57653
const NESTED = 57654
const NETWORK_NAMESPACE = 57655
const NOWAIT = 57656
const NULLS = 57657
const OJ = 57658
const OLD = 57659
const OPTIONAL = 57660
const ORDINALITY = 57661
const ORGANIZATION = 57662
const OTHERS = 57663
const PATH = 57664
const PERSIST = 57665
const PERSIST_ONLY = 57666
const PRECEDING = 57667
const PRIVILEGE_CHECKS_USER = 57668
const PROCESS = 57669
const RANDOM = 57670
const REFERENCE = 57671
const REQUIRE_ROW_FORMAT = 57672
const RESOURCE = 57673
const RESPECT = 57674
const RESTART = 57675
const RETAIN = 57676
const REUSE = 57677
const ROLE = 57678
const SECONDARY = 57679
const SECONDARY_ENGINE = 57680
const SECONDARY_LOAD = 57681
const SECONDARY_UNLOAD = 57682
const SKIP = 57683
const SRID = 57684
const THREAD_PRIORITY = 57685
const TIES = 57686
const UNBOUNDED = 57687
const VCPU = 57688
const VISIBLE = 57689
const FORMAT = 57690
const TREE = 57691
const VITESS = 57692
const TRADITIONAL = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 312,
	133, 312,
	145, 312,
	170, 326,
	171, 326,
	-2, 314,
	-1, 49,
	135, 336,
	-2, 334,
	-1, 72,
	39, 372,
	-2, 380,
	-1, 396,
	121, 703,
	-2, 699,
	-1, 397,
	121, 704,
	-2, 700,
	-1, 411,
	39, 373,
	-2, 385,
	-1, 412,
	39, 374,
	-2, 386,
	-1, 436,
	89, 958,
	-2, 74,
	-1, 437,
	89, 873,
	-2, 75,
	-1, 442,
	89, 840,
	-2, 665,
	-1, 444,
	89, 905,
	-2, 667,
	-1, 768,
	57, 56,
	59, 56,
	-2, 60,
	-1, 946,
	121, 706,
	-2, 702,
	-1, 1381,
	5, 624,
	18, 624,
	20, 624,
	32, 624,
	60, 624,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 17873

var yyAct = [...]int{

	396, 1621, 1420, 1611, 1306, 1578, 340, 1211, 1494, 1527,
	1052, 1231, 369, 1361, 1212, 355, 1394, 615, 1362, 1358,
	1048, 1095, 71, 3, 734, 1257, 695, 1051, 1481, 1025,
	596, 1081, 326, 1061, 741, 613, 1198, 404, 1367, 92,
	1373, 1326, 1149, 286, 868, 309, 286, 1283, 933, 888,
	1274, 92, 1065, 286, 782, 1027, 1011, 413, 940, 739,
	744, 342, 966, 69, 762, 910, 441, 1075, 398, 761,
	427, 28, 566, 1091, 781, 1004, 779, 605, 770, 286,
	92, 338, 862, 567, 286, 331, 286, 327, 751, 67,
	330, 72, 708, 896, 66, 8, 7, 438, 430, 709,
	6, 1614, 1598, 1114, 1553, 657, 656, 666, 667, 659,
	660, 661, 662, 663, 664, 665, 658, 1113, 1609, 668,
	1586, 1606, 1022, 74, 75, 76, 77, 78, 79, 1421,
	1597, 1585, 1343, 282, 1451, 419, 423, 30, 571, 399,
	60, 34, 35, 590, 586, 587, 588, 1388, 94, 95,
	96, 94, 95, 96, 1389, 1390, 435, 1042, 381, 1112,
	387, 388, 385, 386, 384, 383, 382, 278, 628, 335,
	276, 329, 280, 1245, 389, 390, 1244, 1043, 1044, 1246,
	783, 623, 784, 328, 1265, 624, 621, 622, 1074, 59,
	1484, 94, 95, 96, 1082, 1308, 1442, 1440, 319, 895,
	321, 317, 857, 616, 617, 626, 856, 1310, 943, 854,
	1608, 1605, 1109, 1106, 1107, 1579, 1105, 1305, 1327, 1005,
	1571, 1066, 602, 1629, 604, 611, 1528, 1232, 1234, 863,
	627, 1068, 573, 280, 1311, 861, 631, 1384, 1625, 845,
	1068, 1530, 855, 858, 1383, 1382, 897, 898, 899, 1116,
	1119, 1309, 569, 576, 1536, 289, 601, 603, 281, 1329,
	1560, 1168, 1049, 94, 95, 96, 1302, 1126, 1464, 279,
	1125, 589, 1304, 680, 681, 1241, 1203, 286, 578, 579,
	1178, 1165, 286, 1157, 286, 1554, 1068, 776, 755, 1111,
	286, 594, 693, 592, 600, 277, 1331, 668, 1335, 1038,
	1330, 92, 1328, 92, 983, 658, 889, 1333, 668, 1233,
	92, 1110, 1529, 646, 647, 645, 1332, 645, 94, 95,
	96, 1347, 92, 92, 610, 883, 82, 583, 606, 1334,
	1336, 648, 1082, 648, 1293, 1067, 612, 598, 618, 629,
	1064, 1062, 648, 1063, 1067, 630, 637, 1569, 1545, 599,
	1060, 1066, 647, 645, 1623, 1115, 1584, 1624, 1345, 1622,
	967, 642, 643, 1537, 1535, 83, 1289, 1290, 1291, 648,
	1117, 680, 681, 607, 608, 1371, 1303, 785, 1301, 641,
	847, 94, 95, 96, 30, 31, 32, 60, 34, 35,
	1067, 680, 681, 890, 967, 580, 1175, 581, 61, 678,
	582, 917, 572, 1263, 64, 94, 95, 96, 1574, 36,
	55, 56, 884, 58, 748, 915, 916, 914, 780, 640,
	638, 597, 92, 732, 639, 286, 286, 286, 1589, 1490,
	1071, 1489, 45, 731, 92, 1407, 59, 1072, 1292, 1278,
	92, 565, 696, 1297, 1294, 1285, 1295, 1288, 275, 1284,
	985, 438, 1277, 1286, 1287, 657, 656, 666, 667, 659,
	660, 661, 662, 663, 664, 665, 658, 1296, 1266, 668,
	1591, 745, 1142, 1143, 1144, 711, 713, 715, 717, 719,
	721, 722, 712, 714, 1570, 718, 720, 59, 723, 1507,
	984, 574, 575, 733, 905, 907, 908, 769, 433, 913,
	408, 906, 38, 39, 41, 40, 43, 774, 57, 646,
	647, 645, 1150, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 1487, 1275, 424, 425, 648, 988, 989,
	1630, 44, 63, 62, 881, 873, 53, 54, 42, 659,
	660, 661, 662, 663, 664, 665, 658, 772, 760, 668,
	1533, 1607, 46, 47, 68, 48, 49, 50, 51, 661,
	662, 663, 664, 665, 658, 1542, 286, 668, 1164, 1541,
	843, 92, 1403, 846, 1631, 848, 286, 286, 92, 92,
	92, 646, 647, 645, 286, 94, 95, 96, 864, 1163,
	1069, 1162, 773, 286, 775, 92, 1593, 408, 1370, 648,
	92, 92, 92, 286, 92, 92, 844, 1533, 1582, 408,
	646, 647, 645, 851, 852, 853, 1460, 92, 92, 743,
	1533, 408, 644, 646, 647, 645, 872, 1032, 648, 771,
	871, 1533, 1561, 971, 1544, 875, 876, 877, 1454, 879,
	880, 648, 646, 647, 645, 61, 358, 357, 360, 361,
	362, 363, 885, 886, 1411, 359, 364, 1533, 1532, 870,
	648, 94, 95, 96, 911, 935, 94, 95, 96, 934,
	1248, 865, 866, 867, 1479, 1478, 1466, 408, 936, 657,
	656, 666, 667, 659, 660, 661, 662, 663, 664, 665,
	658, 1008, 92, 668, 666, 667, 659, 660, 661, 662,
	663, 664, 665, 658, 892, 407, 668, 772, 955, 958,
	1199, 944, 771, 912, 968, 1463, 408, 1013, 1016, 1017,
	1018, 1014, 1249, 1015, 1019, 92, 92, 1374, 1375, 1413,
	1412, 950, 1409, 1410, 1409, 1408, 996, 408, 945, 1008,
	408, 644, 408, 92, 792, 791, 1041, 70, 1199, 30,
	286, 696, 773, 92, 771, 1359, 1008, 286, 1370, 286,
	946, 997, 937, 938, 1181, 30, 1180, 286, 286, 980,
	996, 286, 286, 944, 1206, 286, 286, 286, 92, 990,
	1207, 92, 1007, 986, 947, 860, 976, 977, 777, 1023,
	996, 59, 92, 567, 1370, 438, 1514, 1599, 438, 1496,
	1002, 59, 1076, 998, 1471, 1096, 1399, 1307, 996, 1053,
	1008, 1252, 1013, 1016, 1017, 1018, 1014, 59, 1015, 1019,
	909, 401, 946, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 1083, 1084,
	1085, 1000, 1092, 870, 1031, 1087, 286, 92, 30, 92,
	1086, 1118, 1497, 1040, 1039, 286, 286, 286, 286, 286,
	1099, 286, 286, 286, 1097, 1056, 286, 1133, 1134, 1077,
	1078, 1079, 1080, 59, 1036, 1374, 1375, 1616, 1612, 1401,
	972, 1377, 1101, 286, 1103, 1088, 1089, 1090, 286, 1359,
	286, 286, 1279, 1033, 286, 92, 1131, 1035, 1223, 893,
	59, 408, 1380, 1224, 1221, 1379, 951, 952, 1220, 1222,
	957, 960, 961, 1093, 1094, 397, 1219, 1603, 1225, 1137,
	1017, 1018, 1596, 1351, 1188, 742, 1601, 911, 1197, 1196,
	1270, 790, 595, 1129, 1262, 975, 1576, 1575, 978, 979,
	1512, 657, 656, 666, 667, 659, 660, 661, 662, 663,
	664, 665, 658, 963, 93, 668, 414, 735, 287, 1260,
	1458, 287, 1254, 1492, 1130, 1102, 93, 964, 287, 736,
	415, 1021, 402, 403, 1195, 405, 912, 746, 747, 417,
	1145, 416, 1194, 1457, 406, 70, 1456, 1354, 1159, 1199,
	625, 1618, 1617, 1618, 287, 93, 1169, 1166, 286, 287,
	887, 287, 756, 749, 1558, 1187, 1485, 982, 401, 286,
	286, 286, 286, 286, 1213, 1192, 1158, 68, 73, 399,
	414, 286, 65, 1, 308, 286, 1610, 1208, 1174, 286,
	1422, 1493, 1108, 286, 415, 1577, 1526, 1393, 1059, 1050,
	1204, 411, 412, 417, 81, 416, 1191, 1230, 564, 80,
	1247, 1568, 92, 882, 609, 1058, 1202, 1200, 1057, 1534,
	1264, 1253, 1250, 1073, 1483, 1258, 1258, 1400, 1237, 1053,
	1239, 1261, 1240, 1573, 1215, 1216, 1226, 1218, 1214, 798,
	796, 1217, 797, 795, 1236, 1146, 1147, 1148, 800, 799,
	794, 1259, 301, 894, 318, 1020, 1242, 786, 1098, 750,
	92, 92, 1269, 84, 1271, 1272, 1273, 1300, 1299, 1267,
	1268, 1104, 1070, 298, 619, 620, 1255, 1256, 303, 676,
	1201, 656, 666, 667, 659, 660, 661, 662, 663, 664,
	665, 658, 286, 92, 668, 1193, 1281, 1282, 1276, 1243,
	439, 432, 1365, 987, 738, 1455, 1353, 1173, 705, 965,
	1154, 1155, 765, 341, 1298, 1238, 904, 356, 92, 353,
	354, 991, 1205, 650, 934, 339, 333, 764, 1313, 757,
	1012, 1172, 1010, 1009, 428, 1323, 1376, 1372, 763, 995,
	410, 962, 1552, 1450, 1325, 1314, 1315, 409, 52, 1316,
	33, 323, 287, 1324, 286, 633, 1348, 287, 418, 287,
	23, 22, 21, 20, 92, 287, 1338, 1344, 19, 25,
	92, 92, 1337, 1213, 1360, 1322, 93, 18, 93, 17,
	1363, 1323, 16, 945, 584, 93, 37, 27, 26, 15,
	14, 13, 12, 11, 10, 9, 92, 93, 93, 5,
	4, 636, 1357, 24, 694, 946, 2, 0, 1369, 0,
	92, 0, 92, 92, 0, 0, 1258, 1258, 1378, 0,
	0, 0, 1392, 0, 0, 0, 0, 1053, 0, 1053,
	0, 1406, 1386, 0, 1385, 1387, 0, 1391, 0, 0,
	286, 1397, 1398, 0, 0, 0, 0, 1396, 1404, 1405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 92, 0, 1423, 92,
	92, 92, 286, 92, 0, 0, 1415, 0, 0, 0,
	1318, 1319, 0, 0, 0, 0, 0, 0, 948, 949,
	0, 1416, 0, 1418, 0, 1339, 1340, 93, 1341, 1342,
	287, 287, 287, 0, 0, 1429, 1430, 0, 1428, 93,
	1349, 1350, 0, 1438, 0, 93, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 0, 0,
	1459, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 1435, 1436, 0, 1437, 0,
	92, 1439, 1250, 1441, 1467, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 92, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 1402, 0, 0, 0, 0, 1500, 0, 1495,
	1486, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 1480, 92, 92, 0, 92, 1499, 0,
	0, 0, 92, 1363, 92, 92, 92, 286, 0, 1513,
	92, 287, 0, 0, 1511, 1515, 93, 1431, 1506, 0,
	0, 287, 287, 93, 93, 93, 1531, 92, 286, 287,
	1520, 1538, 1521, 1523, 1524, 1519, 1525, 1539, 287, 1540,
	93, 370, 29, 0, 0, 93, 93, 93, 287, 93,
	93, 0, 0, 0, 0, 1546, 0, 1363, 1559, 1567,
	0, 0, 93, 93, 92, 0, 1566, 1565, 0, 0,
	0, 29, 0, 0, 0, 92, 92, 0, 0, 0,
	0, 0, 0, 1580, 0, 0, 1581, 0, 0, 0,
	0, 92, 1495, 1053, 0, 1213, 1587, 0, 0, 0,
	1152, 0, 286, 0, 1153, 0, 0, 0, 0, 400,
	92, 0, 0, 0, 0, 1160, 1161, 1595, 0, 0,
	0, 1167, 0, 0, 1170, 1171, 0, 0, 1602, 1600,
	92, 0, 1177, 0, 0, 0, 1179, 93, 0, 1182,
	1183, 1184, 1185, 1186, 1615, 1501, 1502, 1503, 1504, 1505,
	1626, 0, 0, 1508, 1509, 0, 0, 0, 1604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 93, 0, 0, 0, 0, 0, 421, 0, 0,
	0, 0, 0, 0, 0, 0, 1228, 1229, 93, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 93, 0,
	0, 0, 287, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 287, 287, 0, 0, 287, 287, 0, 0,
	287, 287, 287, 93, 1453, 0, 93, 0, 0, 0,
	652, 0, 655, 0, 0, 0, 332, 93, 669, 670,
	671, 672, 673, 674, 675, 0, 653, 654, 651, 657,
	656, 666, 667, 659, 660, 661, 662, 663, 664, 665,
	658, 0, 0, 668, 0, 657, 656, 666, 667, 659,
	660, 661, 662, 663, 664, 665, 658, 767, 0, 668,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 287, 93, 0, 93, 0, 0, 0, 0, 0,
	287, 287, 287, 287, 287, 0, 287, 287, 287, 0,
	0, 287, 0, 1619, 0, 0, 1447, 0, 1320, 1321,
	284, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	322, 0, 0, 287, 0, 287, 287, 0, 0, 287,
	93, 0, 614, 0, 614, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 0, 0, 429, 0, 0, 0,
	0, 568, 0, 570, 0, 29, 657, 656, 666, 667,
	659, 660, 661, 662, 663, 664, 665, 658, 677, 679,
	668, 657, 656, 666, 667, 659, 660, 661, 662, 663,
	664, 665, 658, 0, 1381, 668, 657, 656, 666, 667,
	659, 660, 661, 662, 663, 664, 665, 658, 0, 692,
	668, 0, 0, 697, 698, 699, 700, 701, 702, 703,
	704, 0, 707, 710, 710, 710, 716, 710, 710, 716,
	710, 724, 725, 726, 727, 728, 729, 730, 0, 0,
	0, 0, 29, 287, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 287, 287, 287, 287, 287, 0,
	0, 0, 0, 0, 0, 0, 287, 766, 0, 0,
	287, 0, 0, 0, 287, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 367, 0, 1432, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 93, 0, 290,
	0, 1443, 1444, 0, 0, 0, 0, 1446, 293, 0,
	0, 0, 649, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 1461, 1462,
	0, 1465, 0, 0, 0, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 93, 0, 332, 1476,
	300, 0, 0, 0, 577, 0, 307, 706, 0, 585,
	0, 591, 0, 0, 440, 0, 0, 593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 93, 0,
	0, 0, 0, 737, 740, 0, 291, 657, 656, 666,
	667, 659, 660, 661, 662, 663, 664, 665, 658, 0,
	0, 668, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 304, 294, 0, 305, 306, 313, 614,
	614, 614, 297, 299, 310, 295, 296, 315, 314, 0,
	292, 312, 311, 0, 0, 0, 614, 1522, 0, 287,
	0, 614, 614, 614, 0, 614, 614, 0, 1445, 93,
	0, 0, 0, 0, 0, 93, 93, 0, 614, 614,
	0, 0, 0, 0, 0, 1548, 1549, 1550, 1551, 0,
	1555, 0, 1556, 1557, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 1562, 0, 1563, 1564, 0,
	0, 0, 0, 0, 0, 93, 0, 93, 93, 0,
	0, 0, 759, 0, 768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1583, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 0, 657, 656,
	666, 667, 659, 660, 661, 662, 663, 664, 665, 658,
	1317, 1592, 668, 0, 0, 287, 0, 0, 0, 0,
	0, 93, 0, 0, 93, 93, 93, 287, 93, 0,
	657, 656, 666, 667, 659, 660, 661, 662, 663, 664,
	665, 658, 0, 0, 668, 0, 874, 0, 0, 0,
	0, 0, 0, 1627, 1628, 440, 0, 440, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 632, 634, 1024, 0,
	0, 0, 766, 0, 0, 0, 766, 0, 0, 0,
	0, 0, 900, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 793, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 849, 850, 0, 0, 0, 0, 0,
	93, 859, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 1151, 0, 0, 0, 0, 0, 953, 954, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	614, 657, 656, 666, 667, 659, 660, 661, 662, 663,
	664, 665, 658, 0, 0, 668, 753, 0, 0, 93,
	93, 0, 93, 0, 0, 0, 0, 93, 440, 93,
	93, 93, 287, 0, 787, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 1156, 0, 0, 400,
	93, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 999, 0, 0,
	0, 0, 0, 0, 1003, 0, 1006, 0, 0, 766,
	0, 0, 0, 0, 0, 93, 1209, 1210, 0, 1034,
	766, 766, 766, 766, 766, 440, 0, 0, 0, 0,
	0, 0, 440, 440, 440, 0, 1024, 0, 1235, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 440,
	0, 0, 0, 0, 440, 440, 440, 0, 440, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 1120, 1121, 1122, 1123, 1124, 368, 1127, 1128,
	429, 0, 614, 1132, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 0, 1189, 1190, 740, 1136, 0, 0, 0, 0,
	0, 1140, 0, 0, 614, 0, 939, 0, 440, 0,
	285, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	285, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 803, 0, 0, 0, 0, 0, 0, 973,
	974, 0, 422, 422, 0, 0, 431, 0, 0, 0,
	0, 285, 0, 285, 0, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	440, 0, 0, 816, 0, 0, 0, 0, 0, 1364,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 440, 0, 0, 0, 829,
	832, 833, 834, 835, 836, 837, 440, 838, 839, 840,
	841, 842, 817, 818, 819, 820, 801, 802, 830, 0,
	804, 0, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 821, 822, 823, 824, 825, 826, 827, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 0, 1141,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 285,
	0, 285, 0, 0, 1473, 1474, 1475, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 1543, 0, 440, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 422, 1469,
	0, 0, 1470, 0, 0, 1472, 1364, 1414, 0, 0,
	0, 0, 285, 285, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 1280, 440, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 332, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	1613, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 969, 0, 0, 1366, 1368, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 285, 0, 0, 0, 0, 0,
	1368, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 0, 440, 0, 440, 1395, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 1424, 1425, 1426, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	422, 869, 0, 0, 0, 422, 422, 0, 0, 422,
	422, 422, 0, 0, 0, 970, 0, 0, 0, 1590,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 422, 422, 422, 422, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 285, 0, 0,
	0, 0, 0, 869, 285, 0, 285, 0, 0, 440,
	0, 0, 0, 0, 285, 1029, 440, 0, 285, 285,
	0, 0, 285, 1037, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 1517,
	0, 1518, 0, 0, 0, 0, 1482, 0, 1482, 1482,
	1482, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 285, 285, 285, 285, 0, 285, 285,
	285, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1572, 0,
	285, 0, 0, 0, 0, 285, 0, 1138, 1139, 440,
	440, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 1588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	422, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 285, 285, 285, 285,
	285, 0, 0, 0, 0, 0, 0, 0, 1227, 0,
	0, 0, 285, 0, 0, 0, 1029, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 550,
	538, 0, 0, 495, 553, 468, 485, 561, 486, 489,
	526, 453, 508, 184, 483, 285, 472, 448, 479, 449,
	470, 497, 126, 501, 467, 540, 511, 552, 155, 0,
	473, 559, 158, 517, 0, 231, 172, 0, 0, 0,
	499, 542, 506, 535, 494, 527, 458, 516, 554, 484,
	524, 555, 0, 0, 0, 94, 95, 96, 0, 1054,
	1055, 0, 0, 0, 0, 0, 116, 0, 521, 549,
	481, 523, 525, 563, 447, 518, 970, 451, 454, 560,
	545, 476, 477, 1251, 0, 0, 0, 0, 0, 285,
	498, 507, 532, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 515, 0, 0, 0, 455, 452,
	0, 0, 0, 0, 496, 0, 0, 0, 457, 0,
	475, 533, 0, 445, 135, 537, 544, 493, 288, 548,
	491, 490, 551, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 541, 471, 480,
	120, 478, 213, 191, 252, 514, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 450, 0,
	232, 255, 274, 114, 466, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 462, 465, 460, 461, 509, 510, 556, 557,
	558, 534, 456, 0, 463, 464, 0, 539, 546, 547,
	513, 97, 106, 157, 271, 206, 131, 256, 446, 459,
	124, 469, 0, 0, 482, 487, 488, 500, 502, 503,
	504, 505, 512, 519, 520, 522, 528, 529, 530, 531,
	536, 543, 562, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 550, 538, 0, 0, 495, 553, 468, 485,
	561, 486, 489, 526, 453, 508, 184, 483, 0, 472,
	448, 479, 449, 470, 497, 126, 501, 467, 540, 511,
	552, 155, 0, 473, 559, 158, 517, 0, 231, 172,
	0, 0, 0, 499, 542, 506, 535, 494, 527, 458,
	516, 554, 484, 524, 555, 0, 0, 0, 94, 95,
	96, 0, 1054, 1055, 0, 0, 0, 0, 0, 116,
	0, 521, 549, 481, 523, 525, 563, 447, 518, 0,
	451, 454, 560, 545, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 498, 507, 532, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 0, 515, 0, 0,
	0, 455, 452, 0, 0, 0, 0, 496, 0, 0,
	0, 457, 0, 475, 533, 0, 445, 135, 537, 544,
	493, 288, 548, 491, 490, 551, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	541, 471, 480, 120, 478, 213, 191, 252, 514, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 450, 0, 232, 255, 274, 114, 466, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 462, 465, 460, 461, 509,
	510, 556, 557, 558, 534, 456, 0, 463, 464, 0,
	539, 546, 547, 513, 97, 106, 157, 271, 206, 131,
	256, 446, 459, 124, 469, 0, 0, 482, 487, 488,
	500, 502, 503, 504, 505, 512, 519, 520, 522, 528,
	529, 530, 531, 536, 543, 562, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 550, 538, 0, 0, 495,
	553, 468, 485, 561, 486, 489, 526, 453, 508, 184,
	483, 0, 472, 448, 479, 449, 470, 497, 126, 501,
	467, 540, 511, 552, 155, 0, 473, 559, 158, 517,
	0, 231, 172, 0, 0, 0, 499, 542, 506, 535,
	494, 527, 458, 516, 554, 484, 524, 555, 59, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 521, 549, 481, 523, 525, 563,
	447, 518, 0, 451, 454, 560, 545, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 498, 507, 532, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	515, 0, 0, 0, 455, 452, 0, 0, 0, 0,
	496, 0, 0, 0, 457, 0, 475, 533, 0, 445,
	135, 537, 544, 493, 288, 548, 491, 490, 551, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 541, 471, 480, 120, 478, 213, 191,
	252, 514, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 450, 0, 232, 255, 274, 114,
	466, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 462, 465,
	460, 461, 509, 510, 556, 557, 558, 534, 456, 0,
	463, 464, 0, 539, 546, 547, 513, 97, 106, 157,
	271, 206, 131, 256, 446, 459, 124, 469, 0, 0,
	482, 487, 488, 500, 502, 503, 504, 505, 512, 519,
	520, 522, 528, 529, 530, 531, 536, 543, 562, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 550, 538,
	0, 0, 495, 553, 468, 485, 561, 486, 489, 526,
	453, 508, 184, 483, 0, 472, 448, 479, 449, 470,
	497, 126, 501, 467, 540, 511, 552, 155, 0, 473,
	559, 158, 517, 0, 231, 172, 0, 0, 0, 499,
	542, 506, 535, 494, 527, 458, 516, 554, 484, 524,
	555, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 549, 481,
	523, 525, 563, 447, 518, 0, 451, 454, 560, 545,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 532, 492, 0, 0, 0, 0, 0, 0, 1356,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	533, 0, 445, 135, 537, 544, 493, 288, 548, 491,
	490, 551, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 541, 471, 480, 120,
	478, 213, 191, 252, 514, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 232,
	255, 274, 114, 466, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 462, 465, 460, 461, 509, 510, 556, 557, 558,
	534, 456, 0, 463, 464, 0, 539, 546, 547, 513,
	97, 106, 157, 271, 206, 131, 256, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 528, 529, 530, 531, 536,
	543, 562, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 550, 538, 0, 0, 495, 553, 468, 485, 561,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 540, 511, 552,
	155, 0, 473, 559, 158, 517, 0, 231, 172, 0,
	0, 0, 499, 542, 506, 535, 494, 527, 458, 516,
	554, 484, 524, 555, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	521, 549, 481, 523, 525, 563, 447, 518, 0, 451,
	454, 560, 545, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 498, 507, 532, 492, 0, 0, 0, 0,
	0, 0, 1038, 0, 474, 0, 515, 0, 0, 0,
	455, 452, 0, 0, 0, 0, 496, 0, 0, 0,
	457, 0, 475, 533, 0, 445, 135, 537, 544, 493,
	288, 548, 491, 490, 551, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 541,
	471, 480, 120, 478, 213, 191, 252, 514, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	450, 0, 232, 255, 274, 114, 466, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 462, 465, 460, 461, 509, 510,
	556, 557, 558, 534, 456, 0, 463, 464, 0, 539,
	546, 547, 513, 97, 106, 157, 271, 206, 131, 256,
	446, 459, 124, 469, 0, 0, 482, 487, 488, 500,
	502, 503, 504, 505, 512, 519, 520, 522, 528, 529,
	530, 531, 536, 543, 562, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 550, 538, 0, 0, 495, 553,
	468, 485, 561, 486, 489, 526, 453, 508, 184, 483,
	0, 472, 448, 479, 449, 470, 497, 126, 501, 467,
	540, 511, 552, 155, 0, 473, 559, 158, 517, 0,
	231, 172, 0, 0, 0, 499, 542, 506, 535, 494,
	527, 458, 516, 554, 484, 524, 555, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 521, 549, 481, 523, 525, 563, 447,
	518, 0, 451, 454, 560, 545, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 498, 507, 532, 492, 0,
	0, 0, 0, 0, 0, 1001, 0, 474, 0, 515,
	0, 0, 0, 455, 452, 0, 0, 0, 0, 496,
	0, 0, 0, 457, 0, 475, 533, 0, 445, 135,
	537, 544, 493, 288, 548, 491, 490, 551, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 541, 471, 480, 120, 478, 213, 191, 252,
	514, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 450, 0, 232, 255, 274, 114, 466,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 462, 465, 460,
	461, 509, 510, 556, 557, 558, 534, 456, 0, 463,
	464, 0, 539, 546, 547, 513, 97, 106, 157, 271,
	206, 131, 256, 446, 459, 124, 469, 0, 0, 482,
	487, 488, 500, 502, 503, 504, 505, 512, 519, 520,
	522, 528, 529, 530, 531, 536, 543, 562, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 550, 538, 0,
	0, 495, 553, 468, 485, 561, 486, 489, 526, 453,
	508, 184, 483, 0, 472, 448, 479, 449, 470, 497,
	126, 501, 467, 540, 511, 552, 155, 0, 473, 559,
	158, 517, 0, 231, 172, 0, 0, 0, 499, 542,
	506, 535, 494, 527, 458, 516, 554, 484, 524, 555,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 521, 549, 481, 523,
	525, 563, 447, 518, 0, 451, 454, 560, 545, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 498, 507,
	532, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	474, 0, 515, 0, 0, 0, 455, 452, 0, 0,
	0, 0, 496, 0, 0, 0, 457, 0, 475, 533,
	0, 445, 135, 537, 544, 493, 288, 548, 491, 490,
	551, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 541, 471, 480, 120, 478,
	213, 191, 252, 514, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 450, 0, 232, 255,
	274, 114, 466, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	462, 465, 460, 461, 509, 510, 556, 557, 558, 534,
	456, 0, 463, 464, 0, 539, 546, 547, 513, 97,
	106, 157, 271, 206, 131, 256, 446, 459, 124, 469,
	0, 0, 482, 487, 488, 500, 502, 503, 504, 505,
	512, 519, 520, 522, 528, 529, 530, 531, 536, 543,
	562, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	550, 538, 0, 0, 495, 553, 468, 485, 561, 486,
	489, 526, 453, 508, 184, 483, 0, 472, 448, 479,
	449, 470, 497, 126, 501, 467, 540, 511, 552, 155,
	0, 473, 559, 158, 517, 0, 231, 172, 0, 0,
	0, 499, 542, 506, 535, 494, 527, 458, 516, 554,
	484, 524, 555, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 521,
	549, 481, 523, 525, 563, 447, 518, 0, 451, 454,
	560, 545, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 498, 507, 532, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 0, 515, 0, 0, 0, 455,
	452, 0, 0, 0, 0, 496, 0, 0, 0, 457,
	0, 475, 533, 0, 445, 135, 537, 544, 493, 288,
	548, 491, 490, 551, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 541, 471,
	480, 120, 478, 213, 191, 252, 514, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 443, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 450,
	0, 232, 255, 274, 114, 466, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	444, 442, 437, 436, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 462, 465, 460, 461, 509, 510, 556,
	557, 558, 534, 456, 0, 463, 464, 0, 539, 546,
	547, 513, 97, 106, 157, 271, 206, 131, 256, 446,
	459, 124, 469, 0, 0, 482, 487, 488, 500, 502,
	503, 504, 505, 512, 519, 520, 522, 528, 529, 530,
	531, 536, 543, 562, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 550, 538, 0, 0, 495, 553, 468,
	485, 561, 486, 489, 526, 453, 508, 184, 483, 0,
	472, 448, 479, 449, 470, 497, 126, 501, 467, 540,
	511, 552, 155, 0, 473, 559, 158, 517, 0, 231,
	172, 0, 0, 0, 499, 542, 506, 535, 494, 527,
	458, 516, 554, 484, 524, 555, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 549, 481, 523, 525, 563, 447, 518,
	0, 451, 454, 560, 545, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 532, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 533, 0, 445, 135, 537,
	544, 493, 288, 548, 491, 490, 551, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 541, 471, 480, 120, 478, 213, 191, 252, 514,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 778, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	443, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 232, 255, 274, 114, 466, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 444, 442, 437, 436, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 462, 465, 460, 461,
	509, 510, 556, 557, 558, 534, 456, 0, 463, 464,
	0, 539, 546, 547, 513, 97, 106, 157, 271, 206,
	131, 256, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	528, 529, 530, 531, 536, 543, 562, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 550, 538, 0, 0,
	495, 553, 468, 485, 561, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 540, 511, 552, 155, 0, 473, 559, 158,
	517, 0, 231, 172, 0, 0, 0, 499, 542, 506,
	535, 494, 527, 458, 516, 554, 484, 524, 555, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 521, 549, 481, 523, 525,
	563, 447, 518, 0, 451, 454, 560, 545, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 498, 507, 532,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 515, 0, 0, 0, 455, 452, 0, 0, 0,
	0, 496, 0, 0, 0, 457, 0, 475, 533, 0,
	445, 135, 537, 544, 493, 288, 548, 491, 490, 551,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 541, 471, 480, 120, 478, 213,
	191, 252, 514, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 434, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 443, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 450, 0, 232, 255, 274,
	114, 466, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 444, 442, 437, 436,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 462,
	465, 460, 461, 509, 510, 556, 557, 558, 534, 456,
	0, 463, 464, 0, 539, 546, 547, 513, 97, 106,
	157, 271, 206, 131, 256, 446, 459, 124, 469, 0,
	0, 482, 487, 488, 500, 502, 503, 504, 505, 512,
	519, 520, 522, 528, 529, 530, 531, 536, 543, 562,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 941, 0, 337, 0, 0, 0, 126, 0,
	336, 0, 0, 0, 155, 0, 942, 380, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 371, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 358, 357, 360, 361, 362, 363,
	0, 0, 116, 359, 364, 365, 366, 0, 0, 0,
	0, 334, 351, 0, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 420, 0, 0, 0,
	394, 0, 350, 0, 0, 343, 344, 346, 345, 347,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 393, 0, 0, 288, 0, 0, 391, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 381, 392,
	387, 388, 385, 386, 384, 383, 382, 395, 373, 374,
	375, 376, 378, 0, 389, 390, 377, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 337, 0, 0, 0, 126, 0, 336,
	0, 0, 0, 155, 0, 0, 380, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 371, 372, 0,
	0, 0, 0, 0, 0, 1045, 0, 59, 0, 0,
	94, 95, 96, 358, 357, 360, 361, 362, 363, 0,
	0, 116, 359, 364, 365, 366, 1046, 0, 0, 0,
	334, 351, 0, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 349, 0, 0, 0, 0, 394,
	0, 350, 0, 0, 343, 344, 346, 345, 347, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	393, 0, 0, 288, 0, 0, 391, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 381, 392, 387,
	388, 385, 386, 384, 383, 382, 395, 373, 374, 375,
	376, 378, 0, 389, 390, 377, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 337, 0, 0, 0, 126, 0, 336, 0,
	0, 0, 155, 0, 0, 380, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 408, 94,
	95, 96, 358, 357, 360, 361, 362, 363, 0, 0,
	116, 359, 364, 365, 366, 0, 0, 0, 0, 334,
	351, 0, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 349, 0, 0, 0, 0, 394, 0,
	350, 0, 0, 343, 344, 346, 345, 347, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 393,
	0, 0, 288, 0, 0, 391, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 381, 392, 387, 388,
	385, 386, 384, 383, 382, 395, 373, 374, 375, 376,
	378, 0, 389, 390, 377, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 337, 0, 0, 0, 126, 0, 336, 0, 0,
	0, 155, 0, 0, 380, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 358, 357, 360, 361, 362, 363, 0, 0, 116,
	359, 364, 365, 366, 0, 0, 0, 0, 334, 351,
	0, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 420, 0, 0, 0, 394, 0, 350,
	0, 0, 343, 344, 346, 345, 347, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 393, 0,
	0, 288, 0, 0, 391, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 373, 374, 375, 376, 378,
	0, 389, 390, 377, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	337, 0, 0, 0, 126, 0, 336, 0, 0, 0,
	155, 0, 0, 380, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 371, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	358, 959, 360, 361, 362, 363, 0, 0, 116, 359,
	364, 365, 366, 0, 0, 0, 0, 334, 351, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 349, 420, 0, 0, 0, 394, 0, 350, 0,
	0, 343, 344, 346, 345, 347, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 393, 0, 0,
	288, 0, 0, 391, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 381, 392, 387, 388, 385, 386,
	384, 383, 382, 395, 373, 374, 375, 376, 378, 0,
	389, 390, 377, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 337,
	0, 0, 0, 126, 0, 336, 0, 0, 0, 155,
	0, 0, 380, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 358,
	956, 360, 361, 362, 363, 0, 0, 116, 359, 364,
	365, 366, 0, 0, 0, 0, 334, 351, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 420, 0, 0, 0, 394, 0, 350, 0, 0,
	343, 344, 346, 345, 347, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 393, 0, 0, 288,
	0, 0, 391, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 381, 392, 387, 388, 385, 386, 384,
	383, 382, 395, 373, 374, 375, 376, 378, 0, 389,
	390, 377, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 337, 0, 0, 0, 126, 0, 336, 0, 0,
	0, 155, 0, 0, 380, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 358, 357, 360, 361, 362, 363, 0, 0, 116,
	359, 364, 365, 366, 0, 0, 0, 0, 334, 351,
	0, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 0, 0, 0, 0, 394, 0, 350,
	0, 0, 343, 344, 346, 345, 347, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 393, 0,
	0, 288, 0, 0, 391, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 373, 374, 375, 376, 378,
	0, 389, 390, 377, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	337, 0, 0, 0, 126, 0, 336, 0, 0, 0,
	155, 0, 0, 380, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 371, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	358, 357, 360, 361, 362, 363, 0, 0, 116, 359,
	364, 365, 366, 0, 0, 0, 0, 334, 351, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 349, 0, 0, 0, 0, 394, 0, 350, 0,
	0, 343, 344, 346, 345, 347, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 393, 0, 0,
	288, 0, 0, 391, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 381, 392, 387, 388, 385, 386,
	384, 383, 382, 395, 373, 374, 375, 376, 378, 0,
	389, 390, 377, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 380, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 358,
	357, 360, 361, 362, 363, 0, 0, 116, 359, 364,
	365, 366, 0, 0, 0, 0, 0, 351, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 0, 0, 0, 0, 394, 0, 350, 0, 0,
	343, 344, 346, 345, 347, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 393, 0, 0, 288,
	0, 0, 391, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 1620, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 381, 392, 387, 388, 385, 386, 384,
	383, 382, 395, 373, 374, 375, 376, 378, 0, 389,
	390, 377, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 380, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 408, 94, 95, 96, 358, 357,
	360, 361, 362, 363, 0, 0, 116, 359, 364, 365,
	366, 0, 0, 0, 0, 0, 351, 0, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 349,
	0, 0, 0, 0, 394, 0, 350, 0, 0, 343,
	344, 346, 345, 347, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 393, 0, 0, 288, 0,
	0, 391, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 373, 374, 375, 376, 378, 0, 389, 390,
	377, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	380, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 371, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 358, 357, 360,
	361, 362, 363, 0, 0, 116, 359, 364, 365, 366,
	0, 0, 0, 0, 0, 351, 0, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 349, 0,
	0, 0, 0, 394, 0, 350, 0, 0, 343, 344,
	346, 345, 347, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 393, 0, 0, 288, 0, 0,
	391, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 381, 392, 387, 388, 385, 386, 384, 383, 382,
	395, 373, 374, 375, 376, 378, 0, 389, 390, 377,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 656, 666, 667, 659, 660, 661, 662,
	663, 664, 665, 658, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 288, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 752, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 754, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 646,
	647, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 288, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 88, 89, 0, 85, 0, 0, 0, 90, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 1028, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 1030, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 288, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 288, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 1028, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 1030, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 288, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 1026, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 0, 993, 0, 0, 994, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 288, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 789, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 788, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 288, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 408, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 288, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	288, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	1030, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 288,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 754,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 288, 0,
	0, 0, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	758, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 288, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 635, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 288, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	426, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 288, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 135, 0, 0,
	0, 288, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 324, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 283, 0,
	288, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 288,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264,
}
var yyPact = [...]int{

	378, -1000, -275, 1012, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 969, 842,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 268, 12250, 36,
	126, -1000, 17156, 123, 1854, 17505, -1000, 25, -1000, 17,
	17505, 21, 16807, -1000, -1000, -48, -60, -1000, 10156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 815, 951, 957,
	967, 549, 998, -1000, 8747, 8747, 97, 97, 16458, 7351,
	-1000, -1000, 344, 17505, 119, 17505, -129, 95, 95, 95,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 121, 17505, 524, 524, 271,
	-1000, 17505, 12, 17505, -1000, 172, -1000, -1000, -1000, 17505,
	524, 901, 324, 90, 231, 231, 231, -1000, 191, -1000,
	4810, 33, 4810, -50, 977, 34, -1, -1000, 324, 4810,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 101, -1000,
	-1000, 17505, 16102, 131, 290, -1000, -1000, -1000, -1000, -1000,
	-1000, 563, 564, -1000, 10156, 1619, 733, 733, -1000, -1000,
	151, -1000, -1000, 11203, 11203, 11203, 11203, 11203, 11203, 11203,
	11203, 11203, 11203, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 733, 171, -1000,
	9807, 733, 733, 733, 733, 733, 733, 733, 733, 10156,
	733, 733, 733, 733, 733, 733, 733, 733, 733, 733,
	733, 733, 733, 733, 733, 733, -1000, -1000, 969, -1000,
	842, -1000, -1000, -1000, 937, 10156, 10156, 969, -1000, 886,
	8747, -1000, -1000, 934, -1000, -1000, -1000, -1000, 343, 991,
	-1000, 11901, 167, 990, 15753, 14706, 17505, 695, 535, -1000,
	-1000, 166, 729, 6988, -69, -1000, -1000, -1000, 288, 14008,
	-1000, -1000, -1000, 900, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 685, 17505, -1000, 2557, -1000, 524,
	4810, 105, 524, 299, 524, 17505, 17505, 4810, 4810, 4810,
	41, 74, 70, 17505, 726, 100, 92, 524, 92, 92,
	92, -1000, 6262, -1000, 4810, 324, -1000, 470, 10156, 4810,
	4810, 4810, 17505, 4810, 4810, -1000, 469, -1000, -1000, 313,
	-1000, -1000, -1000, -1000, -1000, -1000, 4810, 4810, -1000, 988,
	294, -1000, -1000, -1000, -1000, 10156, 231, -1000, 843, -1000,
	-1000, 20, -1000, -1000, -1000, -1000, -1000, 1012, -1000, -1000,
	-1000, -120, -1000, -1000, 10156, 10156, 10156, 10156, 420, 246,
	11203, 429, 318, 11203, 11203, 11203, 11203, 11203, 11203, 11203,
	11203, 11203, 11203, 11203, 11203, 11203, 11203, 11203, 600, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 524, -1000, 1002,
	582, 582, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 11552, 7700, 6262, 549, 682, 969, 8747, 8747, 10156,
	10156, 9445, 9096, 8747, 931, 275, 564, 17505, -1000, -1000,
	10854, -1000, -1000, -1000, -1000, -1000, 440, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17505, 17505, 8747, 8747, 8747, 8747,
	8747, 957, 549, 934, -1000, 997, 205, 431, 724, -1000,
	503, 957, 13659, 749, -1000, 934, -1000, -1000, -1000, 17505,
	-1000, -1000, 15404, -1000, -1000, 5899, 17505, 57, 17505, -1000,
	751, 766, -1000, -1000, -1000, 948, 12961, 13310, 57, 570,
	14706, 17505, -1000, -1000, 14706, 17505, 5536, 6625, -69, -1000,
	6625, 687, -1000, -93, -75, 8049, 148, -1000, -1000, -1000,
	-1000, 4447, 202, 530, 356, -39, -1000, -1000, -1000, 744,
	-1000, 744, 744, 744, 744, -8, -8, -8, -8, -1000,
	-1000, -1000, -1000, -1000, 792, 787, -1000, 744, 744, 744,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 784, 784,
	784, 747, 747, 803, -1000, 17505, 4810, 941, 4810, -1000,
	87, -1000, -1000, -1000, 17505, 17505, 17505, 17505, 17505, 141,
	17505, 17505, 17505, 940, 840, 17505, 524, 524, -1000, -1000,
	-1000, -1000, -1000, -1000, 564, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17505, -1000, -1000, -1000, -1000, 17505, 324, 17505,
	17505, 564, -1000, 17505, 17505, -1000, -1000, -1000, -1000, -1000,
	564, 246, 273, 237, -1000, -1000, 398, -1000, -1000, 1751,
	-1000, -1000, -1000, -1000, 429, 11203, 11203, 11203, 355, 1751,
	2261, 592, 1020, 183, 453, 453, 194, 194, 194, 194,
	194, 435, 435, -1000, -1000, -1000, 440, -1000, -1000, -1000,
	440, 8747, 8747, 711, 733, 162, -1000, 815, -1000, -1000,
	957, 677, 677, 532, 545, 269, 985, 677, 249, 984,
	677, 677, 8747, -1000, -1000, 309, -1000, 10156, 440, -1000,
	159, -1000, 841, 707, 705, 677, 440, 440, 677, 677,
	937, -1000, -1000, 883, 10156, 10156, 10156, -1000, -1000, -1000,
	937, 962, -1000, 892, 891, 976, 8747, 14706, 934, -1000,
	-1000, -1000, 155, 976, 743, 733, -1000, 17505, 14706, 14706,
	14706, 14706, 14706, -1000, 870, 862, -1000, 858, 852, 872,
	17505, -1000, 680, 549, 12961, 173, 733, -1000, 15055, -1000,
	-1000, 976, 14706, 697, -1000, 697, -1000, 154, -1000, -1000,
	687, -69, -78, -1000, -1000, -1000, -1000, 564, -1000, 605,
	663, 4084, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 753,
	524, -1000, 933, 211, 257, 524, 930, -1000, -1000, -1000,
	904, -1000, 329, -44, -1000, -1000, 402, -8, -8, -1000,
	-1000, 148, 899, 148, 148, 148, 459, 459, -1000, -1000,
	-1000, -1000, 386, -1000, -1000, -1000, 373, -1000, 836, 17505,
	4810, -1000, -1000, -1000, -1000, 305, 305, 243, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55,
	750, -1000, -1000, -1000, -1000, 27, 39, 99, -1000, 653,
	-1000, 17505, 4810, -1000, -1000, 294, 294, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 355, 1751, 2130, -1000,
	11203, 11203, -1000, -1000, 677, 677, 8747, 6262, 969, 937,
	-1000, -1000, 103, 600, 103, 11203, 11203, -1000, 11203, 11203,
	-1000, -145, 731, 270, -1000, 10156, 235, -1000, 6262, -1000,
	11203, 11203, -1000, -1000, -1000, -1000, -1000, -1000, 881, 564,
	564, -1000, -1000, 17505, -1000, -1000, -1000, -1000, 973, 10156,
	-1000, 632, -1000, 5173, 957, 833, 17505, 733, 1012, 12961,
	17505, 735, -1000, 286, 766, 819, 825, 671, -1000, -1000,
	-1000, -1000, 859, -1000, 856, -1000, -1000, -1000, -1000, -1000,
	549, -1000, 112, 111, 104, 17505, -1000, 969, 697, -1000,
	-1000, 193, -1000, -1000, -104, -101, -1000, -1000, -1000, 4447,
	-1000, 4447, 17505, 72, -1000, 524, 524, -1000, -1000, -1000,
	748, 823, 11203, -1000, -1000, -1000, 512, 148, 148, -1000,
	320, -1000, -1000, -1000, 675, -1000, 673, 595, 670, 17505,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17505,
	-1000, -1000, -1000, -1000, -1000, 17505, -151, 524, 17505, 17505,
	17505, 17505, 4810, -1000, 324, 324, -1000, 11203, 1751, 1751,
	-1000, -1000, 440, -1000, 957, -1000, 440, 744, 744, -1000,
	744, 747, -1000, 744, 10, 744, 9, 440, 440, 2098,
	1957, 1766, 1736, 733, -139, -1000, 564, 10156, -1000, 1635,
	579, -1000, -1000, 971, 966, 564, -1000, -1000, -1000, 932,
	699, 557, -1000, -1000, 8398, 656, 147, 617, -1000, 969,
	17505, 10156, -1000, -1000, 10156, 746, -1000, 10156, -1000, -1000,
	-1000, 969, 733, 733, 733, 617, 957, -1000, -1000, -1000,
	-1000, 4084, -1000, 615, -1000, 744, -1000, -1000, -1000, 17505,
	-34, 996, 1751, -1000, -1000, -1000, -1000, -1000, -8, 458,
	-8, 365, -1000, 363, 4810, -1000, -1000, -1000, -1000, 936,
	-1000, 6262, -1000, -1000, 741, 795, -1000, -1000, -1000, -1000,
	-1000, 1751, -1000, 937, -1000, -1000, 130, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11203, 11203, 11203, 11203, 11203,
	957, 424, 564, 11203, 11203, -1000, 10156, 10156, 911, -1000,
	733, -1000, 759, 17505, 17505, -1000, 17505, 957, -1000, 564,
	564, 17505, 564, 14357, 17505, 17505, 12599, -1000, 169, 17505,
	-1000, 598, -1000, 225, -1000, -100, 148, -1000, 148, 509,
	505, -1000, 733, 575, -1000, 259, 17505, 17505, -1000, -1000,
	-1000, 841, 841, 841, 841, 5, 440, -1000, 841, 841,
	564, 563, 994, -1000, 733, 1012, 139, -1000, -1000, -1000,
	572, 561, -1000, 561, 561, 173, 169, -1000, 524, 258,
	419, -1000, 69, 17505, 336, 908, -1000, 907, -1000, -1000,
	-1000, -1000, -1000, 53, 6262, 4447, 548, -1000, -1000, -1000,
	-1000, -1000, 440, 78, -161, -1000, -1000, -1000, 17505, 557,
	17505, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 362, -1000,
	-1000, 17505, -1000, -1000, 405, -1000, -1000, 537, -1000, 17505,
	-1000, -1000, 750, -1000, 880, -149, -180, 539, -1000, -1000,
	739, -1000, -1000, 53, 889, -151, -1000, 875, -1000, 17505,
	-1000, 47, -1000, -159, 491, 45, -163, 822, 733, -181,
	821, -1000, 981, 10505, -1000, -1000, 983, 207, 207, 841,
	440, -1000, -1000, -1000, 77, 500, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1246, 1244, 22, 71, 68, 1243, 1241, 1240, 1239,
	100, 96, 95, 1235, 1234, 1233, 1232, 1231, 1230, 1229,
	1228, 1227, 1226, 1224, 1222, 1219, 1217, 1209, 1208, 1203,
	1202, 1201, 1200, 91, 1198, 1195, 1191, 1190, 89, 1188,
	1187, 1183, 1182, 1181, 42, 208, 58, 60, 1180, 57,
	1647, 1179, 122, 69, 64, 1178, 40, 1177, 1176, 70,
	1174, 1173, 56, 1172, 1170, 1747, 1169, 98, 1167, 11,
	36, 1166, 1165, 1163, 1162, 81, 169, 1161, 1160, 15,
	1159, 1157, 99, 1156, 65, 26, 13, 12, 18, 1153,
	61, 1152, 6, 1149, 62, 1148, 1147, 1146, 1145, 34,
	1144, 59, 1143, 37, 24, 1142, 28, 75, 38, 19,
	7, 1141, 1140, 14, 76, 54, 74, 1139, 1135, 1119,
	448, 1118, 49, 1115, 1114, 1113, 30, 77, 82, 402,
	1112, 1111, 1108, 1107, 1103, 66, 915, 1954, 17, 88,
	1099, 1098, 1097, 2607, 44, 55, 29, 1095, 1094, 1093,
	32, 35, 48, 418, 1092, 41, 1090, 1089, 1088, 1083,
	1082, 1080, 1079, 67, 1073, 1071, 1067, 31, 20, 73,
	21, 1064, 1063, 1060, 1059, 50, 72, 1058, 1055, 52,
	1054, 1053, 25, 1051, 1049, 1048, 1044, 1039, 27, 10,
	1038, 16, 1037, 9, 1036, 33, 1035, 5, 1032, 8,
	1031, 2, 0, 1030, 4, 47, 1, 1026, 3, 1024,
	1023, 1022, 1511, 633, 78, 1018, 92,
}
var yyR1 = [...]int{

	0, 210, 211, 211, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	202, 202, 202, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 37, 37, 11,
	12, 12, 12, 12, 214, 214, 59, 59, 60, 60,
	107, 107, 13, 14, 14, 116, 116, 115, 115, 115,
	117, 117, 117, 117, 153, 153, 15, 15, 15, 15,
	15, 15, 15, 204, 204, 203, 201, 201, 200, 200,
	199, 22, 184, 186, 186, 185, 185, 185, 185, 176,
	156, 156, 156, 156, 159, 159, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 158,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	162, 162, 162, 162, 162, 162, 162, 162, 175, 175,
	163, 163, 169, 169, 170, 170, 170, 172, 172, 173,
	173, 130, 130, 130, 165, 165, 166, 166, 171, 171,
	167, 167, 167, 168, 168, 168, 174, 174, 174, 174,
	174, 164, 164, 177, 177, 194, 194, 193, 193, 193,
	183, 183, 190, 190, 190, 190, 190, 180, 180, 180,
	181, 181, 179, 179, 182, 182, 192, 192, 191, 178,
	178, 195, 195, 195, 195, 207, 208, 206, 206, 206,
	206, 206, 187, 187, 187, 188, 188, 188, 189, 189,
	189, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 198, 196, 196, 197, 197, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 123, 123,
	209, 209, 125, 125, 121, 121, 124, 124, 122, 122,
	122, 126, 126, 126, 127, 127, 154, 154, 154, 26,
	26, 28, 28, 29, 30, 30, 148, 148, 149, 149,
	31, 32, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 7, 7, 7, 7, 35, 35, 35, 6, 6,
	27, 27, 27, 27, 20, 215, 33, 34, 34, 38,
	38, 38, 40, 40, 40, 43, 43, 43, 46, 46,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 49,
	49, 45, 45, 47, 47, 47, 47, 140, 140, 140,
	139, 139, 51, 51, 52, 52, 53, 53, 54, 54,
	54, 91, 68, 68, 106, 106, 108, 108, 55, 55,
	55, 55, 56, 56, 57, 57, 58, 58, 147, 147,
	146, 146, 146, 145, 145, 61, 61, 61, 63, 62,
	62, 62, 62, 64, 64, 66, 66, 65, 65, 67,
	69, 69, 69, 69, 69, 70, 70, 50, 50, 50,
	50, 50, 50, 50, 50, 119, 119, 72, 72, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 83, 83, 83, 73, 73, 73, 73, 73,
	73, 73, 44, 44, 84, 84, 84, 90, 85, 85,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 80, 80, 80, 80, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 216, 216, 82,
	81, 81, 81, 81, 81, 81, 81, 42, 42, 42,
	42, 42, 152, 152, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 95, 95, 41,
	41, 93, 93, 94, 96, 96, 92, 92, 92, 75,
	75, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 102,
	102, 102, 103, 103, 103, 103, 104, 104, 104, 74,
	74, 74, 74, 105, 105, 105, 105, 109, 109, 86,
	86, 88, 88, 87, 89, 110, 110, 113, 111, 111,
	114, 114, 114, 114, 114, 112, 112, 112, 142, 142,
	142, 118, 118, 128, 128, 129, 129, 120, 120, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 133, 133, 134, 134, 134, 141, 141, 137,
	137, 138, 138, 143, 143, 144, 144, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 212, 213, 150, 151, 151,
	151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 4, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	5, 7, 6, 5, 5, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -210, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -212,
	6, 7, 8, -37, 10, 11, 31, -22, 124, 125,
	127, 126, 160, 128, 153, 54, 174, 175, 177, 178,
	179, 180, -39, 158, 159, 32, 33, 130, 35, 58,
	9, 267, 155, 154, 26, -211, 369, -38, 5, -99,
	16, -3, -33, -215, -33, -33, -33, -33, -33, -33,
	-184, -186, 58, 97, -134, 134, 78, 259, 131, 132,
	138, -137, -202, -136, 61, 62, 63, 277, 146, 309,
	310, 174, 188, 182, 209, 201, 278, 311, 147, 199,
	202, 246, 144, 312, 229, 236, 72, 177, 255, 313,
	156, 197, 193, 314, 286, 191, 28, 315, 238, 214,
	316, 282, 240, 192, 237, 130, 317, 149, 365, 142,
	318, 215, 219, 319, 247, 320, 321, 322, 186, 187,
	323, 145, 249, 213, 143, 34, 241, 279, 38, 164,
	250, 217, 324, 212, 208, 325, 326, 327, 328, 211,
	185, 207, 42, 221, 220, 222, 245, 204, 329, 330,
	331, 150, 332, 194, 19, 333, 334, 335, 336, 337,
	253, 159, 338, 162, 339, 340, 341, 342, 343, 344,
	239, 216, 218, 139, 166, 235, 281, 345, 251, 190,
	346, 151, 163, 158, 254, 152, 347, 348, 349, 350,
	351, 352, 353, 178, 354, 355, 356, 357, 173, 248,
	257, 41, 226, 358, 184, 141, 359, 175, 170, 231,
	205, 165, 360, 361, 195, 196, 210, 183, 206, 176,
	366, 167, 160, 362, 256, 227, 283, 203, 200, 171,
	363, 168, 169, 364, 367, 242, 232, 243, 244, 233,
	172, 280, 252, 198, 228, -120, 134, 259, 131, 233,
	136, 132, -33, 132, -65, -143, -202, -136, 134, 132,
	115, 202, 246, 124, 230, 241, 242, 238, -125, 239,
	166, -154, 132, -121, 229, 232, 233, 172, -209, -202,
	240, 248, 247, 234, 244, 243, -143, 176, -148, 181,
	-137, 179, -65, -36, 365, 128, -150, -150, 231, 231,
	-150, -85, -50, -71, 81, -76, 30, 24, -75, -72,
	-92, -89, -90, 115, 116, 118, 117, 119, 104, 105,
	112, 82, 120, -80, -78, -79, -81, 65, 64, 73,
	66, 67, 68, 69, 74, 75, 76, -137, -143, -87,
	-212, 48, 49, 268, 269, 270, 271, 276, 272, 84,
	37, 258, 266, 265, 264, 262, 263, 260, 261, 274,
	275, 137, 259, 131, 110, 267, -202, -136, -5, -4,
	-212, 6, 21, 22, -103, 18, 17, -213, 60, -40,
	-48, 43, 44, -49, 22, 36, 47, 45, -34, -47,
	106, -50, -143, -47, -120, -120, 12, -59, -60, -65,
	-67, -143, -111, -153, 176, -114, 248, 247, -138, -112,
	-137, -135, 246, 202, 245, 129, 284, 80, 23, 25,
	224, 83, 115, 17, 84, 114, 268, 124, 52, 285,
	260, 261, 258, 270, 271, 259, 230, 30, 11, 287,
	26, 154, 22, 36, 108, 126, 87, 88, 157, 24,
	155, 76, 290, 20, 55, 12, 14, 291, 292, 15,
	137, 136, 99, 133, 50, 9, 120, 27, 96, 46,
	293, 29, 294, 295, 296, 297, 48, 97, 18, 262,
	263, 32, 298, 276, 161, 110, 53, 39, 81, 299,
	300, 74, 301, 77, 56, 78, 16, 51, 302, 303,
	304, 305, 98, 127, 267, 49, 306, 131, 6, 273,
	31, 153, 47, 307, 132, 86, 274, 275, 135, 75,
	5, 138, 33, 10, 54, 57, 264, 265, 266, 37,
	85, 13, 308, 79, -185, 97, -176, -202, -65, 133,
	-65, 267, -129, 137, -129, -129, 132, -65, -202, -202,
	124, 126, 129, 56, -23, -65, 132, 133, 134, 259,
	131, -65, 121, -65, -202, 31, -126, 97, 13, 259,
	-202, 166, 132, 167, 134, -127, 97, -127, -127, -180,
	133, 34, 145, -151, -212, -138, 170, 171, -151, -124,
	-123, 236, 237, 231, 235, 13, 171, 231, 169, -126,
	-151, 135, -137, -35, -137, 65, -7, -3, -11, -10,
	-12, 89, -150, -150, 59, 80, 78, 79, 96, -50,
	-73, 99, 81, 97, 98, 83, 101, 100, 111, 104,
	105, 106, 107, 108, 109, 110, 102, 103, 114, 89,
	90, 91, 92, 93, 94, 95, -119, -212, -90, -212,
	122, 123, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -212, 121, -2, -85, -4, -212, -212, -212,
	-212, -212, -212, -212, -212, -95, -50, -212, -216, -82,
	-212, -216, -82, -216, -82, -216, -212, -216, -82, -216,
	-82, -216, -216, -82, -212, -212, -212, -212, -212, -212,
	-212, -99, -3, -33, -104, 20, 32, -50, -100, -101,
	-50, -99, 39, -45, -47, -49, 43, 44, 71, 12,
	-140, -139, 23, -137, 65, 121, 12, -66, 27, -65,
	-52, -53, -54, -55, -68, -91, -212, -65, -65, -59,
	-214, 59, 12, 57, -214, 59, 121, 59, 176, -114,
	-153, -116, -115, 249, 251, 89, -142, -137, 65, 30,
	31, 60, 59, -65, -156, -159, -161, -160, -162, -157,
	-158, 199, 200, 115, 203, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 31, 156, 195, 196, 197,
	198, 215, 216, 217, 218, 219, 220, 221, 222, 182,
	201, 278, 183, 184, 185, 186, 187, 188, 190, 191,
	192, 193, 194, -202, -151, 134, -202, 81, -202, -65,
	-65, -151, -151, -151, 168, 168, 132, 132, 173, -65,
	59, 135, -128, 137, -202, -128, -128, -128, -144, -143,
	-135, -151, -126, 65, -50, -151, -151, -151, -65, -151,
	-151, 65, -181, 12, 99, -151, -151, 12, -122, 12,
	99, -50, -127, 56, -149, 179, 213, 366, 367, 368,
	-50, -50, -50, -50, -83, 74, 81, 75, 76, -76,
	-84, -87, -90, 70, 99, 97, 98, 83, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -152, -202, 65, -202, -75, -75, -137,
	-46, 22, 36, -45, -138, -144, -135, -38, -213, -213,
	-99, -45, -45, -50, -50, -92, 65, -45, -92, 65,
	-45, -45, -43, 22, 36, -93, -94, 85, -92, -137,
	-143, -213, -76, -137, -137, -45, -46, -46, -45, -45,
	-103, -213, 10, 99, 59, 19, 59, -102, 25, 26,
	-103, -77, -137, 66, 69, -51, 59, 12, -49, -65,
	-139, 106, -144, -65, -107, 162, -65, 31, 59, -61,
	-63, -62, -64, 46, 50, 52, 47, 48, 49, 53,
	-147, 23, -52, -3, -212, -146, 162, -145, 23, -143,
	65, -107, 57, -52, -65, -52, -67, -143, 106, -114,
	-116, 59, 250, 252, 253, 56, 77, -50, -168, 114,
	-187, -188, -189, -138, 65, 66, -176, -177, -178, -190,
	148, -195, 139, 141, 138, -179, 149, 133, 29, 60,
	-130, 74, 81, -172, 227, -163, 58, -163, -163, -163,
	-163, -167, 202, -167, -167, -167, 58, 58, -163, -163,
	-163, -169, 58, -169, -169, -170, 58, -170, -141, 57,
	-65, -151, 24, -151, -131, 129, 126, 127, -198, 125,
	224, 202, 72, 30, 16, 268, 162, 283, -202, 163,
	-65, -65, -65, -65, -65, 129, 126, -65, -65, -59,
	24, 56, -65, -202, -202, -65, -65, -126, -143, -143,
	-65, -137, 74, 75, 76, -84, -76, -76, -76, -44,
	157, 80, -213, -213, -45, -45, -212, 121, -5, -103,
	-213, -213, 59, 57, 23, 12, 12, -213, 12, 12,
	-213, -213, -45, -96, -94, 87, -50, -213, 121, -213,
	59, 59, -213, -213, -213, -213, -213, -104, 41, -50,
	-50, -101, -104, -118, 20, 12, 37, 37, -70, 13,
	-47, -52, -49, 121, -70, -74, 31, 37, -3, -212,
	-212, -110, -113, -92, -53, -54, -54, -53, -54, 46,
	46, 46, 51, 46, 51, 46, -62, -143, -213, -213,
	-3, -69, 54, 136, 55, -212, -145, -70, -52, -70,
	-70, 121, -115, -117, 254, 251, 257, -202, 65, 59,
	-189, 89, 58, -202, 29, -179, -179, -182, -202, -182,
	29, -165, 30, 74, -173, 228, 66, -167, -167, -168,
	31, -168, -168, -168, -175, 65, -175, 66, 66, 56,
	-137, -151, -150, -205, 144, 140, 148, 149, 142, 61,
	62, 63, 133, 29, 139, 141, 162, 138, -205, -132,
	-133, 135, 23, 133, 29, 162, -204, 57, 168, 224,
	168, 135, -65, -151, -122, -122, -44, 80, -76, -76,
	-213, -213, -46, -138, -99, -104, -155, 115, 199, 156,
	197, 193, 213, 204, 226, 195, 227, -152, -155, -76,
	-76, -76, -76, 277, -99, 88, -50, 86, -138, -76,
	-76, 42, -65, -97, 14, -50, 106, -103, -109, 56,
	-110, -86, -88, -87, -212, -105, -137, -108, -137, -70,
	59, 89, -57, -56, 56, 57, -58, 56, -56, 46,
	46, -213, 133, 133, 133, -108, -99, -70, 251, 255,
	256, -188, -189, -192, -191, -137, -195, -182, -182, 58,
	-166, 56, -76, 60, -168, -168, -202, 115, 60, 59,
	60, 59, 60, 59, -65, -150, -150, -65, -150, -137,
	-201, 280, -203, -202, -137, -137, -137, -65, -151, -126,
	-126, -76, -213, -103, -213, -163, -163, -163, -170, -163,
	187, -163, 187, -213, -213, 20, 20, 20, 20, -212,
	-41, 273, -50, 59, 59, -98, 15, 17, 28, -109,
	59, -213, -213, 59, 121, -213, 59, -99, -113, -50,
	-50, 58, -50, -212, -212, -212, -213, -103, 60, 59,
	-163, -106, -137, -171, 224, 10, -167, 65, -167, 66,
	66, -151, 27, -200, -199, -138, 58, 57, -104, -167,
	-202, -76, -76, -76, -76, -76, -103, 65, -76, -76,
	-50, -85, 29, -88, 37, -3, -137, -137, -137, -103,
	-106, -106, -213, -106, -106, -146, -194, -193, 57, 143,
	72, -191, 60, 59, -174, 139, 29, 138, -79, -168,
	-168, 60, 60, -212, 59, 89, -106, -65, -213, -213,
	-213, -213, -42, 99, 280, -213, -213, -213, 10, -86,
	121, 60, -213, -213, -213, -69, -193, -202, -183, 89,
	65, 151, -137, -164, 72, 29, 29, -196, -197, 162,
	-199, -189, 60, -213, 278, 53, 281, -110, -137, 66,
	-65, 65, -213, 59, -137, -204, 42, 279, 282, 58,
	-197, 37, -201, 42, -106, 164, 280, 60, 165, 281,
	-207, -208, 56, -212, 282, -208, 56, 11, 10, -76,
	161, -206, 152, 147, 150, 31, -206, -213, -213, 146,
	30, 74,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 624, 0,
	365, 365, 365, 365, 365, 365, 365, 0, 694, 677,
	0, 365, 0, 0, -2, 330, 331, 0, 333, -2,
	0, 0, 342, 1007, 1007, 0, 0, 1007, 0, 1005,
	47, 48, 348, 349, 350, 1, 3, 0, 369, 632,
	0, 0, -2, 367, 0, 0, 677, 677, 0, 0,
	76, 77, 0, 0, 0, 990, 0, 675, 675, 675,
	695, 696, 699, 700, 30, 31, 32, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 0, 0, 0, 0, 0,
	678, 0, 0, 0, 276, 447, 703, 704, 990, 0,
	0, 0, 321, 0, 324, 324, 324, 290, 0, 292,
	1008, 0, 1008, 0, 299, 0, 0, 305, 321, 1008,
	313, 327, 328, 315, 310, 311, 329, 332, 0, 337,
	340, 0, 355, 0, 867, 347, 360, 361, 1007, 1007,
	364, 33, 498, 457, 0, 463, 465, 0, 500, 501,
	502, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 532, 533, 609, 610, 611,
	612, 613, 614, 615, 616, 467, 468, 606, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	0, 567, 567, 567, 567, 567, 567, 567, 567, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 624, 43,
	0, 365, 370, 371, 636, 0, 0, 624, 1006, 0,
	0, -2, -2, 381, 387, 388, 389, 390, 366, 0,
	393, 397, 0, 0, 0, 0, 0, 0, 0, 56,
	58, 447, 62, 0, 978, 658, -2, -2, 0, 0,
	701, 702, -2, 839, -2, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 0, 0, 95, 0, 93, 0,
	1008, 0, 0, 0, 0, 0, 0, 1008, 1008, 1008,
	0, 0, 0, 0, 267, 0, 673, 0, 673, 673,
	673, 275, 0, 277, 1008, 321, 280, 0, 0, 1008,
	1008, 1008, 0, 1008, 1008, 287, 0, 288, 289, 0,
	197, 198, 199, 293, 1009, 1010, 1008, 1008, 295, 0,
	318, 316, 317, 308, 309, 0, 324, 302, 303, 306,
	307, 338, 341, 358, 356, 357, 359, 351, 352, 353,
	354, 0, 362, 363, 0, 0, 0, 0, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	486, 487, 488, 489, 490, 491, 464, 0, 478, 0,
	0, 0, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 0, 378, 0, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 375, 0, 598, 0, 551, 559,
	0, 552, 560, 553, 561, 554, 0, 555, 562, 556,
	563, 557, 558, 564, 0, 0, 0, 378, 378, 0,
	0, 632, 0, 380, 34, 0, 0, 633, 625, 626,
	629, 632, 0, 402, 391, 382, 385, 386, 368, 0,
	394, 398, 0, 400, 401, 0, 0, 60, 0, 446,
	0, 404, 406, 407, 408, 428, 0, 430, -2, 0,
	0, 0, 54, 55, 0, 0, 0, 0, 978, 664,
	0, 64, 65, 0, 0, 0, 173, 668, 669, 670,
	666, 222, 0, 0, 161, 157, 101, 102, 103, 150,
	105, 150, 150, 150, 150, 170, 170, 170, 170, 133,
	134, 135, 136, 137, 0, 0, 120, 150, 150, 150,
	124, 140, 141, 142, 143, 144, 145, 146, 147, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 152, 152,
	152, 154, 154, 697, 79, 0, 1008, 0, 1008, 91,
	0, 236, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 705,
	706, 278, 279, 322, 323, 281, 282, 283, 284, 285,
	286, 325, 0, 200, 201, 294, 298, 0, 321, 0,
	0, 300, 301, 0, 0, 339, 343, 344, 345, 346,
	499, 458, 459, 460, 462, 479, 0, 481, 483, 469,
	470, 494, 495, 496, 0, 0, 0, 0, 492, 474,
	0, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 519, 582, 583, 0, 517, 518, 529,
	0, 0, 0, 379, 607, 0, -2, 0, 497, 653,
	632, 0, 0, 0, 0, 502, 609, 0, 502, 609,
	0, 0, 0, 376, 377, 604, 601, 0, 0, 606,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 44, 637, 0, 0, 0, 0, 628, 630, 631,
	636, 0, 617, 0, 0, 455, 0, 0, 383, 40,
	399, 395, 0, 455, 0, 0, 445, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 438, 0, 0, 0,
	0, 429, 0, 0, 0, 450, 922, 431, 0, 433,
	434, 455, 0, 455, 57, 455, 59, 0, 449, 659,
	63, 0, 0, 68, 69, 660, 661, 662, 663, 0,
	92, 223, 225, 228, 229, 230, 96, 97, 98, 0,
	0, 210, 0, 0, 204, 204, 0, 202, 203, 94,
	164, 162, 0, 159, 158, 104, 0, 170, 170, 127,
	128, 173, 0, 173, 173, 173, 0, 0, 121, 122,
	123, 115, 0, 116, 117, 118, 0, 119, 0, 0,
	1008, 81, 676, 82, 1007, 0, 0, 689, 237, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 0,
	83, 241, 243, 242, 246, 0, 0, 0, 268, 270,
	674, 0, 1008, 273, 274, 318, 318, 297, 319, 320,
	304, 335, 480, 482, 484, 471, 492, 475, 0, 472,
	0, 0, 466, 534, 0, 0, 378, 0, 624, 636,
	538, 539, 0, 0, 0, 0, 0, 575, 0, 0,
	576, 0, 624, 0, 602, 0, 0, 550, 0, 569,
	0, 0, 570, 571, 572, 573, 574, 36, 0, 634,
	635, 627, 35, 0, 671, 672, 618, 619, 620, 0,
	392, 403, 384, 0, 632, 647, 0, 0, 640, 0,
	0, 455, 655, 0, 405, 424, 426, 0, 421, 436,
	437, 439, 0, 441, 0, 443, 444, 409, 410, 411,
	0, 412, 0, 0, 0, 0, 432, 624, 455, 52,
	53, 0, 66, 67, 0, 0, 73, 174, 175, 0,
	226, 0, 0, 0, 192, 204, 204, 195, 205, 196,
	0, 166, 0, 163, 100, 160, 0, 173, 173, 129,
	0, 130, 131, 132, 0, 148, 0, 0, 0, 0,
	698, 80, 231, 1007, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 1007, 0,
	1007, 690, 691, 692, 693, 0, 86, 0, 0, 0,
	0, 0, 1008, 272, 321, 321, 473, 0, 493, 476,
	535, 536, 0, 608, 632, 38, 0, 150, 150, 587,
	150, 154, 590, 150, 592, 150, 595, 0, 0, 0,
	0, 0, 0, 0, 599, 549, 605, 0, 607, 0,
	0, 638, 37, 622, 0, 456, 396, 41, 45, 0,
	647, 639, 649, 651, 0, 0, 643, 0, 416, 624,
	0, 0, 418, 425, 0, 0, 419, 0, 420, 440,
	442, -2, 0, 0, 0, 0, 632, 51, 70, 71,
	72, 224, 227, 0, 206, 150, 209, 193, 194, 0,
	168, 0, 165, 151, 125, 126, 171, 172, 170, 0,
	170, 0, 155, 0, 1008, 232, 233, 234, 235, 0,
	240, 0, 84, 85, 0, 0, 245, 269, 271, 291,
	296, 477, 537, 636, 540, 584, 170, 588, 589, 591,
	593, 594, 596, 542, 541, 0, 0, 0, 0, 0,
	632, 0, 603, 0, 0, 42, 0, 0, 0, 46,
	0, 652, 0, 0, 0, 61, 0, 632, 656, 657,
	422, 0, 427, 0, 0, 0, 430, 50, 184, 0,
	208, 0, 414, 176, 169, 0, 173, 149, 173, 0,
	0, 78, 0, 87, 88, 0, 0, 0, 39, 585,
	586, 0, 0, 0, 0, 577, 0, 600, 0, 0,
	623, 621, 0, 650, 0, 642, 645, 644, 417, 49,
	0, 0, 452, 0, 0, 450, 183, 185, 0, 190,
	0, 207, 0, 0, 181, 0, 178, 180, 167, 138,
	139, 153, 156, 0, 0, 0, 0, 247, 543, 545,
	544, 546, 0, 0, 0, 548, 565, 566, 0, 641,
	0, 423, 451, 453, 454, 413, 186, 187, 0, 191,
	189, 0, 415, 99, 0, 177, 179, 0, 263, 0,
	89, 90, 83, 547, 0, 0, 0, 648, 646, 188,
	0, 182, 262, 0, 0, 86, 578, 0, 581, 0,
	264, 0, 244, 579, 0, 0, 0, 211, 0, 0,
	212, 213, 0, 0, 580, 214, 0, 0, 0, 0,
	0, 215, 217, 218, 0, 0, 216, 265, 266, 219,
	220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:357
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:362
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:395
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:401
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:421
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:429
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:433
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:460
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:488
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:505
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:517
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.insertAction = InsertAct
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:539
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereClause, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereClause, yyDollar[6].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereClause, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:571
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:581
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:586
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:590
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:616
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.characteristic = ReadWrite
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:630
		{
			yyVAL.characteristic = ReadOnly
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:648
		{
			yyVAL.isolationLevel = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.scope = SessionScope
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.scope = GlobalScope
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:675
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:680
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:684
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:688
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:697
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:701
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:712
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:728
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:734
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:740
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:747
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:758
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:769
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:773
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:783
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1046
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1077
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1104
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1285
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1308
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1312
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1316
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1320
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1332
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1379
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1415
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1420
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1453
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1527
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1543
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1547
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1563
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[5].tableNames, IfExists: yyDollar[4].boolean, Comments: Comments(yyDollar[2].bytes2)}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1575
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[6].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[5].tableName.ToViewName()}, IfExists: yyDollar[4].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[5].colIdent.String()), IfExists: yyDollar[4].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[5].colIdent.String()), IfExists: yyDollar[4].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1668
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1689
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1694
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1716
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = "extended "
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = "full "
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1798
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1830
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1846
		{
			yyVAL.scope = ImplicitScope
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.scope = SessionScope
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			yyVAL.scope = GlobalScope
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1874
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.explainType = EmptyType
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1922
		{
			yyVAL.explainType = JSONType
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.explainType = TreeType
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.explainType = VitessType
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.explainType = TraditionalType
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.explainType = AnalyzeType
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &OtherRead{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			setAllowComments(yylex, true)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2032
		{
			yyVAL.bytes2 = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2036
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.unionType = UnionBasic
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.unionType = UnionAll
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.unionType = UnionDistinct
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = SQLCacheStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2068
		{
			yyVAL.boolean = false
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2081
		{
			yyVAL.selectExprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2090
		{
			yyVAL.strs = nil
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2106
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2160
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2173
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2185
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2233
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2243
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2266
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2286
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2290
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2296
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2306
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2314
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.joinType = NormalJoinType
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.joinType = NormalJoinType
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.joinType = NormalJoinType
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.joinType = StraightJoinType
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			yyVAL.joinType = LeftJoinType
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2351
		{
			yyVAL.joinType = LeftJoinType
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2355
		{
			yyVAL.joinType = RightJoinType
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.joinType = RightJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2369
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2379
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2404
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2408
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2412
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2416
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2420
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2956
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2960
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.matchExprOption = NoOption
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2982
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2986
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2990
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3070
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3090
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3095
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3113
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3171
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3189
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3203
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3214
		{
			yyVAL.orderDirection = AscOrder
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.orderDirection = AscOrder
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.orderDirection = DescOrder
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3227
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3231
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3235
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3239
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3244
		{
			yyVAL.lock = NoLock
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.lock = ForUpdateLock
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3252
		{
			yyVAL.lock = ShareModeLock
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3265
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3273
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3277
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3291
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3295
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3300
		{
			yyVAL.updateExprs = nil
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3304
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3314
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3324
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3346
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3350
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3356
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3366
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3372
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3376
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3380
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3384
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3388
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.bytes = []byte("charset")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.expr = &Default{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3420
		{
			yyVAL.boolean = false
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3422
		{
			yyVAL.boolean = true
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3425
		{
			yyVAL.boolean = false
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3427
		{
			yyVAL.boolean = true
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3430
		{
			yyVAL.ignore = false
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.ignore = true
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3444
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3446
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3450
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3452
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3457
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3461
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3467
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3470
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3474
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3477
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3479
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3494
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3500
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3504
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3835
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			decNesting(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3849
		{
			skipToEnd(yylex)
		}
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3854
		{
			skipToEnd(yylex)
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3858
		{
			skipToEnd(yylex)
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3862
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
