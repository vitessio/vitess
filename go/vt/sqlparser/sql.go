// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const TABLES = 57542
const VSCHEMA = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const FIELDS = 57547
const ENGINES = 57548
const PLUGINS = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const TIMESTAMPADD = 57579
const TIMESTAMPDIFF = 57580
const MATCH = 57581
const AGAINST = 57582
const BOOLEAN = 57583
const LANGUAGE = 57584
const WITH = 57585
const QUERY = 57586
const EXPANSION = 57587
const UNUSED = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 295,
	160, 295,
	-2, 285,
	-1, 260,
	112, 635,
	-2, 631,
	-1, 261,
	112, 636,
	-2, 632,
	-1, 329,
	82, 810,
	-2, 63,
	-1, 330,
	82, 766,
	-2, 64,
	-1, 335,
	82, 745,
	-2, 597,
	-1, 337,
	82, 787,
	-2, 599,
	-1, 606,
	1, 347,
	5, 347,
	12, 347,
	13, 347,
	14, 347,
	15, 347,
	17, 347,
	19, 347,
	30, 347,
	31, 347,
	42, 347,
	43, 347,
	44, 347,
	45, 347,
	46, 347,
	48, 347,
	49, 347,
	52, 347,
	53, 347,
	55, 347,
	56, 347,
	264, 347,
	-2, 365,
	-1, 609,
	53, 44,
	55, 44,
	-2, 48,
	-1, 755,
	112, 638,
	-2, 634,
	-1, 983,
	5, 30,
	-2, 432,
	-1, 1013,
	5, 29,
	-2, 571,
	-1, 1255,
	5, 30,
	-2, 572,
	-1, 1307,
	5, 29,
	-2, 574,
	-1, 1384,
	5, 30,
	-2, 575,
}

const yyPrivate = 57344

const yyLast = 12608

var yyAct = [...]int{

	261, 1408, 1418, 562, 1288, 1218, 1319, 1107, 1372, 1275,
	265, 1034, 1016, 868, 1158, 1192, 278, 1017, 1159, 841,
	57, 239, 1155, 911, 877, 561, 3, 948, 1061, 867,
	1040, 1165, 81, 334, 706, 1171, 205, 1130, 975, 205,
	291, 864, 780, 897, 720, 1087, 790, 787, 839, 292,
	51, 230, 1078, 622, 843, 789, 828, 603, 757, 808,
	602, 494, 500, 907, 881, 435, 328, 205, 81, 821,
	325, 506, 205, 514, 205, 320, 576, 238, 263, 248,
	611, 621, 56, 577, 1411, 1395, 1406, 1382, 608, 1403,
	323, 1219, 1394, 1381, 1147, 1247, 231, 232, 233, 234,
	440, 51, 237, 1187, 1188, 859, 860, 468, 1186, 244,
	252, 200, 196, 197, 198, 1049, 858, 623, 1048, 624,
	1069, 1050, 466, 488, 202, 1347, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 236, 235,
	538, 303, 890, 309, 310, 307, 308, 306, 305, 304,
	61, 1278, 192, 1238, 194, 322, 898, 311, 312, 1236,
	437, 484, 439, 229, 485, 482, 483, 1131, 1294, 694,
	695, 477, 478, 470, 453, 472, 63, 64, 65, 66,
	67, 1110, 487, 1109, 1405, 692, 1373, 1402, 1106, 822,
	331, 1365, 1422, 205, 882, 1426, 205, 1320, 1035, 1037,
	454, 442, 205, 693, 1133, 469, 471, 194, 205, 696,
	1322, 81, 884, 81, 1111, 81, 81, 699, 81, 884,
	81, 884, 1328, 685, 1103, 81, 1181, 1180, 199, 1179,
	1105, 438, 450, 445, 930, 207, 195, 1354, 1135, 1258,
	1139, 436, 1134, 942, 1132, 193, 941, 1117, 929, 1137,
	1062, 550, 551, 1045, 1002, 81, 854, 969, 1136, 729,
	465, 617, 465, 502, 465, 465, 518, 465, 460, 465,
	503, 1138, 1140, 865, 465, 1036, 934, 992, 1321, 1204,
	528, 446, 538, 538, 452, 928, 513, 490, 491, 467,
	459, 721, 726, 1348, 51, 447, 461, 448, 1420, 898,
	449, 1421, 1380, 1419, 1149, 891, 1363, 989, 883, 547,
	1337, 1169, 549, 880, 878, 883, 879, 883, 205, 205,
	205, 876, 882, 1329, 1327, 950, 1104, 81, 1102, 625,
	1205, 809, 809, 81, 999, 925, 922, 923, 687, 921,
	560, 1067, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 1427, 575, 578, 578, 578, 584, 578, 578, 584,
	578, 592, 593, 594, 595, 596, 597, 601, 607, 70,
	932, 935, 722, 456, 457, 458, 512, 511, 436, 550,
	551, 579, 581, 583, 585, 587, 589, 590, 580, 582,
	1428, 586, 588, 513, 591, 610, 504, 619, 258, 966,
	967, 968, 615, 949, 1368, 71, 600, 927, 609, 550,
	551, 434, 527, 526, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 887, 508, 538, 764, 511, 926,
	888, 512, 511, 1386, 1284, 205, 1283, 781, 1151, 782,
	81, 762, 763, 761, 513, 205, 205, 81, 513, 331,
	1082, 205, 1081, 1070, 205, 1388, 987, 205, 986, 1361,
	191, 205, 1094, 81, 81, 976, 441, 931, 81, 81,
	81, 205, 81, 81, 1364, 512, 511, 1301, 81, 81,
	54, 22, 933, 732, 733, 1221, 1051, 988, 1052, 465,
	760, 1092, 513, 493, 708, 1281, 465, 529, 530, 531,
	532, 533, 534, 535, 528, 1114, 81, 538, 1079, 1062,
	205, 1057, 465, 465, 783, 290, 81, 465, 465, 465,
	705, 465, 465, 633, 734, 317, 318, 465, 465, 700,
	704, 512, 511, 689, 690, 1325, 1404, 512, 511, 697,
	688, 243, 322, 443, 444, 703, 686, 79, 513, 747,
	749, 750, 755, 753, 513, 748, 1390, 493, 1093, 714,
	81, 683, 758, 1098, 1095, 1088, 1096, 1091, 1325, 1376,
	1334, 1089, 1090, 1325, 493, 813, 1325, 1355, 1325, 1324,
	799, 802, 462, 333, 736, 1097, 810, 1273, 1272, 751,
	794, 728, 455, 81, 81, 1260, 493, 1333, 743, 51,
	205, 1201, 531, 532, 533, 534, 535, 528, 205, 205,
	538, 885, 205, 205, 564, 1168, 205, 205, 205, 81,
	792, 795, 796, 1257, 493, 801, 804, 805, 727, 784,
	785, 1120, 81, 1211, 1210, 1207, 1208, 1207, 1206, 981,
	493, 754, 58, 818, 806, 512, 511, 825, 493, 1253,
	817, 708, 819, 820, 792, 493, 1336, 840, 632, 631,
	849, 607, 513, 1156, 851, 607, 1168, 552, 553, 554,
	555, 556, 557, 558, 559, 981, 1041, 825, 848, 847,
	612, 1041, 981, 1209, 24, 855, 205, 81, 823, 81,
	899, 900, 901, 81, 81, 205, 205, 205, 872, 205,
	205, 850, 856, 205, 81, 1053, 913, 852, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 825,
	205, 538, 205, 205, 1168, 205, 333, 824, 333, 857,
	333, 333, 54, 333, 24, 333, 465, 613, 465, 1005,
	333, 331, 1004, 909, 910, 981, 281, 280, 283, 284,
	285, 286, 825, 465, 869, 282, 287, 613, 1011, 612,
	618, 24, 1012, 755, 957, 830, 833, 834, 835, 831,
	516, 832, 836, 730, 916, 1172, 1173, 698, 54, 614,
	1108, 616, 54, 938, 939, 940, 245, 943, 944, 1306,
	1396, 945, 1290, 958, 892, 1265, 959, 965, 912, 614,
	915, 612, 758, 1197, 970, 1172, 1173, 742, 947, 54,
	1056, 908, 903, 953, 492, 830, 833, 834, 835, 831,
	971, 832, 836, 902, 1413, 1178, 205, 205, 205, 205,
	205, 1409, 1177, 1199, 54, 1018, 1175, 1156, 205, 1083,
	724, 205, 333, 702, 980, 205, 1028, 1013, 627, 205,
	1026, 1029, 754, 1025, 1030, 1027, 834, 835, 1024, 249,
	250, 1400, 996, 1393, 1116, 954, 794, 998, 81, 1398,
	964, 1014, 1015, 507, 963, 607, 607, 607, 607, 607,
	1043, 1054, 1044, 495, 1020, 1021, 1019, 1023, 505, 1022,
	840, 1074, 1038, 1031, 1066, 496, 630, 1042, 607, 1039,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	1063, 1046, 538, 463, 1370, 1369, 81, 81, 1304, 756,
	1064, 1058, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 1071, 1072, 1073,
	1251, 1075, 1076, 1077, 1059, 1060, 81, 893, 894, 895,
	896, 1286, 918, 701, 838, 333, 1080, 246, 247, 493,
	507, 205, 333, 904, 905, 906, 465, 962, 1099, 240,
	81, 1341, 1086, 241, 58, 961, 1340, 814, 333, 333,
	1292, 1041, 486, 333, 333, 333, 993, 333, 333, 990,
	869, 719, 1113, 333, 333, 465, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 1415, 1414,
	538, 1124, 509, 1415, 1351, 81, 81, 1148, 1123, 1279,
	725, 738, 1018, 464, 1157, 60, 1142, 62, 1129, 55,
	1141, 516, 1, 1407, 333, 1220, 755, 957, 1287, 81,
	1162, 924, 1371, 1318, 1191, 875, 866, 1167, 69, 1118,
	433, 68, 1362, 1160, 81, 874, 81, 81, 1176, 873,
	1326, 1183, 1161, 1277, 51, 886, 1068, 889, 1198, 1190,
	1182, 1065, 1367, 1185, 638, 786, 636, 637, 635, 735,
	640, 639, 1194, 1189, 205, 634, 218, 326, 1195, 1196,
	837, 811, 1122, 626, 914, 510, 72, 1101, 1100, 920,
	480, 205, 481, 220, 546, 960, 1047, 81, 815, 816,
	81, 81, 205, 1202, 1203, 332, 1163, 731, 81, 499,
	1339, 205, 1291, 997, 573, 1152, 807, 266, 746, 279,
	276, 277, 737, 1010, 333, 520, 264, 791, 793, 1213,
	256, 1225, 605, 598, 829, 827, 826, 333, 267, 321,
	1226, 1214, 1174, 1216, 1170, 604, 1119, 1246, 1346, 1234,
	741, 972, 973, 974, 26, 59, 251, 19, 18, 1227,
	607, 17, 1212, 20, 16, 15, 869, 14, 869, 1018,
	1252, 451, 30, 21, 13, 12, 1262, 11, 1261, 1215,
	81, 10, 9, 8, 7, 6, 5, 1245, 81, 4,
	1224, 242, 333, 1054, 333, 1271, 23, 2, 936, 937,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 333,
	81, 498, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 1269, 0, 0, 0, 0, 473, 0, 474, 475,
	1122, 476, 254, 479, 0, 333, 0, 0, 489, 0,
	1280, 0, 1282, 0, 0, 0, 0, 203, 81, 81,
	228, 81, 465, 0, 0, 0, 81, 0, 81, 81,
	81, 205, 1305, 0, 81, 1313, 1293, 1314, 1315, 1316,
	0, 0, 1307, 1312, 0, 255, 0, 0, 324, 1323,
	1317, 81, 0, 203, 1160, 203, 1330, 0, 0, 0,
	1338, 0, 0, 1161, 0, 0, 1308, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1331, 0, 1332, 1360, 81, 0, 0, 1359,
	0, 0, 0, 0, 1353, 0, 1335, 81, 81, 0,
	811, 1374, 1289, 0, 0, 1378, 0, 1160, 0, 0,
	0, 1375, 0, 0, 0, 81, 1161, 0, 51, 978,
	0, 0, 1018, 979, 1383, 0, 205, 0, 0, 0,
	983, 984, 985, 0, 81, 1126, 1127, 991, 0, 0,
	994, 995, 0, 333, 1392, 0, 1001, 0, 1143, 1144,
	1003, 1145, 1146, 1006, 1007, 1008, 1009, 81, 1399, 1397,
	0, 0, 0, 1153, 1154, 0, 1401, 0, 0, 1412,
	0, 548, 0, 0, 203, 1033, 0, 203, 1423, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 203,
	0, 1084, 333, 0, 0, 655, 0, 1231, 1232, 0,
	1233, 0, 0, 1235, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 1387, 1410, 0, 0, 0, 1289,
	869, 333, 0, 684, 0, 1200, 0, 606, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 497, 501, 333, 709, 710, 0, 0,
	0, 711, 712, 713, 0, 715, 716, 0, 0, 1274,
	519, 717, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 1229, 0, 0, 811, 0, 0,
	1164, 1166, 0, 0, 0, 563, 0, 0, 0, 203,
	203, 203, 0, 0, 574, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 1166, 0, 1128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 333, 1193, 669, 672, 673, 674, 675, 676, 677,
	0, 678, 679, 680, 681, 682, 657, 658, 659, 660,
	641, 642, 670, 0, 644, 0, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 661, 662, 663, 664,
	665, 666, 667, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 1217, 0, 0, 1222, 1223, 0, 0, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	1295, 1296, 1297, 1298, 1299, 0, 0, 0, 1302, 1303,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 203, 203, 0, 0,
	759, 0, 203, 0, 0, 203, 0, 0, 203, 0,
	0, 0, 707, 0, 811, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 333, 1230, 0, 0, 0,
	917, 0, 919, 1276, 0, 0, 0, 1239, 1240, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 333, 723,
	0, 203, 0, 0, 0, 333, 0, 1254, 1255, 1256,
	707, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 745, 606, 0, 1270, 0,
	606, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 1311, 0, 0, 0,
	0, 1276, 255, 1276, 1276, 1276, 0, 255, 255, 1193,
	0, 255, 255, 255, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 1276, 563, 0, 1416,
	797, 798, 0, 0, 0, 0, 255, 255, 255, 255,
	0, 203, 1300, 0, 0, 0, 0, 0, 0, 203,
	845, 0, 0, 203, 203, 0, 0, 203, 853, 707,
	0, 1366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 333, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 863, 0,
	1385, 1342, 1343, 1344, 1345, 0, 0, 0, 1349, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	1356, 1357, 1358, 0, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 0, 203, 538, 0,
	759, 0, 1276, 0, 0, 0, 203, 203, 203, 0,
	203, 203, 1379, 0, 203, 0, 0, 0, 0, 1384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 203, 0, 951, 952, 0, 203, 1389, 0, 0,
	0, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 1112,
	955, 956, 0, 501, 606, 606, 606, 606, 606, 24,
	25, 52, 27, 28, 0, 0, 0, 0, 0, 606,
	215, 0, 1424, 1425, 0, 0, 0, 606, 43, 0,
	0, 0, 0, 29, 48, 49, 0, 0, 0, 0,
	255, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 54, 255, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 203, 203, 203,
	203, 203, 1000, 0, 0, 0, 0, 1249, 0, 1032,
	0, 0, 203, 0, 0, 208, 845, 0, 0, 0,
	203, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	219, 214, 0, 0, 0, 0, 0, 0, 31, 32,
	34, 33, 36, 0, 50, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 0, 538,
	0, 0, 217, 0, 0, 37, 44, 45, 223, 0,
	46, 47, 35, 0, 0, 0, 0, 0, 0, 0,
	1244, 0, 0, 0, 0, 0, 39, 40, 0, 41,
	42, 522, 0, 525, 0, 209, 0, 0, 0, 539,
	540, 541, 542, 543, 544, 545, 0, 523, 524, 521,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 221, 212, 538, 222, 227, 1243, 0, 0,
	213, 216, 203, 210, 226, 225, 0, 0, 0, 0,
	0, 0, 255, 1115, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 255, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 1241, 0, 538, 0,
	53, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 1285, 0, 0, 0,
	0, 0, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 0, 0, 538, 0, 0, 0, 606,
	0, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 0, 1184, 538, 1125, 0, 0, 0,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 0, 0, 538, 203, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 0, 0,
	538, 0, 203, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 527, 526, 536, 537, 529, 530, 531,
	532, 533, 534, 535, 528, 0, 0, 538, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 0, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 1264, 0, 0, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 410, 845, 381, 424, 359, 373, 432, 374, 375,
	403, 345, 389, 139, 371, 0, 362, 340, 368, 341,
	360, 383, 103, 386, 358, 412, 392, 423, 120, 430,
	122, 397, 0, 160, 131, 0, 0, 385, 414, 387,
	408, 380, 404, 350, 396, 425, 372, 401, 426, 0,
	0, 0, 80, 0, 870, 871, 0, 0, 0, 0,
	0, 96, 0, 399, 420, 370, 400, 402, 339, 398,
	0, 343, 346, 431, 416, 365, 366, 1055, 0, 0,
	0, 0, 0, 812, 384, 388, 405, 378, 0, 0,
	0, 0, 0, 1377, 563, 0, 363, 203, 395, 0,
	0, 0, 347, 344, 0, 0, 382, 0, 0, 0,
	349, 0, 364, 406, 0, 338, 109, 409, 415, 379,
	206, 419, 377, 376, 422, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 413, 361, 369,
	99, 367, 153, 141, 176, 394, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 186, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 189,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 342, 0, 161, 178, 190,
	94, 357, 166, 185, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 188, 140, 154,
	98, 177, 159, 353, 356, 351, 352, 390, 391, 427,
	428, 429, 407, 348, 0, 354, 355, 0, 411, 417,
	418, 393, 82, 89, 121, 187, 148, 106, 179, 421,
	410, 0, 381, 424, 359, 373, 432, 374, 375, 403,
	345, 389, 139, 371, 0, 362, 340, 368, 341, 360,
	383, 103, 386, 358, 412, 392, 423, 120, 430, 122,
	397, 0, 160, 131, 0, 0, 385, 414, 387, 408,
	380, 404, 350, 396, 425, 372, 401, 426, 0, 0,
	0, 80, 0, 870, 871, 0, 0, 0, 0, 0,
	96, 0, 399, 420, 370, 400, 402, 339, 398, 0,
	343, 346, 431, 416, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 384, 388, 405, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 395, 0, 0,
	0, 347, 344, 0, 0, 382, 0, 0, 0, 349,
	0, 364, 406, 0, 338, 109, 409, 415, 379, 206,
	419, 377, 376, 422, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 413, 361, 369, 99,
	367, 153, 141, 176, 394, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 342, 0, 161, 178, 190, 94,
	357, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 353, 356, 351, 352, 390, 391, 427, 428,
	429, 407, 348, 0, 354, 355, 0, 411, 417, 418,
	393, 82, 89, 121, 187, 148, 106, 179, 421, 410,
	0, 381, 424, 359, 373, 432, 374, 375, 403, 345,
	389, 139, 371, 0, 362, 340, 368, 341, 360, 383,
	103, 386, 358, 412, 392, 423, 120, 430, 122, 397,
	0, 160, 131, 0, 0, 385, 414, 387, 408, 380,
	404, 350, 396, 425, 372, 401, 426, 54, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 399, 420, 370, 400, 402, 339, 398, 0, 343,
	346, 431, 416, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 384, 388, 405, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 395, 0, 0, 0,
	347, 344, 0, 0, 382, 0, 0, 0, 349, 0,
	364, 406, 0, 338, 109, 409, 415, 379, 206, 419,
	377, 376, 422, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 413, 361, 369, 99, 367,
	153, 141, 176, 394, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 342, 0, 161, 178, 190, 94, 357,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 353, 356, 351, 352, 390, 391, 427, 428, 429,
	407, 348, 0, 354, 355, 0, 411, 417, 418, 393,
	82, 89, 121, 187, 148, 106, 179, 421, 410, 0,
	381, 424, 359, 373, 432, 374, 375, 403, 345, 389,
	139, 371, 0, 362, 340, 368, 341, 360, 383, 103,
	386, 358, 412, 392, 423, 120, 430, 122, 397, 0,
	160, 131, 0, 0, 385, 414, 387, 408, 380, 404,
	350, 396, 425, 372, 401, 426, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	399, 420, 370, 400, 402, 339, 398, 0, 343, 346,
	431, 416, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 384, 388, 405, 378, 0, 0, 0, 0, 0,
	0, 1121, 0, 363, 0, 395, 0, 0, 0, 347,
	344, 0, 0, 382, 0, 0, 0, 349, 0, 364,
	406, 0, 338, 109, 409, 415, 379, 206, 419, 377,
	376, 422, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 413, 361, 369, 99, 367, 153,
	141, 176, 394, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 186, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 189, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 342, 0, 161, 178, 190, 94, 357, 166,
	185, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 188, 140, 154, 98, 177, 159,
	353, 356, 351, 352, 390, 391, 427, 428, 429, 407,
	348, 0, 354, 355, 0, 411, 417, 418, 393, 82,
	89, 121, 187, 148, 106, 179, 421, 410, 0, 381,
	424, 359, 373, 432, 374, 375, 403, 345, 389, 139,
	371, 0, 362, 340, 368, 341, 360, 383, 103, 386,
	358, 412, 392, 423, 120, 430, 122, 397, 0, 160,
	131, 0, 0, 385, 414, 387, 408, 380, 404, 350,
	396, 425, 372, 401, 426, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 399,
	420, 370, 400, 402, 339, 398, 0, 343, 346, 431,
	416, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	384, 388, 405, 378, 0, 0, 0, 0, 0, 0,
	854, 0, 363, 0, 395, 0, 0, 0, 347, 344,
	0, 0, 382, 0, 0, 0, 349, 0, 364, 406,
	0, 338, 109, 409, 415, 379, 206, 419, 377, 376,
	422, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 413, 361, 369, 99, 367, 153, 141,
	176, 394, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 342, 0, 161, 178, 190, 94, 357, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 353,
	356, 351, 352, 390, 391, 427, 428, 429, 407, 348,
	0, 354, 355, 0, 411, 417, 418, 393, 82, 89,
	121, 187, 148, 106, 179, 421, 410, 0, 381, 424,
	359, 373, 432, 374, 375, 403, 345, 389, 139, 371,
	0, 362, 340, 368, 341, 360, 383, 103, 386, 358,
	412, 392, 423, 120, 430, 122, 397, 0, 160, 131,
	0, 0, 385, 414, 387, 408, 380, 404, 350, 396,
	425, 372, 401, 426, 0, 0, 0, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 399, 420,
	370, 400, 402, 339, 398, 0, 343, 346, 431, 416,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 384,
	388, 405, 378, 0, 0, 0, 0, 0, 0, 752,
	0, 363, 0, 395, 0, 0, 0, 347, 344, 0,
	0, 382, 0, 0, 0, 349, 0, 364, 406, 0,
	338, 109, 409, 415, 379, 206, 419, 377, 376, 422,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 413, 361, 369, 99, 367, 153, 141, 176,
	394, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	342, 0, 161, 178, 190, 94, 357, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 353, 356,
	351, 352, 390, 391, 427, 428, 429, 407, 348, 0,
	354, 355, 0, 411, 417, 418, 393, 82, 89, 121,
	187, 148, 106, 179, 421, 410, 0, 381, 424, 359,
	373, 432, 374, 375, 403, 345, 389, 139, 371, 0,
	362, 340, 368, 341, 360, 383, 103, 386, 358, 412,
	392, 423, 120, 430, 122, 397, 0, 160, 131, 0,
	0, 385, 414, 387, 408, 380, 404, 350, 396, 425,
	372, 401, 426, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 399, 420, 370,
	400, 402, 339, 398, 0, 343, 346, 431, 416, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 384, 388,
	405, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 395, 0, 0, 0, 347, 344, 0, 0,
	382, 0, 0, 0, 349, 0, 364, 406, 0, 338,
	109, 409, 415, 379, 206, 419, 377, 376, 422, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 413, 361, 369, 99, 367, 153, 141, 176, 394,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	186, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 189, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 342,
	0, 161, 178, 190, 94, 357, 166, 185, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 188, 140, 154, 98, 177, 159, 353, 356, 351,
	352, 390, 391, 427, 428, 429, 407, 348, 0, 354,
	355, 0, 411, 417, 418, 393, 82, 89, 121, 187,
	148, 106, 179, 421, 410, 0, 381, 424, 359, 373,
	432, 374, 375, 403, 345, 389, 139, 371, 0, 362,
	340, 368, 341, 360, 383, 103, 386, 358, 412, 392,
	423, 120, 430, 122, 397, 0, 160, 131, 0, 0,
	385, 414, 387, 408, 380, 404, 350, 396, 425, 372,
	401, 426, 0, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 399, 420, 370, 400,
	402, 339, 398, 0, 343, 346, 431, 416, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 384, 388, 405,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 395, 0, 0, 0, 347, 344, 0, 0, 382,
	0, 0, 0, 349, 0, 364, 406, 0, 338, 109,
	409, 415, 379, 206, 419, 377, 376, 422, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	413, 361, 369, 99, 367, 153, 141, 176, 394, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 186,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 189, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 342, 0,
	161, 178, 190, 94, 357, 166, 185, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	188, 140, 154, 98, 177, 159, 353, 356, 351, 352,
	390, 391, 427, 428, 429, 407, 348, 0, 354, 355,
	0, 411, 417, 418, 393, 82, 89, 121, 187, 148,
	106, 179, 421, 410, 0, 381, 424, 359, 373, 432,
	374, 375, 403, 345, 389, 139, 371, 0, 362, 340,
	368, 341, 360, 383, 103, 386, 358, 412, 392, 423,
	120, 430, 122, 397, 0, 160, 131, 0, 0, 385,
	414, 387, 408, 380, 404, 350, 396, 425, 372, 401,
	426, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 399, 420, 370, 400, 402,
	339, 398, 0, 343, 346, 431, 416, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 384, 388, 405, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	395, 0, 0, 0, 347, 344, 0, 0, 382, 0,
	0, 0, 349, 0, 364, 406, 0, 338, 109, 409,
	415, 379, 206, 419, 377, 376, 422, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 413,
	361, 369, 99, 367, 153, 141, 176, 394, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 336, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 342, 0, 161,
	178, 190, 94, 357, 166, 185, 0, 0, 95, 108,
	104, 143, 337, 335, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 353, 356, 351, 352, 390,
	391, 427, 428, 429, 407, 348, 0, 354, 355, 0,
	411, 417, 418, 393, 82, 89, 121, 187, 148, 106,
	179, 421, 410, 0, 381, 424, 359, 373, 432, 374,
	375, 403, 345, 389, 139, 371, 0, 362, 340, 368,
	341, 360, 383, 103, 386, 358, 412, 392, 423, 120,
	430, 122, 397, 0, 160, 131, 0, 0, 385, 414,
	387, 408, 380, 404, 350, 396, 425, 372, 401, 426,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 399, 420, 370, 400, 402, 339,
	398, 0, 343, 346, 431, 416, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 384, 388, 405, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 395,
	0, 0, 0, 347, 344, 0, 0, 382, 0, 0,
	0, 349, 0, 364, 406, 0, 338, 109, 409, 415,
	379, 206, 419, 377, 376, 422, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 413, 361,
	369, 99, 367, 153, 141, 176, 394, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 342, 0, 161, 178,
	190, 94, 357, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 353, 356, 351, 352, 390, 391,
	427, 428, 429, 407, 348, 0, 354, 355, 0, 411,
	417, 418, 393, 82, 89, 121, 187, 148, 106, 179,
	421, 410, 0, 381, 424, 359, 373, 432, 374, 375,
	403, 345, 389, 139, 371, 0, 362, 340, 368, 341,
	360, 383, 103, 386, 358, 412, 392, 423, 120, 430,
	122, 397, 0, 160, 131, 0, 0, 385, 414, 387,
	408, 380, 404, 350, 396, 425, 372, 401, 426, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 399, 420, 370, 400, 402, 339, 398,
	0, 343, 346, 431, 416, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 384, 388, 405, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 395, 0,
	0, 0, 347, 344, 0, 0, 382, 0, 0, 0,
	349, 0, 364, 406, 0, 338, 109, 409, 415, 379,
	206, 419, 377, 376, 422, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 413, 361, 369,
	99, 367, 153, 141, 176, 394, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 186, 157, 84, 164,
	620, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 189,
	91, 181, 88, 336, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 342, 0, 161, 178, 190,
	94, 357, 166, 185, 0, 0, 95, 108, 104, 143,
	337, 335, 114, 158, 117, 124, 149, 188, 140, 154,
	98, 177, 159, 353, 356, 351, 352, 390, 391, 427,
	428, 429, 407, 348, 0, 354, 355, 0, 411, 417,
	418, 393, 82, 89, 121, 187, 148, 106, 179, 421,
	410, 0, 381, 424, 359, 373, 432, 374, 375, 403,
	345, 389, 139, 371, 0, 362, 340, 368, 341, 360,
	383, 103, 386, 358, 412, 392, 423, 120, 430, 122,
	397, 0, 160, 131, 0, 0, 385, 414, 387, 408,
	380, 404, 350, 396, 425, 372, 401, 426, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 399, 420, 370, 400, 402, 339, 398, 0,
	343, 346, 431, 416, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 384, 388, 405, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 395, 0, 0,
	0, 347, 344, 0, 0, 382, 0, 0, 0, 349,
	0, 364, 406, 0, 338, 109, 409, 415, 379, 206,
	419, 377, 376, 422, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 413, 361, 369, 99,
	367, 153, 141, 176, 394, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 327,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 336, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 342, 0, 161, 178, 190, 94,
	357, 166, 185, 0, 0, 95, 108, 104, 143, 337,
	335, 330, 329, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 353, 356, 351, 352, 390, 391, 427, 428,
	429, 407, 348, 0, 354, 355, 0, 411, 417, 418,
	393, 82, 89, 121, 187, 148, 106, 179, 139, 0,
	0, 0, 0, 262, 0, 0, 0, 103, 0, 259,
	0, 0, 0, 120, 302, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 861, 0, 54, 0, 0, 260, 281, 280,
	283, 284, 285, 286, 0, 0, 96, 282, 287, 288,
	289, 862, 0, 0, 257, 274, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 272, 0,
	0, 0, 0, 315, 0, 273, 0, 0, 268, 269,
	270, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 313, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 303, 314,
	309, 310, 307, 308, 306, 305, 304, 316, 295, 296,
	297, 298, 300, 0, 311, 312, 299, 82, 89, 121,
	187, 148, 106, 179, 139, 0, 0, 788, 0, 262,
	0, 0, 0, 103, 0, 259, 0, 0, 0, 120,
	302, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 260, 281, 280, 283, 284, 285, 286,
	0, 0, 96, 282, 287, 288, 289, 0, 0, 0,
	257, 274, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 272, 253, 0, 0, 0, 315,
	0, 273, 0, 0, 268, 269, 270, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 313, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 303, 314, 309, 310, 307, 308,
	306, 305, 304, 316, 295, 296, 297, 298, 300, 0,
	311, 312, 299, 82, 89, 121, 187, 148, 106, 179,
	139, 0, 0, 0, 0, 262, 0, 0, 0, 103,
	0, 259, 0, 0, 0, 120, 302, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 493, 260,
	281, 280, 283, 284, 285, 286, 0, 0, 96, 282,
	287, 288, 289, 0, 0, 0, 257, 274, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	272, 0, 0, 0, 0, 315, 0, 273, 0, 0,
	268, 269, 270, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 206, 0, 0,
	313, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 186, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 189, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 190, 94, 0, 166,
	185, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 188, 140, 154, 98, 177, 159,
	303, 314, 309, 310, 307, 308, 306, 305, 304, 316,
	295, 296, 297, 298, 300, 0, 311, 312, 299, 82,
	89, 121, 187, 148, 106, 179, 139, 0, 0, 0,
	0, 262, 0, 0, 0, 103, 0, 259, 0, 0,
	0, 120, 302, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 260, 281, 280, 283, 284,
	285, 286, 0, 0, 96, 282, 287, 288, 289, 0,
	0, 0, 257, 274, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 272, 253, 0, 0,
	0, 315, 0, 273, 0, 0, 268, 269, 270, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 206, 0, 0, 313, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 186,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 189, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 190, 94, 0, 166, 185, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	188, 140, 154, 98, 177, 159, 303, 314, 309, 310,
	307, 308, 306, 305, 304, 316, 295, 296, 297, 298,
	300, 0, 311, 312, 299, 82, 89, 121, 187, 148,
	106, 179, 139, 0, 0, 0, 0, 262, 0, 0,
	0, 103, 0, 259, 0, 0, 0, 120, 302, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 260, 281, 803, 283, 284, 285, 286, 0, 0,
	96, 282, 287, 288, 289, 0, 0, 0, 257, 274,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 253, 0, 0, 0, 315, 0, 273,
	0, 0, 268, 269, 270, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 313, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 303, 314, 309, 310, 307, 308, 306, 305,
	304, 316, 295, 296, 297, 298, 300, 0, 311, 312,
	299, 82, 89, 121, 187, 148, 106, 179, 139, 0,
	0, 0, 0, 262, 0, 0, 0, 103, 0, 259,
	0, 0, 0, 120, 302, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 260, 281, 800,
	283, 284, 285, 286, 0, 0, 96, 282, 287, 288,
	289, 0, 0, 0, 257, 274, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 272, 253,
	0, 0, 0, 315, 0, 273, 0, 0, 268, 269,
	270, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 313, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 303, 314,
	309, 310, 307, 308, 306, 305, 304, 316, 295, 296,
	297, 298, 300, 24, 311, 312, 299, 82, 89, 121,
	187, 148, 106, 179, 0, 139, 0, 0, 0, 0,
	262, 0, 0, 0, 103, 0, 259, 0, 0, 0,
	120, 302, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 260, 281, 280, 283, 284, 285,
	286, 0, 0, 96, 282, 287, 288, 289, 0, 0,
	0, 257, 274, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 0, 0, 0, 0,
	315, 0, 273, 0, 0, 268, 269, 270, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 313, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 303, 314, 309, 310, 307,
	308, 306, 305, 304, 316, 295, 296, 297, 298, 300,
	0, 311, 312, 299, 82, 89, 121, 187, 148, 106,
	179, 139, 0, 0, 0, 0, 262, 0, 0, 0,
	103, 0, 259, 0, 0, 0, 120, 302, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	260, 281, 280, 283, 284, 285, 286, 0, 0, 96,
	282, 287, 288, 289, 0, 0, 0, 257, 274, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 272, 0, 0, 0, 0, 315, 0, 273, 0,
	0, 268, 269, 270, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 313, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 303, 314, 309, 310, 307, 308, 306, 305, 304,
	316, 295, 296, 297, 298, 300, 0, 311, 312, 299,
	82, 89, 121, 187, 148, 106, 179, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 302, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 260, 281, 280, 283,
	284, 285, 286, 0, 0, 96, 282, 287, 288, 289,
	0, 0, 0, 0, 274, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 272, 0, 0,
	0, 0, 315, 0, 273, 0, 0, 268, 269, 270,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 206, 0, 0, 313, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 1417,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	186, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 189, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 190, 94, 0, 166, 185, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 188, 140, 154, 98, 177, 159, 303, 314, 309,
	310, 307, 308, 306, 305, 304, 316, 295, 296, 297,
	298, 300, 0, 311, 312, 299, 82, 89, 121, 187,
	148, 106, 179, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 302,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 493, 260, 281, 280, 283, 284, 285, 286, 0,
	0, 96, 282, 287, 288, 289, 0, 0, 0, 0,
	274, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 315, 0,
	273, 0, 0, 268, 269, 270, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	206, 0, 0, 313, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 186, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 189,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 190,
	94, 0, 166, 185, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 188, 140, 154,
	98, 177, 159, 303, 314, 309, 310, 307, 308, 306,
	305, 304, 316, 295, 296, 297, 298, 300, 0, 311,
	312, 299, 82, 89, 121, 187, 148, 106, 179, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 302, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 260, 281,
	280, 283, 284, 285, 286, 0, 0, 96, 282, 287,
	288, 289, 0, 0, 0, 0, 274, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 315, 0, 273, 0, 0, 268,
	269, 270, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 206, 0, 0, 313,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 190, 94, 0, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 303,
	314, 309, 310, 307, 308, 306, 305, 304, 316, 295,
	296, 297, 298, 300, 0, 311, 312, 299, 82, 89,
	121, 187, 148, 106, 179, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 89, 121, 187, 148, 106,
	179, 139, 0, 0, 0, 515, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 517, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 512, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 76, 77, 0, 73, 0, 0, 0, 78,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	187, 148, 106, 179, 139, 0, 0, 0, 844, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 846, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 187, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	187, 148, 106, 179, 139, 0, 0, 0, 844, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 846, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 842, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 187, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 739, 0, 0, 740, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 629,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 628,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	187, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 187, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 846, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 187, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	517, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 206, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 190, 94, 0, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 82, 89,
	121, 187, 148, 106, 179, 599, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 206, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	186, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 189, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 190, 94, 0, 166, 185, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 188, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 187,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 187, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 201, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	187, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 187, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 89, 121, 187, 148, 106, 179,
}
var yyPact = [...]int{

	1973, -1000, -182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 959, 1020, -1000, -1000, -1000, -1000, -1000, -1000,
	315, 8770, 27, 113, -11, 11633, 112, 1957, 12107, -1000,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -78, -79,
	-1000, 678, -1000, -1000, -1000, -1000, -1000, 952, 957, 780,
	937, 819, -1000, 6318, 80, 80, 11396, 5334, -1000, -1000,
	321, 12107, 107, 12107, -147, 73, 73, 73, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 110, 12107, 180, -1000, 12107, 72, 535, 72, 72,
	72, 12107, -1000, 156, -1000, -1000, -1000, 12107, 525, 883,
	3003, 50, 3003, -1000, 3003, 3003, -1000, 3003, 12, 3003,
	-56, 970, -35, -1000, 3003, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 437, 864,
	7303, 7303, 959, -1000, 678, -1000, -1000, -1000, 852, -1000,
	-1000, 360, 1001, -1000, 8533, 154, -1000, 7303, 2067, 724,
	-1000, -1000, 724, -1000, -1000, 138, -1000, -1000, 8041, 8041,
	8041, 8041, 8041, 8041, 8041, 8041, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	724, -1000, 7057, 724, 724, 724, 724, 724, 724, 724,
	724, 7303, 724, 724, 724, 724, 724, 724, 724, 724,
	724, 724, 724, 724, 724, 724, 724, 11159, 10447, 12107,
	746, 726, -1000, -1000, 149, 705, 5075, -112, -1000, -1000,
	-1000, 247, 10210, -1000, -1000, -1000, 866, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 603, 12107, -1000, 1405, -1000, 504, 3003,
	98, 489, 264, 483, 12107, 12107, 3003, 28, 46, 47,
	12107, 722, 91, 12107, 930, 791, 12107, 473, 463, -1000,
	4816, -1000, 3003, 3003, -1000, -1000, -1000, 3003, 3003, 3003,
	12107, 3003, 3003, -1000, -1000, -1000, -1000, 3003, 3003, -1000,
	980, 280, -1000, -1000, -1000, -1000, 7303, -1000, 788, -1000,
	-1000, -1000, -1000, -1000, -1000, 1011, 200, 573, 147, 718,
	-1000, 459, 952, 437, 819, 9973, 764, -1000, -1000, 12107,
	-1000, 7303, 7303, 481, -1000, 10921, -1000, -1000, 3780, 197,
	8041, 426, 351, 8041, 8041, 8041, 8041, 8041, 8041, 8041,
	8041, 8041, 8041, 8041, 8041, 8041, 8041, 8041, 380, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 457, -1000, 678,
	688, 688, 175, 175, 175, 175, 175, 175, 175, 8287,
	5826, 437, 599, 304, 7057, 6318, 6318, 7303, 7303, 6810,
	6564, 6318, 939, 253, 304, 12344, -1000, -1000, 7795, -1000,
	-1000, -1000, -1000, -1000, 437, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11870, 11870, 6318, 6318, 6318, 6318, 38, 12107,
	-1000, 697, 773, -1000, -1000, -1000, 932, 9490, 9736, 38,
	625, 10447, 12107, -1000, -1000, 10447, 12107, 3521, 4557, 705,
	-112, 674, -1000, -114, -127, 5580, 166, -1000, -1000, -1000,
	-1000, 2744, 184, 555, 356, -71, -1000, -1000, -1000, 740,
	-1000, 740, 740, 740, 740, -32, -32, -32, -32, -1000,
	-1000, -1000, -1000, -1000, 769, 758, -1000, 740, 740, 740,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 757, 757,
	757, 744, 744, 747, -1000, 12107, 3003, 929, 3003, -1000,
	219, -1000, 11870, 11870, 12107, 12107, 12107, 126, 12107, 12107,
	704, -1000, 12107, 3003, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12107,
	313, 12107, 12107, 304, 12107, -1000, 827, 7303, 7303, 4298,
	7303, -1000, -1000, -1000, 864, -1000, 939, 956, -1000, 840,
	836, 6318, -1000, -1000, 197, 355, -1000, -1000, 331, -1000,
	-1000, -1000, -1000, 145, 724, -1000, 2265, -1000, -1000, -1000,
	-1000, 426, 8041, 8041, 8041, 319, 2265, 2250, 805, 614,
	175, 503, 503, 176, 176, 176, 176, 176, 400, 400,
	-1000, -1000, -1000, 437, -1000, -1000, -1000, 437, 6318, 690,
	-1000, -1000, 7303, -1000, 437, 584, 584, 403, 465, 296,
	978, 584, 266, 975, 584, 584, 6318, 254, -1000, 7303,
	437, -1000, 142, -1000, 903, 687, 684, 584, 437, 584,
	584, 728, 724, -1000, 12344, 10447, 10447, 10447, 10447, 10447,
	-1000, 816, 811, -1000, 808, 804, 812, 12107, -1000, 592,
	9490, 148, 724, -1000, 10684, -1000, -1000, 969, 10447, 664,
	-1000, 664, -1000, 141, -1000, -1000, 674, -112, -116, -1000,
	-1000, -1000, -1000, 304, -1000, 429, 650, 2485, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 756, 454, -1000, 893, 191,
	193, 452, 892, -1000, -1000, -1000, 865, -1000, 273, -94,
	-1000, -1000, 393, -32, -32, -1000, -1000, 166, 861, 166,
	166, 166, 449, 449, -1000, -1000, -1000, -1000, 392, -1000,
	-1000, -1000, 390, -1000, 787, 11870, 3003, -1000, -1000, -1000,
	-1000, 434, 434, 202, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, 727, -1000, -1000, -1000,
	-1000, 26, 24, 88, -1000, 3003, -1000, 280, -1000, 446,
	7303, -1000, -1000, -1000, 825, 304, 304, 135, -1000, -1000,
	12107, -1000, -1000, -1000, -1000, 620, -1000, -1000, -1000, 3262,
	6318, -1000, 319, 2265, 2213, -1000, 8041, 8041, -1000, -1000,
	584, 6318, 304, -1000, -1000, -1000, 59, 380, 59, 8041,
	8041, -1000, 8041, 8041, -1000, -163, 627, 223, -1000, 7303,
	359, -1000, 4298, -1000, 8041, 8041, -1000, -1000, -1000, -1000,
	785, 12344, 724, -1000, 9253, 11870, 669, -1000, 229, 773,
	753, 784, 723, -1000, -1000, -1000, -1000, 790, -1000, 783,
	-1000, -1000, -1000, -1000, -1000, 105, 103, 102, 11870, -1000,
	959, 7303, 664, -1000, -1000, 157, -1000, -1000, -123, -132,
	-1000, -1000, -1000, 2744, -1000, 2744, 11870, 56, -1000, 452,
	452, -1000, -1000, -1000, 749, 781, 8041, -1000, -1000, -1000,
	545, 166, 166, -1000, 222, -1000, -1000, -1000, 582, -1000,
	580, 628, 578, 12107, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12107, -1000, -1000, -1000, -1000, -1000, 11870, -169, 428, 11870,
	11870, 12107, -1000, 313, -1000, 304, -1000, 4039, -1000, 969,
	10447, -1000, -1000, 437, -1000, 8041, 2265, 2265, -1000, -1000,
	437, 740, 740, -1000, 740, 744, -1000, 740, -14, 740,
	-20, 437, 437, 2197, 2178, 2158, 2111, 724, -158, -1000,
	304, 7303, -1000, 2002, 1801, -1000, 913, 611, 594, -1000,
	-1000, 6072, 437, 568, 127, 540, -1000, 959, 12344, 7303,
	-1000, -1000, 7303, 741, -1000, 7303, -1000, -1000, -1000, 724,
	724, 724, 540, 952, 304, -1000, -1000, -1000, -1000, 2485,
	-1000, 532, -1000, 740, -1000, -1000, -1000, 11870, -59, 1010,
	2265, -1000, -1000, -1000, -1000, -1000, -32, 436, -32, 376,
	-1000, 374, 3003, -1000, -1000, -1000, -1000, 925, -1000, 4039,
	-1000, -1000, 738, -1000, -1000, -1000, 967, 622, -1000, 2265,
	-1000, -1000, 111, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8041, 8041, 8041, 8041, 8041, 437, 418, 304, 8041,
	8041, 890, -1000, 724, -1000, -1000, 755, 11870, 11870, -1000,
	11870, 952, -1000, 304, 304, 11870, 304, 11870, 11870, 11870,
	9016, -1000, 144, 11870, -1000, 523, -1000, 194, -1000, -97,
	166, -1000, 166, 541, 514, -1000, 724, 601, -1000, 228,
	11870, 962, 955, -1000, -1000, 903, 903, 903, 903, 33,
	-1000, -1000, 903, 903, 1005, -1000, 724, -1000, 678, 125,
	-1000, -1000, -1000, 521, 518, 518, 518, 148, 144, -1000,
	402, 224, 415, -1000, 51, 11870, 338, 887, -1000, 886,
	-1000, -1000, -1000, -1000, -1000, 35, 4039, 2744, 513, -1000,
	7303, 7303, -1000, -1000, -1000, -1000, 437, 44, -174, -1000,
	-1000, 12344, 594, 437, 11870, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 373, -1000, -1000, 12107, -1000, -1000, 396, -1000,
	-1000, 501, -1000, 11870, -1000, -1000, 727, 304, 565, -1000,
	824, -167, -177, 560, -1000, -1000, -1000, 736, -1000, -1000,
	35, 835, -169, -1000, 822, -1000, 11870, -1000, 34, -1000,
	-171, 480, 30, -175, 779, 724, -178, 772, -1000, 999,
	7549, -1000, -1000, 1004, 162, 162, 903, 437, -1000, -1000,
	-1000, 60, 322, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1207, 25, 481, 1206, 1201, 1199, 1196, 1195, 1194,
	1193, 1192, 1191, 1187, 1185, 1184, 1183, 1182, 1181, 1177,
	1175, 1174, 1173, 1171, 1168, 1167, 150, 1166, 1165, 1164,
	71, 1160, 79, 1158, 1157, 38, 55, 47, 46, 1242,
	1156, 48, 60, 57, 1155, 35, 1154, 1152, 75, 1149,
	1146, 56, 1145, 1144, 88, 1143, 90, 1142, 11, 30,
	1140, 1136, 1135, 1133, 78, 398, 1132, 1131, 16, 1130,
	1129, 83, 1128, 58, 3, 14, 40, 18, 1127, 1148,
	10, 1126, 59, 1124, 1123, 1122, 1120, 20, 1119, 62,
	1117, 21, 61, 1116, 9, 69, 31, 22, 12, 70,
	81, 1115, 17, 66, 53, 1106, 1105, 460, 1104, 1103,
	44, 1102, 1100, 27, 174, 466, 1099, 1098, 1097, 1096,
	33, 0, 515, 122, 73, 1095, 1094, 1093, 1221, 34,
	54, 19, 1090, 51, 1023, 42, 1087, 1086, 37, 1085,
	1081, 1080, 1078, 1077, 1076, 1074, 305, 1072, 1071, 1068,
	43, 41, 1067, 1066, 63, 23, 1065, 1063, 1060, 52,
	65, 1059, 1055, 64, 28, 1052, 1051, 1050, 1048, 1046,
	29, 13, 1045, 15, 1044, 6, 1043, 24, 1042, 8,
	1041, 4, 1038, 5, 1035, 7, 45, 2, 1033, 1,
	1032, 1029, 49, 575, 80, 1027, 76,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 194, 194, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 136, 136, 11, 11, 11, 11, 11,
	11, 11, 185, 185, 184, 183, 183, 182, 182, 181,
	17, 166, 168, 168, 167, 167, 167, 167, 160, 139,
	139, 139, 139, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 145,
	145, 145, 145, 145, 145, 145, 145, 159, 159, 146,
	146, 154, 154, 155, 155, 155, 152, 152, 153, 153,
	156, 156, 156, 148, 148, 149, 149, 157, 157, 150,
	150, 150, 151, 151, 151, 158, 158, 158, 158, 158,
	147, 147, 161, 161, 176, 176, 175, 175, 175, 165,
	165, 172, 172, 172, 172, 172, 163, 163, 164, 164,
	174, 174, 173, 162, 162, 177, 177, 177, 177, 188,
	189, 187, 187, 187, 187, 187, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	180, 178, 178, 179, 179, 13, 18, 18, 14, 14,
	14, 14, 14, 15, 15, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 111, 111, 109, 109, 112, 112, 110,
	110, 110, 113, 113, 113, 137, 137, 137, 21, 21,
	23, 23, 24, 25, 22, 22, 22, 22, 22, 22,
	22, 16, 195, 26, 27, 27, 28, 28, 28, 32,
	32, 32, 30, 30, 31, 31, 37, 37, 36, 36,
	38, 38, 38, 38, 125, 125, 125, 124, 124, 40,
	40, 41, 41, 42, 42, 43, 43, 43, 43, 57,
	57, 94, 94, 96, 96, 44, 44, 44, 44, 45,
	45, 46, 46, 47, 47, 132, 132, 131, 131, 131,
	130, 130, 50, 50, 50, 52, 51, 51, 51, 51,
	53, 53, 55, 55, 54, 54, 56, 58, 58, 58,
	58, 59, 59, 39, 39, 39, 39, 39, 39, 39,
	108, 108, 61, 61, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 72, 72, 72, 72, 72, 72,
	62, 62, 62, 62, 62, 62, 62, 35, 35, 73,
	73, 73, 79, 74, 74, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 196,
	196, 71, 70, 70, 70, 70, 70, 70, 33, 33,
	33, 33, 33, 135, 135, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 83, 83,
	34, 34, 81, 81, 82, 84, 84, 80, 80, 80,
	64, 64, 64, 64, 64, 64, 64, 64, 66, 66,
	66, 85, 85, 86, 86, 87, 87, 88, 88, 89,
	90, 90, 90, 91, 91, 91, 91, 92, 92, 92,
	63, 63, 63, 63, 63, 63, 93, 93, 93, 93,
	97, 97, 75, 75, 77, 77, 76, 78, 98, 98,
	102, 99, 99, 103, 103, 103, 103, 101, 101, 101,
	127, 127, 127, 106, 106, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 119, 119, 119, 126,
	126, 122, 122, 123, 123, 128, 128, 129, 129, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 192, 193, 133, 134, 134, 134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 3, 3, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 1, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 163,
	164, 166, 167, 25, 143, 144, 147, 148, 31, 32,
	121, -192, 8, 247, 54, -191, 264, -87, 15, -28,
	5, -26, -195, -26, -26, -26, -26, -26, -166, -168,
	54, 90, -119, 125, 72, 239, 122, 123, 129, -122,
	57, -121, 257, 135, 163, 174, 168, 195, 187, 258,
	136, 185, 188, 226, 215, 221, 66, 166, 235, 145,
	183, 179, 177, 27, 223, 200, 262, 178, 222, 121,
	138, 133, 201, 205, 227, 172, 173, 229, 199, 134,
	33, 259, 35, 153, 230, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 225, 190, 139, 180, 18,
	233, 148, 151, 224, 202, 204, 130, 155, 261, 231,
	176, 140, 152, 147, 234, 141, 167, 162, 228, 237,
	38, 212, 170, 132, 164, 159, 217, 191, 154, 181,
	182, 196, 169, 192, 165, 156, 149, 236, 213, 263,
	189, 186, 160, 157, 158, 218, 161, 260, 232, 184,
	214, -107, 125, 218, 127, 123, 123, 124, 125, 239,
	122, 123, -54, -128, 57, -121, 125, 123, 108, 188,
	226, 115, 216, 223, 124, 33, 224, 155, -137, 123,
	-109, 215, 218, 161, 57, 228, 227, 219, -128, 165,
	-133, -133, -133, -133, -133, 217, 217, -133, -2, -91,
	17, 16, -5, -3, -192, 6, 20, 21, -32, 40,
	41, -27, -38, 99, -39, -128, -60, 74, -65, 29,
	57, -121, 23, -64, -61, -80, -78, -79, 108, 109,
	110, 97, 98, 105, 75, 111, -69, -67, -68, -70,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-122, -76, -192, 44, 45, 248, 249, 250, 251, 256,
	252, 77, 34, 238, 246, 245, 244, 242, 243, 240,
	241, 254, 255, 128, 239, 103, 247, -107, -107, 11,
	-48, -49, -54, -56, -128, -99, -136, 165, -103, 228,
	227, -123, -101, -122, -120, 226, 188, 225, 120, 73,
	22, 24, 210, 76, 108, 16, 77, 107, 248, 115,
	48, 240, 241, 238, 250, 251, 239, 216, 29, 10,
	25, 143, 21, 101, 117, 80, 81, 146, 23, 144,
	70, 19, 51, 11, 13, 14, 128, 127, 92, 124,
	46, 8, 111, 26, 89, 42, 28, 44, 90, 17,
	242, 243, 31, 256, 150, 103, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 118, 247, 45, 122,
	6, 253, 30, 142, 43, 123, 79, 254, 255, 126,
	69, 5, 129, 32, 9, 50, 53, 244, 245, 246,
	34, 78, 12, -167, 90, -160, 57, -54, 124, -54,
	247, -115, 128, -115, -115, 123, -54, 115, 117, 120,
	52, -18, -54, -114, 128, 57, -114, -114, -114, -54,
	112, -54, 57, 30, -134, -192, -123, 239, 57, 155,
	123, 156, 125, -134, -134, -134, -134, 159, 160, -134,
	-112, -111, 221, 222, 217, 220, 12, 217, 158, -134,
	-133, -133, -193, 56, -92, 19, 31, -39, -128, -88,
	-89, -39, -87, -2, -26, 36, -30, 21, 65, 11,
	-125, 73, 72, 89, -124, 22, -122, 59, 112, -39,
	-62, 92, 74, 90, 91, 76, 94, 93, 104, 97,
	98, 99, 100, 101, 102, 103, 95, 96, 107, 82,
	83, 84, 85, 86, 87, 88, -108, -192, -79, -192,
	113, 114, -65, -65, -65, -65, -65, -65, -65, -65,
	-192, -2, -74, -39, -192, -192, -192, -192, -192, -192,
	-192, -192, -192, -83, -39, -192, -196, -71, -192, -196,
	-71, -196, -71, -196, -192, -196, -71, -196, -71, -196,
	-196, -71, -192, -192, -192, -192, -192, -192, -55, 26,
	-54, -41, -42, -43, -44, -57, -79, -192, -54, -54,
	-48, -194, 55, 11, 53, -194, 55, 112, 55, -99,
	165, -100, -104, 229, 231, 82, -127, -122, 59, 29,
	30, 56, 55, -54, -139, -142, -144, -143, -145, -140,
	-141, 185, 186, 108, 189, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 30, 145, 181, 182, 183,
	184, 201, 202, 203, 204, 205, 206, 207, 208, 168,
	187, 258, 169, 170, 171, 172, 173, 174, 176, 177,
	178, 179, 180, 57, -134, 125, 57, 74, 57, -54,
	-54, -134, 157, 157, 123, 123, 162, -54, 55, 126,
	-48, 23, 52, -54, 57, 57, -129, -128, -120, -134,
	-134, -134, -134, -134, -54, -134, -134, -134, -134, 11,
	-110, 11, 92, -39, 52, 9, 92, 55, 18, 112,
	55, -90, 24, 25, -91, -193, -32, -66, -122, 60,
	63, -31, 43, -54, -39, -39, -72, 68, 74, 69,
	70, -124, 99, -129, -123, -120, -65, -73, -76, -79,
	64, 92, 90, 91, 76, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-135, 57, 59, 57, -64, -64, -122, -37, 21, -36,
	-38, -193, 55, -193, -2, -36, -36, -39, -39, -80,
	59, -36, -80, 59, -36, -36, -30, -81, -82, 78,
	-80, -122, -128, -193, -65, -122, -122, -36, -37, -36,
	-36, -95, 151, -54, 30, 55, -50, -52, -51, -53,
	42, 46, 48, 43, 44, 45, 49, -132, 22, -41,
	-192, -131, 151, -130, 22, -128, 59, -95, 53, -41,
	-54, -41, -56, -128, 99, -103, -100, 55, 230, 232,
	233, 52, 71, -39, -151, 107, -169, -170, -171, -123,
	59, 60, -160, -161, -162, -172, 137, -177, 130, 132,
	129, -163, 138, 124, 28, 56, -156, 68, 74, -152,
	213, -146, 54, -146, -146, -146, -146, -150, 188, -150,
	-150, -150, 54, 54, -146, -146, -146, -154, 54, -154,
	-154, -155, 54, -155, -126, 53, -54, -134, 23, -134,
	-116, 120, 117, 118, -180, 116, 210, 188, 66, 29,
	15, 248, 151, 263, 57, 152, -122, -122, -54, -54,
	-54, 120, 117, -54, -54, -54, -134, -54, -113, 90,
	12, -128, -128, -54, 38, -39, -39, -129, -89, -92,
	-106, 19, 11, 34, 34, -36, 68, 69, 70, 112,
	-192, -73, -65, -65, -65, -35, 146, 73, -193, -193,
	-36, 55, -39, -193, -193, -193, 55, 53, 22, 11,
	11, -193, 11, 11, -193, -193, -36, -84, -82, 80,
	-39, -193, 112, -193, 55, 55, -193, -193, -193, -193,
	-63, 30, 34, -2, -192, -192, -98, -102, -80, -42,
	-43, -43, -42, -43, 42, 42, 42, 47, 42, 47,
	42, -51, -128, -193, -58, 50, 127, 51, -192, -130,
	-59, 12, -41, -59, -59, 112, -104, -105, 234, 231,
	237, 57, 59, 55, -171, 82, 54, 57, 28, -163,
	-163, -164, 57, -164, 28, -148, 29, 68, -153, 214,
	60, -150, -150, -151, 30, -151, -151, -151, -159, 59,
	-159, 60, 60, 52, -122, -134, -133, -186, 131, 137,
	138, 133, 57, 124, 28, 130, 132, 151, 129, -186,
	-117, -118, 126, 22, 124, 28, 151, -185, 53, 157,
	157, 126, -134, -110, 59, -39, 39, 112, -54, -40,
	11, 99, -123, -37, -35, 73, -65, -65, -193, -38,
	-138, 108, 185, 145, 183, 179, 199, 190, 212, 181,
	213, -135, -138, -65, -65, -65, -65, 257, -87, 81,
	-39, 79, -123, -65, -65, -97, 52, -98, -75, -77,
	-76, -192, -2, -93, -122, -96, -122, -59, 55, 82,
	-46, -45, 52, 53, -47, 52, -45, 42, 42, 124,
	124, 124, -96, -87, -39, -59, 231, 235, 236, -170,
	-171, -174, -173, -122, -177, -164, -164, 54, -149, 52,
	-65, 56, -151, -151, 57, 108, 56, 55, 56, 55,
	56, 55, -54, -133, -133, -54, -133, -122, -183, 260,
	-184, 57, -122, -122, -54, -113, -59, -41, -193, -65,
	-193, -146, -146, -146, -155, -146, 173, -146, 173, -193,
	-193, 19, 19, 19, 19, -192, -34, 253, -39, 55,
	55, 27, -97, 55, -193, -193, -193, 55, 112, -193,
	55, -87, -102, -39, -39, 54, -39, -192, -192, -192,
	-193, -91, 56, 55, -146, -94, -122, -157, 210, 9,
	-150, 59, -150, 60, 60, -134, 26, -182, -181, -123,
	54, -85, 13, -150, 57, -65, -65, -65, -65, -65,
	-193, 59, -65, -65, 28, -77, 34, -2, -192, -122,
	-122, -122, -91, -94, -94, -94, -94, -131, -176, -175,
	53, 134, 66, -173, 56, 55, -158, 130, 28, 129,
	-68, -151, -151, 56, 56, -192, 55, 82, -94, -86,
	14, 16, -193, -193, -193, -193, -33, 92, 260, -193,
	-193, 9, -75, -2, 112, 56, -193, -193, -193, -58,
	-175, 57, -165, 82, 59, 140, -122, -147, 66, 28,
	28, -178, -179, 151, -181, -171, 56, -39, -74, -193,
	258, 49, 261, -98, -193, -122, 60, -54, 59, -193,
	55, -122, -185, 39, 259, 262, 54, -179, 34, -183,
	39, -94, 153, 260, 56, 154, 261, -188, -189, 52,
	-192, 262, -189, 52, 10, 9, -65, 150, -187, 141,
	136, 139, 30, -187, -193, -193, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 555, 0, 312, 312, 312, 312, 312, 312,
	0, 626, 609, 0, 0, 0, 0, -2, 299, 300,
	0, 302, 303, 846, 846, 846, 846, 846, 0, 0,
	846, 0, 35, 36, 844, 1, 3, 563, 0, 0,
	316, 319, 314, 0, 609, 609, 0, 0, 65, 66,
	0, 0, 0, 835, 0, 607, 607, 607, 627, 628,
	631, 632, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 836, 837, 838, 839, 840, 841, 842,
	843, 0, 0, 0, 610, 0, 605, 0, 605, 605,
	605, 0, 254, 384, 635, 636, 835, 0, 0, 0,
	847, 0, 847, 266, 847, 847, 269, 847, 0, 847,
	0, 276, 0, 281, 847, 296, 297, 286, 298, 301,
	304, 305, 306, 307, 308, 846, 846, 311, 29, 567,
	0, 0, 555, 31, 0, 312, 317, 318, 322, 320,
	321, 313, 0, 330, 334, 0, 393, 0, 398, 400,
	-2, -2, 0, 435, 436, 437, 438, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 463, 464, 465, 466,
	540, 541, 542, 543, 544, 545, 546, 547, 402, 403,
	537, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 499, 499, 499, 499, 499, 499, 499,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 384, 50, 0, 826, 591, -2,
	-2, 0, 0, 633, 634, -2, 744, -2, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 0, 0, 84, 0, 82, 0, 847,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 253,
	0, 255, 847, 847, 258, 848, 849, 847, 847, 847,
	0, 847, 847, 265, 267, 268, 270, 847, 847, 272,
	0, 289, 287, 288, 283, 284, 0, 278, 279, 282,
	309, 310, 30, 845, 24, 0, 0, 564, 0, 556,
	557, 560, 563, 29, 319, 0, 324, 323, 315, 0,
	331, 0, 0, 0, 335, 0, 337, 338, 0, 396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 420,
	421, 422, 423, 424, 425, 426, 399, 0, 413, 0,
	0, 0, 455, 456, 457, 458, 459, 460, 461, 0,
	326, 29, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 529, 0, 483, 491, 0, 484,
	492, 485, 493, 486, 0, 487, 494, 488, 495, 489,
	490, 496, 0, 0, 0, 326, 0, 0, 48, 0,
	383, 0, 341, 343, 344, 345, -2, 0, 367, -2,
	0, 0, 0, 42, 43, 0, 0, 0, 0, 51,
	826, 53, 54, 0, 0, 0, 162, 600, 601, 602,
	598, 206, 0, 0, 150, 146, 90, 91, 92, 139,
	94, 139, 139, 139, 139, 159, 159, 159, 159, 122,
	123, 124, 125, 126, 0, 0, 109, 139, 139, 139,
	113, 129, 130, 131, 132, 133, 134, 135, 136, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 141, 141,
	141, 143, 143, 629, 68, 0, 847, 0, 847, 80,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 606, 0, 847, 251, 252, 385, 637, 638, 256,
	257, 259, 260, 261, 262, 263, 264, 271, 275, 0,
	292, 0, 0, 277, 0, 568, 0, 0, 0, 0,
	0, 559, 561, 562, 567, 32, 322, 0, 548, 0,
	0, 0, 325, 27, 394, 395, 397, 414, 0, 416,
	418, 336, 332, 0, 538, -2, 404, 405, 429, 430,
	431, 0, 0, 0, 0, 427, 409, 0, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	454, 513, 514, 0, 452, 453, 462, 0, 0, 327,
	328, 432, 0, 586, 29, 0, 0, 0, 0, 437,
	540, 0, 437, 540, 0, 0, 0, 535, 532, 0,
	0, 537, 0, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 382, 0, 0, 0, 0, 0, 0,
	372, 0, 0, 375, 0, 0, 0, 0, 366, 0,
	0, 387, 794, 368, 0, 370, 371, 391, 0, 391,
	45, 391, 47, 0, 386, 592, 52, 0, 0, 57,
	58, 593, 594, 595, 596, 0, 81, 207, 209, 212,
	213, 214, 85, 86, 87, 0, 0, 194, 0, 0,
	188, 188, 0, 186, 187, 83, 153, 151, 0, 148,
	147, 93, 0, 159, 159, 116, 117, 162, 0, 162,
	162, 162, 0, 0, 110, 111, 112, 104, 0, 105,
	106, 107, 0, 108, 0, 0, 847, 70, 608, 71,
	846, 0, 0, 621, 221, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 0, 72, 223, 225, 224,
	228, 0, 0, 0, 246, 847, 250, 289, 274, 0,
	0, 290, 291, 280, 0, 565, 566, 0, 558, 25,
	0, 603, 604, 549, 550, 339, 415, 417, 419, 0,
	326, 406, 427, 410, 0, 407, 0, 0, 401, 467,
	0, 0, 434, -2, 470, 471, 0, 0, 0, 0,
	0, 506, 0, 0, 507, 0, 555, 0, 533, 0,
	0, 482, 0, 501, 0, 0, 502, 503, 504, 505,
	580, 0, 0, -2, 0, 0, 391, 588, 0, 342,
	361, 363, 0, 358, 373, 374, 376, 0, 378, 0,
	380, 381, 346, 348, 349, 0, 0, 0, 0, 369,
	555, 0, 391, 40, 41, 0, 55, 56, 0, 0,
	62, 163, 164, 0, 210, 0, 0, 0, 181, 188,
	188, 184, 189, 185, 0, 155, 0, 152, 89, 149,
	0, 162, 162, 118, 0, 119, 120, 121, 0, 137,
	0, 0, 0, 0, 630, 69, 215, 846, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 846,
	0, 846, 622, 623, 624, 625, 0, 75, 0, 0,
	0, 0, 249, 292, 293, 294, 569, 0, 26, 391,
	0, 333, 539, 0, 408, 0, 428, 411, 468, 329,
	0, 139, 139, 518, 139, 143, 521, 139, 523, 139,
	526, 0, 0, 0, 0, 0, 0, 0, 530, 481,
	536, 0, 538, 0, 0, 33, 0, 580, 570, 582,
	584, 0, 29, 0, 576, 0, 353, 555, 0, 0,
	355, 362, 0, 0, 356, 0, 357, 377, 379, 0,
	0, 0, 0, 563, 392, 39, 59, 60, 61, 208,
	211, 0, 190, 139, 193, 182, 183, 0, 157, 0,
	154, 140, 114, 115, 160, 161, 159, 0, 159, 0,
	144, 0, 847, 216, 217, 218, 219, 0, 222, 0,
	73, 74, 0, 227, 247, 273, 551, 340, 469, 412,
	472, 515, 159, 519, 520, 522, 524, 525, 527, 474,
	473, 0, 0, 0, 0, 0, 0, 0, 534, 0,
	0, 0, 34, 0, 585, -2, 0, 0, 0, 49,
	0, 563, 589, 590, 359, 0, 364, 0, 0, 0,
	367, 38, 173, 0, 192, 0, 351, 165, 158, 0,
	162, 138, 162, 0, 0, 67, 0, 76, 77, 0,
	0, 553, 0, 516, 517, 0, 0, 0, 0, 508,
	480, 531, 0, 0, 0, 583, 0, -2, 0, 578,
	577, 354, 37, 0, 0, 0, 0, 387, 172, 174,
	0, 179, 0, 191, 0, 0, 170, 0, 167, 169,
	156, 127, 128, 142, 145, 0, 0, 0, 0, 28,
	0, 0, 475, 477, 476, 478, 0, 0, 0, 497,
	498, 0, 573, 29, 0, 360, 388, 389, 390, 350,
	175, 176, 0, 180, 178, 0, 352, 88, 0, 166,
	168, 0, 241, 0, 78, 79, 72, 554, 552, 479,
	0, 0, 0, 581, -2, 579, 177, 0, 171, 240,
	0, 0, 75, 509, 0, 512, 0, 242, 0, 226,
	510, 0, 0, 0, 195, 0, 0, 196, 197, 0,
	0, 511, 198, 0, 0, 0, 0, 0, 199, 201,
	202, 0, 0, 200, 243, 244, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 264,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:318
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:323
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:324
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:328
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:350
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:356
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:374
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:408
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:420
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:442
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:466
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:474
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:484
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:489
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:493
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:580
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:593
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:617
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:645
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:663
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:678
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:688
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:915
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:920
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:924
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:933
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:951
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:968
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1188
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1192
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1196
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1230
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1283
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1287
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1295
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1300
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1305
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1309
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1377
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1383
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1393
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1397
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1413
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1429
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1434
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1472
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1537
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1542
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1560
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = "full "
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.showFilter = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1650
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.str = SessionStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.str = GlobalStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Begin{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Begin{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Commit{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Rollback{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &OtherRead{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &OtherRead{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &OtherRead{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1736
		{
			setAllowComments(yylex, true)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			yyVAL.bytes2 = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = UnionStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = UnionAllStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = UnionDistinctStr
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = SQLCacheStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.str = DistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = StraightJoinHint
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.selectExprs = nil
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1832
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1837
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1905
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1958
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1962
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1968
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1973
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = JoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = JoinStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = StraightJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = LeftJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = LeftJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = RightJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = RightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = NaturalJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2065
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2076
		{
			yyVAL.indexHints = nil
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2080
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2084
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2088
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2093
		{
			yyVAL.expr = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2111
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2115
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2133
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = IsNullStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = IsNotNullStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = IsTrueStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = IsNotTrueStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = IsFalseStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = IsNotFalseStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = EqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = LessThanStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = GreaterThanStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = LessEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.str = GreaterEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.str = NotEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2390
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2622
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.str = BooleanModeStr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2630
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = QueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = string("")
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2738
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = nil
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2761
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &NullVal{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2819
		{
			yyVAL.exprs = nil
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2837
		{
			yyVAL.orderBy = nil
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.str = AscScr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.str = AscScr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = DescScr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2875
		{
			yyVAL.limit = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2883
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2887
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.str = ForUpdateStr
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.str = ShareModeStr
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2926
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2930
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2934
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2953
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2958
		{
			yyVAL.updateExprs = nil
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2962
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2968
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2972
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3020
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3024
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.bytes = []byte("charset")
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = &Default{}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3073
		{
			yyVAL.byt = 0
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.byt = 1
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3078
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3083
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.str = IgnoreStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3130
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			decNesting(yylex)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3409
		{
			skipToEnd(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3414
		{
			skipToEnd(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			skipToEnd(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
