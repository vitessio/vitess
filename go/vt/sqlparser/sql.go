//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const DATABASES = 57451
const TABLES = 57452
const VITESS_KEYSPACES = 57453
const VITESS_SHARDS = 57454
const VSCHEMA_TABLES = 57455
const INTEGER = 57456
const CHARACTER = 57457
const CURRENT_TIMESTAMP = 57458
const DATABASE = 57459
const CURRENT_DATE = 57460
const CURRENT_TIME = 57461
const LOCALTIME = 57462
const LOCALTIMESTAMP = 57463
const UTC_DATE = 57464
const UTC_TIME = 57465
const UTC_TIMESTAMP = 57466
const REPLACE = 57467
const CONVERT = 57468
const CAST = 57469
const GROUP_CONCAT = 57470
const SEPARATOR = 57471
const MATCH = 57472
const AGAINST = 57473
const BOOLEAN = 57474
const LANGUAGE = 57475
const WITH = 57476
const QUERY = 57477
const EXPANSION = 57478
const UNUSED = 57479

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 15,
	5, 22,
	-2, 258,
	-1, 202,
	103, 325,
	-2, 321,
	-1, 203,
	103, 326,
	-2, 322,
	-1, 418,
	103, 328,
	-2, 324,
	-1, 561,
	5, 23,
	-2, 157,
	-1, 586,
	5, 23,
	-2, 277,
	-1, 703,
	5, 23,
	-2, 280,
}

const yyNprod = 439
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3466

var yyAct = [...]int{

	218, 361, 658, 516, 610, 203, 230, 517, 302, 483,
	635, 669, 197, 609, 417, 254, 478, 177, 481, 37,
	226, 554, 306, 547, 513, 304, 412, 498, 54, 171,
	622, 447, 282, 80, 360, 3, 39, 277, 229, 198,
	290, 227, 186, 621, 42, 220, 32, 36, 736, 15,
	79, 195, 731, 735, 199, 724, 195, 180, 734, 172,
	173, 174, 730, 44, 45, 46, 47, 723, 176, 480,
	62, 613, 652, 422, 212, 205, 195, 71, 195, 57,
	536, 70, 195, 71, 309, 526, 538, 181, 66, 61,
	182, 525, 405, 407, 524, 564, 206, 208, 428, 373,
	73, 74, 75, 471, 76, 472, 53, 216, 72, 317,
	316, 471, 426, 472, 350, 351, 62, 674, 641, 589,
	555, 558, 529, 359, 566, 57, 318, 298, 333, 334,
	335, 336, 337, 330, 66, 61, 340, 431, 294, 329,
	328, 338, 339, 331, 332, 333, 334, 335, 336, 337,
	330, 473, 53, 340, 557, 340, 315, 318, 330, 473,
	406, 340, 565, 316, 317, 316, 170, 297, 317, 316,
	722, 537, 474, 535, 616, 56, 499, 65, 63, 318,
	474, 318, 719, 300, 59, 318, 211, 720, 223, 278,
	232, 425, 427, 424, 317, 316, 195, 499, 195, 572,
	284, 55, 195, 60, 68, 64, 58, 67, 680, 34,
	195, 318, 170, 54, 195, 54, 684, 195, 308, 450,
	195, 56, 217, 65, 63, 182, 279, 429, 280, 454,
	59, 439, 441, 442, 301, 321, 440, 213, 430, 540,
	541, 542, 219, 452, 453, 451, 514, 55, 296, 60,
	68, 64, 58, 67, 352, 353, 354, 355, 356, 357,
	707, 219, 214, 656, 219, 362, 676, 219, 487, 388,
	389, 296, 371, 38, 710, 329, 328, 338, 339, 331,
	332, 333, 334, 335, 336, 337, 330, 54, 584, 340,
	552, 219, 195, 588, 219, 199, 581, 195, 568, 219,
	195, 403, 413, 199, 656, 54, 552, 415, 419, 409,
	552, 317, 316, 487, 219, 195, 386, 411, 195, 54,
	400, 418, 434, 390, 416, 34, 436, 437, 318, 443,
	444, 714, 408, 530, 514, 17, 414, 552, 320, 448,
	711, 312, 296, 446, 396, 470, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 486, 488, 54, 445, 375, 376, 377, 378, 379,
	380, 381, 319, 362, 54, 501, 492, 493, 54, 34,
	717, 17, 418, 17, 69, 485, 317, 316, 34, 475,
	476, 471, 696, 472, 183, 716, 278, 697, 489, 693,
	503, 692, 496, 318, 398, 199, 399, 54, 629, 317,
	316, 515, 624, 694, 733, 518, 618, 729, 695, 348,
	187, 188, 539, 528, 506, 34, 318, 34, 54, 190,
	523, 435, 527, 40, 490, 491, 520, 511, 34, 473,
	331, 332, 333, 334, 335, 336, 337, 330, 510, 627,
	340, 283, 502, 532, 504, 505, 221, 727, 191, 698,
	474, 664, 665, 681, 281, 512, 175, 448, 222, 644,
	647, 288, 582, 544, 545, 546, 420, 255, 33, 550,
	311, 668, 283, 543, 184, 185, 253, 178, 509, 54,
	561, 562, 563, 41, 687, 567, 508, 560, 179, 38,
	686, 574, 38, 575, 576, 577, 578, 655, 413, 573,
	196, 33, 671, 195, 449, 314, 41, 43, 33, 35,
	585, 586, 587, 1, 77, 571, 667, 289, 553, 362,
	421, 49, 193, 534, 201, 54, 195, 193, 533, 195,
	583, 423, 204, 590, 507, 594, 521, 494, 387, 551,
	276, 685, 603, 654, 570, 595, 370, 193, 497, 193,
	231, 54, 438, 193, 598, 242, 569, 239, 599, 601,
	602, 604, 241, 607, 54, 240, 608, 605, 391, 611,
	612, 418, 617, 397, 485, 322, 224, 195, 404, 615,
	285, 659, 628, 620, 54, 54, 657, 54, 54, 54,
	518, 623, 54, 637, 638, 639, 580, 619, 634, 642,
	643, 252, 648, 649, 651, 646, 709, 395, 189, 14,
	13, 640, 630, 660, 663, 664, 665, 661, 653, 662,
	666, 12, 195, 672, 52, 11, 675, 10, 677, 678,
	9, 8, 449, 7, 6, 518, 5, 54, 4, 16,
	2, 0, 683, 33, 0, 0, 0, 0, 0, 200,
	0, 0, 195, 195, 195, 195, 673, 595, 0, 699,
	701, 682, 0, 195, 703, 0, 195, 193, 199, 292,
	54, 706, 54, 193, 702, 303, 708, 303, 689, 713,
	691, 193, 0, 0, 0, 193, 712, 362, 193, 0,
	688, 193, 690, 0, 0, 489, 349, 0, 0, 0,
	721, 718, 246, 245, 247, 248, 249, 250, 0, 0,
	251, 728, 0, 0, 725, 726, 0, 0, 0, 0,
	358, 192, 732, 363, 364, 365, 366, 367, 368, 369,
	0, 372, 374, 374, 374, 374, 374, 374, 374, 374,
	382, 383, 384, 385, 660, 663, 664, 665, 661, 0,
	662, 666, 0, 401, 715, 0, 0, 0, 0, 0,
	0, 0, 625, 193, 0, 201, 0, 303, 292, 0,
	0, 410, 207, 201, 0, 410, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 193, 0, 0, 193,
	0, 0, 209, 0, 210, 0, 0, 0, 215, 0,
	0, 0, 0, 17, 0, 0, 0, 625, 0, 305,
	0, 305, 0, 0, 62, 0, 0, 33, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 363, 66, 61, 0, 484, 410, 625, 625, 625,
	625, 484, 484, 0, 0, 0, 0, 34, 0, 0,
	194, 625, 0, 0, 0, 0, 0, 0, 0, 484,
	484, 484, 484, 17, 18, 19, 20, 519, 0, 33,
	0, 0, 484, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 21, 0, 0, 0,
	200, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	305, 305, 0, 0, 0, 0, 0, 34, 0, 0,
	170, 0, 287, 0, 0, 305, 0, 0, 295, 56,
	0, 65, 63, 0, 0, 0, 299, 0, 59, 0,
	307, 0, 0, 310, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 60, 68, 64,
	58, 67, 0, 559, 0, 0, 484, 0, 0, 477,
	0, 305, 0, 22, 23, 25, 24, 26, 17, 0,
	495, 0, 0, 484, 500, 0, 27, 28, 29, 62,
	0, 30, 31, 0, 193, 0, 0, 0, 57, 0,
	0, 0, 591, 592, 593, 0, 0, 66, 61, 0,
	200, 0, 0, 522, 0, 0, 0, 193, 402, 0,
	193, 0, 34, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 0, 0, 0, 0, 484,
	0, 432, 62, 0, 433, 410, 484, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 62, 0, 626,
	66, 61, 519, 0, 0, 631, 57, 0, 193, 0,
	0, 0, 0, 0, 303, 66, 61, 0, 53, 0,
	0, 393, 0, 0, 394, 170, 0, 0, 645, 0,
	34, 650, 0, 194, 56, 556, 65, 63, 0, 0,
	0, 0, 0, 59, 670, 0, 0, 519, 0, 33,
	0, 0, 0, 193, 0, 0, 0, 0, 0, 0,
	55, 0, 60, 68, 64, 58, 67, 0, 0, 0,
	0, 0, 0, 62, 626, 626, 626, 626, 170, 0,
	0, 305, 57, 193, 193, 193, 193, 56, 670, 65,
	63, 66, 61, 170, 700, 0, 59, 193, 201, 0,
	0, 0, 56, 0, 65, 63, 0, 556, 0, 53,
	305, 59, 0, 55, 0, 60, 68, 64, 58, 67,
	614, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	60, 68, 64, 58, 67, 0, 0, 0, 0, 0,
	632, 633, 0, 636, 636, 636, 0, 0, 305, 329,
	328, 338, 339, 331, 332, 333, 334, 335, 336, 337,
	330, 0, 0, 340, 0, 0, 0, 48, 0, 50,
	0, 0, 0, 51, 0, 0, 0, 0, 56, 579,
	65, 63, 0, 0, 0, 0, 548, 59, 0, 0,
	0, 600, 0, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 55, 597, 60, 68, 64, 58,
	67, 329, 328, 338, 339, 331, 332, 333, 334, 335,
	336, 337, 330, 200, 0, 340, 704, 0, 705, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 679, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 34, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 606, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 159,
	146, 120, 161, 98, 112, 169, 113, 114, 140, 86,
	128, 62, 110, 0, 101, 82, 107, 83, 99, 122,
	57, 125, 97, 148, 131, 167, 0, 135, 0, 66,
	61, 0, 0, 124, 153, 126, 145, 119, 141, 91,
	134, 162, 111, 138, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 158, 109, 139,
	81, 136, 0, 84, 87, 168, 156, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 123, 127, 142, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	133, 0, 0, 0, 88, 85, 121, 0, 0, 0,
	90, 0, 103, 143, 0, 154, 118, 170, 157, 116,
	115, 160, 163, 152, 100, 108, 56, 106, 65, 63,
	96, 155, 149, 150, 151, 59, 0, 94, 95, 92,
	93, 129, 130, 164, 165, 166, 144, 89, 0, 0,
	147, 132, 55, 0, 60, 68, 64, 58, 67, 62,
	0, 0, 479, 0, 228, 0, 0, 0, 57, 0,
	0, 0, 0, 263, 0, 0, 0, 66, 61, 0,
	0, 0, 0, 256, 257, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 202, 246, 245, 247, 248,
	249, 250, 0, 0, 251, 243, 244, 0, 0, 225,
	237, 0, 262, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 291, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 234, 235, 482, 0, 66, 61, 274, 0,
	236, 0, 0, 233, 238, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 170, 293, 0, 272, 0,
	0, 0, 0, 0, 56, 0, 65, 63, 0, 0,
	0, 0, 0, 59, 0, 264, 273, 270, 271, 268,
	269, 267, 266, 265, 275, 258, 259, 261, 0, 260,
	55, 0, 60, 68, 64, 58, 67, 62, 0, 0,
	0, 0, 228, 0, 0, 0, 57, 0, 0, 0,
	0, 263, 0, 0, 170, 66, 61, 0, 0, 0,
	0, 256, 257, 56, 0, 65, 63, 0, 0, 0,
	34, 0, 59, 202, 246, 245, 247, 248, 249, 250,
	0, 0, 251, 243, 244, 0, 0, 225, 237, 55,
	262, 60, 68, 64, 58, 67, 328, 338, 339, 331,
	332, 333, 334, 335, 336, 337, 330, 0, 0, 340,
	234, 235, 482, 0, 0, 0, 274, 0, 236, 0,
	0, 233, 238, 338, 339, 331, 332, 333, 334, 335,
	336, 337, 330, 170, 0, 340, 272, 0, 0, 0,
	0, 0, 56, 0, 65, 63, 0, 0, 0, 0,
	0, 59, 0, 264, 273, 270, 271, 268, 269, 267,
	266, 265, 275, 258, 259, 261, 0, 260, 55, 0,
	60, 68, 64, 58, 67, 62, 0, 0, 0, 0,
	228, 0, 0, 0, 57, 0, 0, 0, 0, 263,
	0, 0, 0, 66, 61, 0, 0, 0, 0, 256,
	257, 0, 0, 0, 0, 0, 0, 0, 34, 549,
	219, 202, 246, 245, 247, 248, 249, 250, 0, 0,
	251, 243, 244, 0, 0, 225, 237, 0, 262, 329,
	328, 338, 339, 331, 332, 333, 334, 335, 336, 337,
	330, 0, 0, 340, 0, 0, 0, 0, 234, 235,
	0, 0, 0, 0, 274, 0, 236, 0, 0, 233,
	238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 272, 0, 0, 0, 0, 0,
	56, 0, 65, 63, 0, 0, 0, 0, 0, 59,
	0, 264, 273, 270, 271, 268, 269, 267, 266, 265,
	275, 258, 259, 261, 17, 260, 55, 0, 60, 68,
	64, 58, 67, 0, 0, 62, 0, 0, 0, 0,
	228, 0, 0, 0, 57, 0, 0, 0, 0, 263,
	0, 0, 0, 66, 61, 0, 0, 0, 0, 256,
	257, 0, 0, 0, 0, 0, 0, 0, 34, 0,
	0, 202, 246, 245, 247, 248, 249, 250, 0, 0,
	251, 243, 244, 0, 0, 225, 237, 0, 262, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 234, 235,
	0, 0, 66, 61, 274, 0, 236, 0, 0, 233,
	238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 170, 557, 0, 272, 0, 0, 0, 0, 0,
	56, 0, 65, 63, 0, 0, 0, 0, 0, 59,
	0, 264, 273, 270, 271, 268, 269, 267, 266, 265,
	275, 258, 259, 261, 0, 260, 55, 0, 60, 68,
	64, 58, 67, 62, 0, 0, 0, 0, 228, 0,
	0, 0, 57, 0, 0, 0, 0, 263, 0, 0,
	170, 66, 61, 0, 0, 0, 0, 256, 257, 56,
	0, 65, 63, 0, 0, 0, 34, 0, 59, 202,
	246, 245, 247, 248, 249, 250, 0, 0, 251, 243,
	244, 0, 0, 225, 237, 55, 262, 60, 68, 64,
	58, 67, 0, 0, 329, 328, 338, 339, 331, 332,
	333, 334, 335, 336, 337, 330, 234, 235, 340, 0,
	0, 0, 274, 0, 236, 0, 0, 233, 238, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 272, 0, 0, 0, 0, 0, 56, 0,
	65, 63, 0, 0, 0, 0, 0, 59, 0, 264,
	273, 270, 271, 268, 269, 267, 266, 265, 275, 258,
	259, 261, 62, 260, 55, 0, 60, 68, 64, 58,
	67, 57, 0, 0, 0, 0, 263, 0, 0, 0,
	66, 61, 0, 0, 0, 0, 256, 257, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 202, 246,
	245, 247, 248, 249, 250, 0, 0, 251, 243, 244,
	0, 0, 62, 237, 0, 262, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 61, 0, 0, 0, 234, 235, 0, 0, 0,
	0, 274, 0, 236, 0, 0, 233, 238, 194, 0,
	293, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 272, 0, 0, 0, 0, 0, 56, 0, 65,
	63, 0, 0, 0, 0, 0, 59, 0, 264, 273,
	270, 271, 268, 269, 267, 266, 265, 275, 258, 259,
	261, 62, 260, 55, 0, 60, 68, 64, 58, 67,
	57, 0, 0, 0, 0, 263, 0, 0, 170, 66,
	61, 0, 0, 0, 0, 256, 257, 56, 0, 65,
	63, 0, 0, 0, 34, 0, 59, 202, 246, 245,
	247, 248, 249, 250, 0, 0, 251, 0, 0, 0,
	0, 0, 237, 55, 262, 60, 68, 64, 58, 67,
	62, 0, 0, 0, 0, 0, 0, 0, 286, 57,
	0, 0, 0, 0, 234, 235, 0, 0, 66, 61,
	274, 0, 236, 0, 0, 233, 238, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 194, 170, 0, 0,
	272, 0, 0, 57, 0, 0, 56, 0, 65, 63,
	0, 0, 66, 61, 0, 59, 0, 264, 273, 270,
	271, 268, 269, 267, 266, 265, 275, 258, 259, 261,
	53, 260, 55, 0, 60, 68, 64, 58, 67, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 62, 0, 0, 0, 170, 66, 61, 0,
	0, 57, 0, 0, 0, 56, 0, 65, 63, 0,
	66, 61, 0, 0, 59, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	170, 55, 0, 60, 68, 64, 58, 67, 0, 56,
	0, 65, 63, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 60, 68, 64,
	58, 67, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 65, 63, 170, 0,
	0, 0, 0, 59, 0, 0, 0, 56, 0, 65,
	63, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	55, 0, 60, 68, 64, 58, 67, 0, 0, 0,
	0, 0, 324, 55, 327, 60, 68, 64, 58, 67,
	341, 342, 343, 344, 345, 346, 347, 0, 325, 326,
	323, 329, 328, 338, 339, 331, 332, 333, 334, 335,
	336, 337, 330, 0, 0, 340,
}
var yyPact = [...]int{

	867, -1000, -108, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 485, 488, -1000, -1000, -1000,
	-1000, -1000, 1116, -32, -3, -11, -7, 2184, -1000, -1000,
	-1000, -1000, 511, 329, -1000, -1000, -1000, 471, 483, 471,
	388, 465, 383, -1000, -38, 3285, 500, 3272, -41, -16,
	3285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -14,
	3285, -1000, 3285, -42, 184, -42, 3285, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 388, 190, 438, 2876, 2876,
	438, -1000, -1000, -1000, -1000, -1000, 431, -1000, -1000, 139,
	3193, 442, 2381, 35, -1000, -1000, 3285, 220, -1000, 92,
	-1000, 24, -1000, -1000, 3285, 116, 181, 1434, 3285, 1434,
	-30, 3285, 458, 292, 3285, -1000, -1000, -1000, -1000, -1000,
	-1000, 507, 71, 321, -1000, 2876, 3365, -1000, 275, -1000,
	10, -1000, -1000, 3134, 3134, 3134, 3134, 3134, 3134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 275, 20, -1000, 2738, 275, 275, 275, 275,
	275, 275, 2876, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 265, -1000, 246, -1000,
	383, 1025, 304, -1000, -1000, 375, 3285, -1000, 3272, 45,
	-1000, 3055, -1000, -1000, 2034, 497, 3272, 2876, 1884, 1434,
	454, -45, -1000, -1000, -1000, -1000, -1000, 84, -1000, 3285,
	-1000, -1000, 3285, 1434, -1000, 396, 2876, 2876, 169, 2876,
	2876, 75, 3005, 159, 160, 3134, 3134, 3134, 3134, 3134,
	3134, 3134, 3134, 3134, 3134, 3134, 3134, 3134, 3134, 3134,
	58, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 329,
	658, 658, 55, 55, 55, 55, 55, 53, 2322, 1884,
	190, 262, 129, 2738, 2460, 2460, 2876, 2876, 3227, 462,
	105, 129, 3227, -1000, 190, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2460, 2460, 2460, 2460, 2876, -1000, -1000, -1000,
	462, 478, -1000, 417, 406, 2460, -1000, 285, 3272, 275,
	-1000, 972, -1000, 291, -1000, -18, -21, -27, -1000, -1000,
	-1000, -1000, 485, 2876, -1000, 129, -1000, 19, -1000, -1000,
	-1000, 284, 3227, -1000, 59, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 386, 75, 97, -1000, -1000,
	177, -1000, -1000, 129, 129, -1000, 2868, -1000, -1000, -1000,
	-1000, 159, 3134, 3134, 3134, 1123, 2868, 2583, 2475, 2449,
	55, 36, 36, 61, 61, 61, 61, 61, 350, 350,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 190, 2460,
	255, -1000, -1000, 99, 18, 275, -1000, 2876, -1000, 190,
	239, 239, 44, 103, 247, -1000, 2460, 126, -1000, 2876,
	190, -1000, 239, 190, 239, 239, -1000, 3285, -1000, -1000,
	-1000, -1000, 286, -1000, 446, 197, 237, -1000, -1000, 2598,
	190, 242, 16, 485, 275, 275, 275, 471, 129, 1734,
	3285, -1000, -1000, 3285, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1123, 2868, 1185, -1000, 3134, 3134,
	-1000, 239, 2460, -1000, -1000, 2797, -1000, -1000, 1584, 2460,
	129, -1000, -1000, -1000, 58, 58, 58, -77, 3227, 259,
	100, -1000, 2876, 344, -1000, -1000, -1000, -1000, -1000, -1000,
	497, 1040, 422, -1000, 275, -1000, -1000, 377, 3227, 3227,
	471, 3227, 3227, 3227, -1000, -1000, 1434, -1000, -1000, -1000,
	3134, 2868, 2868, -1000, -1000, -1000, -1000, 15, 190, 190,
	338, 190, 190, 275, -1000, -74, -1000, 129, 2876, 495,
	253, 584, -1000, -1000, -1000, 460, 807, 504, -1000, 275,
	-1000, 329, 14, -1000, -1000, 215, -1000, 215, 215, -1000,
	2868, 1284, -1000, -1000, -1000, 152, -1000, 434, -1000, -1000,
	3134, 190, 161, 129, 487, 479, 1040, 1040, 1040, 1040,
	-1000, 362, 360, -1000, 374, 353, 420, 3285, -1000, 212,
	807, 3272, 237, 190, 3227, -1000, 3227, -1000, -1000, -1000,
	209, 58, 189, -1000, -1000, -1000, 2876, 2876, 584, 282,
	715, -1000, -1000, -1000, -1000, 356, -1000, 341, -1000, -1000,
	-1000, -1000, 220, -1000, -1000, -1000, 50, 131, -1000, 190,
	21, -97, 129, 217, 2876, 2876, -1000, -1000, -1000, 428,
	190, -1000, 381, -88, -101, 129, 129, 58, -1000, -1000,
	378, -1000, -1000, -93, -99, -105, -1000,
}
var yyPgo = [...]int{

	0, 650, 34, 49, 649, 46, 648, 646, 644, 643,
	641, 640, 637, 635, 631, 620, 619, 44, 618, 433,
	32, 617, 42, 616, 614, 23, 69, 16, 18, 9,
	606, 11, 43, 30, 601, 596, 2, 591, 731, 590,
	412, 588, 10, 26, 586, 41, 585, 583, 38, 20,
	578, 575, 572, 567, 565, 562, 31, 1, 3, 15,
	7, 560, 190, 6, 558, 27, 556, 554, 553, 551,
	19, 550, 37, 548, 17, 45, 547, 546, 24, 12,
	39, 544, 384, 186, 542, 541, 538, 533, 531, 530,
	22, 5, 611, 25, 21, 528, 486, 14, 40, 527,
	526, 29, 8, 4, 13, 524, 523, 519, 477, 0,
	517, 99,
}
var yyR1 = [...]int{

	0, 106, 107, 107, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	4, 4, 5, 5, 6, 6, 7, 8, 9, 10,
	10, 10, 11, 11, 11, 11, 12, 13, 13, 13,
	14, 105, 105, 105, 15, 16, 16, 16, 16, 110,
	17, 18, 18, 19, 19, 19, 22, 22, 22, 20,
	20, 21, 21, 27, 27, 26, 26, 28, 28, 28,
	28, 95, 95, 95, 94, 94, 30, 30, 31, 31,
	32, 32, 33, 33, 33, 40, 34, 34, 34, 34,
	100, 100, 99, 99, 99, 98, 98, 35, 35, 35,
	35, 36, 36, 36, 36, 37, 37, 39, 39, 38,
	38, 41, 41, 41, 41, 42, 42, 43, 43, 29,
	29, 29, 29, 29, 29, 45, 45, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 55,
	55, 55, 55, 55, 55, 46, 46, 46, 46, 46,
	46, 46, 25, 25, 56, 56, 56, 62, 57, 57,
	103, 103, 103, 103, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 53, 53, 53, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 52, 52, 52, 52, 52,
	52, 52, 52, 111, 111, 54, 54, 54, 54, 23,
	23, 23, 23, 23, 104, 104, 104, 104, 104, 104,
	104, 104, 66, 66, 24, 24, 64, 64, 65, 67,
	67, 63, 63, 63, 48, 48, 48, 48, 48, 48,
	48, 50, 50, 50, 68, 68, 69, 69, 70, 70,
	71, 71, 72, 73, 73, 73, 74, 74, 74, 74,
	75, 75, 75, 76, 76, 47, 47, 47, 47, 47,
	47, 77, 77, 77, 77, 78, 78, 58, 58, 60,
	60, 59, 61, 79, 79, 80, 81, 81, 83, 83,
	84, 84, 82, 82, 85, 85, 85, 85, 85, 85,
	85, 86, 86, 86, 87, 87, 88, 88, 88, 89,
	89, 92, 92, 93, 93, 96, 96, 97, 97, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 108, 109, 101, 102, 102, 102,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 7, 10,
	3, 3, 1, 3, 6, 7, 8, 7, 3, 5,
	8, 4, 6, 7, 7, 4, 5, 4, 5, 5,
	3, 1, 1, 1, 3, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 1, 1, 1, 3, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 2, 4, 5, 7, 2,
	4, 6, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 1, 3, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -106, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -3, -4, 6, 7, 8,
	9, 29, 106, 107, 109, 108, 110, 119, 120, 121,
	124, 125, -5, -108, 50, -107, 155, -70, 14, -70,
	-19, 5, -17, -110, -17, -17, -17, -17, 111, -88,
	113, 117, -92, 53, -91, 148, 122, 26, 153, 131,
	150, 36, 17, 125, 152, 124, 35, 154, 151, -82,
	113, 115, 111, 111, 112, 113, 111, -105, 53, -90,
	-91, 66, 21, 23, 69, 101, 15, 70, 100, 143,
	106, 45, 135, 136, 133, 134, 126, 28, 9, 24,
	120, 20, 94, 108, 73, 74, 123, 22, 121, 64,
	18, 48, 10, 12, 13, 116, 115, 85, 112, 43,
	7, 102, 25, 82, 39, 27, 41, 83, 16, 137,
	138, 30, 147, 96, 46, 33, 67, 62, 49, 65,
	14, 44, 84, 109, 142, 42, 6, 146, 29, 128,
	129, 130, 119, 40, 111, 127, 72, 114, 63, 5,
	117, 8, 47, 118, 139, 140, 141, 31, 71, 11,
	113, -101, -101, -101, -101, -19, -2, -74, 16, 15,
	-74, -5, -3, 6, 19, 20, -22, 37, 38, -18,
	-82, -40, -38, -96, 53, -91, 10, -79, -80, -63,
	-92, -96, 53, -91, -84, 116, 112, -38, 111, -38,
	-38, -83, 116, 53, -83, -38, -101, -5, -109, 52,
	-75, 18, 30, -29, -44, 67, -49, -45, 22, -48,
	-63, -61, -62, 101, 90, 91, 98, 68, 102, -53,
	-51, -52, -54, 63, 64, 55, 54, 56, 57, 58,
	59, 62, -92, -96, -59, -108, 41, 42, 143, 144,
	147, 145, 70, 31, 133, 141, 140, 139, 137, 138,
	135, 136, 116, 134, 96, 142, -71, -72, -29, -75,
	-17, 33, -20, 20, 61, -39, 25, -38, 29, -99,
	-98, 21, -96, 55, 103, -38, 51, 75, 103, -38,
	67, 53, -102, -108, -93, -92, -90, -38, -102, 114,
	-38, 22, 49, -38, 8, 85, 66, 65, 82, 51,
	17, -29, -46, 85, 67, 83, 84, 69, 87, 86,
	97, 90, 91, 92, 93, 94, 95, 96, 88, 89,
	100, 75, 76, 77, 78, 79, 80, 81, -62, -108,
	104, 105, -49, -49, -49, -49, -49, -49, -108, 103,
	-2, -57, -29, -108, -108, -108, -108, -108, -108, -108,
	-66, -29, -108, -111, -108, -111, -111, -111, -111, -111,
	-111, -111, -108, -108, -108, -108, 51, -73, 23, 24,
	-22, -50, -92, 56, 59, -21, 40, -47, 29, 31,
	-2, -108, -38, -79, -41, 47, 115, 48, -98, -97,
	-96, -90, -43, 11, -80, -29, -93, -97, -90, -102,
	22, -89, 118, -85, 109, 107, 28, 108, 14, 143,
	154, 53, -38, -38, -102, 35, -29, -29, -55, 62,
	67, 63, 64, -29, -29, -45, -49, -56, -59, -62,
	60, 85, 83, 84, 69, -49, -49, -49, -49, -49,
	-49, -49, -49, -49, -49, -49, -49, -49, -49, -49,
	-103, 53, 55, 101, 122, -48, -48, -92, -27, 20,
	-26, -28, 92, -29, -96, -93, -109, 51, -109, -2,
	-26, -26, -29, -29, -76, -92, -20, -64, -65, 71,
	-92, -109, -26, -27, -26, -26, -72, -81, 18, 10,
	31, 31, -26, -78, 49, -79, -58, -60, -59, -108,
	-2, -77, -92, -43, 112, 112, 112, -70, -29, 103,
	49, -92, -101, -86, -87, 114, 21, 112, 27, 36,
	62, 63, 64, -56, -49, -49, -49, -25, 123, 66,
	-109, -26, 51, -95, -94, 21, -92, 55, 103, -108,
	-29, -109, -109, -109, 51, 118, 21, -109, 51, -26,
	-67, -65, 73, -29, -109, -109, -109, -109, -109, -38,
	-30, 10, 26, -78, 51, -109, -109, -109, 51, 103,
	-70, -108, -108, -108, -74, -93, -38, -38, -101, -25,
	66, -49, -49, -109, -28, -94, 92, -97, -27, -104,
	-103, -104, -104, 148, -92, -70, 74, -29, 72, -43,
	-31, -32, -33, -34, -40, -62, -108, 27, -60, 31,
	-2, -108, -92, -92, -74, -42, -92, -42, -42, -102,
	-49, 103, -109, -109, 131, -108, -103, 132, -109, -109,
	-108, -24, 146, -29, -68, 12, 51, -35, -36, -37,
	39, 43, 45, 40, 41, 42, 46, -100, 21, -31,
	-108, 8, -58, -2, 103, -109, 51, -109, -109, 92,
	56, 29, -49, -109, 55, -69, 13, 15, -32, -33,
	-32, -33, 39, 39, 39, 44, 39, 44, 39, -36,
	-96, -109, -79, -109, -92, -92, -109, 51, -103, -23,
	85, 151, -29, -57, 49, 49, 39, 39, -103, 132,
	56, -109, 149, 46, 152, -29, -29, 29, -109, 36,
	150, 153, -103, 36, 151, 152, 153,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, -2, 258, 49, 49, 49,
	49, 49, 316, 302, 0, 0, 0, 0, 435, 435,
	435, 435, 0, 0, 433, 1, 3, 266, 0, 266,
	0, 53, 56, 51, 302, 0, 0, 0, 300, 0,
	431, 317, 318, 321, 322, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 432, 0,
	0, 303, 0, 298, 0, 298, 0, 435, 41, 42,
	43, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	431, 45, 46, 47, 48, 0, 0, 270, 0, 0,
	270, 21, 22, 49, 54, 55, 59, 57, 58, 50,
	0, 0, 92, 109, 325, 326, 0, 28, 293, 0,
	241, 0, -2, -2, 0, 0, 0, 436, 0, 436,
	0, 0, 0, 0, 0, 40, 44, 20, 23, 434,
	16, 0, 0, 267, 119, 0, 124, 127, 0, 164,
	165, 166, 167, 0, 0, 0, 0, 0, 0, 189,
	190, 191, 192, 125, 126, 244, 245, 246, 247, 248,
	249, 250, 241, 0, 292, 0, 0, 0, 0, 0,
	0, 0, 232, 0, 213, 213, 213, 213, 213, 213,
	213, 213, 0, 0, 0, 0, 259, 260, 263, 17,
	56, 0, 61, 60, 52, 0, 0, 108, 0, 111,
	93, 0, 95, 96, 0, 117, 0, 0, 0, 436,
	0, 319, 31, 437, 438, 323, 324, 0, 35, 0,
	37, 299, 0, 436, 271, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 146, 147, 148, 149, 150, 151, 138, 0,
	0, 0, 183, 184, 185, 186, 187, 0, 63, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 59,
	0, 233, 0, 205, 0, 206, 207, 208, 209, 210,
	211, 212, 0, 63, 0, 0, 0, 262, 264, 265,
	59, 0, 251, 0, 0, 0, 62, 285, 0, 0,
	276, 0, 107, 117, 85, 0, 0, 0, 94, 110,
	327, 328, 258, 0, 294, 295, 242, 0, -2, 29,
	301, 0, 0, 435, 311, 304, 305, 306, 307, 308,
	309, 310, 36, 38, 39, 0, 120, 121, 123, 139,
	0, 141, 143, 268, 269, 128, 129, 130, 154, 155,
	156, 0, 0, 0, 0, 152, 134, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	182, 160, 161, 162, 163, 180, 181, 188, 0, 0,
	64, 65, 67, 71, 0, 242, 157, 0, 291, 0,
	0, 0, 0, 0, 0, 273, 0, 239, 236, 0,
	0, 214, 0, 0, 0, 0, 261, 0, 296, 297,
	252, 253, 76, 24, 0, 285, 275, 287, 289, 0,
	0, 0, 281, 258, 0, 0, 0, 266, 118, 0,
	0, 320, 32, 0, 435, 312, 313, 314, 315, 272,
	140, 142, 144, 131, 152, 135, 0, 132, 0, 0,
	193, 0, 0, 68, 72, 0, 74, 75, 0, 63,
	159, -2, 196, 197, 0, 0, 0, 0, 0, 258,
	0, 237, 0, 0, 204, 215, 216, 217, 218, 18,
	117, 0, 0, 25, 0, 290, -2, 0, 0, 0,
	266, 0, 0, 0, 27, 243, 436, 33, 34, 133,
	0, 153, 136, 194, 66, 73, 69, 0, 0, 0,
	224, 0, 0, 0, 274, 234, 203, 240, 0, 254,
	77, 78, 80, 81, 82, 90, 0, 0, 288, 0,
	279, 0, 283, 282, 26, 0, 115, 0, 0, 30,
	137, 0, 195, 198, 225, 0, 229, 0, 199, 200,
	0, 0, 0, 238, 256, 0, 0, 0, 0, 0,
	97, 0, 0, 100, 0, 0, 0, 0, 91, 0,
	0, 0, 278, 0, 0, 112, 0, 113, 114, 70,
	0, 0, 219, 202, 235, 19, 0, 0, 79, 86,
	0, 89, 98, 99, 101, 0, 103, 0, 105, 106,
	83, 84, 286, -2, 284, 116, 226, 0, 230, 0,
	0, 0, 257, 255, 0, 0, 102, 104, 227, 0,
	0, 201, 0, 0, 0, 87, 88, 0, 231, 220,
	0, 223, 228, 221, 0, 0, 222,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 155,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			uni := yyDollar[1].selStmt.(*Union)
			uni.OrderBy = yyDollar[2].orderBy
			uni.Limit = yyDollar[3].limit
			uni.Lock = yyDollar[4].str
			yyVAL.selStmt = uni
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:245
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 19:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:252
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:258
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:262
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:270
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:274
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:291
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:303
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:309
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:315
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:321
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:325
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:330
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:340
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:345
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:350
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:356
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:362
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:370
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:375
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:385
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:391
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:395
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:411
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:417
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:423
		{
			yyVAL.statement = &Other{}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:427
		{
			yyVAL.statement = &Other{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:431
		{
			yyVAL.statement = &Other{}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:435
		{
			yyVAL.statement = &Other{}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:440
		{
			setAllowComments(yylex, true)
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:444
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:450
		{
			yyVAL.bytes2 = nil
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:454
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:460
		{
			yyVAL.str = UnionStr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:464
		{
			yyVAL.str = UnionAllStr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:468
		{
			yyVAL.str = UnionDistinctStr
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:473
		{
			yyVAL.str = ""
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:477
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:481
		{
			yyVAL.str = SQLCacheStr
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:486
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:490
		{
			yyVAL.str = DistinctStr
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:495
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:499
		{
			yyVAL.str = StraightJoinHint
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:504
		{
			yyVAL.selectExprs = nil
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:508
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:514
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:518
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:524
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:528
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:532
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:536
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:541
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:545
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:556
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:561
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:565
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:571
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:575
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:585
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:589
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:593
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:599
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:612
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:616
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:629
		{
			yyVAL.empty = struct{}{}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:631
		{
			yyVAL.empty = struct{}{}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:634
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:638
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:642
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:649
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:655
		{
			yyVAL.str = JoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:659
		{
			yyVAL.str = JoinStr
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:663
		{
			yyVAL.str = JoinStr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:667
		{
			yyVAL.str = StraightJoinStr
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:673
		{
			yyVAL.str = LeftJoinStr
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:677
		{
			yyVAL.str = LeftJoinStr
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:681
		{
			yyVAL.str = RightJoinStr
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:685
		{
			yyVAL.str = RightJoinStr
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:691
		{
			yyVAL.str = NaturalJoinStr
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:695
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:705
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:709
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:715
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:719
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:724
		{
			yyVAL.indexHints = nil
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:728
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:732
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:736
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:742
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:746
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:751
		{
			yyVAL.expr = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:755
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:761
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:765
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:769
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:773
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:777
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:781
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:787
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:791
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:797
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:801
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:805
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:809
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:813
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:817
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:821
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:825
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:829
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:833
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:841
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:847
		{
			yyVAL.str = IsNullStr
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:851
		{
			yyVAL.str = IsNotNullStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:855
		{
			yyVAL.str = IsTrueStr
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:859
		{
			yyVAL.str = IsNotTrueStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:863
		{
			yyVAL.str = IsFalseStr
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:867
		{
			yyVAL.str = IsNotFalseStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:873
		{
			yyVAL.str = EqualStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:877
		{
			yyVAL.str = LessThanStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:881
		{
			yyVAL.str = GreaterThanStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:885
		{
			yyVAL.str = LessEqualStr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:889
		{
			yyVAL.str = GreaterEqualStr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:893
		{
			yyVAL.str = NotEqualStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:897
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:902
		{
			yyVAL.expr = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:906
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:912
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:916
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:920
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:926
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:932
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:936
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:960
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:964
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:968
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:972
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:976
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:980
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:984
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:988
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:992
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:996
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1000
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1004
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1008
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1012
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1016
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1020
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1024
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1028
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1032
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1036
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1040
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1048
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1062
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1066
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1070
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1088
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1092
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1096
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1110
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1114
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1118
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1122
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 201:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1126
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1130
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1134
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1138
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1148
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1156
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1160
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1165
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1180
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1212
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1216
		{
			yyVAL.str = BooleanModeStr
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1220
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1224
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1228
		{
			yyVAL.str = QueryExpansionStr
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1235
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1239
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1243
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1247
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1251
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1255
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1259
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1263
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1268
		{
			yyVAL.expr = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1272
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1277
		{
			yyVAL.str = string("")
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1281
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1287
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1291
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1297
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1302
		{
			yyVAL.expr = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1306
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1312
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1316
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1320
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1326
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1330
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1334
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1338
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1342
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1346
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1350
		{
			yyVAL.expr = &NullVal{}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1356
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1365
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1369
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1374
		{
			yyVAL.exprs = nil
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1378
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1383
		{
			yyVAL.expr = nil
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1387
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1392
		{
			yyVAL.orderBy = nil
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1396
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1402
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1406
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1412
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1417
		{
			yyVAL.str = AscScr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1421
		{
			yyVAL.str = AscScr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1425
		{
			yyVAL.str = DescScr
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1430
		{
			yyVAL.limit = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1434
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1438
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1442
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1447
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1451
		{
			yyVAL.str = ForUpdateStr
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1455
		{
			yyVAL.str = ShareModeStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1461
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1465
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1478
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1482
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1486
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1491
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1495
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1499
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1506
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1510
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1514
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1518
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1523
		{
			yyVAL.updateExprs = nil
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1527
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1533
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1537
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1543
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1547
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1553
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1559
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1569
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1573
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1579
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1588
		{
			yyVAL.byt = 0
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1590
		{
			yyVAL.byt = 1
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1593
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1595
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1598
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1600
		{
			yyVAL.str = IgnoreStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1604
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1606
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1608
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1610
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1612
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1614
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1616
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1619
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1621
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1623
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1627
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1629
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1632
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1634
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1636
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1639
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1641
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1645
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1656
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1662
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1666
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1673
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1802
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1811
		{
			decNesting(yylex)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1816
		{
			forceEOF(yylex)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1821
		{
			forceEOF(yylex)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1825
		{
			forceEOF(yylex)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1829
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
