//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 219,
	103, 335,
	-2, 331,
	-1, 220,
	103, 336,
	-2, 332,
	-1, 440,
	5, 21,
	-2, 286,
	-1, 476,
	103, 338,
	-2, 334,
	-1, 585,
	5, 22,
	-2, 169,
	-1, 648,
	5, 22,
	-2, 287,
	-1, 687,
	5, 21,
	-2, 289,
	-1, 731,
	5, 22,
	-2, 290,
}

const yyNprod = 451
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3852

var yyAct = [...]int{

	235, 220, 573, 399, 674, 537, 673, 247, 214, 574,
	692, 340, 42, 321, 3, 540, 188, 320, 611, 271,
	618, 554, 506, 475, 570, 59, 342, 237, 468, 539,
	87, 180, 344, 294, 300, 215, 324, 309, 246, 244,
	41, 197, 46, 487, 758, 753, 757, 204, 748, 203,
	187, 180, 180, 756, 752, 747, 180, 485, 677, 216,
	709, 86, 48, 49, 50, 51, 225, 202, 480, 230,
	222, 181, 78, 348, 530, 39, 531, 345, 530, 180,
	531, 180, 490, 588, 332, 180, 587, 368, 367, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 249,
	530, 379, 531, 182, 183, 184, 185, 186, 738, 368,
	367, 377, 378, 370, 371, 372, 373, 374, 375, 376,
	369, 600, 532, 379, 612, 331, 532, 602, 586, 223,
	627, 461, 463, 77, 379, 78, 484, 486, 483, 80,
	81, 82, 226, 533, 356, 355, 83, 533, 532, 207,
	79, 716, 698, 67, 743, 651, 234, 701, 704, 746,
	622, 357, 62, 389, 390, 592, 270, 398, 75, 533,
	336, 71, 66, 488, 328, 739, 370, 371, 372, 373,
	374, 375, 376, 369, 489, 369, 379, 354, 379, 58,
	355, 357, 333, 426, 427, 335, 178, 628, 555, 462,
	679, 55, 338, 180, 296, 302, 357, 297, 356, 355,
	180, 180, 601, 180, 599, 681, 210, 210, 218, 229,
	744, 210, 411, 180, 722, 357, 59, 513, 180, 59,
	39, 180, 359, 726, 180, 356, 355, 298, 629, 347,
	509, 511, 512, 510, 210, 339, 210, 52, 231, 54,
	210, 236, 357, 56, 555, 571, 634, 334, 61, 643,
	70, 68, 72, 604, 605, 606, 358, 469, 64, 372,
	373, 374, 375, 376, 369, 356, 355, 379, 542, 43,
	356, 355, 356, 355, 545, 60, 334, 65, 74, 69,
	63, 73, 357, 735, 236, 718, 236, 357, 429, 357,
	616, 59, 232, 616, 236, 646, 180, 307, 207, 180,
	180, 180, 180, 428, 216, 443, 616, 440, 650, 236,
	180, 457, 458, 18, 180, 545, 236, 180, 307, 236,
	180, 307, 180, 180, 616, 424, 459, 39, 593, 59,
	430, 469, 216, 306, 581, 387, 18, 180, 470, 477,
	180, 194, 465, 180, 59, 455, 445, 444, 447, 446,
	18, 467, 464, 474, 493, 307, 436, 39, 210, 476,
	472, 686, 498, 500, 501, 210, 326, 499, 210, 16,
	571, 334, 507, 438, 529, 439, 351, 452, 210, 76,
	39, 584, 453, 210, 583, 39, 210, 269, 59, 210,
	546, 504, 449, 448, 39, 755, 450, 207, 207, 207,
	207, 451, 59, 557, 454, 459, 315, 316, 198, 199,
	751, 57, 207, 603, 192, 544, 494, 559, 534, 535,
	207, 476, 547, 548, 568, 301, 551, 567, 201, 238,
	749, 723, 552, 59, 684, 644, 216, 572, 299, 217,
	558, 239, 560, 561, 478, 577, 563, 350, 562, 575,
	585, 319, 508, 195, 196, 569, 301, 189, 240, 295,
	566, 210, 580, 218, 210, 210, 210, 210, 565, 729,
	190, 589, 59, 59, 728, 456, 43, 712, 469, 210,
	713, 353, 326, 595, 45, 466, 47, 210, 210, 591,
	330, 218, 40, 466, 1, 413, 414, 415, 416, 417,
	418, 419, 210, 84, 318, 210, 323, 617, 210, 479,
	53, 360, 598, 243, 263, 262, 264, 265, 266, 267,
	507, 597, 268, 607, 482, 221, 564, 578, 614, 311,
	314, 315, 316, 312, 59, 313, 317, 425, 625, 626,
	293, 400, 630, 727, 596, 711, 632, 636, 409, 637,
	638, 639, 640, 408, 543, 466, 180, 553, 615, 543,
	543, 248, 497, 543, 259, 633, 256, 647, 648, 649,
	258, 257, 631, 431, 437, 361, 241, 543, 543, 543,
	543, 460, 206, 652, 59, 180, 303, 645, 310, 180,
	308, 212, 543, 205, 642, 218, 658, 708, 737, 435,
	508, 19, 44, 200, 473, 15, 667, 14, 13, 659,
	12, 59, 343, 11, 10, 343, 9, 663, 8, 672,
	7, 6, 668, 675, 495, 496, 676, 502, 503, 5,
	669, 272, 36, 4, 678, 180, 671, 191, 17, 544,
	2, 0, 59, 59, 0, 476, 685, 59, 59, 59,
	0, 683, 59, 687, 0, 0, 575, 694, 695, 691,
	662, 682, 696, 699, 700, 0, 705, 706, 36, 703,
	400, 0, 0, 549, 550, 0, 193, 0, 0, 714,
	0, 208, 0, 717, 0, 719, 720, 432, 0, 0,
	59, 0, 715, 295, 217, 543, 575, 0, 0, 725,
	0, 0, 0, 0, 0, 0, 731, 0, 59, 543,
	59, 216, 730, 734, 0, 659, 0, 0, 736, 0,
	0, 210, 217, 741, 343, 343, 0, 0, 745, 742,
	0, 0, 0, 207, 0, 750, 0, 0, 590, 0,
	343, 0, 0, 0, 754, 311, 314, 315, 316, 312,
	210, 313, 317, 0, 210, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 392, 393, 394, 395, 396,
	0, 0, 0, 543, 0, 0, 0, 0, 0, 466,
	543, 664, 0, 0, 536, 0, 343, 377, 378, 370,
	371, 372, 373, 374, 375, 376, 369, 0, 556, 379,
	210, 368, 367, 377, 378, 370, 371, 372, 373, 374,
	375, 376, 369, 0, 624, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 36, 217, 0, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 0, 0, 400, 0, 209, 0, 0,
	653, 654, 0, 0, 0, 0, 341, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 343,
	218, 0, 0, 0, 0, 505, 0, 388, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 0, 0, 0, 0, 0, 213, 0,
	0, 397, 224, 680, 401, 402, 403, 404, 405, 406,
	407, 0, 410, 412, 412, 412, 412, 412, 412, 412,
	412, 420, 421, 422, 423, 227, 0, 228, 0, 0,
	620, 233, 0, 0, 0, 441, 0, 0, 0, 208,
	208, 208, 208, 0, 18, 0, 0, 0, 0, 0,
	710, 0, 0, 0, 322, 67, 0, 0, 0, 0,
	0, 0, 208, 0, 62, 0, 0, 0, 0, 341,
	75, 0, 0, 71, 66, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 341, 0, 0, 0, 39, 0,
	0, 58, 0, 0, 0, 0, 0, 740, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 608, 609, 610, 0, 0,
	0, 0, 0, 401, 0, 0, 0, 0, 689, 690,
	0, 0, 0, 693, 693, 693, 0, 0, 343, 305,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 329,
	61, 0, 70, 68, 72, 0, 67, 0, 0, 337,
	64, 576, 0, 36, 346, 62, 0, 349, 0, 0,
	352, 75, 0, 0, 71, 66, 343, 60, 0, 65,
	74, 69, 63, 73, 613, 0, 0, 0, 0, 0,
	0, 217, 58, 0, 732, 0, 733, 0, 0, 0,
	0, 0, 0, 341, 368, 367, 377, 378, 370, 371,
	372, 373, 374, 375, 376, 369, 665, 666, 379, 0,
	0, 0, 0, 0, 0, 368, 367, 377, 378, 370,
	371, 372, 373, 374, 375, 376, 369, 0, 0, 379,
	0, 0, 442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 70, 68, 72, 623, 0, 697, 471,
	0, 64, 367, 377, 378, 370, 371, 372, 373, 374,
	375, 376, 369, 481, 0, 379, 491, 0, 60, 492,
	65, 74, 69, 63, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 655, 656,
	657, 724, 245, 0, 0, 0, 62, 0, 0, 0,
	0, 280, 75, 0, 0, 71, 66, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 236, 219, 263, 262, 264, 265, 266, 267,
	0, 0, 268, 260, 261, 0, 0, 242, 254, 0,
	279, 0, 0, 0, 0, 208, 0, 0, 576, 0,
	0, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 341, 0, 0, 0, 291, 0, 253, 0,
	0, 250, 255, 0, 0, 0, 702, 0, 0, 707,
	0, 0, 0, 177, 0, 0, 289, 0, 576, 0,
	36, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 0, 281, 290, 287, 288, 285, 286,
	284, 283, 282, 292, 275, 276, 278, 0, 277, 60,
	0, 65, 74, 69, 63, 73, 0, 166, 153, 127,
	168, 105, 119, 176, 120, 121, 147, 93, 135, 67,
	117, 0, 108, 89, 114, 90, 106, 129, 62, 132,
	104, 155, 138, 174, 75, 142, 0, 71, 66, 0,
	0, 131, 160, 133, 152, 126, 148, 98, 141, 169,
	118, 145, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 641, 0, 144, 165, 116, 146, 88, 143,
	0, 91, 94, 175, 163, 111, 112, 0, 0, 0,
	0, 0, 0, 0, 130, 134, 149, 124, 0, 0,
	0, 660, 0, 0, 721, 661, 109, 0, 140, 0,
	0, 0, 95, 92, 128, 0, 0, 0, 97, 0,
	110, 150, 0, 161, 125, 177, 164, 123, 122, 167,
	170, 159, 107, 115, 61, 113, 70, 68, 72, 103,
	162, 156, 157, 158, 64, 0, 101, 102, 99, 100,
	136, 137, 171, 172, 173, 151, 96, 0, 0, 154,
	139, 60, 0, 65, 74, 69, 63, 73, 166, 153,
	127, 168, 105, 119, 176, 120, 121, 147, 93, 135,
	67, 117, 0, 108, 89, 114, 90, 106, 129, 62,
	132, 104, 155, 138, 174, 75, 142, 0, 71, 66,
	0, 0, 131, 160, 133, 152, 126, 148, 98, 141,
	169, 118, 145, 39, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 165, 116, 146, 88,
	143, 0, 91, 94, 175, 163, 111, 112, 0, 0,
	0, 0, 0, 0, 0, 130, 134, 149, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 140,
	0, 0, 0, 95, 92, 128, 0, 0, 0, 97,
	0, 110, 150, 0, 161, 125, 177, 164, 123, 122,
	167, 170, 159, 107, 115, 61, 113, 70, 68, 72,
	103, 162, 156, 157, 158, 64, 0, 101, 102, 99,
	100, 136, 137, 171, 172, 173, 151, 96, 0, 0,
	154, 139, 60, 0, 65, 74, 69, 63, 73, 166,
	153, 127, 168, 105, 119, 176, 120, 121, 147, 93,
	135, 67, 117, 0, 108, 89, 114, 90, 106, 129,
	62, 132, 104, 155, 138, 174, 75, 142, 0, 71,
	66, 0, 0, 131, 160, 133, 152, 126, 148, 98,
	141, 169, 118, 145, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 165, 116, 146,
	88, 143, 0, 91, 94, 175, 163, 111, 112, 0,
	0, 0, 0, 0, 0, 0, 130, 134, 149, 124,
	0, 0, 0, 0, 0, 0, 670, 0, 109, 0,
	140, 0, 0, 0, 95, 92, 128, 0, 0, 0,
	97, 0, 110, 150, 0, 161, 125, 177, 164, 123,
	122, 167, 170, 159, 107, 115, 61, 113, 70, 68,
	72, 103, 162, 156, 157, 158, 64, 0, 101, 102,
	99, 100, 136, 137, 171, 172, 173, 151, 96, 0,
	0, 154, 139, 60, 0, 65, 74, 69, 63, 73,
	166, 153, 127, 168, 105, 119, 176, 120, 121, 147,
	93, 135, 67, 117, 0, 108, 89, 114, 90, 106,
	129, 62, 132, 104, 155, 138, 174, 75, 142, 0,
	71, 66, 0, 0, 131, 160, 133, 152, 126, 148,
	98, 141, 169, 118, 145, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 165, 116,
	146, 88, 143, 0, 91, 94, 175, 163, 111, 112,
	0, 0, 0, 0, 0, 0, 0, 130, 134, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 140, 0, 0, 0, 95, 92, 128, 0, 0,
	0, 97, 0, 110, 150, 0, 161, 125, 177, 164,
	123, 122, 167, 170, 159, 107, 115, 61, 113, 70,
	68, 72, 103, 162, 156, 157, 158, 64, 0, 101,
	102, 99, 100, 136, 137, 171, 172, 173, 151, 96,
	0, 0, 154, 139, 60, 0, 65, 74, 69, 63,
	73, 166, 153, 127, 168, 105, 119, 176, 120, 121,
	147, 93, 135, 67, 117, 0, 108, 89, 114, 90,
	106, 129, 62, 132, 104, 155, 138, 174, 75, 142,
	0, 71, 66, 0, 0, 131, 160, 133, 152, 126,
	148, 98, 141, 169, 118, 145, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 165,
	116, 146, 88, 143, 0, 91, 94, 175, 163, 111,
	112, 0, 0, 0, 0, 0, 0, 0, 130, 134,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 140, 0, 0, 0, 95, 92, 128, 0,
	0, 0, 97, 0, 110, 150, 0, 161, 125, 177,
	164, 123, 122, 167, 170, 159, 107, 115, 61, 113,
	70, 68, 72, 103, 162, 156, 157, 158, 64, 0,
	101, 102, 99, 100, 136, 137, 171, 172, 173, 151,
	96, 0, 0, 154, 139, 60, 0, 65, 74, 69,
	63, 73, 166, 153, 127, 168, 105, 119, 176, 120,
	121, 147, 93, 135, 67, 117, 0, 108, 89, 114,
	90, 106, 129, 62, 132, 104, 155, 138, 174, 75,
	142, 0, 71, 66, 0, 0, 131, 160, 133, 152,
	126, 148, 98, 141, 169, 118, 145, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	165, 116, 146, 88, 143, 0, 91, 94, 175, 163,
	111, 112, 0, 0, 0, 0, 0, 0, 0, 130,
	134, 149, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 140, 0, 0, 0, 95, 92, 128,
	0, 0, 0, 97, 0, 110, 150, 0, 161, 125,
	177, 164, 123, 122, 167, 170, 159, 107, 115, 61,
	113, 70, 68, 72, 103, 162, 156, 157, 158, 64,
	0, 101, 102, 99, 100, 136, 137, 171, 172, 173,
	151, 96, 0, 0, 154, 139, 60, 0, 65, 74,
	69, 63, 73, 166, 153, 127, 168, 105, 119, 176,
	120, 121, 147, 93, 135, 67, 117, 0, 108, 89,
	114, 90, 106, 129, 62, 132, 104, 155, 138, 174,
	75, 142, 0, 71, 66, 0, 0, 131, 160, 133,
	152, 126, 148, 98, 141, 169, 118, 145, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 165, 116, 146, 88, 143, 0, 91, 94, 175,
	163, 111, 112, 0, 0, 0, 0, 0, 0, 0,
	130, 134, 149, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 140, 0, 0, 0, 95, 92,
	128, 0, 0, 0, 97, 0, 110, 150, 0, 161,
	125, 177, 164, 123, 122, 167, 170, 159, 107, 115,
	61, 113, 70, 68, 72, 103, 162, 156, 157, 158,
	64, 0, 101, 102, 99, 100, 136, 137, 171, 172,
	173, 151, 96, 0, 0, 154, 139, 60, 0, 65,
	74, 69, 63, 73, 67, 0, 0, 538, 0, 245,
	0, 0, 0, 62, 0, 0, 0, 0, 280, 75,
	0, 0, 71, 66, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	219, 263, 262, 264, 265, 266, 267, 0, 0, 268,
	260, 261, 0, 0, 242, 254, 0, 279, 368, 367,
	377, 378, 370, 371, 372, 373, 374, 375, 376, 369,
	0, 0, 379, 0, 0, 0, 0, 251, 252, 541,
	0, 0, 0, 291, 0, 253, 0, 0, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 289, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 275, 276, 278, 0, 277, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 245, 0,
	0, 0, 62, 0, 0, 0, 0, 280, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	263, 262, 264, 265, 266, 267, 0, 0, 268, 260,
	261, 0, 0, 242, 254, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 541, 0,
	0, 0, 291, 0, 253, 0, 0, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 289, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	281, 290, 287, 288, 285, 286, 284, 283, 282, 292,
	275, 276, 278, 18, 277, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 67, 0, 0, 0, 0, 245,
	0, 0, 0, 62, 0, 0, 0, 0, 280, 75,
	0, 0, 71, 66, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	219, 263, 262, 264, 265, 266, 267, 0, 0, 268,
	260, 261, 0, 0, 242, 254, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 0,
	0, 0, 0, 291, 0, 253, 0, 0, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 289, 0, 0, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 275, 276, 278, 0, 277, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 245, 0,
	0, 0, 62, 0, 0, 0, 0, 280, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	263, 262, 264, 265, 266, 267, 0, 0, 268, 260,
	261, 0, 0, 242, 254, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 291, 0, 253, 0, 0, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 289, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	281, 290, 287, 288, 285, 286, 284, 283, 282, 292,
	275, 276, 278, 67, 277, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 280, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	263, 262, 264, 265, 266, 267, 0, 0, 268, 260,
	261, 0, 0, 0, 254, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 291, 0, 253, 0, 0, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 289, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	281, 290, 287, 288, 285, 286, 284, 283, 282, 292,
	275, 276, 278, 67, 277, 60, 0, 65, 74, 69,
	63, 73, 62, 0, 0, 0, 0, 280, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	263, 262, 264, 265, 266, 267, 0, 0, 268, 18,
	0, 0, 0, 0, 254, 0, 279, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 75, 251, 252, 71, 66,
	0, 0, 291, 0, 253, 0, 0, 250, 255, 0,
	0, 0, 0, 39, 0, 0, 179, 0, 0, 177,
	0, 0, 289, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	281, 290, 287, 288, 285, 286, 284, 283, 282, 292,
	275, 276, 278, 0, 277, 60, 0, 65, 74, 69,
	63, 73, 67, 0, 0, 0, 619, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 177, 75, 0, 0,
	71, 66, 0, 0, 0, 61, 0, 70, 68, 72,
	0, 0, 0, 0, 0, 64, 0, 0, 58, 0,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 355, 60, 67, 65, 74, 69, 63, 73, 0,
	0, 0, 62, 0, 0, 0, 0, 357, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 58,
	0, 325, 433, 0, 0, 434, 62, 0, 177, 0,
	0, 0, 75, 0, 0, 71, 66, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 179, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 67, 60, 0, 65, 74, 69, 63,
	73, 0, 62, 0, 0, 0, 0, 0, 75, 177,
	0, 71, 66, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 39, 0, 64, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 60, 0, 65, 74, 69,
	63, 73, 61, 0, 70, 68, 72, 67, 0, 0,
	0, 0, 64, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 75, 0, 0, 71, 66, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 177,
	0, 0, 0, 58, 0, 621, 0, 0, 61, 0,
	70, 68, 72, 67, 0, 0, 0, 0, 64, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 75, 0,
	0, 71, 66, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 67, 0, 179,
	0, 327, 0, 0, 0, 304, 62, 0, 0, 0,
	0, 0, 75, 177, 0, 71, 66, 0, 0, 0,
	0, 0, 61, 0, 70, 68, 72, 0, 0, 0,
	0, 0, 64, 179, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 67, 0, 60,
	0, 65, 74, 69, 63, 73, 62, 0, 0, 177,
	0, 0, 75, 0, 0, 71, 66, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 60, 0, 65, 74, 69,
	63, 73, 61, 0, 70, 68, 72, 0, 67, 0,
	0, 0, 64, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 75, 0, 0, 71, 66, 0, 60,
	0, 65, 74, 69, 63, 73, 0, 0, 0, 0,
	0, 0, 67, 177, 58, 0, 0, 0, 0, 0,
	0, 62, 61, 0, 70, 68, 72, 75, 67, 0,
	71, 66, 64, 0, 0, 0, 0, 62, 18, 37,
	20, 21, 0, 75, 0, 0, 71, 66, 219, 60,
	0, 65, 74, 69, 63, 73, 30, 0, 0, 0,
	0, 22, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 29,
	0, 0, 39, 61, 0, 70, 68, 72, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	60, 0, 65, 74, 69, 63, 73, 61, 0, 70,
	68, 72, 0, 0, 177, 0, 0, 64, 0, 0,
	0, 0, 0, 61, 0, 70, 68, 72, 23, 24,
	26, 25, 27, 64, 60, 0, 65, 74, 69, 63,
	73, 28, 31, 32, 0, 0, 33, 34, 35, 0,
	60, 0, 65, 74, 69, 63, 73, 0, 363, 0,
	366, 0, 0, 0, 0, 38, 380, 381, 382, 383,
	384, 385, 386, 0, 364, 365, 362, 368, 367, 377,
	378, 370, 371, 372, 373, 374, 375, 376, 369, 0,
	0, 379,
}
var yyPact = [...]int{

	3682, -1000, -116, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 472, 489, -1000, -1000,
	-1000, -1000, -1000, 136, 20, 39, 28, 35, 2268, 3661,
	-1000, -1000, -1000, -1000, -1000, -1000, 317, -1000, -1000, -1000,
	-1000, -1000, 451, 465, 345, 444, 381, -1000, -43, 3356,
	3550, 3645, -46, 17, 3661, -77, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 31, 3661, -1000, 3661,
	-47, 195, -47, 3661, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 199, 421, 2826,
	2826, 472, -1000, 317, -1000, -1000, -1000, 415, -1000, -1000,
	144, 3500, 314, 500, -1000, -1000, -1000, 440, 3143, 3310,
	71, 3661, 74, -1000, 235, -1000, 120, -1000, 67, -1000,
	-1000, 3661, 135, 192, 1513, -36, 3661, 1513, -41, 3661,
	435, 337, 3661, -1000, -1000, -1000, -1000, -1000, 483, 102,
	215, -1000, 2826, 3751, -1000, 287, -1000, 59, -1000, -1000,
	3086, 3086, 3086, 3086, 3086, 3086, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 287,
	64, -1000, 2687, 287, 287, 287, 287, 287, 287, 2826,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 284, -1000, 170, 451, 199, 381, 3276,
	326, -1000, -1000, 354, 3661, -1000, 3645, 3356, 3356, 3356,
	3356, -1000, 364, 363, -1000, 367, 348, 375, 3661, -1000,
	277, 199, 3143, 84, -1000, 3466, -1000, -1000, 2117, 477,
	3356, 3661, -1000, -1000, 3645, 2826, 1966, 1513, 432, -50,
	-1000, -1000, -1000, -1000, -1000, 3661, 29, -1000, 3661, -1000,
	-1000, 3661, 1513, -1000, 391, 2826, 2826, 310, 2826, 2826,
	109, 2956, 180, 158, 3086, 3086, 3086, 3086, 3086, 3086,
	3086, 3086, 3086, 3086, 3086, 3086, 3086, 3086, 3086, 47,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 317, 470,
	470, 34, 34, 34, 34, 34, 1059, 2407, 1966, 274,
	210, 2687, 2546, 2546, 2826, 2826, 2546, 446, 127, 210,
	3611, -1000, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2546, 2546, 2546, 2546, 2826, -1000, -1000, -1000, 421, -1000,
	446, 460, -1000, 406, 403, 2546, -1000, 331, 3645, 287,
	-1000, 948, -1000, 330, 500, 295, 716, -1000, -1000, -1000,
	-1000, 355, -1000, 352, -1000, -1000, -1000, -1000, -1000, 199,
	-1000, 16, -26, -29, -1000, -1000, -1000, -1000, 472, 2826,
	256, -1000, -1000, 210, -1000, 62, -1000, -1000, -1000, 289,
	3611, 1513, -1000, 100, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 387, 109, 124, -1000, -1000, 201,
	-1000, -1000, 210, 210, -1000, 2392, -1000, -1000, -1000, -1000,
	180, 3086, 3086, 3086, 1, 2392, 1038, 709, 1105, 34,
	177, 177, 88, 88, 88, 88, 88, 86, 86, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 199, 2546, 283,
	-1000, -1000, 3225, 57, 287, 2826, -1000, 252, 252, 79,
	217, 252, 2546, 183, -1000, 2826, 199, -1000, 252, 199,
	252, 252, -1000, -1000, 3661, -1000, -1000, -1000, -1000, 249,
	-1000, 419, 206, 254, -1000, -1000, 1210, 199, 267, 52,
	472, 2826, 2826, -1000, -1000, -1000, 287, 287, 287, 451,
	210, -1000, 1815, 3661, -1000, -1000, -1000, 3661, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, 2392,
	725, -1000, 3086, 3086, -1000, 252, 2546, -1000, -1000, 3420,
	-1000, -1000, 1664, 2546, 210, -1000, -1000, 47, 47, 47,
	-91, 265, 126, -1000, 2826, 143, -1000, -1000, -1000, -1000,
	-1000, -1000, 477, 3356, 417, -1000, 287, -1000, -1000, 340,
	3611, 3611, 451, 210, 210, 3611, 3611, 3611, -1000, -1000,
	1513, -1000, -1000, -1000, 3086, 2392, 2392, -1000, -1000, -1000,
	-1000, 49, 199, 199, 25, 199, 199, 287, -87, -1000,
	210, 2826, 475, 280, 482, -1000, 287, -1000, 317, 48,
	-1000, -1000, 244, -1000, 244, 244, -1000, 2392, 1362, -1000,
	-1000, -1000, 168, -1000, 412, -1000, -1000, 3086, 199, 178,
	210, 471, 464, 3645, 254, 199, 3611, -1000, 3611, -1000,
	-1000, -1000, 242, 47, 23, -1000, -1000, -1000, 2826, 2826,
	235, -1000, -1000, -1000, 21, 164, -1000, 199, 9, -105,
	210, 233, -1000, 411, 199, -1000, 384, -97, -109, 47,
	-1000, -1000, 369, -1000, -1000, -99, -107, -110, -1000,
}
var yyPgo = [...]int{

	0, 650, 13, 379, 648, 647, 643, 639, 631, 630,
	628, 626, 624, 623, 620, 618, 617, 615, 42, 613,
	612, 611, 34, 609, 41, 608, 607, 18, 29, 5,
	15, 278, 604, 17, 49, 47, 603, 601, 600, 37,
	598, 857, 596, 592, 591, 10, 28, 586, 39, 585,
	584, 38, 523, 583, 581, 580, 576, 574, 572, 22,
	3, 2, 19, 9, 571, 99, 7, 567, 21, 563,
	556, 555, 553, 12, 550, 33, 547, 16, 27, 537,
	24, 8, 35, 536, 389, 219, 535, 534, 531, 522,
	520, 519, 32, 1, 397, 26, 20, 517, 166, 23,
	36, 516, 514, 71, 11, 4, 6, 513, 504, 502,
	641, 0, 500, 496, 222,
}
var yyR1 = [...]int{

	0, 108, 109, 109, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 112, 112, 37, 37, 9, 10, 10, 10,
	10, 11, 11, 11, 11, 12, 13, 13, 13, 14,
	107, 107, 107, 15, 16, 17, 17, 17, 17, 17,
	17, 113, 18, 19, 19, 20, 20, 20, 24, 24,
	24, 22, 22, 23, 23, 29, 29, 28, 28, 30,
	30, 30, 30, 97, 97, 97, 96, 96, 32, 32,
	33, 33, 34, 34, 35, 35, 35, 43, 36, 36,
	36, 36, 102, 102, 101, 101, 101, 100, 100, 38,
	38, 38, 38, 39, 39, 39, 39, 40, 40, 42,
	42, 41, 41, 44, 44, 44, 44, 45, 45, 46,
	46, 31, 31, 31, 31, 31, 31, 48, 48, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 58, 58, 58, 58, 58, 58, 49, 49, 49,
	49, 49, 49, 49, 27, 27, 59, 59, 59, 65,
	60, 60, 105, 105, 105, 105, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 56, 56, 56, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 55, 55, 55,
	55, 55, 55, 55, 55, 114, 114, 57, 57, 57,
	57, 25, 25, 25, 25, 25, 106, 106, 106, 106,
	106, 106, 106, 106, 69, 69, 26, 26, 67, 67,
	68, 70, 70, 66, 66, 66, 51, 51, 51, 51,
	51, 51, 51, 53, 53, 53, 71, 71, 72, 72,
	73, 73, 74, 74, 75, 76, 76, 76, 77, 77,
	77, 77, 78, 78, 78, 50, 50, 50, 50, 50,
	50, 79, 79, 79, 79, 80, 80, 61, 61, 63,
	63, 62, 64, 81, 81, 82, 83, 83, 85, 85,
	86, 86, 84, 84, 87, 87, 87, 87, 87, 87,
	87, 88, 88, 88, 89, 89, 90, 90, 90, 91,
	91, 94, 94, 95, 95, 98, 98, 99, 99, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 110, 111, 103, 104, 104,
	104,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 5, 8, 4,
	6, 6, 7, 7, 4, 5, 4, 5, 5, 3,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	3, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 2, 4, 5,
	7, 2, 4, 6, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -108, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 119, 47,
	24, 120, 121, 124, 125, 126, -110, 7, 143, 50,
	-109, 156, -73, 14, -20, 5, -18, -113, -18, -18,
	-18, -18, 111, -90, 113, 65, 117, -94, 53, -93,
	149, 122, 26, 154, 132, 151, 36, 17, 125, 153,
	124, 35, 126, 155, 152, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -107, 53, -92, -93, 66, 21,
	23, 69, 101, 15, 70, 100, 144, 106, 45, 136,
	137, 134, 135, 127, 28, 9, 24, 120, 20, 94,
	108, 73, 74, 123, 22, 121, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 138, 139, 30, 148,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 143, 42, 6, 147, 29, 129, 130, 131, 119,
	40, 111, 128, 72, 114, 63, 5, 117, 8, 47,
	118, 140, 141, 142, 31, 71, 11, 113, -98, 53,
	-93, -103, -103, -103, -103, -103, -103, -2, -77, 16,
	15, -5, -3, -110, 6, 19, 20, -24, 37, 38,
	-19, -84, -33, -34, -35, -36, -43, -65, -110, -41,
	-98, 10, -37, -41, -81, -82, -66, -94, -98, 53,
	-93, -86, 116, 112, -41, 143, 111, -41, -41, -85,
	116, 53, -85, -41, -103, -111, 52, -78, 18, 30,
	-31, -47, 67, -52, -48, 22, -51, -66, -64, -65,
	101, 90, 91, 98, 68, 102, -56, -54, -55, -57,
	63, 64, 55, 54, 56, 57, 58, 59, 62, -94,
	-98, -62, -110, 41, 42, 144, 145, 148, 146, 70,
	31, 134, 142, 141, 140, 138, 139, 136, 137, 116,
	135, 96, 143, -74, -75, -31, -73, -2, -18, 33,
	-22, 20, 61, -42, 25, -41, 29, 51, -38, -39,
	-40, 39, 43, 45, 40, 41, 42, 46, -102, 21,
	-33, -2, -110, -101, -100, 21, -98, 55, 103, -41,
	-112, 51, 10, 118, 51, 75, 103, -41, 67, 53,
	-104, -110, -95, -94, -92, 113, -41, -104, 114, -41,
	22, 49, -41, 8, 85, 66, 65, 82, 51, 17,
	-31, -49, 85, 67, 83, 84, 69, 87, 86, 97,
	90, 91, 92, 93, 94, 95, 96, 88, 89, 100,
	75, 76, 77, 78, 79, 80, 81, -65, -110, 104,
	105, -52, -52, -52, -52, -52, -52, -110, 103, -60,
	-31, -110, -110, -110, -110, -110, -110, -110, -69, -31,
	-110, -114, -110, -114, -114, -114, -114, -114, -114, -114,
	-110, -110, -110, -110, 51, -76, 23, 24, -77, -111,
	-24, -53, -94, 56, 59, -23, 40, -50, 29, 31,
	-2, -110, -41, -81, -34, -35, -34, -35, 39, 39,
	39, 44, 39, 44, 39, -39, -98, -111, -111, -2,
	-44, 47, 115, 48, -100, -99, -98, -92, -46, 11,
	-33, -41, -82, -31, -95, -99, -92, -104, 22, -91,
	118, -41, -87, 109, 107, 28, 108, 14, 144, 155,
	53, -41, -41, -104, 35, -31, -31, -58, 62, 67,
	63, 64, -31, -31, -48, -52, -59, -62, -65, 60,
	85, 83, 84, 69, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -105,
	53, 55, 101, 122, -51, -51, -94, -29, 20, -28,
	-30, 92, -31, -98, -95, 51, -111, -28, -28, -31,
	-31, -28, -22, -67, -68, 71, -94, -111, -28, -29,
	-28, -28, -75, -78, -83, 18, 10, 31, 31, -28,
	-80, 49, -81, -61, -63, -62, -110, -2, -79, -94,
	-46, 49, 49, 39, 39, -111, 112, 112, 112, -73,
	-31, -46, 103, 49, -94, -104, -103, -88, -89, 114,
	21, 112, 27, 36, 62, 63, 64, -59, -52, -52,
	-52, -27, 123, 66, -111, -28, 51, -97, -96, 21,
	-94, 55, 103, -110, -31, -111, -111, 51, 118, 21,
	-111, -28, -70, -68, 73, -31, -111, -111, -111, -111,
	-111, -41, -32, 10, 26, -80, 51, -111, -111, -111,
	51, 103, -73, -31, -31, -110, -110, -110, -77, -95,
	-41, -41, -103, -27, 66, -52, -52, -111, -30, -96,
	92, -99, -29, -106, -105, -105, -106, 149, -73, 74,
	-31, 72, -46, -33, 27, -63, 31, -2, -110, -94,
	-94, -77, -45, -94, -45, -45, -104, -52, 103, -111,
	-111, 132, -110, -105, 133, -111, -111, -110, -26, 147,
	-31, -71, 12, 8, -61, -2, 103, -111, 51, -111,
	-111, 92, 56, 29, -52, -111, 55, -72, 13, 15,
	-81, -111, -94, -94, -111, 51, -105, -25, 85, 152,
	-31, -60, -105, 133, 56, -111, 150, 46, 153, 29,
	-111, 36, 151, 154, -105, 36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 270, 0, 61, 61,
	61, 61, 61, 326, 312, 0, 0, 0, 0, 0,
	447, 447, 447, 447, 447, 447, 0, 27, 28, 445,
	1, 3, 278, 0, 0, 65, 68, 63, 312, 0,
	0, 0, 310, 0, 442, 0, 327, 328, 331, 332,
	428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 443, 444, 0, 0, 313, 0,
	308, 0, 308, 0, 447, 50, 51, 52, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 442, 54, 335,
	336, 55, 56, 57, 58, 59, 60, 21, 282, 0,
	0, 270, 23, 0, 61, 66, 67, 71, 69, 70,
	62, 0, 0, 90, 92, 93, 94, 102, 0, 104,
	121, 0, 0, 34, 36, 303, 0, 253, 0, -2,
	-2, 0, 0, 0, 448, 0, 0, 448, 0, 0,
	0, 0, 0, 49, 53, 22, 446, 17, 0, 0,
	279, 131, 0, 136, 139, 0, 176, 177, 178, 179,
	0, 0, 0, 0, 0, 0, 201, 202, 203, 204,
	137, 138, 256, 257, 258, 259, 260, 261, 262, 253,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 244,
	0, 225, 225, 225, 225, 225, 225, 225, 225, 0,
	0, 0, 0, 271, 272, 275, 278, 21, 68, 0,
	73, 72, 64, 0, 0, 120, 0, 0, 0, 0,
	0, 109, 0, 0, 112, 0, 0, 0, 0, 103,
	0, 21, 0, 123, 105, 0, 107, 108, 0, 129,
	0, 0, 32, 33, 0, 0, 0, 448, 0, 329,
	39, 449, 450, 333, 334, 0, 0, 44, 0, 46,
	309, 0, 448, 283, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 158, 159, 160, 161, 162, 163, 150, 0, 0,
	0, 195, 196, 197, 198, 199, 0, 75, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 71, 0, 245,
	0, 217, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 75, 0, 0, 0, 274, 276, 277, 282, 24,
	71, 0, 263, 0, 0, 0, 74, 295, 0, 0,
	-2, 0, 119, 129, 91, 98, 0, 101, 110, 111,
	113, 0, 115, 0, 117, 118, 95, 96, 169, 21,
	97, 0, 0, 0, 106, 122, 337, 338, 270, 0,
	129, 35, 304, 305, 254, 0, -2, 37, 311, 0,
	0, 448, 447, 321, 314, 315, 316, 317, 318, 319,
	320, 45, 47, 48, 0, 132, 133, 135, 151, 0,
	153, 155, 280, 281, 140, 141, 142, 166, 167, 168,
	0, 0, 0, 0, 164, 146, 0, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 194,
	172, 173, 174, 175, 192, 193, 200, 0, 0, 76,
	77, 79, 83, 0, 254, 0, 301, 0, 0, 0,
	0, 0, 0, 251, 248, 0, 0, 226, 0, 0,
	0, 0, 273, 18, 0, 306, 307, 264, 265, 88,
	25, 0, 295, 285, 297, 299, 0, 21, 0, 291,
	270, 0, 0, 114, 116, -2, 0, 0, 0, 278,
	130, 31, 0, 0, 330, 40, 41, 0, 447, 322,
	323, 324, 325, 284, 152, 154, 156, 143, 164, 147,
	0, 144, 0, 0, 205, 0, 0, 80, 84, 0,
	86, 87, 0, 75, 171, 208, 209, 0, 0, 0,
	0, 270, 0, 249, 0, 0, 216, 227, 228, 229,
	230, 19, 129, 0, 0, 26, 0, 300, -2, 0,
	0, 0, 278, 99, 100, 0, 0, 0, 30, 255,
	448, 42, 43, 145, 0, 165, 148, 206, 78, 85,
	81, 0, 0, 0, 236, 0, 0, 0, 246, 215,
	252, 0, 266, 89, 0, 298, 0, -2, 0, 293,
	292, 29, 0, 127, 0, 0, 38, 149, 0, 207,
	210, 237, 0, 241, 0, 212, 211, 0, 0, 0,
	250, 268, 0, 0, 288, 21, 0, 124, 0, 125,
	126, 82, 0, 0, 231, 214, 247, 20, 0, 0,
	296, -2, 294, 128, 238, 0, 242, 0, 0, 0,
	269, 267, 239, 0, 0, 213, 0, 0, 0, 0,
	243, 232, 0, 235, 240, 233, 0, 0, 234,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:216
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:221
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:222
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:226
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:244
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:252
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:256
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:263
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:269
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:273
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:279
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:283
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:290
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:301
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:313
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:317
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:323
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:329
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:333
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:343
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:347
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:353
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:359
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:363
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:368
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:372
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:378
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:382
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:398
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:404
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:412
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:417
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:433
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:446
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &OtherRead{}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &OtherRead{}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &OtherRead{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:489
		{
			setAllowComments(yylex, true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:493
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:499
		{
			yyVAL.bytes2 = nil
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:503
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:509
		{
			yyVAL.str = UnionStr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:513
		{
			yyVAL.str = UnionAllStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.str = UnionDistinctStr
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:522
		{
			yyVAL.str = ""
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.str = SQLCacheStr
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:535
		{
			yyVAL.str = ""
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.str = DistinctStr
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:544
		{
			yyVAL.str = ""
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.str = StraightJoinHint
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:553
		{
			yyVAL.selectExprs = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:563
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:567
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:573
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:581
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:585
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:605
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:610
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:624
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:638
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:642
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:648
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:661
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:665
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:669
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:678
		{
			yyVAL.empty = struct{}{}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.empty = struct{}{}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:683
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:691
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:704
		{
			yyVAL.str = JoinStr
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:708
		{
			yyVAL.str = JoinStr
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:712
		{
			yyVAL.str = JoinStr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.str = StraightJoinStr
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.str = LeftJoinStr
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:726
		{
			yyVAL.str = LeftJoinStr
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:730
		{
			yyVAL.str = RightJoinStr
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:734
		{
			yyVAL.str = RightJoinStr
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.str = NaturalJoinStr
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:764
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:768
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:773
		{
			yyVAL.indexHints = nil
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:777
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:781
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:785
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:791
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:795
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:800
		{
			yyVAL.expr = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:814
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:818
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:822
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:826
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:830
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:846
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:850
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:854
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:858
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:862
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:866
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:870
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:878
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:882
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:886
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:890
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:896
		{
			yyVAL.str = IsNullStr
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:900
		{
			yyVAL.str = IsNotNullStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:904
		{
			yyVAL.str = IsTrueStr
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.str = IsNotTrueStr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.str = IsFalseStr
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:916
		{
			yyVAL.str = IsNotFalseStr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:922
		{
			yyVAL.str = EqualStr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:926
		{
			yyVAL.str = LessThanStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.str = GreaterThanStr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:934
		{
			yyVAL.str = LessEqualStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.str = GreaterEqualStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:942
		{
			yyVAL.str = NotEqualStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:951
		{
			yyVAL.expr = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:955
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:965
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:985
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1119
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 213:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.str = BooleanModeStr
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.str = QueryExpansionStr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = string("")
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.expr = &NullVal{}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.exprs = nil
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.expr = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.orderBy = nil
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = AscScr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.str = AscScr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = DescScr
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.limit = nil
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = ForUpdateStr
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = ShareModeStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1538
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.updateExprs = nil
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.byt = 0
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.byt = 1
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.str = IgnoreStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.empty = struct{}{}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.empty = struct{}{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			decNesting(yylex)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1857
		{
			forceEOF(yylex)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1862
		{
			forceEOF(yylex)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			forceEOF(yylex)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
