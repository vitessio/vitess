//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 190,
	103, 320,
	-2, 316,
	-1, 191,
	103, 321,
	-2, 317,
	-1, 318,
	103, 323,
	-2, 319,
}

const yyNprod = 435
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3685

var yyAct = [...]int{

	454, 402, 556, 626, 627, 293, 270, 185, 356, 594,
	535, 229, 565, 450, 462, 505, 294, 536, 474, 534,
	520, 269, 206, 550, 186, 267, 447, 339, 317, 401,
	3, 329, 441, 227, 215, 32, 718, 337, 711, 260,
	232, 717, 704, 272, 181, 327, 189, 187, 716, 181,
	710, 703, 630, 671, 166, 196, 322, 201, 193, 66,
	65, 574, 66, 171, 236, 233, 74, 355, 354, 230,
	332, 181, 498, 181, 499, 360, 359, 181, 253, 255,
	353, 194, 167, 168, 169, 170, 413, 498, 498, 499,
	499, 266, 361, 197, 434, 507, 68, 69, 70, 71,
	436, 67, 391, 392, 609, 180, 606, 693, 370, 369,
	379, 380, 372, 373, 374, 375, 376, 377, 378, 371,
	500, 457, 381, 445, 326, 328, 325, 205, 575, 374,
	375, 376, 377, 378, 371, 500, 500, 381, 381, 426,
	706, 501, 400, 223, 219, 371, 254, 361, 381, 195,
	481, 663, 666, 618, 619, 702, 501, 501, 222, 615,
	633, 330, 360, 359, 479, 480, 478, 699, 225, 635,
	576, 198, 331, 199, 694, 360, 359, 204, 359, 361,
	521, 200, 582, 209, 181, 435, 217, 433, 521, 700,
	181, 681, 361, 614, 361, 360, 359, 226, 181, 468,
	470, 471, 685, 181, 469, 202, 181, 360, 359, 181,
	690, 456, 361, 230, 360, 359, 34, 181, 456, 189,
	187, 251, 217, 477, 361, 258, 230, 189, 187, 258,
	221, 361, 235, 592, 456, 316, 558, 559, 560, 181,
	438, 456, 181, 611, 456, 181, 262, 340, 257, 510,
	263, 256, 203, 616, 189, 187, 349, 592, 319, 357,
	259, 578, 456, 456, 318, 372, 373, 374, 375, 376,
	377, 378, 371, 439, 335, 381, 261, 348, 286, 285,
	287, 288, 289, 290, 212, 438, 291, 510, 456, 358,
	220, 352, 545, 362, 455, 456, 438, 448, 224, 221,
	676, 448, 427, 234, 239, 248, 237, 242, 647, 240,
	645, 679, 389, 648, 438, 646, 221, 250, 596, 599,
	600, 601, 597, 403, 598, 602, 230, 678, 677, 649,
	411, 600, 601, 292, 644, 643, 538, 336, 715, 323,
	175, 176, 333, 714, 64, 334, 712, 181, 709, 596,
	599, 600, 601, 597, 46, 598, 602, 429, 208, 15,
	696, 458, 345, 344, 451, 393, 394, 395, 396, 397,
	398, 207, 697, 707, 188, 179, 453, 682, 213, 430,
	544, 475, 178, 607, 347, 320, 497, 465, 466, 472,
	238, 604, 415, 416, 417, 418, 419, 420, 421, 35,
	172, 173, 509, 511, 208, 340, 258, 463, 476, 638,
	340, 340, 508, 502, 503, 523, 37, 38, 39, 40,
	464, 357, 637, 591, 261, 184, 705, 654, 340, 340,
	340, 340, 518, 181, 514, 515, 34, 181, 528, 525,
	343, 318, 15, 36, 340, 181, 31, 446, 342, 1,
	72, 258, 603, 546, 214, 473, 440, 508, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 549, 543, 541, 533, 532, 321, 42,
	403, 432, 431, 539, 552, 553, 318, 531, 324, 192,
	341, 554, 557, 247, 350, 475, 516, 561, 695, 295,
	512, 513, 617, 555, 636, 590, 568, 580, 410, 519,
	271, 449, 340, 572, 573, 467, 282, 577, 524, 279,
	526, 527, 476, 584, 340, 585, 586, 587, 588, 231,
	281, 280, 231, 529, 243, 346, 363, 530, 571, 264,
	581, 244, 252, 210, 595, 593, 181, 188, 537, 583,
	437, 610, 670, 612, 613, 188, 692, 231, 231, 608,
	605, 174, 451, 589, 241, 33, 177, 14, 13, 12,
	624, 562, 563, 564, 231, 620, 340, 11, 10, 628,
	629, 9, 188, 351, 539, 8, 625, 7, 632, 6,
	5, 4, 2, 0, 0, 0, 0, 0, 181, 181,
	181, 181, 569, 639, 0, 641, 652, 0, 0, 651,
	634, 640, 650, 642, 579, 0, 0, 0, 528, 659,
	0, 0, 0, 0, 0, 0, 661, 662, 0, 667,
	668, 0, 665, 0, 0, 0, 539, 539, 539, 539,
	675, 0, 657, 658, 557, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 231, 622, 623,
	189, 187, 680, 672, 0, 674, 403, 0, 0, 0,
	0, 684, 0, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 689, 0, 0, 0, 0, 691, 686, 0,
	0, 0, 0, 701, 698, 228, 0, 191, 228, 0,
	0, 708, 0, 0, 687, 688, 0, 0, 0, 0,
	249, 0, 713, 660, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 75, 228, 0, 0, 0, 0, 0,
	0, 0, 504, 0, 231, 0, 183, 0, 0, 0,
	228, 183, 517, 0, 0, 0, 522, 0, 370, 369,
	379, 380, 372, 373, 374, 375, 376, 377, 378, 371,
	231, 683, 381, 183, 0, 183, 0, 0, 390, 183,
	0, 0, 0, 0, 0, 0, 443, 0, 0, 231,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 547,
	0, 548, 399, 551, 551, 551, 404, 405, 406, 407,
	408, 409, 0, 412, 414, 414, 414, 414, 414, 414,
	414, 414, 422, 423, 424, 425, 0, 0, 0, 0,
	56, 0, 0, 228, 442, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 55,
	0, 0, 0, 0, 0, 0, 0, 452, 0, 0,
	0, 0, 0, 459, 460, 461, 47, 0, 444, 0,
	0, 0, 0, 231, 15, 16, 17, 18, 360, 359,
	0, 0, 0, 0, 0, 0, 183, 0, 183, 0,
	0, 0, 183, 0, 0, 361, 0, 19, 0, 0,
	183, 0, 0, 48, 0, 183, 48, 0, 183, 0,
	0, 183, 0, 0, 0, 48, 0, 0, 0, 183,
	0, 0, 631, 0, 183, 0, 165, 183, 0, 0,
	0, 0, 48, 56, 0, 50, 0, 59, 57, 61,
	0, 183, 51, 0, 183, 53, 0, 183, 48, 540,
	231, 60, 55, 655, 0, 656, 0, 48, 0, 0,
	0, 0, 49, 0, 54, 63, 58, 52, 62, 47,
	0, 0, 0, 0, 20, 21, 23, 22, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 26, 27,
	0, 0, 28, 29, 30, 0, 0, 0, 188, 0,
	0, 0, 370, 369, 379, 380, 372, 373, 374, 375,
	376, 377, 378, 371, 0, 0, 381, 0, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	48, 48, 0, 0, 0, 0, 0, 0, 50, 228,
	59, 57, 61, 0, 0, 0, 0, 48, 53, 183,
	540, 0, 0, 0, 0, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 54, 63, 58,
	52, 62, 0, 0, 0, 0, 56, 0, 0, 15,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	56, 0, 0, 0, 60, 55, 0, 0, 0, 51,
	0, 0, 540, 540, 540, 540, 48, 0, 60, 55,
	0, 0, 47, 0, 0, 0, 48, 0, 0, 0,
	48, 0, 0, 230, 44, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 48, 183, 0, 664, 0, 183,
	669, 0, 56, 0, 0, 0, 216, 183, 0, 0,
	48, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 55, 0, 48, 0, 48, 0, 48, 48, 48,
	41, 0, 43, 0, 0, 0, 45, 0, 182, 0,
	218, 50, 0, 59, 57, 61, 165, 0, 0, 0,
	0, 53, 0, 0, 0, 50, 0, 59, 57, 61,
	0, 0, 0, 0, 0, 53, 0, 0, 49, 0,
	54, 63, 58, 52, 62, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 54, 63, 58, 52, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 165, 621,
	0, 0, 0, 0, 0, 0, 0, 50, 183, 59,
	57, 61, 0, 0, 0, 0, 0, 53, 0, 370,
	369, 379, 380, 372, 373, 374, 375, 376, 377, 378,
	371, 0, 0, 381, 49, 0, 54, 63, 58, 52,
	62, 0, 0, 0, 0, 0, 48, 379, 380, 372,
	373, 374, 375, 376, 377, 378, 371, 0, 0, 381,
	183, 183, 183, 183, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 48, 0, 0, 48, 0, 48,
	154, 141, 115, 156, 93, 107, 164, 108, 109, 135,
	81, 123, 56, 105, 0, 96, 77, 102, 78, 94,
	117, 51, 120, 92, 143, 126, 162, 0, 130, 0,
	60, 55, 0, 0, 119, 148, 121, 140, 114, 136,
	86, 129, 157, 106, 133, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 153, 104,
	134, 76, 131, 0, 79, 82, 163, 151, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 118, 122, 137,
	112, 0, 0, 0, 0, 0, 0, 653, 0, 97,
	0, 128, 0, 0, 0, 83, 80, 116, 0, 0,
	0, 85, 0, 98, 138, 0, 149, 113, 165, 152,
	111, 110, 155, 158, 147, 95, 103, 50, 101, 59,
	57, 61, 91, 150, 144, 145, 146, 53, 0, 89,
	90, 87, 88, 124, 125, 159, 160, 161, 139, 84,
	0, 0, 142, 127, 49, 0, 54, 63, 58, 52,
	62, 154, 141, 115, 156, 93, 107, 164, 108, 109,
	135, 81, 123, 56, 105, 0, 96, 77, 102, 78,
	94, 117, 51, 120, 92, 143, 126, 162, 0, 130,
	0, 60, 55, 0, 0, 119, 148, 121, 140, 114,
	136, 86, 129, 157, 106, 133, 230, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 153,
	104, 134, 76, 131, 0, 79, 82, 163, 151, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 118, 122,
	137, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 128, 0, 0, 0, 83, 80, 116, 0,
	0, 0, 85, 0, 98, 138, 0, 149, 113, 165,
	152, 111, 110, 155, 158, 147, 95, 103, 50, 101,
	59, 57, 61, 91, 150, 144, 145, 146, 53, 0,
	89, 90, 87, 88, 124, 125, 159, 160, 161, 139,
	84, 0, 0, 142, 127, 49, 0, 54, 63, 58,
	52, 62, 154, 141, 115, 156, 93, 107, 164, 108,
	109, 135, 81, 123, 56, 105, 0, 96, 77, 102,
	78, 94, 117, 51, 120, 92, 143, 126, 162, 0,
	130, 0, 60, 55, 0, 0, 119, 148, 121, 140,
	114, 136, 86, 129, 157, 106, 133, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	153, 104, 134, 76, 131, 0, 79, 82, 163, 151,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 118,
	122, 137, 112, 0, 0, 0, 0, 0, 0, 542,
	0, 97, 0, 128, 0, 0, 0, 83, 80, 116,
	0, 0, 0, 85, 0, 98, 138, 0, 149, 113,
	165, 152, 111, 110, 155, 158, 147, 95, 103, 50,
	101, 59, 57, 61, 91, 150, 144, 145, 146, 53,
	0, 89, 90, 87, 88, 124, 125, 159, 160, 161,
	139, 84, 0, 0, 142, 127, 49, 0, 54, 63,
	58, 52, 62, 154, 141, 115, 156, 93, 107, 164,
	108, 109, 135, 81, 123, 56, 105, 0, 96, 77,
	102, 78, 94, 117, 51, 120, 92, 143, 126, 162,
	0, 130, 0, 60, 55, 0, 0, 119, 148, 121,
	140, 114, 136, 86, 129, 157, 106, 133, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 153, 104, 134, 76, 131, 0, 79, 82, 163,
	151, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	118, 122, 137, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 128, 0, 0, 0, 83, 80,
	116, 0, 0, 0, 85, 0, 98, 138, 0, 149,
	113, 165, 152, 111, 110, 155, 158, 147, 95, 103,
	50, 101, 59, 57, 61, 91, 150, 144, 145, 146,
	53, 0, 89, 90, 87, 88, 124, 125, 159, 160,
	161, 139, 84, 0, 0, 142, 127, 49, 0, 54,
	63, 58, 52, 62, 154, 141, 115, 156, 93, 107,
	164, 108, 109, 135, 81, 123, 56, 105, 0, 96,
	77, 102, 78, 94, 117, 51, 120, 92, 143, 126,
	162, 0, 130, 0, 60, 55, 0, 0, 119, 148,
	121, 140, 114, 136, 86, 129, 157, 106, 133, 0,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 153, 104, 134, 76, 131, 0, 79, 82,
	163, 151, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 118, 122, 137, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 128, 0, 0, 0, 83,
	80, 116, 0, 0, 0, 85, 0, 98, 138, 0,
	149, 113, 165, 152, 111, 110, 155, 158, 147, 95,
	103, 50, 101, 59, 57, 61, 91, 150, 144, 145,
	146, 53, 0, 89, 90, 87, 88, 124, 125, 159,
	160, 161, 139, 84, 0, 0, 142, 127, 49, 0,
	54, 63, 58, 52, 62, 154, 141, 115, 156, 93,
	107, 164, 108, 109, 135, 81, 123, 56, 105, 0,
	96, 77, 102, 78, 94, 117, 51, 120, 92, 143,
	126, 162, 0, 130, 0, 60, 55, 0, 0, 119,
	148, 121, 140, 114, 136, 86, 129, 157, 106, 133,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 153, 104, 134, 76, 131, 0, 79,
	82, 163, 151, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 118, 122, 137, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 128, 0, 0, 0,
	83, 80, 116, 0, 0, 0, 85, 0, 98, 138,
	0, 149, 113, 165, 152, 111, 110, 155, 158, 147,
	95, 103, 50, 101, 59, 57, 61, 91, 150, 144,
	145, 146, 53, 0, 89, 90, 87, 88, 124, 125,
	159, 160, 161, 139, 84, 0, 0, 142, 127, 49,
	0, 54, 63, 58, 52, 62, 154, 141, 115, 156,
	93, 107, 164, 108, 109, 135, 81, 123, 56, 105,
	0, 96, 77, 102, 78, 94, 117, 51, 120, 92,
	143, 126, 162, 0, 130, 0, 60, 55, 0, 0,
	119, 148, 121, 140, 114, 136, 86, 129, 157, 106,
	133, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 153, 104, 134, 76, 131, 0,
	79, 82, 163, 151, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 118, 122, 137, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 128, 0, 0,
	0, 83, 80, 116, 0, 0, 0, 85, 0, 98,
	138, 0, 149, 113, 165, 152, 111, 110, 155, 158,
	147, 95, 103, 50, 101, 59, 57, 61, 91, 150,
	144, 145, 146, 53, 0, 89, 90, 87, 88, 124,
	125, 159, 160, 161, 139, 84, 0, 0, 142, 127,
	49, 0, 54, 63, 58, 52, 62, 56, 0, 0,
	506, 0, 268, 0, 0, 0, 51, 0, 0, 0,
	0, 303, 0, 0, 0, 60, 55, 0, 0, 0,
	0, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	230, 567, 0, 190, 286, 285, 287, 288, 289, 290,
	0, 0, 291, 283, 284, 0, 0, 265, 277, 0,
	302, 370, 369, 379, 380, 372, 373, 374, 375, 376,
	377, 378, 371, 0, 0, 381, 0, 0, 0, 0,
	274, 275, 338, 0, 0, 0, 314, 0, 276, 0,
	0, 273, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 312, 0, 0, 0,
	0, 0, 50, 0, 59, 57, 61, 0, 0, 0,
	0, 0, 53, 0, 304, 313, 310, 311, 308, 309,
	307, 306, 305, 315, 298, 299, 301, 0, 300, 49,
	0, 54, 63, 58, 52, 62, 56, 0, 0, 0,
	0, 268, 0, 0, 0, 51, 0, 0, 0, 0,
	303, 0, 0, 0, 60, 55, 0, 0, 0, 0,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 190, 286, 285, 287, 288, 289, 290, 0,
	0, 291, 283, 284, 0, 0, 265, 277, 0, 302,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 0, 0, 381, 0, 0, 0, 0, 274,
	275, 338, 0, 0, 0, 314, 0, 276, 0, 0,
	273, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 312, 0, 0, 0, 0,
	0, 50, 0, 59, 57, 61, 0, 0, 0, 0,
	0, 53, 0, 304, 313, 310, 311, 308, 309, 307,
	306, 305, 315, 298, 299, 301, 0, 300, 49, 0,
	54, 63, 58, 52, 62, 56, 0, 0, 0, 0,
	268, 0, 0, 0, 51, 0, 0, 0, 0, 303,
	0, 0, 0, 60, 55, 0, 0, 0, 0, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	456, 190, 286, 285, 287, 288, 289, 290, 0, 0,
	291, 283, 284, 0, 0, 265, 277, 0, 302, 369,
	379, 380, 372, 373, 374, 375, 376, 377, 378, 371,
	0, 0, 381, 0, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 314, 0, 276, 0, 0, 273,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 312, 0, 0, 0, 0, 0,
	50, 0, 59, 57, 61, 0, 0, 0, 0, 0,
	53, 0, 304, 313, 310, 311, 308, 309, 307, 306,
	305, 315, 298, 299, 301, 15, 300, 49, 0, 54,
	63, 58, 52, 62, 0, 0, 56, 0, 0, 0,
	0, 268, 0, 0, 0, 51, 0, 0, 0, 0,
	303, 0, 0, 0, 60, 55, 0, 0, 0, 0,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 190, 286, 285, 287, 288, 289, 290, 0,
	0, 291, 283, 284, 0, 0, 265, 277, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 0, 0, 0, 0, 314, 0, 276, 0, 0,
	273, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 312, 0, 0, 0, 0,
	0, 50, 0, 59, 57, 61, 0, 0, 0, 0,
	0, 53, 0, 304, 313, 310, 311, 308, 309, 307,
	306, 305, 315, 298, 299, 301, 0, 300, 49, 0,
	54, 63, 58, 52, 62, 56, 0, 0, 0, 0,
	268, 0, 0, 0, 51, 0, 0, 0, 0, 303,
	0, 0, 0, 60, 55, 0, 0, 0, 0, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 190, 286, 285, 287, 288, 289, 290, 0, 0,
	291, 283, 284, 0, 0, 265, 277, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 314, 0, 276, 0, 0, 273,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 312, 0, 0, 0, 0, 0,
	50, 0, 59, 57, 61, 0, 0, 0, 0, 0,
	53, 0, 304, 313, 310, 311, 308, 309, 307, 306,
	305, 315, 298, 299, 301, 56, 300, 49, 0, 54,
	63, 58, 52, 62, 51, 0, 0, 0, 0, 303,
	0, 0, 0, 60, 55, 0, 0, 0, 0, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 190, 286, 285, 287, 288, 289, 290, 0, 0,
	291, 283, 284, 0, 0, 0, 277, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 314, 0, 276, 0, 0, 273,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 312, 0, 0, 0, 0, 0,
	50, 0, 59, 57, 61, 0, 0, 0, 0, 0,
	53, 0, 304, 313, 310, 311, 308, 309, 307, 306,
	305, 315, 298, 299, 301, 56, 300, 49, 0, 54,
	63, 58, 52, 62, 51, 0, 0, 0, 0, 303,
	0, 0, 0, 60, 55, 0, 0, 0, 0, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 190, 286, 285, 287, 288, 289, 290, 0, 0,
	291, 0, 56, 0, 0, 0, 277, 0, 302, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 55, 0, 0, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 314, 0, 276, 0, 47, 273,
	278, 245, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 312, 0, 0, 0, 0, 0,
	50, 0, 59, 57, 61, 0, 0, 0, 0, 0,
	53, 0, 304, 313, 310, 311, 308, 309, 307, 306,
	305, 315, 298, 299, 301, 56, 300, 49, 0, 54,
	63, 58, 52, 62, 51, 0, 0, 0, 165, 0,
	0, 0, 0, 60, 55, 0, 0, 50, 0, 59,
	57, 61, 0, 0, 0, 0, 0, 53, 230, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 49, 0, 54, 63, 58, 52,
	62, 51, 0, 0, 0, 0, 56, 0, 0, 0,
	60, 55, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 55, 0, 0, 47, 0,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 165, 182, 0, 218, 0, 0, 0, 211, 51,
	50, 0, 59, 57, 61, 56, 0, 0, 60, 55,
	53, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 55, 0, 182, 49, 0, 54,
	63, 58, 52, 62, 0, 0, 0, 0, 165, 0,
	0, 190, 0, 0, 0, 0, 0, 50, 0, 59,
	57, 61, 165, 0, 0, 0, 0, 53, 0, 0,
	0, 50, 0, 59, 57, 61, 56, 0, 0, 0,
	0, 53, 0, 0, 49, 51, 54, 63, 58, 52,
	62, 0, 0, 0, 60, 55, 165, 0, 49, 0,
	54, 63, 58, 52, 62, 50, 0, 59, 57, 61,
	56, 165, 47, 0, 0, 53, 0, 0, 0, 51,
	50, 0, 59, 57, 61, 0, 0, 0, 60, 55,
	53, 0, 49, 0, 54, 63, 58, 52, 62, 0,
	0, 0, 0, 0, 0, 0, 182, 49, 0, 54,
	63, 58, 52, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 59, 57, 61, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 49, 0,
	54, 63, 58, 52, 62, 50, 0, 59, 57, 61,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 49, 368, 54, 63, 58, 52, 62, 382,
	383, 384, 385, 386, 387, 388, 0, 366, 367, 364,
	370, 369, 379, 380, 372, 373, 374, 375, 376, 377,
	378, 371, 0, 0, 381,
}
var yyPact = [...]int{

	858, -1000, -121, 431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1049, -53, -10, -15, -12, 2211, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 436, 381, 303, -1000, -56, 3503, 415,
	3408, -58, -31, 3503, -88, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -18, 3503, -1000, 3503, -59, 152,
	-59, 3503, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 338, -1000, -1000, 122, 3393, 349,
	1115, 41, -1000, -1000, 3503, 179, -1000, 83, -1000, 40,
	-1000, -1000, 3503, 101, 144, 1456, -48, 3503, 1456, -50,
	3503, 368, 255, 3503, -1000, -1000, 267, 3215, -1000, -1000,
	276, 3503, -1000, 3408, 31, -1000, 3359, -1000, -1000, 2060,
	413, 3408, 2908, 1909, 1456, 363, -62, -1000, -1000, -1000,
	-1000, -1000, -1000, 3503, 17, -1000, 3503, -1000, -1000, 3503,
	1456, 2489, -1000, 430, -1000, 332, 331, 353, 3408, 3469,
	-1000, 265, -1000, -32, -44, -45, -1000, -1000, -1000, -1000,
	407, 2908, -1000, 110, -1000, 2908, 3584, -1000, 176, -1000,
	-2, -1000, -1000, 3168, 3168, 3168, 3168, 3168, 3168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 176, 39, -1000, 2769, 176, 176, 176, 176,
	176, 176, 2908, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, -1000, 36, -1000, -1000,
	-1000, 253, 3469, 1456, -1000, 73, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 263, -1000, -1000, 803,
	20, 3503, -1000, -1000, -1000, -1000, 252, 176, 431, 248,
	243, 18, 407, 176, 176, 176, 391, 405, 110, 2908,
	2908, 137, 65, 3038, 163, 81, 3168, 3168, 3168, 3168,
	3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168,
	3168, 35, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	436, 224, 224, 38, 38, 38, 38, 38, 906, 2350,
	1909, 211, 236, 110, 2489, 2489, 2908, 2908, 3469, 384,
	117, 110, 3469, -1000, 166, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2489, 2489, 2489, 2489, 1758, 3503, -1000, -1000,
	-1000, 3503, -1000, -1000, -1000, -1000, -1000, 413, 2489, 3298,
	-1000, -1000, 3345, -1000, -1000, 1607, -1000, -1000, 354, 241,
	-1000, -1000, 2628, -1000, -1000, 3469, -1000, 3469, 391, 3469,
	3469, 3469, -1000, 2908, 2908, 65, 112, -1000, -1000, 174,
	-1000, -1000, -1000, 2474, -1000, -1000, -1000, -1000, 163, 3168,
	3168, 3168, 662, 2474, 2335, 1189, 2612, 38, 37, 37,
	48, 48, 48, 48, 48, 175, 175, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 166, 2489, 234, 176, -1000,
	2908, -1000, 189, 189, 10, 149, 210, -1000, 2489, 109,
	-1000, 2908, 166, -1000, 189, 166, 189, 189, -1000, 1456,
	-1000, -1000, 411, -1000, 206, 310, -1000, -1000, -1000, 370,
	1063, -1000, -1000, 3, 356, 176, -1000, 1, -1000, -1000,
	192, -1000, 192, 192, 142, 202, -1000, 130, -1000, -1000,
	-1000, -1000, 662, 2474, 1163, -1000, 3168, 3168, -1000, 189,
	2489, 110, -1000, -1000, 35, 35, 35, -97, 3469, 245,
	86, -1000, 2908, 97, -1000, -1000, -1000, -1000, -1000, -1000,
	409, 394, 3298, 3298, 3298, 3298, -1000, 296, 295, -1000,
	271, 269, 290, 3503, -1000, 182, 1305, 419, -1000, 3469,
	-1000, 3469, -1000, -1000, 2908, 2908, 2908, -1000, -1000, -1000,
	-1000, 3168, 2474, 2474, -1000, 166, 166, 19, 166, 166,
	176, -1000, -94, -1000, 110, 2908, 407, 2908, 2908, 310,
	251, 279, -1000, -1000, -1000, -1000, 288, -1000, 272, -1000,
	-1000, -1000, -1000, -1000, 3408, -1000, -1000, 110, 110, -1000,
	2474, -1000, -1000, -1000, 135, -1000, 348, -1000, -1000, 3168,
	166, 147, 110, 391, 110, 198, 2908, 2908, -1000, -1000,
	179, 159, 35, 22, -1000, -1000, 342, 110, 110, 34,
	133, -1000, 166, 5, -111, -1000, 418, 55, -1000, 344,
	166, -1000, 312, -101, -116, -1000, 311, 35, -1000, -1000,
	307, -1000, 302, -1000, -104, -1000, -112, -118, -1000,
}
var yyPgo = [...]int{

	0, 592, 29, 591, 590, 589, 587, 585, 581, 578,
	577, 569, 568, 567, 399, 566, 565, 22, 564, 561,
	556, 552, 12, 95, 15, 37, 27, 550, 19, 10,
	17, 548, 545, 9, 544, 105, 543, 336, 542, 23,
	39, 539, 25, 536, 535, 21, 91, 534, 531, 530,
	519, 516, 515, 18, 1, 511, 16, 13, 510, 43,
	6, 509, 20, 508, 507, 505, 504, 8, 503, 2,
	502, 14, 498, 496, 494, 493, 26, 7, 24, 490,
	344, 181, 489, 488, 482, 481, 479, 478, 40, 697,
	333, 11, 32, 456, 5, 28, 34, 454, 452, 54,
	33, 4, 3, 450, 449, 446, 443, 499, 0, 86,
}
var yyR1 = [...]int{

	0, 104, 105, 105, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 5, 6, 7, 7, 7, 7, 8, 8,
	8, 8, 9, 10, 10, 10, 11, 103, 103, 103,
	12, 13, 13, 13, 13, 13, 106, 14, 15, 15,
	16, 16, 16, 19, 19, 19, 17, 17, 18, 18,
	24, 24, 23, 23, 25, 25, 25, 25, 93, 93,
	93, 92, 92, 27, 27, 28, 28, 29, 29, 30,
	30, 30, 37, 31, 31, 31, 31, 98, 98, 97,
	97, 97, 96, 96, 32, 32, 32, 32, 33, 33,
	33, 33, 34, 34, 36, 36, 35, 35, 38, 38,
	38, 38, 39, 39, 40, 40, 26, 26, 26, 26,
	26, 26, 42, 42, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 52, 52, 52, 52,
	52, 52, 43, 43, 43, 43, 43, 43, 43, 22,
	22, 53, 53, 53, 59, 54, 54, 101, 101, 101,
	101, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	50, 50, 50, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 49, 49, 49, 49, 49, 49, 49, 49,
	109, 109, 51, 51, 51, 51, 20, 20, 20, 20,
	20, 102, 102, 102, 102, 102, 102, 102, 102, 63,
	63, 21, 21, 61, 61, 62, 64, 64, 60, 60,
	60, 45, 45, 45, 45, 45, 45, 45, 47, 47,
	47, 65, 65, 66, 66, 67, 67, 68, 68, 69,
	70, 70, 70, 71, 71, 71, 71, 72, 72, 72,
	73, 73, 75, 75, 74, 74, 74, 74, 76, 76,
	44, 44, 55, 55, 57, 57, 56, 58, 77, 77,
	78, 79, 79, 81, 81, 82, 82, 80, 80, 83,
	83, 83, 83, 83, 83, 83, 84, 84, 84, 85,
	85, 86, 86, 86, 87, 87, 90, 90, 91, 91,
	94, 94, 95, 95, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 107,
	108, 99, 100, 100, 100,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 13, 7, 3, 7,
	7, 8, 7, 3, 5, 8, 4, 6, 6, 7,
	7, 4, 5, 4, 5, 5, 3, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 1, 1, 1, 3, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 2, 4, 5, 7, 2, 4, 6, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	1, 3, 0, 3, 1, 3, 3, 5, 0, 5,
	2, 1, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -104, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, -13, 6, 7, 8, 9, 29,
	106, 107, 109, 108, 110, 119, 120, 121, 124, 125,
	126, -105, 156, -16, 5, -14, -106, -14, -14, -14,
	-14, 111, -86, 113, 65, 117, -90, 53, -89, 149,
	122, 26, 154, 132, 151, 36, 17, 125, 153, 124,
	35, 126, 155, 152, -80, 113, 115, 111, 111, 112,
	113, 111, -103, 53, -88, -89, 66, 21, 23, 69,
	101, 15, 70, 100, 144, 106, 45, 136, 137, 134,
	135, 127, 28, 9, 24, 120, 20, 94, 108, 73,
	74, 123, 22, 121, 64, 18, 48, 10, 12, 13,
	116, 115, 85, 112, 43, 7, 102, 25, 82, 39,
	27, 41, 83, 16, 138, 139, 30, 148, 96, 46,
	33, 67, 62, 49, 65, 14, 44, 84, 109, 143,
	42, 6, 147, 29, 129, 130, 131, 119, 40, 111,
	128, 72, 114, 63, 5, 117, 8, 47, 118, 140,
	141, 142, 31, 71, 11, 113, -99, -99, -99, -99,
	-99, -2, 19, 20, -19, 37, 38, -15, -80, -37,
	-35, -94, 53, -89, 10, -77, -78, -60, -90, -94,
	53, -89, -82, 116, 112, -35, 143, 111, -35, -35,
	-81, 116, 53, -81, -35, -99, -17, 33, 20, 61,
	-36, 25, -35, 29, -97, -96, 21, -94, 55, 103,
	-35, 51, 75, 103, -35, 67, 53, -100, -107, -91,
	50, -90, -88, 113, -35, -100, 114, -35, 22, 49,
	-35, -18, 40, -47, -90, 56, 59, -75, 29, -107,
	-35, -77, -38, 47, 115, 48, -96, -95, -94, -88,
	-40, 11, -78, -26, -41, 67, -46, -42, 22, -45,
	-60, -58, -59, 101, 90, 91, 98, 68, 102, -50,
	-48, -49, -51, 63, 64, 55, 54, 56, 57, 58,
	59, 62, -90, -94, -56, -107, 41, 42, 144, 145,
	148, 146, 70, 31, 134, 142, 141, 140, 138, 139,
	136, 137, 116, 135, 96, 143, -91, -95, -88, -100,
	22, -87, 118, -35, -83, 109, 107, 28, 108, 14,
	144, 155, 53, -35, -35, -100, -23, -25, 92, -26,
	-94, -79, 18, 10, 31, 31, -44, 31, -2, -77,
	-74, -90, -40, 112, 112, 112, -67, 14, -26, 66,
	65, 82, -26, -43, 85, 67, 83, 84, 69, 87,
	86, 97, 90, 91, 92, 93, 94, 95, 96, 88,
	89, 100, 75, 76, 77, 78, 79, 80, 81, -59,
	-107, 104, 105, -46, -46, -46, -46, -46, -46, -107,
	103, -2, -54, -26, -107, -107, -107, -107, -107, -107,
	-63, -26, -107, -109, -107, -109, -109, -109, -109, -109,
	-109, -109, -107, -107, -107, -107, 103, 49, -90, -100,
	-99, -84, -85, 114, 21, 112, 27, -27, 51, 10,
	-93, -92, 21, -90, 55, 103, -35, -76, 49, -55,
	-57, -56, -107, -76, -108, 51, 52, 103, -67, -107,
	-107, -107, -71, 16, 15, -26, -26, -52, 62, 67,
	63, 64, -42, -46, -53, -56, -59, 60, 85, 83,
	84, 69, -46, -46, -46, -46, -46, -46, -46, -46,
	-46, -46, -46, -46, -46, -46, -46, -101, 53, 55,
	101, 122, -45, -45, -90, -24, 20, -23, -91, -108,
	51, -108, -23, -23, -26, -26, -73, -90, -17, -61,
	-62, 71, -90, -108, -23, -24, -23, -23, -91, -35,
	-35, -99, -40, -25, -28, -29, -30, -31, -37, -59,
	-107, -92, 92, -95, 26, 51, -108, -90, -90, -71,
	-39, -90, -39, -39, -26, -68, -69, -26, 62, 63,
	64, -53, -46, -46, -46, -22, 123, 66, -108, -23,
	-107, -26, -108, -108, 51, 118, 21, -108, 51, -23,
	-64, -62, 73, -26, -108, -108, -108, -108, -108, -100,
	-65, 12, 51, -32, -33, -34, 39, 43, 45, 40,
	41, 42, 46, -98, 21, -28, 103, 27, -57, 103,
	-108, 51, -108, -108, 51, 17, 51, -70, 23, 24,
	-22, 66, -46, -46, -108, -24, -102, -101, -102, -102,
	149, -90, -67, 74, -26, 72, -66, 13, 15, -29,
	-30, -29, -30, 39, 39, 39, 44, 39, 44, 39,
	-33, -94, -108, 92, 8, -90, -90, -26, -26, -69,
	-46, -108, -108, 132, -107, -101, 133, -108, -108, -107,
	-21, 147, -26, -67, -26, -54, 49, 49, 39, 39,
	-77, 56, 29, -46, -108, 55, -71, -26, -26, -108,
	51, -101, -20, 85, 152, -72, 18, 30, -101, 133,
	56, -108, 150, 46, 153, 8, 85, 29, -108, 36,
	151, 154, 35, -101, 36, 36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 46, 46, 46, 46, 46,
	311, 297, 0, 0, 0, 0, 431, 431, 431, 431,
	431, 1, 3, 0, 50, 53, 48, 297, 0, 0,
	0, 295, 0, 427, 0, 312, 313, 316, 317, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 428, 0, 0, 298, 0, 293, 0,
	293, 0, 431, 37, 38, 39, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 427, 41, 42, 43, 44,
	45, 18, 51, 52, 56, 54, 55, 47, 0, 0,
	89, 106, 320, 321, 0, 23, 288, 0, 238, 0,
	-2, -2, 0, 0, 0, 432, 0, 0, 432, 0,
	0, 0, 0, 0, 36, 40, 58, 0, 57, 49,
	272, 0, 105, 0, 108, 90, 0, 92, 93, 0,
	114, 0, 0, 0, 432, 0, 314, 26, 433, 434,
	429, 318, 319, 0, 0, 31, 0, 33, 294, 0,
	432, 0, 59, 0, 248, 0, 0, 0, 0, 0,
	104, 114, 82, 0, 0, 0, 91, 107, 322, 323,
	255, 0, 289, 290, 116, 0, 121, 124, 0, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 186,
	187, 188, 189, 122, 123, 241, 242, 243, 244, 245,
	246, 247, 238, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 210, 210, 210, 210, 210, 210,
	210, 210, 0, 0, 0, 0, 239, 0, -2, 24,
	296, 0, 0, 432, 431, 306, 299, 300, 301, 302,
	303, 304, 305, 32, 34, 35, 73, 62, 64, 68,
	0, 0, 291, 292, 249, 250, 278, 0, 281, 278,
	0, 274, 255, 0, 0, 0, 263, 0, 115, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 143, 144, 145, 146, 147, 148, 135,
	0, 0, 0, 180, 181, 182, 183, 184, 0, 60,
	0, 0, 0, 155, 0, 0, 0, 0, 0, 56,
	0, 230, 0, 202, 0, 203, 204, 205, 206, 207,
	208, 209, 0, 60, 0, 0, 0, 0, 315, 27,
	28, 0, 431, 307, 308, 309, 310, 114, 0, 0,
	65, 69, 0, 71, 72, 0, 17, 19, 0, 280,
	282, 284, 0, 20, 273, 0, 430, 0, 263, 0,
	0, 0, 22, 0, 0, 117, 118, 120, 136, 0,
	138, 140, 125, 126, 127, 151, 152, 153, 0, 0,
	0, 0, 149, 131, 0, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 179, 157, 158,
	159, 160, 177, 178, 185, 0, 0, 61, 239, 154,
	0, 286, 0, 0, 0, 0, 0, 270, 0, 236,
	233, 0, 0, 211, 0, 0, 0, 0, 240, 432,
	29, 30, 251, 63, 74, 75, 77, 78, 79, 87,
	0, 70, 66, 0, 0, 0, 285, 276, 275, 21,
	0, 112, 0, 0, 264, 256, 257, 260, 137, 139,
	141, 128, 149, 132, 0, 129, 0, 0, 190, 0,
	60, 156, 193, 194, 0, 0, 0, 0, 0, 255,
	0, 234, 0, 0, 201, 212, 213, 214, 215, 25,
	253, 0, 0, 0, 0, 0, 94, 0, 0, 97,
	0, 0, 0, 0, 88, 0, 0, 0, 283, 0,
	109, 0, 110, 111, 0, 0, 0, 259, 261, 262,
	130, 0, 150, 133, 191, 0, 0, 221, 0, 0,
	0, 271, 231, 200, 237, 0, 255, 0, 0, 76,
	83, 0, 86, 95, 96, 98, 0, 100, 0, 102,
	103, 80, 81, 67, 0, 277, 113, 265, 266, 258,
	134, 192, 195, 222, 0, 226, 0, 196, 197, 0,
	0, 0, 235, 263, 254, 252, 0, 0, 99, 101,
	279, 0, 0, 216, 199, 232, 267, 84, 85, 223,
	0, 227, 0, 0, 0, 16, 0, 0, 224, 0,
	0, 198, 0, 0, 0, 268, 0, 0, 228, 217,
	0, 220, 0, 225, 218, 269, 0, 0, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:290
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:296
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:300
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:305
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:310
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:316
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:322
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:330
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:335
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:345
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:351
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:355
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:371
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:377
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:383
		{
			yyVAL.statement = &Other{}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:387
		{
			yyVAL.statement = &Other{}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:391
		{
			yyVAL.statement = &Other{}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:395
		{
			yyVAL.statement = &Other{}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:399
		{
			yyVAL.statement = &Other{}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:404
		{
			setAllowComments(yylex, true)
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:408
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:414
		{
			yyVAL.bytes2 = nil
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:418
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:424
		{
			yyVAL.str = UnionStr
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:428
		{
			yyVAL.str = UnionAllStr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:432
		{
			yyVAL.str = UnionDistinctStr
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:437
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:441
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:445
		{
			yyVAL.str = SQLCacheStr
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:450
		{
			yyVAL.str = ""
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:454
		{
			yyVAL.str = DistinctStr
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:459
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:463
		{
			yyVAL.str = StraightJoinHint
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:468
		{
			yyVAL.selectExprs = nil
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:472
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:478
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:482
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:488
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:492
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:500
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:505
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:509
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:513
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:520
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:525
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:529
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:535
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:539
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:553
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:557
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:563
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:576
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:580
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:584
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:588
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:593
		{
			yyVAL.empty = struct{}{}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:595
		{
			yyVAL.empty = struct{}{}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:598
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:602
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:606
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:613
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:619
		{
			yyVAL.str = JoinStr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:623
		{
			yyVAL.str = JoinStr
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:627
		{
			yyVAL.str = JoinStr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:631
		{
			yyVAL.str = StraightJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:637
		{
			yyVAL.str = LeftJoinStr
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:641
		{
			yyVAL.str = LeftJoinStr
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:645
		{
			yyVAL.str = RightJoinStr
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:649
		{
			yyVAL.str = RightJoinStr
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:655
		{
			yyVAL.str = NaturalJoinStr
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:659
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:669
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:673
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:679
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:683
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:688
		{
			yyVAL.indexHints = nil
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:692
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:696
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:700
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:706
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:710
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:715
		{
			yyVAL.expr = nil
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:719
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:725
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:729
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:733
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:737
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:741
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:745
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:751
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:755
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:761
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:765
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:769
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:773
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:777
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:781
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:785
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:789
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:793
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:797
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:801
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:805
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:811
		{
			yyVAL.str = IsNullStr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:815
		{
			yyVAL.str = IsNotNullStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:819
		{
			yyVAL.str = IsTrueStr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:823
		{
			yyVAL.str = IsNotTrueStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:827
		{
			yyVAL.str = IsFalseStr
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:831
		{
			yyVAL.str = IsNotFalseStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.str = EqualStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:841
		{
			yyVAL.str = LessThanStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:845
		{
			yyVAL.str = GreaterThanStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:849
		{
			yyVAL.str = LessEqualStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:853
		{
			yyVAL.str = GreaterEqualStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:857
		{
			yyVAL.str = NotEqualStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:861
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:866
		{
			yyVAL.expr = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:870
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:876
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:880
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:884
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:890
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:896
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:900
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:918
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:924
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:928
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:932
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:936
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:940
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:944
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:948
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:952
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:956
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:960
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:964
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:968
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:972
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:976
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:980
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:984
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:988
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:992
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:996
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1000
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1004
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1012
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1026
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1030
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1034
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1052
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1056
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1060
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1078
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1082
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1086
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1090
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1094
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1098
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1102
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1134
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1144
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1158
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1176
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1180
		{
			yyVAL.str = BooleanModeStr
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1184
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1188
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1192
		{
			yyVAL.str = QueryExpansionStr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1199
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1203
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1207
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1211
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1215
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1219
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1223
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1227
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1232
		{
			yyVAL.expr = nil
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1236
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1241
		{
			yyVAL.str = string("")
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1245
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1251
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1255
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1261
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1266
		{
			yyVAL.expr = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1270
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1284
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1290
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1294
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1298
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1302
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1306
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1310
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1314
		{
			yyVAL.expr = &NullVal{}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1320
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1329
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1333
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1338
		{
			yyVAL.exprs = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1342
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1347
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1351
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1356
		{
			yyVAL.orderBy = nil
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1360
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1366
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1370
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1376
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			yyVAL.str = AscScr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1385
		{
			yyVAL.str = AscScr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1389
		{
			yyVAL.str = DescScr
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.limit = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1398
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1402
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1406
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1411
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1415
		{
			yyVAL.str = ForUpdateStr
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1419
		{
			yyVAL.str = ShareModeStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1425
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1429
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1434
		{
			yyVAL.columns = nil
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1438
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1444
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1448
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1452
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1456
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1461
		{
			yyVAL.updateExprs = nil
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1465
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1471
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1475
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1481
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1485
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1491
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1495
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1501
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1507
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1517
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1521
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1527
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1536
		{
			yyVAL.byt = 0
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1538
		{
			yyVAL.byt = 1
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1541
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1543
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1546
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1548
		{
			yyVAL.str = IgnoreStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1552
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1554
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1556
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1558
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1560
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1562
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1564
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1567
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1569
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1571
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1575
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1577
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1580
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1582
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1584
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1587
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1589
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1597
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1604
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1610
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1614
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1621
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1751
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1760
		{
			decNesting(yylex)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1765
		{
			forceEOF(yylex)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1770
		{
			forceEOF(yylex)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1774
		{
			forceEOF(yylex)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1778
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
