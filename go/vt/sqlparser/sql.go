//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const SHOW = 57457
const DESCRIBE = 57458
const EXPLAIN = 57459
const DATE = 57460
const ESCAPE = 57461
const REPAIR = 57462
const OPTIMIZE = 57463
const TRUNCATE = 57464
const MAXVALUE = 57465
const PARTITION = 57466
const REORGANIZE = 57467
const LESS = 57468
const THAN = 57469
const PROCEDURE = 57470
const TRIGGER = 57471
const VINDEX = 57472
const VINDEXES = 57473
const STATUS = 57474
const VARIABLES = 57475
const BEGIN = 57476
const START = 57477
const TRANSACTION = 57478
const COMMIT = 57479
const ROLLBACK = 57480
const BIT = 57481
const TINYINT = 57482
const SMALLINT = 57483
const MEDIUMINT = 57484
const INT = 57485
const INTEGER = 57486
const BIGINT = 57487
const INTNUM = 57488
const REAL = 57489
const DOUBLE = 57490
const FLOAT_TYPE = 57491
const DECIMAL = 57492
const NUMERIC = 57493
const TIME = 57494
const TIMESTAMP = 57495
const DATETIME = 57496
const YEAR = 57497
const CHAR = 57498
const VARCHAR = 57499
const BOOL = 57500
const CHARACTER = 57501
const VARBINARY = 57502
const NCHAR = 57503
const TEXT = 57504
const TINYTEXT = 57505
const MEDIUMTEXT = 57506
const LONGTEXT = 57507
const BLOB = 57508
const TINYBLOB = 57509
const MEDIUMBLOB = 57510
const LONGBLOB = 57511
const JSON = 57512
const ENUM = 57513
const GEOMETRY = 57514
const POINT = 57515
const LINESTRING = 57516
const POLYGON = 57517
const GEOMETRYCOLLECTION = 57518
const MULTIPOINT = 57519
const MULTILINESTRING = 57520
const MULTIPOLYGON = 57521
const NULLX = 57522
const AUTO_INCREMENT = 57523
const APPROXNUM = 57524
const SIGNED = 57525
const UNSIGNED = 57526
const ZEROFILL = 57527
const DATABASES = 57528
const TABLES = 57529
const VITESS_KEYSPACES = 57530
const VITESS_SHARDS = 57531
const VITESS_TABLETS = 57532
const VSCHEMA_TABLES = 57533
const NAMES = 57534
const CHARSET = 57535
const GLOBAL = 57536
const SESSION = 57537
const CURRENT_TIMESTAMP = 57538
const DATABASE = 57539
const CURRENT_DATE = 57540
const CURRENT_TIME = 57541
const LOCALTIME = 57542
const LOCALTIMESTAMP = 57543
const UTC_DATE = 57544
const UTC_TIME = 57545
const UTC_TIMESTAMP = 57546
const REPLACE = 57547
const CONVERT = 57548
const CAST = 57549
const SUBSTR = 57550
const SUBSTRING = 57551
const GROUP_CONCAT = 57552
const SEPARATOR = 57553
const MATCH = 57554
const AGAINST = 57555
const BOOLEAN = 57556
const LANGUAGE = 57557
const WITH = 57558
const QUERY = 57559
const EXPANSION = 57560
const UNUSED = 57561

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 227,
	109, 555,
	-2, 551,
	-1, 228,
	109, 556,
	-2, 552,
	-1, 296,
	80, 707,
	-2, 47,
	-1, 297,
	80, 674,
	-2, 48,
	-1, 302,
	80, 659,
	-2, 517,
	-1, 304,
	80, 692,
	-2, 519,
	-1, 562,
	52, 41,
	54, 41,
	-2, 43,
	-1, 687,
	109, 558,
	-2, 554,
	-1, 882,
	5, 28,
	-2, 364,
	-1, 907,
	5, 27,
	-2, 493,
	-1, 1116,
	5, 28,
	-2, 494,
	-1, 1160,
	5, 27,
	-2, 496,
	-1, 1213,
	5, 28,
	-2, 497,
}

const yyPrivate = 57344

const yyLast = 9530

var yyAct = [...]int{

	258, 47, 628, 827, 749, 509, 232, 1204, 1122, 1029,
	508, 3, 824, 779, 767, 257, 1054, 1030, 556, 963,
	783, 206, 554, 782, 910, 807, 750, 1026, 200, 926,
	712, 874, 301, 1003, 722, 719, 966, 954, 821, 793,
	915, 689, 53, 738, 442, 448, 817, 746, 47, 398,
	295, 284, 454, 558, 543, 230, 211, 462, 205, 856,
	215, 291, 288, 293, 283, 52, 1232, 1222, 1230, 1211,
	1228, 828, 201, 202, 203, 204, 1221, 1021, 1110, 402,
	234, 1176, 945, 423, 282, 1210, 800, 1060, 1061, 1062,
	1134, 808, 1099, 1097, 219, 1065, 1063, 171, 167, 168,
	169, 57, 523, 199, 1149, 434, 435, 1191, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	1229, 844, 486, 411, 1227, 1205, 59, 60, 61, 62,
	63, 987, 747, 412, 1004, 843, 405, 165, 1174, 768,
	770, 164, 287, 165, 636, 984, 425, 627, 427, 780,
	925, 986, 924, 923, 400, 408, 1196, 795, 179, 166,
	498, 499, 848, 1006, 795, 721, 1119, 990, 890, 868,
	661, 842, 424, 426, 466, 225, 228, 418, 486, 476,
	1079, 1069, 486, 658, 429, 429, 429, 429, 461, 429,
	429, 913, 939, 170, 570, 1008, 429, 1012, 1023, 1007,
	739, 1005, 696, 739, 795, 897, 1010, 76, 460, 459,
	185, 176, 47, 769, 176, 1009, 694, 695, 693, 839,
	836, 837, 451, 835, 808, 461, 631, 495, 1011, 1013,
	497, 1070, 399, 1199, 195, 1175, 1173, 459, 176, 176,
	76, 422, 1064, 985, 176, 983, 76, 846, 849, 794,
	1192, 943, 450, 461, 456, 660, 794, 507, 801, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 1209, 522,
	524, 524, 524, 524, 524, 524, 524, 524, 532, 533,
	534, 535, 841, 1140, 180, 865, 866, 867, 887, 555,
	182, 659, 1215, 414, 415, 416, 794, 188, 184, 50,
	1139, 792, 790, 163, 840, 791, 797, 460, 459, 692,
	496, 798, 958, 957, 452, 477, 478, 479, 480, 481,
	482, 483, 476, 186, 461, 486, 190, 946, 404, 845,
	479, 480, 481, 482, 483, 476, 460, 459, 486, 1156,
	974, 176, 847, 176, 428, 664, 665, 1137, 955, 176,
	460, 459, 563, 461, 181, 1057, 176, 1025, 569, 1056,
	76, 76, 76, 76, 281, 76, 76, 461, 972, 287,
	1218, 441, 76, 525, 526, 527, 528, 529, 530, 531,
	940, 183, 189, 191, 192, 193, 194, 1164, 1202, 197,
	196, 460, 459, 931, 679, 681, 682, 830, 76, 680,
	406, 407, 429, 713, 715, 714, 1164, 441, 461, 642,
	429, 500, 501, 502, 503, 504, 505, 506, 1164, 1165,
	441, 429, 429, 429, 429, 429, 429, 429, 429, 430,
	1131, 1130, 973, 1048, 441, 429, 429, 978, 975, 968,
	969, 976, 971, 970, 886, 641, 885, 1118, 441, 1076,
	1075, 645, 632, 977, 1072, 1073, 1072, 1071, 176, 980,
	880, 441, 460, 459, 630, 176, 176, 176, 540, 441,
	23, 76, 666, 724, 441, 1180, 76, 625, 643, 461,
	577, 576, 21, 420, 566, 690, 247, 246, 249, 250,
	251, 252, 413, 298, 905, 248, 253, 906, 47, 687,
	399, 1179, 1066, 911, 1027, 23, 256, 911, 54, 912,
	724, 539, 511, 668, 993, 1114, 892, 50, 912, 889,
	23, 683, 726, 731, 734, 567, 685, 565, 540, 431,
	432, 433, 1159, 436, 437, 540, 1078, 74, 210, 1074,
	439, 288, 288, 288, 288, 288, 751, 880, 932, 880,
	691, 540, 50, 50, 716, 717, 555, 880, 771, 891,
	911, 774, 888, 565, 568, 288, 726, 50, 1144, 743,
	300, 662, 736, 212, 802, 822, 403, 1042, 76, 935,
	916, 917, 629, 440, 176, 176, 76, 775, 176, 818,
	813, 176, 812, 753, 754, 176, 756, 76, 76, 76,
	76, 76, 76, 76, 76, 752, 764, 65, 755, 825,
	773, 76, 76, 772, 1059, 176, 809, 810, 811, 777,
	50, 287, 287, 287, 287, 287, 1027, 787, 959, 919,
	76, 429, 639, 429, 176, 438, 287, 761, 759, 922,
	76, 429, 762, 760, 688, 287, 674, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 763, 823, 549, 550, 921, 758, 819, 820,
	545, 548, 549, 550, 546, 757, 547, 551, 727, 728,
	916, 917, 1226, 76, 735, 216, 217, 869, 1220, 989,
	300, 300, 300, 300, 687, 300, 300, 853, 742, 76,
	744, 745, 300, 1225, 863, 862, 950, 575, 857, 690,
	421, 858, 455, 443, 176, 942, 1201, 176, 176, 176,
	176, 176, 1145, 1200, 298, 444, 453, 1157, 464, 176,
	936, 1112, 176, 832, 638, 870, 176, 553, 213, 214,
	455, 176, 176, 861, 207, 76, 626, 908, 909, 1185,
	208, 860, 54, 76, 635, 1184, 1147, 907, 912, 457,
	1193, 1135, 657, 56, 58, 646, 647, 648, 649, 650,
	651, 652, 653, 564, 691, 288, 51, 1, 829, 654,
	655, 896, 974, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 962, 838, 486, 920, 929, 928, 1203,
	930, 300, 1053, 933, 176, 789, 572, 76, 781, 76,
	972, 397, 64, 176, 788, 1172, 176, 76, 1133, 796,
	944, 949, 799, 951, 952, 953, 1058, 429, 1198, 947,
	948, 937, 938, 941, 545, 548, 549, 550, 546, 864,
	547, 551, 582, 580, 803, 804, 805, 806, 581, 579,
	584, 956, 429, 583, 578, 287, 187, 294, 552, 571,
	814, 815, 816, 965, 458, 66, 982, 981, 834, 494,
	871, 872, 873, 979, 973, 859, 299, 1034, 663, 978,
	975, 968, 969, 976, 971, 970, 879, 447, 1183, 1146,
	895, 520, 737, 233, 678, 977, 686, 245, 242, 244,
	243, 967, 894, 997, 669, 996, 904, 1032, 300, 47,
	1028, 468, 751, 231, 223, 1002, 300, 1014, 751, 1033,
	286, 1015, 1031, 687, 1044, 1045, 1046, 300, 300, 300,
	300, 300, 300, 300, 300, 536, 544, 1022, 1038, 1036,
	542, 300, 300, 541, 918, 914, 285, 992, 76, 1109,
	1190, 176, 673, 1037, 1050, 1052, 1051, 25, 55, 76,
	670, 1067, 1068, 218, 19, 18, 17, 20, 16, 15,
	464, 1049, 14, 300, 29, 831, 221, 833, 13, 12,
	11, 10, 9, 8, 7, 852, 6, 5, 4, 209,
	22, 2, 0, 0, 288, 1080, 0, 0, 298, 0,
	0, 0, 76, 76, 0, 76, 784, 0, 1082, 0,
	0, 1085, 0, 718, 0, 0, 1088, 1087, 0, 0,
	0, 0, 1108, 732, 732, 0, 0, 0, 76, 740,
	0, 0, 0, 0, 0, 667, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 732, 1095, 0, 0,
	0, 999, 1000, 1124, 1125, 1126, 1113, 0, 0, 1121,
	0, 0, 0, 0, 1016, 1017, 1127, 1019, 1020, 0,
	0, 1129, 933, 0, 287, 300, 0, 0, 429, 0,
	0, 0, 0, 300, 0, 76, 76, 0, 0, 0,
	0, 686, 723, 725, 0, 0, 0, 1136, 1142, 1138,
	1143, 0, 0, 0, 0, 0, 0, 0, 741, 76,
	0, 76, 76, 0, 0, 1032, 0, 0, 1161, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 0,
	1031, 0, 1158, 0, 0, 0, 176, 300, 766, 300,
	0, 0, 1169, 1170, 76, 0, 1182, 300, 1171, 0,
	1177, 0, 1178, 1181, 0, 0, 0, 76, 176, 0,
	1032, 0, 47, 0, 76, 0, 0, 76, 300, 1194,
	176, 961, 1195, 0, 1090, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 445, 449, 0, 0, 0, 0,
	0, 1207, 0, 0, 0, 0, 988, 0, 1212, 0,
	751, 467, 0, 0, 0, 1216, 0, 0, 0, 0,
	0, 0, 784, 0, 0, 0, 0, 0, 0, 76,
	1223, 76, 76, 76, 176, 76, 1224, 0, 76, 0,
	1231, 0, 0, 0, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 76, 76, 0, 964, 0,
	0, 0, 0, 1092, 1093, 0, 1094, 0, 0, 1096,
	0, 1098, 0, 0, 0, 0, 0, 0, 927, 1150,
	1151, 0, 1152, 1153, 1154, 0, 0, 446, 0, 300,
	0, 0, 0, 0, 0, 76, 76, 0, 995, 877,
	0, 0, 0, 878, 0, 0, 0, 0, 76, 0,
	882, 883, 884, 289, 1132, 0, 0, 0, 0, 893,
	1018, 76, 174, 0, 899, 198, 900, 901, 902, 903,
	0, 0, 960, 300, 0, 300, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 222, 173, 174,
	174, 0, 0, 0, 0, 174, 0, 0, 300, 0,
	0, 0, 784, 0, 784, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 300, 292, 0, 0, 0,
	0, 401, 76, 0, 475, 474, 484, 485, 477, 478,
	479, 480, 481, 482, 483, 476, 0, 300, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
	0, 0, 732, 0, 0, 1035, 927, 0, 732, 0,
	995, 0, 1141, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 676, 677, 0, 300,
	0, 300, 1055, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 174, 0, 0, 0, 0, 0,
	174, 0, 0, 1001, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 409, 0,
	410, 784, 0, 0, 0, 0, 417, 1083, 510, 0,
	0, 729, 730, 419, 1086, 1106, 441, 300, 0, 0,
	0, 23, 24, 48, 26, 27, 0, 0, 964, 784,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 28, 599, 0, 0, 0,
	0, 0, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 37, 0, 486, 778, 50, 1123,
	0, 1123, 1123, 1123, 0, 1128, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 174, 560, 174, 0,
	1089, 0, 0, 0, 300, 300, 300, 1091, 0, 0,
	0, 0, 0, 0, 0, 538, 0, 0, 1100, 1101,
	1102, 0, 587, 1105, 562, 0, 0, 30, 31, 33,
	32, 35, 0, 0, 0, 0, 1115, 1116, 1117, 0,
	1120, 0, 0, 0, 0, 1162, 1163, 36, 43, 44,
	0, 600, 45, 46, 34, 0, 854, 855, 1055, 449,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 1123, 613, 614, 615, 616, 617, 618, 619, 0,
	620, 621, 622, 623, 624, 601, 602, 603, 604, 585,
	586, 1197, 0, 588, 0, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 605, 606, 607, 608, 609,
	610, 611, 612, 1155, 0, 174, 174, 0, 0, 174,
	732, 881, 174, 1214, 0, 0, 644, 0, 1166, 1167,
	1168, 0, 1219, 0, 0, 0, 898, 49, 1103, 441,
	0, 633, 634, 0, 0, 637, 174, 0, 640, 0,
	0, 0, 0, 0, 1186, 1187, 1188, 1189, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 656, 0, 644, 475, 474, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 0, 0, 486,
	0, 675, 0, 0, 1208, 0, 0, 0, 0, 1213,
	0, 0, 0, 0, 0, 0, 0, 1217, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	222, 222, 0, 0, 733, 733, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1235, 1236, 441,
	222, 222, 222, 222, 0, 174, 1107, 733, 174, 174,
	174, 174, 174, 0, 0, 0, 0, 0, 0, 0,
	765, 0, 0, 174, 0, 0, 0, 560, 0, 0,
	0, 748, 174, 174, 0, 475, 474, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 0, 0, 486,
	0, 0, 0, 0, 1024, 0, 0, 0, 0, 776,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	1040, 0, 0, 1041, 1104, 0, 1043, 0, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	0, 0, 486, 0, 0, 174, 0, 121, 0, 0,
	0, 0, 0, 0, 174, 0, 92, 174, 0, 0,
	0, 104, 0, 106, 0, 0, 134, 114, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 644,
	850, 0, 0, 851, 0, 75, 0, 0, 0, 0,
	0, 222, 0, 0, 86, 0, 475, 474, 484, 485,
	477, 478, 479, 480, 481, 482, 483, 476, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 1111, 0, 486, 0, 0, 0, 222, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 222, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 174, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 998, 0, 0, 135,
	150, 162, 0, 0, 156, 157, 158, 159, 118, 85,
	100, 133, 0, 0, 0, 0, 475, 474, 484, 485,
	477, 478, 479, 480, 481, 482, 483, 476, 0, 77,
	486, 105, 160, 128, 94, 151, 474, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 174, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 1206, 510, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 470, 733, 473, 0, 0, 0, 0, 733,
	487, 488, 489, 490, 491, 492, 493, 876, 471, 472,
	469, 475, 474, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 0, 0, 486, 0, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 0,
	0, 486, 0, 0, 0, 0, 0, 174, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 376,
	0, 348, 388, 326, 340, 396, 341, 342, 369, 312,
	356, 121, 338, 0, 329, 307, 335, 308, 327, 350,
	92, 353, 325, 378, 359, 104, 394, 106, 364, 0,
	134, 114, 0, 0, 352, 380, 354, 374, 347, 370,
	317, 363, 389, 339, 367, 390, 0, 0, 0, 75,
	0, 785, 786, 0, 0, 0, 0, 0, 86, 0,
	366, 385, 337, 368, 306, 365, 0, 310, 313, 395,
	383, 332, 333, 934, 0, 0, 0, 0, 0, 0,
	351, 355, 371, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 362, 0, 0, 0, 314, 311,
	0, 349, 0, 0, 0, 316, 0, 331, 372, 0,
	305, 375, 381, 346, 177, 384, 344, 343, 387, 126,
	0, 733, 137, 97, 96, 379, 328, 336, 88, 334,
	131, 122, 149, 361, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 309, 0, 135, 150, 162, 324, 382, 156, 157,
	158, 159, 118, 85, 100, 133, 320, 323, 318, 319,
	357, 358, 391, 392, 393, 373, 315, 0, 321, 322,
	0, 377, 360, 77, 0, 105, 160, 128, 94, 151,
	386, 376, 0, 348, 388, 326, 340, 396, 341, 342,
	369, 312, 356, 121, 338, 0, 329, 307, 335, 308,
	327, 350, 92, 353, 325, 378, 359, 104, 394, 106,
	364, 0, 134, 114, 0, 0, 352, 380, 354, 374,
	347, 370, 317, 363, 389, 339, 367, 390, 0, 0,
	0, 75, 0, 785, 786, 0, 0, 0, 0, 0,
	86, 0, 366, 385, 337, 368, 306, 365, 0, 310,
	313, 395, 383, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 351, 355, 371, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 362, 0, 0, 0,
	314, 311, 0, 349, 0, 0, 0, 316, 0, 331,
	372, 0, 305, 375, 381, 346, 177, 384, 344, 343,
	387, 126, 0, 0, 137, 97, 96, 379, 328, 336,
	88, 334, 131, 122, 149, 361, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 309, 0, 135, 150, 162, 324, 382,
	156, 157, 158, 159, 118, 85, 100, 133, 320, 323,
	318, 319, 357, 358, 391, 392, 393, 373, 315, 0,
	321, 322, 0, 377, 360, 77, 0, 105, 160, 128,
	94, 151, 386, 376, 0, 348, 388, 326, 340, 396,
	341, 342, 369, 312, 356, 121, 338, 0, 329, 307,
	335, 308, 327, 350, 92, 353, 325, 378, 359, 104,
	394, 106, 364, 0, 134, 114, 0, 0, 352, 380,
	354, 374, 347, 370, 317, 363, 389, 339, 367, 390,
	50, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 366, 385, 337, 368, 306, 365,
	0, 310, 313, 395, 383, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 351, 355, 371, 345, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 362, 0,
	0, 0, 314, 311, 0, 349, 0, 0, 0, 316,
	0, 331, 372, 0, 305, 375, 381, 346, 177, 384,
	344, 343, 387, 126, 0, 0, 137, 97, 96, 379,
	328, 336, 88, 334, 131, 122, 149, 361, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 309, 0, 135, 150, 162,
	324, 382, 156, 157, 158, 159, 118, 85, 100, 133,
	320, 323, 318, 319, 357, 358, 391, 392, 393, 373,
	315, 0, 321, 322, 0, 377, 360, 77, 0, 105,
	160, 128, 94, 151, 386, 376, 0, 348, 388, 326,
	340, 396, 341, 342, 369, 312, 356, 121, 338, 0,
	329, 307, 335, 308, 327, 350, 92, 353, 325, 378,
	359, 104, 394, 106, 364, 0, 134, 114, 0, 0,
	352, 380, 354, 374, 347, 370, 317, 363, 389, 339,
	367, 390, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 366, 385, 337, 368,
	306, 365, 0, 310, 313, 395, 383, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 351, 355, 371, 345,
	0, 0, 0, 0, 0, 0, 994, 0, 330, 0,
	362, 0, 0, 0, 314, 311, 0, 349, 0, 0,
	0, 316, 0, 331, 372, 0, 305, 375, 381, 346,
	177, 384, 344, 343, 387, 126, 0, 0, 137, 97,
	96, 379, 328, 336, 88, 334, 131, 122, 149, 361,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 309, 0, 135,
	150, 162, 324, 382, 156, 157, 158, 159, 118, 85,
	100, 133, 320, 323, 318, 319, 357, 358, 391, 392,
	393, 373, 315, 0, 321, 322, 0, 377, 360, 77,
	0, 105, 160, 128, 94, 151, 386, 376, 0, 348,
	388, 326, 340, 396, 341, 342, 369, 312, 356, 121,
	338, 0, 329, 307, 335, 308, 327, 350, 92, 353,
	325, 378, 359, 104, 394, 106, 364, 0, 134, 114,
	0, 0, 352, 380, 354, 374, 347, 370, 317, 363,
	389, 339, 367, 390, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 366, 385,
	337, 368, 306, 365, 0, 310, 313, 395, 383, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 351, 355,
	371, 345, 0, 0, 0, 0, 0, 0, 684, 0,
	330, 0, 362, 0, 0, 0, 314, 311, 0, 349,
	0, 0, 0, 316, 0, 331, 372, 0, 305, 375,
	381, 346, 177, 384, 344, 343, 387, 126, 0, 0,
	137, 97, 96, 379, 328, 336, 88, 334, 131, 122,
	149, 361, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 309,
	0, 135, 150, 162, 324, 382, 156, 157, 158, 159,
	118, 85, 100, 133, 320, 323, 318, 319, 357, 358,
	391, 392, 393, 373, 315, 0, 321, 322, 0, 377,
	360, 77, 0, 105, 160, 128, 94, 151, 386, 376,
	0, 348, 388, 326, 340, 396, 341, 342, 369, 312,
	356, 121, 338, 0, 329, 307, 335, 308, 327, 350,
	92, 353, 325, 378, 359, 104, 394, 106, 364, 0,
	134, 114, 0, 0, 352, 380, 354, 374, 347, 370,
	317, 363, 389, 339, 367, 390, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	366, 385, 337, 368, 306, 365, 0, 310, 313, 395,
	383, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	351, 355, 371, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 362, 0, 0, 0, 314, 311,
	0, 349, 0, 0, 0, 316, 0, 331, 372, 0,
	305, 375, 381, 346, 177, 384, 344, 343, 387, 126,
	0, 0, 137, 97, 96, 379, 328, 336, 88, 334,
	131, 122, 149, 361, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 309, 0, 135, 150, 162, 324, 382, 156, 157,
	158, 159, 118, 85, 100, 133, 320, 323, 318, 319,
	357, 358, 391, 392, 393, 373, 315, 0, 321, 322,
	0, 377, 360, 77, 0, 105, 160, 128, 94, 151,
	386, 376, 0, 348, 388, 326, 340, 396, 341, 342,
	369, 312, 356, 121, 338, 0, 329, 307, 335, 308,
	327, 350, 92, 353, 325, 378, 359, 104, 394, 106,
	364, 0, 134, 114, 0, 0, 352, 380, 354, 374,
	347, 370, 317, 363, 389, 339, 367, 390, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 366, 385, 337, 368, 306, 365, 0, 310,
	313, 395, 383, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 351, 355, 371, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 362, 0, 0, 0,
	314, 311, 0, 349, 0, 0, 0, 316, 0, 331,
	372, 0, 305, 375, 381, 346, 177, 384, 344, 343,
	387, 126, 0, 0, 137, 97, 96, 379, 328, 336,
	88, 334, 131, 122, 149, 361, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 309, 0, 135, 150, 162, 324, 382,
	156, 157, 158, 159, 118, 85, 100, 133, 320, 323,
	318, 319, 357, 358, 391, 392, 393, 373, 315, 0,
	321, 322, 0, 377, 360, 77, 0, 105, 160, 128,
	94, 151, 386, 376, 0, 348, 388, 326, 340, 396,
	341, 342, 369, 312, 356, 121, 338, 0, 329, 307,
	335, 308, 327, 350, 92, 353, 325, 378, 359, 104,
	394, 106, 364, 0, 134, 114, 0, 0, 352, 380,
	354, 374, 347, 370, 317, 363, 389, 339, 367, 390,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 366, 385, 337, 368, 306, 365,
	0, 310, 313, 395, 383, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 351, 355, 371, 345, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 362, 0,
	0, 0, 314, 311, 0, 349, 0, 0, 0, 316,
	0, 331, 372, 0, 305, 375, 381, 346, 177, 384,
	344, 343, 387, 126, 0, 0, 137, 97, 96, 379,
	328, 336, 88, 334, 131, 122, 149, 361, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 303, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 309, 0, 135, 150, 162,
	324, 382, 156, 157, 158, 159, 304, 302, 100, 133,
	320, 323, 318, 319, 357, 358, 391, 392, 393, 373,
	315, 0, 321, 322, 0, 377, 360, 77, 0, 105,
	160, 128, 94, 151, 386, 376, 0, 348, 388, 326,
	340, 396, 341, 342, 369, 312, 356, 121, 338, 0,
	329, 307, 335, 308, 327, 350, 92, 353, 325, 378,
	359, 104, 394, 106, 364, 0, 134, 114, 0, 0,
	352, 380, 354, 374, 347, 370, 317, 363, 389, 339,
	367, 390, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 366, 385, 337, 368,
	306, 365, 0, 310, 313, 395, 383, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 351, 355, 371, 345,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	362, 0, 0, 0, 314, 311, 0, 349, 0, 0,
	0, 316, 0, 331, 372, 0, 305, 375, 381, 346,
	177, 384, 344, 343, 387, 126, 0, 0, 137, 97,
	96, 379, 328, 336, 88, 334, 131, 122, 149, 361,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 309, 0, 135,
	150, 162, 324, 382, 156, 157, 158, 159, 118, 85,
	100, 133, 320, 323, 318, 319, 357, 358, 391, 392,
	393, 373, 315, 0, 321, 322, 0, 377, 360, 77,
	0, 105, 160, 128, 94, 151, 386, 376, 0, 348,
	388, 326, 340, 396, 341, 342, 369, 312, 356, 121,
	338, 0, 329, 307, 335, 308, 327, 350, 92, 353,
	325, 378, 359, 104, 394, 106, 364, 0, 134, 114,
	0, 0, 352, 380, 354, 374, 347, 370, 317, 363,
	389, 339, 367, 390, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 366, 385,
	337, 368, 306, 365, 0, 310, 313, 395, 383, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 351, 355,
	371, 345, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 362, 0, 0, 0, 314, 311, 0, 349,
	0, 0, 0, 316, 0, 331, 372, 0, 305, 375,
	381, 346, 177, 384, 344, 343, 387, 126, 0, 0,
	137, 97, 96, 379, 328, 336, 88, 334, 131, 122,
	149, 361, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 303, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 309,
	0, 135, 150, 162, 324, 382, 156, 157, 158, 159,
	304, 302, 297, 296, 320, 323, 318, 319, 357, 358,
	391, 392, 393, 373, 315, 0, 321, 322, 0, 377,
	360, 77, 0, 105, 160, 128, 94, 151, 121, 0,
	0, 720, 0, 229, 0, 0, 0, 92, 0, 226,
	0, 0, 104, 268, 106, 0, 0, 134, 114, 0,
	0, 0, 0, 259, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 227, 247, 246, 249,
	250, 251, 252, 0, 0, 86, 248, 253, 254, 255,
	0, 0, 224, 240, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 238, 220, 0, 0,
	0, 279, 0, 239, 0, 0, 235, 236, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 277, 0, 126, 0, 0, 137,
	97, 96, 0, 0, 0, 88, 0, 131, 122, 149,
	0, 123, 130, 107, 141, 127, 148, 178, 155, 139,
	154, 78, 138, 147, 87, 132, 80, 145, 136, 112,
	101, 102, 79, 0, 129, 91, 95, 90, 120, 142,
	143, 89, 161, 83, 153, 82, 84, 152, 119, 140,
	146, 113, 110, 81, 144, 111, 109, 103, 93, 98,
	124, 108, 125, 99, 116, 115, 117, 0, 0, 0,
	135, 150, 162, 0, 0, 156, 157, 158, 159, 118,
	85, 100, 133, 269, 278, 275, 276, 273, 274, 272,
	271, 270, 280, 261, 262, 263, 264, 266, 0, 265,
	77, 0, 105, 160, 128, 94, 151, 121, 0, 0,
	0, 0, 229, 0, 0, 0, 92, 0, 226, 0,
	0, 104, 268, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 441, 227, 247, 246, 249, 250,
	251, 252, 0, 0, 86, 248, 253, 254, 255, 0,
	0, 224, 240, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 238, 0, 0, 0, 0,
	279, 0, 239, 0, 0, 235, 236, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 277, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 0, 156, 157, 158, 159, 118, 85,
	100, 133, 269, 278, 275, 276, 273, 274, 272, 271,
	270, 280, 261, 262, 263, 264, 266, 0, 265, 77,
	0, 105, 160, 128, 94, 151, 121, 0, 0, 0,
	0, 229, 0, 0, 0, 92, 0, 226, 0, 0,
	104, 268, 106, 0, 0, 134, 114, 0, 0, 0,
	0, 259, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 227, 247, 246, 249, 250, 251,
	252, 0, 0, 86, 248, 253, 254, 255, 0, 0,
	224, 240, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 238, 220, 0, 0, 0, 279,
	0, 239, 0, 0, 235, 236, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 277, 0, 126, 0, 0, 137, 97, 96,
	0, 0, 0, 88, 0, 131, 122, 149, 0, 123,
	130, 107, 141, 127, 148, 178, 155, 139, 154, 78,
	138, 147, 87, 132, 80, 145, 136, 112, 101, 102,
	79, 0, 129, 91, 95, 90, 120, 142, 143, 89,
	161, 83, 153, 82, 84, 152, 119, 140, 146, 113,
	110, 81, 144, 111, 109, 103, 93, 98, 124, 108,
	125, 99, 116, 115, 117, 0, 0, 0, 135, 150,
	162, 0, 0, 156, 157, 158, 159, 118, 85, 100,
	133, 269, 278, 275, 276, 273, 274, 272, 271, 270,
	280, 261, 262, 263, 264, 266, 23, 265, 77, 0,
	105, 160, 128, 94, 151, 0, 0, 0, 121, 0,
	0, 0, 0, 229, 0, 0, 0, 92, 0, 226,
	0, 0, 104, 268, 106, 0, 0, 134, 114, 0,
	0, 0, 0, 259, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 227, 247, 246, 249,
	250, 251, 252, 0, 0, 86, 248, 253, 254, 255,
	0, 0, 224, 240, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 238, 0, 0, 0,
	0, 279, 0, 239, 0, 0, 235, 236, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 277, 0, 126, 0, 0, 137,
	97, 96, 0, 0, 0, 88, 0, 131, 122, 149,
	0, 123, 130, 107, 141, 127, 148, 178, 155, 139,
	154, 78, 138, 147, 87, 132, 80, 145, 136, 112,
	101, 102, 79, 0, 129, 91, 95, 90, 120, 142,
	143, 89, 161, 83, 153, 82, 84, 152, 119, 140,
	146, 113, 110, 81, 144, 111, 109, 103, 93, 98,
	124, 108, 125, 99, 116, 115, 117, 0, 0, 0,
	135, 150, 162, 0, 0, 156, 157, 158, 159, 118,
	85, 100, 133, 269, 278, 275, 276, 273, 274, 272,
	271, 270, 280, 261, 262, 263, 264, 266, 0, 265,
	77, 0, 105, 160, 128, 94, 151, 121, 0, 0,
	0, 0, 229, 0, 0, 0, 92, 0, 226, 0,
	0, 104, 268, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 227, 247, 246, 249, 250,
	251, 252, 0, 0, 86, 248, 253, 254, 255, 0,
	0, 224, 240, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 238, 0, 0, 0, 0,
	279, 0, 239, 0, 0, 235, 236, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 277, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 0, 156, 157, 158, 159, 118, 85,
	100, 133, 269, 278, 275, 276, 273, 274, 272, 271,
	270, 280, 261, 262, 263, 264, 266, 121, 265, 77,
	0, 105, 160, 128, 94, 151, 92, 0, 0, 0,
	0, 104, 268, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 227, 247, 246, 249, 250,
	251, 252, 0, 0, 86, 248, 253, 254, 255, 0,
	0, 0, 240, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 238, 0, 0, 0, 0,
	279, 0, 239, 0, 0, 235, 236, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 277, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 1234,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 0, 156, 157, 158, 159, 118, 85,
	100, 133, 269, 278, 275, 276, 273, 274, 272, 271,
	270, 280, 261, 262, 263, 264, 266, 121, 265, 77,
	0, 105, 160, 128, 94, 151, 92, 0, 0, 0,
	0, 104, 268, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 227, 247, 246, 249, 250,
	251, 252, 0, 0, 86, 248, 253, 254, 255, 0,
	0, 0, 240, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 238, 0, 0, 0, 0,
	279, 0, 239, 0, 0, 235, 236, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 277, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 0, 156, 157, 158, 159, 118, 85,
	100, 133, 269, 278, 275, 276, 273, 274, 272, 271,
	270, 280, 261, 262, 263, 264, 266, 0, 265, 77,
	0, 105, 160, 128, 94, 151, 121, 0, 0, 0,
	463, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	104, 0, 106, 0, 0, 134, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 465, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 460, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 126, 0, 0, 137, 97, 96,
	0, 0, 0, 88, 0, 131, 122, 149, 0, 123,
	130, 107, 141, 127, 148, 178, 155, 139, 154, 78,
	138, 147, 87, 132, 80, 145, 136, 112, 101, 102,
	79, 0, 129, 91, 95, 90, 120, 142, 143, 89,
	161, 83, 153, 82, 84, 152, 119, 140, 146, 113,
	110, 81, 144, 111, 109, 103, 93, 98, 124, 108,
	125, 99, 116, 115, 117, 0, 0, 0, 135, 150,
	162, 0, 121, 156, 157, 158, 159, 118, 85, 100,
	133, 92, 0, 0, 0, 0, 104, 0, 106, 0,
	0, 134, 114, 0, 0, 0, 0, 0, 77, 0,
	105, 160, 128, 94, 151, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 72, 0, 67, 0, 0, 0, 73,
	126, 0, 0, 137, 97, 96, 0, 0, 0, 88,
	0, 131, 122, 149, 0, 123, 130, 107, 141, 127,
	148, 69, 155, 139, 154, 78, 138, 147, 87, 132,
	80, 145, 136, 112, 101, 102, 79, 0, 129, 91,
	95, 90, 120, 142, 143, 89, 161, 83, 153, 82,
	84, 152, 119, 140, 146, 113, 110, 81, 144, 111,
	109, 103, 93, 98, 124, 108, 125, 99, 116, 115,
	117, 0, 0, 0, 135, 150, 162, 0, 0, 156,
	157, 158, 159, 118, 85, 100, 133, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 105, 160, 128, 94,
	151, 121, 0, 0, 0, 559, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 561, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 0, 156, 157,
	158, 159, 118, 85, 100, 133, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 77, 0, 105, 160, 128, 94, 151,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 0, 156, 157,
	158, 159, 118, 85, 100, 133, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 77, 0, 105, 160, 128, 94, 151,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 121, 156, 157,
	158, 159, 118, 85, 100, 133, 92, 0, 0, 0,
	0, 104, 0, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 0, 77, 0, 105, 160, 128, 94, 151,
	0, 0, 0, 0, 0, 75, 0, 0, 671, 0,
	0, 672, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 121, 156, 157, 158, 159, 118, 85,
	100, 133, 92, 0, 574, 0, 0, 104, 0, 106,
	0, 0, 134, 114, 0, 0, 0, 0, 0, 77,
	0, 105, 160, 128, 94, 151, 0, 0, 0, 0,
	0, 75, 0, 573, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 126, 0, 0, 137, 97, 96, 0, 0, 0,
	88, 0, 131, 122, 149, 0, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 0, 0, 135, 150, 162, 0, 0,
	156, 157, 158, 159, 118, 85, 100, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 105, 160, 128,
	94, 151, 121, 0, 0, 0, 559, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 104, 0, 106, 0,
	0, 134, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 561, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	126, 0, 0, 137, 97, 96, 0, 0, 0, 88,
	0, 131, 122, 149, 0, 557, 130, 107, 141, 127,
	148, 178, 155, 139, 154, 78, 138, 147, 87, 132,
	80, 145, 136, 112, 101, 102, 79, 0, 129, 91,
	95, 90, 120, 142, 143, 89, 161, 83, 153, 82,
	84, 152, 119, 140, 146, 113, 110, 81, 144, 111,
	109, 103, 93, 98, 124, 108, 125, 99, 116, 115,
	117, 0, 0, 0, 135, 150, 162, 0, 121, 156,
	157, 158, 159, 118, 85, 100, 133, 92, 0, 0,
	0, 0, 104, 0, 106, 0, 0, 134, 114, 0,
	0, 0, 0, 0, 77, 0, 105, 160, 128, 94,
	151, 0, 0, 50, 0, 0, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 126, 0, 0, 137,
	97, 96, 0, 0, 0, 88, 0, 131, 122, 149,
	0, 123, 130, 107, 141, 127, 148, 178, 155, 139,
	154, 78, 138, 147, 87, 132, 80, 145, 136, 112,
	101, 102, 79, 0, 129, 91, 95, 90, 120, 142,
	143, 89, 161, 83, 153, 82, 84, 152, 119, 140,
	146, 113, 110, 81, 144, 111, 109, 103, 93, 98,
	124, 108, 125, 99, 116, 115, 117, 0, 0, 0,
	135, 150, 162, 0, 121, 156, 157, 158, 159, 118,
	85, 100, 133, 92, 0, 0, 0, 0, 104, 0,
	106, 0, 0, 134, 114, 0, 0, 0, 0, 0,
	77, 0, 105, 160, 128, 94, 151, 0, 0, 0,
	0, 0, 175, 0, 561, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 126, 0, 0, 137, 97, 96, 0, 0,
	0, 88, 0, 131, 122, 149, 0, 123, 130, 107,
	141, 127, 148, 178, 155, 139, 154, 78, 138, 147,
	87, 132, 80, 145, 136, 112, 101, 102, 79, 0,
	129, 91, 95, 90, 120, 142, 143, 89, 161, 83,
	153, 82, 84, 152, 119, 140, 146, 113, 110, 81,
	144, 111, 109, 103, 93, 98, 124, 108, 125, 99,
	116, 115, 117, 0, 0, 0, 135, 150, 162, 0,
	121, 156, 157, 158, 159, 118, 85, 100, 133, 92,
	0, 0, 0, 0, 104, 0, 106, 0, 0, 134,
	114, 0, 0, 0, 0, 0, 77, 0, 105, 160,
	128, 94, 151, 0, 0, 0, 0, 0, 75, 0,
	465, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 126, 0,
	0, 137, 97, 96, 0, 0, 0, 88, 0, 131,
	122, 149, 0, 123, 130, 107, 141, 127, 148, 178,
	155, 139, 154, 78, 138, 147, 87, 132, 80, 145,
	136, 112, 101, 102, 79, 0, 129, 91, 95, 90,
	120, 142, 143, 89, 161, 83, 153, 82, 84, 152,
	119, 140, 146, 113, 110, 81, 144, 111, 109, 103,
	93, 98, 124, 108, 125, 99, 116, 115, 117, 0,
	0, 0, 135, 150, 162, 0, 0, 156, 157, 158,
	159, 118, 85, 100, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 77, 0, 105, 160, 128, 94, 151, 537,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	290, 0, 0, 135, 150, 162, 0, 121, 156, 157,
	158, 159, 118, 85, 100, 133, 92, 0, 0, 0,
	0, 104, 0, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 0, 77, 0, 105, 160, 128, 94, 151,
	0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 121, 156, 157, 158, 159, 118, 85,
	100, 133, 92, 0, 0, 0, 0, 104, 0, 106,
	0, 0, 134, 114, 0, 0, 0, 0, 0, 77,
	0, 105, 160, 128, 94, 151, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 177, 0, 0, 0,
	0, 126, 0, 0, 137, 97, 96, 0, 0, 0,
	88, 0, 131, 122, 149, 0, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 0, 0, 135, 150, 162, 0, 121,
	156, 157, 158, 159, 118, 85, 100, 133, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 77, 0, 105, 160, 128,
	94, 151, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 0,
	0, 135, 150, 162, 0, 121, 156, 157, 158, 159,
	118, 85, 100, 133, 92, 0, 0, 0, 0, 104,
	0, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	0, 77, 0, 105, 160, 128, 94, 151, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 121, 156, 157, 158, 159, 118, 85, 100, 133,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 77, 0, 105,
	160, 128, 94, 151, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 0, 156, 157,
	158, 159, 118, 85, 100, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 105, 160, 128, 94, 151,
}
var yyPact = [...]int{

	1495, -1000, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 737, 758, -1000, -1000, -1000, -1000, -1000, -1000, 554,
	6364, 20, 40, -21, 8735, 39, 178, 9293, -1000, -50,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 514, -1000, -1000,
	-1000, -1000, -1000, 727, 734, 567, 718, 646, -1000, 5098,
	14, 7780, 8549, 4441, -1000, 444, 34, 9293, -143, 8921,
	12, 12, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36, 9293, -1000, 9293, 9, 436, 9,
	9, 9, 9293, -1000, 68, -1000, -1000, -1000, -1000, 9293,
	427, 680, 27, 2817, 2817, 2817, 2817, -44, 2817, 2817,
	584, -1000, -1000, -1000, -1000, 2817, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 365, 694, 5539, 5539, 737,
	-1000, 514, -1000, -1000, -1000, 691, -1000, -1000, 190, 748,
	-1000, 6178, 65, -1000, 5539, 2120, 500, -1000, -1000, 500,
	-1000, -1000, 50, -1000, -1000, 5959, 5959, 5959, 5959, 5959,
	5959, 5959, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 500, -1000, 5320, 500,
	500, 500, 500, 500, 500, 500, 500, 5539, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 8363, 481, 793, -1000, -1000, -1000, 715, 7003, 7594,
	9293, 473, -1000, 510, 3977, -1000, -1000, -1000, 114, 7375,
	-1000, -1000, -1000, 677, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 426, -1000, 1496,
	421, 2817, 26, 530, 408, 154, 396, 9293, 9293, 2817,
	22, 9293, 711, 581, 9293, 389, 353, -1000, 4209, -1000,
	2817, 2817, 2817, 2817, 2817, 2817, 2817, 2817, -1000, -1000,
	-1000, -1000, -1000, -1000, 2817, 2817, -1000, -1000, 9293, -1000,
	-1000, -1000, -1000, 753, 93, 237, 61, 517, -1000, 321,
	727, 365, 646, 7189, 604, -1000, -1000, 9293, -1000, 5539,
	5539, 327, -1000, 8152, -1000, -1000, 3281, 101, 5959, 246,
	128, 5959, 5959, 5959, 5959, 5959, 5959, 5959, 5959, 5959,
	5959, 5959, 5959, 5959, 5959, 5959, 347, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 348, -1000, 514, 429, 429,
	73, 73, 73, 73, 73, 73, 1899, 4660, 365, 419,
	138, 5320, 5098, 5098, 5539, 5539, 9107, 9107, 5098, 719,
	124, 138, 8921, -1000, 365, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5098, 5098, 5098, 5098, -9, 9293, -1000, 9107,
	7780, 7780, 7780, 7780, 7780, -1000, 634, 626, -1000, 597,
	596, 621, 9293, -1000, 414, 7003, 90, 500, -1000, 7966,
	-1000, -1000, -9, 509, 7780, 9293, -1000, -1000, 3977, 510,
	5539, 44, -1000, -1000, -1000, -1000, 2585, 176, 239, -115,
	-1000, -1000, -1000, 521, -1000, 521, 521, 521, 521, -85,
	-85, -85, -85, -1000, -1000, -1000, -1000, -1000, 539, 537,
	-1000, 521, 521, 521, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	536, 536, 536, 522, 522, 557, -1000, 9293, -162, 341,
	2817, 710, 2817, -1000, 106, -1000, 9293, -1000, -1000, 9293,
	2817, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 660, 5539,
	5539, 3745, 5539, -1000, -1000, -1000, 694, -1000, 719, 732,
	-1000, 672, 671, 5098, -1000, -1000, 101, 166, -1000, -1000,
	218, -1000, -1000, -1000, -1000, 60, 500, -1000, 2157, -1000,
	-1000, -1000, -1000, 246, 5959, 5959, 5959, 1293, 2157, 2136,
	690, 2044, 73, 233, 233, 77, 77, 77, 77, 77,
	220, 220, -1000, -1000, -1000, 365, -1000, -1000, -1000, 365,
	5098, 495, -1000, -1000, 5539, -1000, 365, 406, 406, 392,
	266, 508, -1000, 59, 505, 406, 5098, 127, -1000, 5539,
	365, -1000, 406, 365, 406, 406, 464, 500, -1000, 506,
	-1000, 111, 793, 529, 578, 629, -1000, -1000, -1000, -1000,
	625, -1000, 598, -1000, -1000, -1000, -1000, -1000, 33, 32,
	30, 8921, -1000, 746, 7780, 497, -1000, -1000, 138, -1000,
	337, 494, 2353, -1000, -1000, -1000, -1000, -1000, -1000, 526,
	702, 129, 136, 324, -1000, -1000, 686, -1000, 184, -120,
	-1000, -1000, 268, -85, -85, -1000, -1000, 44, 676, 44,
	44, 44, 290, 290, -1000, -1000, -1000, -1000, 254, -1000,
	-1000, -1000, 253, -1000, 577, 8921, 2817, -1000, 3513, -1000,
	-1000, -1000, -1000, -1000, -1000, 754, 312, 123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -10,
	-1000, 2817, -1000, 651, 138, 138, 58, -1000, -1000, 9293,
	-1000, -1000, -1000, -1000, 503, -1000, -1000, -1000, 3049, 5098,
	-1000, 1293, 2157, 2025, -1000, 5959, 5959, -1000, -1000, 406,
	5098, 138, -1000, -1000, -1000, 28, 347, 28, 5959, 5959,
	3745, 5959, 5959, -153, 493, 119, -1000, 5539, 280, -1000,
	-1000, -1000, -1000, -1000, 575, 9107, 500, -1000, 6793, 8921,
	737, 9107, 5539, 5539, -1000, -1000, 5539, 524, -1000, 5539,
	-1000, -1000, -1000, 500, 500, 500, 379, -1000, 737, 497,
	-1000, -1000, 2585, -1000, 2585, 8921, -1000, 303, 299, -1000,
	-1000, 563, 29, -1000, -1000, -1000, 447, 44, 44, -1000,
	125, -1000, -1000, -1000, 402, -1000, 400, 485, 395, 9293,
	-1000, -1000, 482, -1000, 100, -1000, -1000, 8921, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8921, 9293, -1000, -1000, -1000, -1000, -1000, 8921, -1000, -1000,
	3513, -1000, 746, 7780, -1000, -1000, 365, -1000, 5959, 2157,
	2157, -1000, -1000, 365, 521, 521, -1000, 521, 522, -1000,
	521, -68, 521, -69, 365, 365, 1664, 1875, -1000, 1441,
	1807, 500, -150, -1000, 138, 5539, -1000, 704, 453, 461,
	-1000, -1000, 4879, 365, 393, 57, 379, 727, -1000, 138,
	138, 138, 8921, 138, 8921, 8921, 8921, 6583, 8921, 727,
	-1000, 2353, -1000, 376, -1000, 521, -1000, -1000, -108, 752,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -85, 289, -85, 241, -1000, 224, 2817, 3513, 2585,
	-1000, 515, -1000, -1000, -1000, -1000, 696, 743, 474, -1000,
	2157, -1000, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5959, 5959, -1000, 5959, 5959, 5959, 365,
	281, 138, 699, -1000, 500, -1000, -1000, 499, 8921, 8921,
	-1000, -1000, 364, -1000, 352, 352, 352, 90, -1000, -1000,
	557, 8921, -1000, 110, -1000, -132, 44, -1000, 44, 446,
	420, -1000, -1000, -1000, 8921, 500, 741, 733, -1000, -1000,
	1764, 1764, 1764, 1764, 17, -1000, -1000, 751, -1000, 500,
	-1000, 514, 47, -1000, 8921, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 168, 695, -1000, 688, -1000, -1000, -1000, -1000,
	-1000, 333, -16, -1000, 5539, 5539, -1000, -1000, -1000, -1000,
	365, 37, -165, 9107, 461, 365, 8921, -1000, -1000, 234,
	-1000, -1000, 530, 316, -1000, 8921, 138, 456, -1000, 650,
	-156, -168, 449, -1000, -1000, -1000, -162, -1000, -16, 670,
	-1000, 644, -1000, -1000, -1000, -19, -163, -24, -166, 500,
	-169, 5749, -1000, 1764, 365, -1000, -1000,
}
var yyPgo = [...]int{

	0, 991, 10, 482, 990, 989, 988, 987, 986, 984,
	983, 982, 981, 980, 979, 978, 974, 972, 969, 968,
	967, 966, 965, 964, 101, 963, 958, 957, 52, 952,
	60, 950, 949, 31, 165, 35, 34, 976, 947, 22,
	64, 51, 946, 40, 945, 944, 61, 943, 54, 940,
	936, 1313, 935, 920, 14, 24, 914, 913, 911, 906,
	55, 175, 904, 900, 899, 898, 897, 894, 41, 5,
	9, 15, 17, 893, 80, 6, 892, 43, 891, 890,
	889, 888, 42, 887, 45, 878, 21, 44, 877, 8,
	47, 29, 27, 4, 63, 876, 26, 50, 875, 303,
	869, 123, 328, 868, 867, 866, 865, 32, 176, 506,
	429, 57, 864, 12, 859, 1287, 59, 53, 18, 858,
	28, 344, 30, 857, 856, 33, 854, 853, 850, 849,
	848, 843, 842, 258, 833, 828, 826, 25, 13, 822,
	820, 46, 38, 819, 818, 815, 37, 49, 814, 39,
	812, 811, 808, 23, 20, 805, 16, 802, 799, 7,
	794, 19, 793, 3, 778, 2, 36, 777, 776, 0,
	583, 773, 764, 102,
}
var yyR1 = [...]int{

	0, 167, 168, 168, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 171,
	171, 46, 46, 90, 90, 10, 10, 123, 123, 11,
	11, 11, 11, 11, 11, 11, 165, 165, 164, 163,
	163, 162, 162, 161, 16, 150, 151, 151, 151, 147,
	126, 126, 126, 126, 129, 129, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 128, 128, 128, 130, 130,
	130, 130, 130, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 132, 132,
	132, 132, 132, 132, 132, 132, 146, 146, 133, 133,
	141, 141, 142, 142, 142, 139, 139, 140, 140, 143,
	143, 143, 134, 134, 134, 134, 134, 134, 134, 136,
	136, 144, 144, 137, 137, 137, 138, 138, 145, 145,
	145, 145, 145, 135, 135, 148, 155, 155, 155, 155,
	155, 149, 149, 157, 157, 156, 152, 152, 152, 153,
	153, 153, 154, 154, 154, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 160, 158, 158, 159, 159,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 124, 124, 124, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 172, 24, 25, 25,
	26, 26, 26, 30, 30, 30, 28, 28, 29, 29,
	35, 35, 34, 34, 36, 36, 36, 36, 112, 112,
	112, 111, 111, 38, 38, 39, 39, 40, 40, 41,
	41, 41, 53, 53, 89, 89, 91, 91, 42, 42,
	42, 42, 43, 43, 44, 44, 45, 45, 119, 119,
	118, 118, 118, 117, 117, 47, 47, 47, 49, 48,
	48, 48, 48, 50, 50, 52, 52, 51, 51, 54,
	54, 54, 54, 55, 55, 37, 37, 37, 37, 37,
	37, 37, 100, 100, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 67, 67, 67, 67,
	67, 67, 58, 58, 58, 58, 58, 58, 58, 33,
	33, 68, 68, 68, 74, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 65, 65,
	65, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 173, 173, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 122, 122, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	78, 78, 32, 32, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 88, 88,
	88, 88, 92, 92, 70, 70, 72, 72, 71, 73,
	93, 93, 96, 94, 94, 97, 97, 95, 95, 95,
	114, 114, 114, 98, 98, 101, 101, 102, 102, 99,
	99, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 104, 104, 104, 105, 105, 106, 106, 106, 113,
	113, 109, 109, 110, 110, 115, 115, 116, 116, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 169,
	170, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 3, 4, 2, 4, 2, 2, 2,
	2, 3, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -167, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 139, 116, 132, 49, 151, 152,
	154, 155, 25, 133, 134, 137, 138, -169, 8, 222,
	53, -168, 237, -82, 15, -26, 5, -24, -172, -24,
	-24, -24, -24, -24, -150, 53, -106, 121, 70, 147,
	214, 118, 119, 125, -109, 56, -108, 230, 151, 162,
	156, 183, 175, 173, 176, 210, 65, 154, 135, 171,
	167, 165, 27, 188, 235, 166, 131, 130, 189, 193,
	211, 160, 161, 187, 32, 232, 34, 143, 191, 186,
	182, 185, 159, 181, 38, 195, 194, 196, 209, 178,
	168, 18, 138, 141, 190, 192, 126, 145, 234, 164,
	142, 137, 155, 212, 37, 200, 158, 129, 152, 149,
	179, 144, 169, 170, 184, 157, 180, 153, 146, 139,
	201, 236, 177, 174, 150, 148, 205, 206, 207, 208,
	233, 172, 202, -99, 121, 123, 119, 119, 120, 121,
	214, 118, 119, -51, -115, 56, -108, 121, 147, 119,
	106, 176, 112, 203, 120, 32, 145, -124, 119, 204,
	148, 205, 206, 207, 208, 56, 212, 211, -115, 153,
	-120, -120, -120, -120, -120, -2, -86, 17, 16, -5,
	-3, -169, 6, 20, 21, -30, 39, 40, -25, -36,
	97, -37, -115, -56, 72, -61, 29, 56, -108, 23,
	-60, -57, -75, -73, -74, 106, 107, 95, 96, 103,
	73, 108, -65, -63, -64, -66, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -109, -71, -169, 43,
	44, 223, 224, 225, 226, 229, 227, 75, 33, 213,
	221, 220, 219, 217, 218, 215, 216, 124, 214, 101,
	222, -99, -39, -40, -41, -42, -53, -74, -169, -51,
	11, -46, -51, -94, -123, -97, 212, 211, -110, -95,
	-109, -107, 210, 176, 209, 117, 71, 22, 24, 198,
	74, 106, 16, 75, 105, 223, 112, 47, 215, 216,
	213, 225, 226, 214, 203, 29, 10, 25, 133, 21,
	99, 114, 78, 79, 136, 23, 134, 69, 19, 50,
	11, 13, 14, 124, 123, 90, 120, 45, 8, 108,
	26, 87, 41, 28, 43, 88, 17, 217, 218, 31,
	229, 140, 101, 48, 35, 72, 67, 51, 70, 15,
	46, 89, 115, 222, 44, 118, 6, 228, 30, 132,
	42, 119, 204, 77, 122, 68, 5, 125, 9, 49,
	52, 219, 220, 221, 33, 76, 12, -151, -147, 56,
	120, -51, 222, -109, -102, 124, -102, -102, 119, -51,
	-51, -101, 124, 56, -101, -101, -101, -51, 109, -51,
	56, 30, 214, 56, 145, 119, 146, 121, -121, -169,
	-110, -121, -121, -121, 149, 150, -121, -121, 51, -121,
	-170, 55, -87, 19, 31, -37, -115, -83, -84, -37,
	-82, -2, -24, 35, -28, 21, 64, 11, -112, 71,
	70, 87, -111, 22, -109, 58, 109, -37, -58, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -100, -169, -74, -169, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -169, -2, -69,
	-37, -169, -169, -169, -169, -169, -169, -169, -169, -169,
	-78, -37, -169, -173, -169, -173, -173, -173, -173, -173,
	-173, -173, -169, -169, -169, -169, -52, 26, -51, 30,
	54, -47, -49, -48, -50, 41, 45, 47, 42, 43,
	44, 48, -119, 22, -39, -169, -118, 141, -117, 22,
	-115, 58, -51, -46, -171, 54, 11, 52, 54, -94,
	80, -114, -109, 58, 29, 30, 55, 54, -126, -129,
	-131, -130, -132, -127, -128, 173, 174, 106, 177, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 30,
	135, 169, 170, 171, 172, 189, 190, 191, 192, 193,
	194, 195, 196, 156, 157, 158, 159, 160, 161, 162,
	164, 165, 166, 167, 168, 56, -121, 121, -165, 52,
	56, 72, 56, -51, -51, -121, 122, -51, 23, 51,
	-51, 56, 56, -116, -115, -107, -121, -121, -121, -121,
	-121, -121, -121, -121, -121, -121, -51, 9, 90, 54,
	18, 109, 54, -85, 24, 25, -86, -170, -30, -62,
	-109, 59, 62, -29, 42, -51, -37, -37, -67, 67,
	72, 68, 69, -111, 97, -116, -110, -107, -61, -68,
	-71, -74, 63, 90, 88, 89, 74, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -122, 56, 58, 56, -60, -60, -109, -35,
	21, -34, -36, -170, 54, -170, -2, -34, -34, -37,
	-37, -75, -109, -115, -75, -34, -28, -76, -77, 76,
	-109, -170, -34, -35, -34, -34, -90, 141, -51, -93,
	-96, -75, -40, -41, -41, -40, -41, 41, 41, 41,
	46, 41, 46, 41, -48, -115, -170, -54, 49, 123,
	50, -169, -117, -90, 52, -39, -51, -97, -37, -138,
	105, -152, -153, -154, -110, 58, 59, -147, -148, -155,
	126, 129, 125, -149, 120, 28, -143, 67, 72, -139,
	201, -133, 53, -133, -133, -133, -133, -137, 176, -137,
	-137, -137, 53, 53, -133, -133, -133, -141, 53, -141,
	-141, -142, 53, -142, -113, 52, -51, -163, 233, -164,
	56, -121, 23, -121, -103, 117, 114, 115, -160, 113,
	198, 176, 65, 29, 15, 223, 141, 236, 56, 142,
	-51, -51, -121, 37, -37, -37, -116, -84, -87, -98,
	19, 11, 33, 33, -34, 67, 68, 69, 109, -169,
	-68, -61, -61, -61, -33, 136, 71, -170, -170, -34,
	54, -37, -170, -170, -170, 54, 52, 22, 54, 11,
	109, 54, 11, -170, -34, -79, -77, 78, -37, -170,
	-170, -170, -170, -170, -59, 30, 33, -2, -169, -169,
	-55, 54, 12, 80, -44, -43, 51, 52, -45, 51,
	-43, 41, 41, 120, 120, 120, -91, -109, -55, -39,
	-55, 56, 54, -154, 80, 53, 28, -149, -149, 56,
	56, -134, 29, 67, -140, 202, 59, -137, -137, -138,
	30, -138, -138, -138, -146, 58, -146, 59, 59, 51,
	-109, -121, -162, -161, -110, -120, -166, 147, 127, 128,
	131, 130, 56, 120, 28, 126, 129, 141, 125, -166,
	147, -104, -105, 122, 22, 120, 28, 141, -121, 38,
	109, -51, -38, 11, 97, -110, -35, -33, 71, -61,
	-61, -170, -36, -125, 106, 173, 135, 171, 167, 187,
	178, 200, 169, 201, -122, -125, -61, -61, -110, -61,
	-61, 230, -82, 79, -37, 77, -92, 51, -93, -70,
	-72, -71, -169, -2, -88, -109, -91, -82, -96, -37,
	-37, -37, 53, -37, -169, -169, -169, -170, 54, -82,
	-55, -153, -154, -157, -156, -109, 56, 56, -136, 51,
	58, 59, 60, 67, 213, 66, 55, -138, -138, 56,
	106, 55, 54, 55, 54, 55, 54, -51, 54, 80,
	-120, -109, -120, -109, -51, -120, -109, -55, -39, -170,
	-61, -170, -133, -133, -133, -142, -133, 161, -133, 161,
	-170, -170, -170, 54, 19, -170, 54, 19, -169, -32,
	228, -37, 27, -92, 54, -170, -170, -170, 54, 109,
	-170, -86, -89, -109, -89, -89, -89, -118, -109, -86,
	55, 54, -133, -144, 198, 9, -137, 58, -137, 59,
	59, -121, -161, -154, 53, 26, -80, 13, -137, 56,
	-61, -61, -61, -61, -61, -170, 58, 28, -72, 33,
	-2, -169, -109, -109, 54, 55, -170, -170, -170, -54,
	-113, -156, -145, 126, 28, 125, 213, -138, -138, 55,
	55, -89, -169, -81, 14, 16, -170, -170, -170, -170,
	-31, 90, 233, 9, -70, -2, 109, -109, -135, 65,
	28, 28, 55, -158, -159, 141, -37, -69, -170, 231,
	48, 234, -93, -170, -109, 58, -165, -170, 54, -109,
	38, 232, 235, -163, -159, 33, 38, 143, 233, 144,
	234, -169, 235, -61, 140, -170, -170,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 477, 0, 246, 246, 246, 246, 246, 246, 0,
	546, 529, 0, 0, 0, 0, 232, 236, 237, 0,
	239, 240, 741, 741, 741, 741, 741, 0, 33, 34,
	739, 1, 3, 485, 0, 0, 250, 253, 248, 0,
	529, 0, 0, 0, 49, 0, 0, 729, 0, 730,
	527, 527, 527, 547, 548, 551, 552, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 731, 732, 733, 734, 735,
	736, 737, 738, 0, 0, 530, 0, 525, 0, 525,
	525, 525, 0, 207, 317, 555, 556, 729, 730, 0,
	0, 0, 0, 742, 742, 742, 742, 0, 742, 742,
	225, 227, 228, 229, 230, 742, 233, 234, 235, 238,
	241, 242, 243, 244, 245, 27, 489, 0, 0, 477,
	29, 0, 246, 251, 252, 256, 254, 255, 247, 0,
	264, 268, 0, 325, 0, 330, 332, -2, -2, 0,
	367, 368, 369, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 394, 395, 396, 397, 462, 463, 464, 465,
	466, 467, 468, 469, 334, 335, 459, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 0, 424,
	424, 424, 424, 424, 424, 424, 424, 0, 0, 0,
	0, 0, 0, 275, 277, 278, 279, 298, 0, 300,
	0, 0, 41, 45, 0, 513, -2, -2, 0, 0,
	553, 554, -2, 658, -2, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 0, 66, 0,
	0, 742, 0, 56, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 208,
	742, 742, 742, 742, 742, 742, 742, 742, 217, 743,
	744, 218, 219, 220, 742, 742, 222, 223, 0, 231,
	28, 740, 22, 0, 0, 486, 0, 478, 479, 482,
	485, 27, 253, 0, 258, 257, 249, 0, 265, 0,
	0, 0, 269, 0, 271, 272, 0, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 354,
	355, 356, 357, 358, 331, 0, 345, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 260, 27, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 451, 0, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 260, 0, 0, 43, 0, 316, 0,
	0, 0, 0, 0, 0, 305, 0, 0, 308, 0,
	0, 0, 0, 299, 0, 0, 319, 697, 301, 0,
	303, 304, -2, 0, 0, 0, 39, 40, 0, 46,
	0, 146, 520, 521, 522, 518, 166, 0, 129, 125,
	71, 72, 73, 118, 75, 118, 118, 118, 118, 143,
	143, 143, 143, 101, 102, 103, 104, 105, 0, 0,
	88, 118, 118, 118, 92, 108, 109, 110, 111, 112,
	113, 114, 115, 76, 77, 78, 79, 80, 81, 82,
	120, 120, 120, 122, 122, 549, 51, 0, 59, 0,
	742, 0, 742, 64, 0, 182, 0, 201, 526, 0,
	742, 204, 205, 318, 557, 558, 209, 210, 211, 212,
	213, 214, 215, 216, 221, 224, 226, 490, 0, 0,
	0, 0, 0, 481, 483, 484, 489, 30, 256, 0,
	470, 0, 0, 0, 259, 25, 326, 327, 329, 346,
	0, 348, 350, 270, 266, 0, 460, -2, 336, 337,
	361, 362, 363, 0, 0, 0, 0, 359, 341, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 386, 435, 436, 0, 384, 385, 393, 0,
	0, 261, 262, 364, 0, 508, 27, 0, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 457, 454, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 315, 323,
	510, 0, 276, 294, 296, 0, 291, 306, 307, 309,
	0, 311, 0, 313, 314, 280, 281, 282, 0, 0,
	0, 0, 302, 323, 0, 323, 42, 514, 515, 516,
	0, 65, 167, 169, 172, 173, 174, 67, 68, 0,
	0, 0, 0, 0, 161, 162, 132, 130, 0, 127,
	126, 74, 0, 143, 143, 95, 96, 146, 0, 146,
	146, 146, 0, 0, 89, 90, 91, 83, 0, 84,
	85, 86, 0, 87, 0, 0, 742, 53, 0, 57,
	58, 54, 528, 55, 741, 0, 0, 541, 183, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 0,
	200, 742, 203, 0, 487, 488, 0, 480, 23, 0,
	523, 524, 471, 472, 273, 347, 349, 351, 0, 260,
	338, 359, 342, 0, 339, 0, 0, 333, 398, 0,
	0, 366, -2, 401, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 455, 0, 0, 415,
	426, 427, 428, 429, 502, 0, 0, -2, 0, 0,
	477, 0, 0, 0, 288, 295, 0, 0, 289, 0,
	290, 310, 312, 0, 0, 0, 0, 286, 477, 323,
	38, 147, 0, 170, 0, 0, 156, 0, 0, 159,
	160, 139, 0, 131, 70, 128, 0, 146, 146, 97,
	0, 98, 99, 100, 0, 116, 0, 0, 0, 0,
	550, 52, 60, 61, 0, 175, 741, 0, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 741,
	0, 0, 741, 542, 543, 544, 545, 0, 202, 491,
	0, 24, 323, 0, 267, 461, 0, 340, 0, 360,
	343, 399, 263, 0, 118, 118, 440, 118, 122, 443,
	118, 445, 118, 448, 0, 0, 0, 0, 460, 0,
	0, 0, 452, 414, 458, 0, 31, 0, 502, 492,
	504, 506, 0, 27, 0, 498, 0, 485, 511, 324,
	512, 292, 0, 297, 0, 0, 0, 300, 0, 485,
	37, 168, 171, 0, 163, 118, 157, 158, 141, 0,
	133, 134, 135, 136, 137, 138, 119, 93, 94, 144,
	145, 143, 0, 143, 0, 123, 0, 742, 0, 0,
	176, 0, 177, 179, 180, 181, 0, 473, 274, 400,
	344, 403, 437, 143, 441, 442, 444, 446, 447, 449,
	405, 404, 406, 0, 0, 409, 0, 0, 0, 0,
	0, 456, 0, 32, 0, 507, -2, 0, 0, 0,
	44, 35, 0, 284, 0, 0, 0, 319, 287, 36,
	549, 0, 165, 148, 142, 0, 146, 117, 146, 0,
	0, 50, 62, 63, 0, 0, 475, 0, 438, 439,
	0, 0, 0, 0, 430, 413, 453, 0, 505, 0,
	-2, 0, 500, 499, 0, 293, 320, 321, 322, 283,
	155, 164, 153, 0, 150, 152, 140, 106, 107, 121,
	124, 0, 0, 26, 0, 0, 407, 408, 410, 411,
	0, 0, 0, 0, 495, 27, 0, 285, 69, 0,
	149, 151, 56, 0, 196, 0, 476, 474, 412, 0,
	0, 0, 503, -2, 501, 154, 59, 195, 0, 0,
	431, 0, 434, 178, 197, 0, 432, 0, 0, 0,
	0, 0, 433, 0, 0, 198, 199,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 237,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:294
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:299
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:304
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:327
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:345
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:352
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:372
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:379
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:391
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:419
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:423
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:433
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:441
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:446
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:450
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:456
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:460
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:466
		{
			yyVAL.str = SessionStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:470
		{
			yyVAL.str = GlobalStr
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:476
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:481
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:486
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:490
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:502
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:506
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:526
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:542
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:548
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:554
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:561
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:568
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:577
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:583
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:797
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:802
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.optVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:811
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:820
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:828
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:832
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:838
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:846
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:850
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:865
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:878
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:886
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:890
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:925
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:933
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:938
		{
			yyVAL.str = ""
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:942
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:947
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:951
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.colKeyOpt = colKey
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:959
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:968
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:972
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:978
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:984
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:988
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:992
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:996
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.str = yyDollar[1].str
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 178:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1110
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1115
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1175
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1183
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1188
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = SessionStr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = GlobalStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Begin{}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &Begin{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Commit{}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &Rollback{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &OtherRead{}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &OtherRead{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &OtherRead{}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1389
		{
			setAllowComments(yylex, true)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.bytes2 = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.str = UnionStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.str = UnionAllStr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.str = UnionDistinctStr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.str = SQLCacheStr
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = DistinctStr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = StraightJoinHint
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.selectExprs = nil
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.str = JoinStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.str = JoinStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.str = JoinStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.str = StraightJoinStr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.str = LeftJoinStr
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = LeftJoinStr
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = RightJoinStr
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.str = RightJoinStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.str = NaturalJoinStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.indexHints = nil
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.str = IsNullStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.str = IsNotNullStr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.str = IsTrueStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = IsNotTrueStr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.str = IsFalseStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = IsNotFalseStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.str = EqualStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.str = LessThanStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.str = GreaterThanStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = LessEqualStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = GreaterEqualStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = NotEqualStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2019
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2027
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 412:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.str = BooleanModeStr
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.str = QueryExpansionStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.str = string("")
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.expr = &NullVal{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.exprs = nil
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.orderBy = nil
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.str = AscScr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.str = AscScr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.str = DescScr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.limit = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.str = ForUpdateStr
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.str = ShareModeStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2514
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2527
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.updateExprs = nil
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2587
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.bytes = []byte("charset")
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.expr = &Default{}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.byt = 0
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.byt = 1
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.str = ""
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.str = IgnoreStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.empty = struct{}{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.empty = struct{}{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2680
		{
			yyVAL.empty = struct{}{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.empty = struct{}{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.empty = struct{}{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.empty = struct{}{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.empty = struct{}{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2955
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2964
		{
			decNesting(yylex)
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2969
		{
			forceEOF(yylex)
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2974
		{
			forceEOF(yylex)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2978
		{
			forceEOF(yylex)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2982
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
