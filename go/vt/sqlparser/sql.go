//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const DATABASES = 57450
const TABLES = 57451
const VITESS_KEYSPACES = 57452
const VITESS_SHARDS = 57453
const VSCHEMA_TABLES = 57454
const INTEGER = 57455
const CHARACTER = 57456
const CURRENT_TIMESTAMP = 57457
const DATABASE = 57458
const CURRENT_DATE = 57459
const CURRENT_TIME = 57460
const LOCALTIME = 57461
const LOCALTIMESTAMP = 57462
const UTC_DATE = 57463
const UTC_TIME = 57464
const UTC_TIMESTAMP = 57465
const REPLACE = 57466
const CONVERT = 57467
const CAST = 57468
const GROUP_CONCAT = 57469
const SEPARATOR = 57470
const MATCH = 57471
const AGAINST = 57472
const BOOLEAN = 57473
const LANGUAGE = 57474
const WITH = 57475
const QUERY = 57476
const EXPANSION = 57477
const UNUSED = 57478

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 183,
	103, 313,
	-2, 309,
	-1, 184,
	103, 314,
	-2, 310,
	-1, 309,
	103, 316,
	-2, 312,
}

const yyNprod = 426
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3443

var yyAct = [...]int{

	439, 447, 346, 540, 611, 284, 261, 178, 392, 520,
	549, 221, 578, 490, 435, 519, 610, 518, 263, 329,
	257, 426, 505, 224, 459, 219, 534, 327, 308, 260,
	179, 198, 251, 161, 207, 432, 30, 492, 702, 53,
	258, 403, 174, 695, 182, 180, 701, 174, 48, 69,
	688, 700, 391, 3, 694, 687, 614, 56, 52, 655,
	319, 162, 163, 313, 193, 186, 174, 60, 174, 61,
	285, 61, 174, 421, 317, 44, 227, 244, 246, 63,
	64, 65, 345, 344, 164, 677, 360, 359, 369, 370,
	362, 363, 364, 365, 366, 367, 368, 361, 343, 322,
	371, 197, 187, 189, 66, 62, 381, 382, 360, 359,
	369, 370, 362, 363, 364, 365, 366, 367, 368, 361,
	593, 590, 371, 360, 359, 369, 370, 362, 363, 364,
	365, 366, 367, 368, 361, 160, 442, 371, 430, 416,
	371, 483, 390, 484, 47, 245, 55, 215, 211, 690,
	678, 558, 50, 316, 318, 315, 351, 686, 214, 483,
	550, 484, 506, 617, 361, 350, 349, 371, 506, 46,
	566, 51, 58, 54, 49, 57, 201, 174, 466, 209,
	217, 222, 351, 174, 483, 684, 484, 53, 320, 485,
	665, 174, 464, 465, 463, 174, 48, 669, 174, 321,
	218, 174, 542, 543, 544, 56, 52, 485, 194, 174,
	486, 182, 180, 242, 209, 441, 226, 249, 559, 182,
	180, 249, 347, 44, 350, 349, 236, 307, 486, 237,
	32, 619, 485, 174, 254, 250, 174, 683, 330, 309,
	248, 351, 310, 247, 253, 182, 180, 339, 213, 192,
	222, 560, 433, 486, 213, 602, 603, 325, 349, 423,
	462, 647, 650, 364, 365, 366, 367, 368, 361, 495,
	326, 371, 348, 600, 351, 342, 352, 441, 379, 453,
	455, 456, 576, 160, 454, 383, 384, 385, 386, 387,
	388, 338, 47, 423, 55, 350, 349, 350, 349, 529,
	50, 350, 349, 674, 441, 222, 393, 576, 441, 423,
	441, 239, 351, 401, 351, 195, 660, 46, 351, 51,
	58, 54, 49, 57, 362, 363, 364, 365, 366, 367,
	368, 361, 222, 283, 371, 595, 441, 174, 405, 406,
	407, 408, 409, 410, 411, 443, 562, 441, 419, 495,
	441, 440, 441, 433, 43, 417, 424, 360, 359, 369,
	370, 362, 363, 364, 365, 366, 367, 368, 361, 450,
	451, 371, 181, 461, 458, 438, 482, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 494, 496, 457, 330, 249, 423, 230, 252,
	330, 330, 493, 233, 631, 508, 663, 662, 436, 632,
	629, 487, 488, 599, 309, 630, 499, 500, 330, 330,
	330, 330, 628, 174, 627, 460, 174, 510, 513, 330,
	174, 503, 497, 498, 168, 169, 249, 522, 530, 213,
	699, 698, 493, 523, 693, 533, 696, 598, 59, 525,
	509, 517, 511, 512, 309, 516, 15, 393, 200, 527,
	335, 350, 349, 633, 680, 584, 585, 334, 538, 541,
	691, 199, 536, 537, 172, 528, 681, 666, 351, 591,
	205, 337, 461, 311, 171, 546, 547, 548, 545, 229,
	588, 552, 165, 166, 200, 333, 448, 330, 556, 557,
	33, 622, 561, 332, 449, 347, 286, 621, 568, 330,
	569, 570, 571, 572, 575, 555, 252, 35, 36, 37,
	38, 177, 223, 689, 223, 638, 567, 565, 15, 553,
	174, 32, 34, 235, 460, 594, 29, 596, 597, 181,
	573, 563, 589, 523, 592, 1, 67, 181, 587, 223,
	223, 206, 425, 312, 608, 40, 420, 604, 314, 185,
	330, 331, 238, 340, 501, 223, 616, 679, 609, 601,
	539, 606, 607, 181, 341, 620, 612, 613, 574, 564,
	400, 504, 174, 174, 174, 174, 618, 624, 262, 626,
	636, 434, 623, 635, 625, 523, 523, 523, 523, 634,
	436, 452, 513, 273, 643, 270, 272, 271, 234, 336,
	645, 646, 353, 651, 652, 255, 649, 243, 641, 642,
	541, 202, 579, 657, 577, 521, 644, 15, 16, 17,
	18, 659, 277, 276, 278, 279, 280, 281, 422, 656,
	282, 658, 393, 654, 182, 180, 664, 418, 676, 184,
	19, 167, 232, 31, 170, 668, 14, 13, 12, 670,
	11, 10, 9, 428, 8, 7, 673, 6, 5, 4,
	45, 675, 2, 0, 667, 70, 0, 685, 682, 0,
	671, 672, 0, 0, 0, 692, 176, 0, 0, 0,
	0, 176, 0, 0, 0, 220, 697, 220, 359, 369,
	370, 362, 363, 364, 365, 366, 367, 368, 361, 240,
	176, 371, 176, 0, 173, 0, 176, 0, 0, 0,
	0, 0, 489, 220, 223, 0, 0, 20, 21, 23,
	22, 24, 502, 0, 0, 0, 507, 0, 220, 0,
	25, 26, 27, 0, 0, 28, 0, 0, 0, 0,
	223, 580, 583, 584, 585, 581, 188, 582, 586, 0,
	0, 428, 0, 0, 223, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 531, 190, 532, 191, 535, 535,
	535, 196, 580, 583, 584, 585, 581, 0, 582, 586,
	389, 0, 661, 0, 394, 395, 396, 397, 398, 399,
	0, 402, 404, 404, 404, 404, 404, 404, 404, 404,
	412, 413, 414, 415, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 176, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 45, 176,
	45, 0, 176, 0, 437, 176, 0, 0, 223, 45,
	444, 445, 446, 176, 0, 0, 0, 0, 176, 0,
	0, 176, 0, 0, 0, 0, 45, 369, 370, 362,
	363, 364, 365, 366, 367, 368, 361, 176, 0, 371,
	176, 45, 0, 0, 53, 0, 204, 0, 427, 0,
	45, 0, 212, 48, 0, 0, 615, 0, 0, 0,
	216, 0, 56, 52, 225, 0, 0, 228, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 15, 241, 0,
	44, 0, 429, 0, 223, 0, 0, 639, 53, 640,
	0, 524, 350, 349, 0, 0, 0, 48, 0, 0,
	0, 0, 323, 0, 0, 324, 56, 52, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 45, 175, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 45,
	160, 176, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 55, 53, 0, 0, 0, 208, 50, 0, 0,
	554, 48, 0, 0, 53, 0, 0, 0, 0, 0,
	56, 52, 0, 48, 46, 0, 51, 58, 54, 49,
	57, 220, 56, 52, 160, 0, 0, 0, 175, 0,
	210, 524, 0, 47, 0, 55, 437, 0, 45, 0,
	44, 50, 0, 0, 0, 0, 431, 0, 45, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 46, 0,
	51, 58, 54, 49, 57, 0, 45, 176, 0, 0,
	176, 0, 0, 0, 176, 0, 0, 45, 0, 0,
	0, 0, 0, 524, 524, 524, 524, 0, 160, 0,
	45, 0, 45, 0, 45, 45, 45, 47, 39, 55,
	41, 0, 0, 0, 42, 50, 0, 0, 0, 47,
	0, 55, 0, 0, 0, 0, 0, 50, 648, 0,
	0, 653, 46, 605, 51, 58, 54, 49, 57, 0,
	0, 0, 514, 0, 46, 515, 51, 58, 54, 49,
	57, 0, 0, 360, 359, 369, 370, 362, 363, 364,
	365, 366, 367, 368, 361, 0, 0, 371, 0, 355,
	0, 358, 0, 0, 45, 0, 0, 372, 373, 374,
	375, 376, 377, 378, 176, 356, 357, 354, 360, 359,
	369, 370, 362, 363, 364, 365, 366, 367, 368, 361,
	0, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 176, 176, 176,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	45, 0, 0, 45, 0, 45, 149, 136, 110, 151,
	88, 102, 159, 103, 104, 130, 76, 118, 53, 100,
	0, 91, 72, 97, 73, 89, 112, 48, 115, 87,
	138, 121, 157, 0, 125, 0, 56, 52, 0, 0,
	114, 143, 116, 135, 109, 131, 81, 124, 152, 101,
	128, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 148, 99, 129, 71, 126, 0,
	74, 77, 158, 146, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 113, 117, 132, 107, 0, 0, 0,
	0, 0, 0, 637, 0, 92, 0, 123, 0, 0,
	0, 78, 75, 111, 0, 0, 0, 80, 0, 93,
	133, 0, 144, 108, 160, 147, 106, 105, 150, 153,
	142, 90, 98, 47, 96, 55, 86, 145, 139, 140,
	141, 50, 0, 84, 85, 82, 83, 119, 120, 154,
	155, 156, 134, 79, 0, 0, 137, 122, 46, 0,
	51, 58, 54, 49, 57, 149, 136, 110, 151, 88,
	102, 159, 103, 104, 130, 76, 118, 53, 100, 0,
	91, 72, 97, 73, 89, 112, 48, 115, 87, 138,
	121, 157, 0, 125, 0, 56, 52, 0, 0, 114,
	143, 116, 135, 109, 131, 81, 124, 152, 101, 128,
	222, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 148, 99, 129, 71, 126, 0, 74,
	77, 158, 146, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 113, 117, 132, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 123, 0, 0, 0,
	78, 75, 111, 0, 0, 0, 80, 0, 93, 133,
	0, 144, 108, 160, 147, 106, 105, 150, 153, 142,
	90, 98, 47, 96, 55, 86, 145, 139, 140, 141,
	50, 0, 84, 85, 82, 83, 119, 120, 154, 155,
	156, 134, 79, 0, 0, 137, 122, 46, 0, 51,
	58, 54, 49, 57, 149, 136, 110, 151, 88, 102,
	159, 103, 104, 130, 76, 118, 53, 100, 0, 91,
	72, 97, 73, 89, 112, 48, 115, 87, 138, 121,
	157, 0, 125, 0, 56, 52, 0, 0, 114, 143,
	116, 135, 109, 131, 81, 124, 152, 101, 128, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 148, 99, 129, 71, 126, 0, 74, 77,
	158, 146, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 113, 117, 132, 107, 0, 0, 0, 0, 0,
	0, 526, 0, 92, 0, 123, 0, 0, 0, 78,
	75, 111, 0, 0, 0, 80, 0, 93, 133, 0,
	144, 108, 160, 147, 106, 105, 150, 153, 142, 90,
	98, 47, 96, 55, 86, 145, 139, 140, 141, 50,
	0, 84, 85, 82, 83, 119, 120, 154, 155, 156,
	134, 79, 0, 0, 137, 122, 46, 0, 51, 58,
	54, 49, 57, 149, 136, 110, 151, 88, 102, 159,
	103, 104, 130, 76, 118, 53, 100, 0, 91, 72,
	97, 73, 89, 112, 48, 115, 87, 138, 121, 157,
	0, 125, 0, 56, 52, 0, 0, 114, 143, 116,
	135, 109, 131, 81, 124, 152, 101, 128, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 148, 99, 129, 71, 126, 0, 74, 77, 158,
	146, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	113, 117, 132, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 123, 0, 0, 0, 78, 75,
	111, 0, 0, 0, 80, 0, 93, 133, 0, 144,
	108, 160, 147, 106, 105, 150, 153, 142, 90, 98,
	47, 96, 55, 86, 145, 139, 140, 141, 50, 0,
	84, 85, 82, 83, 119, 120, 154, 155, 156, 134,
	79, 0, 0, 137, 122, 46, 0, 51, 58, 54,
	49, 57, 149, 136, 110, 151, 88, 102, 159, 103,
	104, 130, 76, 118, 53, 100, 0, 91, 72, 97,
	73, 89, 112, 48, 115, 87, 138, 121, 157, 0,
	125, 0, 56, 52, 0, 0, 114, 143, 116, 135,
	109, 131, 81, 124, 152, 101, 128, 0, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	148, 99, 129, 71, 126, 0, 74, 77, 158, 146,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 113,
	117, 132, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 123, 0, 0, 0, 78, 75, 111,
	0, 0, 0, 80, 0, 93, 133, 0, 144, 108,
	160, 147, 106, 105, 150, 153, 142, 90, 98, 47,
	96, 55, 86, 145, 139, 140, 141, 50, 0, 84,
	85, 82, 83, 119, 120, 154, 155, 156, 134, 79,
	0, 0, 137, 122, 46, 0, 51, 58, 54, 49,
	57, 149, 136, 110, 151, 88, 102, 159, 103, 104,
	130, 76, 118, 53, 100, 0, 91, 72, 97, 73,
	89, 112, 48, 115, 87, 138, 121, 157, 0, 125,
	0, 56, 52, 0, 0, 114, 143, 116, 135, 109,
	131, 81, 124, 152, 101, 128, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 148,
	99, 129, 71, 126, 0, 74, 77, 158, 146, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 113, 117,
	132, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 123, 0, 0, 0, 78, 75, 111, 0,
	0, 0, 80, 0, 93, 133, 0, 144, 108, 160,
	147, 106, 105, 150, 153, 142, 90, 98, 47, 96,
	55, 86, 145, 139, 140, 141, 50, 0, 84, 85,
	82, 83, 119, 120, 154, 155, 156, 134, 79, 0,
	0, 137, 122, 46, 0, 51, 58, 54, 49, 57,
	149, 136, 110, 151, 88, 102, 159, 103, 104, 130,
	76, 118, 53, 100, 0, 91, 72, 97, 73, 89,
	112, 48, 115, 87, 138, 121, 157, 0, 125, 0,
	56, 52, 0, 0, 114, 143, 116, 135, 109, 131,
	81, 124, 152, 101, 128, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 148, 99,
	129, 71, 126, 0, 74, 77, 158, 146, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 113, 117, 132,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 123, 0, 0, 0, 78, 75, 111, 0, 0,
	0, 80, 0, 93, 133, 0, 144, 108, 160, 147,
	106, 105, 150, 153, 142, 90, 98, 47, 96, 55,
	86, 145, 139, 140, 141, 50, 0, 84, 85, 82,
	83, 119, 120, 154, 155, 156, 134, 79, 0, 0,
	137, 122, 46, 0, 51, 58, 54, 49, 57, 53,
	0, 0, 491, 0, 259, 0, 0, 0, 48, 0,
	0, 0, 0, 294, 0, 0, 0, 56, 52, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 222, 551, 0, 183, 277, 276, 278, 279,
	280, 281, 0, 0, 282, 274, 275, 0, 0, 256,
	268, 0, 293, 360, 359, 369, 370, 362, 363, 364,
	365, 366, 367, 368, 361, 0, 0, 371, 0, 0,
	0, 0, 265, 266, 328, 0, 0, 0, 305, 0,
	267, 0, 0, 264, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 303, 0,
	0, 0, 0, 0, 47, 0, 55, 0, 0, 0,
	0, 0, 50, 0, 295, 304, 301, 302, 299, 300,
	298, 297, 296, 306, 289, 290, 292, 0, 291, 46,
	0, 51, 58, 54, 49, 57, 53, 0, 0, 0,
	0, 259, 0, 0, 0, 48, 0, 0, 0, 0,
	294, 0, 0, 0, 56, 52, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 183, 277, 276, 278, 279, 280, 281, 0,
	0, 282, 274, 275, 0, 0, 256, 268, 0, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 328, 0, 0, 0, 305, 0, 267, 0, 0,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 303, 0, 0, 0, 0,
	0, 47, 0, 55, 0, 0, 0, 0, 0, 50,
	0, 295, 304, 301, 302, 299, 300, 298, 297, 296,
	306, 289, 290, 292, 0, 291, 46, 0, 51, 58,
	54, 49, 57, 53, 0, 0, 0, 0, 259, 0,
	0, 0, 48, 0, 0, 0, 0, 294, 0, 0,
	0, 56, 52, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 441, 183,
	277, 276, 278, 279, 280, 281, 0, 0, 282, 274,
	275, 0, 0, 256, 268, 0, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 305, 0, 267, 0, 0, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 303, 0, 0, 0, 0, 0, 47, 0,
	55, 0, 0, 0, 0, 0, 50, 0, 295, 304,
	301, 302, 299, 300, 298, 297, 296, 306, 289, 290,
	292, 15, 291, 46, 0, 51, 58, 54, 49, 57,
	0, 0, 53, 0, 0, 0, 0, 259, 0, 0,
	0, 48, 0, 0, 0, 0, 294, 0, 0, 0,
	56, 52, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 183, 277,
	276, 278, 279, 280, 281, 0, 0, 282, 274, 275,
	0, 0, 256, 268, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 305, 0, 267, 0, 0, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 303, 0, 0, 0, 0, 0, 47, 0, 55,
	0, 0, 0, 0, 0, 50, 0, 295, 304, 301,
	302, 299, 300, 298, 297, 296, 306, 289, 290, 292,
	0, 291, 46, 0, 51, 58, 54, 49, 57, 53,
	0, 0, 0, 0, 259, 0, 0, 0, 48, 0,
	0, 0, 0, 294, 0, 0, 0, 56, 52, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 183, 277, 276, 278, 279,
	280, 281, 0, 0, 282, 274, 275, 0, 0, 256,
	268, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 305, 0,
	267, 0, 0, 264, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 303, 0,
	0, 0, 0, 0, 47, 0, 55, 0, 0, 0,
	0, 0, 50, 0, 295, 304, 301, 302, 299, 300,
	298, 297, 296, 306, 289, 290, 292, 53, 291, 46,
	0, 51, 58, 54, 49, 57, 48, 0, 0, 0,
	0, 294, 0, 0, 0, 56, 52, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 183, 277, 276, 278, 279, 280, 281,
	0, 0, 282, 274, 275, 0, 0, 0, 268, 0,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 305, 0, 267, 0,
	0, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 303, 0, 0, 0,
	0, 0, 47, 0, 55, 0, 0, 0, 0, 0,
	50, 0, 295, 304, 301, 302, 299, 300, 298, 297,
	296, 306, 289, 290, 292, 53, 291, 46, 0, 51,
	58, 54, 49, 57, 48, 0, 0, 0, 0, 294,
	0, 0, 0, 56, 52, 0, 0, 0, 0, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 183, 277, 276, 278, 279, 280, 281, 0, 0,
	282, 0, 53, 0, 0, 0, 268, 0, 293, 0,
	0, 48, 0, 0, 53, 0, 0, 0, 0, 0,
	56, 52, 0, 48, 0, 0, 0, 0, 265, 266,
	0, 0, 56, 52, 305, 222, 267, 0, 175, 264,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 160, 429, 0, 303, 0, 0, 0, 0, 0,
	47, 0, 55, 0, 0, 0, 0, 0, 50, 0,
	295, 304, 301, 302, 299, 300, 298, 297, 296, 306,
	289, 290, 292, 0, 291, 46, 53, 51, 58, 54,
	49, 57, 0, 53, 0, 48, 0, 0, 160, 0,
	0, 203, 48, 0, 56, 52, 0, 47, 0, 55,
	160, 56, 52, 0, 0, 50, 0, 0, 0, 47,
	0, 55, 175, 0, 210, 0, 0, 50, 0, 175,
	0, 0, 46, 0, 51, 58, 54, 49, 57, 0,
	0, 0, 53, 0, 46, 0, 51, 58, 54, 49,
	57, 48, 0, 0, 53, 0, 0, 0, 0, 0,
	56, 52, 0, 48, 0, 0, 53, 0, 0, 0,
	0, 0, 56, 52, 0, 48, 0, 0, 183, 0,
	0, 0, 160, 0, 56, 52, 0, 0, 0, 160,
	44, 47, 0, 55, 0, 0, 0, 0, 47, 50,
	55, 0, 175, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 51, 58,
	54, 49, 57, 46, 0, 51, 58, 54, 49, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 55,
	160, 0, 0, 0, 0, 50, 0, 0, 0, 47,
	0, 55, 160, 0, 0, 0, 0, 50, 0, 0,
	0, 47, 46, 55, 51, 58, 54, 49, 57, 50,
	0, 0, 0, 0, 46, 0, 51, 58, 54, 49,
	57, 0, 0, 0, 0, 0, 46, 0, 51, 58,
	54, 49, 57,
}
var yyPact = [...]int{

	621, -1000, -118, 526, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	987, -46, -6, -32, -7, 2135, -1000, -1000, -1000, -1000,
	-1000, 522, 473, 397, -1000, -44, 3289, 511, 3265, -51,
	-10, 3289, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -8,
	3289, -1000, 3289, -52, 155, -52, 3289, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 438, -1000, -1000,
	115, 3216, 451, 975, 45, -1000, -1000, 3289, 197, -1000,
	83, -1000, 44, -1000, -1000, 3289, 113, 147, 1390, 3289,
	1390, -38, 3289, 467, 349, 3289, -1000, -1000, 363, 170,
	-1000, -1000, 282, 3289, -1000, 3265, 30, -1000, 3209, -1000,
	-1000, 1986, 505, 3265, 2822, 1837, 1390, 461, -55, -1000,
	-1000, -1000, -1000, -1000, -1000, 46, -1000, 3289, -1000, -1000,
	3289, 1390, 2409, -1000, 485, -1000, 436, 429, 450, 3265,
	3277, -1000, 388, -1000, -14, -29, -30, -1000, -1000, -1000,
	-1000, 491, 2822, -1000, 236, -1000, 2822, 1092, -1000, 255,
	-1000, 2, -1000, -1000, 3078, 3078, 3078, 3078, 3078, 3078,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 255, 39, -1000, 2685, 255, 255, 255,
	255, 255, 255, 2822, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, -1000, 36, -1000,
	-1000, -1000, 306, 3277, -1000, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 346, -1000, -1000, 867,
	35, 3289, -1000, -1000, -1000, -1000, 304, 255, 526, 203,
	300, 33, 491, 255, 255, 255, 480, 489, 236, 2822,
	2822, 217, 74, 2950, 200, 109, 3078, 3078, 3078, 3078,
	3078, 3078, 3078, 3078, 3078, 3078, 3078, 3078, 3078, 3078,
	3078, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	522, 578, 578, 40, 40, 40, 40, 40, 22, 2272,
	1837, 225, 298, 236, 2409, 2409, 2822, 2822, 3277, 474,
	91, 236, 3277, -1000, 163, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2409, 2409, 2409, 2409, 1688, 3289, -1000, -1000,
	3289, -1000, 505, 2409, 3125, -1000, -1000, 3137, -1000, -1000,
	1539, -1000, -1000, 449, 248, -1000, -1000, 2546, -1000, -1000,
	3277, -1000, 3277, 480, 3277, 3277, 3277, -1000, 2822, 2822,
	74, 192, -1000, -1000, 140, -1000, -1000, -1000, 271, -1000,
	-1000, -1000, -1000, 200, 3078, 3078, 3078, 37, 271, 2257,
	779, 611, 40, 171, 171, 67, 67, 67, 67, 67,
	234, 234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	163, 2409, 242, 255, -1000, 2822, -1000, 258, 258, 100,
	230, 295, -1000, 2409, 97, -1000, 2822, 163, -1000, 258,
	163, 258, 258, -1000, 1390, -1000, 502, -1000, 231, 712,
	-1000, -1000, -1000, 469, 911, -1000, -1000, 18, 452, 255,
	-1000, 17, -1000, -1000, 284, -1000, 284, 284, 396, 222,
	-1000, 232, -1000, -1000, -1000, -1000, 37, 271, 1057, -1000,
	3078, 3078, -1000, 258, 2409, 236, -1000, -1000, 88, 88,
	88, -91, 3277, 208, 89, -1000, 2822, 159, -1000, -1000,
	-1000, -1000, -1000, -1000, 494, 486, 3125, 3125, 3125, 3125,
	-1000, 385, 383, -1000, 371, 365, 424, 3289, -1000, 256,
	1241, 517, -1000, 3277, -1000, 3277, -1000, -1000, 2822, 2822,
	2822, -1000, -1000, -1000, -1000, 3078, 271, 271, -1000, 163,
	163, 131, 163, 163, 255, -1000, -86, -1000, 236, 2822,
	491, 2822, 2822, 712, 267, 743, -1000, -1000, -1000, -1000,
	368, -1000, 367, -1000, -1000, -1000, -1000, -1000, 3265, -1000,
	-1000, 236, 236, -1000, 271, -1000, -1000, -1000, 134, -1000,
	448, -1000, -1000, 3078, 163, 142, 236, 480, 236, 218,
	2822, 2822, -1000, -1000, 197, 252, 88, 0, -1000, -1000,
	446, 236, 236, 106, 129, -1000, 163, 9, -101, -1000,
	515, 64, -1000, 441, 163, -1000, 408, -95, -109, -1000,
	411, 88, -1000, -1000, 405, -1000, 404, -1000, -99, -1000,
	-105, -114, -1000,
}
var yyPgo = [...]int{

	0, 672, 52, 669, 668, 667, 665, 664, 662, 661,
	660, 658, 657, 656, 500, 654, 653, 31, 652, 651,
	648, 643, 10, 37, 13, 27, 19, 638, 17, 15,
	9, 625, 624, 12, 622, 714, 621, 437, 617, 26,
	32, 615, 40, 612, 609, 29, 20, 608, 607, 606,
	605, 603, 601, 24, 8, 591, 70, 14, 588, 18,
	6, 581, 22, 580, 579, 578, 575, 2, 570, 3,
	569, 1, 567, 564, 563, 562, 35, 7, 30, 561,
	448, 249, 559, 558, 556, 555, 553, 23, 649, 333,
	11, 21, 552, 5, 28, 34, 551, 548, 33, 25,
	4, 16, 546, 545, 536, 532, 506, 0, 41,
}
var yyR1 = [...]int{

	0, 103, 104, 104, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 5, 6, 7, 7, 7, 8, 8, 8,
	9, 10, 10, 10, 11, 102, 102, 102, 12, 13,
	13, 13, 105, 14, 15, 15, 16, 16, 16, 19,
	19, 19, 17, 17, 18, 18, 24, 24, 23, 23,
	25, 25, 25, 25, 92, 92, 92, 91, 91, 27,
	27, 28, 28, 29, 29, 30, 30, 30, 37, 31,
	31, 31, 31, 97, 97, 96, 96, 96, 95, 95,
	32, 32, 32, 32, 33, 33, 33, 33, 34, 34,
	36, 36, 35, 35, 38, 38, 38, 38, 39, 39,
	40, 40, 26, 26, 26, 26, 26, 26, 42, 42,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 52, 52, 52, 52, 52, 52, 43, 43,
	43, 43, 43, 43, 43, 22, 22, 53, 53, 53,
	59, 54, 54, 100, 100, 100, 100, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 50, 50, 50, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 49, 49,
	49, 49, 49, 49, 49, 49, 108, 108, 51, 51,
	51, 51, 20, 20, 20, 20, 20, 101, 101, 101,
	101, 101, 101, 101, 101, 63, 63, 21, 21, 61,
	61, 62, 64, 64, 60, 60, 60, 45, 45, 45,
	45, 45, 45, 45, 47, 47, 47, 65, 65, 66,
	66, 67, 67, 68, 68, 69, 70, 70, 70, 71,
	71, 71, 71, 72, 72, 72, 73, 73, 75, 75,
	74, 74, 74, 74, 76, 76, 44, 44, 55, 55,
	57, 57, 56, 58, 77, 77, 78, 79, 79, 81,
	81, 82, 82, 80, 80, 83, 83, 83, 83, 83,
	83, 83, 84, 84, 85, 85, 85, 86, 86, 89,
	89, 90, 90, 93, 93, 94, 94, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	106, 107, 98, 99, 99, 99,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 13, 7, 3, 7,
	7, 8, 7, 3, 5, 8, 4, 6, 7, 4,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 1, 1,
	1, 3, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 2, 4,
	5, 7, 2, 4, 6, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 1, 3, 0, 3,
	1, 3, 3, 5, 0, 5, 2, 1, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -103, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, -13, 6, 7, 8, 9, 29,
	106, 107, 109, 108, 110, 119, 120, 121, 124, -104,
	154, -16, 5, -14, -105, -14, -14, -14, -14, 111,
	-85, 113, 117, -89, 53, -88, 147, 122, 26, 152,
	130, 149, 36, 17, 151, 124, 35, 153, 150, -80,
	113, 115, 111, 111, 112, 113, 111, -102, 53, -87,
	-88, 66, 21, 23, 69, 101, 15, 70, 100, 142,
	106, 45, 134, 135, 132, 133, 125, 28, 9, 24,
	120, 20, 94, 108, 73, 74, 123, 22, 121, 64,
	18, 48, 10, 12, 13, 116, 115, 85, 112, 43,
	7, 102, 25, 82, 39, 27, 41, 83, 16, 136,
	137, 30, 146, 96, 46, 33, 67, 62, 49, 65,
	14, 44, 84, 109, 141, 42, 6, 145, 29, 127,
	128, 129, 119, 40, 111, 126, 72, 114, 63, 5,
	117, 8, 47, 118, 138, 139, 140, 31, 71, 11,
	113, -98, -98, -98, -2, 19, 20, -19, 37, 38,
	-15, -80, -37, -35, -93, 53, -88, 10, -77, -78,
	-60, -89, -93, 53, -88, -82, 116, 112, -35, 111,
	-35, -35, -81, 116, 53, -81, -35, -98, -17, 33,
	20, 61, -36, 25, -35, 29, -96, -95, 21, -93,
	55, 103, -35, 51, 75, 103, -35, 67, 53, -99,
	-106, -90, 50, -89, -87, -35, -99, 114, -35, 22,
	49, -35, -18, 40, -47, -89, 56, 59, -75, 29,
	-106, -35, -77, -38, 47, 115, 48, -95, -94, -93,
	-87, -40, 11, -78, -26, -41, 67, -46, -42, 22,
	-45, -60, -58, -59, 101, 90, 91, 98, 68, 102,
	-50, -48, -49, -51, 63, 64, 55, 54, 56, 57,
	58, 59, 62, -89, -93, -56, -106, 41, 42, 142,
	143, 146, 144, 70, 31, 132, 140, 139, 138, 136,
	137, 134, 135, 116, 133, 96, 141, -90, -94, -87,
	-99, 22, -86, 118, -83, 109, 107, 28, 108, 14,
	142, 153, 53, -35, -35, -99, -23, -25, 92, -26,
	-93, -79, 18, 10, 31, 31, -44, 31, -2, -77,
	-74, -89, -40, 112, 112, 112, -67, 14, -26, 66,
	65, 82, -26, -43, 85, 67, 83, 84, 69, 87,
	86, 97, 90, 91, 92, 93, 94, 95, 96, 88,
	89, 100, 75, 76, 77, 78, 79, 80, 81, -59,
	-106, 104, 105, -46, -46, -46, -46, -46, -46, -106,
	103, -2, -54, -26, -106, -106, -106, -106, -106, -106,
	-63, -26, -106, -108, -106, -108, -108, -108, -108, -108,
	-108, -108, -106, -106, -106, -106, 103, 49, -89, -98,
	-84, 114, -27, 51, 10, -92, -91, 21, -89, 55,
	103, -35, -76, 49, -55, -57, -56, -106, -76, -107,
	51, 52, 103, -67, -106, -106, -106, -71, 16, 15,
	-26, -26, -52, 62, 67, 63, 64, -42, -46, -53,
	-56, -59, 60, 85, 83, 84, 69, -46, -46, -46,
	-46, -46, -46, -46, -46, -46, -46, -46, -46, -46,
	-46, -46, -100, 53, 55, 101, 122, -45, -45, -89,
	-24, 20, -23, -90, -107, 51, -107, -23, -23, -26,
	-26, -73, -89, -17, -61, -62, 71, -89, -107, -23,
	-24, -23, -23, -90, -35, -35, -40, -25, -28, -29,
	-30, -31, -37, -59, -106, -91, 92, -94, 26, 51,
	-107, -89, -89, -71, -39, -89, -39, -39, -26, -68,
	-69, -26, 62, 63, 64, -53, -46, -46, -46, -22,
	123, 66, -107, -23, -106, -26, -107, -107, 51, 118,
	21, -107, 51, -23, -64, -62, 73, -26, -107, -107,
	-107, -107, -107, -99, -65, 12, 51, -32, -33, -34,
	39, 43, 45, 40, 41, 42, 46, -97, 21, -28,
	103, 27, -57, 103, -107, 51, -107, -107, 51, 17,
	51, -70, 23, 24, -22, 66, -46, -46, -107, -24,
	-101, -100, -101, -101, 147, -89, -67, 74, -26, 72,
	-66, 13, 15, -29, -30, -29, -30, 39, 39, 39,
	44, 39, 44, 39, -33, -93, -107, 92, 8, -89,
	-89, -26, -26, -69, -46, -107, -107, 130, -106, -100,
	131, -107, -107, -106, -21, 145, -26, -67, -26, -54,
	49, 49, 39, 39, -77, 56, 29, -46, -107, 55,
	-71, -26, -26, -107, 51, -100, -20, 85, 150, -72,
	18, 30, -100, 131, 56, -107, 148, 46, 151, 8,
	85, 29, -107, 36, 149, 152, 35, -100, 36, 36,
	150, 151, 152,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 42, 42, 42, 42, 42,
	304, 293, 0, 0, 0, 0, 422, 422, 422, 1,
	3, 0, 46, 49, 44, 293, 0, 0, 0, 291,
	0, 418, 305, 306, 309, 310, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 419, 0,
	0, 294, 0, 289, 0, 289, 0, 422, 35, 36,
	37, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	418, 39, 40, 41, 18, 47, 48, 52, 50, 51,
	43, 0, 0, 85, 102, 313, 314, 0, 23, 284,
	0, 234, 0, -2, -2, 0, 0, 0, 423, 0,
	423, 0, 0, 0, 0, 0, 34, 38, 54, 0,
	53, 45, 268, 0, 101, 0, 104, 86, 0, 88,
	89, 0, 110, 0, 0, 0, 423, 0, 307, 26,
	424, 425, 420, 311, 312, 0, 29, 0, 31, 290,
	0, 423, 0, 55, 0, 244, 0, 0, 0, 0,
	0, 100, 110, 78, 0, 0, 0, 87, 103, 315,
	316, 251, 0, 285, 286, 112, 0, 117, 120, 0,
	157, 158, 159, 160, 0, 0, 0, 0, 0, 0,
	182, 183, 184, 185, 118, 119, 237, 238, 239, 240,
	241, 242, 243, 234, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 206, 206, 206, 206, 206,
	206, 206, 206, 0, 0, 0, 0, 235, 0, -2,
	24, 292, 0, 0, 422, 302, 295, 296, 297, 298,
	299, 300, 301, 30, 32, 33, 69, 58, 60, 64,
	0, 0, 287, 288, 245, 246, 274, 0, 277, 274,
	0, 270, 251, 0, 0, 0, 259, 0, 111, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 139, 140, 141, 142, 143, 144, 131,
	0, 0, 0, 176, 177, 178, 179, 180, 0, 56,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 52,
	0, 226, 0, 198, 0, 199, 200, 201, 202, 203,
	204, 205, 0, 56, 0, 0, 0, 0, 308, 27,
	0, 303, 110, 0, 0, 61, 65, 0, 67, 68,
	0, 17, 19, 0, 276, 278, 280, 0, 20, 269,
	0, 421, 0, 259, 0, 0, 0, 22, 0, 0,
	113, 114, 116, 132, 0, 134, 136, 121, 122, 123,
	147, 148, 149, 0, 0, 0, 0, 145, 127, 0,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 175, 153, 154, 155, 156, 173, 174, 181,
	0, 0, 57, 235, 150, 0, 282, 0, 0, 0,
	0, 0, 266, 0, 232, 229, 0, 0, 207, 0,
	0, 0, 0, 236, 423, 28, 247, 59, 70, 71,
	73, 74, 75, 83, 0, 66, 62, 0, 0, 0,
	281, 272, 271, 21, 0, 108, 0, 0, 260, 252,
	253, 256, 133, 135, 137, 124, 145, 128, 0, 125,
	0, 0, 186, 0, 56, 152, 189, 190, 0, 0,
	0, 0, 0, 251, 0, 230, 0, 0, 197, 208,
	209, 210, 211, 25, 249, 0, 0, 0, 0, 0,
	90, 0, 0, 93, 0, 0, 0, 0, 84, 0,
	0, 0, 279, 0, 105, 0, 106, 107, 0, 0,
	0, 255, 257, 258, 126, 0, 146, 129, 187, 0,
	0, 217, 0, 0, 0, 267, 227, 196, 233, 0,
	251, 0, 0, 72, 79, 0, 82, 91, 92, 94,
	0, 96, 0, 98, 99, 76, 77, 63, 0, 273,
	109, 261, 262, 254, 130, 188, 191, 218, 0, 222,
	0, 192, 193, 0, 0, 0, 231, 259, 250, 248,
	0, 0, 95, 97, 275, 0, 0, 212, 195, 228,
	263, 80, 81, 219, 0, 223, 0, 0, 0, 16,
	0, 0, 220, 0, 0, 194, 0, 0, 0, 264,
	0, 0, 224, 213, 0, 216, 0, 221, 214, 265,
	0, 0, 215,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 154,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:301
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:307
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:313
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:321
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:326
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:342
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:346
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:362
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:368
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:374
		{
			yyVAL.statement = &Other{}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:378
		{
			yyVAL.statement = &Other{}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:382
		{
			yyVAL.statement = &Other{}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:387
		{
			setAllowComments(yylex, true)
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:391
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:397
		{
			yyVAL.bytes2 = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:401
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:407
		{
			yyVAL.str = UnionStr
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:411
		{
			yyVAL.str = UnionAllStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:415
		{
			yyVAL.str = UnionDistinctStr
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:420
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:424
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:428
		{
			yyVAL.str = SQLCacheStr
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:433
		{
			yyVAL.str = ""
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:437
		{
			yyVAL.str = DistinctStr
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:442
		{
			yyVAL.str = ""
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:446
		{
			yyVAL.str = StraightJoinHint
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:451
		{
			yyVAL.selectExprs = nil
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:455
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:461
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:465
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:471
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:475
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:479
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:483
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:488
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:492
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:503
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:508
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:512
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:518
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:522
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:532
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:536
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:540
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:546
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:559
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:563
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:567
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:571
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:576
		{
			yyVAL.empty = struct{}{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:578
		{
			yyVAL.empty = struct{}{}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:581
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:585
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:589
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:596
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:602
		{
			yyVAL.str = JoinStr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:606
		{
			yyVAL.str = JoinStr
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:610
		{
			yyVAL.str = JoinStr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:614
		{
			yyVAL.str = StraightJoinStr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.str = LeftJoinStr
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.str = LeftJoinStr
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:628
		{
			yyVAL.str = RightJoinStr
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:632
		{
			yyVAL.str = RightJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:638
		{
			yyVAL.str = NaturalJoinStr
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:642
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:652
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:656
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:662
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:666
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:671
		{
			yyVAL.indexHints = nil
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:675
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:679
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:683
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:689
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:693
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:698
		{
			yyVAL.expr = nil
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:702
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:708
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:712
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:716
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:720
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:724
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:728
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:734
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:764
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:768
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:772
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:776
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:780
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:784
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:788
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:794
		{
			yyVAL.str = IsNullStr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:798
		{
			yyVAL.str = IsNotNullStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:802
		{
			yyVAL.str = IsTrueStr
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:806
		{
			yyVAL.str = IsNotTrueStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:810
		{
			yyVAL.str = IsFalseStr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:814
		{
			yyVAL.str = IsNotFalseStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:820
		{
			yyVAL.str = EqualStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:824
		{
			yyVAL.str = LessThanStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:828
		{
			yyVAL.str = GreaterThanStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:832
		{
			yyVAL.str = LessEqualStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:836
		{
			yyVAL.str = GreaterEqualStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:840
		{
			yyVAL.str = NotEqualStr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:844
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:849
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:853
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:859
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:863
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:867
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:873
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:879
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:883
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:901
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:907
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:911
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:915
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:919
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:979
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:983
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:987
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:995
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1009
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1013
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1017
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1035
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1039
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1043
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1061
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1065
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1069
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1073
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1077
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1081
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1085
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1103
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1107
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1122
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1145
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1149
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1153
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1159
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1163
		{
			yyVAL.str = BooleanModeStr
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1167
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1171
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1175
		{
			yyVAL.str = QueryExpansionStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1182
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1186
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1190
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1194
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1198
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1206
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1210
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1215
		{
			yyVAL.expr = nil
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1219
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1224
		{
			yyVAL.str = string("")
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1228
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1234
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1238
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1244
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1249
		{
			yyVAL.expr = nil
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1253
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1259
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1263
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1267
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1273
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1277
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1281
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1285
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1289
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1293
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1297
		{
			yyVAL.expr = &NullVal{}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1303
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1312
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1316
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1321
		{
			yyVAL.exprs = nil
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1325
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1330
		{
			yyVAL.expr = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1334
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1339
		{
			yyVAL.orderBy = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1343
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1349
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1353
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1359
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1364
		{
			yyVAL.str = AscScr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1368
		{
			yyVAL.str = AscScr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1372
		{
			yyVAL.str = DescScr
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1377
		{
			yyVAL.limit = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1385
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1389
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1398
		{
			yyVAL.str = ForUpdateStr
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1402
		{
			yyVAL.str = ShareModeStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1408
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1412
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1417
		{
			yyVAL.columns = nil
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1421
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1427
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1431
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1435
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1439
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1444
		{
			yyVAL.updateExprs = nil
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1448
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1454
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1458
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1464
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1468
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1474
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1478
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1484
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1490
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1500
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1504
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1510
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1519
		{
			yyVAL.byt = 0
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1521
		{
			yyVAL.byt = 1
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1524
		{
			yyVAL.empty = struct{}{}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1526
		{
			yyVAL.empty = struct{}{}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1529
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1531
		{
			yyVAL.str = IgnoreStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1535
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1537
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1541
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1543
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1545
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1547
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1550
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1552
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1555
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1557
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1559
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1562
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1564
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1568
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1572
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1579
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1585
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1589
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1596
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1724
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1733
		{
			decNesting(yylex)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1738
		{
			forceEOF(yylex)
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1743
		{
			forceEOF(yylex)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1747
		{
			forceEOF(yylex)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1751
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
