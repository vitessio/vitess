//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const DATABASES = 57449
const TABLES = 57450
const VITESS_KEYSPACES = 57451
const VITESS_SHARDS = 57452
const VSCHEMA_TABLES = 57453
const INTEGER = 57454
const CHARACTER = 57455
const CURRENT_TIMESTAMP = 57456
const DATABASE = 57457
const CURRENT_DATE = 57458
const CURRENT_TIME = 57459
const LOCALTIME = 57460
const LOCALTIMESTAMP = 57461
const UTC_DATE = 57462
const UTC_TIME = 57463
const UTC_TIMESTAMP = 57464
const REPLACE = 57465
const CONVERT = 57466
const CAST = 57467
const GROUP_CONCAT = 57468
const SEPARATOR = 57469
const MATCH = 57470
const AGAINST = 57471
const BOOLEAN = 57472
const LANGUAGE = 57473
const WITH = 57474
const QUERY = 57475
const EXPANSION = 57476
const UNUSED = 57477

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 180,
	103, 311,
	-2, 307,
	-1, 181,
	103, 312,
	-2, 308,
	-1, 306,
	103, 314,
	-2, 310,
}

const yyNprod = 423
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3400

var yyAct = [...]int{

	435, 443, 388, 342, 607, 281, 258, 175, 536, 606,
	486, 218, 574, 501, 516, 545, 282, 431, 260, 325,
	254, 248, 323, 514, 515, 216, 455, 305, 257, 159,
	176, 422, 530, 29, 195, 428, 221, 488, 387, 3,
	255, 171, 204, 179, 177, 698, 171, 691, 697, 316,
	684, 696, 690, 683, 610, 651, 310, 160, 190, 399,
	241, 243, 67, 314, 171, 479, 171, 480, 183, 161,
	171, 673, 356, 355, 365, 366, 358, 359, 360, 361,
	362, 363, 364, 357, 59, 417, 367, 219, 318, 224,
	479, 479, 480, 480, 554, 194, 356, 355, 365, 366,
	358, 359, 360, 361, 362, 363, 364, 357, 346, 345,
	367, 186, 58, 481, 59, 61, 62, 63, 341, 211,
	340, 339, 589, 184, 170, 347, 64, 60, 242, 377,
	378, 586, 438, 546, 482, 674, 426, 412, 481, 481,
	367, 686, 313, 315, 312, 358, 359, 360, 361, 362,
	363, 364, 357, 386, 682, 367, 212, 208, 347, 482,
	482, 555, 613, 462, 502, 185, 643, 646, 679, 357,
	345, 502, 367, 562, 171, 214, 206, 460, 461, 459,
	171, 219, 189, 187, 198, 188, 347, 317, 171, 193,
	680, 458, 171, 661, 665, 171, 670, 437, 171, 360,
	361, 362, 363, 364, 357, 215, 171, 367, 179, 177,
	239, 206, 191, 223, 246, 437, 179, 177, 246, 420,
	598, 599, 210, 595, 304, 572, 437, 449, 451, 452,
	171, 251, 450, 171, 491, 326, 245, 219, 429, 307,
	210, 250, 179, 177, 335, 247, 192, 556, 244, 306,
	656, 346, 345, 596, 321, 419, 437, 594, 615, 280,
	419, 338, 346, 345, 346, 345, 31, 322, 347, 344,
	572, 346, 345, 348, 334, 375, 538, 539, 540, 347,
	42, 347, 379, 380, 381, 382, 383, 384, 347, 591,
	437, 346, 345, 201, 558, 437, 249, 178, 419, 209,
	491, 437, 343, 389, 436, 437, 525, 213, 347, 429,
	397, 222, 413, 437, 225, 227, 236, 228, 274, 273,
	275, 276, 277, 278, 230, 238, 279, 695, 576, 579,
	580, 581, 577, 171, 578, 582, 210, 219, 657, 419,
	627, 415, 439, 625, 629, 628, 580, 581, 626, 319,
	432, 659, 320, 401, 402, 403, 404, 405, 406, 407,
	658, 624, 623, 165, 166, 446, 447, 456, 694, 457,
	454, 434, 478, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 490, 492,
	453, 326, 246, 689, 692, 197, 326, 326, 489, 518,
	331, 504, 57, 330, 587, 687, 483, 484, 196, 676,
	662, 15, 495, 496, 326, 326, 326, 326, 202, 171,
	506, 677, 171, 306, 509, 326, 171, 524, 493, 494,
	499, 283, 246, 308, 526, 169, 333, 168, 489, 519,
	512, 529, 513, 226, 584, 220, 505, 220, 507, 508,
	162, 163, 427, 389, 523, 521, 232, 197, 329, 444,
	618, 445, 178, 306, 534, 537, 328, 343, 617, 571,
	178, 249, 220, 220, 532, 533, 456, 174, 457, 685,
	634, 542, 543, 544, 33, 15, 541, 548, 220, 31,
	28, 1, 65, 326, 552, 553, 178, 337, 557, 583,
	203, 421, 309, 39, 564, 326, 565, 566, 567, 568,
	32, 551, 416, 311, 561, 182, 327, 576, 579, 580,
	581, 577, 563, 578, 582, 549, 171, 34, 35, 36,
	37, 590, 235, 592, 593, 336, 569, 559, 510, 519,
	497, 511, 432, 588, 585, 675, 597, 535, 616, 570,
	604, 560, 396, 500, 259, 430, 326, 448, 600, 270,
	267, 605, 269, 612, 268, 608, 609, 602, 603, 231,
	414, 332, 349, 252, 240, 199, 575, 573, 171, 171,
	171, 171, 614, 517, 418, 424, 632, 650, 620, 631,
	622, 519, 519, 519, 519, 630, 672, 619, 509, 621,
	164, 229, 30, 167, 14, 639, 641, 642, 13, 647,
	648, 12, 645, 11, 637, 638, 537, 217, 10, 217,
	653, 655, 640, 9, 8, 7, 6, 5, 4, 2,
	0, 237, 0, 0, 0, 652, 0, 654, 389, 0,
	179, 177, 660, 0, 485, 217, 220, 0, 0, 0,
	0, 664, 0, 0, 498, 666, 0, 0, 503, 0,
	217, 0, 669, 0, 0, 0, 0, 671, 0, 0,
	663, 0, 220, 681, 678, 0, 667, 668, 0, 0,
	0, 688, 0, 424, 0, 0, 220, 0, 376, 0,
	0, 0, 693, 0, 0, 0, 527, 0, 528, 0,
	531, 531, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 0, 0, 0, 390, 391, 392, 393,
	394, 395, 181, 398, 400, 400, 400, 400, 400, 400,
	400, 400, 408, 409, 410, 411, 0, 0, 52, 0,
	0, 0, 0, 44, 0, 0, 0, 47, 68, 0,
	0, 0, 0, 0, 0, 0, 54, 51, 173, 0,
	0, 0, 0, 173, 0, 433, 0, 0, 601, 0,
	220, 440, 441, 442, 43, 0, 0, 233, 0, 0,
	234, 173, 0, 173, 0, 0, 0, 173, 356, 355,
	365, 366, 358, 359, 360, 361, 362, 363, 364, 357,
	0, 0, 367, 0, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 611, 0,
	0, 0, 0, 0, 54, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 43, 46, 0, 0, 220, 0, 0, 635,
	49, 636, 520, 0, 356, 355, 365, 366, 358, 359,
	360, 361, 362, 363, 364, 357, 0, 45, 367, 50,
	56, 53, 48, 55, 0, 356, 355, 365, 366, 358,
	359, 360, 361, 362, 363, 364, 357, 0, 0, 367,
	0, 173, 0, 173, 178, 0, 0, 173, 0, 0,
	0, 0, 158, 0, 0, 173, 0, 0, 44, 173,
	44, 46, 173, 0, 0, 173, 0, 0, 49, 44,
	0, 550, 0, 173, 0, 0, 0, 0, 173, 0,
	0, 173, 0, 0, 0, 45, 44, 50, 56, 53,
	48, 55, 217, 0, 52, 0, 0, 173, 0, 256,
	173, 44, 520, 47, 0, 0, 0, 433, 291, 0,
	44, 0, 54, 51, 0, 0, 0, 0, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	180, 274, 273, 275, 276, 277, 278, 0, 0, 279,
	271, 272, 0, 0, 253, 265, 0, 290, 0, 0,
	0, 0, 0, 0, 520, 520, 520, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 324,
	0, 0, 0, 302, 0, 264, 0, 0, 261, 266,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 644,
	158, 0, 649, 300, 0, 0, 0, 0, 44, 46,
	173, 0, 0, 0, 0, 0, 49, 0, 292, 301,
	298, 299, 296, 297, 295, 294, 293, 303, 286, 287,
	289, 0, 288, 45, 0, 50, 56, 53, 48, 55,
	15, 365, 366, 358, 359, 360, 361, 362, 363, 364,
	357, 52, 0, 367, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 44, 0, 54,
	51, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 44, 0, 0, 219, 0, 0, 172, 0, 0,
	0, 0, 0, 52, 0, 44, 173, 0, 256, 173,
	0, 0, 47, 173, 0, 0, 44, 291, 0, 0,
	0, 54, 51, 0, 0, 0, 0, 284, 285, 44,
	0, 44, 0, 44, 44, 44, 219, 0, 437, 180,
	274, 273, 275, 276, 277, 278, 0, 0, 279, 271,
	272, 0, 0, 253, 265, 0, 290, 158, 15, 16,
	17, 18, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 262, 263, 0, 0,
	0, 19, 302, 0, 264, 0, 0, 261, 266, 0,
	45, 0, 50, 56, 53, 48, 55, 0, 0, 158,
	0, 0, 300, 44, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 173, 0, 49, 0, 292, 301, 298,
	299, 296, 297, 295, 294, 293, 303, 286, 287, 289,
	0, 288, 45, 0, 50, 56, 53, 48, 55, 0,
	355, 365, 366, 358, 359, 360, 361, 362, 363, 364,
	357, 44, 0, 367, 0, 0, 0, 0, 20, 21,
	23, 22, 24, 0, 0, 173, 173, 173, 173, 0,
	0, 25, 26, 27, 0, 0, 173, 0, 0, 44,
	0, 0, 44, 0, 44, 147, 134, 108, 149, 86,
	100, 157, 101, 102, 128, 74, 116, 52, 98, 0,
	89, 70, 95, 71, 87, 110, 47, 113, 85, 136,
	119, 155, 0, 123, 0, 54, 51, 0, 0, 112,
	141, 114, 133, 107, 129, 79, 122, 150, 99, 126,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 146, 97, 127, 69, 124, 0, 72,
	75, 156, 144, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 111, 115, 130, 105, 0, 0, 0, 0,
	0, 0, 633, 0, 90, 0, 121, 0, 0, 0,
	76, 73, 109, 0, 0, 0, 78, 0, 91, 131,
	0, 142, 106, 158, 145, 104, 103, 148, 151, 140,
	88, 96, 46, 94, 84, 143, 137, 138, 139, 49,
	0, 82, 83, 80, 81, 117, 118, 152, 153, 154,
	132, 77, 0, 0, 135, 120, 45, 0, 50, 56,
	53, 48, 55, 147, 134, 108, 149, 86, 100, 157,
	101, 102, 128, 74, 116, 52, 98, 0, 89, 70,
	95, 71, 87, 110, 47, 113, 85, 136, 119, 155,
	0, 123, 0, 54, 51, 0, 0, 112, 141, 114,
	133, 107, 129, 79, 122, 150, 99, 126, 219, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 146, 97, 127, 69, 124, 0, 72, 75, 156,
	144, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	111, 115, 130, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 121, 0, 0, 0, 76, 73,
	109, 0, 0, 0, 78, 0, 91, 131, 0, 142,
	106, 158, 145, 104, 103, 148, 151, 140, 88, 96,
	46, 94, 84, 143, 137, 138, 139, 49, 0, 82,
	83, 80, 81, 117, 118, 152, 153, 154, 132, 77,
	0, 0, 135, 120, 45, 0, 50, 56, 53, 48,
	55, 147, 134, 108, 149, 86, 100, 157, 101, 102,
	128, 74, 116, 52, 98, 0, 89, 70, 95, 71,
	87, 110, 47, 113, 85, 136, 119, 155, 0, 123,
	0, 54, 51, 0, 0, 112, 141, 114, 133, 107,
	129, 79, 122, 150, 99, 126, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 146,
	97, 127, 69, 124, 0, 72, 75, 156, 144, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 111, 115,
	130, 105, 0, 0, 0, 0, 0, 0, 522, 0,
	90, 0, 121, 0, 0, 0, 76, 73, 109, 0,
	0, 0, 78, 0, 91, 131, 0, 142, 106, 158,
	145, 104, 103, 148, 151, 140, 88, 96, 46, 94,
	84, 143, 137, 138, 139, 49, 0, 82, 83, 80,
	81, 117, 118, 152, 153, 154, 132, 77, 0, 0,
	135, 120, 45, 0, 50, 56, 53, 48, 55, 147,
	134, 108, 149, 86, 100, 157, 101, 102, 128, 74,
	116, 52, 98, 0, 89, 70, 95, 71, 87, 110,
	47, 113, 85, 136, 119, 155, 0, 123, 0, 54,
	51, 0, 0, 112, 141, 114, 133, 107, 129, 79,
	122, 150, 99, 126, 0, 0, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 146, 97, 127,
	69, 124, 0, 72, 75, 156, 144, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 111, 115, 130, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	121, 0, 0, 0, 76, 73, 109, 0, 0, 0,
	78, 0, 91, 131, 0, 142, 106, 158, 145, 104,
	103, 148, 151, 140, 88, 96, 46, 94, 84, 143,
	137, 138, 139, 49, 0, 82, 83, 80, 81, 117,
	118, 152, 153, 154, 132, 77, 0, 0, 135, 120,
	45, 0, 50, 56, 53, 48, 55, 147, 134, 108,
	149, 86, 100, 157, 101, 102, 128, 74, 116, 52,
	98, 0, 89, 70, 95, 71, 87, 110, 47, 113,
	85, 136, 119, 155, 0, 123, 0, 54, 51, 0,
	0, 112, 141, 114, 133, 107, 129, 79, 122, 150,
	99, 126, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 146, 97, 127, 69, 124,
	0, 72, 75, 156, 144, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 111, 115, 130, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 121, 0,
	0, 0, 76, 73, 109, 0, 0, 0, 78, 0,
	91, 131, 0, 142, 106, 158, 145, 104, 103, 148,
	151, 140, 88, 96, 46, 94, 84, 143, 137, 138,
	139, 49, 0, 82, 83, 80, 81, 117, 118, 152,
	153, 154, 132, 77, 0, 0, 135, 120, 45, 0,
	50, 56, 53, 48, 55, 147, 134, 108, 149, 86,
	100, 157, 101, 102, 128, 74, 116, 52, 98, 0,
	89, 70, 95, 71, 87, 110, 47, 113, 85, 136,
	119, 155, 0, 123, 0, 54, 51, 0, 0, 112,
	141, 114, 133, 107, 129, 79, 122, 150, 99, 126,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 146, 97, 127, 69, 124, 0, 72,
	75, 156, 144, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 111, 115, 130, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 121, 0, 0, 0,
	76, 73, 109, 0, 0, 0, 78, 0, 91, 131,
	0, 142, 106, 158, 145, 104, 103, 148, 151, 140,
	88, 96, 46, 94, 84, 143, 137, 138, 139, 49,
	0, 82, 83, 80, 81, 117, 118, 152, 153, 154,
	132, 77, 0, 0, 135, 120, 45, 0, 50, 56,
	53, 48, 55, 147, 134, 108, 149, 86, 100, 157,
	101, 102, 128, 74, 116, 52, 98, 0, 89, 70,
	95, 71, 87, 110, 47, 113, 85, 136, 119, 155,
	0, 123, 0, 54, 51, 0, 0, 112, 141, 114,
	133, 107, 129, 79, 122, 150, 99, 126, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 146, 97, 127, 69, 124, 0, 72, 75, 156,
	144, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	111, 115, 130, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 121, 0, 0, 0, 76, 73,
	109, 0, 0, 0, 78, 0, 91, 131, 0, 142,
	106, 158, 145, 104, 103, 148, 151, 140, 88, 96,
	46, 94, 84, 143, 137, 138, 139, 49, 0, 82,
	83, 80, 81, 117, 118, 152, 153, 154, 132, 77,
	0, 0, 135, 120, 45, 0, 50, 56, 53, 48,
	55, 52, 0, 0, 487, 0, 256, 0, 0, 0,
	47, 0, 0, 0, 0, 291, 0, 0, 0, 54,
	51, 0, 0, 0, 0, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 219, 547, 0, 180, 274, 273,
	275, 276, 277, 278, 0, 0, 279, 271, 272, 0,
	0, 253, 265, 0, 290, 356, 355, 365, 366, 358,
	359, 360, 361, 362, 363, 364, 357, 0, 0, 367,
	0, 0, 0, 0, 262, 263, 324, 0, 0, 0,
	302, 0, 264, 0, 0, 261, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	300, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 49, 0, 292, 301, 298, 299, 296,
	297, 295, 294, 293, 303, 286, 287, 289, 15, 288,
	45, 0, 50, 56, 53, 48, 55, 0, 0, 52,
	0, 0, 0, 0, 256, 0, 0, 0, 47, 0,
	0, 0, 0, 291, 0, 0, 0, 54, 51, 0,
	0, 0, 0, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 180, 274, 273, 275, 276,
	277, 278, 0, 0, 279, 271, 272, 0, 0, 253,
	265, 0, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 0, 0, 302, 0,
	264, 0, 0, 261, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 0, 300, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 49, 0, 292, 301, 298, 299, 296, 297, 295,
	294, 293, 303, 286, 287, 289, 0, 288, 45, 0,
	50, 56, 53, 48, 55, 52, 0, 0, 0, 0,
	256, 0, 0, 0, 47, 0, 0, 0, 0, 291,
	0, 0, 0, 54, 51, 0, 0, 0, 0, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 180, 274, 273, 275, 276, 277, 278, 0, 0,
	279, 271, 272, 0, 0, 253, 265, 0, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 0, 0, 302, 0, 264, 0, 0, 261,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 0, 300, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 49, 0, 292,
	301, 298, 299, 296, 297, 295, 294, 293, 303, 286,
	287, 289, 52, 288, 45, 0, 50, 56, 53, 48,
	55, 47, 0, 0, 0, 0, 291, 0, 0, 0,
	54, 51, 0, 0, 0, 0, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 180, 274,
	273, 275, 276, 277, 278, 0, 0, 279, 271, 272,
	0, 0, 0, 265, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 0,
	0, 302, 0, 264, 0, 0, 261, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	0, 300, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 49, 0, 292, 301, 298, 299,
	296, 297, 295, 294, 293, 303, 286, 287, 289, 52,
	288, 45, 0, 50, 56, 53, 48, 55, 47, 0,
	0, 0, 0, 291, 0, 0, 0, 54, 51, 0,
	0, 0, 0, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 180, 274, 273, 275, 276,
	277, 278, 0, 0, 279, 0, 0, 0, 0, 0,
	265, 0, 290, 0, 0, 0, 52, 0, 0, 0,
	205, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	52, 0, 262, 263, 54, 51, 0, 0, 302, 47,
	264, 0, 0, 261, 266, 0, 0, 0, 54, 51,
	0, 0, 172, 0, 207, 158, 0, 0, 300, 0,
	0, 0, 0, 0, 46, 0, 43, 0, 0, 0,
	0, 49, 0, 292, 301, 298, 299, 296, 297, 295,
	294, 293, 303, 286, 287, 289, 0, 288, 45, 0,
	50, 56, 53, 48, 55, 52, 0, 0, 0, 423,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 158, 54, 51, 0, 0, 0, 0, 0,
	52, 46, 0, 0, 38, 0, 40, 0, 49, 47,
	41, 43, 0, 425, 0, 46, 0, 0, 54, 51,
	0, 0, 49, 346, 345, 45, 0, 50, 56, 53,
	48, 55, 0, 219, 0, 0, 172, 0, 0, 45,
	347, 50, 56, 53, 48, 55, 52, 0, 0, 0,
	0, 0, 0, 0, 52, 47, 0, 0, 0, 0,
	0, 0, 0, 47, 54, 51, 0, 0, 0, 0,
	0, 158, 54, 51, 0, 0, 0, 0, 0, 0,
	46, 0, 43, 0, 425, 0, 0, 49, 0, 0,
	172, 0, 207, 0, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 45, 46, 50, 56, 53, 48,
	55, 0, 49, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 200, 47, 0, 45,
	0, 50, 56, 53, 48, 55, 54, 51, 0, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 0,
	158, 46, 0, 0, 172, 0, 0, 0, 49, 46,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 52, 0, 45, 0, 50, 56, 53,
	48, 55, 47, 45, 52, 50, 56, 53, 48, 55,
	0, 54, 51, 47, 0, 0, 0, 0, 52, 0,
	0, 0, 54, 51, 0, 0, 0, 47, 0, 180,
	0, 0, 0, 0, 158, 0, 54, 51, 0, 0,
	43, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 50,
	56, 53, 48, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	158, 0, 0, 0, 0, 49, 0, 0, 0, 46,
	0, 0, 0, 0, 158, 0, 49, 0, 0, 0,
	0, 0, 45, 46, 50, 56, 53, 48, 55, 0,
	49, 0, 0, 45, 0, 50, 56, 53, 48, 55,
	0, 0, 0, 0, 0, 0, 351, 45, 354, 50,
	56, 53, 48, 55, 368, 369, 370, 371, 372, 373,
	374, 0, 352, 353, 350, 356, 355, 365, 366, 358,
	359, 360, 361, 362, 363, 364, 357, 0, 0, 367,
}
var yyPact = [...]int{

	1182, -1000, -120, 484, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2933, -1, 16, 4, 15, 2198, -1000, -1000, -1000, -1000,
	479, 431, 326, -1000, -31, 3221, 467, 3196, -48, 11,
	3221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 0, 3221, -1000,
	3221, -58, 159, -58, 3221, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 375, -1000, -1000, 123, 3141, 389,
	2919, 54, -1000, -1000, 3221, 171, -1000, 44, -1000, 53,
	-1000, -1000, 3221, 108, 152, 1458, 3221, 1458, -25, 3221,
	421, 266, 3221, -1000, -1000, 284, 721, -1000, -1000, 287,
	3221, -1000, 3196, 13, -1000, 3077, -1000, -1000, 2050, 460,
	3196, 2608, 1902, 1458, 411, -62, -1000, -1000, -1000, -1000,
	-1000, -1000, 35, -1000, 3221, -1000, -1000, 3221, 1458, 927,
	-1000, 448, -1000, 372, 369, 405, 3196, 3207, -1000, 285,
	-1000, 9, 8, 6, -1000, -1000, -1000, -1000, 453, 2608,
	-1000, 199, -1000, 2608, 3299, -1000, 187, -1000, 25, -1000,
	-1000, 2862, 2862, 2862, 2862, 2862, 2862, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	187, 50, -1000, 2472, 187, 187, 187, 187, 187, 187,
	2608, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, -1000, 34, -1000, -1000, -1000, 263,
	3207, -1000, -29, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 209, -1000, -1000, 2998, 33, 3221, -1000, -1000,
	-1000, -1000, 260, 187, 484, 189, 253, 29, 453, 187,
	187, 187, 443, 446, 199, 2608, 2608, 165, 76, 2735,
	131, 94, 2862, 2862, 2862, 2862, 2862, 2862, 2862, 2862,
	2862, 2862, 2862, 2862, 2862, 2862, 2862, 12, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 479, 264, 264, 40,
	40, 40, 40, 40, 789, 2334, 1902, 261, 249, 199,
	927, 927, 2608, 2608, 3207, 437, 93, 199, 3207, -1000,
	163, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 927, 927,
	927, 927, 1754, 3221, -1000, -1000, 3221, -1000, 460, 927,
	3023, -1000, -1000, 3069, -1000, -1000, 1606, -1000, -1000, 401,
	255, -1000, -1000, 1116, -1000, -1000, 3207, -1000, 3207, 443,
	3207, 3207, 3207, -1000, 2608, 2608, 76, 104, -1000, -1000,
	214, -1000, -1000, -1000, 768, -1000, -1000, -1000, -1000, 131,
	2862, 2862, 2862, 10, 768, 2319, 993, 1183, 40, 107,
	107, 72, 72, 72, 72, 72, 55, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 163, 927, 247, 187,
	-1000, 2608, -1000, 204, 204, 43, 226, 243, -1000, 927,
	100, -1000, 2608, 163, -1000, 204, 163, 204, 204, -1000,
	1458, -1000, 457, -1000, 219, 478, -1000, -1000, -1000, 423,
	1074, -1000, -1000, 28, 377, 187, -1000, 19, -1000, -1000,
	238, -1000, 238, 238, 206, 202, -1000, 197, -1000, -1000,
	-1000, -1000, 10, 768, 702, -1000, 2862, 2862, -1000, 204,
	927, 199, -1000, -1000, 12, 12, 12, -92, 3207, 288,
	88, -1000, 2608, 186, -1000, -1000, -1000, -1000, -1000, -1000,
	455, 445, 3023, 3023, 3023, 3023, -1000, 323, 322, -1000,
	304, 301, 305, 3221, -1000, 174, 1310, 472, -1000, 3207,
	-1000, 3207, -1000, -1000, 2608, 2608, 2608, -1000, -1000, -1000,
	-1000, 2862, 768, 768, -1000, 163, 163, 37, 163, 163,
	187, -1000, -89, -1000, 199, 2608, 453, 2608, 2608, 478,
	201, 289, -1000, -1000, -1000, -1000, 321, -1000, 312, -1000,
	-1000, -1000, -1000, -1000, 3196, -1000, -1000, 199, 199, -1000,
	768, -1000, -1000, -1000, 137, -1000, 381, -1000, -1000, 2862,
	163, 139, 199, 443, 199, 183, 2608, 2608, -1000, -1000,
	171, 145, 12, -14, -1000, -1000, 391, 199, 199, 38,
	134, -1000, 163, 7, -100, -1000, 471, 56, -1000, 376,
	163, -1000, 357, -96, -104, -1000, 359, 12, -1000, -1000,
	332, -1000, 291, -1000, -98, -1000, -102, -106, -1000,
}
var yyPgo = [...]int{

	0, 629, 38, 628, 627, 626, 625, 624, 623, 618,
	613, 611, 608, 604, 510, 603, 602, 34, 601, 600,
	596, 587, 15, 37, 10, 22, 19, 584, 23, 24,
	14, 583, 577, 12, 576, 124, 575, 399, 574, 32,
	21, 573, 40, 572, 571, 28, 20, 569, 564, 562,
	560, 559, 557, 26, 2, 555, 16, 17, 554, 18,
	6, 553, 13, 552, 551, 549, 548, 3, 547, 8,
	546, 1, 545, 540, 535, 532, 35, 7, 30, 516,
	402, 182, 515, 513, 512, 503, 502, 36, 722, 259,
	11, 31, 501, 5, 27, 42, 500, 499, 29, 25,
	4, 9, 492, 491, 490, 484, 431, 0, 59,
}
var yyR1 = [...]int{

	0, 103, 104, 104, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 5, 6, 7, 7, 7, 8, 8, 8,
	9, 10, 10, 10, 11, 102, 102, 102, 12, 13,
	13, 105, 14, 15, 15, 16, 16, 16, 19, 19,
	19, 17, 17, 18, 18, 24, 24, 23, 23, 25,
	25, 25, 25, 92, 92, 92, 91, 91, 27, 27,
	28, 28, 29, 29, 30, 30, 30, 37, 31, 31,
	31, 31, 97, 97, 96, 96, 96, 95, 95, 32,
	32, 32, 32, 33, 33, 33, 33, 34, 34, 36,
	36, 35, 35, 38, 38, 38, 38, 39, 39, 40,
	40, 26, 26, 26, 26, 26, 26, 42, 42, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 52, 52, 52, 52, 52, 52, 43, 43, 43,
	43, 43, 43, 43, 22, 22, 53, 53, 53, 59,
	54, 54, 100, 100, 100, 100, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 50, 50, 50, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 49, 49, 49,
	49, 49, 49, 49, 49, 108, 108, 51, 51, 51,
	51, 20, 20, 20, 20, 20, 101, 101, 101, 101,
	101, 101, 101, 101, 63, 63, 21, 21, 61, 61,
	62, 64, 64, 60, 60, 60, 45, 45, 45, 45,
	45, 45, 45, 47, 47, 47, 65, 65, 66, 66,
	67, 67, 68, 68, 69, 70, 70, 70, 71, 71,
	71, 71, 72, 72, 72, 73, 73, 75, 75, 74,
	74, 74, 74, 76, 76, 44, 44, 55, 55, 57,
	57, 56, 58, 77, 77, 78, 79, 79, 81, 81,
	82, 82, 80, 80, 83, 83, 83, 83, 83, 83,
	84, 84, 85, 85, 85, 86, 86, 89, 89, 90,
	90, 93, 93, 94, 94, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 106, 107, 98,
	99, 99, 99,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 13, 7, 3, 7,
	7, 8, 7, 3, 5, 8, 4, 6, 7, 4,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	3, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 2, 4, 5,
	7, 2, 4, 6, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 1, 3, 0, 3, 1,
	3, 3, 5, 0, 5, 2, 1, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -103, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, -13, 6, 7, 8, 9, 29,
	106, 107, 109, 108, 110, 119, 120, 121, -104, 153,
	-16, 5, -14, -105, -14, -14, -14, -14, 111, -85,
	113, 117, -89, 53, -88, 146, 122, 26, 151, 129,
	148, 36, 17, 150, 35, 152, 149, -80, 113, 115,
	111, 111, 112, 113, 111, -102, 53, -87, -88, 66,
	21, 23, 69, 101, 15, 70, 100, 141, 106, 45,
	133, 134, 131, 132, 124, 28, 9, 24, 120, 20,
	94, 108, 73, 74, 123, 22, 121, 64, 18, 48,
	10, 12, 13, 116, 115, 85, 112, 43, 7, 102,
	25, 82, 39, 27, 41, 83, 16, 135, 136, 30,
	145, 96, 46, 33, 67, 62, 49, 65, 14, 44,
	84, 109, 140, 42, 6, 144, 29, 126, 127, 128,
	119, 40, 111, 125, 72, 114, 63, 5, 117, 8,
	47, 118, 137, 138, 139, 31, 71, 11, 113, -98,
	-98, -2, 19, 20, -19, 37, 38, -15, -80, -37,
	-35, -93, 53, -88, 10, -77, -78, -60, -89, -93,
	53, -88, -82, 116, 112, -35, 111, -35, -35, -81,
	116, 53, -81, -35, -98, -17, 33, 20, 61, -36,
	25, -35, 29, -96, -95, 21, -93, 55, 103, -35,
	51, 75, 103, -35, 67, 53, -99, -106, -90, 50,
	-89, -87, -35, -99, 114, -35, 22, 49, -35, -18,
	40, -47, -89, 56, 59, -75, 29, -106, -35, -77,
	-38, 47, 115, 48, -95, -94, -93, -87, -40, 11,
	-78, -26, -41, 67, -46, -42, 22, -45, -60, -58,
	-59, 101, 90, 91, 98, 68, 102, -50, -48, -49,
	-51, 63, 64, 55, 54, 56, 57, 58, 59, 62,
	-89, -93, -56, -106, 41, 42, 141, 142, 145, 143,
	70, 31, 131, 139, 138, 137, 135, 136, 133, 134,
	116, 132, 96, 140, -90, -94, -87, -99, 22, -86,
	118, -83, 109, 107, 28, 108, 14, 152, 53, -35,
	-35, -99, -23, -25, 92, -26, -93, -79, 18, 10,
	31, 31, -44, 31, -2, -77, -74, -89, -40, 112,
	112, 112, -67, 14, -26, 66, 65, 82, -26, -43,
	85, 67, 83, 84, 69, 87, 86, 97, 90, 91,
	92, 93, 94, 95, 96, 88, 89, 100, 75, 76,
	77, 78, 79, 80, 81, -59, -106, 104, 105, -46,
	-46, -46, -46, -46, -46, -106, 103, -2, -54, -26,
	-106, -106, -106, -106, -106, -106, -63, -26, -106, -108,
	-106, -108, -108, -108, -108, -108, -108, -108, -106, -106,
	-106, -106, 103, 49, -89, -98, -84, 114, -27, 51,
	10, -92, -91, 21, -89, 55, 103, -35, -76, 49,
	-55, -57, -56, -106, -76, -107, 51, 52, 103, -67,
	-106, -106, -106, -71, 16, 15, -26, -26, -52, 62,
	67, 63, 64, -42, -46, -53, -56, -59, 60, 85,
	83, 84, 69, -46, -46, -46, -46, -46, -46, -46,
	-46, -46, -46, -46, -46, -46, -46, -46, -100, 53,
	55, 101, 122, -45, -45, -89, -24, 20, -23, -90,
	-107, 51, -107, -23, -23, -26, -26, -73, -89, -17,
	-61, -62, 71, -89, -107, -23, -24, -23, -23, -90,
	-35, -35, -40, -25, -28, -29, -30, -31, -37, -59,
	-106, -91, 92, -94, 26, 51, -107, -89, -89, -71,
	-39, -89, -39, -39, -26, -68, -69, -26, 62, 63,
	64, -53, -46, -46, -46, -22, 123, 66, -107, -23,
	-106, -26, -107, -107, 51, 118, 21, -107, 51, -23,
	-64, -62, 73, -26, -107, -107, -107, -107, -107, -99,
	-65, 12, 51, -32, -33, -34, 39, 43, 45, 40,
	41, 42, 46, -97, 21, -28, 103, 27, -57, 103,
	-107, 51, -107, -107, 51, 17, 51, -70, 23, 24,
	-22, 66, -46, -46, -107, -24, -101, -100, -101, -101,
	146, -89, -67, 74, -26, 72, -66, 13, 15, -29,
	-30, -29, -30, 39, 39, 39, 44, 39, 44, 39,
	-33, -93, -107, 92, 8, -89, -89, -26, -26, -69,
	-46, -107, -107, 129, -106, -100, 130, -107, -107, -106,
	-21, 144, -26, -67, -26, -54, 49, 49, 39, 39,
	-77, 56, 29, -46, -107, 55, -71, -26, -26, -107,
	51, -100, -20, 85, 149, -72, 18, 30, -100, 130,
	56, -107, 147, 46, 150, 8, 85, 29, -107, 36,
	148, 151, 35, -100, 36, 36, 149, 150, 151,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 41, 41, 41, 41, 41,
	302, 292, 0, 0, 0, 0, 419, 419, 1, 3,
	0, 45, 48, 43, 292, 0, 0, 0, 290, 0,
	415, 303, 304, 307, 308, 404, 405, 406, 407, 408,
	409, 410, 411, 412, 413, 414, 416, 0, 0, 293,
	0, 288, 0, 288, 0, 419, 35, 36, 37, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 415, 39,
	40, 18, 46, 47, 51, 49, 50, 42, 0, 0,
	84, 101, 311, 312, 0, 23, 283, 0, 233, 0,
	-2, -2, 0, 0, 0, 420, 0, 420, 0, 0,
	0, 0, 0, 34, 38, 53, 0, 52, 44, 267,
	0, 100, 0, 103, 85, 0, 87, 88, 0, 109,
	0, 0, 0, 420, 0, 305, 26, 421, 422, 417,
	309, 310, 0, 29, 0, 31, 289, 0, 420, 0,
	54, 0, 243, 0, 0, 0, 0, 0, 99, 109,
	77, 0, 0, 0, 86, 102, 313, 314, 250, 0,
	284, 285, 111, 0, 116, 119, 0, 156, 157, 158,
	159, 0, 0, 0, 0, 0, 0, 181, 182, 183,
	184, 117, 118, 236, 237, 238, 239, 240, 241, 242,
	233, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 205, 205, 205, 205, 205, 205, 205, 205,
	0, 0, 0, 0, 234, 0, -2, 24, 291, 0,
	0, 419, 300, 294, 295, 296, 297, 298, 299, 30,
	32, 33, 68, 57, 59, 63, 0, 0, 286, 287,
	244, 245, 273, 0, 276, 273, 0, 269, 250, 0,
	0, 0, 258, 0, 110, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 138,
	139, 140, 141, 142, 143, 130, 0, 0, 0, 175,
	176, 177, 178, 179, 0, 55, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 51, 0, 225, 0, 197,
	0, 198, 199, 200, 201, 202, 203, 204, 0, 55,
	0, 0, 0, 0, 306, 27, 0, 301, 109, 0,
	0, 60, 64, 0, 66, 67, 0, 17, 19, 0,
	275, 277, 279, 0, 20, 268, 0, 418, 0, 258,
	0, 0, 0, 22, 0, 0, 112, 113, 115, 131,
	0, 133, 135, 120, 121, 122, 146, 147, 148, 0,
	0, 0, 0, 144, 126, 0, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 174, 152,
	153, 154, 155, 172, 173, 180, 0, 0, 56, 234,
	149, 0, 281, 0, 0, 0, 0, 0, 265, 0,
	231, 228, 0, 0, 206, 0, 0, 0, 0, 235,
	420, 28, 246, 58, 69, 70, 72, 73, 74, 82,
	0, 65, 61, 0, 0, 0, 280, 271, 270, 21,
	0, 107, 0, 0, 259, 251, 252, 255, 132, 134,
	136, 123, 144, 127, 0, 124, 0, 0, 185, 0,
	55, 151, 188, 189, 0, 0, 0, 0, 0, 250,
	0, 229, 0, 0, 196, 207, 208, 209, 210, 25,
	248, 0, 0, 0, 0, 0, 89, 0, 0, 92,
	0, 0, 0, 0, 83, 0, 0, 0, 278, 0,
	104, 0, 105, 106, 0, 0, 0, 254, 256, 257,
	125, 0, 145, 128, 186, 0, 0, 216, 0, 0,
	0, 266, 226, 195, 232, 0, 250, 0, 0, 71,
	78, 0, 81, 90, 91, 93, 0, 95, 0, 97,
	98, 75, 76, 62, 0, 272, 108, 260, 261, 253,
	129, 187, 190, 217, 0, 221, 0, 191, 192, 0,
	0, 0, 230, 258, 249, 247, 0, 0, 94, 96,
	274, 0, 0, 211, 194, 227, 262, 79, 80, 218,
	0, 222, 0, 0, 0, 16, 0, 0, 219, 0,
	0, 193, 0, 0, 0, 263, 0, 0, 223, 212,
	0, 215, 0, 220, 213, 264, 0, 0, 214,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 153,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:202
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:207
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:212
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:301
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:307
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:313
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:321
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:326
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:342
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:346
		{
			if string(yyDollar[1].bytes) == "databases" {
				yyVAL.str = ShowDatabasesStr
			} else if string(yyDollar[1].bytes) == "tables" {
				yyVAL.str = ShowTablesStr
			} else if string(yyDollar[1].bytes) == "vitess_keyspaces" {
				yyVAL.str = ShowKeyspacesStr
			} else if string(yyDollar[1].bytes) == "vitess_shards" {
				yyVAL.str = ShowShardsStr
			} else if string(yyDollar[1].bytes) == "vschema_tables" {
				yyVAL.str = ShowVSchemaTablesStr
			} else {
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:362
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:368
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:374
		{
			yyVAL.statement = &Other{}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:378
		{
			yyVAL.statement = &Other{}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:383
		{
			setAllowComments(yylex, true)
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:387
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:393
		{
			yyVAL.bytes2 = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:397
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:403
		{
			yyVAL.str = UnionStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:407
		{
			yyVAL.str = UnionAllStr
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:411
		{
			yyVAL.str = UnionDistinctStr
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:416
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:420
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:424
		{
			yyVAL.str = SQLCacheStr
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:429
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:433
		{
			yyVAL.str = DistinctStr
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:438
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:442
		{
			yyVAL.str = StraightJoinHint
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:447
		{
			yyVAL.selectExprs = nil
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:451
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:457
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:461
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:467
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:471
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:475
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:479
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:484
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:488
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:492
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:499
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:504
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:508
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:514
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:518
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:528
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:532
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:536
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:542
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:555
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:559
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:563
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:567
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:572
		{
			yyVAL.empty = struct{}{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:574
		{
			yyVAL.empty = struct{}{}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:577
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:581
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:585
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:592
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:598
		{
			yyVAL.str = JoinStr
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:602
		{
			yyVAL.str = JoinStr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:606
		{
			yyVAL.str = JoinStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:610
		{
			yyVAL.str = StraightJoinStr
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:616
		{
			yyVAL.str = LeftJoinStr
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.str = LeftJoinStr
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.str = RightJoinStr
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:628
		{
			yyVAL.str = RightJoinStr
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:634
		{
			yyVAL.str = NaturalJoinStr
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:638
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:648
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:652
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:658
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:662
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:667
		{
			yyVAL.indexHints = nil
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:671
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:675
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:679
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:685
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:689
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:694
		{
			yyVAL.expr = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:698
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:704
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:708
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:712
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:716
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:720
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:724
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:730
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:734
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:764
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:768
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:772
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:776
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:780
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:784
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:790
		{
			yyVAL.str = IsNullStr
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:794
		{
			yyVAL.str = IsNotNullStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:798
		{
			yyVAL.str = IsTrueStr
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:802
		{
			yyVAL.str = IsNotTrueStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:806
		{
			yyVAL.str = IsFalseStr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:810
		{
			yyVAL.str = IsNotFalseStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:816
		{
			yyVAL.str = EqualStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:820
		{
			yyVAL.str = LessThanStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:824
		{
			yyVAL.str = GreaterThanStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:828
		{
			yyVAL.str = LessEqualStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:832
		{
			yyVAL.str = GreaterEqualStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:836
		{
			yyVAL.str = NotEqualStr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:840
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:845
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:849
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:855
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:859
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:863
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:869
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:875
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:879
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:903
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:907
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:911
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:915
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:975
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:979
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:983
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:991
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1005
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1009
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1013
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1031
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1035
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1039
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1057
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1061
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1065
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 193:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1069
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1073
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1077
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1081
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1103
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1118
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1145
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1149
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1155
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1159
		{
			yyVAL.str = BooleanModeStr
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1163
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1167
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1171
		{
			yyVAL.str = QueryExpansionStr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1178
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1182
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1186
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1190
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1194
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1198
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1206
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1211
		{
			yyVAL.expr = nil
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1215
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1220
		{
			yyVAL.str = string("")
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1224
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1230
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1234
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1240
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1245
		{
			yyVAL.expr = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1249
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1255
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1259
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1263
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1269
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1273
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1277
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1281
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1285
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1289
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1293
		{
			yyVAL.expr = &NullVal{}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1299
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1308
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1312
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1317
		{
			yyVAL.exprs = nil
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1321
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1326
		{
			yyVAL.expr = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1330
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1335
		{
			yyVAL.orderBy = nil
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1339
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1345
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1349
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1355
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1360
		{
			yyVAL.str = AscScr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1364
		{
			yyVAL.str = AscScr
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1368
		{
			yyVAL.str = DescScr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1373
		{
			yyVAL.limit = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1377
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1385
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1390
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.str = ForUpdateStr
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1398
		{
			yyVAL.str = ShareModeStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1404
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1408
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1413
		{
			yyVAL.columns = nil
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1417
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1423
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1427
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1431
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1435
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1440
		{
			yyVAL.updateExprs = nil
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1444
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1450
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1454
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1460
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1464
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1470
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1474
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1480
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1486
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1496
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1500
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1506
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1515
		{
			yyVAL.byt = 0
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1517
		{
			yyVAL.byt = 1
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1520
		{
			yyVAL.empty = struct{}{}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1522
		{
			yyVAL.empty = struct{}{}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1525
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1527
		{
			yyVAL.str = IgnoreStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1531
		{
			yyVAL.empty = struct{}{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1533
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1535
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1537
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1541
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1544
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1546
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1549
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1551
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1553
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1556
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1558
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1562
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1566
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1573
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1579
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1583
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1590
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1717
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1726
		{
			decNesting(yylex)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1731
		{
			forceEOF(yylex)
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1736
		{
			forceEOF(yylex)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1740
		{
			forceEOF(yylex)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1744
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
