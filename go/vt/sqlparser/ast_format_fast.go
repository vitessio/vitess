// Code generated by ASTFmtGen. DO NOT EDIT.
/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package sqlparser

import (
	"fmt"

	"vitess.io/vitess/go/sqltypes"
)

// FormatFast formats the node.
func (node *Select) FormatFast(buf *TrackedBuffer) {
	if node.With != nil {
		node.With.FormatFast(buf)
	}
	buf.WriteString("select ")
	node.Comments.FormatFast(buf)

	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	if node.Cache != nil {
		if *node.Cache {
			buf.WriteString(SQLCacheStr)
		} else {
			buf.WriteString(SQLNoCacheStr)
		}
	}
	if node.StraightJoinHint {
		buf.WriteString(StraightJoinHint)
	}
	if node.SQLCalcFoundRows {
		buf.WriteString(SQLCalcFoundRowsStr)
	}

	node.SelectExprs.FormatFast(buf)
	buf.WriteString(" from ")

	prefix := ""
	for _, expr := range node.From {
		buf.WriteString(prefix)
		expr.FormatFast(buf)
		prefix = ", "
	}

	node.Where.FormatFast(buf)

	node.GroupBy.FormatFast(buf)

	node.Having.FormatFast(buf)

	if node.Windows != nil {
		buf.WriteByte(' ')
		node.Windows.FormatFast(buf)
	}

	node.OrderBy.FormatFast(buf)

	node.Limit.FormatFast(buf)
	buf.WriteString(node.Lock.ToString())
	node.Into.FormatFast(buf)

}

// FormatFast formats the node.
func (node *CommentOnly) FormatFast(buf *TrackedBuffer) {
	for _, comment := range node.Comments {
		buf.WriteString(comment)
	}
}

// FormatFast formats the node.
func (node *Union) FormatFast(buf *TrackedBuffer) {
	if node.With != nil {
		node.With.FormatFast(buf)
	}

	if requiresParen(node.Left) {
		buf.WriteByte('(')
		node.Left.FormatFast(buf)
		buf.WriteByte(')')
	} else {
		node.Left.FormatFast(buf)
	}

	buf.WriteByte(' ')
	if node.Distinct {
		buf.WriteString(UnionStr)
	} else {
		buf.WriteString(UnionAllStr)
	}
	buf.WriteByte(' ')

	if requiresParen(node.Right) {
		buf.WriteByte('(')
		node.Right.FormatFast(buf)
		buf.WriteByte(')')
	} else {
		node.Right.FormatFast(buf)
	}

	node.OrderBy.FormatFast(buf)
	node.Limit.FormatFast(buf)
	buf.WriteString(node.Lock.ToString())
}

// FormatFast formats the node.
func (node *VStream) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("vstream ")
	node.Comments.FormatFast(buf)
	node.SelectExpr.FormatFast(buf)
	buf.WriteString(" from ")
	node.Table.FormatFast(buf)

}

// FormatFast formats the node.
func (node *Stream) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("stream ")
	node.Comments.FormatFast(buf)
	node.SelectExpr.FormatFast(buf)
	buf.WriteString(" from ")
	node.Table.FormatFast(buf)

}

// FormatFast formats the node.
func (node *Insert) FormatFast(buf *TrackedBuffer) {
	switch node.Action {
	case InsertAct:
		buf.WriteString(InsertStr)
		buf.WriteByte(' ')

		node.Comments.FormatFast(buf)
		buf.WriteString(node.Ignore.ToString())
		buf.WriteString("into ")

		node.Table.Expr.FormatFast(buf)

		node.Partitions.FormatFast(buf)

		node.Columns.FormatFast(buf)
		buf.WriteByte(' ')

		node.Rows.FormatFast(buf)

		node.OnDup.FormatFast(buf)

	case ReplaceAct:
		buf.WriteString(ReplaceStr)
		buf.WriteByte(' ')

		node.Comments.FormatFast(buf)
		buf.WriteString(node.Ignore.ToString())
		buf.WriteString("into ")

		node.Table.Expr.FormatFast(buf)

		node.Partitions.FormatFast(buf)

		node.Columns.FormatFast(buf)
		buf.WriteByte(' ')

		node.Rows.FormatFast(buf)

		node.OnDup.FormatFast(buf)

	default:
		buf.WriteString("Unkown Insert Action")
		buf.WriteByte(' ')

		node.Comments.FormatFast(buf)
		buf.WriteString(node.Ignore.ToString())
		buf.WriteString("into ")

		node.Table.Expr.FormatFast(buf)

		node.Partitions.FormatFast(buf)

		node.Columns.FormatFast(buf)
		buf.WriteByte(' ')

		node.Rows.FormatFast(buf)

		node.OnDup.FormatFast(buf)

	}

}

// FormatFast formats the node.
func (node *With) FormatFast(buf *TrackedBuffer) {
	if len(node.CTEs) == 0 {
		return
	}
	buf.WriteString("with ")

	if node.Recursive {
		buf.WriteString("recursive ")
	}
	ctesLength := len(node.CTEs)
	for i := 0; i < ctesLength-1; i++ {
		node.CTEs[i].FormatFast(buf)
		buf.WriteString(", ")
	}
	node.CTEs[ctesLength-1].FormatFast(buf)
}

// FormatFast formats the node.
func (node *CommonTableExpr) FormatFast(buf *TrackedBuffer) {
	node.ID.FormatFast(buf)
	node.Columns.FormatFast(buf)
	buf.WriteString(" as ")
	node.Subquery.FormatFast(buf)
	buf.WriteByte(' ')
}

// FormatFast formats the node.
func (node *Update) FormatFast(buf *TrackedBuffer) {
	if node.With != nil {
		node.With.FormatFast(buf)
	}
	buf.WriteString("update ")
	node.Comments.FormatFast(buf)
	buf.WriteString(node.Ignore.ToString())
	prefix := ""
	for _, expr := range node.TableExprs {
		buf.WriteString(prefix)
		expr.FormatFast(buf)
		prefix = ", "
	}
	buf.WriteString(" set ")
	node.Exprs.FormatFast(buf)
	node.Where.FormatFast(buf)
	node.OrderBy.FormatFast(buf)
	node.Limit.FormatFast(buf)
}

// FormatFast formats the node.
func (node *Delete) FormatFast(buf *TrackedBuffer) {
	if node.With != nil {
		node.With.FormatFast(buf)
	}
	buf.WriteString("delete ")
	node.Comments.FormatFast(buf)
	if node.Ignore {
		buf.WriteString("ignore ")
	}
	if node.Targets != nil && !node.IsSingleAliasExpr() {
		node.Targets.FormatFast(buf)
		buf.WriteByte(' ')
	}
	prefix := "from "
	for _, expr := range node.TableExprs {
		buf.WriteString(prefix)
		expr.FormatFast(buf)
		prefix = ", "
	}
	node.Partitions.FormatFast(buf)
	node.Where.FormatFast(buf)
	node.OrderBy.FormatFast(buf)
	node.Limit.FormatFast(buf)
}

// FormatFast formats the node.
func (node *Set) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("set ")
	node.Comments.FormatFast(buf)
	node.Exprs.FormatFast(buf)
}

// FormatFast formats the node.
func (node *DropDatabase) FormatFast(buf *TrackedBuffer) {
	exists := ""
	if node.IfExists {
		exists = "if exists "
	}
	buf.WriteString(DropStr)
	buf.WriteByte(' ')
	node.Comments.FormatFast(buf)
	buf.WriteString("database ")
	buf.WriteString(exists)
	node.DBName.FormatFast(buf)
}

// FormatFast formats the node.
func (node *Flush) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(FlushStr)
	if node.IsLocal {
		buf.WriteString(" local")
	}
	if len(node.FlushOptions) != 0 {
		prefix := " "
		for _, option := range node.FlushOptions {
			buf.WriteString(prefix)
			buf.WriteString(option)
			prefix = ", "
		}
	} else {
		buf.WriteString(" tables")
		if len(node.TableNames) != 0 {
			buf.WriteByte(' ')
			node.TableNames.FormatFast(buf)
		}
		if node.ForExport {
			buf.WriteString(" for export")
		}
		if node.WithLock {
			buf.WriteString(" with read lock")
		}
	}
}

// FormatFast formats the node.
func (node *AlterVschema) FormatFast(buf *TrackedBuffer) {
	switch node.Action {
	case CreateVindexDDLAction:
		buf.WriteString("alter vschema create vindex ")
		node.Table.FormatFast(buf)
		buf.WriteByte(' ')
		node.VindexSpec.FormatFast(buf)
	case DropVindexDDLAction:
		buf.WriteString("alter vschema drop vindex ")
		node.Table.FormatFast(buf)
	case AddVschemaTableDDLAction:
		buf.WriteString("alter vschema add table ")
		node.Table.FormatFast(buf)
	case DropVschemaTableDDLAction:
		buf.WriteString("alter vschema drop table ")
		node.Table.FormatFast(buf)
	case AddColVindexDDLAction:
		buf.WriteString("alter vschema on ")
		node.Table.FormatFast(buf)
		buf.WriteString(" add vindex ")
		node.VindexSpec.Name.FormatFast(buf)
		buf.WriteString(" (")
		for i, col := range node.VindexCols {
			if i != 0 {
				buf.WriteString(", ")
				col.FormatFast(buf)
			} else {
				col.FormatFast(buf)
			}
		}
		buf.WriteByte(')')
		if node.VindexSpec.Type.String() != "" {
			buf.WriteByte(' ')
			node.VindexSpec.FormatFast(buf)
		}
	case DropColVindexDDLAction:
		buf.WriteString("alter vschema on ")
		node.Table.FormatFast(buf)
		buf.WriteString(" drop vindex ")
		node.VindexSpec.Name.FormatFast(buf)
	case AddSequenceDDLAction:
		buf.WriteString("alter vschema add sequence ")
		node.Table.FormatFast(buf)
	case DropSequenceDDLAction:
		buf.WriteString("alter vschema drop sequence ")
		node.Table.FormatFast(buf)
	case AddAutoIncDDLAction:
		buf.WriteString("alter vschema on ")
		node.Table.FormatFast(buf)
		buf.WriteString(" add auto_increment ")
		node.AutoIncSpec.FormatFast(buf)
	case DropAutoIncDDLAction:
		buf.WriteString("alter vschema on ")
		node.Table.FormatFast(buf)
		buf.WriteString(" drop auto_increment ")
		node.AutoIncSpec.FormatFast(buf)
	default:
		buf.WriteString(node.Action.ToString())
		buf.WriteString(" table ")
		node.Table.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *AlterMigration) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter vitess_migration")
	if node.UUID != "" {
		buf.WriteString(" '")
		buf.WriteString(node.UUID)
		buf.WriteByte('\'')
	}
	var alterType string
	switch node.Type {
	case RetryMigrationType:
		alterType = "retry"
	case CleanupMigrationType:
		alterType = "cleanup"
	case LaunchMigrationType:
		alterType = "launch"
	case LaunchAllMigrationType:
		alterType = "launch all"
	case CompleteMigrationType:
		alterType = "complete"
	case CompleteAllMigrationType:
		alterType = "complete all"
	case CancelMigrationType:
		alterType = "cancel"
	case CancelAllMigrationType:
		alterType = "cancel all"
	case ThrottleMigrationType:
		alterType = "throttle"
	case ThrottleAllMigrationType:
		alterType = "throttle all"
	case UnthrottleMigrationType:
		alterType = "unthrottle"
	case UnthrottleAllMigrationType:
		alterType = "unthrottle all"
	case ForceCutOverMigrationType:
		alterType = "force_cutover"
	case ForceCutOverAllMigrationType:
		alterType = "force_cutover all"
	}
	buf.WriteByte(' ')
	buf.WriteString(alterType)
	if node.Expire != "" {
		buf.WriteString(" expire '")
		buf.WriteString(node.Expire)
		buf.WriteByte('\'')
	}
	if node.Ratio != nil {
		buf.WriteString(" ratio ")
		node.Ratio.FormatFast(buf)
	}
	if node.Shards != "" {
		buf.WriteString(" vitess_shards '")
		buf.WriteString(node.Shards)
		buf.WriteByte('\'')
	}
}

// FormatFast formats the node.
func (node *RevertMigration) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("revert ")
	node.Comments.FormatFast(buf)
	buf.WriteString("vitess_migration '")
	buf.WriteString(node.UUID)
	buf.WriteByte('\'')
}

// FormatFast formats the node.
func (node *ShowMigrationLogs) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show vitess_migration '")
	buf.WriteString(node.UUID)
	buf.WriteString("' logs")
}

// FormatFast formats the node.
func (node *ShowThrottledApps) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show vitess_throttled_apps")
}

// FormatFast formats the node.
func (node *ShowThrottlerStatus) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show vitess_throttler status")
}

// FormatFast formats the node.
func (node *OptLike) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("like ")
	node.LikeTable.FormatFast(buf)
}

// FormatFast formats the node.
func (node *PartitionSpec) FormatFast(buf *TrackedBuffer) {
	switch node.Action {
	case ReorganizeAction:
		buf.WriteString(ReorganizeStr)
		buf.WriteByte(' ')
		for i, n := range node.Names {
			if i != 0 {
				buf.WriteString(", ")
			}
			n.FormatFast(buf)
		}
		buf.WriteString(" into (")
		for i, pd := range node.Definitions {
			if i != 0 {
				buf.WriteString(", ")
			}
			pd.FormatFast(buf)
		}
		buf.WriteByte(')')
	case AddAction:
		buf.WriteString(AddStr)
		buf.WriteString(" (")
		node.Definitions[0].FormatFast(buf)
		buf.WriteByte(')')
	case DropAction:
		buf.WriteString(DropPartitionStr)
		buf.WriteByte(' ')
		for i, n := range node.Names {
			if i != 0 {
				buf.WriteString(", ")
			}
			n.FormatFast(buf)
		}
	case DiscardAction:
		buf.WriteString(DiscardStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
		buf.WriteString(" tablespace")
	case ImportAction:
		buf.WriteString(ImportStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
		buf.WriteString(" tablespace")
	case TruncateAction:
		buf.WriteString(TruncatePartitionStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case CoalesceAction:
		buf.WriteString(CoalesceStr)
		buf.WriteByte(' ')
		node.Number.FormatFast(buf)
	case ExchangeAction:
		buf.WriteString(ExchangeStr)
		buf.WriteByte(' ')
		node.Names[0].FormatFast(buf)
		buf.WriteString(" with table ")
		node.TableName.FormatFast(buf)
		if node.WithoutValidation {
			buf.WriteString(" without validation")
		}
	case AnalyzeAction:
		buf.WriteString(AnalyzePartitionStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case CheckAction:
		buf.WriteString(CheckStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case OptimizeAction:
		buf.WriteString(OptimizeStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case RebuildAction:
		buf.WriteString(RebuildStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case RepairAction:
		buf.WriteString(RepairStr)
		buf.WriteByte(' ')
		if node.IsAll {
			buf.WriteString("all")
		} else {
			prefix := ""
			for _, n := range node.Names {
				buf.WriteString(prefix)
				n.FormatFast(buf)
				prefix = ", "
			}
		}
	case RemoveAction:
		buf.WriteString(RemoveStr)
	case UpgradeAction:
		buf.WriteString(UpgradeStr)
	default:
		panic("unimplemented")
	}
}

// FormatFast formats the node
func (node *PartitionDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("partition ")
	node.Name.FormatFast(buf)
	node.Options.FormatFast(buf)
}

// FormatFast formats the node
func (node *PartitionDefinitionOptions) FormatFast(buf *TrackedBuffer) {
	if node.ValueRange != nil {
		buf.WriteByte(' ')
		node.ValueRange.FormatFast(buf)
	}
	if node.Engine != nil {
		buf.WriteByte(' ')
		node.Engine.FormatFast(buf)
	}
	if node.Comment != nil {
		buf.WriteString(" comment ")
		node.Comment.FormatFast(buf)
	}
	if node.DataDirectory != nil {
		buf.WriteString(" data directory ")
		node.DataDirectory.FormatFast(buf)
	}
	if node.IndexDirectory != nil {
		buf.WriteString(" index directory ")
		node.IndexDirectory.FormatFast(buf)
	}
	if node.MaxRows != nil {
		buf.WriteString(" max_rows ")
		buf.WriteString(fmt.Sprintf("%d", *node.MaxRows))
	}
	if node.MinRows != nil {
		buf.WriteString(" min_rows ")
		buf.WriteString(fmt.Sprintf("%d", *node.MinRows))
	}
	if node.TableSpace != "" {
		buf.WriteString(" tablespace ")
		buf.WriteString(node.TableSpace)
	}
	if node.SubPartitionDefinitions != nil {
		buf.WriteString(" (")
		node.SubPartitionDefinitions.FormatFast(buf)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node
func (node SubPartitionDefinitions) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node
func (node *SubPartitionDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("subpartition ")
	node.Name.FormatFast(buf)
	node.Options.FormatFast(buf)
}

// FormatFast formats the node
func (node *SubPartitionDefinitionOptions) FormatFast(buf *TrackedBuffer) {
	if node.Engine != nil {
		buf.WriteByte(' ')
		node.Engine.FormatFast(buf)
	}
	if node.Comment != nil {
		buf.WriteString(" comment ")
		node.Comment.FormatFast(buf)
	}
	if node.DataDirectory != nil {
		buf.WriteString(" data directory ")
		node.DataDirectory.FormatFast(buf)
	}
	if node.IndexDirectory != nil {
		buf.WriteString(" index directory ")
		node.IndexDirectory.FormatFast(buf)
	}
	if node.MaxRows != nil {
		buf.WriteString(" max_rows ")
		buf.WriteString(fmt.Sprintf("%d", *node.MaxRows))
	}
	if node.MinRows != nil {
		buf.WriteString(" min_rows ")
		buf.WriteString(fmt.Sprintf("%d", *node.MinRows))
	}
	if node.TableSpace != "" {
		buf.WriteString(" tablespace ")
		buf.WriteString(node.TableSpace)
	}
}

// FormatFast formats the node
func (node *PartitionValueRange) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("values ")
	buf.WriteString(node.Type.ToString())
	if node.Maxvalue {
		buf.WriteString(" maxvalue")
	} else {
		buf.WriteByte(' ')
		node.Range.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *PartitionEngine) FormatFast(buf *TrackedBuffer) {
	if node.Storage {
		buf.WriteString("storage ")
	}
	buf.WriteString("engine ")
	buf.WriteString(node.Name)
}

// FormatFast formats the node.
func (node *PartitionOption) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("\npartition by")
	if node.IsLinear {
		buf.WriteString(" linear")
	}

	switch node.Type {
	case HashType:
		buf.WriteString(" hash (")
		node.Expr.FormatFast(buf)
		buf.WriteByte(')')
	case KeyType:
		buf.WriteString(" key")
		if node.KeyAlgorithm != 0 {
			buf.WriteString(" algorithm = ")
			buf.WriteString(fmt.Sprintf("%d", node.KeyAlgorithm))
		}
		if len(node.ColList) == 0 {
			buf.WriteString(" ()")
		} else {
			buf.WriteByte(' ')
			node.ColList.FormatFast(buf)
		}
	case RangeType, ListType:
		buf.WriteByte(' ')
		buf.WriteString(node.Type.ToString())
		if node.Expr != nil {
			buf.WriteString(" (")
			node.Expr.FormatFast(buf)
			buf.WriteByte(')')
		} else {
			buf.WriteString(" columns ")
			node.ColList.FormatFast(buf)
		}
	}

	if node.Partitions != -1 {
		buf.WriteString(" partitions ")
		buf.WriteString(fmt.Sprintf("%d", node.Partitions))
	}
	if node.SubPartition != nil {
		buf.WriteByte(' ')
		node.SubPartition.FormatFast(buf)
	}
	if node.Definitions != nil {
		buf.WriteString("\n(")
		for i, pd := range node.Definitions {
			if i != 0 {
				buf.WriteString(",\n ")
			}
			pd.FormatFast(buf)
		}
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *SubPartition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("subpartition by")
	if node.IsLinear {
		buf.WriteString(" linear")
	}

	switch node.Type {
	case HashType:
		buf.WriteString(" hash (")
		node.Expr.FormatFast(buf)
		buf.WriteByte(')')
	case KeyType:
		buf.WriteString(" key")
		if node.KeyAlgorithm != 0 {
			buf.WriteString(" algorithm = ")
			buf.WriteString(fmt.Sprintf("%d", node.KeyAlgorithm))
		}
		if len(node.ColList) == 0 {
			buf.WriteString(" ()")
		} else {
			buf.WriteByte(' ')
			node.ColList.FormatFast(buf)
		}
	}

	if node.SubPartitions != -1 {
		buf.WriteString(" subpartitions ")
		buf.WriteString(fmt.Sprintf("%d", node.SubPartitions))
	}
}

// FormatFast formats the node.
func (ts *TableSpec) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("(\n")
	for i, col := range ts.Columns {
		if i == 0 {
			buf.WriteByte('\t')
			col.FormatFast(buf)
		} else {
			buf.WriteString(",\n\t")
			col.FormatFast(buf)
		}
	}
	for _, idx := range ts.Indexes {
		buf.WriteString(",\n\t")
		idx.FormatFast(buf)
	}
	for _, c := range ts.Constraints {
		buf.WriteString(",\n\t")
		c.FormatFast(buf)
	}

	buf.WriteString("\n)")
	for i, opt := range ts.Options {
		if i != 0 {
			buf.WriteString(",\n ")
		}
		buf.WriteByte(' ')
		buf.WriteString(opt.Name)
		if opt.String != "" {
			if opt.CaseSensitive {
				buf.WriteByte(' ')
				buf.WriteString(opt.String)
			} else {
				buf.WriteByte(' ')
				buf.WriteString(opt.String)
			}
		} else if opt.Value != nil {
			buf.WriteByte(' ')
			opt.Value.FormatFast(buf)
		} else {
			buf.WriteString(" (")
			opt.Tables.FormatFast(buf)
			buf.WriteByte(')')
		}
	}
	if ts.PartitionOption != nil {
		ts.PartitionOption.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (col *ColumnDefinition) FormatFast(buf *TrackedBuffer) {
	col.Name.FormatFast(buf)
	buf.WriteByte(' ')
	col.Type.FormatFast(buf)
}

// FormatFast returns a canonical string representation of the type and all relevant options
func (ct *ColumnType) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(ct.Type)

	if ct.Length != nil && ct.Scale != nil {
		buf.WriteByte('(')
		buf.WriteString(fmt.Sprintf("%d", *ct.Length))
		buf.WriteByte(',')
		buf.WriteString(fmt.Sprintf("%d", *ct.Scale))
		buf.WriteByte(')')

	} else if ct.Length != nil {
		buf.WriteByte('(')
		buf.WriteString(fmt.Sprintf("%d", *ct.Length))
		buf.WriteByte(')')
	}

	if ct.EnumValues != nil {
		buf.WriteString("(")
		for i, enum := range ct.EnumValues {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(enum)
		}
		buf.WriteString(")")
	}

	if ct.Unsigned {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[UNSIGNED])
	}
	if ct.Zerofill {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[ZEROFILL])
	}
	if ct.Charset.Name != "" {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[CHARACTER])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[SET])
		buf.WriteByte(' ')
		buf.WriteString(ct.Charset.Name)
	}
	if ct.Charset.Binary {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[BINARY])
	}
	if ct.Options != nil {
		if ct.Options.Collate != "" {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[COLLATE])
			buf.WriteByte(' ')
			buf.WriteString(ct.Options.Collate)
		}
		if ct.Options.Null != nil && ct.Options.As == nil {
			if *ct.Options.Null {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[NULL])
			} else {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[NOT])
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[NULL])
			}
		}
		if ct.Options.Default != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[DEFAULT])
			if ct.Options.DefaultLiteral {
				buf.WriteByte(' ')
				ct.Options.Default.FormatFast(buf)
			} else {
				buf.WriteString(" (")
				ct.Options.Default.FormatFast(buf)
				buf.WriteByte(')')
			}
		}
		if ct.Options.OnUpdate != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[ON])
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[UPDATE])
			buf.WriteByte(' ')
			ct.Options.OnUpdate.FormatFast(buf)
		}
		if ct.Options.As != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[AS])
			buf.WriteString(" (")
			ct.Options.As.FormatFast(buf)
			buf.WriteByte(')')

			if ct.Options.Storage == VirtualStorage {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[VIRTUAL])
			} else if ct.Options.Storage == StoredStorage {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[STORED])
			}
			if ct.Options.Null != nil {
				if *ct.Options.Null {
					buf.WriteByte(' ')
					buf.WriteString(keywordStrings[NULL])
				} else {
					buf.WriteByte(' ')
					buf.WriteString(keywordStrings[NOT])
					buf.WriteByte(' ')
					buf.WriteString(keywordStrings[NULL])
				}
			}
		}
		if ct.Options.Autoincrement {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[AUTO_INCREMENT])
		}
		if ct.Options.Comment != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[COMMENT_KEYWORD])
			buf.WriteByte(' ')
			ct.Options.Comment.FormatFast(buf)
		}
		if ct.Options.Invisible != nil {
			if *ct.Options.Invisible {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[INVISIBLE])
			} else {
				buf.WriteByte(' ')
				buf.WriteString(keywordStrings[VISIBLE])
			}
		}
		if ct.Options.Format != UnspecifiedFormat {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[COLUMN_FORMAT])
			buf.WriteByte(' ')
			buf.WriteString(ct.Options.Format.ToString())
		}
		if ct.Options.EngineAttribute != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[ENGINE_ATTRIBUTE])
			buf.WriteByte(' ')
			ct.Options.EngineAttribute.FormatFast(buf)
		}
		if ct.Options.SecondaryEngineAttribute != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[SECONDARY_ENGINE_ATTRIBUTE])
			buf.WriteByte(' ')
			ct.Options.SecondaryEngineAttribute.FormatFast(buf)
		}
		if ct.Options.KeyOpt == ColKeyPrimary {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[PRIMARY])
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[KEY])
		}
		if ct.Options.KeyOpt == ColKeyUnique {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[UNIQUE])
		}
		if ct.Options.KeyOpt == ColKeyUniqueKey {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[UNIQUE])
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[KEY])
		}
		if ct.Options.KeyOpt == ColKeySpatialKey {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[SPATIAL])
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[KEY])
		}
		if ct.Options.KeyOpt == ColKeyFulltextKey {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[FULLTEXT])
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[KEY])
		}
		if ct.Options.KeyOpt == ColKey {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[KEY])
		}
		if ct.Options.Reference != nil {
			buf.WriteByte(' ')
			ct.Options.Reference.FormatFast(buf)
		}
		if ct.Options.SRID != nil {
			buf.WriteByte(' ')
			buf.WriteString(keywordStrings[SRID])
			buf.WriteByte(' ')
			ct.Options.SRID.FormatFast(buf)
		}
	}
}

// FormatFast formats the node.
func (idx *IndexDefinition) FormatFast(buf *TrackedBuffer) {
	idx.Info.FormatFast(buf)
	buf.WriteString(" (")
	for i, col := range idx.Columns {
		if i != 0 {
			buf.WriteString(", ")
		}
		if col.Expression != nil {
			buf.WriteByte('(')
			col.Expression.FormatFast(buf)
			buf.WriteByte(')')
		} else {
			col.Column.FormatFast(buf)
			if col.Length != nil {
				buf.WriteByte('(')
				buf.WriteString(fmt.Sprintf("%d", *col.Length))
				buf.WriteByte(')')
			}
		}
		if col.Direction == DescOrder {
			buf.WriteString(" desc")
		}
	}
	buf.WriteByte(')')

	for _, opt := range idx.Options {
		buf.WriteByte(' ')
		buf.WriteString(opt.Name)
		if opt.String != "" {
			buf.WriteByte(' ')
			buf.WriteString(opt.String)
		} else if opt.Value != nil {
			buf.WriteByte(' ')
			opt.Value.FormatFast(buf)
		}
	}
}

// FormatFast formats the node.
func (ii *IndexInfo) FormatFast(buf *TrackedBuffer) {
	if ii.ConstraintName.NotEmpty() {
		buf.WriteString("constraint ")
		ii.ConstraintName.FormatFast(buf)
		buf.WriteByte(' ')
	}
	switch ii.Type {
	case IndexTypePrimary:
		buf.WriteString(keywordStrings[PRIMARY])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[KEY])
		return
	case IndexTypeDefault:
		buf.WriteString(keywordStrings[KEY])
	case IndexTypeUnique:
		buf.WriteString(keywordStrings[UNIQUE])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[KEY])
	case IndexTypeSpatial:
		buf.WriteString(keywordStrings[SPATIAL])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[KEY])
	case IndexTypeFullText:
		buf.WriteString(keywordStrings[FULLTEXT])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[KEY])
	}
	if ii.Name.NotEmpty() {
		buf.WriteByte(' ')
		ii.Name.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *AutoIncSpec) FormatFast(buf *TrackedBuffer) {
	node.Column.FormatFast(buf)
	buf.WriteByte(' ')
	buf.WriteString("using ")
	node.Sequence.FormatFast(buf)
}

// FormatFast formats the node. The "CREATE VINDEX" preamble was formatted in
// the containing DDL node Format, so this just prints the type, any
// parameters, and optionally the owner
func (node *VindexSpec) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("using ")
	node.Type.FormatFast(buf)

	numParams := len(node.Params)
	if numParams != 0 {
		buf.WriteString(" with ")
		for i, p := range node.Params {
			if i != 0 {
				buf.WriteString(", ")
			}
			p.FormatFast(buf)
		}
	}
}

// FormatFast formats the node.
func (node VindexParam) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Key.String())
	buf.WriteByte('=')
	buf.WriteString(node.Val)
}

// FormatFast formats the node.
func (c *ConstraintDefinition) FormatFast(buf *TrackedBuffer) {
	if c.Name.NotEmpty() {
		buf.WriteString("constraint ")
		c.Name.FormatFast(buf)
		buf.WriteByte(' ')
	}
	c.Details.Format(buf)
}

// FormatFast formats the node.
func (a ReferenceAction) FormatFast(buf *TrackedBuffer) {
	switch a {
	case Restrict:
		buf.WriteString("restrict")
	case Cascade:
		buf.WriteString("cascade")
	case NoAction:
		buf.WriteString("no action")
	case SetNull:
		buf.WriteString("set null")
	case SetDefault:
		buf.WriteString("set default")
	}
}

// FormatFast formats the node.
func (a MatchAction) FormatFast(buf *TrackedBuffer) {
	switch a {
	case Full:
		buf.WriteString("full")
	case Simple:
		buf.WriteString("simple")
	case Partial:
		buf.WriteString("partial")
	}
}

// FormatFast formats the node.
func (f *ForeignKeyDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("foreign key ")
	f.IndexName.FormatFast(buf)
	f.Source.FormatFast(buf)
	buf.WriteByte(' ')
	f.ReferenceDefinition.FormatFast(buf)
}

// FormatFast formats the node.
func (ref *ReferenceDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("references ")
	ref.ReferencedTable.FormatFast(buf)
	buf.WriteByte(' ')
	ref.ReferencedColumns.FormatFast(buf)
	if ref.Match != DefaultMatch {
		buf.WriteString(" match ")
		ref.Match.FormatFast(buf)
	}
	if ref.OnDelete != DefaultAction {
		buf.WriteString(" on delete ")
		ref.OnDelete.FormatFast(buf)
	}
	if ref.OnUpdate != DefaultAction {
		buf.WriteString(" on update ")
		ref.OnUpdate.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (c *CheckConstraintDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("check (")
	c.Expr.FormatFast(buf)
	buf.WriteByte(')')
	if !c.Enforced {
		buf.WriteString(" not enforced")
	}
}

// FormatFast formats the node.
func (node *Show) FormatFast(buf *TrackedBuffer) {
	node.Internal.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ShowFilter) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	if node.Like != "" {
		buf.WriteString(" like ")
		sqltypes.BufEncodeStringSQL(buf.Builder, node.Like)
	} else {
		buf.WriteString(" where ")
		node.Filter.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *Use) FormatFast(buf *TrackedBuffer) {
	if node.DBName.v != "" {
		buf.WriteString("use ")
		node.DBName.FormatFast(buf)
	} else {
		buf.WriteString("use")
	}
}

// FormatFast formats the node.
func (node *Commit) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("commit")
}

// FormatFast formats the node.
func (node *Begin) FormatFast(buf *TrackedBuffer) {
	if node.TxAccessModes == nil {
		buf.WriteString("begin")
		return
	}
	buf.WriteString("start transaction")
	for idx, accessMode := range node.TxAccessModes {
		if idx == 0 {
			buf.WriteByte(' ')
			buf.WriteString(accessMode.ToString())
			continue
		}
		buf.WriteString(", ")
		buf.WriteString(accessMode.ToString())
	}

}

// FormatFast formats the node.
func (node *Rollback) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rollback")
}

// FormatFast formats the node.
func (node *SRollback) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rollback to ")
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *Savepoint) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("savepoint ")
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *Release) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("release savepoint ")
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ExplainStmt) FormatFast(buf *TrackedBuffer) {
	format := ""
	switch node.Type {
	case EmptyType:
	case AnalyzeType:
		format = AnalyzeStr + " "
	default:
		format = "format = " + node.Type.ToString() + " "
	}
	buf.WriteString("explain ")
	node.Comments.FormatFast(buf)
	buf.WriteString(format)
	node.Statement.FormatFast(buf)
}

// FormatFast formats the node.
func (node *VExplainStmt) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("vexplain ")
	node.Comments.FormatFast(buf)
	buf.WriteString(node.Type.ToString())
	buf.WriteByte(' ')
	node.Statement.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ExplainTab) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("explain ")
	node.Table.FormatFast(buf)
	if node.Wild != "" {
		buf.WriteByte(' ')
		buf.WriteString(node.Wild)
	}
}

// FormatFast formats the node.
func (node *PrepareStmt) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("prepare ")
	node.Comments.FormatFast(buf)
	node.Name.FormatFast(buf)
	buf.WriteString(" from ")
	if node.Statement != nil {
		node.Statement.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *ExecuteStmt) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("execute ")
	node.Comments.FormatFast(buf)
	node.Name.FormatFast(buf)
	if len(node.Arguments) > 0 {
		buf.WriteString(" using ")
	}
	var prefix string
	for _, n := range node.Arguments {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *DeallocateStmt) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("deallocate ")
	node.Comments.FormatFast(buf)
	buf.WriteString("prepare ")
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *CallProc) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("call ")
	node.Name.FormatFast(buf)
	buf.WriteByte('(')
	node.Params.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *Analyze) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("analyze ")
	if node.IsLocal {
		buf.WriteString("local ")
	}
	buf.WriteString("table ")
	node.Table.FormatFast(buf)
}

// FormatFast formats the node.
func (node *OtherAdmin) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("otheradmin")
}

// FormatFast formats the node.
func (node *ParsedComments) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	for _, c := range node.comments {
		buf.WriteString(c)
		buf.WriteByte(' ')
	}
}

// FormatFast formats the node.
func (node SelectExprs) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *StarExpr) FormatFast(buf *TrackedBuffer) {
	if !node.TableName.IsEmpty() {
		node.TableName.FormatFast(buf)
		buf.WriteByte('.')
	}
	buf.WriteByte('*')
}

// FormatFast formats the node.
func (node *AliasedExpr) FormatFast(buf *TrackedBuffer) {
	node.Expr.FormatFast(buf)
	if node.As.NotEmpty() {
		buf.WriteString(" as ")
		node.As.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *Nextval) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("next ")
	node.Expr.FormatFast(buf)
	buf.WriteString(" values")
}

// FormatFast formats the node.
func (node Columns) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	buf.WriteByte('(')
	prefix := ""
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node Partitions) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	prefix := " partition ("
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node TableExprs) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *AliasedTableExpr) FormatFast(buf *TrackedBuffer) {
	node.Expr.FormatFast(buf)
	node.Partitions.FormatFast(buf)
	if node.As.NotEmpty() {
		buf.WriteString(" as ")
		node.As.FormatFast(buf)
		if len(node.Columns) != 0 {
			node.Columns.FormatFast(buf)
		}
	}
	if node.Hints != nil {
		// Hint node provides the space padding.
		node.Hints.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node TableNames) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node TableName) FormatFast(buf *TrackedBuffer) {
	if node.IsEmpty() {
		return
	}
	if node.Qualifier.NotEmpty() {
		node.Qualifier.FormatFast(buf)
		buf.WriteByte('.')
	}
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ParenTableExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte('(')
	node.Exprs.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *JoinCondition) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	if node.On != nil {
		buf.WriteString(" on ")
		node.On.FormatFast(buf)
	}
	if node.Using != nil {
		buf.WriteString(" using ")
		node.Using.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *JoinTableExpr) FormatFast(buf *TrackedBuffer) {
	node.LeftExpr.FormatFast(buf)
	buf.WriteByte(' ')
	buf.WriteString(node.Join.ToString())
	buf.WriteByte(' ')
	node.RightExpr.FormatFast(buf)
	node.Condition.FormatFast(buf)
}

// FormatFast formats the node.
func (node IndexHints) FormatFast(buf *TrackedBuffer) {
	for _, n := range node {
		n.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *IndexHint) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte(' ')
	buf.WriteString(node.Type.ToString())
	buf.WriteByte(' ')
	if node.ForType != NoForType {
		buf.WriteString("for ")
		buf.WriteString(node.ForType.ToString())
		buf.WriteByte(' ')
	}
	if len(node.Indexes) == 0 {
		buf.WriteString("()")
	} else {
		prefix := "("
		for _, n := range node.Indexes {
			buf.WriteString(prefix)
			n.FormatFast(buf)
			prefix = ", "
		}
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *Where) FormatFast(buf *TrackedBuffer) {
	if node == nil || node.Expr == nil {
		return
	}
	buf.WriteByte(' ')
	buf.WriteString(node.Type.ToString())
	buf.WriteByte(' ')
	node.Expr.FormatFast(buf)
}

// FormatFast formats the node.
func (node Exprs) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *AndExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteString(" and ")
	buf.printExpr(node, node.Right, false)
}

// FormatFast formats the node.
func (node *OrExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteString(" or ")
	buf.printExpr(node, node.Right, false)
}

// FormatFast formats the node.
func (node *XorExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteString(" xor ")
	buf.printExpr(node, node.Right, false)
}

// FormatFast formats the node.
func (node *NotExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("not ")
	buf.printExpr(node, node.Expr, true)
}

// FormatFast formats the node.
func (node *ComparisonExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteByte(' ')
	buf.WriteString(node.Operator.ToString())
	buf.WriteByte(' ')
	buf.printExpr(node, node.Right, false)
	if node.Escape != nil {
		buf.WriteString(" escape ")
		buf.printExpr(node, node.Escape, true)
	}
}

// FormatFast formats the node.
func (node *BetweenExpr) FormatFast(buf *TrackedBuffer) {
	if node.IsBetween {
		buf.printExpr(node, node.Left, true)
		buf.WriteString(" between ")
		buf.printExpr(node, node.From, true)
		buf.WriteString(" and ")
		buf.printExpr(node, node.To, false)
	} else {
		buf.printExpr(node, node.Left, true)
		buf.WriteString(" not between ")
		buf.printExpr(node, node.From, true)
		buf.WriteString(" and ")
		buf.printExpr(node, node.To, false)
	}
}

// FormatFast formats the node.
func (node *IsExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteByte(' ')
	buf.WriteString(node.Right.ToString())
}

// FormatFast formats the node.
func (node *ExistsExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("exists ")
	buf.printExpr(node, node.Subquery, true)
}

// FormatFast formats the node.
func (node *AssignmentExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteString(" := ")
	buf.printExpr(node, node.Right, false)
}

// FormatFast formats the node.
func (node *Literal) FormatFast(buf *TrackedBuffer) {
	switch node.Type {
	case StrVal:
		sqltypes.MakeTrusted(sqltypes.VarBinary, node.Bytes()).EncodeSQL(buf)
	case IntVal, FloatVal, DecimalVal, HexNum, BitNum:
		buf.WriteString(node.Val)
	case HexVal:
		buf.WriteString("X'")
		buf.WriteString(node.Val)
		buf.WriteByte('\'')
	case DateVal:
		buf.WriteString("date'")
		buf.WriteString(node.Val)
		buf.WriteByte('\'')
	case TimeVal:
		buf.WriteString("time'")
		buf.WriteString(node.Val)
		buf.WriteByte('\'')
	case TimestampVal:
		buf.WriteString("timestamp'")
		buf.WriteString(node.Val)
		buf.WriteByte('\'')
	default:
		panic("unexpected")
	}
}

// FormatFast formats the node.
func (node *Argument) FormatFast(buf *TrackedBuffer) {
	buf.WriteArg(":", node.Name)
	if node.Type >= 0 {
		// For bind variables that are statically typed, emit their type as an adjacent comment.
		// This comment will be ignored by older versions of Vitess (and by MySQL) but will provide
		// type safety when using the query as a cache key.
		buf.WriteString(" /* ")
		buf.WriteString(node.Type.String())
		buf.WriteString(" */")
	}
}

// FormatFast formats the node.
func (node *NullVal) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("null")
}

// FormatFast formats the node.
func (node BoolVal) FormatFast(buf *TrackedBuffer) {
	if node {
		buf.WriteString("true")
	} else {
		buf.WriteString("false")
	}
}

// FormatFast formats the node.
func (node *ColName) FormatFast(buf *TrackedBuffer) {
	if !node.Qualifier.IsEmpty() {
		node.Qualifier.FormatFast(buf)
		buf.WriteByte('.')
	}
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node ValTuple) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte('(')
	Exprs(node).FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *Subquery) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte('(')
	node.Select.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *DerivedTable) FormatFast(buf *TrackedBuffer) {
	if node.Lateral {
		buf.WriteString("lateral ")
	}
	buf.WriteByte('(')
	node.Select.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node ListArg) FormatFast(buf *TrackedBuffer) {
	buf.WriteArg("::", string(node))
}

// FormatFast formats the node.
func (node *BinaryExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Left, true)
	buf.WriteByte(' ')
	buf.WriteString(node.Operator.ToString())
	buf.WriteByte(' ')
	buf.printExpr(node, node.Right, false)
}

// FormatFast formats the node.
func (node *UnaryExpr) FormatFast(buf *TrackedBuffer) {
	if _, unary := node.Expr.(*UnaryExpr); unary {
		// They have same precedence so parenthesis is not required.
		buf.WriteString(node.Operator.ToString())
		buf.WriteByte(' ')
		buf.printExpr(node, node.Expr, true)
		return
	}
	buf.WriteString(node.Operator.ToString())
	buf.printExpr(node, node.Expr, true)
}

// FormatFast formats the node.
func (node *IntroducerExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.CharacterSet)
	buf.WriteByte(' ')
	buf.printExpr(node, node.Expr, true)
}

// FormatFast formats the node.
func (node *TimestampDiffExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("timestampdiff(")
	buf.WriteString(node.Unit.ToString())
	buf.WriteString(", ")
	buf.printExpr(node, node.Expr1, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Expr2, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *ExtractFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("extract(")
	buf.WriteString(node.IntervalType.ToString())
	buf.WriteString(" from ")
	buf.printExpr(node, node.Expr, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *RegexpInstrExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("regexp_instr(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Pattern, true)
	if node.Position != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Position, true)
	}
	if node.Occurrence != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Occurrence, true)
	}
	if node.ReturnOption != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.ReturnOption, true)
	}
	if node.MatchType != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.MatchType, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *RegexpLikeExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("regexp_like(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Pattern, true)
	if node.MatchType != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.MatchType, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *RegexpReplaceExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("regexp_replace(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Pattern, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Repl, true)
	if node.Position != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Position, true)
	}
	if node.Occurrence != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Occurrence, true)
	}
	if node.MatchType != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.MatchType, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *RegexpSubstrExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("regexp_substr(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Pattern, true)
	if node.Position != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Position, true)
	}
	if node.Occurrence != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Occurrence, true)
	}
	if node.MatchType != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.MatchType, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *IntervalDateExpr) FormatFast(buf *TrackedBuffer) {
	switch node.Syntax {
	case IntervalDateExprAdddate, IntervalDateExprSubdate:
		if node.Unit == IntervalNone {
			buf.WriteString(node.FnName())
			buf.WriteByte('(')
			buf.printExpr(node, node.Date, true)
			buf.WriteString(", ")
			buf.printExpr(node, node.Interval, true)
			buf.WriteByte(')')
			return
		}
		fallthrough
	case IntervalDateExprDateAdd, IntervalDateExprDateSub:
		buf.WriteString(node.FnName())
		buf.WriteByte('(')
		buf.printExpr(node, node.Date, true)
		buf.WriteString(", interval ")
		buf.printExpr(node, node.Interval, true)
		buf.WriteByte(' ')
		buf.WriteString(node.Unit.ToString())
		buf.WriteByte(')')
	case IntervalDateExprBinaryAdd:
		buf.printExpr(node, node.Date, true)
		buf.WriteString(" + interval ")
		buf.printExpr(node, node.Interval, false)
		buf.WriteByte(' ')
		buf.WriteString(node.Unit.ToString())
	case IntervalDateExprBinaryAddLeft:
		buf.WriteString("interval ")
		buf.printExpr(node, node.Interval, true)
		buf.WriteByte(' ')
		buf.WriteString(node.Unit.ToString())
		buf.WriteString(" + ")
		buf.printExpr(node, node.Date, false)
	case IntervalDateExprBinarySub:
		buf.printExpr(node, node.Date, true)
		buf.WriteString(" - interval ")
		buf.printExpr(node, node.Interval, false)
		buf.WriteByte(' ')
		buf.WriteString(node.Unit.ToString())
	case IntervalDateExprTimestampadd:
		buf.WriteString("timestampadd(")
		buf.WriteString(node.Unit.ToString())
		buf.WriteString(", ")
		buf.printExpr(node, node.Interval, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.Date, true)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *TrimFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.TrimFuncType.ToString())
	buf.WriteByte('(')
	if node.TrimFuncType == NormalTrimType {
		var from bool
		if node.Type != NoTrimType {
			buf.WriteString(node.Type.ToString())
			buf.WriteByte(' ')
			from = true
		}
		if node.TrimArg != nil {
			buf.printExpr(node, node.TrimArg, true)
			buf.WriteByte(' ')
			from = true
		}

		if from {
			buf.WriteString("from ")
		}
	}
	buf.printExpr(node, node.StringArg, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *WeightStringFuncExpr) FormatFast(buf *TrackedBuffer) {
	if node.As != nil {
		buf.WriteString("weight_string(")
		buf.printExpr(node, node.Expr, true)
		buf.WriteString(" as ")
		node.As.FormatFast(buf)
		buf.WriteByte(')')
	} else {
		buf.WriteString("weight_string(")
		buf.printExpr(node, node.Expr, true)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *CurTimeFuncExpr) FormatFast(buf *TrackedBuffer) {
	if node.Fsp > 0 {
		buf.WriteString(node.Name.String())
		buf.WriteByte('(')
		buf.WriteString(fmt.Sprintf("%d", node.Fsp))
		buf.WriteByte(')')
	} else {
		buf.WriteString(node.Name.String())
		buf.WriteString("()")
	}
}

// FormatFast formats the node.
func (node *CollateExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(" collate ")
	buf.WriteString(node.Collation)
}

// FormatFast formats the node.
func (node *FuncExpr) FormatFast(buf *TrackedBuffer) {
	if node.Qualifier.NotEmpty() {
		node.Qualifier.FormatFast(buf)
		buf.WriteByte('.')
	}
	// Function names should not be back-quoted even
	// if they match a reserved word, only if they contain illegal characters
	funcName := node.Name.String()

	if containEscapableChars(funcName, NoAt) {
		writeEscapedString(buf, funcName)
	} else {
		buf.WriteString(funcName)
	}
	buf.WriteByte('(')
	node.Exprs.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GroupConcatExpr) FormatFast(buf *TrackedBuffer) {
	if node.Distinct {
		buf.WriteString("group_concat(")
		buf.WriteString(DistinctStr)
		node.Exprs.FormatFast(buf)
		node.OrderBy.FormatFast(buf)
	} else {
		buf.WriteString("group_concat(")
		node.Exprs.FormatFast(buf)
		node.OrderBy.FormatFast(buf)
	}
	if node.Separator != "" {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[SEPARATOR])
		buf.WriteByte(' ')
		buf.WriteString(node.Separator)
	}
	node.Limit.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *ValuesFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("values(")
	buf.printExpr(node, node.Name, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONPrettyExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_pretty(")
	buf.printExpr(node, node.JSONVal, true)
	buf.WriteByte(')')

}

// FormatFast formats the node
func (node *JSONStorageFreeExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_storage_free(")
	buf.printExpr(node, node.JSONVal, true)
	buf.WriteByte(')')

}

// FormatFast formats the node
func (node *JSONStorageSizeExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_storage_size(")
	buf.printExpr(node, node.JSONVal, true)
	buf.WriteByte(')')

}

// FormatFast formats the node
func (node *OverClause) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("over")
	if node.WindowName.NotEmpty() {
		buf.WriteByte(' ')
		node.WindowName.FormatFast(buf)
	}
	if node.WindowSpec != nil {
		buf.WriteString(" (")
		node.WindowSpec.FormatFast(buf)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node
func (node *WindowSpecification) FormatFast(buf *TrackedBuffer) {
	if node.Name.NotEmpty() {
		buf.WriteByte(' ')
		node.Name.FormatFast(buf)
	}
	if node.PartitionClause != nil {
		buf.WriteString(" partition by ")
		node.PartitionClause.FormatFast(buf)
	}
	if node.OrderClause != nil {
		node.OrderClause.FormatFast(buf)
	}
	if node.FrameClause != nil {
		node.FrameClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *FrameClause) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte(' ')
	buf.WriteString(node.Unit.ToString())
	if node.End != nil {
		buf.WriteString(" between")
		node.Start.FormatFast(buf)
		buf.WriteString(" and")
		node.End.FormatFast(buf)
	} else {
		node.Start.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *NullTreatmentClause) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte(' ')
	buf.WriteString(node.Type.ToString())
}

// FormatFast formats the node
func (node *FromFirstLastClause) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte(' ')
	buf.WriteString(node.Type.ToString())
}

// FormatFast formats the node
func (node *FramePoint) FormatFast(buf *TrackedBuffer) {
	if node.Expr != nil {
		if node.Unit != IntervalNone {
			buf.WriteString(" interval ")
			node.Expr.FormatFast(buf)
			buf.WriteByte(' ')
			buf.WriteString(node.Unit.ToString())
		} else {
			buf.WriteByte(' ')
			node.Expr.FormatFast(buf)
		}
	}
	buf.WriteByte(' ')
	buf.WriteString(node.Type.ToString())
}

// FormatFast formats the node
func (node *ArgumentLessWindowExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteString("()")
	if node.OverClause != nil {
		buf.WriteByte(' ')
		node.OverClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *FirstOrLastValueExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Expr, true)
	buf.WriteByte(')')
	if node.NullTreatmentClause != nil {
		node.NullTreatmentClause.FormatFast(buf)
	}
	if node.OverClause != nil {
		buf.WriteByte(' ')
		node.OverClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *NtileExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("ntile(")
	buf.printExpr(node, node.N, true)
	buf.WriteString(")")
	if node.OverClause != nil {
		buf.WriteByte(' ')
		node.OverClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *NTHValueExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("nth_value(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.N, true)
	buf.WriteString(")")
	if node.FromFirstLastClause != nil {
		node.FromFirstLastClause.FormatFast(buf)
	}
	if node.NullTreatmentClause != nil {
		node.NullTreatmentClause.FormatFast(buf)
	}
	if node.OverClause != nil {
		buf.WriteByte(' ')
		node.OverClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *LagLeadExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Expr, true)
	if node.N != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.N, true)
	}
	if node.Default != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Default, true)
	}
	buf.WriteString(")")
	if node.NullTreatmentClause != nil {
		node.NullTreatmentClause.FormatFast(buf)
	}
	if node.OverClause != nil {
		buf.WriteByte(' ')
		node.OverClause.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *ExtractValueExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("extractvalue(")
	buf.printExpr(node, node.Fragment, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.XPathExpr, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *UpdateXMLExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("updatexml(")
	buf.printExpr(node, node.Target, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.XPathExpr, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.NewXML, true)
	buf.WriteByte(')')
}

func (node *PerformanceSchemaFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	if node.Argument != nil {
		buf.printExpr(node, node.Argument, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GTIDFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Set1, true)
	if node.Set2 != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Set2, true)
	}
	if node.Timeout != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Timeout, true)
	}
	if node.Channel != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Channel, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *SubstrExpr) FormatFast(buf *TrackedBuffer) {
	if node.To == nil {
		buf.WriteString("substr(")
		buf.printExpr(node, node.Name, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.From, true)
		buf.WriteByte(')')
	} else {
		buf.WriteString("substr(")
		buf.printExpr(node, node.Name, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.From, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.To, true)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *InsertExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("insert(")
	buf.printExpr(node, node.Str, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Pos, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Len, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.NewStr, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *IntervalFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("interval(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	node.Exprs.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *LocateExpr) FormatFast(buf *TrackedBuffer) {
	if node.Pos != nil {
		buf.WriteString("locate(")
		buf.printExpr(node, node.SubStr, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.Str, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.Pos, true)
		buf.WriteByte(')')
	} else {
		buf.WriteString("locate(")
		buf.printExpr(node, node.SubStr, true)
		buf.WriteString(", ")
		buf.printExpr(node, node.Str, true)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *CharExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("char(")
	node.Exprs.FormatFast(buf)
	if node.Charset != "" {
		buf.WriteString(" using ")
		buf.WriteString(node.Charset)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *NamedWindow) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("window ")
	node.Windows.FormatFast(buf)
}

// FormatFast formats the node.
func (node NamedWindows) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *WindowDefinition) FormatFast(buf *TrackedBuffer) {
	node.Name.FormatFast(buf)
	buf.WriteString(" AS (")
	node.WindowSpec.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node WindowDefinitions) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *CastExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("cast(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(" as ")
	node.Type.FormatFast(buf)
	if node.Array {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[ARRAY])
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *ConvertExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("convert(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(", ")
	node.Type.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *ConvertUsingExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("convert(")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(" using ")
	buf.WriteString(node.Type)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *ConvertType) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type)
	if node.Length != nil {
		buf.WriteByte('(')
		buf.WriteString(fmt.Sprintf("%d", *node.Length))
		if node.Scale != nil {
			buf.WriteString(", ")
			buf.WriteString(fmt.Sprintf("%d", *node.Scale))
		}
		buf.WriteByte(')')
	}
	if node.Charset.Name != "" {
		buf.WriteString(" character set ")
		buf.WriteString(node.Charset.Name)
	}
	if node.Charset.Binary {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[BINARY])
	}
}

// FormatFast formats the node
func (node *MatchExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("match(")
	for i, col := range node.Columns {
		if i != 0 {
			buf.WriteString(", ")
			buf.printExpr(node, col, true)
		} else {
			buf.printExpr(node, col, true)
		}
	}
	buf.WriteString(") against (")
	buf.printExpr(node, node.Expr, true)
	buf.WriteString(node.Option.ToString())
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *CaseExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("case ")
	if node.Expr != nil {
		buf.printExpr(node, node.Expr, true)
		buf.WriteByte(' ')
	}
	for _, when := range node.Whens {
		when.FormatFast(buf)
		buf.WriteByte(' ')
	}
	if node.Else != nil {
		buf.WriteString("else ")
		buf.printExpr(node, node.Else, true)
		buf.WriteByte(' ')
	}
	buf.WriteString("end")
}

// FormatFast formats the node.
func (node *Default) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("default")
	if node.ColName != "" {
		buf.WriteByte('(')
		formatID(buf, node.ColName, NoAt)
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node *When) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("when ")
	node.Cond.FormatFast(buf)
	buf.WriteString(" then ")
	node.Val.FormatFast(buf)
}

// FormatFast formats the node.
func (node GroupBy) FormatFast(buf *TrackedBuffer) {
	prefix := " group by "
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node OrderBy) FormatFast(buf *TrackedBuffer) {
	prefix := " order by "
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *Order) FormatFast(buf *TrackedBuffer) {
	if node, ok := node.Expr.(*NullVal); ok {
		buf.printExpr(node, node, true)
		return
	}
	if node, ok := node.Expr.(*FuncExpr); ok {
		if node.Name.Lowered() == "rand" {
			buf.printExpr(node, node, true)
			return
		}
	}

	node.Expr.FormatFast(buf)
	buf.WriteByte(' ')
	buf.WriteString(node.Direction.ToString())
}

// FormatFast formats the node.
func (node *Limit) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	buf.WriteString(" limit ")
	if node.Offset != nil {
		node.Offset.FormatFast(buf)
		buf.WriteString(", ")
	}
	node.Rowcount.FormatFast(buf)
}

// FormatFast formats the node.
func (node Values) FormatFast(buf *TrackedBuffer) {
	prefix := "values "
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node UpdateExprs) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *UpdateExpr) FormatFast(buf *TrackedBuffer) {
	node.Name.FormatFast(buf)
	buf.WriteString(" = ")
	node.Expr.FormatFast(buf)
}

// FormatFast formats the node.
func (node SetExprs) FormatFast(buf *TrackedBuffer) {
	var prefix string
	for _, n := range node {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node.
func (node *SetExpr) FormatFast(buf *TrackedBuffer) {
	// We don't have to backtick set variable names.
	switch {
	case node.Var.Name.EqualString("charset") || node.Var.Name.EqualString("names"):
		buf.WriteString(node.Var.Name.String())
		buf.WriteByte(' ')
		node.Expr.FormatFast(buf)
	default:
		node.Var.FormatFast(buf)
		buf.WriteString(" = ")
		node.Expr.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node OnDup) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	buf.WriteString(" on duplicate key update ")
	UpdateExprs(node).FormatFast(buf)
}

// FormatFast formats the node.
func (node IdentifierCI) FormatFast(buf *TrackedBuffer) {
	if node.IsEmpty() {
		return
	}
	formatID(buf, node.val, NoAt)
}

// FormatFast formats the node.
func (node IdentifierCS) FormatFast(buf *TrackedBuffer) {
	formatID(buf, node.v, NoAt)
}

// FormatFast formats the node.
func (node *Load) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("AST node missing for Load type")
}

// FormatFast formats the node.
func (node *ShowBasic) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show")
	if node.Full {
		buf.WriteString(" full")
	}
	buf.WriteString(node.Command.ToString())
	if !node.Tbl.IsEmpty() {
		buf.WriteString(" from ")
		node.Tbl.FormatFast(buf)
	}
	if node.DbName.NotEmpty() {
		buf.WriteString(" from ")
		node.DbName.FormatFast(buf)
	}
	node.Filter.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ShowCreate) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show")
	buf.WriteString(node.Command.ToString())
	buf.WriteByte(' ')
	node.Op.FormatFast(buf)
}

// FormatFast formats the node.
func (node *ShowOther) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("show ")
	buf.WriteString(node.Command)
}

// FormatFast formats the node.
func (node *SelectInto) FormatFast(buf *TrackedBuffer) {
	if node == nil {
		return
	}
	buf.WriteString(node.Type.ToString())
	buf.WriteString(node.FileName)
	if node.Charset.Name != "" {
		buf.WriteString(" character set ")
		buf.WriteString(node.Charset.Name)
	}
	buf.WriteString(node.FormatOption)
	buf.WriteString(node.ExportOption)
	buf.WriteString(node.Manifest)
	buf.WriteString(node.Overwrite)
}

// FormatFast formats the node.
func (node *CreateDatabase) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("create database ")
	node.Comments.FormatFast(buf)
	if node.IfNotExists {
		buf.WriteString("if not exists ")
	}
	node.DBName.FormatFast(buf)
	if node.CreateOptions != nil {
		for _, createOption := range node.CreateOptions {
			if createOption.IsDefault {
				buf.WriteString(" default")
			}
			buf.WriteString(createOption.Type.ToString())
			buf.WriteByte(' ')
			buf.WriteString(createOption.Value)
		}
	}
}

// FormatFast formats the node.
func (node *AlterDatabase) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter database")
	if node.DBName.NotEmpty() {
		buf.WriteByte(' ')
		node.DBName.FormatFast(buf)
	}
	if node.UpdateDataDirectory {
		buf.WriteString(" upgrade data directory name")
	}
	if node.AlterOptions != nil {
		for _, createOption := range node.AlterOptions {
			if createOption.IsDefault {
				buf.WriteString(" default")
			}
			buf.WriteString(createOption.Type.ToString())
			buf.WriteByte(' ')
			buf.WriteString(createOption.Value)
		}
	}
}

// FormatFast formats the node.
func (node *CreateTable) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("create ")
	node.Comments.FormatFast(buf)
	if node.Temp {
		buf.WriteString("temporary ")
	}
	buf.WriteString("table ")

	if node.IfNotExists {
		buf.WriteString("if not exists ")
	}
	node.Table.FormatFast(buf)

	if node.OptLike != nil {
		buf.WriteByte(' ')
		node.OptLike.FormatFast(buf)
	}
	if node.TableSpec != nil {
		buf.WriteByte(' ')
		node.TableSpec.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *CreateView) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("create ")
	node.Comments.FormatFast(buf)
	if node.IsReplace {
		buf.WriteString("or replace ")
	}
	if node.Algorithm != "" {
		buf.WriteString("algorithm = ")
		buf.WriteString(node.Algorithm)
		buf.WriteByte(' ')
	}
	if node.Definer != nil {
		buf.WriteString("definer = ")
		node.Definer.FormatFast(buf)
		buf.WriteByte(' ')
	}
	if node.Security != "" {
		buf.WriteString("sql security ")
		buf.WriteString(node.Security)
		buf.WriteByte(' ')
	}
	buf.WriteString("view ")
	node.ViewName.FormatFast(buf)
	node.Columns.FormatFast(buf)
	buf.WriteString(" as ")
	node.Select.FormatFast(buf)
	if node.CheckOption != "" {
		buf.WriteString(" with ")
		buf.WriteString(node.CheckOption)
		buf.WriteString(" check option")
	}
}

// FormatFast formats the LockTables node.
func (node *LockTables) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("lock tables ")
	node.Tables[0].Table.FormatFast(buf)
	buf.WriteByte(' ')
	buf.WriteString(node.Tables[0].Lock.ToString())
	for i := 1; i < len(node.Tables); i++ {
		buf.WriteString(", ")
		node.Tables[i].Table.FormatFast(buf)
		buf.WriteByte(' ')
		buf.WriteString(node.Tables[i].Lock.ToString())
	}
}

// FormatFast formats the UnlockTables node.
func (node *UnlockTables) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("unlock tables")
}

// FormatFast formats the node.
func (node *AlterView) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter ")
	node.Comments.FormatFast(buf)
	if node.Algorithm != "" {
		buf.WriteString("algorithm = ")
		buf.WriteString(node.Algorithm)
		buf.WriteByte(' ')
	}
	if node.Definer != nil {
		buf.WriteString("definer = ")
		node.Definer.FormatFast(buf)
		buf.WriteByte(' ')
	}
	if node.Security != "" {
		buf.WriteString("sql security ")
		buf.WriteString(node.Security)
		buf.WriteByte(' ')
	}
	buf.WriteString("view ")
	node.ViewName.FormatFast(buf)
	node.Columns.FormatFast(buf)
	buf.WriteString(" as ")
	node.Select.FormatFast(buf)
	if node.CheckOption != "" {
		buf.WriteString(" with ")
		buf.WriteString(node.CheckOption)
		buf.WriteString(" check option")
	}
}

func (definer *Definer) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(definer.Name)
	if definer.Address != "" {
		buf.WriteByte('@')
		buf.WriteString(definer.Address)
	}
}

// FormatFast formats the node.
func (node *DropTable) FormatFast(buf *TrackedBuffer) {
	temp := ""
	if node.Temp {
		temp = "temporary "
	}
	exists := ""
	if node.IfExists {
		exists = " if exists"
	}
	buf.WriteString("drop ")
	node.Comments.FormatFast(buf)
	buf.WriteString(temp)
	buf.WriteString("table")
	buf.WriteString(exists)
	buf.WriteByte(' ')
	node.FromTables.FormatFast(buf)
}

// FormatFast formats the node.
func (node *DropView) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("drop ")
	node.Comments.FormatFast(buf)
	exists := ""
	if node.IfExists {
		exists = " if exists"
	}
	buf.WriteString("view")
	buf.WriteString(exists)
	buf.WriteByte(' ')
	node.FromTables.FormatFast(buf)
}

// FormatFast formats the AlterTable node.
func (node *AlterTable) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter ")
	node.Comments.FormatFast(buf)
	buf.WriteString("table ")
	node.Table.FormatFast(buf)
	prefix := ""
	for i, option := range node.AlterOptions {
		if i != 0 {
			buf.WriteByte(',')
		}
		buf.WriteByte(' ')
		option.FormatFast(buf)
		if node.PartitionSpec != nil && node.PartitionSpec.Action != RemoveAction {
			prefix = ","
		}
	}
	if node.PartitionSpec != nil {
		buf.WriteString(prefix)
		buf.WriteByte(' ')
		node.PartitionSpec.FormatFast(buf)
	}
	if node.PartitionOption != nil {
		buf.WriteString(prefix)
		buf.WriteByte(' ')
		node.PartitionOption.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *AddConstraintDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("add ")
	node.ConstraintDefinition.FormatFast(buf)
}

func (node *AlterCheck) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter check ")
	node.Name.FormatFast(buf)
	if node.Enforced {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[ENFORCED])
	} else {
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[NOT])
		buf.WriteByte(' ')
		buf.WriteString(keywordStrings[ENFORCED])
	}
}

// FormatFast formats the node.
func (node *AddIndexDefinition) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("add ")
	node.IndexDefinition.FormatFast(buf)
}

// FormatFast formats the node.
func (node *AddColumns) FormatFast(buf *TrackedBuffer) {

	if len(node.Columns) == 1 {
		buf.WriteString("add column ")
		node.Columns[0].FormatFast(buf)
		if node.First {
			buf.WriteString(" first")
		}
		if node.After != nil {
			buf.WriteString(" after ")
			node.After.FormatFast(buf)
		}
	} else {
		for i, col := range node.Columns {
			if i == 0 {
				buf.WriteString("add column (")
				col.FormatFast(buf)
			} else {
				buf.WriteString(", ")
				col.FormatFast(buf)
			}
		}
		buf.WriteByte(')')
	}
}

// FormatFast formats the node.
func (node AlgorithmValue) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("algorithm = ")
	buf.WriteString(string(node))
}

// FormatFast formats the node
func (node *AlterColumn) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter column ")
	node.Column.FormatFast(buf)
	if node.DropDefault {
		buf.WriteString(" drop default")
	} else if node.DefaultVal != nil {
		if node.DefaultLiteral {
			buf.WriteString(" set default ")
			node.DefaultVal.FormatFast(buf)
		} else {
			buf.WriteString(" set default (")
			node.DefaultVal.FormatFast(buf)
			buf.WriteByte(')')
		}
	}
	if node.Invisible != nil {
		if *node.Invisible {
			buf.WriteString(" set invisible")
		} else {
			buf.WriteString(" set visible")
		}
	}
}

// FormatFast formats the node
func (node *AlterIndex) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("alter index ")
	node.Name.FormatFast(buf)
	if node.Invisible {
		buf.WriteString(" invisible")
	} else {
		buf.WriteString(" visible")
	}
}

// FormatFast formats the node
func (node *ChangeColumn) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("change column ")
	node.OldColumn.FormatFast(buf)
	buf.WriteByte(' ')
	node.NewColDefinition.FormatFast(buf)
	if node.First {
		buf.WriteString(" first")
	}
	if node.After != nil {
		buf.WriteString(" after ")
		node.After.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *ModifyColumn) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("modify column ")
	node.NewColDefinition.FormatFast(buf)
	if node.First {
		buf.WriteString(" first")
	}
	if node.After != nil {
		buf.WriteString(" after ")
		node.After.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *RenameColumn) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rename column ")
	node.OldName.FormatFast(buf)
	buf.WriteString(" to ")
	node.NewName.FormatFast(buf)
}

// FormatFast formats the node
func (node *AlterCharset) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("convert to character set ")
	buf.WriteString(node.CharacterSet)
	if node.Collate != "" {
		buf.WriteString(" collate ")
		buf.WriteString(node.Collate)
	}
}

// FormatFast formats the node
func (node *KeyState) FormatFast(buf *TrackedBuffer) {
	if node.Enable {
		buf.WriteString("enable keys")
	} else {
		buf.WriteString("disable keys")
	}

}

// FormatFast formats the node
func (node *TablespaceOperation) FormatFast(buf *TrackedBuffer) {
	if node.Import {
		buf.WriteString("import tablespace")
	} else {
		buf.WriteString("discard tablespace")
	}
}

// FormatFast formats the node
func (node *DropColumn) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("drop column ")
	node.Name.FormatFast(buf)
}

// FormatFast formats the node
func (node *DropKey) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("drop ")
	buf.WriteString(node.Type.ToString())
	if node.Name.NotEmpty() {
		buf.WriteByte(' ')
		node.Name.FormatFast(buf)
	}
}

// FormatFast formats the node
func (node *Force) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("force")
}

// FormatFast formats the node
func (node *LockOption) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("lock ")
	buf.WriteString(node.Type.ToString())
}

// FormatFast formats the node
func (node *OrderByOption) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("order by ")
	prefix := ""
	for _, n := range node.Cols {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
}

// FormatFast formats the node
func (node *RenameTableName) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rename ")
	node.Table.FormatFast(buf)
}

// FormatFast formats the node
func (node *RenameIndex) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rename index ")
	node.OldName.FormatFast(buf)
	buf.WriteString(" to ")
	node.NewName.FormatFast(buf)
}

// FormatFast formats the node
func (node *Validation) FormatFast(buf *TrackedBuffer) {
	if node.With {
		buf.WriteString("with validation")
	} else {
		buf.WriteString("without validation")
	}
}

// FormatFast formats the node
func (node TableOptions) FormatFast(buf *TrackedBuffer) {
	for i, option := range node {
		if i != 0 {
			buf.WriteByte(' ')
		}
		buf.WriteString(option.Name)
		switch {
		case option.String != "":
			if option.CaseSensitive {
				buf.WriteByte(' ')
				buf.WriteString(option.String)
			} else {
				buf.WriteByte(' ')
				buf.WriteString(option.String)
			}
		case option.Value != nil:
			buf.WriteByte(' ')
			option.Value.FormatFast(buf)
		default:
			buf.WriteString(" (")
			option.Tables.FormatFast(buf)
			buf.WriteByte(')')
		}
	}
}

// FormatFast formats the node
func (node *TruncateTable) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("truncate table ")
	node.Table.FormatFast(buf)
}

// FormatFast formats the node.
func (node *RenameTable) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("rename table")
	prefix := " "
	for _, pair := range node.TablePairs {
		buf.WriteString(prefix)
		pair.FromTable.FormatFast(buf)
		buf.WriteString(" to ")
		pair.ToTable.FormatFast(buf)
		prefix = ", "
	}
}

func (node *JSONTableExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_table(")
	node.Expr.FormatFast(buf)
	buf.WriteString(", ")
	node.Filter.FormatFast(buf)
	buf.WriteString(" columns(\n")
	sz := len(node.Columns)

	for i := 0; i < sz-1; i++ {
		buf.WriteByte('\t')
		node.Columns[i].FormatFast(buf)
		buf.WriteString(",\n")
	}
	buf.WriteByte('\t')
	node.Columns[sz-1].FormatFast(buf)
	buf.WriteByte('\n')
	buf.WriteString("\t)\n) as ")
	node.Alias.FormatFast(buf)
}

func (node *JtColumnDefinition) FormatFast(buf *TrackedBuffer) {
	if node.JtOrdinal != nil {
		node.JtOrdinal.Name.FormatFast(buf)
		buf.WriteString(" for ordinality")
	} else if node.JtNestedPath != nil {
		buf.WriteString("nested path ")
		node.JtNestedPath.Path.FormatFast(buf)
		buf.WriteString(" columns(\n")
		sz := len(node.JtNestedPath.Columns)

		for i := 0; i < sz-1; i++ {
			buf.WriteByte('\t')
			node.JtNestedPath.Columns[i].FormatFast(buf)
			buf.WriteString(",\n")
		}
		buf.WriteByte('\t')
		node.JtNestedPath.Columns[sz-1].FormatFast(buf)
		buf.WriteString("\n)")
	} else if node.JtPath != nil {
		node.JtPath.Name.FormatFast(buf)
		buf.WriteByte(' ')
		node.JtPath.Type.FormatFast(buf)
		buf.WriteByte(' ')
		if node.JtPath.JtColExists {
			buf.WriteString("exists ")
		}
		buf.WriteString("path ")
		node.JtPath.Path.FormatFast(buf)
		buf.WriteByte(' ')

		if node.JtPath.EmptyOnResponse != nil {
			node.JtPath.EmptyOnResponse.FormatFast(buf)
			buf.WriteString(" on empty ")
		}

		if node.JtPath.ErrorOnResponse != nil {
			node.JtPath.ErrorOnResponse.FormatFast(buf)
			buf.WriteString(" on error ")
		}
	}
}

func (node *JtOnResponse) FormatFast(buf *TrackedBuffer) {
	switch node.ResponseType {
	case ErrorJSONType:
		buf.WriteString("error")
	case NullJSONType:
		buf.WriteString("null")
	case DefaultJSONType:
		buf.WriteString("default ")
		node.Expr.FormatFast(buf)
	}
}

// FormatFast formats the node.
func (node *Offset) FormatFast(buf *TrackedBuffer) {
	buf.WriteByte(':')
	buf.WriteString(fmt.Sprintf("%d", node.V))
}

// FormatFast formats the node.
func (node *JSONSchemaValidFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_schema_valid(")
	buf.printExpr(node, node.Schema, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Document, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *JSONSchemaValidationReportFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_schema_validation_report(")
	buf.printExpr(node, node.Schema, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Document, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *JSONArrayExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_array(")
	if len(node.Params) > 0 {
		var prefix string
		for _, n := range node.Params {
			buf.WriteString(prefix)
			buf.printExpr(node, n, true)
			prefix = ", "
		}
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *JSONObjectExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_object(")
	if len(node.Params) > 0 {
		for i, p := range node.Params {
			if i != 0 {
				buf.WriteString(", ")

			}
			p.FormatFast(buf)
		}
	}
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *JSONObjectParam) FormatFast(buf *TrackedBuffer) {
	node.Key.FormatFast(buf)
	buf.WriteString(", ")
	node.Value.FormatFast(buf)
}

// FormatFast formats the node.
func (node *JSONQuoteExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_quote(")
	buf.printExpr(node, node.StringArg, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONContainsExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_contains(")
	buf.printExpr(node, node.Target, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Candidate, true)
	if len(node.PathList) > 0 {
		buf.WriteString(", ")
	}
	var prefix string
	for _, n := range node.PathList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONContainsPathExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_contains_path(")
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.OneOrAll, true)
	buf.WriteString(", ")
	var prefix string
	for _, n := range node.PathList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONExtractExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_extract(")
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	var prefix string
	for _, n := range node.PathList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONKeysExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_keys(")
	buf.printExpr(node, node.JSONDoc, true)
	if node.Path != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Path, true)
		buf.WriteByte(')')
		return
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONOverlapsExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_overlaps(")
	buf.printExpr(node, node.JSONDoc1, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.JSONDoc2, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONSearchExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_search(")
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.OneOrAll, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.SearchStr, true)
	if node.EscapeChar != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.EscapeChar, true)
	}
	if len(node.PathList) > 0 {
		buf.WriteString(", ")
	}
	var prefix string
	for _, n := range node.PathList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONValueExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_value(")
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Path, true)

	if node.ReturningType != nil {
		buf.WriteString(" returning ")
		node.ReturningType.FormatFast(buf)
	}

	if node.EmptyOnResponse != nil {
		buf.WriteByte(' ')
		node.EmptyOnResponse.FormatFast(buf)
		buf.WriteString(" on empty")
	}

	if node.ErrorOnResponse != nil {
		buf.WriteByte(' ')
		node.ErrorOnResponse.FormatFast(buf)
		buf.WriteString(" on error")
	}

	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *MemberOfExpr) FormatFast(buf *TrackedBuffer) {
	buf.printExpr(node, node.Value, true)
	buf.WriteString(" member of (")
	buf.printExpr(node, node.JSONArr, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *JSONAttributesExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.JSONDoc, true)
	if node.Path != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Path, true)
	}
	buf.WriteString(")")
}

// FormatFast formats the node.
func (node *JSONValueModifierExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	var prefix string
	for _, n := range node.Params {
		buf.WriteString(prefix)
		n.FormatFast(buf)
		prefix = ", "
	}
	buf.WriteString(")")
}

// FormatFast formats the node.
func (node *JSONValueMergeExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	var prefix string
	for _, n := range node.JSONDocList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteString(")")
}

// FormatFast formats the node.
func (node *JSONRemoveExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_remove(")
	buf.printExpr(node, node.JSONDoc, true)
	buf.WriteString(", ")
	var prefix string
	for _, n := range node.PathList {
		buf.WriteString(prefix)
		buf.printExpr(node, n, true)
		prefix = ", "
	}
	buf.WriteString(")")
}

// FormatFast formats the node.
func (node *JSONUnquoteExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("json_unquote(")
	buf.printExpr(node, node.JSONValue, true)
	buf.WriteString(")")
}

func (node *Count) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.AggrName())
	buf.WriteByte('(')
	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	node.Args.FormatFast(buf)
	buf.WriteByte(')')
}

func (node *CountStar) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("count(*)")
}

func (node *AnyValue) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("any_value(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Avg) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("avg(")
	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Max) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("max(")
	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Min) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("min(")
	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Sum) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("sum(")
	if node.Distinct {
		buf.WriteString(DistinctStr)
	}
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *BitAnd) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("bit_and(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *BitOr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("bit_or(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *BitXor) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("bit_xor(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Std) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("std(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *StdDev) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("stddev(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *StdPop) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("stddev_pop(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *StdSamp) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("stddev_samp(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *VarPop) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("var_pop(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *VarSamp) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("var_samp(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

func (node *Variance) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("variance(")
	buf.printExpr(node, node.Arg, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *LockingFunc) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString() + "(")
	if node.Type != ReleaseAllLocks {
		buf.printExpr(node, node.Name, true)
	}
	if node.Type == GetLock {
		buf.WriteString(", ")
		buf.printExpr(node, node.Timeout, true)
	}
	buf.WriteString(")")
}

// FormatFast formats the node.
func (node *Variable) FormatFast(buf *TrackedBuffer) {
	switch node.Scope {
	case VariableScope:
		buf.WriteString("@")
	case SessionScope:
		if node.Name.EqualString(TransactionIsolationStr) || node.Name.EqualString(TransactionReadOnlyStr) {
			// @@ without session have `next transaction` scope for these system variables.
			// so if they are in session scope it has to be printed explicitly.
			buf.WriteString("@@")
			buf.WriteString(node.Scope.ToString())
			buf.WriteByte('.')
			break
		}
		buf.WriteString("@@")
	case GlobalScope, PersistSysScope, PersistOnlySysScope:
		buf.WriteString("@@")
		buf.WriteString(node.Scope.ToString())
		buf.WriteByte('.')
	case NextTxScope:
		buf.WriteString("@@")
	}
	node.Name.FormatFast(buf)
}

// FormatFast formats the node.
func (node *PointExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("point(")
	buf.printExpr(node, node.XCordinate, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.YCordinate, true)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *LineStringExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("linestring(")
	node.PointParams.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *PolygonExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("polygon(")
	node.LinestringParams.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *PurgeBinaryLogs) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("purge binary logs")
	if node.To != "" {
		buf.WriteString(" to '")
		buf.WriteString(node.To)
		buf.WriteByte('\'')
	} else {
		buf.WriteString(" before '")
		buf.WriteString(node.Before)
		buf.WriteByte('\'')
	}
}

func (node *MultiPolygonExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("multipolygon(")
	node.PolygonParams.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *MultiPointExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("multipoint(")
	node.PointParams.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node.
func (node *MultiLinestringExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("multilinestring(")
	node.LinestringParams.FormatFast(buf)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomFromTextExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.WktText, true)
	if node.Srid != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Srid, true)
	}
	if node.AxisOrderOpt != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.AxisOrderOpt, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomFromWKBExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Type.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.WkbBlob, true)
	if node.Srid != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Srid, true)
	}
	if node.AxisOrderOpt != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.AxisOrderOpt, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomFormatExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.FormatType.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Geom, true)
	if node.AxisOrderOpt != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.AxisOrderOpt, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomPropertyFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Property.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Geom, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *PointPropertyFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Property.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Point, true)
	if node.ValueToSet != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.ValueToSet, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *LinestrPropertyFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Property.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Linestring, true)
	if node.PropertyDefArg != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.PropertyDefArg, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *PolygonPropertyFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Property.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.Polygon, true)
	if node.PropertyDefArg != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.PropertyDefArg, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomCollPropertyFuncExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.Property.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.GeomColl, true)
	if node.PropertyDefArg != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.PropertyDefArg, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomFromGeoHashExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString(node.GeomType.ToString())
	buf.WriteByte('(')
	buf.printExpr(node, node.GeoHash, true)
	if node.SridOpt != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.SridOpt, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeoHashFromLatLongExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("st_geohash(")
	buf.printExpr(node, node.Longitude, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.Latitude, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.MaxLength, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeoHashFromPointExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("st_geohash(")
	buf.printExpr(node, node.Point, true)
	buf.WriteString(", ")
	buf.printExpr(node, node.MaxLength, true)
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeoJSONFromGeomExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("st_asgeojson(")
	buf.printExpr(node, node.Geom, true)
	if node.MaxDecimalDigits != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.MaxDecimalDigits, true)
	}
	if node.Bitmask != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Bitmask, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the node
func (node *GeomFromGeoJSONExpr) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("st_geomfromgeojson(")
	buf.printExpr(node, node.GeoJSON, true)
	if node.HigherDimHandlerOpt != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.HigherDimHandlerOpt, true)
	}
	if node.Srid != nil {
		buf.WriteString(", ")
		buf.printExpr(node, node.Srid, true)
	}
	buf.WriteByte(')')
}

// FormatFast formats the kill statement
func (node *Kill) FormatFast(buf *TrackedBuffer) {
	buf.WriteString("kill ")
	buf.WriteString(node.Type.ToString())
	buf.WriteByte(' ')
	buf.WriteString(fmt.Sprintf("%d", node.ProcesslistID))
}
