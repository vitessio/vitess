/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

func VisitSQLNode(in SQLNode, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case AccessMode:
		return VisitAccessMode(in, f)
	case *AddColumns:
		return VisitRefOfAddColumns(in, f)
	case *AddConstraintDefinition:
		return VisitRefOfAddConstraintDefinition(in, f)
	case *AddIndexDefinition:
		return VisitRefOfAddIndexDefinition(in, f)
	case AlgorithmValue:
		return VisitAlgorithmValue(in, f)
	case *AliasedExpr:
		return VisitRefOfAliasedExpr(in, f)
	case *AliasedTableExpr:
		return VisitRefOfAliasedTableExpr(in, f)
	case *AlterCharset:
		return VisitRefOfAlterCharset(in, f)
	case *AlterColumn:
		return VisitRefOfAlterColumn(in, f)
	case *AlterDatabase:
		return VisitRefOfAlterDatabase(in, f)
	case *AlterMigration:
		return VisitRefOfAlterMigration(in, f)
	case *AlterTable:
		return VisitRefOfAlterTable(in, f)
	case *AlterView:
		return VisitRefOfAlterView(in, f)
	case *AlterVschema:
		return VisitRefOfAlterVschema(in, f)
	case *AndExpr:
		return VisitRefOfAndExpr(in, f)
	case Argument:
		return VisitArgument(in, f)
	case *AutoIncSpec:
		return VisitRefOfAutoIncSpec(in, f)
	case *Begin:
		return VisitRefOfBegin(in, f)
	case *BinaryExpr:
		return VisitRefOfBinaryExpr(in, f)
	case BoolVal:
		return VisitBoolVal(in, f)
	case *CallProc:
		return VisitRefOfCallProc(in, f)
	case *CaseExpr:
		return VisitRefOfCaseExpr(in, f)
	case *ChangeColumn:
		return VisitRefOfChangeColumn(in, f)
	case *CheckConstraintDefinition:
		return VisitRefOfCheckConstraintDefinition(in, f)
	case ColIdent:
		return VisitColIdent(in, f)
	case *ColName:
		return VisitRefOfColName(in, f)
	case *CollateExpr:
		return VisitRefOfCollateExpr(in, f)
	case *ColumnDefinition:
		return VisitRefOfColumnDefinition(in, f)
	case *ColumnType:
		return VisitRefOfColumnType(in, f)
	case Columns:
		return VisitColumns(in, f)
	case Comments:
		return VisitComments(in, f)
	case *Commit:
		return VisitRefOfCommit(in, f)
	case *ComparisonExpr:
		return VisitRefOfComparisonExpr(in, f)
	case *ConstraintDefinition:
		return VisitRefOfConstraintDefinition(in, f)
	case *ConvertExpr:
		return VisitRefOfConvertExpr(in, f)
	case *ConvertType:
		return VisitRefOfConvertType(in, f)
	case *ConvertUsingExpr:
		return VisitRefOfConvertUsingExpr(in, f)
	case *CreateDatabase:
		return VisitRefOfCreateDatabase(in, f)
	case *CreateTable:
		return VisitRefOfCreateTable(in, f)
	case *CreateView:
		return VisitRefOfCreateView(in, f)
	case *CurTimeFuncExpr:
		return VisitRefOfCurTimeFuncExpr(in, f)
	case *Default:
		return VisitRefOfDefault(in, f)
	case *Delete:
		return VisitRefOfDelete(in, f)
	case *DerivedTable:
		return VisitRefOfDerivedTable(in, f)
	case *DropColumn:
		return VisitRefOfDropColumn(in, f)
	case *DropDatabase:
		return VisitRefOfDropDatabase(in, f)
	case *DropKey:
		return VisitRefOfDropKey(in, f)
	case *DropTable:
		return VisitRefOfDropTable(in, f)
	case *DropView:
		return VisitRefOfDropView(in, f)
	case *ExistsExpr:
		return VisitRefOfExistsExpr(in, f)
	case *ExplainStmt:
		return VisitRefOfExplainStmt(in, f)
	case *ExplainTab:
		return VisitRefOfExplainTab(in, f)
	case Exprs:
		return VisitExprs(in, f)
	case *Flush:
		return VisitRefOfFlush(in, f)
	case *Force:
		return VisitRefOfForce(in, f)
	case *ForeignKeyDefinition:
		return VisitRefOfForeignKeyDefinition(in, f)
	case *FuncExpr:
		return VisitRefOfFuncExpr(in, f)
	case GroupBy:
		return VisitGroupBy(in, f)
	case *GroupConcatExpr:
		return VisitRefOfGroupConcatExpr(in, f)
	case *IndexDefinition:
		return VisitRefOfIndexDefinition(in, f)
	case *IndexHints:
		return VisitRefOfIndexHints(in, f)
	case *IndexInfo:
		return VisitRefOfIndexInfo(in, f)
	case *Insert:
		return VisitRefOfInsert(in, f)
	case *IntervalExpr:
		return VisitRefOfIntervalExpr(in, f)
	case *IsExpr:
		return VisitRefOfIsExpr(in, f)
	case IsolationLevel:
		return VisitIsolationLevel(in, f)
	case JoinCondition:
		return VisitJoinCondition(in, f)
	case *JoinTableExpr:
		return VisitRefOfJoinTableExpr(in, f)
	case *KeyState:
		return VisitRefOfKeyState(in, f)
	case *Limit:
		return VisitRefOfLimit(in, f)
	case ListArg:
		return VisitListArg(in, f)
	case *Literal:
		return VisitRefOfLiteral(in, f)
	case *Load:
		return VisitRefOfLoad(in, f)
	case *LockOption:
		return VisitRefOfLockOption(in, f)
	case *LockTables:
		return VisitRefOfLockTables(in, f)
	case *MatchExpr:
		return VisitRefOfMatchExpr(in, f)
	case *ModifyColumn:
		return VisitRefOfModifyColumn(in, f)
	case *Nextval:
		return VisitRefOfNextval(in, f)
	case *NotExpr:
		return VisitRefOfNotExpr(in, f)
	case *NullVal:
		return VisitRefOfNullVal(in, f)
	case OnDup:
		return VisitOnDup(in, f)
	case *OptLike:
		return VisitRefOfOptLike(in, f)
	case *OrExpr:
		return VisitRefOfOrExpr(in, f)
	case *Order:
		return VisitRefOfOrder(in, f)
	case OrderBy:
		return VisitOrderBy(in, f)
	case *OrderByOption:
		return VisitRefOfOrderByOption(in, f)
	case *OtherAdmin:
		return VisitRefOfOtherAdmin(in, f)
	case *OtherRead:
		return VisitRefOfOtherRead(in, f)
	case *ParenSelect:
		return VisitRefOfParenSelect(in, f)
	case *ParenTableExpr:
		return VisitRefOfParenTableExpr(in, f)
	case *PartitionDefinition:
		return VisitRefOfPartitionDefinition(in, f)
	case *PartitionSpec:
		return VisitRefOfPartitionSpec(in, f)
	case Partitions:
		return VisitPartitions(in, f)
	case *RangeCond:
		return VisitRefOfRangeCond(in, f)
	case ReferenceAction:
		return VisitReferenceAction(in, f)
	case *Release:
		return VisitRefOfRelease(in, f)
	case *RenameIndex:
		return VisitRefOfRenameIndex(in, f)
	case *RenameTable:
		return VisitRefOfRenameTable(in, f)
	case *RenameTableName:
		return VisitRefOfRenameTableName(in, f)
	case *RevertMigration:
		return VisitRefOfRevertMigration(in, f)
	case *Rollback:
		return VisitRefOfRollback(in, f)
	case *SRollback:
		return VisitRefOfSRollback(in, f)
	case *Savepoint:
		return VisitRefOfSavepoint(in, f)
	case *Select:
		return VisitRefOfSelect(in, f)
	case SelectExprs:
		return VisitSelectExprs(in, f)
	case *SelectInto:
		return VisitRefOfSelectInto(in, f)
	case *Set:
		return VisitRefOfSet(in, f)
	case *SetExpr:
		return VisitRefOfSetExpr(in, f)
	case SetExprs:
		return VisitSetExprs(in, f)
	case *SetTransaction:
		return VisitRefOfSetTransaction(in, f)
	case *Show:
		return VisitRefOfShow(in, f)
	case *ShowBasic:
		return VisitRefOfShowBasic(in, f)
	case *ShowCreate:
		return VisitRefOfShowCreate(in, f)
	case *ShowFilter:
		return VisitRefOfShowFilter(in, f)
	case *ShowLegacy:
		return VisitRefOfShowLegacy(in, f)
	case *StarExpr:
		return VisitRefOfStarExpr(in, f)
	case *Stream:
		return VisitRefOfStream(in, f)
	case *Subquery:
		return VisitRefOfSubquery(in, f)
	case *SubstrExpr:
		return VisitRefOfSubstrExpr(in, f)
	case TableExprs:
		return VisitTableExprs(in, f)
	case TableIdent:
		return VisitTableIdent(in, f)
	case TableName:
		return VisitTableName(in, f)
	case TableNames:
		return VisitTableNames(in, f)
	case TableOptions:
		return VisitTableOptions(in, f)
	case *TableSpec:
		return VisitRefOfTableSpec(in, f)
	case *TablespaceOperation:
		return VisitRefOfTablespaceOperation(in, f)
	case *TimestampFuncExpr:
		return VisitRefOfTimestampFuncExpr(in, f)
	case *TruncateTable:
		return VisitRefOfTruncateTable(in, f)
	case *UnaryExpr:
		return VisitRefOfUnaryExpr(in, f)
	case *Union:
		return VisitRefOfUnion(in, f)
	case *UnionSelect:
		return VisitRefOfUnionSelect(in, f)
	case *UnlockTables:
		return VisitRefOfUnlockTables(in, f)
	case *Update:
		return VisitRefOfUpdate(in, f)
	case *UpdateExpr:
		return VisitRefOfUpdateExpr(in, f)
	case UpdateExprs:
		return VisitUpdateExprs(in, f)
	case *Use:
		return VisitRefOfUse(in, f)
	case *VStream:
		return VisitRefOfVStream(in, f)
	case ValTuple:
		return VisitValTuple(in, f)
	case *Validation:
		return VisitRefOfValidation(in, f)
	case Values:
		return VisitValues(in, f)
	case *ValuesFuncExpr:
		return VisitRefOfValuesFuncExpr(in, f)
	case VindexParam:
		return VisitVindexParam(in, f)
	case *VindexSpec:
		return VisitRefOfVindexSpec(in, f)
	case *When:
		return VisitRefOfWhen(in, f)
	case *Where:
		return VisitRefOfWhere(in, f)
	case *XorExpr:
		return VisitRefOfXorExpr(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitRefOfAddColumns(in *AddColumns, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfColumnDefinition(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfColName(in.First, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAddConstraintDefinition(in *AddConstraintDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfConstraintDefinition(in.ConstraintDefinition, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAddIndexDefinition(in *AddIndexDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfIndexDefinition(in.IndexDefinition, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAliasedExpr(in *AliasedExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitColIdent(in.As, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAliasedTableExpr(in *AliasedTableExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSimpleTableExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.As, f); err != nil {
		return err
	}
	if err := VisitRefOfIndexHints(in.Hints, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAlterCharset(in *AlterCharset, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfAlterColumn(in *AlterColumn, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Column, f); err != nil {
		return err
	}
	if err := VisitExpr(in.DefaultVal, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAlterDatabase(in *AlterDatabase, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableIdent(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAlterMigration(in *AlterMigration, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfAlterTable(in *AlterTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	for _, el := range in.AlterOptions {
		if err := VisitAlterOption(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfPartitionSpec(in.PartitionSpec, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAlterView(in *AlterView, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.ViewName, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAlterVschema(in *AlterVschema, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfVindexSpec(in.VindexSpec, f); err != nil {
		return err
	}
	for _, el := range in.VindexCols {
		if err := VisitColIdent(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfAutoIncSpec(in.AutoIncSpec, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAndExpr(in *AndExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfAutoIncSpec(in *AutoIncSpec, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Column, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Sequence, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfBegin(in *Begin, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfBinaryExpr(in *BinaryExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCallProc(in *CallProc, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Name, f); err != nil {
		return err
	}
	if err := VisitExprs(in.Params, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCaseExpr(in *CaseExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	for _, el := range in.Whens {
		if err := VisitRefOfWhen(el, f); err != nil {
			return err
		}
	}
	if err := VisitExpr(in.Else, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfChangeColumn(in *ChangeColumn, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.OldColumn, f); err != nil {
		return err
	}
	if err := VisitRefOfColumnDefinition(in.NewColDefinition, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.First, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCheckConstraintDefinition(in *CheckConstraintDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitColIdent(in ColIdent, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfColName(in *ColName, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Qualifier, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCollateExpr(in *CollateExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfColumnDefinition(in *ColumnDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfColumnType(in *ColumnType, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Length, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Scale, f); err != nil {
		return err
	}
	return nil
}
func VisitColumns(in Columns, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitColIdent(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitComments(in Comments, f Visit) error {
	_, err := f(in)
	return err
}
func VisitRefOfCommit(in *Commit, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfComparisonExpr(in *ComparisonExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Escape, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfConstraintDefinition(in *ConstraintDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitConstraintInfo(in.Details, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfConvertExpr(in *ConvertExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfConvertType(in.Type, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfConvertType(in *ConvertType, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Length, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Scale, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfConvertUsingExpr(in *ConvertUsingExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCreateDatabase(in *CreateDatabase, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCreateTable(in *CreateTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfTableSpec(in.TableSpec, f); err != nil {
		return err
	}
	if err := VisitRefOfOptLike(in.OptLike, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCreateView(in *CreateView, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.ViewName, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfCurTimeFuncExpr(in *CurTimeFuncExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Fsp, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDefault(in *Default, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfDelete(in *Delete, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableNames(in.Targets, f); err != nil {
		return err
	}
	if err := VisitTableExprs(in.TableExprs, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDerivedTable(in *DerivedTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDropColumn(in *DropColumn, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDropDatabase(in *DropDatabase, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDropKey(in *DropKey, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDropTable(in *DropTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.FromTables, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfDropView(in *DropView, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.FromTables, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfExistsExpr(in *ExistsExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfSubquery(in.Subquery, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfExplainStmt(in *ExplainStmt, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitStatement(in.Statement, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfExplainTab(in *ExplainTab, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func VisitExprs(in Exprs, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfFlush(in *Flush, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.TableNames, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfForce(in *Force, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfForeignKeyDefinition(in *ForeignKeyDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.Source, f); err != nil {
		return err
	}
	if err := VisitTableName(in.ReferencedTable, f); err != nil {
		return err
	}
	if err := VisitColumns(in.ReferencedColumns, f); err != nil {
		return err
	}
	if err := VisitReferenceAction(in.OnDelete, f); err != nil {
		return err
	}
	if err := VisitReferenceAction(in.OnUpdate, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfFuncExpr(in *FuncExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableIdent(in.Qualifier, f); err != nil {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitSelectExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func VisitGroupBy(in GroupBy, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfGroupConcatExpr(in *GroupConcatExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectExprs(in.Exprs, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfIndexDefinition(in *IndexDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfIndexInfo(in.Info, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfIndexHints(in *IndexHints, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Indexes {
		if err := VisitColIdent(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfIndexInfo(in *IndexInfo, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitColIdent(in.ConstraintName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfInsert(in *Insert, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitInsertRows(in.Rows, f); err != nil {
		return err
	}
	if err := VisitOnDup(in.OnDup, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfIntervalExpr(in *IntervalExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfIsExpr(in *IsExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitJoinCondition(in JoinCondition, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.On, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Using, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfJoinTableExpr(in *JoinTableExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableExpr(in.LeftExpr, f); err != nil {
		return err
	}
	if err := VisitTableExpr(in.RightExpr, f); err != nil {
		return err
	}
	if err := VisitJoinCondition(in.Condition, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfKeyState(in *KeyState, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfLimit(in *Limit, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Offset, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Rowcount, f); err != nil {
		return err
	}
	return nil
}
func VisitListArg(in ListArg, f Visit) error {
	_, err := f(in)
	return err
}
func VisitRefOfLiteral(in *Literal, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfLoad(in *Load, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfLockOption(in *LockOption, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfLockTables(in *LockTables, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfMatchExpr(in *MatchExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectExprs(in.Columns, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfModifyColumn(in *ModifyColumn, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColumnDefinition(in.NewColDefinition, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.First, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfNextval(in *Nextval, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfNotExpr(in *NotExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfNullVal(in *NullVal, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitOnDup(in OnDup, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfUpdateExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfOptLike(in *OptLike, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.LikeTable, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfOrExpr(in *OrExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfOrder(in *Order, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitOrderBy(in OrderBy, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfOrder(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfOrderByOption(in *OrderByOption, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.Cols, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfOtherAdmin(in *OtherAdmin, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfOtherRead(in *OtherRead, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfParenSelect(in *ParenSelect, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfParenTableExpr(in *ParenTableExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfPartitionDefinition(in *PartitionDefinition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfPartitionSpec(in *PartitionSpec, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitPartitions(in.Names, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Number, f); err != nil {
		return err
	}
	if err := VisitTableName(in.TableName, f); err != nil {
		return err
	}
	for _, el := range in.Definitions {
		if err := VisitRefOfPartitionDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitPartitions(in Partitions, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitColIdent(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfRangeCond(in *RangeCond, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.From, f); err != nil {
		return err
	}
	if err := VisitExpr(in.To, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRelease(in *Release, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRenameIndex(in *RenameIndex, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.OldName, f); err != nil {
		return err
	}
	if err := VisitColIdent(in.NewName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRenameTable(in *RenameTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfRenameTableName(in *RenameTableName, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRevertMigration(in *RevertMigration, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfRollback(in *Rollback, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfSRollback(in *SRollback, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfSavepoint(in *Savepoint, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfSelect(in *Select, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExprs(in.SelectExprs, f); err != nil {
		return err
	}
	if err := VisitTableExprs(in.From, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitGroupBy(in.GroupBy, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Having, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	if err := VisitRefOfSelectInto(in.Into, f); err != nil {
		return err
	}
	return nil
}
func VisitSelectExprs(in SelectExprs, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitSelectExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfSelectInto(in *SelectInto, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfSet(in *Set, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSetExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfSetExpr(in *SetExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitSetExprs(in SetExprs, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfSetExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfSetTransaction(in *SetTransaction, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSQLNode(in.SQLNode, f); err != nil {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	for _, el := range in.Characteristics {
		if err := VisitCharacteristic(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfShow(in *Show, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitShowInternal(in.Internal, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfShowBasic(in *ShowBasic, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Tbl, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.DbName, f); err != nil {
		return err
	}
	if err := VisitRefOfShowFilter(in.Filter, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfShowCreate(in *ShowCreate, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Op, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfShowFilter(in *ShowFilter, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Filter, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfShowLegacy(in *ShowLegacy, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.OnTable, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitExpr(in.ShowCollationFilterOpt, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfStarExpr(in *StarExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.TableName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfStream(in *Stream, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExpr(in.SelectExpr, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfSubquery(in *Subquery, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfSubstrExpr(in *SubstrExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.StrVal, f); err != nil {
		return err
	}
	if err := VisitExpr(in.From, f); err != nil {
		return err
	}
	if err := VisitExpr(in.To, f); err != nil {
		return err
	}
	return nil
}
func VisitTableExprs(in TableExprs, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitTableExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitTableIdent(in TableIdent, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitTableName(in TableName, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.Qualifier, f); err != nil {
		return err
	}
	return nil
}
func VisitTableNames(in TableNames, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitTableName(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitTableOptions(in TableOptions, f Visit) error {
	_, err := f(in)
	return err
}
func VisitRefOfTableSpec(in *TableSpec, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfColumnDefinition(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.Indexes {
		if err := VisitRefOfIndexDefinition(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.Constraints {
		if err := VisitRefOfConstraintDefinition(el, f); err != nil {
			return err
		}
	}
	if err := VisitTableOptions(in.Options, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfTablespaceOperation(in *TablespaceOperation, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfTimestampFuncExpr(in *TimestampFuncExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr1, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr2, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfTruncateTable(in *TruncateTable, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfUnaryExpr(in *UnaryExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfUnion(in *Union, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.FirstStatement, f); err != nil {
		return err
	}
	for _, el := range in.UnionSelects {
		if err := VisitRefOfUnionSelect(el, f); err != nil {
			return err
		}
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfUnionSelect(in *UnionSelect, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Statement, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfUnlockTables(in *UnlockTables, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfUpdate(in *Update, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableExprs(in.TableExprs, f); err != nil {
		return err
	}
	if err := VisitUpdateExprs(in.Exprs, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfUpdateExpr(in *UpdateExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitUpdateExprs(in UpdateExprs, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfUpdateExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfUse(in *Use, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableIdent(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfVStream(in *VStream, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExpr(in.SelectExpr, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func VisitValTuple(in ValTuple, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfValidation(in *Validation, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitValues(in Values, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitValTuple(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfValuesFuncExpr(in *ValuesFuncExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	return nil
}
func VisitVindexParam(in VindexParam, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Key, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfVindexSpec(in *VindexSpec, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitColIdent(in.Type, f); err != nil {
		return err
	}
	for _, el := range in.Params {
		if err := VisitVindexParam(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfWhen(in *When, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Cond, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Val, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfWhere(in *Where, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfXorExpr(in *XorExpr, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func VisitAlterOption(in AlterOption, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AddColumns:
		return VisitRefOfAddColumns(in, f)
	case *AddConstraintDefinition:
		return VisitRefOfAddConstraintDefinition(in, f)
	case *AddIndexDefinition:
		return VisitRefOfAddIndexDefinition(in, f)
	case AlgorithmValue:
		return VisitAlgorithmValue(in, f)
	case *AlterCharset:
		return VisitRefOfAlterCharset(in, f)
	case *AlterColumn:
		return VisitRefOfAlterColumn(in, f)
	case *ChangeColumn:
		return VisitRefOfChangeColumn(in, f)
	case *DropColumn:
		return VisitRefOfDropColumn(in, f)
	case *DropKey:
		return VisitRefOfDropKey(in, f)
	case *Force:
		return VisitRefOfForce(in, f)
	case *KeyState:
		return VisitRefOfKeyState(in, f)
	case *LockOption:
		return VisitRefOfLockOption(in, f)
	case *ModifyColumn:
		return VisitRefOfModifyColumn(in, f)
	case *OrderByOption:
		return VisitRefOfOrderByOption(in, f)
	case *RenameIndex:
		return VisitRefOfRenameIndex(in, f)
	case *RenameTableName:
		return VisitRefOfRenameTableName(in, f)
	case TableOptions:
		return VisitTableOptions(in, f)
	case *TablespaceOperation:
		return VisitRefOfTablespaceOperation(in, f)
	case *Validation:
		return VisitRefOfValidation(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitCharacteristic(in Characteristic, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case AccessMode:
		return VisitAccessMode(in, f)
	case IsolationLevel:
		return VisitIsolationLevel(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitColTuple(in ColTuple, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case ListArg:
		return VisitListArg(in, f)
	case *Subquery:
		return VisitRefOfSubquery(in, f)
	case ValTuple:
		return VisitValTuple(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitConstraintInfo(in ConstraintInfo, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *CheckConstraintDefinition:
		return VisitRefOfCheckConstraintDefinition(in, f)
	case *ForeignKeyDefinition:
		return VisitRefOfForeignKeyDefinition(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitDBDDLStatement(in DBDDLStatement, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return VisitRefOfAlterDatabase(in, f)
	case *CreateDatabase:
		return VisitRefOfCreateDatabase(in, f)
	case *DropDatabase:
		return VisitRefOfDropDatabase(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitDDLStatement(in DDLStatement, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterTable:
		return VisitRefOfAlterTable(in, f)
	case *AlterView:
		return VisitRefOfAlterView(in, f)
	case *CreateTable:
		return VisitRefOfCreateTable(in, f)
	case *CreateView:
		return VisitRefOfCreateView(in, f)
	case *DropTable:
		return VisitRefOfDropTable(in, f)
	case *DropView:
		return VisitRefOfDropView(in, f)
	case *RenameTable:
		return VisitRefOfRenameTable(in, f)
	case *TruncateTable:
		return VisitRefOfTruncateTable(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitExplain(in Explain, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ExplainStmt:
		return VisitRefOfExplainStmt(in, f)
	case *ExplainTab:
		return VisitRefOfExplainTab(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitExpr(in Expr, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AndExpr:
		return VisitRefOfAndExpr(in, f)
	case Argument:
		return VisitArgument(in, f)
	case *BinaryExpr:
		return VisitRefOfBinaryExpr(in, f)
	case BoolVal:
		return VisitBoolVal(in, f)
	case *CaseExpr:
		return VisitRefOfCaseExpr(in, f)
	case *ColName:
		return VisitRefOfColName(in, f)
	case *CollateExpr:
		return VisitRefOfCollateExpr(in, f)
	case *ComparisonExpr:
		return VisitRefOfComparisonExpr(in, f)
	case *ConvertExpr:
		return VisitRefOfConvertExpr(in, f)
	case *ConvertUsingExpr:
		return VisitRefOfConvertUsingExpr(in, f)
	case *CurTimeFuncExpr:
		return VisitRefOfCurTimeFuncExpr(in, f)
	case *Default:
		return VisitRefOfDefault(in, f)
	case *ExistsExpr:
		return VisitRefOfExistsExpr(in, f)
	case *FuncExpr:
		return VisitRefOfFuncExpr(in, f)
	case *GroupConcatExpr:
		return VisitRefOfGroupConcatExpr(in, f)
	case *IntervalExpr:
		return VisitRefOfIntervalExpr(in, f)
	case *IsExpr:
		return VisitRefOfIsExpr(in, f)
	case ListArg:
		return VisitListArg(in, f)
	case *Literal:
		return VisitRefOfLiteral(in, f)
	case *MatchExpr:
		return VisitRefOfMatchExpr(in, f)
	case *NotExpr:
		return VisitRefOfNotExpr(in, f)
	case *NullVal:
		return VisitRefOfNullVal(in, f)
	case *OrExpr:
		return VisitRefOfOrExpr(in, f)
	case *RangeCond:
		return VisitRefOfRangeCond(in, f)
	case *Subquery:
		return VisitRefOfSubquery(in, f)
	case *SubstrExpr:
		return VisitRefOfSubstrExpr(in, f)
	case *TimestampFuncExpr:
		return VisitRefOfTimestampFuncExpr(in, f)
	case *UnaryExpr:
		return VisitRefOfUnaryExpr(in, f)
	case ValTuple:
		return VisitValTuple(in, f)
	case *ValuesFuncExpr:
		return VisitRefOfValuesFuncExpr(in, f)
	case *XorExpr:
		return VisitRefOfXorExpr(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitInsertRows(in InsertRows, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ParenSelect:
		return VisitRefOfParenSelect(in, f)
	case *Select:
		return VisitRefOfSelect(in, f)
	case *Union:
		return VisitRefOfUnion(in, f)
	case Values:
		return VisitValues(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitSelectExpr(in SelectExpr, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedExpr:
		return VisitRefOfAliasedExpr(in, f)
	case *Nextval:
		return VisitRefOfNextval(in, f)
	case *StarExpr:
		return VisitRefOfStarExpr(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitSelectStatement(in SelectStatement, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ParenSelect:
		return VisitRefOfParenSelect(in, f)
	case *Select:
		return VisitRefOfSelect(in, f)
	case *Union:
		return VisitRefOfUnion(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitShowInternal(in ShowInternal, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ShowBasic:
		return VisitRefOfShowBasic(in, f)
	case *ShowCreate:
		return VisitRefOfShowCreate(in, f)
	case *ShowLegacy:
		return VisitRefOfShowLegacy(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitSimpleTableExpr(in SimpleTableExpr, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *DerivedTable:
		return VisitRefOfDerivedTable(in, f)
	case TableName:
		return VisitTableName(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitStatement(in Statement, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return VisitRefOfAlterDatabase(in, f)
	case *AlterMigration:
		return VisitRefOfAlterMigration(in, f)
	case *AlterTable:
		return VisitRefOfAlterTable(in, f)
	case *AlterView:
		return VisitRefOfAlterView(in, f)
	case *AlterVschema:
		return VisitRefOfAlterVschema(in, f)
	case *Begin:
		return VisitRefOfBegin(in, f)
	case *CallProc:
		return VisitRefOfCallProc(in, f)
	case *Commit:
		return VisitRefOfCommit(in, f)
	case *CreateDatabase:
		return VisitRefOfCreateDatabase(in, f)
	case *CreateTable:
		return VisitRefOfCreateTable(in, f)
	case *CreateView:
		return VisitRefOfCreateView(in, f)
	case *Delete:
		return VisitRefOfDelete(in, f)
	case *DropDatabase:
		return VisitRefOfDropDatabase(in, f)
	case *DropTable:
		return VisitRefOfDropTable(in, f)
	case *DropView:
		return VisitRefOfDropView(in, f)
	case *ExplainStmt:
		return VisitRefOfExplainStmt(in, f)
	case *ExplainTab:
		return VisitRefOfExplainTab(in, f)
	case *Flush:
		return VisitRefOfFlush(in, f)
	case *Insert:
		return VisitRefOfInsert(in, f)
	case *Load:
		return VisitRefOfLoad(in, f)
	case *LockTables:
		return VisitRefOfLockTables(in, f)
	case *OtherAdmin:
		return VisitRefOfOtherAdmin(in, f)
	case *OtherRead:
		return VisitRefOfOtherRead(in, f)
	case *ParenSelect:
		return VisitRefOfParenSelect(in, f)
	case *Release:
		return VisitRefOfRelease(in, f)
	case *RenameTable:
		return VisitRefOfRenameTable(in, f)
	case *RevertMigration:
		return VisitRefOfRevertMigration(in, f)
	case *Rollback:
		return VisitRefOfRollback(in, f)
	case *SRollback:
		return VisitRefOfSRollback(in, f)
	case *Savepoint:
		return VisitRefOfSavepoint(in, f)
	case *Select:
		return VisitRefOfSelect(in, f)
	case *Set:
		return VisitRefOfSet(in, f)
	case *SetTransaction:
		return VisitRefOfSetTransaction(in, f)
	case *Show:
		return VisitRefOfShow(in, f)
	case *Stream:
		return VisitRefOfStream(in, f)
	case *TruncateTable:
		return VisitRefOfTruncateTable(in, f)
	case *Union:
		return VisitRefOfUnion(in, f)
	case *UnlockTables:
		return VisitRefOfUnlockTables(in, f)
	case *Update:
		return VisitRefOfUpdate(in, f)
	case *Use:
		return VisitRefOfUse(in, f)
	case *VStream:
		return VisitRefOfVStream(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitTableExpr(in TableExpr, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedTableExpr:
		return VisitRefOfAliasedTableExpr(in, f)
	case *JoinTableExpr:
		return VisitRefOfJoinTableExpr(in, f)
	case *ParenTableExpr:
		return VisitRefOfParenTableExpr(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitAccessMode(in AccessMode, f Visit) error {
	_, err := f(in)
	return err
}
func VisitAlgorithmValue(in AlgorithmValue, f Visit) error {
	_, err := f(in)
	return err
}
func VisitArgument(in Argument, f Visit) error {
	_, err := f(in)
	return err
}
func VisitBoolVal(in BoolVal, f Visit) error {
	_, err := f(in)
	return err
}
func VisitIsolationLevel(in IsolationLevel, f Visit) error {
	_, err := f(in)
	return err
}
func VisitReferenceAction(in ReferenceAction, f Visit) error {
	_, err := f(in)
	return err
}
func VisitRefOfColIdent(in *ColIdent, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfJoinCondition(in *JoinCondition, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.On, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Using, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfTableIdent(in *TableIdent, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfTableName(in *TableName, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableIdent(in.Name, f); err != nil {
		return err
	}
	if err := VisitTableIdent(in.Qualifier, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfVindexParam(in *VindexParam, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColIdent(in.Key, f); err != nil {
		return err
	}
	return nil
}
