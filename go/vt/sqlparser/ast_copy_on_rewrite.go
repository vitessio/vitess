/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

func (c *cow) copyOnRewriteSQLNode(n SQLNode, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AddColumns:
		return c.copyOnRewriteRefOfAddColumns(n, parent)
	case *AddConstraintDefinition:
		return c.copyOnRewriteRefOfAddConstraintDefinition(n, parent)
	case *AddIndexDefinition:
		return c.copyOnRewriteRefOfAddIndexDefinition(n, parent)
	case AlgorithmValue:
		return c.copyOnRewriteAlgorithmValue(n, parent)
	case *AliasedExpr:
		return c.copyOnRewriteRefOfAliasedExpr(n, parent)
	case *AliasedTableExpr:
		return c.copyOnRewriteRefOfAliasedTableExpr(n, parent)
	case *AlterCharset:
		return c.copyOnRewriteRefOfAlterCharset(n, parent)
	case *AlterCheck:
		return c.copyOnRewriteRefOfAlterCheck(n, parent)
	case *AlterColumn:
		return c.copyOnRewriteRefOfAlterColumn(n, parent)
	case *AlterDatabase:
		return c.copyOnRewriteRefOfAlterDatabase(n, parent)
	case *AlterIndex:
		return c.copyOnRewriteRefOfAlterIndex(n, parent)
	case *AlterMigration:
		return c.copyOnRewriteRefOfAlterMigration(n, parent)
	case *AlterTable:
		return c.copyOnRewriteRefOfAlterTable(n, parent)
	case *AlterView:
		return c.copyOnRewriteRefOfAlterView(n, parent)
	case *AlterVschema:
		return c.copyOnRewriteRefOfAlterVschema(n, parent)
	case *AndExpr:
		return c.copyOnRewriteRefOfAndExpr(n, parent)
	case Argument:
		return c.copyOnRewriteArgument(n, parent)
	case *ArgumentLessWindowExpr:
		return c.copyOnRewriteRefOfArgumentLessWindowExpr(n, parent)
	case *AutoIncSpec:
		return c.copyOnRewriteRefOfAutoIncSpec(n, parent)
	case *Avg:
		return c.copyOnRewriteRefOfAvg(n, parent)
	case *Begin:
		return c.copyOnRewriteRefOfBegin(n, parent)
	case *BetweenExpr:
		return c.copyOnRewriteRefOfBetweenExpr(n, parent)
	case *BinaryExpr:
		return c.copyOnRewriteRefOfBinaryExpr(n, parent)
	case *BitAnd:
		return c.copyOnRewriteRefOfBitAnd(n, parent)
	case *BitOr:
		return c.copyOnRewriteRefOfBitOr(n, parent)
	case *BitXor:
		return c.copyOnRewriteRefOfBitXor(n, parent)
	case BoolVal:
		return c.copyOnRewriteBoolVal(n, parent)
	case *CallProc:
		return c.copyOnRewriteRefOfCallProc(n, parent)
	case *CaseExpr:
		return c.copyOnRewriteRefOfCaseExpr(n, parent)
	case *CastExpr:
		return c.copyOnRewriteRefOfCastExpr(n, parent)
	case *ChangeColumn:
		return c.copyOnRewriteRefOfChangeColumn(n, parent)
	case *CharExpr:
		return c.copyOnRewriteRefOfCharExpr(n, parent)
	case *CheckConstraintDefinition:
		return c.copyOnRewriteRefOfCheckConstraintDefinition(n, parent)
	case *ColName:
		return c.copyOnRewriteRefOfColName(n, parent)
	case *CollateExpr:
		return c.copyOnRewriteRefOfCollateExpr(n, parent)
	case *ColumnDefinition:
		return c.copyOnRewriteRefOfColumnDefinition(n, parent)
	case *ColumnType:
		return c.copyOnRewriteRefOfColumnType(n, parent)
	case Columns:
		return c.copyOnRewriteColumns(n, parent)
	case *CommentOnly:
		return c.copyOnRewriteRefOfCommentOnly(n, parent)
	case *Commit:
		return c.copyOnRewriteRefOfCommit(n, parent)
	case *CommonTableExpr:
		return c.copyOnRewriteRefOfCommonTableExpr(n, parent)
	case *ComparisonExpr:
		return c.copyOnRewriteRefOfComparisonExpr(n, parent)
	case *ConstraintDefinition:
		return c.copyOnRewriteRefOfConstraintDefinition(n, parent)
	case *ConvertExpr:
		return c.copyOnRewriteRefOfConvertExpr(n, parent)
	case *ConvertType:
		return c.copyOnRewriteRefOfConvertType(n, parent)
	case *ConvertUsingExpr:
		return c.copyOnRewriteRefOfConvertUsingExpr(n, parent)
	case *Count:
		return c.copyOnRewriteRefOfCount(n, parent)
	case *CountStar:
		return c.copyOnRewriteRefOfCountStar(n, parent)
	case *CreateDatabase:
		return c.copyOnRewriteRefOfCreateDatabase(n, parent)
	case *CreateTable:
		return c.copyOnRewriteRefOfCreateTable(n, parent)
	case *CreateView:
		return c.copyOnRewriteRefOfCreateView(n, parent)
	case *CurTimeFuncExpr:
		return c.copyOnRewriteRefOfCurTimeFuncExpr(n, parent)
	case *DeallocateStmt:
		return c.copyOnRewriteRefOfDeallocateStmt(n, parent)
	case *Default:
		return c.copyOnRewriteRefOfDefault(n, parent)
	case *Definer:
		return c.copyOnRewriteRefOfDefiner(n, parent)
	case *Delete:
		return c.copyOnRewriteRefOfDelete(n, parent)
	case *DerivedTable:
		return c.copyOnRewriteRefOfDerivedTable(n, parent)
	case *DropColumn:
		return c.copyOnRewriteRefOfDropColumn(n, parent)
	case *DropDatabase:
		return c.copyOnRewriteRefOfDropDatabase(n, parent)
	case *DropKey:
		return c.copyOnRewriteRefOfDropKey(n, parent)
	case *DropTable:
		return c.copyOnRewriteRefOfDropTable(n, parent)
	case *DropView:
		return c.copyOnRewriteRefOfDropView(n, parent)
	case *ExecuteStmt:
		return c.copyOnRewriteRefOfExecuteStmt(n, parent)
	case *ExistsExpr:
		return c.copyOnRewriteRefOfExistsExpr(n, parent)
	case *ExplainStmt:
		return c.copyOnRewriteRefOfExplainStmt(n, parent)
	case *ExplainTab:
		return c.copyOnRewriteRefOfExplainTab(n, parent)
	case Exprs:
		return c.copyOnRewriteExprs(n, parent)
	case *ExtractFuncExpr:
		return c.copyOnRewriteRefOfExtractFuncExpr(n, parent)
	case *ExtractValueExpr:
		return c.copyOnRewriteRefOfExtractValueExpr(n, parent)
	case *ExtractedSubquery:
		return c.copyOnRewriteRefOfExtractedSubquery(n, parent)
	case *FirstOrLastValueExpr:
		return c.copyOnRewriteRefOfFirstOrLastValueExpr(n, parent)
	case *Flush:
		return c.copyOnRewriteRefOfFlush(n, parent)
	case *Force:
		return c.copyOnRewriteRefOfForce(n, parent)
	case *ForeignKeyDefinition:
		return c.copyOnRewriteRefOfForeignKeyDefinition(n, parent)
	case *FrameClause:
		return c.copyOnRewriteRefOfFrameClause(n, parent)
	case *FramePoint:
		return c.copyOnRewriteRefOfFramePoint(n, parent)
	case *FromFirstLastClause:
		return c.copyOnRewriteRefOfFromFirstLastClause(n, parent)
	case *FuncExpr:
		return c.copyOnRewriteRefOfFuncExpr(n, parent)
	case *GTIDFuncExpr:
		return c.copyOnRewriteRefOfGTIDFuncExpr(n, parent)
	case GroupBy:
		return c.copyOnRewriteGroupBy(n, parent)
	case *GroupConcatExpr:
		return c.copyOnRewriteRefOfGroupConcatExpr(n, parent)
	case IdentifierCI:
		return c.copyOnRewriteIdentifierCI(n, parent)
	case IdentifierCS:
		return c.copyOnRewriteIdentifierCS(n, parent)
	case *IndexDefinition:
		return c.copyOnRewriteRefOfIndexDefinition(n, parent)
	case *IndexHint:
		return c.copyOnRewriteRefOfIndexHint(n, parent)
	case IndexHints:
		return c.copyOnRewriteIndexHints(n, parent)
	case *IndexInfo:
		return c.copyOnRewriteRefOfIndexInfo(n, parent)
	case *Insert:
		return c.copyOnRewriteRefOfInsert(n, parent)
	case *InsertExpr:
		return c.copyOnRewriteRefOfInsertExpr(n, parent)
	case *IntervalExpr:
		return c.copyOnRewriteRefOfIntervalExpr(n, parent)
	case *IntervalFuncExpr:
		return c.copyOnRewriteRefOfIntervalFuncExpr(n, parent)
	case *IntroducerExpr:
		return c.copyOnRewriteRefOfIntroducerExpr(n, parent)
	case *IsExpr:
		return c.copyOnRewriteRefOfIsExpr(n, parent)
	case *JSONArrayExpr:
		return c.copyOnRewriteRefOfJSONArrayExpr(n, parent)
	case *JSONAttributesExpr:
		return c.copyOnRewriteRefOfJSONAttributesExpr(n, parent)
	case *JSONContainsExpr:
		return c.copyOnRewriteRefOfJSONContainsExpr(n, parent)
	case *JSONContainsPathExpr:
		return c.copyOnRewriteRefOfJSONContainsPathExpr(n, parent)
	case *JSONExtractExpr:
		return c.copyOnRewriteRefOfJSONExtractExpr(n, parent)
	case *JSONKeysExpr:
		return c.copyOnRewriteRefOfJSONKeysExpr(n, parent)
	case *JSONObjectExpr:
		return c.copyOnRewriteRefOfJSONObjectExpr(n, parent)
	case *JSONObjectParam:
		return c.copyOnRewriteRefOfJSONObjectParam(n, parent)
	case *JSONOverlapsExpr:
		return c.copyOnRewriteRefOfJSONOverlapsExpr(n, parent)
	case *JSONPrettyExpr:
		return c.copyOnRewriteRefOfJSONPrettyExpr(n, parent)
	case *JSONQuoteExpr:
		return c.copyOnRewriteRefOfJSONQuoteExpr(n, parent)
	case *JSONRemoveExpr:
		return c.copyOnRewriteRefOfJSONRemoveExpr(n, parent)
	case *JSONSchemaValidFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidFuncExpr(n, parent)
	case *JSONSchemaValidationReportFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidationReportFuncExpr(n, parent)
	case *JSONSearchExpr:
		return c.copyOnRewriteRefOfJSONSearchExpr(n, parent)
	case *JSONStorageFreeExpr:
		return c.copyOnRewriteRefOfJSONStorageFreeExpr(n, parent)
	case *JSONStorageSizeExpr:
		return c.copyOnRewriteRefOfJSONStorageSizeExpr(n, parent)
	case *JSONTableExpr:
		return c.copyOnRewriteRefOfJSONTableExpr(n, parent)
	case *JSONUnquoteExpr:
		return c.copyOnRewriteRefOfJSONUnquoteExpr(n, parent)
	case *JSONValueExpr:
		return c.copyOnRewriteRefOfJSONValueExpr(n, parent)
	case *JSONValueMergeExpr:
		return c.copyOnRewriteRefOfJSONValueMergeExpr(n, parent)
	case *JSONValueModifierExpr:
		return c.copyOnRewriteRefOfJSONValueModifierExpr(n, parent)
	case *JoinCondition:
		return c.copyOnRewriteRefOfJoinCondition(n, parent)
	case *JoinTableExpr:
		return c.copyOnRewriteRefOfJoinTableExpr(n, parent)
	case *JtColumnDefinition:
		return c.copyOnRewriteRefOfJtColumnDefinition(n, parent)
	case *JtOnResponse:
		return c.copyOnRewriteRefOfJtOnResponse(n, parent)
	case *KeyState:
		return c.copyOnRewriteRefOfKeyState(n, parent)
	case *LagLeadExpr:
		return c.copyOnRewriteRefOfLagLeadExpr(n, parent)
	case *Limit:
		return c.copyOnRewriteRefOfLimit(n, parent)
	case ListArg:
		return c.copyOnRewriteListArg(n, parent)
	case *Literal:
		return c.copyOnRewriteRefOfLiteral(n, parent)
	case *Load:
		return c.copyOnRewriteRefOfLoad(n, parent)
	case *LocateExpr:
		return c.copyOnRewriteRefOfLocateExpr(n, parent)
	case *LockOption:
		return c.copyOnRewriteRefOfLockOption(n, parent)
	case *LockTables:
		return c.copyOnRewriteRefOfLockTables(n, parent)
	case *LockingFunc:
		return c.copyOnRewriteRefOfLockingFunc(n, parent)
	case MatchAction:
		return c.copyOnRewriteMatchAction(n, parent)
	case *MatchExpr:
		return c.copyOnRewriteRefOfMatchExpr(n, parent)
	case *Max:
		return c.copyOnRewriteRefOfMax(n, parent)
	case *MemberOfExpr:
		return c.copyOnRewriteRefOfMemberOfExpr(n, parent)
	case *Min:
		return c.copyOnRewriteRefOfMin(n, parent)
	case *ModifyColumn:
		return c.copyOnRewriteRefOfModifyColumn(n, parent)
	case *NTHValueExpr:
		return c.copyOnRewriteRefOfNTHValueExpr(n, parent)
	case *NamedWindow:
		return c.copyOnRewriteRefOfNamedWindow(n, parent)
	case NamedWindows:
		return c.copyOnRewriteNamedWindows(n, parent)
	case *Nextval:
		return c.copyOnRewriteRefOfNextval(n, parent)
	case *NotExpr:
		return c.copyOnRewriteRefOfNotExpr(n, parent)
	case *NtileExpr:
		return c.copyOnRewriteRefOfNtileExpr(n, parent)
	case *NullTreatmentClause:
		return c.copyOnRewriteRefOfNullTreatmentClause(n, parent)
	case *NullVal:
		return c.copyOnRewriteRefOfNullVal(n, parent)
	case *Offset:
		return c.copyOnRewriteRefOfOffset(n, parent)
	case OnDup:
		return c.copyOnRewriteOnDup(n, parent)
	case *OptLike:
		return c.copyOnRewriteRefOfOptLike(n, parent)
	case *OrExpr:
		return c.copyOnRewriteRefOfOrExpr(n, parent)
	case *Order:
		return c.copyOnRewriteRefOfOrder(n, parent)
	case OrderBy:
		return c.copyOnRewriteOrderBy(n, parent)
	case *OrderByOption:
		return c.copyOnRewriteRefOfOrderByOption(n, parent)
	case *OtherAdmin:
		return c.copyOnRewriteRefOfOtherAdmin(n, parent)
	case *OtherRead:
		return c.copyOnRewriteRefOfOtherRead(n, parent)
	case *OverClause:
		return c.copyOnRewriteRefOfOverClause(n, parent)
	case *ParenTableExpr:
		return c.copyOnRewriteRefOfParenTableExpr(n, parent)
	case *ParsedComments:
		return c.copyOnRewriteRefOfParsedComments(n, parent)
	case *PartitionDefinition:
		return c.copyOnRewriteRefOfPartitionDefinition(n, parent)
	case *PartitionDefinitionOptions:
		return c.copyOnRewriteRefOfPartitionDefinitionOptions(n, parent)
	case *PartitionEngine:
		return c.copyOnRewriteRefOfPartitionEngine(n, parent)
	case *PartitionOption:
		return c.copyOnRewriteRefOfPartitionOption(n, parent)
	case *PartitionSpec:
		return c.copyOnRewriteRefOfPartitionSpec(n, parent)
	case *PartitionValueRange:
		return c.copyOnRewriteRefOfPartitionValueRange(n, parent)
	case Partitions:
		return c.copyOnRewritePartitions(n, parent)
	case *PerformanceSchemaFuncExpr:
		return c.copyOnRewriteRefOfPerformanceSchemaFuncExpr(n, parent)
	case *PrepareStmt:
		return c.copyOnRewriteRefOfPrepareStmt(n, parent)
	case ReferenceAction:
		return c.copyOnRewriteReferenceAction(n, parent)
	case *ReferenceDefinition:
		return c.copyOnRewriteRefOfReferenceDefinition(n, parent)
	case *RegexpInstrExpr:
		return c.copyOnRewriteRefOfRegexpInstrExpr(n, parent)
	case *RegexpLikeExpr:
		return c.copyOnRewriteRefOfRegexpLikeExpr(n, parent)
	case *RegexpReplaceExpr:
		return c.copyOnRewriteRefOfRegexpReplaceExpr(n, parent)
	case *RegexpSubstrExpr:
		return c.copyOnRewriteRefOfRegexpSubstrExpr(n, parent)
	case *Release:
		return c.copyOnRewriteRefOfRelease(n, parent)
	case *RenameColumn:
		return c.copyOnRewriteRefOfRenameColumn(n, parent)
	case *RenameIndex:
		return c.copyOnRewriteRefOfRenameIndex(n, parent)
	case *RenameTable:
		return c.copyOnRewriteRefOfRenameTable(n, parent)
	case *RenameTableName:
		return c.copyOnRewriteRefOfRenameTableName(n, parent)
	case *RevertMigration:
		return c.copyOnRewriteRefOfRevertMigration(n, parent)
	case *Rollback:
		return c.copyOnRewriteRefOfRollback(n, parent)
	case RootNode:
		return c.copyOnRewriteRootNode(n, parent)
	case *SRollback:
		return c.copyOnRewriteRefOfSRollback(n, parent)
	case *Savepoint:
		return c.copyOnRewriteRefOfSavepoint(n, parent)
	case *Select:
		return c.copyOnRewriteRefOfSelect(n, parent)
	case SelectExprs:
		return c.copyOnRewriteSelectExprs(n, parent)
	case *SelectInto:
		return c.copyOnRewriteRefOfSelectInto(n, parent)
	case *Set:
		return c.copyOnRewriteRefOfSet(n, parent)
	case *SetExpr:
		return c.copyOnRewriteRefOfSetExpr(n, parent)
	case SetExprs:
		return c.copyOnRewriteSetExprs(n, parent)
	case *Show:
		return c.copyOnRewriteRefOfShow(n, parent)
	case *ShowBasic:
		return c.copyOnRewriteRefOfShowBasic(n, parent)
	case *ShowCreate:
		return c.copyOnRewriteRefOfShowCreate(n, parent)
	case *ShowFilter:
		return c.copyOnRewriteRefOfShowFilter(n, parent)
	case *ShowMigrationLogs:
		return c.copyOnRewriteRefOfShowMigrationLogs(n, parent)
	case *ShowOther:
		return c.copyOnRewriteRefOfShowOther(n, parent)
	case *ShowThrottledApps:
		return c.copyOnRewriteRefOfShowThrottledApps(n, parent)
	case *ShowThrottlerStatus:
		return c.copyOnRewriteRefOfShowThrottlerStatus(n, parent)
	case *StarExpr:
		return c.copyOnRewriteRefOfStarExpr(n, parent)
	case *Std:
		return c.copyOnRewriteRefOfStd(n, parent)
	case *StdDev:
		return c.copyOnRewriteRefOfStdDev(n, parent)
	case *StdPop:
		return c.copyOnRewriteRefOfStdPop(n, parent)
	case *StdSamp:
		return c.copyOnRewriteRefOfStdSamp(n, parent)
	case *Stream:
		return c.copyOnRewriteRefOfStream(n, parent)
	case *SubPartition:
		return c.copyOnRewriteRefOfSubPartition(n, parent)
	case *SubPartitionDefinition:
		return c.copyOnRewriteRefOfSubPartitionDefinition(n, parent)
	case *SubPartitionDefinitionOptions:
		return c.copyOnRewriteRefOfSubPartitionDefinitionOptions(n, parent)
	case SubPartitionDefinitions:
		return c.copyOnRewriteSubPartitionDefinitions(n, parent)
	case *Subquery:
		return c.copyOnRewriteRefOfSubquery(n, parent)
	case *SubstrExpr:
		return c.copyOnRewriteRefOfSubstrExpr(n, parent)
	case *Sum:
		return c.copyOnRewriteRefOfSum(n, parent)
	case TableExprs:
		return c.copyOnRewriteTableExprs(n, parent)
	case TableName:
		return c.copyOnRewriteTableName(n, parent)
	case TableNames:
		return c.copyOnRewriteTableNames(n, parent)
	case TableOptions:
		return c.copyOnRewriteTableOptions(n, parent)
	case *TableSpec:
		return c.copyOnRewriteRefOfTableSpec(n, parent)
	case *TablespaceOperation:
		return c.copyOnRewriteRefOfTablespaceOperation(n, parent)
	case *TimestampFuncExpr:
		return c.copyOnRewriteRefOfTimestampFuncExpr(n, parent)
	case *TrimFuncExpr:
		return c.copyOnRewriteRefOfTrimFuncExpr(n, parent)
	case *TruncateTable:
		return c.copyOnRewriteRefOfTruncateTable(n, parent)
	case *UnaryExpr:
		return c.copyOnRewriteRefOfUnaryExpr(n, parent)
	case *Union:
		return c.copyOnRewriteRefOfUnion(n, parent)
	case *UnlockTables:
		return c.copyOnRewriteRefOfUnlockTables(n, parent)
	case *Update:
		return c.copyOnRewriteRefOfUpdate(n, parent)
	case *UpdateExpr:
		return c.copyOnRewriteRefOfUpdateExpr(n, parent)
	case UpdateExprs:
		return c.copyOnRewriteUpdateExprs(n, parent)
	case *UpdateXMLExpr:
		return c.copyOnRewriteRefOfUpdateXMLExpr(n, parent)
	case *Use:
		return c.copyOnRewriteRefOfUse(n, parent)
	case *VExplainStmt:
		return c.copyOnRewriteRefOfVExplainStmt(n, parent)
	case *VStream:
		return c.copyOnRewriteRefOfVStream(n, parent)
	case ValTuple:
		return c.copyOnRewriteValTuple(n, parent)
	case *Validation:
		return c.copyOnRewriteRefOfValidation(n, parent)
	case Values:
		return c.copyOnRewriteValues(n, parent)
	case *ValuesFuncExpr:
		return c.copyOnRewriteRefOfValuesFuncExpr(n, parent)
	case *VarPop:
		return c.copyOnRewriteRefOfVarPop(n, parent)
	case *VarSamp:
		return c.copyOnRewriteRefOfVarSamp(n, parent)
	case *Variable:
		return c.copyOnRewriteRefOfVariable(n, parent)
	case *Variance:
		return c.copyOnRewriteRefOfVariance(n, parent)
	case VindexParam:
		return c.copyOnRewriteVindexParam(n, parent)
	case *VindexSpec:
		return c.copyOnRewriteRefOfVindexSpec(n, parent)
	case *WeightStringFuncExpr:
		return c.copyOnRewriteRefOfWeightStringFuncExpr(n, parent)
	case *When:
		return c.copyOnRewriteRefOfWhen(n, parent)
	case *Where:
		return c.copyOnRewriteRefOfWhere(n, parent)
	case *WindowDefinition:
		return c.copyOnRewriteRefOfWindowDefinition(n, parent)
	case WindowDefinitions:
		return c.copyOnRewriteWindowDefinitions(n, parent)
	case *WindowSpecification:
		return c.copyOnRewriteRefOfWindowSpecification(n, parent)
	case *With:
		return c.copyOnRewriteRefOfWith(n, parent)
	case *XorExpr:
		return c.copyOnRewriteRefOfXorExpr(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteRefOfAddColumns(n *AddColumns, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedColumns bool
		_Columns := make([]*ColumnDefinition, len(n.Columns))
		for x, el := range n.Columns {
			this, changed := c.copyOnRewriteRefOfColumnDefinition(el, n)
			_Columns[x] = this.(*ColumnDefinition)
			if changed {
				changedColumns = true
			}
		}
		_After, changedAfter := c.copyOnRewriteRefOfColName(n.After, n)
		if changedColumns || changedAfter {
			res := *n
			res.Columns = _Columns
			res.After, _ = _After.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAddConstraintDefinition(n *AddConstraintDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ConstraintDefinition, changedConstraintDefinition := c.copyOnRewriteRefOfConstraintDefinition(n.ConstraintDefinition, n)
		if changedConstraintDefinition {
			res := *n
			res.ConstraintDefinition, _ = _ConstraintDefinition.(*ConstraintDefinition)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAddIndexDefinition(n *AddIndexDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_IndexDefinition, changedIndexDefinition := c.copyOnRewriteRefOfIndexDefinition(n.IndexDefinition, n)
		if changedIndexDefinition {
			res := *n
			res.IndexDefinition, _ = _IndexDefinition.(*IndexDefinition)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAliasedExpr(n *AliasedExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_As, changedAs := c.copyOnRewriteIdentifierCI(n.As, n)
		if changedExpr || changedAs {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.As, _ = _As.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAliasedTableExpr(n *AliasedTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteSimpleTableExpr(n.Expr, n)
		_Partitions, changedPartitions := c.copyOnRewritePartitions(n.Partitions, n)
		_As, changedAs := c.copyOnRewriteIdentifierCS(n.As, n)
		_Hints, changedHints := c.copyOnRewriteIndexHints(n.Hints, n)
		_Columns, changedColumns := c.copyOnRewriteColumns(n.Columns, n)
		if changedExpr || changedPartitions || changedAs || changedHints || changedColumns {
			res := *n
			res.Expr, _ = _Expr.(SimpleTableExpr)
			res.Partitions, _ = _Partitions.(Partitions)
			res.As, _ = _As.(IdentifierCS)
			res.Hints, _ = _Hints.(IndexHints)
			res.Columns, _ = _Columns.(Columns)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterCharset(n *AlterCharset, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterCheck(n *AlterCheck, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterColumn(n *AlterColumn, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Column, changedColumn := c.copyOnRewriteRefOfColName(n.Column, n)
		_DefaultVal, changedDefaultVal := c.copyOnRewriteExpr(n.DefaultVal, n)
		if changedColumn || changedDefaultVal {
			res := *n
			res.Column, _ = _Column.(*ColName)
			res.DefaultVal, _ = _DefaultVal.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterDatabase(n *AlterDatabase, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_DBName, changedDBName := c.copyOnRewriteIdentifierCS(n.DBName, n)
		if changedDBName {
			res := *n
			res.DBName, _ = _DBName.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterIndex(n *AlterIndex, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterMigration(n *AlterMigration, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Ratio, changedRatio := c.copyOnRewriteRefOfLiteral(n.Ratio, n)
		if changedRatio {
			res := *n
			res.Ratio, _ = _Ratio.(*Literal)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterTable(n *AlterTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		var changedAlterOptions bool
		_AlterOptions := make([]AlterOption, len(n.AlterOptions))
		for x, el := range n.AlterOptions {
			this, changed := c.copyOnRewriteAlterOption(el, n)
			_AlterOptions[x] = this.(AlterOption)
			if changed {
				changedAlterOptions = true
			}
		}
		_PartitionSpec, changedPartitionSpec := c.copyOnRewriteRefOfPartitionSpec(n.PartitionSpec, n)
		_PartitionOption, changedPartitionOption := c.copyOnRewriteRefOfPartitionOption(n.PartitionOption, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedTable || changedAlterOptions || changedPartitionSpec || changedPartitionOption || changedComments {
			res := *n
			res.Table, _ = _Table.(TableName)
			res.AlterOptions = _AlterOptions
			res.PartitionSpec, _ = _PartitionSpec.(*PartitionSpec)
			res.PartitionOption, _ = _PartitionOption.(*PartitionOption)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterView(n *AlterView, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ViewName, changedViewName := c.copyOnRewriteTableName(n.ViewName, n)
		_Definer, changedDefiner := c.copyOnRewriteRefOfDefiner(n.Definer, n)
		_Columns, changedColumns := c.copyOnRewriteColumns(n.Columns, n)
		_Select, changedSelect := c.copyOnRewriteSelectStatement(n.Select, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedViewName || changedDefiner || changedColumns || changedSelect || changedComments {
			res := *n
			res.ViewName, _ = _ViewName.(TableName)
			res.Definer, _ = _Definer.(*Definer)
			res.Columns, _ = _Columns.(Columns)
			res.Select, _ = _Select.(SelectStatement)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAlterVschema(n *AlterVschema, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		_VindexSpec, changedVindexSpec := c.copyOnRewriteRefOfVindexSpec(n.VindexSpec, n)
		var changedVindexCols bool
		_VindexCols := make([]IdentifierCI, len(n.VindexCols))
		for x, el := range n.VindexCols {
			this, changed := c.copyOnRewriteIdentifierCI(el, n)
			_VindexCols[x] = this.(IdentifierCI)
			if changed {
				changedVindexCols = true
			}
		}
		_AutoIncSpec, changedAutoIncSpec := c.copyOnRewriteRefOfAutoIncSpec(n.AutoIncSpec, n)
		if changedTable || changedVindexSpec || changedVindexCols || changedAutoIncSpec {
			res := *n
			res.Table, _ = _Table.(TableName)
			res.VindexSpec, _ = _VindexSpec.(*VindexSpec)
			res.VindexCols = _VindexCols
			res.AutoIncSpec, _ = _AutoIncSpec.(*AutoIncSpec)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAndExpr(n *AndExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_Right, changedRight := c.copyOnRewriteExpr(n.Right, n)
		if changedLeft || changedRight {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.Right, _ = _Right.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfArgumentLessWindowExpr(n *ArgumentLessWindowExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_OverClause, changedOverClause := c.copyOnRewriteRefOfOverClause(n.OverClause, n)
		if changedOverClause {
			res := *n
			res.OverClause, _ = _OverClause.(*OverClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAutoIncSpec(n *AutoIncSpec, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Column, changedColumn := c.copyOnRewriteIdentifierCI(n.Column, n)
		_Sequence, changedSequence := c.copyOnRewriteTableName(n.Sequence, n)
		if changedColumn || changedSequence {
			res := *n
			res.Column, _ = _Column.(IdentifierCI)
			res.Sequence, _ = _Sequence.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfAvg(n *Avg, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBegin(n *Begin, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBetweenExpr(n *BetweenExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_From, changedFrom := c.copyOnRewriteExpr(n.From, n)
		_To, changedTo := c.copyOnRewriteExpr(n.To, n)
		if changedLeft || changedFrom || changedTo {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.From, _ = _From.(Expr)
			res.To, _ = _To.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBinaryExpr(n *BinaryExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_Right, changedRight := c.copyOnRewriteExpr(n.Right, n)
		if changedLeft || changedRight {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.Right, _ = _Right.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBitAnd(n *BitAnd, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBitOr(n *BitOr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfBitXor(n *BitXor, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCallProc(n *CallProc, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteTableName(n.Name, n)
		_Params, changedParams := c.copyOnRewriteExprs(n.Params, n)
		if changedName || changedParams {
			res := *n
			res.Name, _ = _Name.(TableName)
			res.Params, _ = _Params.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCaseExpr(n *CaseExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		var changedWhens bool
		_Whens := make([]*When, len(n.Whens))
		for x, el := range n.Whens {
			this, changed := c.copyOnRewriteRefOfWhen(el, n)
			_Whens[x] = this.(*When)
			if changed {
				changedWhens = true
			}
		}
		_Else, changedElse := c.copyOnRewriteExpr(n.Else, n)
		if changedExpr || changedWhens || changedElse {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Whens = _Whens
			res.Else, _ = _Else.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCastExpr(n *CastExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Type, changedType := c.copyOnRewriteRefOfConvertType(n.Type, n)
		if changedExpr || changedType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Type, _ = _Type.(*ConvertType)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfChangeColumn(n *ChangeColumn, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_OldColumn, changedOldColumn := c.copyOnRewriteRefOfColName(n.OldColumn, n)
		_NewColDefinition, changedNewColDefinition := c.copyOnRewriteRefOfColumnDefinition(n.NewColDefinition, n)
		_After, changedAfter := c.copyOnRewriteRefOfColName(n.After, n)
		if changedOldColumn || changedNewColDefinition || changedAfter {
			res := *n
			res.OldColumn, _ = _OldColumn.(*ColName)
			res.NewColDefinition, _ = _NewColDefinition.(*ColumnDefinition)
			res.After, _ = _After.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCharExpr(n *CharExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Exprs, changedExprs := c.copyOnRewriteExprs(n.Exprs, n)
		if changedExprs {
			res := *n
			res.Exprs, _ = _Exprs.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCheckConstraintDefinition(n *CheckConstraintDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfColName(n *ColName, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Qualifier, changedQualifier := c.copyOnRewriteTableName(n.Qualifier, n)
		if changedName || changedQualifier {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Qualifier, _ = _Qualifier.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCollateExpr(n *CollateExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfColumnDefinition(n *ColumnDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Type, changedType := c.copyOnRewriteRefOfColumnType(n.Type, n)
		if changedName || changedType {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Type, _ = _Type.(*ColumnType)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfColumnType(n *ColumnType, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Length, changedLength := c.copyOnRewriteRefOfLiteral(n.Length, n)
		_Scale, changedScale := c.copyOnRewriteRefOfLiteral(n.Scale, n)
		if changedLength || changedScale {
			res := *n
			res.Length, _ = _Length.(*Literal)
			res.Scale, _ = _Scale.(*Literal)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteColumns(n Columns, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(Columns, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteIdentifierCI(el, n)
			res[x] = this.(IdentifierCI)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCommentOnly(n *CommentOnly, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCommit(n *Commit, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCommonTableExpr(n *CommonTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ID, changedID := c.copyOnRewriteIdentifierCS(n.ID, n)
		_Columns, changedColumns := c.copyOnRewriteColumns(n.Columns, n)
		_Subquery, changedSubquery := c.copyOnRewriteRefOfSubquery(n.Subquery, n)
		if changedID || changedColumns || changedSubquery {
			res := *n
			res.ID, _ = _ID.(IdentifierCS)
			res.Columns, _ = _Columns.(Columns)
			res.Subquery, _ = _Subquery.(*Subquery)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfComparisonExpr(n *ComparisonExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_Right, changedRight := c.copyOnRewriteExpr(n.Right, n)
		_Escape, changedEscape := c.copyOnRewriteExpr(n.Escape, n)
		if changedLeft || changedRight || changedEscape {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.Right, _ = _Right.(Expr)
			res.Escape, _ = _Escape.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfConstraintDefinition(n *ConstraintDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Details, changedDetails := c.copyOnRewriteConstraintInfo(n.Details, n)
		if changedName || changedDetails {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Details, _ = _Details.(ConstraintInfo)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfConvertExpr(n *ConvertExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Type, changedType := c.copyOnRewriteRefOfConvertType(n.Type, n)
		if changedExpr || changedType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Type, _ = _Type.(*ConvertType)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfConvertType(n *ConvertType, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Length, changedLength := c.copyOnRewriteRefOfLiteral(n.Length, n)
		_Scale, changedScale := c.copyOnRewriteRefOfLiteral(n.Scale, n)
		if changedLength || changedScale {
			res := *n
			res.Length, _ = _Length.(*Literal)
			res.Scale, _ = _Scale.(*Literal)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfConvertUsingExpr(n *ConvertUsingExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCount(n *Count, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Args, changedArgs := c.copyOnRewriteExprs(n.Args, n)
		if changedArgs {
			res := *n
			res.Args, _ = _Args.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCountStar(n *CountStar, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCreateDatabase(n *CreateDatabase, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_DBName, changedDBName := c.copyOnRewriteIdentifierCS(n.DBName, n)
		if changedComments || changedDBName {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.DBName, _ = _DBName.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCreateTable(n *CreateTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		_TableSpec, changedTableSpec := c.copyOnRewriteRefOfTableSpec(n.TableSpec, n)
		_OptLike, changedOptLike := c.copyOnRewriteRefOfOptLike(n.OptLike, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedTable || changedTableSpec || changedOptLike || changedComments {
			res := *n
			res.Table, _ = _Table.(TableName)
			res.TableSpec, _ = _TableSpec.(*TableSpec)
			res.OptLike, _ = _OptLike.(*OptLike)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCreateView(n *CreateView, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ViewName, changedViewName := c.copyOnRewriteTableName(n.ViewName, n)
		_Definer, changedDefiner := c.copyOnRewriteRefOfDefiner(n.Definer, n)
		_Columns, changedColumns := c.copyOnRewriteColumns(n.Columns, n)
		_Select, changedSelect := c.copyOnRewriteSelectStatement(n.Select, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedViewName || changedDefiner || changedColumns || changedSelect || changedComments {
			res := *n
			res.ViewName, _ = _ViewName.(TableName)
			res.Definer, _ = _Definer.(*Definer)
			res.Columns, _ = _Columns.(Columns)
			res.Select, _ = _Select.(SelectStatement)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfCurTimeFuncExpr(n *CurTimeFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Fsp, changedFsp := c.copyOnRewriteExpr(n.Fsp, n)
		if changedName || changedFsp {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Fsp, _ = _Fsp.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDeallocateStmt(n *DeallocateStmt, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedComments || changedName {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDefault(n *Default, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDefiner(n *Definer, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDelete(n *Delete, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_With, changedWith := c.copyOnRewriteRefOfWith(n.With, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_Targets, changedTargets := c.copyOnRewriteTableNames(n.Targets, n)
		_TableExprs, changedTableExprs := c.copyOnRewriteTableExprs(n.TableExprs, n)
		_Partitions, changedPartitions := c.copyOnRewritePartitions(n.Partitions, n)
		_Where, changedWhere := c.copyOnRewriteRefOfWhere(n.Where, n)
		_OrderBy, changedOrderBy := c.copyOnRewriteOrderBy(n.OrderBy, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		if changedWith || changedComments || changedTargets || changedTableExprs || changedPartitions || changedWhere || changedOrderBy || changedLimit {
			res := *n
			res.With, _ = _With.(*With)
			res.Comments, _ = _Comments.(*ParsedComments)
			res.Targets, _ = _Targets.(TableNames)
			res.TableExprs, _ = _TableExprs.(TableExprs)
			res.Partitions, _ = _Partitions.(Partitions)
			res.Where, _ = _Where.(*Where)
			res.OrderBy, _ = _OrderBy.(OrderBy)
			res.Limit, _ = _Limit.(*Limit)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDerivedTable(n *DerivedTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Select, changedSelect := c.copyOnRewriteSelectStatement(n.Select, n)
		if changedSelect {
			res := *n
			res.Select, _ = _Select.(SelectStatement)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDropColumn(n *DropColumn, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteRefOfColName(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDropDatabase(n *DropDatabase, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_DBName, changedDBName := c.copyOnRewriteIdentifierCS(n.DBName, n)
		if changedComments || changedDBName {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.DBName, _ = _DBName.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDropKey(n *DropKey, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDropTable(n *DropTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_FromTables, changedFromTables := c.copyOnRewriteTableNames(n.FromTables, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedFromTables || changedComments {
			res := *n
			res.FromTables, _ = _FromTables.(TableNames)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfDropView(n *DropView, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_FromTables, changedFromTables := c.copyOnRewriteTableNames(n.FromTables, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedFromTables || changedComments {
			res := *n
			res.FromTables, _ = _FromTables.(TableNames)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExecuteStmt(n *ExecuteStmt, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		var changedArguments bool
		_Arguments := make([]*Variable, len(n.Arguments))
		for x, el := range n.Arguments {
			this, changed := c.copyOnRewriteRefOfVariable(el, n)
			_Arguments[x] = this.(*Variable)
			if changed {
				changedArguments = true
			}
		}
		if changedName || changedComments || changedArguments {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Comments, _ = _Comments.(*ParsedComments)
			res.Arguments = _Arguments
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExistsExpr(n *ExistsExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Subquery, changedSubquery := c.copyOnRewriteRefOfSubquery(n.Subquery, n)
		if changedSubquery {
			res := *n
			res.Subquery, _ = _Subquery.(*Subquery)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExplainStmt(n *ExplainStmt, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Statement, changedStatement := c.copyOnRewriteStatement(n.Statement, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedStatement || changedComments {
			res := *n
			res.Statement, _ = _Statement.(Statement)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExplainTab(n *ExplainTab, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		if changedTable {
			res := *n
			res.Table, _ = _Table.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteExprs(n Exprs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(Exprs, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteExpr(el, n)
			res[x] = this.(Expr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExtractFuncExpr(n *ExtractFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExtractValueExpr(n *ExtractValueExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Fragment, changedFragment := c.copyOnRewriteExpr(n.Fragment, n)
		_XPathExpr, changedXPathExpr := c.copyOnRewriteExpr(n.XPathExpr, n)
		if changedFragment || changedXPathExpr {
			res := *n
			res.Fragment, _ = _Fragment.(Expr)
			res.XPathExpr, _ = _XPathExpr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfExtractedSubquery(n *ExtractedSubquery, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Original, changedOriginal := c.copyOnRewriteExpr(n.Original, n)
		_Subquery, changedSubquery := c.copyOnRewriteRefOfSubquery(n.Subquery, n)
		_OtherSide, changedOtherSide := c.copyOnRewriteExpr(n.OtherSide, n)
		_alternative, changedalternative := c.copyOnRewriteExpr(n.alternative, n)
		if changedOriginal || changedSubquery || changedOtherSide || changedalternative {
			res := *n
			res.Original, _ = _Original.(Expr)
			res.Subquery, _ = _Subquery.(*Subquery)
			res.OtherSide, _ = _OtherSide.(Expr)
			res.alternative, _ = _alternative.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFirstOrLastValueExpr(n *FirstOrLastValueExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_NullTreatmentClause, changedNullTreatmentClause := c.copyOnRewriteRefOfNullTreatmentClause(n.NullTreatmentClause, n)
		_OverClause, changedOverClause := c.copyOnRewriteRefOfOverClause(n.OverClause, n)
		if changedExpr || changedNullTreatmentClause || changedOverClause {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.NullTreatmentClause, _ = _NullTreatmentClause.(*NullTreatmentClause)
			res.OverClause, _ = _OverClause.(*OverClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFlush(n *Flush, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_TableNames, changedTableNames := c.copyOnRewriteTableNames(n.TableNames, n)
		if changedTableNames {
			res := *n
			res.TableNames, _ = _TableNames.(TableNames)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfForce(n *Force, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfForeignKeyDefinition(n *ForeignKeyDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Source, changedSource := c.copyOnRewriteColumns(n.Source, n)
		_IndexName, changedIndexName := c.copyOnRewriteIdentifierCI(n.IndexName, n)
		_ReferenceDefinition, changedReferenceDefinition := c.copyOnRewriteRefOfReferenceDefinition(n.ReferenceDefinition, n)
		if changedSource || changedIndexName || changedReferenceDefinition {
			res := *n
			res.Source, _ = _Source.(Columns)
			res.IndexName, _ = _IndexName.(IdentifierCI)
			res.ReferenceDefinition, _ = _ReferenceDefinition.(*ReferenceDefinition)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFrameClause(n *FrameClause, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Start, changedStart := c.copyOnRewriteRefOfFramePoint(n.Start, n)
		_End, changedEnd := c.copyOnRewriteRefOfFramePoint(n.End, n)
		if changedStart || changedEnd {
			res := *n
			res.Start, _ = _Start.(*FramePoint)
			res.End, _ = _End.(*FramePoint)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFramePoint(n *FramePoint, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFromFirstLastClause(n *FromFirstLastClause, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfFuncExpr(n *FuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Qualifier, changedQualifier := c.copyOnRewriteIdentifierCS(n.Qualifier, n)
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Exprs, changedExprs := c.copyOnRewriteSelectExprs(n.Exprs, n)
		if changedQualifier || changedName || changedExprs {
			res := *n
			res.Qualifier, _ = _Qualifier.(IdentifierCS)
			res.Name, _ = _Name.(IdentifierCI)
			res.Exprs, _ = _Exprs.(SelectExprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfGTIDFuncExpr(n *GTIDFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Set1, changedSet1 := c.copyOnRewriteExpr(n.Set1, n)
		_Set2, changedSet2 := c.copyOnRewriteExpr(n.Set2, n)
		_Timeout, changedTimeout := c.copyOnRewriteExpr(n.Timeout, n)
		_Channel, changedChannel := c.copyOnRewriteExpr(n.Channel, n)
		if changedSet1 || changedSet2 || changedTimeout || changedChannel {
			res := *n
			res.Set1, _ = _Set1.(Expr)
			res.Set2, _ = _Set2.(Expr)
			res.Timeout, _ = _Timeout.(Expr)
			res.Channel, _ = _Channel.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteGroupBy(n GroupBy, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(GroupBy, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteExpr(el, n)
			res[x] = this.(Expr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfGroupConcatExpr(n *GroupConcatExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Exprs, changedExprs := c.copyOnRewriteExprs(n.Exprs, n)
		_OrderBy, changedOrderBy := c.copyOnRewriteOrderBy(n.OrderBy, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		if changedExprs || changedOrderBy || changedLimit {
			res := *n
			res.Exprs, _ = _Exprs.(Exprs)
			res.OrderBy, _ = _OrderBy.(OrderBy)
			res.Limit, _ = _Limit.(*Limit)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteIdentifierCI(n IdentifierCI, parent SQLNode) (out SQLNode, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteIdentifierCS(n IdentifierCS, parent SQLNode) (out SQLNode, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIndexDefinition(n *IndexDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Info, changedInfo := c.copyOnRewriteRefOfIndexInfo(n.Info, n)
		if changedInfo {
			res := *n
			res.Info, _ = _Info.(*IndexInfo)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIndexHint(n *IndexHint, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedIndexes bool
		_Indexes := make([]IdentifierCI, len(n.Indexes))
		for x, el := range n.Indexes {
			this, changed := c.copyOnRewriteIdentifierCI(el, n)
			_Indexes[x] = this.(IdentifierCI)
			if changed {
				changedIndexes = true
			}
		}
		if changedIndexes {
			res := *n
			res.Indexes = _Indexes
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteIndexHints(n IndexHints, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(IndexHints, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfIndexHint(el, n)
			res[x] = this.(*IndexHint)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIndexInfo(n *IndexInfo, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_ConstraintName, changedConstraintName := c.copyOnRewriteIdentifierCI(n.ConstraintName, n)
		if changedName || changedConstraintName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.ConstraintName, _ = _ConstraintName.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfInsert(n *Insert, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		_Partitions, changedPartitions := c.copyOnRewritePartitions(n.Partitions, n)
		_Columns, changedColumns := c.copyOnRewriteColumns(n.Columns, n)
		_Rows, changedRows := c.copyOnRewriteInsertRows(n.Rows, n)
		_OnDup, changedOnDup := c.copyOnRewriteOnDup(n.OnDup, n)
		if changedComments || changedTable || changedPartitions || changedColumns || changedRows || changedOnDup {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.Table, _ = _Table.(TableName)
			res.Partitions, _ = _Partitions.(Partitions)
			res.Columns, _ = _Columns.(Columns)
			res.Rows, _ = _Rows.(InsertRows)
			res.OnDup, _ = _OnDup.(OnDup)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfInsertExpr(n *InsertExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Str, changedStr := c.copyOnRewriteExpr(n.Str, n)
		_Pos, changedPos := c.copyOnRewriteExpr(n.Pos, n)
		_Len, changedLen := c.copyOnRewriteExpr(n.Len, n)
		_NewStr, changedNewStr := c.copyOnRewriteExpr(n.NewStr, n)
		if changedStr || changedPos || changedLen || changedNewStr {
			res := *n
			res.Str, _ = _Str.(Expr)
			res.Pos, _ = _Pos.(Expr)
			res.Len, _ = _Len.(Expr)
			res.NewStr, _ = _NewStr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIntervalExpr(n *IntervalExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIntervalFuncExpr(n *IntervalFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Exprs, changedExprs := c.copyOnRewriteExprs(n.Exprs, n)
		if changedExpr || changedExprs {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Exprs, _ = _Exprs.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIntroducerExpr(n *IntroducerExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIsExpr(n *IsExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		if changedLeft {
			res := *n
			res.Left, _ = _Left.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONArrayExpr(n *JSONArrayExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Params, changedParams := c.copyOnRewriteExprs(n.Params, n)
		if changedParams {
			res := *n
			res.Params, _ = _Params.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONAttributesExpr(n *JSONAttributesExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_Path, changedPath := c.copyOnRewriteExpr(n.Path, n)
		if changedJSONDoc || changedPath {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.Path, _ = _Path.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONContainsExpr(n *JSONContainsExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Target, changedTarget := c.copyOnRewriteExpr(n.Target, n)
		_Candidate, changedCandidate := c.copyOnRewriteExpr(n.Candidate, n)
		var changedPathList bool
		_PathList := make([]Expr, len(n.PathList))
		for x, el := range n.PathList {
			this, changed := c.copyOnRewriteExpr(el, n)
			_PathList[x] = this.(Expr)
			if changed {
				changedPathList = true
			}
		}
		if changedTarget || changedCandidate || changedPathList {
			res := *n
			res.Target, _ = _Target.(Expr)
			res.Candidate, _ = _Candidate.(Expr)
			res.PathList = _PathList
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONContainsPathExpr(n *JSONContainsPathExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_OneOrAll, changedOneOrAll := c.copyOnRewriteExpr(n.OneOrAll, n)
		var changedPathList bool
		_PathList := make([]Expr, len(n.PathList))
		for x, el := range n.PathList {
			this, changed := c.copyOnRewriteExpr(el, n)
			_PathList[x] = this.(Expr)
			if changed {
				changedPathList = true
			}
		}
		if changedJSONDoc || changedOneOrAll || changedPathList {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.OneOrAll, _ = _OneOrAll.(Expr)
			res.PathList = _PathList
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONExtractExpr(n *JSONExtractExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		var changedPathList bool
		_PathList := make([]Expr, len(n.PathList))
		for x, el := range n.PathList {
			this, changed := c.copyOnRewriteExpr(el, n)
			_PathList[x] = this.(Expr)
			if changed {
				changedPathList = true
			}
		}
		if changedJSONDoc || changedPathList {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.PathList = _PathList
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONKeysExpr(n *JSONKeysExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_Path, changedPath := c.copyOnRewriteExpr(n.Path, n)
		if changedJSONDoc || changedPath {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.Path, _ = _Path.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONObjectExpr(n *JSONObjectExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedParams bool
		_Params := make([]*JSONObjectParam, len(n.Params))
		for x, el := range n.Params {
			this, changed := c.copyOnRewriteRefOfJSONObjectParam(el, n)
			_Params[x] = this.(*JSONObjectParam)
			if changed {
				changedParams = true
			}
		}
		if changedParams {
			res := *n
			res.Params = _Params
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONObjectParam(n *JSONObjectParam, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Key, changedKey := c.copyOnRewriteExpr(n.Key, n)
		_Value, changedValue := c.copyOnRewriteExpr(n.Value, n)
		if changedKey || changedValue {
			res := *n
			res.Key, _ = _Key.(Expr)
			res.Value, _ = _Value.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONOverlapsExpr(n *JSONOverlapsExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc1, changedJSONDoc1 := c.copyOnRewriteExpr(n.JSONDoc1, n)
		_JSONDoc2, changedJSONDoc2 := c.copyOnRewriteExpr(n.JSONDoc2, n)
		if changedJSONDoc1 || changedJSONDoc2 {
			res := *n
			res.JSONDoc1, _ = _JSONDoc1.(Expr)
			res.JSONDoc2, _ = _JSONDoc2.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONPrettyExpr(n *JSONPrettyExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONVal, changedJSONVal := c.copyOnRewriteExpr(n.JSONVal, n)
		if changedJSONVal {
			res := *n
			res.JSONVal, _ = _JSONVal.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONQuoteExpr(n *JSONQuoteExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_StringArg, changedStringArg := c.copyOnRewriteExpr(n.StringArg, n)
		if changedStringArg {
			res := *n
			res.StringArg, _ = _StringArg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONRemoveExpr(n *JSONRemoveExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_PathList, changedPathList := c.copyOnRewriteExprs(n.PathList, n)
		if changedJSONDoc || changedPathList {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.PathList, _ = _PathList.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONSchemaValidFuncExpr(n *JSONSchemaValidFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Schema, changedSchema := c.copyOnRewriteExpr(n.Schema, n)
		_Document, changedDocument := c.copyOnRewriteExpr(n.Document, n)
		if changedSchema || changedDocument {
			res := *n
			res.Schema, _ = _Schema.(Expr)
			res.Document, _ = _Document.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONSchemaValidationReportFuncExpr(n *JSONSchemaValidationReportFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Schema, changedSchema := c.copyOnRewriteExpr(n.Schema, n)
		_Document, changedDocument := c.copyOnRewriteExpr(n.Document, n)
		if changedSchema || changedDocument {
			res := *n
			res.Schema, _ = _Schema.(Expr)
			res.Document, _ = _Document.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONSearchExpr(n *JSONSearchExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_OneOrAll, changedOneOrAll := c.copyOnRewriteExpr(n.OneOrAll, n)
		_SearchStr, changedSearchStr := c.copyOnRewriteExpr(n.SearchStr, n)
		_EscapeChar, changedEscapeChar := c.copyOnRewriteExpr(n.EscapeChar, n)
		var changedPathList bool
		_PathList := make([]Expr, len(n.PathList))
		for x, el := range n.PathList {
			this, changed := c.copyOnRewriteExpr(el, n)
			_PathList[x] = this.(Expr)
			if changed {
				changedPathList = true
			}
		}
		if changedJSONDoc || changedOneOrAll || changedSearchStr || changedEscapeChar || changedPathList {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.OneOrAll, _ = _OneOrAll.(Expr)
			res.SearchStr, _ = _SearchStr.(Expr)
			res.EscapeChar, _ = _EscapeChar.(Expr)
			res.PathList = _PathList
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONStorageFreeExpr(n *JSONStorageFreeExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONVal, changedJSONVal := c.copyOnRewriteExpr(n.JSONVal, n)
		if changedJSONVal {
			res := *n
			res.JSONVal, _ = _JSONVal.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONStorageSizeExpr(n *JSONStorageSizeExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONVal, changedJSONVal := c.copyOnRewriteExpr(n.JSONVal, n)
		if changedJSONVal {
			res := *n
			res.JSONVal, _ = _JSONVal.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONTableExpr(n *JSONTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Alias, changedAlias := c.copyOnRewriteIdentifierCS(n.Alias, n)
		_Filter, changedFilter := c.copyOnRewriteExpr(n.Filter, n)
		var changedColumns bool
		_Columns := make([]*JtColumnDefinition, len(n.Columns))
		for x, el := range n.Columns {
			this, changed := c.copyOnRewriteRefOfJtColumnDefinition(el, n)
			_Columns[x] = this.(*JtColumnDefinition)
			if changed {
				changedColumns = true
			}
		}
		if changedExpr || changedAlias || changedFilter || changedColumns {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Alias, _ = _Alias.(IdentifierCS)
			res.Filter, _ = _Filter.(Expr)
			res.Columns = _Columns
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONUnquoteExpr(n *JSONUnquoteExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONValue, changedJSONValue := c.copyOnRewriteExpr(n.JSONValue, n)
		if changedJSONValue {
			res := *n
			res.JSONValue, _ = _JSONValue.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONValueExpr(n *JSONValueExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_Path, changedPath := c.copyOnRewriteExpr(n.Path, n)
		_ReturningType, changedReturningType := c.copyOnRewriteRefOfConvertType(n.ReturningType, n)
		_EmptyOnResponse, changedEmptyOnResponse := c.copyOnRewriteRefOfJtOnResponse(n.EmptyOnResponse, n)
		_ErrorOnResponse, changedErrorOnResponse := c.copyOnRewriteRefOfJtOnResponse(n.ErrorOnResponse, n)
		if changedJSONDoc || changedPath || changedReturningType || changedEmptyOnResponse || changedErrorOnResponse {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.Path, _ = _Path.(Expr)
			res.ReturningType, _ = _ReturningType.(*ConvertType)
			res.EmptyOnResponse, _ = _EmptyOnResponse.(*JtOnResponse)
			res.ErrorOnResponse, _ = _ErrorOnResponse.(*JtOnResponse)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONValueMergeExpr(n *JSONValueMergeExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		_JSONDocList, changedJSONDocList := c.copyOnRewriteExprs(n.JSONDocList, n)
		if changedJSONDoc || changedJSONDocList {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.JSONDocList, _ = _JSONDocList.(Exprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJSONValueModifierExpr(n *JSONValueModifierExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_JSONDoc, changedJSONDoc := c.copyOnRewriteExpr(n.JSONDoc, n)
		var changedParams bool
		_Params := make([]*JSONObjectParam, len(n.Params))
		for x, el := range n.Params {
			this, changed := c.copyOnRewriteRefOfJSONObjectParam(el, n)
			_Params[x] = this.(*JSONObjectParam)
			if changed {
				changedParams = true
			}
		}
		if changedJSONDoc || changedParams {
			res := *n
			res.JSONDoc, _ = _JSONDoc.(Expr)
			res.Params = _Params
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJoinCondition(n *JoinCondition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_On, changedOn := c.copyOnRewriteExpr(n.On, n)
		_Using, changedUsing := c.copyOnRewriteColumns(n.Using, n)
		if changedOn || changedUsing {
			res := *n
			res.On, _ = _On.(Expr)
			res.Using, _ = _Using.(Columns)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJoinTableExpr(n *JoinTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_LeftExpr, changedLeftExpr := c.copyOnRewriteTableExpr(n.LeftExpr, n)
		_RightExpr, changedRightExpr := c.copyOnRewriteTableExpr(n.RightExpr, n)
		_Condition, changedCondition := c.copyOnRewriteRefOfJoinCondition(n.Condition, n)
		if changedLeftExpr || changedRightExpr || changedCondition {
			res := *n
			res.LeftExpr, _ = _LeftExpr.(TableExpr)
			res.RightExpr, _ = _RightExpr.(TableExpr)
			res.Condition, _ = _Condition.(*JoinCondition)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJtColumnDefinition(n *JtColumnDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfJtOnResponse(n *JtOnResponse, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfKeyState(n *KeyState, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLagLeadExpr(n *LagLeadExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_N, changedN := c.copyOnRewriteExpr(n.N, n)
		_Default, changedDefault := c.copyOnRewriteExpr(n.Default, n)
		_OverClause, changedOverClause := c.copyOnRewriteRefOfOverClause(n.OverClause, n)
		_NullTreatmentClause, changedNullTreatmentClause := c.copyOnRewriteRefOfNullTreatmentClause(n.NullTreatmentClause, n)
		if changedExpr || changedN || changedDefault || changedOverClause || changedNullTreatmentClause {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.N, _ = _N.(Expr)
			res.Default, _ = _Default.(Expr)
			res.OverClause, _ = _OverClause.(*OverClause)
			res.NullTreatmentClause, _ = _NullTreatmentClause.(*NullTreatmentClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLimit(n *Limit, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Offset, changedOffset := c.copyOnRewriteExpr(n.Offset, n)
		_Rowcount, changedRowcount := c.copyOnRewriteExpr(n.Rowcount, n)
		if changedOffset || changedRowcount {
			res := *n
			res.Offset, _ = _Offset.(Expr)
			res.Rowcount, _ = _Rowcount.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLiteral(n *Literal, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLoad(n *Load, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLocateExpr(n *LocateExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_SubStr, changedSubStr := c.copyOnRewriteExpr(n.SubStr, n)
		_Str, changedStr := c.copyOnRewriteExpr(n.Str, n)
		_Pos, changedPos := c.copyOnRewriteExpr(n.Pos, n)
		if changedSubStr || changedStr || changedPos {
			res := *n
			res.SubStr, _ = _SubStr.(Expr)
			res.Str, _ = _Str.(Expr)
			res.Pos, _ = _Pos.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLockOption(n *LockOption, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLockTables(n *LockTables, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfLockingFunc(n *LockingFunc, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteExpr(n.Name, n)
		_Timeout, changedTimeout := c.copyOnRewriteExpr(n.Timeout, n)
		if changedName || changedTimeout {
			res := *n
			res.Name, _ = _Name.(Expr)
			res.Timeout, _ = _Timeout.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfMatchExpr(n *MatchExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedColumns bool
		_Columns := make([]*ColName, len(n.Columns))
		for x, el := range n.Columns {
			this, changed := c.copyOnRewriteRefOfColName(el, n)
			_Columns[x] = this.(*ColName)
			if changed {
				changedColumns = true
			}
		}
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedColumns || changedExpr {
			res := *n
			res.Columns = _Columns
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfMax(n *Max, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfMemberOfExpr(n *MemberOfExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Value, changedValue := c.copyOnRewriteExpr(n.Value, n)
		_JSONArr, changedJSONArr := c.copyOnRewriteExpr(n.JSONArr, n)
		if changedValue || changedJSONArr {
			res := *n
			res.Value, _ = _Value.(Expr)
			res.JSONArr, _ = _JSONArr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfMin(n *Min, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfModifyColumn(n *ModifyColumn, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_NewColDefinition, changedNewColDefinition := c.copyOnRewriteRefOfColumnDefinition(n.NewColDefinition, n)
		_After, changedAfter := c.copyOnRewriteRefOfColName(n.After, n)
		if changedNewColDefinition || changedAfter {
			res := *n
			res.NewColDefinition, _ = _NewColDefinition.(*ColumnDefinition)
			res.After, _ = _After.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNTHValueExpr(n *NTHValueExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_N, changedN := c.copyOnRewriteExpr(n.N, n)
		_OverClause, changedOverClause := c.copyOnRewriteRefOfOverClause(n.OverClause, n)
		_FromFirstLastClause, changedFromFirstLastClause := c.copyOnRewriteRefOfFromFirstLastClause(n.FromFirstLastClause, n)
		_NullTreatmentClause, changedNullTreatmentClause := c.copyOnRewriteRefOfNullTreatmentClause(n.NullTreatmentClause, n)
		if changedExpr || changedN || changedOverClause || changedFromFirstLastClause || changedNullTreatmentClause {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.N, _ = _N.(Expr)
			res.OverClause, _ = _OverClause.(*OverClause)
			res.FromFirstLastClause, _ = _FromFirstLastClause.(*FromFirstLastClause)
			res.NullTreatmentClause, _ = _NullTreatmentClause.(*NullTreatmentClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNamedWindow(n *NamedWindow, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Windows, changedWindows := c.copyOnRewriteWindowDefinitions(n.Windows, n)
		if changedWindows {
			res := *n
			res.Windows, _ = _Windows.(WindowDefinitions)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteNamedWindows(n NamedWindows, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(NamedWindows, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfNamedWindow(el, n)
			res[x] = this.(*NamedWindow)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNextval(n *Nextval, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNotExpr(n *NotExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNtileExpr(n *NtileExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_N, changedN := c.copyOnRewriteExpr(n.N, n)
		_OverClause, changedOverClause := c.copyOnRewriteRefOfOverClause(n.OverClause, n)
		if changedN || changedOverClause {
			res := *n
			res.N, _ = _N.(Expr)
			res.OverClause, _ = _OverClause.(*OverClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNullTreatmentClause(n *NullTreatmentClause, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfNullVal(n *NullVal, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOffset(n *Offset, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteOnDup(n OnDup, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(OnDup, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfUpdateExpr(el, n)
			res[x] = this.(*UpdateExpr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOptLike(n *OptLike, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_LikeTable, changedLikeTable := c.copyOnRewriteTableName(n.LikeTable, n)
		if changedLikeTable {
			res := *n
			res.LikeTable, _ = _LikeTable.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOrExpr(n *OrExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_Right, changedRight := c.copyOnRewriteExpr(n.Right, n)
		if changedLeft || changedRight {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.Right, _ = _Right.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOrder(n *Order, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteOrderBy(n OrderBy, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(OrderBy, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfOrder(el, n)
			res[x] = this.(*Order)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOrderByOption(n *OrderByOption, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Cols, changedCols := c.copyOnRewriteColumns(n.Cols, n)
		if changedCols {
			res := *n
			res.Cols, _ = _Cols.(Columns)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOtherAdmin(n *OtherAdmin, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOtherRead(n *OtherRead, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfOverClause(n *OverClause, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_WindowName, changedWindowName := c.copyOnRewriteIdentifierCI(n.WindowName, n)
		_WindowSpec, changedWindowSpec := c.copyOnRewriteRefOfWindowSpecification(n.WindowSpec, n)
		if changedWindowName || changedWindowSpec {
			res := *n
			res.WindowName, _ = _WindowName.(IdentifierCI)
			res.WindowSpec, _ = _WindowSpec.(*WindowSpecification)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfParenTableExpr(n *ParenTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Exprs, changedExprs := c.copyOnRewriteTableExprs(n.Exprs, n)
		if changedExprs {
			res := *n
			res.Exprs, _ = _Exprs.(TableExprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfParsedComments(n *ParsedComments, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionDefinition(n *PartitionDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Options, changedOptions := c.copyOnRewriteRefOfPartitionDefinitionOptions(n.Options, n)
		if changedName || changedOptions {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Options, _ = _Options.(*PartitionDefinitionOptions)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionDefinitionOptions(n *PartitionDefinitionOptions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ValueRange, changedValueRange := c.copyOnRewriteRefOfPartitionValueRange(n.ValueRange, n)
		_Comment, changedComment := c.copyOnRewriteRefOfLiteral(n.Comment, n)
		_Engine, changedEngine := c.copyOnRewriteRefOfPartitionEngine(n.Engine, n)
		_DataDirectory, changedDataDirectory := c.copyOnRewriteRefOfLiteral(n.DataDirectory, n)
		_IndexDirectory, changedIndexDirectory := c.copyOnRewriteRefOfLiteral(n.IndexDirectory, n)
		_SubPartitionDefinitions, changedSubPartitionDefinitions := c.copyOnRewriteSubPartitionDefinitions(n.SubPartitionDefinitions, n)
		if changedValueRange || changedComment || changedEngine || changedDataDirectory || changedIndexDirectory || changedSubPartitionDefinitions {
			res := *n
			res.ValueRange, _ = _ValueRange.(*PartitionValueRange)
			res.Comment, _ = _Comment.(*Literal)
			res.Engine, _ = _Engine.(*PartitionEngine)
			res.DataDirectory, _ = _DataDirectory.(*Literal)
			res.IndexDirectory, _ = _IndexDirectory.(*Literal)
			res.SubPartitionDefinitions, _ = _SubPartitionDefinitions.(SubPartitionDefinitions)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionEngine(n *PartitionEngine, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionOption(n *PartitionOption, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ColList, changedColList := c.copyOnRewriteColumns(n.ColList, n)
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_SubPartition, changedSubPartition := c.copyOnRewriteRefOfSubPartition(n.SubPartition, n)
		var changedDefinitions bool
		_Definitions := make([]*PartitionDefinition, len(n.Definitions))
		for x, el := range n.Definitions {
			this, changed := c.copyOnRewriteRefOfPartitionDefinition(el, n)
			_Definitions[x] = this.(*PartitionDefinition)
			if changed {
				changedDefinitions = true
			}
		}
		if changedColList || changedExpr || changedSubPartition || changedDefinitions {
			res := *n
			res.ColList, _ = _ColList.(Columns)
			res.Expr, _ = _Expr.(Expr)
			res.SubPartition, _ = _SubPartition.(*SubPartition)
			res.Definitions = _Definitions
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionSpec(n *PartitionSpec, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Names, changedNames := c.copyOnRewritePartitions(n.Names, n)
		_Number, changedNumber := c.copyOnRewriteRefOfLiteral(n.Number, n)
		_TableName, changedTableName := c.copyOnRewriteTableName(n.TableName, n)
		var changedDefinitions bool
		_Definitions := make([]*PartitionDefinition, len(n.Definitions))
		for x, el := range n.Definitions {
			this, changed := c.copyOnRewriteRefOfPartitionDefinition(el, n)
			_Definitions[x] = this.(*PartitionDefinition)
			if changed {
				changedDefinitions = true
			}
		}
		if changedNames || changedNumber || changedTableName || changedDefinitions {
			res := *n
			res.Names, _ = _Names.(Partitions)
			res.Number, _ = _Number.(*Literal)
			res.TableName, _ = _TableName.(TableName)
			res.Definitions = _Definitions
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPartitionValueRange(n *PartitionValueRange, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Range, changedRange := c.copyOnRewriteValTuple(n.Range, n)
		if changedRange {
			res := *n
			res.Range, _ = _Range.(ValTuple)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewritePartitions(n Partitions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(Partitions, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteIdentifierCI(el, n)
			res[x] = this.(IdentifierCI)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPerformanceSchemaFuncExpr(n *PerformanceSchemaFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Argument, changedArgument := c.copyOnRewriteExpr(n.Argument, n)
		if changedArgument {
			res := *n
			res.Argument, _ = _Argument.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfPrepareStmt(n *PrepareStmt, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Statement, changedStatement := c.copyOnRewriteExpr(n.Statement, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedName || changedStatement || changedComments {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Statement, _ = _Statement.(Expr)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfReferenceDefinition(n *ReferenceDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ReferencedTable, changedReferencedTable := c.copyOnRewriteTableName(n.ReferencedTable, n)
		_ReferencedColumns, changedReferencedColumns := c.copyOnRewriteColumns(n.ReferencedColumns, n)
		_Match, changedMatch := c.copyOnRewriteMatchAction(n.Match, n)
		_OnDelete, changedOnDelete := c.copyOnRewriteReferenceAction(n.OnDelete, n)
		_OnUpdate, changedOnUpdate := c.copyOnRewriteReferenceAction(n.OnUpdate, n)
		if changedReferencedTable || changedReferencedColumns || changedMatch || changedOnDelete || changedOnUpdate {
			res := *n
			res.ReferencedTable, _ = _ReferencedTable.(TableName)
			res.ReferencedColumns, _ = _ReferencedColumns.(Columns)
			res.Match, _ = _Match.(MatchAction)
			res.OnDelete, _ = _OnDelete.(ReferenceAction)
			res.OnUpdate, _ = _OnUpdate.(ReferenceAction)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRegexpInstrExpr(n *RegexpInstrExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Pattern, changedPattern := c.copyOnRewriteExpr(n.Pattern, n)
		_Position, changedPosition := c.copyOnRewriteExpr(n.Position, n)
		_Occurrence, changedOccurrence := c.copyOnRewriteExpr(n.Occurrence, n)
		_ReturnOption, changedReturnOption := c.copyOnRewriteExpr(n.ReturnOption, n)
		_MatchType, changedMatchType := c.copyOnRewriteExpr(n.MatchType, n)
		if changedExpr || changedPattern || changedPosition || changedOccurrence || changedReturnOption || changedMatchType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Pattern, _ = _Pattern.(Expr)
			res.Position, _ = _Position.(Expr)
			res.Occurrence, _ = _Occurrence.(Expr)
			res.ReturnOption, _ = _ReturnOption.(Expr)
			res.MatchType, _ = _MatchType.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRegexpLikeExpr(n *RegexpLikeExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Pattern, changedPattern := c.copyOnRewriteExpr(n.Pattern, n)
		_MatchType, changedMatchType := c.copyOnRewriteExpr(n.MatchType, n)
		if changedExpr || changedPattern || changedMatchType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Pattern, _ = _Pattern.(Expr)
			res.MatchType, _ = _MatchType.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRegexpReplaceExpr(n *RegexpReplaceExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Pattern, changedPattern := c.copyOnRewriteExpr(n.Pattern, n)
		_Repl, changedRepl := c.copyOnRewriteExpr(n.Repl, n)
		_Occurrence, changedOccurrence := c.copyOnRewriteExpr(n.Occurrence, n)
		_Position, changedPosition := c.copyOnRewriteExpr(n.Position, n)
		_MatchType, changedMatchType := c.copyOnRewriteExpr(n.MatchType, n)
		if changedExpr || changedPattern || changedRepl || changedOccurrence || changedPosition || changedMatchType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Pattern, _ = _Pattern.(Expr)
			res.Repl, _ = _Repl.(Expr)
			res.Occurrence, _ = _Occurrence.(Expr)
			res.Position, _ = _Position.(Expr)
			res.MatchType, _ = _MatchType.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRegexpSubstrExpr(n *RegexpSubstrExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_Pattern, changedPattern := c.copyOnRewriteExpr(n.Pattern, n)
		_Occurrence, changedOccurrence := c.copyOnRewriteExpr(n.Occurrence, n)
		_Position, changedPosition := c.copyOnRewriteExpr(n.Position, n)
		_MatchType, changedMatchType := c.copyOnRewriteExpr(n.MatchType, n)
		if changedExpr || changedPattern || changedOccurrence || changedPosition || changedMatchType {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.Pattern, _ = _Pattern.(Expr)
			res.Occurrence, _ = _Occurrence.(Expr)
			res.Position, _ = _Position.(Expr)
			res.MatchType, _ = _MatchType.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRelease(n *Release, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRenameColumn(n *RenameColumn, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_OldName, changedOldName := c.copyOnRewriteRefOfColName(n.OldName, n)
		_NewName, changedNewName := c.copyOnRewriteRefOfColName(n.NewName, n)
		if changedOldName || changedNewName {
			res := *n
			res.OldName, _ = _OldName.(*ColName)
			res.NewName, _ = _NewName.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRenameIndex(n *RenameIndex, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_OldName, changedOldName := c.copyOnRewriteIdentifierCI(n.OldName, n)
		_NewName, changedNewName := c.copyOnRewriteIdentifierCI(n.NewName, n)
		if changedOldName || changedNewName {
			res := *n
			res.OldName, _ = _OldName.(IdentifierCI)
			res.NewName, _ = _NewName.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRenameTable(n *RenameTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRenameTableName(n *RenameTableName, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		if changedTable {
			res := *n
			res.Table, _ = _Table.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRevertMigration(n *RevertMigration, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedComments {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRollback(n *Rollback, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRootNode(n RootNode, parent SQLNode) (out SQLNode, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_SQLNode, changedSQLNode := c.copyOnRewriteSQLNode(n.SQLNode, n)
		if changedSQLNode {
			res := n
			res.SQLNode, _ = _SQLNode.(SQLNode)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSRollback(n *SRollback, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSavepoint(n *Savepoint, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSelect(n *Select, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedFrom bool
		_From := make([]TableExpr, len(n.From))
		for x, el := range n.From {
			this, changed := c.copyOnRewriteTableExpr(el, n)
			_From[x] = this.(TableExpr)
			if changed {
				changedFrom = true
			}
		}
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_SelectExprs, changedSelectExprs := c.copyOnRewriteSelectExprs(n.SelectExprs, n)
		_Where, changedWhere := c.copyOnRewriteRefOfWhere(n.Where, n)
		_With, changedWith := c.copyOnRewriteRefOfWith(n.With, n)
		_GroupBy, changedGroupBy := c.copyOnRewriteGroupBy(n.GroupBy, n)
		_Having, changedHaving := c.copyOnRewriteRefOfWhere(n.Having, n)
		_Windows, changedWindows := c.copyOnRewriteNamedWindows(n.Windows, n)
		_OrderBy, changedOrderBy := c.copyOnRewriteOrderBy(n.OrderBy, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		_Into, changedInto := c.copyOnRewriteRefOfSelectInto(n.Into, n)
		if changedFrom || changedComments || changedSelectExprs || changedWhere || changedWith || changedGroupBy || changedHaving || changedWindows || changedOrderBy || changedLimit || changedInto {
			res := *n
			res.From = _From
			res.Comments, _ = _Comments.(*ParsedComments)
			res.SelectExprs, _ = _SelectExprs.(SelectExprs)
			res.Where, _ = _Where.(*Where)
			res.With, _ = _With.(*With)
			res.GroupBy, _ = _GroupBy.(GroupBy)
			res.Having, _ = _Having.(*Where)
			res.Windows, _ = _Windows.(NamedWindows)
			res.OrderBy, _ = _OrderBy.(OrderBy)
			res.Limit, _ = _Limit.(*Limit)
			res.Into, _ = _Into.(*SelectInto)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteSelectExprs(n SelectExprs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(SelectExprs, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteSelectExpr(el, n)
			res[x] = this.(SelectExpr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSelectInto(n *SelectInto, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSet(n *Set, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_Exprs, changedExprs := c.copyOnRewriteSetExprs(n.Exprs, n)
		if changedComments || changedExprs {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.Exprs, _ = _Exprs.(SetExprs)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSetExpr(n *SetExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Var, changedVar := c.copyOnRewriteRefOfVariable(n.Var, n)
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedVar || changedExpr {
			res := *n
			res.Var, _ = _Var.(*Variable)
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteSetExprs(n SetExprs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(SetExprs, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfSetExpr(el, n)
			res[x] = this.(*SetExpr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShow(n *Show, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Internal, changedInternal := c.copyOnRewriteShowInternal(n.Internal, n)
		if changedInternal {
			res := *n
			res.Internal, _ = _Internal.(ShowInternal)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowBasic(n *ShowBasic, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Tbl, changedTbl := c.copyOnRewriteTableName(n.Tbl, n)
		_DbName, changedDbName := c.copyOnRewriteIdentifierCS(n.DbName, n)
		_Filter, changedFilter := c.copyOnRewriteRefOfShowFilter(n.Filter, n)
		if changedTbl || changedDbName || changedFilter {
			res := *n
			res.Tbl, _ = _Tbl.(TableName)
			res.DbName, _ = _DbName.(IdentifierCS)
			res.Filter, _ = _Filter.(*ShowFilter)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowCreate(n *ShowCreate, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Op, changedOp := c.copyOnRewriteTableName(n.Op, n)
		if changedOp {
			res := *n
			res.Op, _ = _Op.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowFilter(n *ShowFilter, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Filter, changedFilter := c.copyOnRewriteExpr(n.Filter, n)
		if changedFilter {
			res := *n
			res.Filter, _ = _Filter.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowMigrationLogs(n *ShowMigrationLogs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedComments {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowOther(n *ShowOther, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowThrottledApps(n *ShowThrottledApps, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfShowThrottlerStatus(n *ShowThrottlerStatus, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStarExpr(n *StarExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_TableName, changedTableName := c.copyOnRewriteTableName(n.TableName, n)
		if changedTableName {
			res := *n
			res.TableName, _ = _TableName.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStd(n *Std, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStdDev(n *StdDev, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStdPop(n *StdPop, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStdSamp(n *StdSamp, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfStream(n *Stream, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_SelectExpr, changedSelectExpr := c.copyOnRewriteSelectExpr(n.SelectExpr, n)
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		if changedComments || changedSelectExpr || changedTable {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.SelectExpr, _ = _SelectExpr.(SelectExpr)
			res.Table, _ = _Table.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubPartition(n *SubPartition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_ColList, changedColList := c.copyOnRewriteColumns(n.ColList, n)
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedColList || changedExpr {
			res := *n
			res.ColList, _ = _ColList.(Columns)
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubPartitionDefinition(n *SubPartitionDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Options, changedOptions := c.copyOnRewriteRefOfSubPartitionDefinitionOptions(n.Options, n)
		if changedName || changedOptions {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Options, _ = _Options.(*SubPartitionDefinitionOptions)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubPartitionDefinitionOptions(n *SubPartitionDefinitionOptions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comment, changedComment := c.copyOnRewriteRefOfLiteral(n.Comment, n)
		_Engine, changedEngine := c.copyOnRewriteRefOfPartitionEngine(n.Engine, n)
		_DataDirectory, changedDataDirectory := c.copyOnRewriteRefOfLiteral(n.DataDirectory, n)
		_IndexDirectory, changedIndexDirectory := c.copyOnRewriteRefOfLiteral(n.IndexDirectory, n)
		if changedComment || changedEngine || changedDataDirectory || changedIndexDirectory {
			res := *n
			res.Comment, _ = _Comment.(*Literal)
			res.Engine, _ = _Engine.(*PartitionEngine)
			res.DataDirectory, _ = _DataDirectory.(*Literal)
			res.IndexDirectory, _ = _IndexDirectory.(*Literal)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteSubPartitionDefinitions(n SubPartitionDefinitions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(SubPartitionDefinitions, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfSubPartitionDefinition(el, n)
			res[x] = this.(*SubPartitionDefinition)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubquery(n *Subquery, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Select, changedSelect := c.copyOnRewriteSelectStatement(n.Select, n)
		if changedSelect {
			res := *n
			res.Select, _ = _Select.(SelectStatement)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSubstrExpr(n *SubstrExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteExpr(n.Name, n)
		_From, changedFrom := c.copyOnRewriteExpr(n.From, n)
		_To, changedTo := c.copyOnRewriteExpr(n.To, n)
		if changedName || changedFrom || changedTo {
			res := *n
			res.Name, _ = _Name.(Expr)
			res.From, _ = _From.(Expr)
			res.To, _ = _To.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfSum(n *Sum, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteTableExprs(n TableExprs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(TableExprs, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteTableExpr(el, n)
			res[x] = this.(TableExpr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteTableName(n TableName, parent SQLNode) (out SQLNode, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCS(n.Name, n)
		_Qualifier, changedQualifier := c.copyOnRewriteIdentifierCS(n.Qualifier, n)
		if changedName || changedQualifier {
			res := n
			res.Name, _ = _Name.(IdentifierCS)
			res.Qualifier, _ = _Qualifier.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteTableNames(n TableNames, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(TableNames, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteTableName(el, n)
			res[x] = this.(TableName)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteTableOptions(n TableOptions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTableSpec(n *TableSpec, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedColumns bool
		_Columns := make([]*ColumnDefinition, len(n.Columns))
		for x, el := range n.Columns {
			this, changed := c.copyOnRewriteRefOfColumnDefinition(el, n)
			_Columns[x] = this.(*ColumnDefinition)
			if changed {
				changedColumns = true
			}
		}
		var changedIndexes bool
		_Indexes := make([]*IndexDefinition, len(n.Indexes))
		for x, el := range n.Indexes {
			this, changed := c.copyOnRewriteRefOfIndexDefinition(el, n)
			_Indexes[x] = this.(*IndexDefinition)
			if changed {
				changedIndexes = true
			}
		}
		var changedConstraints bool
		_Constraints := make([]*ConstraintDefinition, len(n.Constraints))
		for x, el := range n.Constraints {
			this, changed := c.copyOnRewriteRefOfConstraintDefinition(el, n)
			_Constraints[x] = this.(*ConstraintDefinition)
			if changed {
				changedConstraints = true
			}
		}
		_Options, changedOptions := c.copyOnRewriteTableOptions(n.Options, n)
		_PartitionOption, changedPartitionOption := c.copyOnRewriteRefOfPartitionOption(n.PartitionOption, n)
		if changedColumns || changedIndexes || changedConstraints || changedOptions || changedPartitionOption {
			res := *n
			res.Columns = _Columns
			res.Indexes = _Indexes
			res.Constraints = _Constraints
			res.Options, _ = _Options.(TableOptions)
			res.PartitionOption, _ = _PartitionOption.(*PartitionOption)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTablespaceOperation(n *TablespaceOperation, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTimestampFuncExpr(n *TimestampFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr1, changedExpr1 := c.copyOnRewriteExpr(n.Expr1, n)
		_Expr2, changedExpr2 := c.copyOnRewriteExpr(n.Expr2, n)
		if changedExpr1 || changedExpr2 {
			res := *n
			res.Expr1, _ = _Expr1.(Expr)
			res.Expr2, _ = _Expr2.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTrimFuncExpr(n *TrimFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_TrimArg, changedTrimArg := c.copyOnRewriteExpr(n.TrimArg, n)
		_StringArg, changedStringArg := c.copyOnRewriteExpr(n.StringArg, n)
		if changedTrimArg || changedStringArg {
			res := *n
			res.TrimArg, _ = _TrimArg.(Expr)
			res.StringArg, _ = _StringArg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTruncateTable(n *TruncateTable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		if changedTable {
			res := *n
			res.Table, _ = _Table.(TableName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUnaryExpr(n *UnaryExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUnion(n *Union, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteSelectStatement(n.Left, n)
		_Right, changedRight := c.copyOnRewriteSelectStatement(n.Right, n)
		_OrderBy, changedOrderBy := c.copyOnRewriteOrderBy(n.OrderBy, n)
		_With, changedWith := c.copyOnRewriteRefOfWith(n.With, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		_Into, changedInto := c.copyOnRewriteRefOfSelectInto(n.Into, n)
		if changedLeft || changedRight || changedOrderBy || changedWith || changedLimit || changedInto {
			res := *n
			res.Left, _ = _Left.(SelectStatement)
			res.Right, _ = _Right.(SelectStatement)
			res.OrderBy, _ = _OrderBy.(OrderBy)
			res.With, _ = _With.(*With)
			res.Limit, _ = _Limit.(*Limit)
			res.Into, _ = _Into.(*SelectInto)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUnlockTables(n *UnlockTables, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUpdate(n *Update, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_With, changedWith := c.copyOnRewriteRefOfWith(n.With, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_TableExprs, changedTableExprs := c.copyOnRewriteTableExprs(n.TableExprs, n)
		_Exprs, changedExprs := c.copyOnRewriteUpdateExprs(n.Exprs, n)
		_Where, changedWhere := c.copyOnRewriteRefOfWhere(n.Where, n)
		_OrderBy, changedOrderBy := c.copyOnRewriteOrderBy(n.OrderBy, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		if changedWith || changedComments || changedTableExprs || changedExprs || changedWhere || changedOrderBy || changedLimit {
			res := *n
			res.With, _ = _With.(*With)
			res.Comments, _ = _Comments.(*ParsedComments)
			res.TableExprs, _ = _TableExprs.(TableExprs)
			res.Exprs, _ = _Exprs.(UpdateExprs)
			res.Where, _ = _Where.(*Where)
			res.OrderBy, _ = _OrderBy.(OrderBy)
			res.Limit, _ = _Limit.(*Limit)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUpdateExpr(n *UpdateExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteRefOfColName(n.Name, n)
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedName || changedExpr {
			res := *n
			res.Name, _ = _Name.(*ColName)
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteUpdateExprs(n UpdateExprs, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(UpdateExprs, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfUpdateExpr(el, n)
			res[x] = this.(*UpdateExpr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUpdateXMLExpr(n *UpdateXMLExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Target, changedTarget := c.copyOnRewriteExpr(n.Target, n)
		_XPathExpr, changedXPathExpr := c.copyOnRewriteExpr(n.XPathExpr, n)
		_NewXML, changedNewXML := c.copyOnRewriteExpr(n.NewXML, n)
		if changedTarget || changedXPathExpr || changedNewXML {
			res := *n
			res.Target, _ = _Target.(Expr)
			res.XPathExpr, _ = _XPathExpr.(Expr)
			res.NewXML, _ = _NewXML.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfUse(n *Use, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_DBName, changedDBName := c.copyOnRewriteIdentifierCS(n.DBName, n)
		if changedDBName {
			res := *n
			res.DBName, _ = _DBName.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVExplainStmt(n *VExplainStmt, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Statement, changedStatement := c.copyOnRewriteStatement(n.Statement, n)
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		if changedStatement || changedComments {
			res := *n
			res.Statement, _ = _Statement.(Statement)
			res.Comments, _ = _Comments.(*ParsedComments)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVStream(n *VStream, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Comments, changedComments := c.copyOnRewriteRefOfParsedComments(n.Comments, n)
		_SelectExpr, changedSelectExpr := c.copyOnRewriteSelectExpr(n.SelectExpr, n)
		_Table, changedTable := c.copyOnRewriteTableName(n.Table, n)
		_Where, changedWhere := c.copyOnRewriteRefOfWhere(n.Where, n)
		_Limit, changedLimit := c.copyOnRewriteRefOfLimit(n.Limit, n)
		if changedComments || changedSelectExpr || changedTable || changedWhere || changedLimit {
			res := *n
			res.Comments, _ = _Comments.(*ParsedComments)
			res.SelectExpr, _ = _SelectExpr.(SelectExpr)
			res.Table, _ = _Table.(TableName)
			res.Where, _ = _Where.(*Where)
			res.Limit, _ = _Limit.(*Limit)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteValTuple(n ValTuple, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(ValTuple, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteExpr(el, n)
			res[x] = this.(Expr)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfValidation(n *Validation, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteValues(n Values, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(Values, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteValTuple(el, n)
			res[x] = this.(ValTuple)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfValuesFuncExpr(n *ValuesFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteRefOfColName(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(*ColName)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVarPop(n *VarPop, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVarSamp(n *VarSamp, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVariable(n *Variable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		if changedName {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVariance(n *Variance, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Arg, changedArg := c.copyOnRewriteExpr(n.Arg, n)
		if changedArg {
			res := *n
			res.Arg, _ = _Arg.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteVindexParam(n VindexParam, parent SQLNode) (out SQLNode, changed bool) {
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Key, changedKey := c.copyOnRewriteIdentifierCI(n.Key, n)
		if changedKey {
			res := n
			res.Key, _ = _Key.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVindexSpec(n *VindexSpec, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_Type, changedType := c.copyOnRewriteIdentifierCI(n.Type, n)
		var changedParams bool
		_Params := make([]VindexParam, len(n.Params))
		for x, el := range n.Params {
			this, changed := c.copyOnRewriteVindexParam(el, n)
			_Params[x] = this.(VindexParam)
			if changed {
				changedParams = true
			}
		}
		if changedName || changedType || changedParams {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.Type, _ = _Type.(IdentifierCI)
			res.Params = _Params
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWeightStringFuncExpr(n *WeightStringFuncExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		_As, changedAs := c.copyOnRewriteRefOfConvertType(n.As, n)
		if changedExpr || changedAs {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			res.As, _ = _As.(*ConvertType)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWhen(n *When, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Cond, changedCond := c.copyOnRewriteExpr(n.Cond, n)
		_Val, changedVal := c.copyOnRewriteExpr(n.Val, n)
		if changedCond || changedVal {
			res := *n
			res.Cond, _ = _Cond.(Expr)
			res.Val, _ = _Val.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWhere(n *Where, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Expr, changedExpr := c.copyOnRewriteExpr(n.Expr, n)
		if changedExpr {
			res := *n
			res.Expr, _ = _Expr.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWindowDefinition(n *WindowDefinition, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_WindowSpec, changedWindowSpec := c.copyOnRewriteRefOfWindowSpecification(n.WindowSpec, n)
		if changedName || changedWindowSpec {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.WindowSpec, _ = _WindowSpec.(*WindowSpecification)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteWindowDefinitions(n WindowDefinitions, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		res := make(WindowDefinitions, len(n))
		for x, el := range n {
			this, change := c.copyOnRewriteRefOfWindowDefinition(el, n)
			res[x] = this.(*WindowDefinition)
			if change {
				changed = true
			}
		}
		if changed {
			out = res
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWindowSpecification(n *WindowSpecification, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCI(n.Name, n)
		_PartitionClause, changedPartitionClause := c.copyOnRewriteExprs(n.PartitionClause, n)
		_OrderClause, changedOrderClause := c.copyOnRewriteOrderBy(n.OrderClause, n)
		_FrameClause, changedFrameClause := c.copyOnRewriteRefOfFrameClause(n.FrameClause, n)
		if changedName || changedPartitionClause || changedOrderClause || changedFrameClause {
			res := *n
			res.Name, _ = _Name.(IdentifierCI)
			res.PartitionClause, _ = _PartitionClause.(Exprs)
			res.OrderClause, _ = _OrderClause.(OrderBy)
			res.FrameClause, _ = _FrameClause.(*FrameClause)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfWith(n *With, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		var changedctes bool
		_ctes := make([]*CommonTableExpr, len(n.ctes))
		for x, el := range n.ctes {
			this, changed := c.copyOnRewriteRefOfCommonTableExpr(el, n)
			_ctes[x] = this.(*CommonTableExpr)
			if changed {
				changedctes = true
			}
		}
		if changedctes {
			res := *n
			res.ctes = _ctes
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfXorExpr(n *XorExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Left, changedLeft := c.copyOnRewriteExpr(n.Left, n)
		_Right, changedRight := c.copyOnRewriteExpr(n.Right, n)
		if changedLeft || changedRight {
			res := *n
			res.Left, _ = _Left.(Expr)
			res.Right, _ = _Right.(Expr)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteAggrFunc(n AggrFunc, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *Avg:
		return c.copyOnRewriteRefOfAvg(n, parent)
	case *BitAnd:
		return c.copyOnRewriteRefOfBitAnd(n, parent)
	case *BitOr:
		return c.copyOnRewriteRefOfBitOr(n, parent)
	case *BitXor:
		return c.copyOnRewriteRefOfBitXor(n, parent)
	case *Count:
		return c.copyOnRewriteRefOfCount(n, parent)
	case *CountStar:
		return c.copyOnRewriteRefOfCountStar(n, parent)
	case *GroupConcatExpr:
		return c.copyOnRewriteRefOfGroupConcatExpr(n, parent)
	case *Max:
		return c.copyOnRewriteRefOfMax(n, parent)
	case *Min:
		return c.copyOnRewriteRefOfMin(n, parent)
	case *Std:
		return c.copyOnRewriteRefOfStd(n, parent)
	case *StdDev:
		return c.copyOnRewriteRefOfStdDev(n, parent)
	case *StdPop:
		return c.copyOnRewriteRefOfStdPop(n, parent)
	case *StdSamp:
		return c.copyOnRewriteRefOfStdSamp(n, parent)
	case *Sum:
		return c.copyOnRewriteRefOfSum(n, parent)
	case *VarPop:
		return c.copyOnRewriteRefOfVarPop(n, parent)
	case *VarSamp:
		return c.copyOnRewriteRefOfVarSamp(n, parent)
	case *Variance:
		return c.copyOnRewriteRefOfVariance(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteAlterOption(n AlterOption, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AddColumns:
		return c.copyOnRewriteRefOfAddColumns(n, parent)
	case *AddConstraintDefinition:
		return c.copyOnRewriteRefOfAddConstraintDefinition(n, parent)
	case *AddIndexDefinition:
		return c.copyOnRewriteRefOfAddIndexDefinition(n, parent)
	case AlgorithmValue:
		return c.copyOnRewriteAlgorithmValue(n, parent)
	case *AlterCharset:
		return c.copyOnRewriteRefOfAlterCharset(n, parent)
	case *AlterCheck:
		return c.copyOnRewriteRefOfAlterCheck(n, parent)
	case *AlterColumn:
		return c.copyOnRewriteRefOfAlterColumn(n, parent)
	case *AlterIndex:
		return c.copyOnRewriteRefOfAlterIndex(n, parent)
	case *ChangeColumn:
		return c.copyOnRewriteRefOfChangeColumn(n, parent)
	case *DropColumn:
		return c.copyOnRewriteRefOfDropColumn(n, parent)
	case *DropKey:
		return c.copyOnRewriteRefOfDropKey(n, parent)
	case *Force:
		return c.copyOnRewriteRefOfForce(n, parent)
	case *KeyState:
		return c.copyOnRewriteRefOfKeyState(n, parent)
	case *LockOption:
		return c.copyOnRewriteRefOfLockOption(n, parent)
	case *ModifyColumn:
		return c.copyOnRewriteRefOfModifyColumn(n, parent)
	case *OrderByOption:
		return c.copyOnRewriteRefOfOrderByOption(n, parent)
	case *RenameColumn:
		return c.copyOnRewriteRefOfRenameColumn(n, parent)
	case *RenameIndex:
		return c.copyOnRewriteRefOfRenameIndex(n, parent)
	case *RenameTableName:
		return c.copyOnRewriteRefOfRenameTableName(n, parent)
	case TableOptions:
		return c.copyOnRewriteTableOptions(n, parent)
	case *TablespaceOperation:
		return c.copyOnRewriteRefOfTablespaceOperation(n, parent)
	case *Validation:
		return c.copyOnRewriteRefOfValidation(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteCallable(n Callable, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *ArgumentLessWindowExpr:
		return c.copyOnRewriteRefOfArgumentLessWindowExpr(n, parent)
	case *Avg:
		return c.copyOnRewriteRefOfAvg(n, parent)
	case *CharExpr:
		return c.copyOnRewriteRefOfCharExpr(n, parent)
	case *ConvertExpr:
		return c.copyOnRewriteRefOfConvertExpr(n, parent)
	case *ConvertUsingExpr:
		return c.copyOnRewriteRefOfConvertUsingExpr(n, parent)
	case *Count:
		return c.copyOnRewriteRefOfCount(n, parent)
	case *CountStar:
		return c.copyOnRewriteRefOfCountStar(n, parent)
	case *CurTimeFuncExpr:
		return c.copyOnRewriteRefOfCurTimeFuncExpr(n, parent)
	case *ExtractFuncExpr:
		return c.copyOnRewriteRefOfExtractFuncExpr(n, parent)
	case *ExtractValueExpr:
		return c.copyOnRewriteRefOfExtractValueExpr(n, parent)
	case *FirstOrLastValueExpr:
		return c.copyOnRewriteRefOfFirstOrLastValueExpr(n, parent)
	case *FuncExpr:
		return c.copyOnRewriteRefOfFuncExpr(n, parent)
	case *GTIDFuncExpr:
		return c.copyOnRewriteRefOfGTIDFuncExpr(n, parent)
	case *GroupConcatExpr:
		return c.copyOnRewriteRefOfGroupConcatExpr(n, parent)
	case *InsertExpr:
		return c.copyOnRewriteRefOfInsertExpr(n, parent)
	case *IntervalFuncExpr:
		return c.copyOnRewriteRefOfIntervalFuncExpr(n, parent)
	case *JSONArrayExpr:
		return c.copyOnRewriteRefOfJSONArrayExpr(n, parent)
	case *JSONAttributesExpr:
		return c.copyOnRewriteRefOfJSONAttributesExpr(n, parent)
	case *JSONContainsExpr:
		return c.copyOnRewriteRefOfJSONContainsExpr(n, parent)
	case *JSONContainsPathExpr:
		return c.copyOnRewriteRefOfJSONContainsPathExpr(n, parent)
	case *JSONExtractExpr:
		return c.copyOnRewriteRefOfJSONExtractExpr(n, parent)
	case *JSONKeysExpr:
		return c.copyOnRewriteRefOfJSONKeysExpr(n, parent)
	case *JSONObjectExpr:
		return c.copyOnRewriteRefOfJSONObjectExpr(n, parent)
	case *JSONOverlapsExpr:
		return c.copyOnRewriteRefOfJSONOverlapsExpr(n, parent)
	case *JSONPrettyExpr:
		return c.copyOnRewriteRefOfJSONPrettyExpr(n, parent)
	case *JSONQuoteExpr:
		return c.copyOnRewriteRefOfJSONQuoteExpr(n, parent)
	case *JSONRemoveExpr:
		return c.copyOnRewriteRefOfJSONRemoveExpr(n, parent)
	case *JSONSchemaValidFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidFuncExpr(n, parent)
	case *JSONSchemaValidationReportFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidationReportFuncExpr(n, parent)
	case *JSONSearchExpr:
		return c.copyOnRewriteRefOfJSONSearchExpr(n, parent)
	case *JSONStorageFreeExpr:
		return c.copyOnRewriteRefOfJSONStorageFreeExpr(n, parent)
	case *JSONStorageSizeExpr:
		return c.copyOnRewriteRefOfJSONStorageSizeExpr(n, parent)
	case *JSONUnquoteExpr:
		return c.copyOnRewriteRefOfJSONUnquoteExpr(n, parent)
	case *JSONValueExpr:
		return c.copyOnRewriteRefOfJSONValueExpr(n, parent)
	case *JSONValueMergeExpr:
		return c.copyOnRewriteRefOfJSONValueMergeExpr(n, parent)
	case *JSONValueModifierExpr:
		return c.copyOnRewriteRefOfJSONValueModifierExpr(n, parent)
	case *LagLeadExpr:
		return c.copyOnRewriteRefOfLagLeadExpr(n, parent)
	case *LocateExpr:
		return c.copyOnRewriteRefOfLocateExpr(n, parent)
	case *MatchExpr:
		return c.copyOnRewriteRefOfMatchExpr(n, parent)
	case *Max:
		return c.copyOnRewriteRefOfMax(n, parent)
	case *MemberOfExpr:
		return c.copyOnRewriteRefOfMemberOfExpr(n, parent)
	case *Min:
		return c.copyOnRewriteRefOfMin(n, parent)
	case *NTHValueExpr:
		return c.copyOnRewriteRefOfNTHValueExpr(n, parent)
	case *NamedWindow:
		return c.copyOnRewriteRefOfNamedWindow(n, parent)
	case *NtileExpr:
		return c.copyOnRewriteRefOfNtileExpr(n, parent)
	case *PerformanceSchemaFuncExpr:
		return c.copyOnRewriteRefOfPerformanceSchemaFuncExpr(n, parent)
	case *RegexpInstrExpr:
		return c.copyOnRewriteRefOfRegexpInstrExpr(n, parent)
	case *RegexpLikeExpr:
		return c.copyOnRewriteRefOfRegexpLikeExpr(n, parent)
	case *RegexpReplaceExpr:
		return c.copyOnRewriteRefOfRegexpReplaceExpr(n, parent)
	case *RegexpSubstrExpr:
		return c.copyOnRewriteRefOfRegexpSubstrExpr(n, parent)
	case *SubstrExpr:
		return c.copyOnRewriteRefOfSubstrExpr(n, parent)
	case *Sum:
		return c.copyOnRewriteRefOfSum(n, parent)
	case *TimestampFuncExpr:
		return c.copyOnRewriteRefOfTimestampFuncExpr(n, parent)
	case *TrimFuncExpr:
		return c.copyOnRewriteRefOfTrimFuncExpr(n, parent)
	case *UpdateXMLExpr:
		return c.copyOnRewriteRefOfUpdateXMLExpr(n, parent)
	case *ValuesFuncExpr:
		return c.copyOnRewriteRefOfValuesFuncExpr(n, parent)
	case *WeightStringFuncExpr:
		return c.copyOnRewriteRefOfWeightStringFuncExpr(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteColTuple(n ColTuple, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case ListArg:
		return c.copyOnRewriteListArg(n, parent)
	case *Subquery:
		return c.copyOnRewriteRefOfSubquery(n, parent)
	case ValTuple:
		return c.copyOnRewriteValTuple(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteConstraintInfo(n ConstraintInfo, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *CheckConstraintDefinition:
		return c.copyOnRewriteRefOfCheckConstraintDefinition(n, parent)
	case *ForeignKeyDefinition:
		return c.copyOnRewriteRefOfForeignKeyDefinition(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteDBDDLStatement(n DBDDLStatement, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AlterDatabase:
		return c.copyOnRewriteRefOfAlterDatabase(n, parent)
	case *CreateDatabase:
		return c.copyOnRewriteRefOfCreateDatabase(n, parent)
	case *DropDatabase:
		return c.copyOnRewriteRefOfDropDatabase(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteDDLStatement(n DDLStatement, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AlterTable:
		return c.copyOnRewriteRefOfAlterTable(n, parent)
	case *AlterView:
		return c.copyOnRewriteRefOfAlterView(n, parent)
	case *CreateTable:
		return c.copyOnRewriteRefOfCreateTable(n, parent)
	case *CreateView:
		return c.copyOnRewriteRefOfCreateView(n, parent)
	case *DropTable:
		return c.copyOnRewriteRefOfDropTable(n, parent)
	case *DropView:
		return c.copyOnRewriteRefOfDropView(n, parent)
	case *RenameTable:
		return c.copyOnRewriteRefOfRenameTable(n, parent)
	case *TruncateTable:
		return c.copyOnRewriteRefOfTruncateTable(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteExplain(n Explain, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *ExplainStmt:
		return c.copyOnRewriteRefOfExplainStmt(n, parent)
	case *ExplainTab:
		return c.copyOnRewriteRefOfExplainTab(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteExpr(n Expr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AndExpr:
		return c.copyOnRewriteRefOfAndExpr(n, parent)
	case Argument:
		return c.copyOnRewriteArgument(n, parent)
	case *ArgumentLessWindowExpr:
		return c.copyOnRewriteRefOfArgumentLessWindowExpr(n, parent)
	case *Avg:
		return c.copyOnRewriteRefOfAvg(n, parent)
	case *BetweenExpr:
		return c.copyOnRewriteRefOfBetweenExpr(n, parent)
	case *BinaryExpr:
		return c.copyOnRewriteRefOfBinaryExpr(n, parent)
	case *BitAnd:
		return c.copyOnRewriteRefOfBitAnd(n, parent)
	case *BitOr:
		return c.copyOnRewriteRefOfBitOr(n, parent)
	case *BitXor:
		return c.copyOnRewriteRefOfBitXor(n, parent)
	case BoolVal:
		return c.copyOnRewriteBoolVal(n, parent)
	case *CaseExpr:
		return c.copyOnRewriteRefOfCaseExpr(n, parent)
	case *CastExpr:
		return c.copyOnRewriteRefOfCastExpr(n, parent)
	case *CharExpr:
		return c.copyOnRewriteRefOfCharExpr(n, parent)
	case *ColName:
		return c.copyOnRewriteRefOfColName(n, parent)
	case *CollateExpr:
		return c.copyOnRewriteRefOfCollateExpr(n, parent)
	case *ComparisonExpr:
		return c.copyOnRewriteRefOfComparisonExpr(n, parent)
	case *ConvertExpr:
		return c.copyOnRewriteRefOfConvertExpr(n, parent)
	case *ConvertUsingExpr:
		return c.copyOnRewriteRefOfConvertUsingExpr(n, parent)
	case *Count:
		return c.copyOnRewriteRefOfCount(n, parent)
	case *CountStar:
		return c.copyOnRewriteRefOfCountStar(n, parent)
	case *CurTimeFuncExpr:
		return c.copyOnRewriteRefOfCurTimeFuncExpr(n, parent)
	case *Default:
		return c.copyOnRewriteRefOfDefault(n, parent)
	case *ExistsExpr:
		return c.copyOnRewriteRefOfExistsExpr(n, parent)
	case *ExtractFuncExpr:
		return c.copyOnRewriteRefOfExtractFuncExpr(n, parent)
	case *ExtractValueExpr:
		return c.copyOnRewriteRefOfExtractValueExpr(n, parent)
	case *ExtractedSubquery:
		return c.copyOnRewriteRefOfExtractedSubquery(n, parent)
	case *FirstOrLastValueExpr:
		return c.copyOnRewriteRefOfFirstOrLastValueExpr(n, parent)
	case *FuncExpr:
		return c.copyOnRewriteRefOfFuncExpr(n, parent)
	case *GTIDFuncExpr:
		return c.copyOnRewriteRefOfGTIDFuncExpr(n, parent)
	case *GroupConcatExpr:
		return c.copyOnRewriteRefOfGroupConcatExpr(n, parent)
	case *InsertExpr:
		return c.copyOnRewriteRefOfInsertExpr(n, parent)
	case *IntervalExpr:
		return c.copyOnRewriteRefOfIntervalExpr(n, parent)
	case *IntervalFuncExpr:
		return c.copyOnRewriteRefOfIntervalFuncExpr(n, parent)
	case *IntroducerExpr:
		return c.copyOnRewriteRefOfIntroducerExpr(n, parent)
	case *IsExpr:
		return c.copyOnRewriteRefOfIsExpr(n, parent)
	case *JSONArrayExpr:
		return c.copyOnRewriteRefOfJSONArrayExpr(n, parent)
	case *JSONAttributesExpr:
		return c.copyOnRewriteRefOfJSONAttributesExpr(n, parent)
	case *JSONContainsExpr:
		return c.copyOnRewriteRefOfJSONContainsExpr(n, parent)
	case *JSONContainsPathExpr:
		return c.copyOnRewriteRefOfJSONContainsPathExpr(n, parent)
	case *JSONExtractExpr:
		return c.copyOnRewriteRefOfJSONExtractExpr(n, parent)
	case *JSONKeysExpr:
		return c.copyOnRewriteRefOfJSONKeysExpr(n, parent)
	case *JSONObjectExpr:
		return c.copyOnRewriteRefOfJSONObjectExpr(n, parent)
	case *JSONOverlapsExpr:
		return c.copyOnRewriteRefOfJSONOverlapsExpr(n, parent)
	case *JSONPrettyExpr:
		return c.copyOnRewriteRefOfJSONPrettyExpr(n, parent)
	case *JSONQuoteExpr:
		return c.copyOnRewriteRefOfJSONQuoteExpr(n, parent)
	case *JSONRemoveExpr:
		return c.copyOnRewriteRefOfJSONRemoveExpr(n, parent)
	case *JSONSchemaValidFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidFuncExpr(n, parent)
	case *JSONSchemaValidationReportFuncExpr:
		return c.copyOnRewriteRefOfJSONSchemaValidationReportFuncExpr(n, parent)
	case *JSONSearchExpr:
		return c.copyOnRewriteRefOfJSONSearchExpr(n, parent)
	case *JSONStorageFreeExpr:
		return c.copyOnRewriteRefOfJSONStorageFreeExpr(n, parent)
	case *JSONStorageSizeExpr:
		return c.copyOnRewriteRefOfJSONStorageSizeExpr(n, parent)
	case *JSONUnquoteExpr:
		return c.copyOnRewriteRefOfJSONUnquoteExpr(n, parent)
	case *JSONValueExpr:
		return c.copyOnRewriteRefOfJSONValueExpr(n, parent)
	case *JSONValueMergeExpr:
		return c.copyOnRewriteRefOfJSONValueMergeExpr(n, parent)
	case *JSONValueModifierExpr:
		return c.copyOnRewriteRefOfJSONValueModifierExpr(n, parent)
	case *LagLeadExpr:
		return c.copyOnRewriteRefOfLagLeadExpr(n, parent)
	case ListArg:
		return c.copyOnRewriteListArg(n, parent)
	case *Literal:
		return c.copyOnRewriteRefOfLiteral(n, parent)
	case *LocateExpr:
		return c.copyOnRewriteRefOfLocateExpr(n, parent)
	case *LockingFunc:
		return c.copyOnRewriteRefOfLockingFunc(n, parent)
	case *MatchExpr:
		return c.copyOnRewriteRefOfMatchExpr(n, parent)
	case *Max:
		return c.copyOnRewriteRefOfMax(n, parent)
	case *MemberOfExpr:
		return c.copyOnRewriteRefOfMemberOfExpr(n, parent)
	case *Min:
		return c.copyOnRewriteRefOfMin(n, parent)
	case *NTHValueExpr:
		return c.copyOnRewriteRefOfNTHValueExpr(n, parent)
	case *NamedWindow:
		return c.copyOnRewriteRefOfNamedWindow(n, parent)
	case *NotExpr:
		return c.copyOnRewriteRefOfNotExpr(n, parent)
	case *NtileExpr:
		return c.copyOnRewriteRefOfNtileExpr(n, parent)
	case *NullVal:
		return c.copyOnRewriteRefOfNullVal(n, parent)
	case *Offset:
		return c.copyOnRewriteRefOfOffset(n, parent)
	case *OrExpr:
		return c.copyOnRewriteRefOfOrExpr(n, parent)
	case *PerformanceSchemaFuncExpr:
		return c.copyOnRewriteRefOfPerformanceSchemaFuncExpr(n, parent)
	case *RegexpInstrExpr:
		return c.copyOnRewriteRefOfRegexpInstrExpr(n, parent)
	case *RegexpLikeExpr:
		return c.copyOnRewriteRefOfRegexpLikeExpr(n, parent)
	case *RegexpReplaceExpr:
		return c.copyOnRewriteRefOfRegexpReplaceExpr(n, parent)
	case *RegexpSubstrExpr:
		return c.copyOnRewriteRefOfRegexpSubstrExpr(n, parent)
	case *Std:
		return c.copyOnRewriteRefOfStd(n, parent)
	case *StdDev:
		return c.copyOnRewriteRefOfStdDev(n, parent)
	case *StdPop:
		return c.copyOnRewriteRefOfStdPop(n, parent)
	case *StdSamp:
		return c.copyOnRewriteRefOfStdSamp(n, parent)
	case *Subquery:
		return c.copyOnRewriteRefOfSubquery(n, parent)
	case *SubstrExpr:
		return c.copyOnRewriteRefOfSubstrExpr(n, parent)
	case *Sum:
		return c.copyOnRewriteRefOfSum(n, parent)
	case *TimestampFuncExpr:
		return c.copyOnRewriteRefOfTimestampFuncExpr(n, parent)
	case *TrimFuncExpr:
		return c.copyOnRewriteRefOfTrimFuncExpr(n, parent)
	case *UnaryExpr:
		return c.copyOnRewriteRefOfUnaryExpr(n, parent)
	case *UpdateXMLExpr:
		return c.copyOnRewriteRefOfUpdateXMLExpr(n, parent)
	case ValTuple:
		return c.copyOnRewriteValTuple(n, parent)
	case *ValuesFuncExpr:
		return c.copyOnRewriteRefOfValuesFuncExpr(n, parent)
	case *VarPop:
		return c.copyOnRewriteRefOfVarPop(n, parent)
	case *VarSamp:
		return c.copyOnRewriteRefOfVarSamp(n, parent)
	case *Variable:
		return c.copyOnRewriteRefOfVariable(n, parent)
	case *Variance:
		return c.copyOnRewriteRefOfVariance(n, parent)
	case *WeightStringFuncExpr:
		return c.copyOnRewriteRefOfWeightStringFuncExpr(n, parent)
	case *XorExpr:
		return c.copyOnRewriteRefOfXorExpr(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteInsertRows(n InsertRows, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *Select:
		return c.copyOnRewriteRefOfSelect(n, parent)
	case *Union:
		return c.copyOnRewriteRefOfUnion(n, parent)
	case Values:
		return c.copyOnRewriteValues(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteSelectExpr(n SelectExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AliasedExpr:
		return c.copyOnRewriteRefOfAliasedExpr(n, parent)
	case *Nextval:
		return c.copyOnRewriteRefOfNextval(n, parent)
	case *StarExpr:
		return c.copyOnRewriteRefOfStarExpr(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteSelectStatement(n SelectStatement, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *Select:
		return c.copyOnRewriteRefOfSelect(n, parent)
	case *Union:
		return c.copyOnRewriteRefOfUnion(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteShowInternal(n ShowInternal, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *ShowBasic:
		return c.copyOnRewriteRefOfShowBasic(n, parent)
	case *ShowCreate:
		return c.copyOnRewriteRefOfShowCreate(n, parent)
	case *ShowOther:
		return c.copyOnRewriteRefOfShowOther(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteSimpleTableExpr(n SimpleTableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *DerivedTable:
		return c.copyOnRewriteRefOfDerivedTable(n, parent)
	case TableName:
		return c.copyOnRewriteTableName(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteStatement(n Statement, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AlterDatabase:
		return c.copyOnRewriteRefOfAlterDatabase(n, parent)
	case *AlterMigration:
		return c.copyOnRewriteRefOfAlterMigration(n, parent)
	case *AlterTable:
		return c.copyOnRewriteRefOfAlterTable(n, parent)
	case *AlterView:
		return c.copyOnRewriteRefOfAlterView(n, parent)
	case *AlterVschema:
		return c.copyOnRewriteRefOfAlterVschema(n, parent)
	case *Begin:
		return c.copyOnRewriteRefOfBegin(n, parent)
	case *CallProc:
		return c.copyOnRewriteRefOfCallProc(n, parent)
	case *CommentOnly:
		return c.copyOnRewriteRefOfCommentOnly(n, parent)
	case *Commit:
		return c.copyOnRewriteRefOfCommit(n, parent)
	case *CreateDatabase:
		return c.copyOnRewriteRefOfCreateDatabase(n, parent)
	case *CreateTable:
		return c.copyOnRewriteRefOfCreateTable(n, parent)
	case *CreateView:
		return c.copyOnRewriteRefOfCreateView(n, parent)
	case *DeallocateStmt:
		return c.copyOnRewriteRefOfDeallocateStmt(n, parent)
	case *Delete:
		return c.copyOnRewriteRefOfDelete(n, parent)
	case *DropDatabase:
		return c.copyOnRewriteRefOfDropDatabase(n, parent)
	case *DropTable:
		return c.copyOnRewriteRefOfDropTable(n, parent)
	case *DropView:
		return c.copyOnRewriteRefOfDropView(n, parent)
	case *ExecuteStmt:
		return c.copyOnRewriteRefOfExecuteStmt(n, parent)
	case *ExplainStmt:
		return c.copyOnRewriteRefOfExplainStmt(n, parent)
	case *ExplainTab:
		return c.copyOnRewriteRefOfExplainTab(n, parent)
	case *Flush:
		return c.copyOnRewriteRefOfFlush(n, parent)
	case *Insert:
		return c.copyOnRewriteRefOfInsert(n, parent)
	case *Load:
		return c.copyOnRewriteRefOfLoad(n, parent)
	case *LockTables:
		return c.copyOnRewriteRefOfLockTables(n, parent)
	case *OtherAdmin:
		return c.copyOnRewriteRefOfOtherAdmin(n, parent)
	case *OtherRead:
		return c.copyOnRewriteRefOfOtherRead(n, parent)
	case *PrepareStmt:
		return c.copyOnRewriteRefOfPrepareStmt(n, parent)
	case *Release:
		return c.copyOnRewriteRefOfRelease(n, parent)
	case *RenameTable:
		return c.copyOnRewriteRefOfRenameTable(n, parent)
	case *RevertMigration:
		return c.copyOnRewriteRefOfRevertMigration(n, parent)
	case *Rollback:
		return c.copyOnRewriteRefOfRollback(n, parent)
	case *SRollback:
		return c.copyOnRewriteRefOfSRollback(n, parent)
	case *Savepoint:
		return c.copyOnRewriteRefOfSavepoint(n, parent)
	case *Select:
		return c.copyOnRewriteRefOfSelect(n, parent)
	case *Set:
		return c.copyOnRewriteRefOfSet(n, parent)
	case *Show:
		return c.copyOnRewriteRefOfShow(n, parent)
	case *ShowMigrationLogs:
		return c.copyOnRewriteRefOfShowMigrationLogs(n, parent)
	case *ShowThrottledApps:
		return c.copyOnRewriteRefOfShowThrottledApps(n, parent)
	case *ShowThrottlerStatus:
		return c.copyOnRewriteRefOfShowThrottlerStatus(n, parent)
	case *Stream:
		return c.copyOnRewriteRefOfStream(n, parent)
	case *TruncateTable:
		return c.copyOnRewriteRefOfTruncateTable(n, parent)
	case *Union:
		return c.copyOnRewriteRefOfUnion(n, parent)
	case *UnlockTables:
		return c.copyOnRewriteRefOfUnlockTables(n, parent)
	case *Update:
		return c.copyOnRewriteRefOfUpdate(n, parent)
	case *Use:
		return c.copyOnRewriteRefOfUse(n, parent)
	case *VExplainStmt:
		return c.copyOnRewriteRefOfVExplainStmt(n, parent)
	case *VStream:
		return c.copyOnRewriteRefOfVStream(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteTableExpr(n TableExpr, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	switch n := n.(type) {
	case *AliasedTableExpr:
		return c.copyOnRewriteRefOfAliasedTableExpr(n, parent)
	case *JSONTableExpr:
		return c.copyOnRewriteRefOfJSONTableExpr(n, parent)
	case *JoinTableExpr:
		return c.copyOnRewriteRefOfJoinTableExpr(n, parent)
	case *ParenTableExpr:
		return c.copyOnRewriteRefOfParenTableExpr(n, parent)
	default:
		// this should never happen
		return nil, false
	}
}
func (c *cow) copyOnRewriteAlgorithmValue(n AlgorithmValue, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteArgument(n Argument, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteBoolVal(n BoolVal, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteListArg(n ListArg, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteMatchAction(n MatchAction, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteReferenceAction(n ReferenceAction, parent SQLNode) (out SQLNode, changed bool) {
	if c.cursor.stop {
		return n, false
	}
	if c.pre != nil {
		c.pre(n, parent)
	}
	if c.post != nil {
		out, changed = c.postVisit(n, parent, changed)
	} else {
		out = n
	}
	return
}
func (c *cow) copyOnRewriteRefOfIdentifierCI(n *IdentifierCI, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfIdentifierCS(n *IdentifierCS, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfRootNode(n *RootNode, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_SQLNode, changedSQLNode := c.copyOnRewriteSQLNode(n.SQLNode, n)
		if changedSQLNode {
			res := *n
			res.SQLNode, _ = _SQLNode.(SQLNode)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfTableName(n *TableName, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Name, changedName := c.copyOnRewriteIdentifierCS(n.Name, n)
		_Qualifier, changedQualifier := c.copyOnRewriteIdentifierCS(n.Qualifier, n)
		if changedName || changedQualifier {
			res := *n
			res.Name, _ = _Name.(IdentifierCS)
			res.Qualifier, _ = _Qualifier.(IdentifierCS)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
func (c *cow) copyOnRewriteRefOfVindexParam(n *VindexParam, parent SQLNode) (out SQLNode, changed bool) {
	if n == nil || c.cursor.stop {
		return n, false
	}
	out = n
	if c.pre == nil || c.pre(n, parent) {
		_Key, changedKey := c.copyOnRewriteIdentifierCI(n.Key, n)
		if changedKey {
			res := *n
			res.Key, _ = _Key.(IdentifierCI)
			out = &res
			if c.cloned != nil {
				c.cloned(n, out)
			}
			changed = true
		}
	}
	if c.post != nil {
		out, changed = c.postVisit(out, parent, changed)
	}
	return
}
