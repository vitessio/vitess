# union
"select * from a union select * from b"
{
  "PlanID": "Select",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    },
    {
      "TableName": "b",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1 union select * from b where 1 != 1",
  "FullQuery": "select * from a union select * from b limit :#maxLimit"
}

# union with limit
"select * from a union select * from b limit 10"
{
  "PlanID": "Select",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    },
    {
      "TableName": "b",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1 union select * from b where 1 != 1",
  "FullQuery": "select * from a union select * from b limit 10"
}

# with no where clause
"select * from a"
{
  "PlanID": "Select",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1",
  "FullQuery": "select * from a limit :#maxLimit"
}

# select with a regular where clause
"select * from a where id=1"
{
  "PlanID": "Select",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1",
  "FullQuery": "select * from a where id = 1 limit :#maxLimit"
}

# select with limit
"select * from a limit 5"
{
  "PlanID": "Select",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1",
  "FullQuery": "select * from a limit 5"
}

# limit with offset arg
"select * from a limit 10, 5"
{
  "PlanID": "Select",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1",
  "FullQuery": "select * from a limit 10, 5"
}

# select impossible
"select * from a where 1 != 1"
{
  "PlanID": "SelectImpossible",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select * from a where 1 != 1",
  "FullQuery": "select * from a where 1 != 1 limit :#maxLimit"
}

# bind in select list
"select :bv from a"
{
  "PlanID": "Select",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FullQuery": "select :bv from a limit :#maxLimit"
}

# bind in select list and impossible
"select :bv from a where 1 != 1"
{
  "PlanID": "SelectImpossible",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FullQuery": "select :bv from a where 1 != 1 limit :#maxLimit"
}

# single value sequence
"select next value from seq"
{
  "PlanID": "Nextval",
  "TableName": "seq",
  "Permissions": [
    {
      "TableName": "seq",
      "Role": 0
    }
  ],
  "NextCount": "1"
}

# sequence with number
"select next 10 values from seq"
{
  "PlanID": "Nextval",
  "TableName": "seq",
  "Permissions": [
    {
      "TableName": "seq",
      "Role": 0
    }
  ],
  "NextCount": "10"
}


# sequence with bindvar
"select next :a values from seq"
{
  "PlanID": "Nextval",
  "TableName": "seq",
  "Permissions": [
    {
      "TableName": "seq",
      "Role": 0
    }
  ],
  "NextCount": "\":a\""
}

# squence with bad value
"select next 12345667852342342342323423423 values from seq"
"strconv.ParseUint: parsing "12345667852342342342323423423": value out of range"

# nextval on non-sequence table
"select next value from a"
"a is not a sequence"

# nextval on non-existent table
"select next value from id"
"id is not a sequence"

# for update
"select eid from a for update"
{
  "PlanID": "SelectLock",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select eid from a where 1 != 1",
  "FullQuery": "select eid from a limit :#maxLimit for update"
}

# lock in share mode
"select eid from a lock in share mode"
{
  "PlanID": "SelectLock",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FieldQuery": "select eid from a where 1 != 1",
  "FullQuery": "select eid from a limit :#maxLimit lock in share mode"
}

# normal insert
"insert into a(eid, id) values (1, 2)"
{
  "PlanID": "Insert",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "insert into a(eid, id) values (1, 2)"
}

# insert cross-db
"insert into b.a (eid, id) values (1, 2)"
{
  "PlanID": "Insert",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "insert into b.a(eid, id) values (1, 2)"
}

# insert with bind value
"insert into a (eid, id) values (1, :a)"
{
  "PlanID": "Insert",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "insert into a(eid, id) values (1, :a)"
}

# insert with subquery
"insert into b (eid, id) select * from a"
{
  "PlanID": "Insert",
  "TableName": "b",
  "Permissions": [
    {
      "TableName": "b",
      "Role": 1
    },
    {
      "TableName": "a",
      "Role": 0
    }
  ],
  "FullQuery": "insert into b(eid, id) select * from a"
}

# upsert
"insert into a (eid, id) values (1, 2) on duplicate key update name = func(a)"
{
  "PlanID": "Insert",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "insert into a(eid, id) values (1, 2) on duplicate key update name = func(a)"
}

# replace
"replace into b (eid, id) values (1, 2), (3, 4)"
{
  "PlanID": "Insert",
  "TableName": "b",
  "Permissions": [
    {
      "TableName": "b",
      "Role": 1
    }
  ],
  "FullQuery": "replace into b(eid, id) values (1, 2), (3, 4)"
}

# update with no where clause
"update d set foo='foo'"
{
  "PlanID": "UpdateLimit",
  "TableName": "d",
  "Permissions": [
    {
      "TableName": "d",
      "Role": 1
    }
  ],
  "FullQuery": "update d set foo = 'foo' limit :#maxLimit"
}

# normal update
"update d set foo='foo' where name in ('a', 'b')"
{
  "PlanID": "UpdateLimit",
  "TableName": "d",
  "Permissions": [
    {
      "TableName": "d",
      "Role": 1
    }
  ],
  "FullQuery": "update d set foo = 'foo' where name in ('a', 'b') limit :#maxLimit",
  "WhereClause": "where name in ('a', 'b')"
}

# normal update
options:PassthroughDMLs
"update d set foo='foo' where name in ('a', 'b')"
{
  "PlanID": "Update",
  "TableName": "d",
  "Permissions": [
    {
      "TableName": "d",
      "Role": 1
    }
  ],
  "FullQuery": "update d set foo = 'foo' where name in ('a', 'b')",
  "WhereClause": "where name in ('a', 'b')"
}

# cross-db update
"update a.b set foo='foo' where name in ('a', 'b')"
{
  "PlanID": "Update",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "b",
      "Role": 1
    }
  ],
  "FullQuery": "update a.b set foo = 'foo' where name in ('a', 'b')",
  "WhereClause": "where name in ('a', 'b')"
}

# update unknown table
"update bogus set name='foo' where id=1"
{
  "PlanID": "Update",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "bogus",
      "Role": 1
    }
  ],
  "FullQuery": "update bogus set name = 'foo' where id = 1",
  "WhereClause": "where id = 1"
}

# update unknown table
options:PassthroughDMLs
"update bogus set name='foo' where id=1"
{
  "PlanID": "Update",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "bogus",
      "Role": 1
    }
  ],
  "FullQuery": "update bogus set name = 'foo' where id = 1",
  "WhereClause": "where id = 1"
}

# multi-table update
"update a, b set a.name = 'foo' where a.id = b.id and b.var = 'test'"
{
  "PlanID": "Update",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    },
    {
      "TableName": "b",
      "Role": 1
    }
  ],
  "FullQuery": "update a, b set a.name = 'foo' where a.id = b.id and b.var = 'test'",
  "WhereClause": "where a.id = b.id and b.var = 'test'"
}

# multi-table update
options:PassthroughDMLs
"update a join b on a.id = b.id set a.name = 'foo' where b.var = 'test'"
{
  "PlanID": "Update",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    },
    {
      "TableName": "b",
      "Role": 1
    }
  ],
  "FullQuery": "update a join b on a.id = b.id set a.name = 'foo' where b.var = 'test'",
  "WhereClause": "where b.var = 'test'"
}


# update with limit
"update a set name='foo' limit 1"
{
  "PlanID": "Update",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "update a set name = 'foo' limit 1"
}

# update with limit
options:PassthroughDMLs
"update a set name='foo' limit 1"
{
  "PlanID": "Update",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "update a set name = 'foo' limit 1"
}

# delete with no where clause
"delete from a"
{
  "PlanID": "DeleteLimit",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "delete from a limit :#maxLimit"
}

# normal delete
"delete from d where name in ('a', 'b')"
{
  "PlanID": "DeleteLimit",
  "TableName": "d",
  "Permissions": [
    {
      "TableName": "d",
      "Role": 1
    }
  ],
  "FullQuery": "delete from d where name in ('a', 'b') limit :#maxLimit",
  "WhereClause": "where name in ('a', 'b')"
}

# normal delete
options:PassthroughDMLs
"delete from d where name in ('a', 'b')"
{
  "PlanID": "Delete",
  "TableName": "d",
  "Permissions": [
    {
      "TableName": "d",
      "Role": 1
    }
  ],
  "FullQuery": "delete from d where name in ('a', 'b')",
  "WhereClause": "where name in ('a', 'b')"
}

# delete unknown table
"delete from bogus"
{
  "PlanID": "Delete",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "bogus",
      "Role": 1
    }
  ],
  "FullQuery": "delete from bogus"
}

# delete unknown table
options:PassthroughDMLs
"delete from bogus"
{
  "PlanID": "Delete",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "bogus",
      "Role": 1
    }
  ],
  "FullQuery": "delete from bogus"
}

# multi-table delete
"delete a, b from a, b where id = 1"
{
  "PlanID": "Delete",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    },
    {
      "TableName": "b",
      "Role": 1
    }
  ],
  "FullQuery": "delete a, b from a, b where id = 1",
  "WhereClause": "where id = 1"
}


# delete with limit
"delete from a limit 10"
{
  "PlanID": "Delete",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "delete from a limit 10"
}

# delete with limit
options:PassthroughDMLs
"delete from a limit 10"
{
  "PlanID": "Delete",
  "TableName": "a",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 1
    }
  ],
  "FullQuery": "delete from a limit 10"
}

# int
"set  a=1"
{
  "PlanID": "Set",
  "TableName": "",
  "FullQuery": "set a = 1"
}

# float
"set  a=1.2"
{
  "PlanID": "Set",
  "TableName": "",
  "FullQuery": "set a = 1.2"
}

# string
"set a='b'"
{
  "PlanID": "Set",
  "TableName": "",
  "FullQuery": "set a = 'b'"
}

# multi
"set a=1, b=2"
{
  "PlanID": "Set",
  "TableName": "",
  "FullQuery": "set a = 1, b = 2"
}

# create
"create table a(a int, b varchar(8))"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    }
  ]
}

# alter
"alter table a add column(a int)"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    }
  ]
}

# alter rename
"alter table a rename b"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    },
    {
      "TableName": "b",
      "Role": 2
    }
  ]
}

# rename
"rename table a to b"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    },
    {
      "TableName": "b",
      "Role": 2
    }
  ]
}

# multi-rename
"rename table a to b, b to a"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    },
    {
      "TableName": "b",
      "Role": 2
    },
    {
      "TableName": "b",
      "Role": 2
    },
    {
      "TableName": "a",
      "Role": 2
    }
  ]
}

# drop
"drop table a"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    }
  ]
}

# multi-drop
"drop table a, b"
{
  "PlanID": "DDL",
  "TableName": "",
  "Permissions": [
    {
      "TableName": "a",
      "Role": 2
    },
    {
      "TableName": "b",
      "Role": 2
    }
  ]
}

# analyze
"analyze table a"
{
  "PlanID": "OtherRead",
  "TableName": ""
}

# show
"show a"
{
  "PlanID": "OtherRead",
  "TableName": ""
}

# describe
"describe a"
{
  "PlanID": "OtherRead",
  "TableName": ""
}

# explain
"explain a"
{
  "PlanID": "OtherRead",
  "TableName": ""
}

# repair
"repair a"
{
  "PlanID": "OtherAdmin",
  "TableName": ""
}

# optimize
"optimize a"
{
  "PlanID": "OtherAdmin",
  "TableName": ""
}

# syntax error
"syntax error"
"syntax error at position 7 near 'syntax'"
