// Code generated by MockGen. DO NOT EDIT.
// Source: sql_executer_interface.go

// Package splitquery_testing is a generated GoMock package.
package splitquery_testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqltypes "vitess.io/vitess/go/sqltypes"
	query "vitess.io/vitess/go/vt/proto/query"
)

// MockSQLExecuter is a mock of SQLExecuter interface
type MockSQLExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockSQLExecuterMockRecorder
}

// MockSQLExecuterMockRecorder is the mock recorder for MockSQLExecuter
type MockSQLExecuterMockRecorder struct {
	mock *MockSQLExecuter
}

// NewMockSQLExecuter creates a new mock instance
func NewMockSQLExecuter(ctrl *gomock.Controller) *MockSQLExecuter {
	mock := &MockSQLExecuter{ctrl: ctrl}
	mock.recorder = &MockSQLExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLExecuter) EXPECT() *MockSQLExecuterMockRecorder {
	return m.recorder
}

// SQLExecute mocks base method
func (m *MockSQLExecuter) SQLExecute(sql string, bindVariables map[string]*query.BindVariable) (*sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "SQLExecute", sql, bindVariables)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SQLExecute indicates an expected call of SQLExecute
func (mr *MockSQLExecuterMockRecorder) SQLExecute(sql, bindVariables interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLExecute", reflect.TypeOf((*MockSQLExecuter)(nil).SQLExecute), sql, bindVariables)
}
