// Code generated by MockGen. DO NOT EDIT.
// Source: vitess.io/vitess/go/vt/discovery (interfaces: HealthCheck)
//
// Generated by this command:
//
//	mockgen -destination mock_healthcheck_test.go -package txthrottler -mock_names HealthCheck=MockHealthCheck vitess.io/vitess/go/vt/discovery HealthCheck
//

// Package txthrottler is a generated GoMock package.
package txthrottler

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	discovery "vitess.io/vitess/go/vt/discovery"
	query "vitess.io/vitess/go/vt/proto/query"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	topo "vitess.io/vitess/go/vt/topo"
	queryservice "vitess.io/vitess/go/vt/vttablet/queryservice"
)

// MockHealthCheck is a mock of HealthCheck interface.
type MockHealthCheck struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckMockRecorder
	isgomock struct{}
}

// MockHealthCheckMockRecorder is the mock recorder for MockHealthCheck.
type MockHealthCheckMockRecorder struct {
	mock *MockHealthCheck
}

// NewMockHealthCheck creates a new mock instance.
func NewMockHealthCheck(ctrl *gomock.Controller) *MockHealthCheck {
	mock := &MockHealthCheck{ctrl: ctrl}
	mock.recorder = &MockHealthCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheck) EXPECT() *MockHealthCheckMockRecorder {
	return m.recorder
}

// AddTablet mocks base method.
func (m *MockHealthCheck) AddTablet(tablet *topodata.Tablet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTablet", tablet)
}

// AddTablet indicates an expected call of AddTablet.
func (mr *MockHealthCheckMockRecorder) AddTablet(tablet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTablet", reflect.TypeOf((*MockHealthCheck)(nil).AddTablet), tablet)
}

// CacheStatus mocks base method.
func (m *MockHealthCheck) CacheStatus() discovery.TabletsCacheStatusList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheStatus")
	ret0, _ := ret[0].(discovery.TabletsCacheStatusList)
	return ret0
}

// CacheStatus indicates an expected call of CacheStatus.
func (mr *MockHealthCheckMockRecorder) CacheStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheStatus", reflect.TypeOf((*MockHealthCheck)(nil).CacheStatus))
}

// CacheStatusMap mocks base method.
func (m *MockHealthCheck) CacheStatusMap() map[string]*discovery.TabletsCacheStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheStatusMap")
	ret0, _ := ret[0].(map[string]*discovery.TabletsCacheStatus)
	return ret0
}

// CacheStatusMap indicates an expected call of CacheStatusMap.
func (mr *MockHealthCheckMockRecorder) CacheStatusMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheStatusMap", reflect.TypeOf((*MockHealthCheck)(nil).CacheStatusMap))
}

// Close mocks base method.
func (m *MockHealthCheck) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockHealthCheckMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHealthCheck)(nil).Close))
}

// GetHealthyTabletStats mocks base method.
func (m *MockHealthCheck) GetHealthyTabletStats(target *query.Target) []*discovery.TabletHealth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthyTabletStats", target)
	ret0, _ := ret[0].([]*discovery.TabletHealth)
	return ret0
}

// GetHealthyTabletStats indicates an expected call of GetHealthyTabletStats.
func (mr *MockHealthCheckMockRecorder) GetHealthyTabletStats(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthyTabletStats", reflect.TypeOf((*MockHealthCheck)(nil).GetHealthyTabletStats), target)
}

// GetLoadTabletsTrigger mocks base method.
func (m *MockHealthCheck) GetLoadTabletsTrigger() chan topo.KeyspaceShard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadTabletsTrigger")
	ret0, _ := ret[0].(chan topo.KeyspaceShard)
	return ret0
}

// GetLoadTabletsTrigger indicates an expected call of GetLoadTabletsTrigger.
func (mr *MockHealthCheckMockRecorder) GetLoadTabletsTrigger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadTabletsTrigger", reflect.TypeOf((*MockHealthCheck)(nil).GetLoadTabletsTrigger))
}

// GetTabletHealth mocks base method.
func (m *MockHealthCheck) GetTabletHealth(kst discovery.KeyspaceShardTabletType, alias *topodata.TabletAlias) (*discovery.TabletHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTabletHealth", kst, alias)
	ret0, _ := ret[0].(*discovery.TabletHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTabletHealth indicates an expected call of GetTabletHealth.
func (mr *MockHealthCheckMockRecorder) GetTabletHealth(kst, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTabletHealth", reflect.TypeOf((*MockHealthCheck)(nil).GetTabletHealth), kst, alias)
}

// GetTabletHealthByAlias mocks base method.
func (m *MockHealthCheck) GetTabletHealthByAlias(alias *topodata.TabletAlias) (*discovery.TabletHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTabletHealthByAlias", alias)
	ret0, _ := ret[0].(*discovery.TabletHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTabletHealthByAlias indicates an expected call of GetTabletHealthByAlias.
func (mr *MockHealthCheckMockRecorder) GetTabletHealthByAlias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTabletHealthByAlias", reflect.TypeOf((*MockHealthCheck)(nil).GetTabletHealthByAlias), alias)
}

// HealthyStatus mocks base method.
func (m *MockHealthCheck) HealthyStatus() discovery.TabletsCacheStatusList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthyStatus")
	ret0, _ := ret[0].(discovery.TabletsCacheStatusList)
	return ret0
}

// HealthyStatus indicates an expected call of HealthyStatus.
func (mr *MockHealthCheckMockRecorder) HealthyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthyStatus", reflect.TypeOf((*MockHealthCheck)(nil).HealthyStatus))
}

// RegisterStats mocks base method.
func (m *MockHealthCheck) RegisterStats() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStats")
}

// RegisterStats indicates an expected call of RegisterStats.
func (mr *MockHealthCheckMockRecorder) RegisterStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStats", reflect.TypeOf((*MockHealthCheck)(nil).RegisterStats))
}

// RemoveTablet mocks base method.
func (m *MockHealthCheck) RemoveTablet(tablet *topodata.Tablet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTablet", tablet)
}

// RemoveTablet indicates an expected call of RemoveTablet.
func (mr *MockHealthCheckMockRecorder) RemoveTablet(tablet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTablet", reflect.TypeOf((*MockHealthCheck)(nil).RemoveTablet), tablet)
}

// ReplaceTablet mocks base method.
func (m *MockHealthCheck) ReplaceTablet(old, new *topodata.Tablet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplaceTablet", old, new)
}

// ReplaceTablet indicates an expected call of ReplaceTablet.
func (mr *MockHealthCheckMockRecorder) ReplaceTablet(old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTablet", reflect.TypeOf((*MockHealthCheck)(nil).ReplaceTablet), old, new)
}

// Subscribe mocks base method.
func (m *MockHealthCheck) Subscribe(name string) chan *discovery.TabletHealth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", name)
	ret0, _ := ret[0].(chan *discovery.TabletHealth)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockHealthCheckMockRecorder) Subscribe(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockHealthCheck)(nil).Subscribe), name)
}

// TabletConnection mocks base method.
func (m *MockHealthCheck) TabletConnection(ctx context.Context, alias *topodata.TabletAlias, target *query.Target) (queryservice.QueryService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TabletConnection", ctx, alias, target)
	ret0, _ := ret[0].(queryservice.QueryService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TabletConnection indicates an expected call of TabletConnection.
func (mr *MockHealthCheckMockRecorder) TabletConnection(ctx, alias, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TabletConnection", reflect.TypeOf((*MockHealthCheck)(nil).TabletConnection), ctx, alias, target)
}

// Unsubscribe mocks base method.
func (m *MockHealthCheck) Unsubscribe(c chan *discovery.TabletHealth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", c)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockHealthCheckMockRecorder) Unsubscribe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockHealthCheck)(nil).Unsubscribe), c)
}

// WaitForAllServingTablets mocks base method.
func (m *MockHealthCheck) WaitForAllServingTablets(ctx context.Context, targets []*query.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForAllServingTablets", ctx, targets)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForAllServingTablets indicates an expected call of WaitForAllServingTablets.
func (mr *MockHealthCheckMockRecorder) WaitForAllServingTablets(ctx, targets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAllServingTablets", reflect.TypeOf((*MockHealthCheck)(nil).WaitForAllServingTablets), ctx, targets)
}
