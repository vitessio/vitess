{
    "package": "vtadmin_test",
    "clusters": [
        {
            "id": "test",
            "name": "test",
            "vtctldclient_mock_data": [
                {
                    "field": "DeleteShardsResults",
                    "type": "map[string]error",
                    "value": "\"test/-\": nil,"
                },
                {
                    "field": "DeleteTabletsResults",
                    "type": "map[string]error",
                    "value": "\"zone1-0000000100\": nil,"
                },
                {
                    "field": "FindAllShardsInKeyspaceResults",
                    "type": "map[string]struct{\nResponse *vtctldatapb.FindAllShardsInKeyspaceResponse\nError error}",
                    "value": "\"test\": {\nResponse: &vtctldatapb.FindAllShardsInKeyspaceResponse{\nShards: map[string]*vtctldatapb.Shard{\n\"-\": {\nKeyspace: \"test\",\nName: \"-\",\nShard: &topodatapb.Shard{},\n},\n},\n},\n},"
                },
                {
                    "field": "GetBackupsResults",
                    "type": "map[string]struct{\nResponse *vtctldatapb.GetBackupsResponse\nError error}",
                    "value": "\"test/-\": {\nResponse: &vtctldatapb.GetBackupsResponse{\nBackups: []*mysqlctlpb.BackupInfo{\n{},\n},\n},\n},"
                },
                {
                    "field": "GetCellInfoNamesResults",
                    "type": "&struct{\nResponse *vtctldatapb.GetCellInfoNamesResponse\nError error}",
                    "value": "Response: &vtctldatapb.GetCellInfoNamesResponse{\nNames: []string{\"zone1\"},\n},"
                },
                {
                    "field": "GetKeyspacesResults",
                    "type": "&struct{\nKeyspaces []*vtctldatapb.Keyspace\nError error}",
                    "value": "Keyspaces: []*vtctldatapb.Keyspace{\n{\nName: \"test\",\nKeyspace: &topodatapb.Keyspace{},\n},\n},"
                }
            ],
            "db_tablet_list": [
                {
                    "tablet": {
                        "alias": {"cell": "zone1", "uid": 100}
                    }
                }
            ]
        },
        {
            "id": "other",
            "name": "other",
            "vtctldclient_mock_data": [
                {
                    "field": "FindAllShardsInKeyspaceResults",
                    "type": "map[string]struct{\nResponse *vtctldatapb.FindAllShardsInKeyspaceResponse\nError error}",
                    "value": "\"otherks\": {\nResponse: &vtctldatapb.FindAllShardsInKeyspaceResponse{\nShards: map[string]*vtctldatapb.Shard{\n\"-\": {\nKeyspace: \"otherks\",\nName: \"-\",\nShard: &topodatapb.Shard{},\n},\n},\n},\n},"
                },
                {
                    "field": "GetBackupsResults",
                    "type": "map[string]struct{\nResponse *vtctldatapb.GetBackupsResponse\nError error}",
                    "value": "\"otherks/-\": {\nResponse: &vtctldatapb.GetBackupsResponse{\nBackups: []*mysqlctlpb.BackupInfo{\n{}, {}, {},\n},\n},\n},"
                },
                {
                    "field": "GetKeyspacesResults",
                    "type": "&struct{\nKeyspaces []*vtctldatapb.Keyspace\nError error}",
                    "value": "Keyspaces: []*vtctldatapb.Keyspace{\n{\nName: \"otherks\",\nKeyspace: &topodatapb.Keyspace{},\n},\n},"
                }
            ]
        }
    ],
    "tests": [
        {
            "method": "CreateKeyspace",
            "rules": [
                {
                    "resource": "Keyspace",
                    "actions": ["create"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.CreateKeyspaceRequest{\nClusterId: \"test\",\nOptions: &vtctldatapb.CreateKeyspaceRequest{\nName: \"test\",\n},\n}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "include_error_var": true,
                    "assertions": [
                        "assert.Error(t, err, $$)",
                        "assert.Nil(t, resp, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "include_error_var": true,
                    "is_permitted": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotNil(t, resp, $$)"
                    ]
                }
            ]
        },
        {
            "method": "CreateShard",
            "rules": [
                {
                    "resource": "Shard",
                    "actions": ["create"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.CreateShardRequest{\nClusterId: \"test\",\nOptions: &vtctldatapb.CreateShardRequest{\nKeyspace: \"test\",\nShardName: \"-\",\n},\n}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "include_error_var": true,
                    "assertions": [
                        "assert.Error(t, err, $$)",
                        "assert.Nil(t, resp, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "include_error_var": true,
                    "is_permitted": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotNil(t, resp, $$)"
                    ]
                }
            ]
        },
        {
            "method": "DeleteKeyspace",
            "rules": [
                {
                    "resource": "Keyspace",
                    "actions": ["delete"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.DeleteKeyspaceRequest{\nClusterId: \"test\",\nOptions: &vtctldatapb.DeleteKeyspaceRequest{\nKeyspace: \"test\",\n},\n}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "include_error_var": true,
                    "assertions": [
                        "assert.Error(t, err, $$)",
                        "assert.Nil(t, resp, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "include_error_var": true,
                    "is_permitted": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotNil(t, resp, $$)"
                    ]
                }
            ]
        },
        {
            "method": "DeleteShards",
            "rules": [
                {
                    "resource": "Shard",
                    "actions": ["delete"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.DeleteShardsRequest{\nClusterId: \"test\",\nOptions: &vtctldatapb.DeleteShardsRequest{\nShards: []*vtctldatapb.Shard{\n{\nKeyspace: \"test\",\nName: \"-\",\n},\n},\n},\n}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "include_error_var": true,
                    "assertions": [
                        "assert.Error(t, err, $$)",
                        "assert.Nil(t, resp, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "include_error_var": true,
                    "is_permitted": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotNil(t, resp, $$)"
                    ]
                }
            ]
        },
        {
            "method": "DeleteTablet",
            "rules": [
                {
                    "resource": "Tablet",
                    "actions": ["delete"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.DeleteTabletRequest{\nClusterIds: []string{\"test\"},\nAlias: &topodatapb.TabletAlias{\nCell: \"zone1\",\nUid: 100,\n},\n}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "include_error_var": true,
                    "assertions": [
                        "assert.Error(t, err, $$)",
                        "assert.Nil(t, resp, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "include_error_var": true,
                    "is_permitted": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotNil(t, resp, $$)"
                    ]
                }
            ]
        },
        {
            "method": "GetBackups",
            "rules": [
                {
                    "resource": "Backup",
                    "actions": ["get"],
                    "subjects": ["user:allowed-all"],
                    "clusters": ["*"]
                },
                {
                    "resource": "Backup",
                    "actions": ["get"],
                    "subjects": ["user:allowed-other"],
                    "clusters": ["other"]
                }
            ],
            "request": "&vtadminpb.GetBackupsRequest{}",
            "cases": [
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "unauthorized"},
                    "is_permitted": false,
                    "assertions": [
                        "assert.Empty(t, resp.Backups, $$)"
                    ]
                },
                {
                    "name": "partial access",
                    "actor": {"name": "allowed-other"},
                    "is_permitted": true,
                    "assertions": [
                        "assert.NotEmpty(t, resp.Backups, $$)",
                        "assert.Len(t, resp.Backups, 3, \"'other' actor should be able to see the 3 backups in cluster 'other'\")"
                    ]
                },
                {
                    "name": "full access",
                    "actor": {"name": "allowed-all"},
                    "is_permitted": true,
                    "assertions": [
                        "assert.NotEmpty(t, resp.Backups, $$)",
                        "assert.Len(t, resp.Backups, 4, \"'all' actor should be able to see backups in all clusters\")"
                    ]
                }
            ]
        },
        {
            "method": "GetClusters",
            "rules": [
                {
                    "resource": "Cluster",
                    "actions": ["get"],
                    "subjects": ["user:allowed"],
                    "clusters": ["*"]
                }
            ],
            "request": "&vtadminpb.GetClustersRequest{}",
            "cases": [
                {
                    "name": "unauthenticated",
                    "actor": null,
                    "assertions": [
                        "assert.Empty(t, resp.Clusters, $$)"
                    ]
                },
                {
                    "name": "unauthorized actor",
                    "actor": {"name": "other"},
                    "assertions": [
                        "assert.Empty(t, resp.Clusters, $$)"
                    ]
                },
                {
                    "name": "authorized actor",
                    "actor": {"name": "allowed"},
                    "is_permitted": true,
                    "include_error_var": true,
                    "assertions": [
                        "require.NoError(t, err)",
                        "assert.NotEmpty(t, resp.Clusters, $$)"
                    ]
                }
            ]
        }
    ]
}