// Code generated by protoc-gen-go.
// source: query.proto
// DO NOT EDIT!

/*
Package query is a generated protocol buffer package.

It is generated from these files:
	query.proto

It has these top-level messages:
	Target
	VTGateCallerID
	EventToken
	Value
	BindVariable
	BoundQuery
	ExecuteOptions
	Field
	Row
	ResultExtras
	QueryResult
	StreamEvent
	ExecuteRequest
	ExecuteResponse
	ExecuteBatchRequest
	ExecuteBatchResponse
	StreamExecuteRequest
	StreamExecuteResponse
	BeginRequest
	BeginResponse
	CommitRequest
	CommitResponse
	RollbackRequest
	RollbackResponse
	BeginExecuteRequest
	BeginExecuteResponse
	BeginExecuteBatchRequest
	BeginExecuteBatchResponse
	SplitQueryRequest
	QuerySplit
	SplitQueryResponse
	StreamHealthRequest
	RealtimeStats
	StreamHealthResponse
	UpdateStreamRequest
	UpdateStreamResponse
	TransactionMetadata
*/
package query

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import topodata "github.com/youtube/vitess/go/vt/proto/topodata"
import vtrpc "github.com/youtube/vitess/go/vt/proto/vtrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

var Flag_name = map[int32]string{
	0:    "NONE",
	256:  "ISINTEGRAL",
	512:  "ISUNSIGNED",
	1024: "ISFLOAT",
	2048: "ISQUOTED",
	4096: "ISTEXT",
	8192: "ISBINARY",
}
var Flag_value = map[string]int32{
	"NONE":       0,
	"ISINTEGRAL": 256,
	"ISUNSIGNED": 512,
	"ISFLOAT":    1024,
	"ISQUOTED":   2048,
	"ISTEXT":     4096,
	"ISBINARY":   8192,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}
func (Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
)

var Type_name = map[int32]string{
	0:     "NULL_TYPE",
	257:   "INT8",
	770:   "UINT8",
	259:   "INT16",
	772:   "UINT16",
	261:   "INT24",
	774:   "UINT24",
	263:   "INT32",
	776:   "UINT32",
	265:   "INT64",
	778:   "UINT64",
	1035:  "FLOAT32",
	1036:  "FLOAT64",
	2061:  "TIMESTAMP",
	2062:  "DATE",
	2063:  "TIME",
	2064:  "DATETIME",
	785:   "YEAR",
	18:    "DECIMAL",
	6163:  "TEXT",
	10260: "BLOB",
	6165:  "VARCHAR",
	10262: "VARBINARY",
	6167:  "CHAR",
	10264: "BINARY",
	2073:  "BIT",
	2074:  "ENUM",
	2075:  "SET",
	28:    "TUPLE",
}
var Type_value = map[string]int32{
	"NULL_TYPE": 0,
	"INT8":      257,
	"UINT8":     770,
	"INT16":     259,
	"UINT16":    772,
	"INT24":     261,
	"UINT24":    774,
	"INT32":     263,
	"UINT32":    776,
	"INT64":     265,
	"UINT64":    778,
	"FLOAT32":   1035,
	"FLOAT64":   1036,
	"TIMESTAMP": 2061,
	"DATE":      2062,
	"TIME":      2063,
	"DATETIME":  2064,
	"YEAR":      785,
	"DECIMAL":   18,
	"TEXT":      6163,
	"BLOB":      10260,
	"VARCHAR":   6165,
	"VARBINARY": 10262,
	"CHAR":      6167,
	"BINARY":    10264,
	"BIT":       2073,
	"ENUM":      2074,
	"SET":       2075,
	"TUPLE":     28,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// TransactionState represents the state of a distributed transaction.
type TransactionState int32

const (
	TransactionState_UNKNOWN  TransactionState = 0
	TransactionState_PREPARE  TransactionState = 1
	TransactionState_COMMIT   TransactionState = 2
	TransactionState_ROLLBACK TransactionState = 3
)

var TransactionState_name = map[int32]string{
	0: "UNKNOWN",
	1: "PREPARE",
	2: "COMMIT",
	3: "ROLLBACK",
}
var TransactionState_value = map[string]int32{
	"UNKNOWN":  0,
	"PREPARE":  1,
	"COMMIT":   2,
	"ROLLBACK": 3,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}
func (TransactionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// The category of one statement.
type StreamEvent_Statement_Category int32

const (
	StreamEvent_Statement_Error StreamEvent_Statement_Category = 0
	StreamEvent_Statement_DML   StreamEvent_Statement_Category = 1
	StreamEvent_Statement_DDL   StreamEvent_Statement_Category = 2
)

var StreamEvent_Statement_Category_name = map[int32]string{
	0: "Error",
	1: "DML",
	2: "DDL",
}
var StreamEvent_Statement_Category_value = map[string]int32{
	"Error": 0,
	"DML":   1,
	"DDL":   2,
}

func (x StreamEvent_Statement_Category) String() string {
	return proto.EnumName(StreamEvent_Statement_Category_name, int32(x))
}
func (StreamEvent_Statement_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0, 0}
}

type SplitQueryRequest_Algorithm int32

const (
	SplitQueryRequest_EQUAL_SPLITS SplitQueryRequest_Algorithm = 0
	SplitQueryRequest_FULL_SCAN    SplitQueryRequest_Algorithm = 1
)

var SplitQueryRequest_Algorithm_name = map[int32]string{
	0: "EQUAL_SPLITS",
	1: "FULL_SCAN",
}
var SplitQueryRequest_Algorithm_value = map[string]int32{
	"EQUAL_SPLITS": 0,
	"FULL_SCAN":    1,
}

func (x SplitQueryRequest_Algorithm) String() string {
	return proto.EnumName(SplitQueryRequest_Algorithm_name, int32(x))
}
func (SplitQueryRequest_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

// Target describes what the client expects the tablet is.
// If the tablet does not match, an error is returned.
type Target struct {
	Keyspace   string              `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Shard      string              `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	TabletType topodata.TabletType `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// VTGateCallerID is sent by VTGate to VTTablet to describe the
// caller. If possible, this information is secure. For instance,
// if using unique certificates that guarantee that VTGate->VTTablet
// traffic cannot be spoofed, then VTTablet can trust this information,
// and VTTablet will use it for tablet ACLs, for instance.
// Because of this security guarantee, this is different than the CallerID
// structure, which is not secure at all, because it is provided
// by the Vitess client.
type VTGateCallerID struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *VTGateCallerID) Reset()                    { *m = VTGateCallerID{} }
func (m *VTGateCallerID) String() string            { return proto.CompactTextString(m) }
func (*VTGateCallerID) ProtoMessage()               {}
func (*VTGateCallerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// EventToken is a structure that describes a point in time in a
// replication stream on one shard. The most recent known replication
// position can be retrieved from vttablet when executing a query. It
// is also sent with the replication streams from the binlog service.
type EventToken struct {
	// timestamp is the MySQL timestamp of the statements. Seconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The shard name that applied the statements. Note this is not set when
	// streaming from a vttablet. It is only used on the client -> vtgate link.
	Shard string `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	// The position on the replication stream after this statement was applied.
	// It is not the transaction ID / GTID, but the position / GTIDSet.
	Position string `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
}

func (m *EventToken) Reset()                    { *m = EventToken{} }
func (m *EventToken) String() string            { return proto.CompactTextString(m) }
func (*EventToken) ProtoMessage()               {}
func (*EventToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Value represents a typed value.
type Value struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values []*Value `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *BindVariable) Reset()                    { *m = BindVariable{} }
func (m *BindVariable) String() string            { return proto.CompactTextString(m) }
func (*BindVariable) ProtoMessage()               {}
func (*BindVariable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BindVariable) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query
	BindVariables map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BoundQuery) Reset()                    { *m = BoundQuery{} }
func (m *BoundQuery) String() string            { return proto.CompactTextString(m) }
func (*BoundQuery) ProtoMessage()               {}
func (*BoundQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if m != nil {
		return m.BindVariables
	}
	return nil
}

// ExecuteOptions is passed around for all Execute calls.
type ExecuteOptions struct {
	// If set, the resulting Field array won’t have a Name, just a Type.
	// This is an optimization for high-QPS queries where the client knows
	// what it's getting.
	ExcludeFieldNames bool `protobuf:"varint,1,opt,name=exclude_field_names,json=excludeFieldNames" json:"exclude_field_names,omitempty"`
	// If set, we will try to include an EventToken with the responses.
	IncludeEventToken bool `protobuf:"varint,2,opt,name=include_event_token,json=includeEventToken" json:"include_event_token,omitempty"`
	// If set, the fresher field may be set as a result comparison to this token.
	// This is a shortcut so the application doesn't need to care about
	// comparing EventTokens.
	CompareEventToken *EventToken `protobuf:"bytes,3,opt,name=compare_event_token,json=compareEventToken" json:"compare_event_token,omitempty"`
}

func (m *ExecuteOptions) Reset()                    { *m = ExecuteOptions{} }
func (m *ExecuteOptions) String() string            { return proto.CompactTextString(m) }
func (*ExecuteOptions) ProtoMessage()               {}
func (*ExecuteOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExecuteOptions) GetCompareEventToken() *EventToken {
	if m != nil {
		return m.CompareEventToken
	}
	return nil
}

// Field describes a single column returned by a query
type Field struct {
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,enum=query.Type" json:"type,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// Row is a database row.
type Row struct {
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values []byte `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// ResultExtras contains optional out-of-band information. Usually the
// extras are requested by adding ExecuteOptions flags.
type ResultExtras struct {
	// event_token is populated if the include_event_token flag is set
	// in ExecuteOptions.
	EventToken *EventToken `protobuf:"bytes,1,opt,name=event_token,json=eventToken" json:"event_token,omitempty"`
	// If set, it means the data returned with this result is fresher
	// than the compare_token passed in the ExecuteOptions.
	Fresher bool `protobuf:"varint,2,opt,name=fresher" json:"fresher,omitempty"`
}

func (m *ResultExtras) Reset()                    { *m = ResultExtras{} }
func (m *ResultExtras) String() string            { return proto.CompactTextString(m) }
func (*ResultExtras) ProtoMessage()               {}
func (*ResultExtras) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ResultExtras) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

// QueryResult is returned by Execute and ExecuteStream.
//
// As returned by Execute, len(fields) is always equal to len(row)
// (for each row in rows).
//
// As returned by StreamExecute, the first QueryResult has the fields
// set, and subsequent QueryResult have rows set. And as Execute,
// len(QueryResult[0].fields) is always equal to len(row) (for each
// row in rows for each QueryResult in QueryResult[1:]).
type QueryResult struct {
	Fields       []*Field      `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	RowsAffected uint64        `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
	InsertId     uint64        `protobuf:"varint,3,opt,name=insert_id,json=insertId" json:"insert_id,omitempty"`
	Rows         []*Row        `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
	Extras       *ResultExtras `protobuf:"bytes,5,opt,name=extras" json:"extras,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryResult) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *QueryResult) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *QueryResult) GetExtras() *ResultExtras {
	if m != nil {
		return m.Extras
	}
	return nil
}

// StreamEvent describes a set of transformations that happened as a
// single transactional unit on a server. It is streamed back by the
// Update Stream calls.
type StreamEvent struct {
	// The statements in this transaction.
	Statements []*StreamEvent_Statement `protobuf:"bytes,1,rep,name=statements" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken *EventToken `protobuf:"bytes,2,opt,name=event_token,json=eventToken" json:"event_token,omitempty"`
}

func (m *StreamEvent) Reset()                    { *m = StreamEvent{} }
func (m *StreamEvent) String() string            { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()               {}
func (*StreamEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StreamEvent) GetStatements() []*StreamEvent_Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *StreamEvent) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

// One individual Statement in a transaction.
type StreamEvent_Statement struct {
	Category StreamEvent_Statement_Category `protobuf:"varint,1,opt,name=category,enum=query.StreamEvent_Statement_Category" json:"category,omitempty"`
	// table_name, primary_key_fields and primary_key_values are set for DML.
	TableName        string   `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	PrimaryKeyFields []*Field `protobuf:"bytes,3,rep,name=primary_key_fields,json=primaryKeyFields" json:"primary_key_fields,omitempty"`
	PrimaryKeyValues []*Row   `protobuf:"bytes,4,rep,name=primary_key_values,json=primaryKeyValues" json:"primary_key_values,omitempty"`
	// sql is set for all queries.
	// FIXME(alainjobart) we may not need it for DMLs.
	Sql []byte `protobuf:"bytes,5,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (m *StreamEvent_Statement) Reset()                    { *m = StreamEvent_Statement{} }
func (m *StreamEvent_Statement) String() string            { return proto.CompactTextString(m) }
func (*StreamEvent_Statement) ProtoMessage()               {}
func (*StreamEvent_Statement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *StreamEvent_Statement) GetPrimaryKeyFields() []*Field {
	if m != nil {
		return m.PrimaryKeyFields
	}
	return nil
}

func (m *StreamEvent_Statement) GetPrimaryKeyValues() []*Row {
	if m != nil {
		return m.PrimaryKeyValues
	}
	return nil
}

// ExecuteRequest is the payload to Execute
type ExecuteRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	TransactionId     int64           `protobuf:"varint,5,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteResponse is the returned value from Execute
type ExecuteResponse struct {
	Result *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch
type ExecuteBatchRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Queries           []*BoundQuery   `protobuf:"bytes,4,rep,name=queries" json:"queries,omitempty"`
	AsTransaction     bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	TransactionId     int64           `protobuf:"varint,6,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,7,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteBatchRequest) Reset()                    { *m = ExecuteBatchRequest{} }
func (m *ExecuteBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchRequest) ProtoMessage()               {}
func (*ExecuteBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ExecuteBatchRequest) GetQueries() []*BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch
type ExecuteBatchResponse struct {
	Results []*QueryResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ExecuteBatchResponse) Reset()                    { *m = ExecuteBatchResponse{} }
func (m *ExecuteBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchResponse) ProtoMessage()               {}
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ExecuteBatchResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute
type StreamExecuteRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *StreamExecuteRequest) Reset()                    { *m = StreamExecuteRequest{} }
func (m *StreamExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteRequest) ProtoMessage()               {}
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StreamExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// StreamExecuteResponse is the returned value from StreamExecute
type StreamExecuteResponse struct {
	Result *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *StreamExecuteResponse) Reset()                    { *m = StreamExecuteResponse{} }
func (m *StreamExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteResponse) ProtoMessage()               {}
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StreamExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// BeginRequest is the payload to Begin
type BeginRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *BeginRequest) Reset()                    { *m = BeginRequest{} }
func (m *BeginRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginRequest) ProtoMessage()               {}
func (*BeginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BeginRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// BeginResponse is the returned value from Begin
type BeginResponse struct {
	TransactionId int64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *BeginResponse) Reset()                    { *m = BeginResponse{} }
func (m *BeginResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginResponse) ProtoMessage()               {}
func (*BeginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// CommitRequest is the payload to Commit
type CommitRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *CommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *CommitRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// CommitResponse is the returned value from Commit
type CommitResponse struct {
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// RollbackRequest is the payload to Rollback
type RollbackRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *RollbackRequest) Reset()                    { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string            { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()               {}
func (*RollbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *RollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *RollbackRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// RollbackResponse is the returned value from Rollback
type RollbackResponse struct {
}

func (m *RollbackResponse) Reset()                    { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()               {}
func (*RollbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// BeginExecuteRequest is the payload to BeginExecute
type BeginExecuteRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *BeginExecuteRequest) Reset()                    { *m = BeginExecuteRequest{} }
func (m *BeginExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginExecuteRequest) ProtoMessage()               {}
func (*BeginExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BeginExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BeginExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *BeginExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// BeginExecuteResponse is the returned value from BeginExecute
type BeginExecuteResponse struct {
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *BeginExecuteResponse) Reset()                    { *m = BeginExecuteResponse{} }
func (m *BeginExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginExecuteResponse) ProtoMessage()               {}
func (*BeginExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BeginExecuteResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BeginExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// BeginExecuteBatchRequest is the payload to BeginExecuteBatch
type BeginExecuteBatchRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Queries           []*BoundQuery   `protobuf:"bytes,4,rep,name=queries" json:"queries,omitempty"`
	AsTransaction     bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *BeginExecuteBatchRequest) Reset()                    { *m = BeginExecuteBatchRequest{} }
func (m *BeginExecuteBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginExecuteBatchRequest) ProtoMessage()               {}
func (*BeginExecuteBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BeginExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetQueries() []*BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// BeginExecuteBatchResponse is the returned value from BeginExecuteBatch
type BeginExecuteBatchResponse struct {
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error   *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Results []*QueryResult  `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *BeginExecuteBatchResponse) Reset()                    { *m = BeginExecuteBatchResponse{} }
func (m *BeginExecuteBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginExecuteBatchResponse) ProtoMessage()               {}
func (*BeginExecuteBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *BeginExecuteBatchResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BeginExecuteBatchResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// SplitQueryRequest is the payload for SplitQuery sent by VTGate to a VTTablet.
// See vtgate.SplitQueryRequest for more details.
type SplitQueryRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	SplitColumn       []string        `protobuf:"bytes,5,rep,name=split_column,json=splitColumn" json:"split_column,omitempty"`
	// Exactly one of the following must be nonzero.
	SplitCount          int64                       `protobuf:"varint,6,opt,name=split_count,json=splitCount" json:"split_count,omitempty"`
	NumRowsPerQueryPart int64                       `protobuf:"varint,8,opt,name=num_rows_per_query_part,json=numRowsPerQueryPart" json:"num_rows_per_query_part,omitempty"`
	Algorithm           SplitQueryRequest_Algorithm `protobuf:"varint,9,opt,name=algorithm,enum=query.SplitQueryRequest_Algorithm" json:"algorithm,omitempty"`
	// Whether to use the new split-query code
	// that supports multiple split-columns and
	// the FULL_SCAN algorithm.
	// This is a temporary field which aids
	// in the migration of SplitQuery to the new
	// code.
	// TODO(erez): Remove this field after the migration
	// to the SplitQuery version 2.
	UseSplitQueryV2 bool `protobuf:"varint,10,opt,name=use_split_query_v2,json=useSplitQueryV2" json:"use_split_query_v2,omitempty"`
}

func (m *SplitQueryRequest) Reset()                    { *m = SplitQueryRequest{} }
func (m *SplitQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitQueryRequest) ProtoMessage()               {}
func (*SplitQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SplitQueryRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *SplitQueryRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *SplitQueryRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SplitQueryRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// QuerySplit represents one query to execute on the tablet
type QuerySplit struct {
	// query is the query to execute
	Query *BoundQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// row_count is the approximate row count the query will return
	RowCount int64 `protobuf:"varint,2,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
}

func (m *QuerySplit) Reset()                    { *m = QuerySplit{} }
func (m *QuerySplit) String() string            { return proto.CompactTextString(m) }
func (*QuerySplit) ProtoMessage()               {}
func (*QuerySplit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *QuerySplit) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// SplitQueryResponse is returned by SplitQuery and represents all the queries
// to execute in order to get the entire data set.
type SplitQueryResponse struct {
	Queries []*QuerySplit `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *SplitQueryResponse) Reset()                    { *m = SplitQueryResponse{} }
func (m *SplitQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitQueryResponse) ProtoMessage()               {}
func (*SplitQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SplitQueryResponse) GetQueries() []*QuerySplit {
	if m != nil {
		return m.Queries
	}
	return nil
}

// StreamHealthRequest is the payload for StreamHealth
type StreamHealthRequest struct {
}

func (m *StreamHealthRequest) Reset()                    { *m = StreamHealthRequest{} }
func (m *StreamHealthRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamHealthRequest) ProtoMessage()               {}
func (*StreamHealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

// RealtimeStats contains information about the tablet status
type RealtimeStats struct {
	// health_error is the last error we got from health check,
	// or empty is the server is healthy. This is used for subset selection,
	// we do not send queries to servers that are not healthy.
	HealthError string `protobuf:"bytes,1,opt,name=health_error,json=healthError" json:"health_error,omitempty"`
	// seconds_behind_master is populated for slaves only. It indicates
	// how far behind on (MySQL) replication a slave currently is.  It is used
	// by clients for subset selection (so we don't try to send traffic
	// to tablets that are too far behind).
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// TODO(mberlin): Let's switch it to int64 instead?
	SecondsBehindMaster uint32 `protobuf:"varint,2,opt,name=seconds_behind_master,json=secondsBehindMaster" json:"seconds_behind_master,omitempty"`
	// bin_log_players_count is the number of currently running binlog players.
	// if the value is 0, it means that filtered replication is currently not
	// running on the tablet. If >0, filtered replication is running.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	BinlogPlayersCount int32 `protobuf:"varint,3,opt,name=binlog_players_count,json=binlogPlayersCount" json:"binlog_players_count,omitempty"`
	// seconds_behind_master_filtered_replication is populated for the receiving
	// master of an ongoing filtered replication only.
	// It specifies how far the receiving master lags behind the sending master.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// NOTE: This field must not be evaluated if "bin_log_players_count" is 0.
	SecondsBehindMasterFilteredReplication int64 `protobuf:"varint,4,opt,name=seconds_behind_master_filtered_replication,json=secondsBehindMasterFilteredReplication" json:"seconds_behind_master_filtered_replication,omitempty"`
	// cpu_usage is used for load-based balancing
	CpuUsage float64 `protobuf:"fixed64,5,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	// qps is the average QPS (queries per second) rate in the last XX seconds
	// where XX is usually 60 (See query_service_stats.go).
	Qps float64 `protobuf:"fixed64,6,opt,name=qps" json:"qps,omitempty"`
}

func (m *RealtimeStats) Reset()                    { *m = RealtimeStats{} }
func (m *RealtimeStats) String() string            { return proto.CompactTextString(m) }
func (*RealtimeStats) ProtoMessage()               {}
func (*RealtimeStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

// StreamHealthResponse is streamed by StreamHealth on a regular basis
type StreamHealthResponse struct {
	// target is the current server type. Only queries with that exact Target
	// record will be accepted.
	Target *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	// serving is true iff the tablet is serving. A tablet may not be serving
	// if filtered replication is enabled on a master for instance,
	// or if a replica should not be used because the keyspace is being resharded.
	Serving bool `protobuf:"varint,2,opt,name=serving" json:"serving,omitempty"`
	// tablet_externally_reparented_timestamp contains the last time
	// tabletmanager.TabletExternallyReparented was called on this tablet,
	// or 0 if it was never called. This is meant to differentiate two tablets
	// that report a target.TabletType of MASTER, only the one with the latest
	// timestamp should be trusted.
	TabletExternallyReparentedTimestamp int64 `protobuf:"varint,3,opt,name=tablet_externally_reparented_timestamp,json=tabletExternallyReparentedTimestamp" json:"tablet_externally_reparented_timestamp,omitempty"`
	// realtime_stats contains information about the tablet status
	RealtimeStats *RealtimeStats `protobuf:"bytes,4,opt,name=realtime_stats,json=realtimeStats" json:"realtime_stats,omitempty"`
}

func (m *StreamHealthResponse) Reset()                    { *m = StreamHealthResponse{} }
func (m *StreamHealthResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamHealthResponse) ProtoMessage()               {}
func (*StreamHealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *StreamHealthResponse) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StreamHealthResponse) GetRealtimeStats() *RealtimeStats {
	if m != nil {
		return m.RealtimeStats
	}
	return nil
}

// UpdateStreamRequest is the payload for UpdateStream. At most one of
// position and timestamp can be set. If neither is set, we will start
// streaming from the current binlog position.
type UpdateStreamRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	// If position is set, we will start the streaming from that replication
	// position. Incompatible with timestamp.
	Position string `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	// If timestamp is set, we will start the streaming from the first
	// event in the binlogs that have that timestamp. Incompatible with position.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *UpdateStreamRequest) Reset()                    { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()               {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UpdateStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *UpdateStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *UpdateStreamRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// UpdateStreamResponse is returned by UpdateStream
type UpdateStreamResponse struct {
	Event *StreamEvent `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *UpdateStreamResponse) Reset()                    { *m = UpdateStreamResponse{} }
func (m *UpdateStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateStreamResponse) ProtoMessage()               {}
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateStreamResponse) GetEvent() *StreamEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// TransactionMetadata contains the metadata for a distributed transaction.
type TransactionMetadata struct {
	Dtid         string           `protobuf:"bytes,1,opt,name=dtid" json:"dtid,omitempty"`
	State        TransactionState `protobuf:"varint,2,opt,name=state,enum=query.TransactionState" json:"state,omitempty"`
	TimeCreated  int64            `protobuf:"varint,3,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated  int64            `protobuf:"varint,4,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Participants []*Target        `protobuf:"bytes,5,rep,name=participants" json:"participants,omitempty"`
}

func (m *TransactionMetadata) Reset()                    { *m = TransactionMetadata{} }
func (m *TransactionMetadata) String() string            { return proto.CompactTextString(m) }
func (*TransactionMetadata) ProtoMessage()               {}
func (*TransactionMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TransactionMetadata) GetParticipants() []*Target {
	if m != nil {
		return m.Participants
	}
	return nil
}

func init() {
	proto.RegisterType((*Target)(nil), "query.Target")
	proto.RegisterType((*VTGateCallerID)(nil), "query.VTGateCallerID")
	proto.RegisterType((*EventToken)(nil), "query.EventToken")
	proto.RegisterType((*Value)(nil), "query.Value")
	proto.RegisterType((*BindVariable)(nil), "query.BindVariable")
	proto.RegisterType((*BoundQuery)(nil), "query.BoundQuery")
	proto.RegisterType((*ExecuteOptions)(nil), "query.ExecuteOptions")
	proto.RegisterType((*Field)(nil), "query.Field")
	proto.RegisterType((*Row)(nil), "query.Row")
	proto.RegisterType((*ResultExtras)(nil), "query.ResultExtras")
	proto.RegisterType((*QueryResult)(nil), "query.QueryResult")
	proto.RegisterType((*StreamEvent)(nil), "query.StreamEvent")
	proto.RegisterType((*StreamEvent_Statement)(nil), "query.StreamEvent.Statement")
	proto.RegisterType((*ExecuteRequest)(nil), "query.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "query.ExecuteResponse")
	proto.RegisterType((*ExecuteBatchRequest)(nil), "query.ExecuteBatchRequest")
	proto.RegisterType((*ExecuteBatchResponse)(nil), "query.ExecuteBatchResponse")
	proto.RegisterType((*StreamExecuteRequest)(nil), "query.StreamExecuteRequest")
	proto.RegisterType((*StreamExecuteResponse)(nil), "query.StreamExecuteResponse")
	proto.RegisterType((*BeginRequest)(nil), "query.BeginRequest")
	proto.RegisterType((*BeginResponse)(nil), "query.BeginResponse")
	proto.RegisterType((*CommitRequest)(nil), "query.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "query.CommitResponse")
	proto.RegisterType((*RollbackRequest)(nil), "query.RollbackRequest")
	proto.RegisterType((*RollbackResponse)(nil), "query.RollbackResponse")
	proto.RegisterType((*BeginExecuteRequest)(nil), "query.BeginExecuteRequest")
	proto.RegisterType((*BeginExecuteResponse)(nil), "query.BeginExecuteResponse")
	proto.RegisterType((*BeginExecuteBatchRequest)(nil), "query.BeginExecuteBatchRequest")
	proto.RegisterType((*BeginExecuteBatchResponse)(nil), "query.BeginExecuteBatchResponse")
	proto.RegisterType((*SplitQueryRequest)(nil), "query.SplitQueryRequest")
	proto.RegisterType((*QuerySplit)(nil), "query.QuerySplit")
	proto.RegisterType((*SplitQueryResponse)(nil), "query.SplitQueryResponse")
	proto.RegisterType((*StreamHealthRequest)(nil), "query.StreamHealthRequest")
	proto.RegisterType((*RealtimeStats)(nil), "query.RealtimeStats")
	proto.RegisterType((*StreamHealthResponse)(nil), "query.StreamHealthResponse")
	proto.RegisterType((*UpdateStreamRequest)(nil), "query.UpdateStreamRequest")
	proto.RegisterType((*UpdateStreamResponse)(nil), "query.UpdateStreamResponse")
	proto.RegisterType((*TransactionMetadata)(nil), "query.TransactionMetadata")
	proto.RegisterEnum("query.Flag", Flag_name, Flag_value)
	proto.RegisterEnum("query.Type", Type_name, Type_value)
	proto.RegisterEnum("query.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("query.StreamEvent_Statement_Category", StreamEvent_Statement_Category_name, StreamEvent_Statement_Category_value)
	proto.RegisterEnum("query.SplitQueryRequest_Algorithm", SplitQueryRequest_Algorithm_name, SplitQueryRequest_Algorithm_value)
}

func init() { proto.RegisterFile("query.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x59, 0x5b, 0x6f, 0x1b, 0xc7,
	0x15, 0xf6, 0xf2, 0x26, 0xf2, 0x50, 0x94, 0x47, 0x43, 0xb9, 0x61, 0x15, 0xb7, 0x71, 0x37, 0x71,
	0xa2, 0xda, 0x2e, 0xeb, 0xd0, 0xaa, 0x6b, 0xa4, 0x69, 0x6b, 0x92, 0xa2, 0x1c, 0xc2, 0x14, 0x45,
	0x0f, 0x97, 0x6a, 0x5d, 0x04, 0x58, 0x8c, 0xc8, 0xb1, 0xb4, 0xd0, 0x72, 0x77, 0xbd, 0x3b, 0x94,
	0xcc, 0x37, 0x37, 0xbd, 0xdf, 0x53, 0xf4, 0x92, 0x5e, 0x80, 0xb4, 0x40, 0x7f, 0x42, 0x9f, 0x0b,
	0x14, 0xfd, 0x01, 0x05, 0xfa, 0x23, 0x8a, 0xa2, 0x4f, 0xed, 0x2f, 0x28, 0x8a, 0x99, 0x9d, 0x5d,
	0x2e, 0x65, 0x3a, 0x76, 0xf2, 0xe6, 0x24, 0x4f, 0x9a, 0x39, 0xe7, 0x9b, 0x73, 0x3f, 0x67, 0x96,
	0x23, 0x28, 0xde, 0x9f, 0x30, 0x7f, 0x5a, 0xf5, 0x7c, 0x97, 0xbb, 0x38, 0x2b, 0x37, 0xeb, 0x2b,
	0xdc, 0xf5, 0xdc, 0x11, 0xe5, 0x34, 0x24, 0xaf, 0x17, 0x8f, 0xb9, 0xef, 0x0d, 0xc3, 0x8d, 0x7e,
	0x1f, 0x72, 0x06, 0xf5, 0x0f, 0x18, 0xc7, 0xeb, 0x90, 0x3f, 0x62, 0xd3, 0xc0, 0xa3, 0x43, 0x56,
	0xd1, 0x2e, 0x68, 0x1b, 0x05, 0x12, 0xef, 0xf1, 0x1a, 0x64, 0x83, 0x43, 0xea, 0x8f, 0x2a, 0x29,
	0xc9, 0x08, 0x37, 0xf8, 0x0b, 0x50, 0xe4, 0x74, 0xdf, 0x66, 0xdc, 0xe4, 0x53, 0x8f, 0x55, 0xd2,
	0x17, 0xb4, 0x8d, 0x95, 0xda, 0x5a, 0x35, 0x56, 0x67, 0x48, 0xa6, 0x31, 0xf5, 0x18, 0x01, 0x1e,
	0xaf, 0xf5, 0x2b, 0xb0, 0xb2, 0x67, 0xdc, 0xa2, 0x9c, 0x35, 0xa9, 0x6d, 0x33, 0xbf, 0xbd, 0x25,
	0x54, 0x4f, 0x02, 0xe6, 0x3b, 0x74, 0x1c, 0xab, 0x8e, 0xf6, 0xfa, 0x9b, 0x00, 0xad, 0x63, 0xe6,
	0x70, 0xc3, 0x3d, 0x62, 0x0e, 0x3e, 0x0f, 0x05, 0x6e, 0x8d, 0x59, 0xc0, 0xe9, 0xd8, 0x93, 0xd0,
	0x34, 0x99, 0x11, 0x1e, 0x63, 0xe6, 0x3a, 0xe4, 0x3d, 0x37, 0xb0, 0xb8, 0xe5, 0x3a, 0xd2, 0xc6,
	0x02, 0x89, 0xf7, 0xfa, 0x57, 0x20, 0xbb, 0x47, 0xed, 0x09, 0xc3, 0x2f, 0x40, 0x46, 0x3a, 0xa1,
	0x49, 0x27, 0x8a, 0xd5, 0x30, 0x8e, 0xd2, 0x76, 0xc9, 0x10, 0xb2, 0x8f, 0x05, 0x52, 0xca, 0x5e,
	0x26, 0xe1, 0x46, 0x3f, 0x82, 0xe5, 0x86, 0xe5, 0x8c, 0xf6, 0xa8, 0x6f, 0x09, 0x07, 0x3f, 0xa0,
	0x18, 0xfc, 0x12, 0xe4, 0xe4, 0x22, 0xa8, 0xa4, 0x2f, 0xa4, 0x37, 0x8a, 0xb5, 0x65, 0x75, 0x50,
	0xda, 0x46, 0x14, 0x4f, 0xff, 0x9b, 0x06, 0xd0, 0x70, 0x27, 0xce, 0xe8, 0x8e, 0x60, 0x62, 0x04,
	0xe9, 0xe0, 0xbe, 0xad, 0x02, 0x26, 0x96, 0xf8, 0x36, 0xac, 0xec, 0x5b, 0xce, 0xc8, 0x3c, 0x56,
	0xe6, 0x04, 0x95, 0x94, 0x14, 0xf7, 0x92, 0x12, 0x37, 0x3b, 0x5c, 0x4d, 0x5a, 0x1d, 0xb4, 0x1c,
	0xee, 0x4f, 0x49, 0x69, 0x3f, 0x49, 0x5b, 0x1f, 0x00, 0x7e, 0x14, 0x24, 0x94, 0x1e, 0xb1, 0x69,
	0xa4, 0xf4, 0x88, 0x4d, 0xf1, 0x67, 0x93, 0x1e, 0x15, 0x6b, 0xe5, 0x48, 0x57, 0xe2, 0xac, 0x72,
	0xf3, 0xb5, 0xd4, 0x0d, 0x4d, 0xff, 0xb3, 0x06, 0x2b, 0xad, 0x07, 0x6c, 0x38, 0xe1, 0x6c, 0xd7,
	0x13, 0x39, 0x08, 0x70, 0x15, 0xca, 0xec, 0xc1, 0xd0, 0x9e, 0x8c, 0x98, 0x79, 0xcf, 0x62, 0xf6,
	0xc8, 0x14, 0x89, 0x0f, 0xa4, 0x8e, 0x3c, 0x59, 0x55, 0xac, 0x6d, 0xc1, 0xe9, 0x0a, 0x86, 0xc0,
	0x5b, 0x4e, 0x88, 0x67, 0xa2, 0x34, 0x4c, 0x2e, 0x6a, 0x43, 0xea, 0xcf, 0x93, 0x55, 0xc5, 0x4a,
	0x14, 0x4d, 0x1d, 0xca, 0x43, 0x77, 0xec, 0x51, 0x7f, 0x1e, 0x9f, 0x96, 0xf6, 0xae, 0x2a, 0x7b,
	0x67, 0x78, 0xb2, 0xaa, 0xd0, 0x33, 0x92, 0xfe, 0x3a, 0x64, 0xa5, 0x01, 0x18, 0x43, 0x26, 0x51,
	0xa6, 0x72, 0x1d, 0x27, 0x3d, 0xf5, 0x98, 0xa4, 0xeb, 0x5f, 0x84, 0x34, 0x71, 0x4f, 0x70, 0x05,
	0x96, 0x6c, 0xe6, 0x1c, 0xf0, 0x43, 0xe1, 0x5b, 0x7a, 0x03, 0x93, 0x68, 0x8b, 0x3f, 0x11, 0xe7,
	0x3f, 0x2c, 0x8b, 0x28, 0xe3, 0x6f, 0xc2, 0x32, 0x61, 0xc1, 0xc4, 0xe6, 0xad, 0x07, 0xdc, 0xa7,
	0x01, 0xae, 0x41, 0x31, 0xe9, 0x81, 0xf6, 0x38, 0x0f, 0x80, 0xcd, 0xbc, 0xaf, 0xc0, 0xd2, 0x3d,
	0x9f, 0x05, 0x87, 0xcc, 0x57, 0x11, 0x8a, 0xb6, 0xa2, 0x9e, 0x8a, 0xb2, 0x1a, 0x42, 0x1d, 0xa2,
	0x0a, 0x65, 0xfc, 0x43, 0xf3, 0x66, 0x55, 0x28, 0x3d, 0x27, 0x8a, 0x87, 0x5f, 0x84, 0x92, 0xef,
	0x9e, 0x04, 0x26, 0xbd, 0x77, 0x8f, 0x0d, 0x39, 0x0b, 0x9b, 0x2d, 0x43, 0x96, 0x05, 0xb1, 0xae,
	0x68, 0xf8, 0x79, 0x28, 0x58, 0x4e, 0xc0, 0x7c, 0x6e, 0x5a, 0x23, 0x19, 0xe8, 0x0c, 0xc9, 0x87,
	0x84, 0xf6, 0x08, 0x7f, 0x1a, 0x32, 0x02, 0x5c, 0xc9, 0x48, 0x2d, 0xa0, 0xb4, 0x10, 0xf7, 0x84,
	0x48, 0x3a, 0xbe, 0x0c, 0x39, 0x26, 0xfd, 0xad, 0x64, 0xe7, 0x4a, 0x2a, 0x19, 0x0a, 0xa2, 0x20,
	0xfa, 0x1f, 0xd3, 0x50, 0xec, 0x73, 0x9f, 0xd1, 0xb1, 0xf4, 0x1f, 0xbf, 0x0e, 0x10, 0x70, 0xca,
	0xd9, 0x98, 0x39, 0x3c, 0x72, 0xe4, 0xbc, 0x12, 0x90, 0xc0, 0x55, 0xfb, 0x11, 0x88, 0x24, 0xf0,
	0xa7, 0x03, 0x9c, 0x7a, 0x8a, 0x00, 0xaf, 0xbf, 0x9b, 0x82, 0x42, 0x2c, 0x0d, 0xd7, 0x21, 0x3f,
	0xa4, 0x9c, 0x1d, 0xb8, 0xfe, 0x54, 0x4d, 0x81, 0x8b, 0xef, 0xa5, 0xbd, 0xda, 0x54, 0x60, 0x12,
	0x1f, 0xc3, 0x9f, 0x82, 0x70, 0x5c, 0xca, 0x3e, 0x50, 0xb3, 0xac, 0x20, 0x29, 0xa2, 0xfe, 0xf1,
	0x6b, 0x80, 0x3d, 0xdf, 0x1a, 0x53, 0x7f, 0x6a, 0x1e, 0xb1, 0xa9, 0xa9, 0x52, 0x96, 0x5e, 0x90,
	0x32, 0xa4, 0x70, 0xb7, 0xd9, 0x74, 0x3b, 0x4c, 0xde, 0x8d, 0xf9, 0xb3, 0xaa, 0xe8, 0x1e, 0x4d,
	0x44, 0xe2, 0xa4, 0x9c, 0x41, 0x41, 0x34, 0x6d, 0xb2, 0xb2, 0x3e, 0xc5, 0x52, 0x7f, 0x05, 0xf2,
	0x91, 0xf1, 0xb8, 0x00, 0xd9, 0x96, 0xef, 0xbb, 0x3e, 0x3a, 0x83, 0x97, 0x20, 0xbd, 0xb5, 0xd3,
	0x41, 0x9a, 0x5c, 0x6c, 0x75, 0x50, 0x4a, 0xff, 0x6b, 0x2a, 0x6e, 0x79, 0xc2, 0xee, 0x4f, 0x58,
	0xc0, 0xf1, 0x57, 0xa1, 0xcc, 0x64, 0xad, 0x58, 0xc7, 0xcc, 0x1c, 0xca, 0x7b, 0x40, 0x54, 0x4a,
	0x58, 0xd0, 0x67, 0xab, 0xe1, 0x0d, 0x15, 0xdd, 0x0f, 0x64, 0x35, 0xc6, 0x2a, 0xd2, 0x08, 0xb7,
	0xa0, 0x6c, 0x8d, 0xc7, 0x6c, 0x64, 0x51, 0x9e, 0x14, 0x10, 0x26, 0xec, 0x5c, 0x34, 0x3e, 0xe7,
	0xae, 0x19, 0xb2, 0x1a, 0x9f, 0x88, 0xc5, 0x5c, 0x84, 0x1c, 0x97, 0xd7, 0x9f, 0x9a, 0x06, 0xa5,
	0xa8, 0x79, 0x25, 0x91, 0x28, 0x26, 0x7e, 0x05, 0xc2, 0xbb, 0xb4, 0x92, 0x99, 0x2b, 0x88, 0xd9,
	0x3c, 0x25, 0x21, 0x1f, 0x5f, 0x84, 0x15, 0xee, 0x53, 0x27, 0xa0, 0x43, 0x31, 0xda, 0x84, 0x45,
	0x59, 0x79, 0x49, 0x95, 0x12, 0xd4, 0xf6, 0x08, 0x7f, 0x1e, 0x96, 0xdc, 0x70, 0xf8, 0x55, 0x72,
	0x73, 0x16, 0xcf, 0x4f, 0x46, 0x12, 0xa1, 0xf4, 0x2f, 0xc3, 0xd9, 0x38, 0x82, 0x81, 0xe7, 0x3a,
	0x01, 0xc3, 0x97, 0x20, 0xe7, 0xcb, 0x86, 0x50, 0x51, 0xc3, 0x4a, 0x44, 0xa2, 0xa3, 0x89, 0x42,
	0xe8, 0xff, 0x4d, 0x41, 0x59, 0x9d, 0x6f, 0x50, 0x3e, 0x3c, 0x7c, 0x46, 0xd3, 0x70, 0x19, 0x96,
	0x04, 0xdd, 0x8a, 0x4b, 0x76, 0x41, 0x22, 0x22, 0x84, 0x48, 0x05, 0x0d, 0xcc, 0x44, 0xdc, 0x65,
	0x2a, 0xf2, 0xa4, 0x44, 0x03, 0x63, 0x46, 0x5c, 0x90, 0xb1, 0xdc, 0x13, 0x32, 0xb6, 0xf4, 0x54,
	0x19, 0xdb, 0x82, 0xb5, 0xf9, 0x88, 0xab, 0xb4, 0x5d, 0x81, 0xa5, 0x30, 0x29, 0xd1, 0x70, 0x5a,
	0x94, 0xb7, 0x08, 0xa2, 0xff, 0x21, 0x05, 0x6b, 0x6a, 0x6e, 0x7c, 0x34, 0x1a, 0x28, 0x11, 0xe7,
	0xec, 0x53, 0xc5, 0xb9, 0x09, 0xe7, 0x4e, 0x05, 0xe8, 0x03, 0xf4, 0xc7, 0x5f, 0x34, 0x58, 0x6e,
	0xb0, 0x03, 0xcb, 0x79, 0x36, 0xc3, 0xab, 0x5f, 0x87, 0x92, 0x32, 0x5f, 0x39, 0xff, 0x68, 0x55,
	0x6b, 0x0b, 0xaa, 0x5a, 0xff, 0xa7, 0x06, 0xa5, 0xa6, 0x3b, 0x1e, 0x5b, 0xfc, 0x19, 0xad, 0xab,
	0x47, 0xfd, 0xcc, 0x2c, 0xf2, 0x13, 0xc1, 0x4a, 0xe4, 0x66, 0x18, 0x20, 0xfd, 0x5f, 0x1a, 0x9c,
	0x25, 0xae, 0x6d, 0xef, 0xd3, 0xe1, 0xd1, 0x87, 0xdb, 0x77, 0x0c, 0x68, 0xe6, 0xa8, 0xf2, 0xfe,
	0xdd, 0x14, 0x94, 0x65, 0xc1, 0x7c, 0x3c, 0x55, 0x16, 0x4f, 0x95, 0xb7, 0x35, 0x58, 0x9b, 0x0f,
	0x50, 0xdc, 0x58, 0x59, 0x26, 0x3e, 0x74, 0x4e, 0xc5, 0x84, 0xf4, 0x9a, 0xf2, 0xfb, 0x87, 0x84,
	0xdc, 0xc4, 0xf0, 0x49, 0x3d, 0x69, 0xf8, 0x2c, 0xc8, 0x63, 0x7a, 0x51, 0x1e, 0xff, 0x9e, 0x82,
	0x4a, 0xd2, 0xa4, 0x8f, 0x2f, 0xf2, 0xf9, 0x8b, 0xfc, 0x7d, 0x7f, 0x53, 0xbd, 0xa3, 0xc1, 0x27,
	0x17, 0x04, 0xf4, 0xfd, 0x25, 0x3a, 0x71, 0x9d, 0xa7, 0x9e, 0x78, 0x9d, 0x3f, 0x6d, 0xaa, 0xdf,
	0xca, 0xc0, 0x6a, 0xdf, 0xb3, 0x2d, 0xae, 0x84, 0x7c, 0xb8, 0x9b, 0xf3, 0x33, 0xb0, 0x1c, 0x08,
	0x67, 0xcd, 0xa1, 0x6b, 0x4f, 0xc6, 0x22, 0xbb, 0xe9, 0x8d, 0x02, 0x29, 0x4a, 0x5a, 0x53, 0x92,
	0xf0, 0x0b, 0x50, 0x8c, 0x20, 0x13, 0x87, 0xab, 0x2f, 0x34, 0x50, 0x88, 0x89, 0xc3, 0xf1, 0x26,
	0x3c, 0xe7, 0x4c, 0xc6, 0xa6, 0xfc, 0x61, 0xea, 0x31, 0xdf, 0x94, 0x92, 0x4d, 0x8f, 0xfa, 0xbc,
	0x92, 0x97, 0xe0, 0xb2, 0x33, 0x19, 0x13, 0xf7, 0x24, 0xe8, 0x31, 0x5f, 0x2a, 0xef, 0x51, 0x9f,
	0xe3, 0x9b, 0x50, 0xa0, 0xf6, 0x81, 0xeb, 0x5b, 0xfc, 0x70, 0x5c, 0x29, 0xc8, 0x1f, 0x6b, 0x7a,
	0xf4, 0x63, 0xed, 0x74, 0xf8, 0xab, 0xf5, 0x08, 0x49, 0x66, 0x87, 0xf0, 0x65, 0xc0, 0x93, 0x80,
	0x99, 0xa1, 0x71, 0xa1, 0xd2, 0xe3, 0x5a, 0x05, 0x64, 0x7d, 0x9e, 0x9d, 0x04, 0x6c, 0x26, 0x66,
	0xaf, 0xa6, 0x5f, 0x81, 0x42, 0x2c, 0x04, 0x23, 0x58, 0x6e, 0xdd, 0x19, 0xd4, 0x3b, 0x66, 0xbf,
	0xd7, 0x69, 0x1b, 0x7d, 0x74, 0x06, 0x97, 0xa0, 0xb0, 0x3d, 0xe8, 0x74, 0xcc, 0x7e, 0xb3, 0xde,
	0x45, 0x9a, 0x4e, 0x00, 0xe4, 0x41, 0x29, 0x62, 0x16, 0x4d, 0xed, 0x09, 0xd1, 0x7c, 0x1e, 0x0a,
	0xbe, 0x7b, 0xa2, 0x02, 0x95, 0x92, 0xbe, 0xe7, 0x7d, 0xf7, 0x44, 0x86, 0x49, 0xaf, 0x03, 0x4e,
	0x3a, 0xa6, 0x4a, 0x3d, 0xd1, 0x8d, 0xda, 0x5c, 0x37, 0xce, 0xf4, 0xc7, 0xdd, 0xa8, 0x9f, 0x83,
	0x72, 0xf8, 0xbd, 0xf5, 0x06, 0xa3, 0x36, 0x8f, 0x06, 0x90, 0xfe, 0xa7, 0x14, 0x94, 0x88, 0xa0,
	0x58, 0x63, 0x26, 0x7e, 0xdc, 0x06, 0x22, 0xad, 0x87, 0x12, 0x62, 0xce, 0xfa, 0xa8, 0x40, 0x8a,
	0x21, 0x4d, 0xf6, 0x10, 0xae, 0xc1, 0xb9, 0x80, 0x0d, 0x5d, 0x67, 0x14, 0x98, 0xfb, 0xec, 0xd0,
	0x72, 0x46, 0xe6, 0x98, 0x06, 0x5c, 0x3d, 0x54, 0x94, 0x48, 0x59, 0x31, 0x1b, 0x92, 0xb7, 0x23,
	0x59, 0xf8, 0x2a, 0xac, 0xed, 0x5b, 0x8e, 0xed, 0x1e, 0x98, 0x9e, 0x4d, 0xa7, 0xcc, 0x0f, 0x94,
	0xab, 0xa2, 0x16, 0xb3, 0x04, 0x87, 0xbc, 0x5e, 0xc8, 0x0a, 0x6b, 0xe3, 0x1b, 0x70, 0x69, 0xa1,
	0x16, 0xf3, 0x9e, 0x65, 0x73, 0xe6, 0xb3, 0x91, 0xe9, 0x33, 0xcf, 0xb6, 0x86, 0x54, 0xce, 0x96,
	0xf0, 0x0e, 0x7d, 0x79, 0x81, 0xea, 0x6d, 0x05, 0x27, 0x33, 0xb4, 0x88, 0xf6, 0xd0, 0x9b, 0x98,
	0x93, 0x80, 0x1e, 0x30, 0x39, 0x96, 0x34, 0x92, 0x1f, 0x7a, 0x93, 0x81, 0xd8, 0x8b, 0x9f, 0xcc,
	0xf7, 0xbd, 0x70, 0x1a, 0x69, 0x44, 0x2c, 0xf5, 0x7f, 0x6b, 0xd1, 0xe7, 0x7c, 0x14, 0xbd, 0x78,
	0xda, 0x44, 0x3d, 0xa5, 0xbd, 0x57, 0x4f, 0x55, 0x60, 0x29, 0x60, 0xfe, 0xb1, 0xe5, 0x1c, 0x44,
	0x6f, 0x39, 0x6a, 0x8b, 0xfb, 0xf0, 0xb2, 0x7a, 0x8b, 0x65, 0x0f, 0x38, 0xf3, 0x1d, 0x6a, 0xdb,
	0x53, 0xe1, 0x17, 0xf5, 0x99, 0xc3, 0xd9, 0xc8, 0x9c, 0xbd, 0x9a, 0x86, 0x13, 0xe7, 0xc5, 0x10,
	0xdd, 0x8a, 0xc1, 0x24, 0xc6, 0x1a, 0xf1, 0x7b, 0xea, 0x97, 0x60, 0xc5, 0x57, 0x39, 0x35, 0x03,
	0x91, 0x54, 0xd5, 0xcb, 0x6b, 0xf1, 0x83, 0x4c, 0x22, 0xe1, 0xa4, 0xe4, 0x27, 0xb7, 0xfa, 0xff,
	0x34, 0x28, 0x0f, 0xbc, 0x11, 0xe5, 0x2c, 0xf4, 0xf8, 0x19, 0x1d, 0x63, 0xc9, 0xd7, 0xe3, 0xcc,
	0xfc, 0xeb, 0xf1, 0xfc, 0x6b, 0x74, 0xf6, 0xd4, 0x6b, 0xb4, 0x7e, 0x13, 0xd6, 0xe6, 0xfd, 0x57,
	0xb9, 0xde, 0x80, 0xac, 0x7c, 0x3d, 0x3a, 0xf5, 0xbb, 0x24, 0xf1, 0x3c, 0x44, 0x42, 0x80, 0xfe,
	0x0f, 0x0d, 0xca, 0x89, 0x2b, 0x6e, 0x87, 0x71, 0x3a, 0xa2, 0x9c, 0x62, 0x0c, 0x99, 0x11, 0x57,
	0x31, 0x2b, 0x10, 0xb9, 0xc6, 0x9f, 0x83, 0xac, 0x7c, 0xc7, 0x52, 0xaf, 0x90, 0xcf, 0x45, 0xde,
	0xcc, 0x8e, 0xcb, 0x37, 0x27, 0x12, 0xa2, 0x44, 0x77, 0xca, 0xb4, 0x0e, 0x7d, 0x46, 0x39, 0x8b,
	0xee, 0xa1, 0xa2, 0xa0, 0x35, 0x43, 0x52, 0x0c, 0x99, 0x48, 0x27, 0xa2, 0xaf, 0x4b, 0x09, 0x09,
	0xfd, 0x1a, 0xe1, 0x57, 0x61, 0x59, 0xcc, 0x58, 0x6b, 0x68, 0x79, 0xd4, 0xe1, 0x81, 0x1c, 0xdd,
	0x8f, 0x44, 0x72, 0x0e, 0x72, 0xe9, 0x08, 0x32, 0xdb, 0x36, 0x3d, 0xc0, 0x79, 0xc8, 0x74, 0x77,
	0xbb, 0x2d, 0x74, 0x06, 0x9f, 0x05, 0x68, 0xf7, 0xdb, 0x5d, 0xa3, 0x75, 0x8b, 0xd4, 0x3b, 0xe8,
	0x61, 0x2a, 0x24, 0x0c, 0xba, 0xfd, 0xf6, 0xad, 0x6e, 0x6b, 0x0b, 0x3d, 0xcc, 0xe0, 0x65, 0x58,
	0x6a, 0xf7, 0xb7, 0x3b, 0xbb, 0x75, 0x03, 0x3d, 0xcc, 0xe3, 0x12, 0xe4, 0xdb, 0xfd, 0x3b, 0x83,
	0x5d, 0x43, 0x30, 0x11, 0x2e, 0x42, 0xae, 0xdd, 0x37, 0x5a, 0x5f, 0x37, 0xd0, 0xc3, 0x0b, 0x21,
	0xaf, 0xd1, 0xee, 0xd6, 0xc9, 0x5d, 0xf4, 0xf0, 0xe6, 0xa5, 0xff, 0xa4, 0x20, 0x63, 0x4c, 0x3d,
	0x26, 0x66, 0x6b, 0x57, 0xcc, 0x56, 0xe3, 0x6e, 0x4f, 0xa8, 0x2c, 0x40, 0xa6, 0xdd, 0x35, 0x6e,
	0xa0, 0x6f, 0xa6, 0x30, 0x40, 0x76, 0x20, 0xd7, 0x6f, 0xe5, 0xc4, 0xba, 0xdd, 0x35, 0x5e, 0xbd,
	0x8e, 0xbe, 0x95, 0x12, 0x62, 0x07, 0xe1, 0xe6, 0xdb, 0x11, 0xa3, 0xb6, 0x89, 0xbe, 0x13, 0x33,
	0x6a, 0x9b, 0xe8, 0xbb, 0x11, 0xe3, 0x5a, 0x0d, 0x7d, 0x2f, 0x66, 0x5c, 0xab, 0xa1, 0xef, 0x47,
	0x8c, 0xeb, 0x9b, 0xe8, 0x07, 0x31, 0xe3, 0xfa, 0x26, 0xfa, 0x61, 0x4e, 0xf8, 0x22, 0x3d, 0xb9,
	0x56, 0x43, 0x3f, 0xca, 0xc7, 0xbb, 0xeb, 0x9b, 0xe8, 0xc7, 0x79, 0xbc, 0x02, 0x05, 0xa3, 0xbd,
	0xd3, 0xea, 0x1b, 0xf5, 0x9d, 0x1e, 0xfa, 0x09, 0x12, 0x66, 0x6e, 0xd5, 0x8d, 0x16, 0xfa, 0xa9,
	0x5c, 0x0a, 0x16, 0xfa, 0x19, 0x12, 0x3e, 0x0a, 0xaa, 0xdc, 0xbe, 0x2d, 0x39, 0x77, 0x5b, 0x75,
	0x82, 0x7e, 0x9e, 0xc3, 0x45, 0x58, 0xda, 0x6a, 0x35, 0xdb, 0x3b, 0xf5, 0x0e, 0xc2, 0xf2, 0x84,
	0x88, 0xca, 0x2f, 0xae, 0x8a, 0x65, 0xa3, 0xb3, 0xdb, 0x40, 0xbf, 0xec, 0x09, 0x85, 0x7b, 0x75,
	0xd2, 0x7c, 0xa3, 0x4e, 0xd0, 0xaf, 0xae, 0x0a, 0x85, 0x7b, 0x75, 0xa2, 0xe2, 0xf5, 0xeb, 0x9e,
	0x00, 0x4a, 0xd6, 0x3b, 0x57, 0x85, 0xd1, 0x8a, 0xfe, 0x9b, 0x1e, 0xce, 0x43, 0xba, 0xd1, 0x36,
	0xd0, 0x6f, 0xa5, 0xb6, 0x56, 0x77, 0xb0, 0x83, 0x7e, 0x87, 0x04, 0xb1, 0xdf, 0x32, 0xd0, 0xef,
	0x05, 0x31, 0x6b, 0x0c, 0x7a, 0x9d, 0x16, 0x3a, 0x7f, 0x69, 0x1b, 0xd0, 0xe9, 0x92, 0x13, 0x66,
	0x0d, 0xba, 0xb7, 0xbb, 0xbb, 0x5f, 0xeb, 0xa2, 0x33, 0x62, 0xd3, 0x23, 0xad, 0x5e, 0x9d, 0xb4,
	0x90, 0x86, 0x01, 0x72, 0xcd, 0xdd, 0x9d, 0x9d, 0xb6, 0x81, 0x52, 0x78, 0x19, 0xf2, 0x64, 0xb7,
	0xd3, 0x69, 0xd4, 0x9b, 0xb7, 0x51, 0xba, 0xb1, 0x0e, 0x95, 0xa1, 0x3b, 0xae, 0x4e, 0xdd, 0x09,
	0x9f, 0xec, 0xb3, 0xea, 0xb1, 0xc5, 0x59, 0x10, 0x84, 0xff, 0xb3, 0xda, 0xcf, 0xc9, 0x3f, 0xd7,
	0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x57, 0xc4, 0x48, 0x11, 0xed, 0x1a, 0x00, 0x00,
}
