//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains all the types necessary to make
// RPC calls to Vttablet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: query.proto

package query

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flags sent from the MySQL C API
type MySqlFlag int32

const (
	MySqlFlag_EMPTY                 MySqlFlag = 0
	MySqlFlag_NOT_NULL_FLAG         MySqlFlag = 1
	MySqlFlag_PRI_KEY_FLAG          MySqlFlag = 2
	MySqlFlag_UNIQUE_KEY_FLAG       MySqlFlag = 4
	MySqlFlag_MULTIPLE_KEY_FLAG     MySqlFlag = 8
	MySqlFlag_BLOB_FLAG             MySqlFlag = 16
	MySqlFlag_UNSIGNED_FLAG         MySqlFlag = 32
	MySqlFlag_ZEROFILL_FLAG         MySqlFlag = 64
	MySqlFlag_BINARY_FLAG           MySqlFlag = 128
	MySqlFlag_ENUM_FLAG             MySqlFlag = 256
	MySqlFlag_AUTO_INCREMENT_FLAG   MySqlFlag = 512
	MySqlFlag_TIMESTAMP_FLAG        MySqlFlag = 1024
	MySqlFlag_SET_FLAG              MySqlFlag = 2048
	MySqlFlag_NO_DEFAULT_VALUE_FLAG MySqlFlag = 4096
	MySqlFlag_ON_UPDATE_NOW_FLAG    MySqlFlag = 8192
	MySqlFlag_NUM_FLAG              MySqlFlag = 32768
	MySqlFlag_PART_KEY_FLAG         MySqlFlag = 16384
	MySqlFlag_GROUP_FLAG            MySqlFlag = 32768
	MySqlFlag_UNIQUE_FLAG           MySqlFlag = 65536
	MySqlFlag_BINCMP_FLAG           MySqlFlag = 131072
)

// Enum value maps for MySqlFlag.
var (
	MySqlFlag_name = map[int32]string{
		0:     "EMPTY",
		1:     "NOT_NULL_FLAG",
		2:     "PRI_KEY_FLAG",
		4:     "UNIQUE_KEY_FLAG",
		8:     "MULTIPLE_KEY_FLAG",
		16:    "BLOB_FLAG",
		32:    "UNSIGNED_FLAG",
		64:    "ZEROFILL_FLAG",
		128:   "BINARY_FLAG",
		256:   "ENUM_FLAG",
		512:   "AUTO_INCREMENT_FLAG",
		1024:  "TIMESTAMP_FLAG",
		2048:  "SET_FLAG",
		4096:  "NO_DEFAULT_VALUE_FLAG",
		8192:  "ON_UPDATE_NOW_FLAG",
		32768: "NUM_FLAG",
		16384: "PART_KEY_FLAG",
		// Duplicate value: 32768: "GROUP_FLAG",
		65536:  "UNIQUE_FLAG",
		131072: "BINCMP_FLAG",
	}
	MySqlFlag_value = map[string]int32{
		"EMPTY":                 0,
		"NOT_NULL_FLAG":         1,
		"PRI_KEY_FLAG":          2,
		"UNIQUE_KEY_FLAG":       4,
		"MULTIPLE_KEY_FLAG":     8,
		"BLOB_FLAG":             16,
		"UNSIGNED_FLAG":         32,
		"ZEROFILL_FLAG":         64,
		"BINARY_FLAG":           128,
		"ENUM_FLAG":             256,
		"AUTO_INCREMENT_FLAG":   512,
		"TIMESTAMP_FLAG":        1024,
		"SET_FLAG":              2048,
		"NO_DEFAULT_VALUE_FLAG": 4096,
		"ON_UPDATE_NOW_FLAG":    8192,
		"NUM_FLAG":              32768,
		"PART_KEY_FLAG":         16384,
		"GROUP_FLAG":            32768,
		"UNIQUE_FLAG":           65536,
		"BINCMP_FLAG":           131072,
	}
)

func (x MySqlFlag) Enum() *MySqlFlag {
	p := new(MySqlFlag)
	*p = x
	return p
}

func (x MySqlFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySqlFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[0].Descriptor()
}

func (MySqlFlag) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[0]
}

func (x MySqlFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySqlFlag.Descriptor instead.
func (MySqlFlag) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

// Enum value maps for Flag.
var (
	Flag_name = map[int32]string{
		0:    "NONE",
		256:  "ISINTEGRAL",
		512:  "ISUNSIGNED",
		1024: "ISFLOAT",
		2048: "ISQUOTED",
		4096: "ISTEXT",
		8192: "ISBINARY",
	}
	Flag_value = map[string]int32{
		"NONE":       0,
		"ISINTEGRAL": 256,
		"ISUNSIGNED": 512,
		"ISFLOAT":    1024,
		"ISQUOTED":   2048,
		"ISTEXT":     4096,
		"ISBINARY":   8192,
	}
)

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}

func (x Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[1].Descriptor()
}

func (Flag) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[1]
}

func (x Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flag.Descriptor instead.
func (Flag) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{1}
}

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
	// GEOMETRY specifies a GEOMETRY type.
	// Properties: 29, IsQuoted.
	Type_GEOMETRY Type = 2077
	// JSON specifies a JSON type.
	// Properties: 30, IsQuoted.
	Type_JSON Type = 2078
	// EXPRESSION specifies a SQL expression.
	// This type is for internal use only.
	// Properties: 31, None.
	Type_EXPRESSION Type = 31
	// HEXNUM specifies a HEXNUM type (unquoted varbinary).
	// Properties: 32, IsText.
	Type_HEXNUM Type = 4128
	// HEXVAL specifies a HEXVAL type (unquoted varbinary).
	// Properties: 33, IsText.
	Type_HEXVAL Type = 4129
	// BITNUM specifies a base 2 binary type (unquoted varbinary).
	// Properties: 34, IsText.
	Type_BITNUM Type = 4130
	// VECTOR specifies a VECTOR type
	// Properties: 35, IsQuoted.
	Type_VECTOR Type = 2083
	// RAW specifies a type which won't be quoted but the value used as-is while encoding.
	// Properties: 36, None.
	Type_RAW Type = 2084
	// ROW_TUPLE represents multiple rows.
	// Properties: 37, None.
	Type_ROW_TUPLE Type = 2085
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:     "NULL_TYPE",
		257:   "INT8",
		770:   "UINT8",
		259:   "INT16",
		772:   "UINT16",
		261:   "INT24",
		774:   "UINT24",
		263:   "INT32",
		776:   "UINT32",
		265:   "INT64",
		778:   "UINT64",
		1035:  "FLOAT32",
		1036:  "FLOAT64",
		2061:  "TIMESTAMP",
		2062:  "DATE",
		2063:  "TIME",
		2064:  "DATETIME",
		785:   "YEAR",
		18:    "DECIMAL",
		6163:  "TEXT",
		10260: "BLOB",
		6165:  "VARCHAR",
		10262: "VARBINARY",
		6167:  "CHAR",
		10264: "BINARY",
		2073:  "BIT",
		2074:  "ENUM",
		2075:  "SET",
		28:    "TUPLE",
		2077:  "GEOMETRY",
		2078:  "JSON",
		31:    "EXPRESSION",
		4128:  "HEXNUM",
		4129:  "HEXVAL",
		4130:  "BITNUM",
		2083:  "VECTOR",
		2084:  "RAW",
		2085:  "ROW_TUPLE",
	}
	Type_value = map[string]int32{
		"NULL_TYPE":  0,
		"INT8":       257,
		"UINT8":      770,
		"INT16":      259,
		"UINT16":     772,
		"INT24":      261,
		"UINT24":     774,
		"INT32":      263,
		"UINT32":     776,
		"INT64":      265,
		"UINT64":     778,
		"FLOAT32":    1035,
		"FLOAT64":    1036,
		"TIMESTAMP":  2061,
		"DATE":       2062,
		"TIME":       2063,
		"DATETIME":   2064,
		"YEAR":       785,
		"DECIMAL":    18,
		"TEXT":       6163,
		"BLOB":       10260,
		"VARCHAR":    6165,
		"VARBINARY":  10262,
		"CHAR":       6167,
		"BINARY":     10264,
		"BIT":        2073,
		"ENUM":       2074,
		"SET":        2075,
		"TUPLE":      28,
		"GEOMETRY":   2077,
		"JSON":       2078,
		"EXPRESSION": 31,
		"HEXNUM":     4128,
		"HEXVAL":     4129,
		"BITNUM":     4130,
		"VECTOR":     2083,
		"RAW":        2084,
		"ROW_TUPLE":  2085,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[2].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[2]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{2}
}

type StartCommitState int32

const (
	StartCommitState_Unknown StartCommitState = 0
	StartCommitState_Fail    StartCommitState = 1
	StartCommitState_Success StartCommitState = 2
)

// Enum value maps for StartCommitState.
var (
	StartCommitState_name = map[int32]string{
		0: "Unknown",
		1: "Fail",
		2: "Success",
	}
	StartCommitState_value = map[string]int32{
		"Unknown": 0,
		"Fail":    1,
		"Success": 2,
	}
)

func (x StartCommitState) Enum() *StartCommitState {
	p := new(StartCommitState)
	*p = x
	return p
}

func (x StartCommitState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartCommitState) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[3].Descriptor()
}

func (StartCommitState) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[3]
}

func (x StartCommitState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartCommitState.Descriptor instead.
func (StartCommitState) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{3}
}

// TransactionState represents the state of a distributed transaction.
type TransactionState int32

const (
	TransactionState_UNKNOWN  TransactionState = 0
	TransactionState_PREPARE  TransactionState = 1
	TransactionState_ROLLBACK TransactionState = 2
	TransactionState_COMMIT   TransactionState = 3
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARE",
		2: "ROLLBACK",
		3: "COMMIT",
	}
	TransactionState_value = map[string]int32{
		"UNKNOWN":  0,
		"PREPARE":  1,
		"ROLLBACK": 2,
		"COMMIT":   3,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[4].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[4]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4}
}

// SchemaTableType represents the type of table requested.
type SchemaTableType int32

const (
	SchemaTableType_VIEWS  SchemaTableType = 0
	SchemaTableType_TABLES SchemaTableType = 1
	SchemaTableType_ALL    SchemaTableType = 2
	SchemaTableType_UDFS   SchemaTableType = 3
)

// Enum value maps for SchemaTableType.
var (
	SchemaTableType_name = map[int32]string{
		0: "VIEWS",
		1: "TABLES",
		2: "ALL",
		3: "UDFS",
	}
	SchemaTableType_value = map[string]int32{
		"VIEWS":  0,
		"TABLES": 1,
		"ALL":    2,
		"UDFS":   3,
	}
)

func (x SchemaTableType) Enum() *SchemaTableType {
	p := new(SchemaTableType)
	*p = x
	return p
}

func (x SchemaTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[5].Descriptor()
}

func (SchemaTableType) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[5]
}

func (x SchemaTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaTableType.Descriptor instead.
func (SchemaTableType) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{5}
}

type ExecuteOptions_IncludedFields int32

const (
	ExecuteOptions_TYPE_AND_NAME ExecuteOptions_IncludedFields = 0
	ExecuteOptions_TYPE_ONLY     ExecuteOptions_IncludedFields = 1
	ExecuteOptions_ALL           ExecuteOptions_IncludedFields = 2
)

// Enum value maps for ExecuteOptions_IncludedFields.
var (
	ExecuteOptions_IncludedFields_name = map[int32]string{
		0: "TYPE_AND_NAME",
		1: "TYPE_ONLY",
		2: "ALL",
	}
	ExecuteOptions_IncludedFields_value = map[string]int32{
		"TYPE_AND_NAME": 0,
		"TYPE_ONLY":     1,
		"ALL":           2,
	}
)

func (x ExecuteOptions_IncludedFields) Enum() *ExecuteOptions_IncludedFields {
	p := new(ExecuteOptions_IncludedFields)
	*p = x
	return p
}

func (x ExecuteOptions_IncludedFields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_IncludedFields) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[6].Descriptor()
}

func (ExecuteOptions_IncludedFields) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[6]
}

func (x ExecuteOptions_IncludedFields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_IncludedFields.Descriptor instead.
func (ExecuteOptions_IncludedFields) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 0}
}

type ExecuteOptions_Workload int32

const (
	ExecuteOptions_UNSPECIFIED ExecuteOptions_Workload = 0
	ExecuteOptions_OLTP        ExecuteOptions_Workload = 1
	ExecuteOptions_OLAP        ExecuteOptions_Workload = 2
	ExecuteOptions_DBA         ExecuteOptions_Workload = 3
)

// Enum value maps for ExecuteOptions_Workload.
var (
	ExecuteOptions_Workload_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OLTP",
		2: "OLAP",
		3: "DBA",
	}
	ExecuteOptions_Workload_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OLTP":        1,
		"OLAP":        2,
		"DBA":         3,
	}
)

func (x ExecuteOptions_Workload) Enum() *ExecuteOptions_Workload {
	p := new(ExecuteOptions_Workload)
	*p = x
	return p
}

func (x ExecuteOptions_Workload) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_Workload) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[7].Descriptor()
}

func (ExecuteOptions_Workload) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[7]
}

func (x ExecuteOptions_Workload) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_Workload.Descriptor instead.
func (ExecuteOptions_Workload) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 1}
}

type ExecuteOptions_TransactionIsolation int32

const (
	ExecuteOptions_DEFAULT          ExecuteOptions_TransactionIsolation = 0
	ExecuteOptions_REPEATABLE_READ  ExecuteOptions_TransactionIsolation = 1
	ExecuteOptions_READ_COMMITTED   ExecuteOptions_TransactionIsolation = 2
	ExecuteOptions_READ_UNCOMMITTED ExecuteOptions_TransactionIsolation = 3
	ExecuteOptions_SERIALIZABLE     ExecuteOptions_TransactionIsolation = 4
	// This is not an "official" transaction level but it will do a
	// START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY
	ExecuteOptions_CONSISTENT_SNAPSHOT_READ_ONLY ExecuteOptions_TransactionIsolation = 5
	// This not an "official" transaction level, it will send queries to mysql
	// without wrapping them in a transaction
	ExecuteOptions_AUTOCOMMIT ExecuteOptions_TransactionIsolation = 6
)

// Enum value maps for ExecuteOptions_TransactionIsolation.
var (
	ExecuteOptions_TransactionIsolation_name = map[int32]string{
		0: "DEFAULT",
		1: "REPEATABLE_READ",
		2: "READ_COMMITTED",
		3: "READ_UNCOMMITTED",
		4: "SERIALIZABLE",
		5: "CONSISTENT_SNAPSHOT_READ_ONLY",
		6: "AUTOCOMMIT",
	}
	ExecuteOptions_TransactionIsolation_value = map[string]int32{
		"DEFAULT":                       0,
		"REPEATABLE_READ":               1,
		"READ_COMMITTED":                2,
		"READ_UNCOMMITTED":              3,
		"SERIALIZABLE":                  4,
		"CONSISTENT_SNAPSHOT_READ_ONLY": 5,
		"AUTOCOMMIT":                    6,
	}
)

func (x ExecuteOptions_TransactionIsolation) Enum() *ExecuteOptions_TransactionIsolation {
	p := new(ExecuteOptions_TransactionIsolation)
	*p = x
	return p
}

func (x ExecuteOptions_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[8].Descriptor()
}

func (ExecuteOptions_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[8]
}

func (x ExecuteOptions_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_TransactionIsolation.Descriptor instead.
func (ExecuteOptions_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 2}
}

type ExecuteOptions_PlannerVersion int32

const (
	ExecuteOptions_DEFAULT_PLANNER  ExecuteOptions_PlannerVersion = 0
	ExecuteOptions_V3               ExecuteOptions_PlannerVersion = 1
	ExecuteOptions_Gen4             ExecuteOptions_PlannerVersion = 2
	ExecuteOptions_Gen4Greedy       ExecuteOptions_PlannerVersion = 3
	ExecuteOptions_Gen4Left2Right   ExecuteOptions_PlannerVersion = 4
	ExecuteOptions_Gen4WithFallback ExecuteOptions_PlannerVersion = 5
	ExecuteOptions_Gen4CompareV3    ExecuteOptions_PlannerVersion = 6
	ExecuteOptions_V3Insert         ExecuteOptions_PlannerVersion = 7
)

// Enum value maps for ExecuteOptions_PlannerVersion.
var (
	ExecuteOptions_PlannerVersion_name = map[int32]string{
		0: "DEFAULT_PLANNER",
		1: "V3",
		2: "Gen4",
		3: "Gen4Greedy",
		4: "Gen4Left2Right",
		5: "Gen4WithFallback",
		6: "Gen4CompareV3",
		7: "V3Insert",
	}
	ExecuteOptions_PlannerVersion_value = map[string]int32{
		"DEFAULT_PLANNER":  0,
		"V3":               1,
		"Gen4":             2,
		"Gen4Greedy":       3,
		"Gen4Left2Right":   4,
		"Gen4WithFallback": 5,
		"Gen4CompareV3":    6,
		"V3Insert":         7,
	}
)

func (x ExecuteOptions_PlannerVersion) Enum() *ExecuteOptions_PlannerVersion {
	p := new(ExecuteOptions_PlannerVersion)
	*p = x
	return p
}

func (x ExecuteOptions_PlannerVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_PlannerVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[9].Descriptor()
}

func (ExecuteOptions_PlannerVersion) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[9]
}

func (x ExecuteOptions_PlannerVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_PlannerVersion.Descriptor instead.
func (ExecuteOptions_PlannerVersion) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 3}
}

type ExecuteOptions_Consolidator int32

const (
	ExecuteOptions_CONSOLIDATOR_UNSPECIFIED      ExecuteOptions_Consolidator = 0
	ExecuteOptions_CONSOLIDATOR_DISABLED         ExecuteOptions_Consolidator = 1
	ExecuteOptions_CONSOLIDATOR_ENABLED          ExecuteOptions_Consolidator = 2
	ExecuteOptions_CONSOLIDATOR_ENABLED_REPLICAS ExecuteOptions_Consolidator = 3
)

// Enum value maps for ExecuteOptions_Consolidator.
var (
	ExecuteOptions_Consolidator_name = map[int32]string{
		0: "CONSOLIDATOR_UNSPECIFIED",
		1: "CONSOLIDATOR_DISABLED",
		2: "CONSOLIDATOR_ENABLED",
		3: "CONSOLIDATOR_ENABLED_REPLICAS",
	}
	ExecuteOptions_Consolidator_value = map[string]int32{
		"CONSOLIDATOR_UNSPECIFIED":      0,
		"CONSOLIDATOR_DISABLED":         1,
		"CONSOLIDATOR_ENABLED":          2,
		"CONSOLIDATOR_ENABLED_REPLICAS": 3,
	}
)

func (x ExecuteOptions_Consolidator) Enum() *ExecuteOptions_Consolidator {
	p := new(ExecuteOptions_Consolidator)
	*p = x
	return p
}

func (x ExecuteOptions_Consolidator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_Consolidator) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[10].Descriptor()
}

func (ExecuteOptions_Consolidator) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[10]
}

func (x ExecuteOptions_Consolidator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_Consolidator.Descriptor instead.
func (ExecuteOptions_Consolidator) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 4}
}

type ExecuteOptions_TransactionAccessMode int32

const (
	ExecuteOptions_CONSISTENT_SNAPSHOT ExecuteOptions_TransactionAccessMode = 0
	ExecuteOptions_READ_WRITE          ExecuteOptions_TransactionAccessMode = 1
	ExecuteOptions_READ_ONLY           ExecuteOptions_TransactionAccessMode = 2
)

// Enum value maps for ExecuteOptions_TransactionAccessMode.
var (
	ExecuteOptions_TransactionAccessMode_name = map[int32]string{
		0: "CONSISTENT_SNAPSHOT",
		1: "READ_WRITE",
		2: "READ_ONLY",
	}
	ExecuteOptions_TransactionAccessMode_value = map[string]int32{
		"CONSISTENT_SNAPSHOT": 0,
		"READ_WRITE":          1,
		"READ_ONLY":           2,
	}
)

func (x ExecuteOptions_TransactionAccessMode) Enum() *ExecuteOptions_TransactionAccessMode {
	p := new(ExecuteOptions_TransactionAccessMode)
	*p = x
	return p
}

func (x ExecuteOptions_TransactionAccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteOptions_TransactionAccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[11].Descriptor()
}

func (ExecuteOptions_TransactionAccessMode) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[11]
}

func (x ExecuteOptions_TransactionAccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteOptions_TransactionAccessMode.Descriptor instead.
func (ExecuteOptions_TransactionAccessMode) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6, 5}
}

// The category of one statement.
type StreamEvent_Statement_Category int32

const (
	StreamEvent_Statement_Error StreamEvent_Statement_Category = 0
	StreamEvent_Statement_DML   StreamEvent_Statement_Category = 1
	StreamEvent_Statement_DDL   StreamEvent_Statement_Category = 2
)

// Enum value maps for StreamEvent_Statement_Category.
var (
	StreamEvent_Statement_Category_name = map[int32]string{
		0: "Error",
		1: "DML",
		2: "DDL",
	}
	StreamEvent_Statement_Category_value = map[string]int32{
		"Error": 0,
		"DML":   1,
		"DDL":   2,
	}
)

func (x StreamEvent_Statement_Category) Enum() *StreamEvent_Statement_Category {
	p := new(StreamEvent_Statement_Category)
	*p = x
	return p
}

func (x StreamEvent_Statement_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEvent_Statement_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[12].Descriptor()
}

func (StreamEvent_Statement_Category) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[12]
}

func (x StreamEvent_Statement_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEvent_Statement_Category.Descriptor instead.
func (StreamEvent_Statement_Category) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{11, 0, 0}
}

// Target describes what the client expects the tablet is.
// If the tablet does not match, an error is returned.
type Target struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Keyspace   string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard      string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletType topodata.TabletType    `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// cell is used for routing queries between vtgate and vttablets. It
	// is not used when Target is part of the Session sent by the client.
	Cell          string `protobuf:"bytes,4,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Target) Reset() {
	*x = Target{}
	mi := &file_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

func (x *Target) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Target) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *Target) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

func (x *Target) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

// VTGateCallerID is sent by VTGate to VTTablet to describe the
// caller. If possible, this information is secure. For instance,
// if using unique certificates that guarantee that VTGate->VTTablet
// traffic cannot be spoofed, then VTTablet can trust this information,
// and VTTablet will use it for tablet ACLs, for instance.
// Because of this security guarantee, this is different than the CallerID
// structure, which is not secure at all, because it is provided
// by the Vitess client.
type VTGateCallerID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Groups        []string               `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VTGateCallerID) Reset() {
	*x = VTGateCallerID{}
	mi := &file_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VTGateCallerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VTGateCallerID) ProtoMessage() {}

func (x *VTGateCallerID) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VTGateCallerID.ProtoReflect.Descriptor instead.
func (*VTGateCallerID) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{1}
}

func (x *VTGateCallerID) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VTGateCallerID) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

// EventToken is a structure that describes a point in time in a
// replication stream on one shard. The most recent known replication
// position can be retrieved from vttablet when executing a query. It
// is also sent with the replication streams from the binlog service.
type EventToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// timestamp is the MySQL timestamp of the statements. Seconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The shard name that applied the statements. Note this is not set when
	// streaming from a vttablet. It is only used on the client -> vtgate link.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// The position on the replication stream after this statement was applied.
	// It is not the transaction ID / GTID, but the position / GTIDSet.
	Position      string `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventToken) Reset() {
	*x = EventToken{}
	mi := &file_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventToken) ProtoMessage() {}

func (x *EventToken) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventToken.ProtoReflect.Descriptor instead.
func (*EventToken) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{2}
}

func (x *EventToken) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventToken) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *EventToken) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

// Value represents a typed value.
type Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{3}
}

func (x *Value) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *Value) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	Value []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values        []*Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindVariable) Reset() {
	*x = BindVariable{}
	mi := &file_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindVariable) ProtoMessage() {}

func (x *BindVariable) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindVariable.ProtoReflect.Descriptor instead.
func (*BindVariable) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4}
}

func (x *BindVariable) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *BindVariable) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BindVariable) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query.
	// nil values are not allowed. Use NULL_TYPE to express a NULL value.
	BindVariables map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables,proto3" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundQuery) Reset() {
	*x = BoundQuery{}
	mi := &file_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundQuery) ProtoMessage() {}

func (x *BoundQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundQuery.ProtoReflect.Descriptor instead.
func (*BoundQuery) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{5}
}

func (x *BoundQuery) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if x != nil {
		return x.BindVariables
	}
	return nil
}

// ExecuteOptions is passed around for all Execute calls.
type ExecuteOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls what fields are returned in Field message responses from mysql, i.e.
	// field name, table name, etc. This is an optimization for high-QPS queries where
	// the client knows what it's getting
	IncludedFields ExecuteOptions_IncludedFields `protobuf:"varint,4,opt,name=included_fields,json=includedFields,proto3,enum=query.ExecuteOptions_IncludedFields" json:"included_fields,omitempty"`
	// client_rows_found specifies if rows_affected should return
	// rows found instead of rows affected. Behavior is defined
	// by MySQL's CLIENT_FOUND_ROWS flag.
	ClientFoundRows bool `protobuf:"varint,5,opt,name=client_found_rows,json=clientFoundRows,proto3" json:"client_found_rows,omitempty"`
	// workload specifies the type of workload:
	// OLTP: DMLs allowed, results have row count limit, and
	// query timeouts are shorter.
	// OLAP: DMLS not allowed, no limit on row count, timeouts
	// can be as high as desired.
	// DBA: no limit on rowcount or timeout, all queries allowed
	// but intended for long DMLs and DDLs.
	Workload ExecuteOptions_Workload `protobuf:"varint,6,opt,name=workload,proto3,enum=query.ExecuteOptions_Workload" json:"workload,omitempty"`
	// sql_select_limit sets an implicit limit on all select statements. Since
	// vitess also sets a rowcount limit on queries, the smallest value wins.
	SqlSelectLimit       int64                               `protobuf:"varint,8,opt,name=sql_select_limit,json=sqlSelectLimit,proto3" json:"sql_select_limit,omitempty"`
	TransactionIsolation ExecuteOptions_TransactionIsolation `protobuf:"varint,9,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=query.ExecuteOptions_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// skip_query_plan_cache specifies if the query plan should be cached by vitess.
	// By default all query plans are cached.
	SkipQueryPlanCache bool `protobuf:"varint,10,opt,name=skip_query_plan_cache,json=skipQueryPlanCache,proto3" json:"skip_query_plan_cache,omitempty"`
	// PlannerVersion specifies which planner to use.
	// If DEFAULT is chosen, whatever vtgate was started with will be used
	PlannerVersion ExecuteOptions_PlannerVersion `protobuf:"varint,11,opt,name=planner_version,json=plannerVersion,proto3,enum=query.ExecuteOptions_PlannerVersion" json:"planner_version,omitempty"`
	// has_created_temp_tables signals whether plans created in this session should be cached or not
	// if the user has created temp tables, Vitess will not reuse plans created for this session in other sessions.
	// The current session can still use other sessions cached plans.
	HasCreatedTempTables bool                        `protobuf:"varint,12,opt,name=has_created_temp_tables,json=hasCreatedTempTables,proto3" json:"has_created_temp_tables,omitempty"`
	Consolidator         ExecuteOptions_Consolidator `protobuf:"varint,13,opt,name=consolidator,proto3,enum=query.ExecuteOptions_Consolidator" json:"consolidator,omitempty"`
	// TransactionAccessMode specifies the access modes to be used while starting the transaction i.e. READ WRITE/READ ONLY/WITH CONSISTENT SNAPSHOT
	// If not specified, the transaction will be started with the default access mode on the connection.
	TransactionAccessMode []ExecuteOptions_TransactionAccessMode `protobuf:"varint,14,rep,packed,name=transaction_access_mode,json=transactionAccessMode,proto3,enum=query.ExecuteOptions_TransactionAccessMode" json:"transaction_access_mode,omitempty"`
	// WorkloadName specifies the name of the workload as indicated in query directives. This is used for instrumentation
	// in metrics and tracing spans.
	WorkloadName string `protobuf:"bytes,15,opt,name=WorkloadName,proto3" json:"WorkloadName,omitempty"`
	// priority specifies the priority of the query, between 0 and 100. This is leveraged by the transaction
	// throttler to determine whether, under resource contention, a query should or should not be throttled.
	Priority string `protobuf:"bytes,16,opt,name=priority,proto3" json:"priority,omitempty"`
	// timeout specifies the query timeout in milliseconds. If not set, the default timeout is used.
	//
	// Types that are valid to be assigned to Timeout:
	//
	//	*ExecuteOptions_AuthoritativeTimeout
	Timeout isExecuteOptions_Timeout `protobuf_oneof:"timeout"`
	// fetch_last_insert_id indicates that after executing a DML involving last_insert_id(x),
	// a subsequent "SELECT last_insert_id()" should be performed to retrieve the updated value.
	// This is to circumvent a bug where setting last_insert_id(x) to zero is not signaled by mysql
	// https://bugs.mysql.com/bug.php?id=116939
	FetchLastInsertId bool `protobuf:"varint,18,opt,name=fetch_last_insert_id,json=fetchLastInsertId,proto3" json:"fetch_last_insert_id,omitempty"`
	// in_dml_execution indicates that the query is being executed as part of a DML execution.
	InDmlExecution bool `protobuf:"varint,19,opt,name=in_dml_execution,json=inDmlExecution,proto3" json:"in_dml_execution,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecuteOptions) Reset() {
	*x = ExecuteOptions{}
	mi := &file_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOptions) ProtoMessage() {}

func (x *ExecuteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOptions.ProtoReflect.Descriptor instead.
func (*ExecuteOptions) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteOptions) GetIncludedFields() ExecuteOptions_IncludedFields {
	if x != nil {
		return x.IncludedFields
	}
	return ExecuteOptions_TYPE_AND_NAME
}

func (x *ExecuteOptions) GetClientFoundRows() bool {
	if x != nil {
		return x.ClientFoundRows
	}
	return false
}

func (x *ExecuteOptions) GetWorkload() ExecuteOptions_Workload {
	if x != nil {
		return x.Workload
	}
	return ExecuteOptions_UNSPECIFIED
}

func (x *ExecuteOptions) GetSqlSelectLimit() int64 {
	if x != nil {
		return x.SqlSelectLimit
	}
	return 0
}

func (x *ExecuteOptions) GetTransactionIsolation() ExecuteOptions_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return ExecuteOptions_DEFAULT
}

func (x *ExecuteOptions) GetSkipQueryPlanCache() bool {
	if x != nil {
		return x.SkipQueryPlanCache
	}
	return false
}

func (x *ExecuteOptions) GetPlannerVersion() ExecuteOptions_PlannerVersion {
	if x != nil {
		return x.PlannerVersion
	}
	return ExecuteOptions_DEFAULT_PLANNER
}

func (x *ExecuteOptions) GetHasCreatedTempTables() bool {
	if x != nil {
		return x.HasCreatedTempTables
	}
	return false
}

func (x *ExecuteOptions) GetConsolidator() ExecuteOptions_Consolidator {
	if x != nil {
		return x.Consolidator
	}
	return ExecuteOptions_CONSOLIDATOR_UNSPECIFIED
}

func (x *ExecuteOptions) GetTransactionAccessMode() []ExecuteOptions_TransactionAccessMode {
	if x != nil {
		return x.TransactionAccessMode
	}
	return nil
}

func (x *ExecuteOptions) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *ExecuteOptions) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ExecuteOptions) GetTimeout() isExecuteOptions_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ExecuteOptions) GetAuthoritativeTimeout() int64 {
	if x != nil {
		if x, ok := x.Timeout.(*ExecuteOptions_AuthoritativeTimeout); ok {
			return x.AuthoritativeTimeout
		}
	}
	return 0
}

func (x *ExecuteOptions) GetFetchLastInsertId() bool {
	if x != nil {
		return x.FetchLastInsertId
	}
	return false
}

func (x *ExecuteOptions) GetInDmlExecution() bool {
	if x != nil {
		return x.InDmlExecution
	}
	return false
}

type isExecuteOptions_Timeout interface {
	isExecuteOptions_Timeout()
}

type ExecuteOptions_AuthoritativeTimeout struct {
	AuthoritativeTimeout int64 `protobuf:"varint,17,opt,name=authoritative_timeout,json=authoritativeTimeout,proto3,oneof"`
}

func (*ExecuteOptions_AuthoritativeTimeout) isExecuteOptions_Timeout() {}

// Field describes a single column returned by a query
type Field struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	// Remaining fields from mysql C API.
	// These fields are only populated when ExecuteOptions.included_fields
	// is set to IncludedFields.ALL.
	Table    string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	OrgTable string `protobuf:"bytes,4,opt,name=org_table,json=orgTable,proto3" json:"org_table,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	OrgName  string `protobuf:"bytes,6,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// column_length is really a uint32. All 32 bits can be used.
	ColumnLength uint32 `protobuf:"varint,7,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// charset is actually a uint16. Only the lower 16 bits are used.
	Charset uint32 `protobuf:"varint,8,opt,name=charset,proto3" json:"charset,omitempty"`
	// decimals is actually a uint8. Only the lower 8 bits are used.
	Decimals uint32 `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// flags is actually a uint16. Only the lower 16 bits are used.
	Flags uint32 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
	// column_type is optionally populated from information_schema.columns
	ColumnType    string `protobuf:"bytes,11,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{7}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *Field) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Field) GetOrgTable() string {
	if x != nil {
		return x.OrgTable
	}
	return ""
}

func (x *Field) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Field) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *Field) GetColumnLength() uint32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *Field) GetCharset() uint32 {
	if x != nil {
		return x.Charset
	}
	return 0
}

func (x *Field) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Field) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Field) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

// Row is a database row.
type Row struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths,proto3" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values        []byte `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{8}
}

func (x *Row) GetLengths() []int64 {
	if x != nil {
		return x.Lengths
	}
	return nil
}

func (x *Row) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

// QueryResult is returned by Execute and ExecuteStream.
//
// As returned by Execute, len(fields) is always equal to len(row)
// (for each row in rows).
//
// As returned by StreamExecute, the first QueryResult has the fields
// set, and subsequent QueryResult have rows set. And as Execute,
// len(QueryResult[0].fields) is always equal to len(row) (for each
// row in rows for each QueryResult in QueryResult[1:]).
type QueryResult struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Fields              []*Field               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	RowsAffected        uint64                 `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
	InsertId            uint64                 `protobuf:"varint,3,opt,name=insert_id,json=insertId,proto3" json:"insert_id,omitempty"`
	Rows                []*Row                 `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Info                string                 `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
	SessionStateChanges string                 `protobuf:"bytes,7,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	InsertIdChanged     bool                   `protobuf:"varint,8,opt,name=insert_id_changed,json=insertIdChanged,proto3" json:"insert_id_changed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	mi := &file_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryResult) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *QueryResult) GetRowsAffected() uint64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *QueryResult) GetInsertId() uint64 {
	if x != nil {
		return x.InsertId
	}
	return 0
}

func (x *QueryResult) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryResult) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *QueryResult) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

func (x *QueryResult) GetInsertIdChanged() bool {
	if x != nil {
		return x.InsertIdChanged
	}
	return false
}

// QueryWarning is used to convey out of band query execution warnings
// by storing in the vtgate.Session
type QueryWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryWarning) Reset() {
	*x = QueryWarning{}
	mi := &file_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWarning) ProtoMessage() {}

func (x *QueryWarning) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWarning.ProtoReflect.Descriptor instead.
func (*QueryWarning) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryWarning) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryWarning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StreamEvent describes a set of transformations that happened as a
// single transactional unit on a server. It is streamed back by the
// Update Stream calls.
type StreamEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The statements in this transaction.
	Statements []*StreamEvent_Statement `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken    *EventToken `protobuf:"bytes,2,opt,name=event_token,json=eventToken,proto3" json:"event_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	mi := &file_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{11}
}

func (x *StreamEvent) GetStatements() []*StreamEvent_Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *StreamEvent) GetEventToken() *EventToken {
	if x != nil {
		return x.EventToken
	}
	return nil
}

// ExecuteRequest is the payload to Execute
type ExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	TransactionId     int64                  `protobuf:"varint,5,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	ReservedId        int64                  `protobuf:"varint,7,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ExecuteRequest) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// ExecuteResponse is the returned value from Execute
type ExecuteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *QueryResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// ResultWithError represents a query response
// in the form of result or error but not both.
// TODO: To be used in ExecuteBatchResponse and BeginExecuteBatchResponse.
type ResultWithError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an query level error, only set if result is unset.
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// result contains the query result, only set if error is unset.
	Result        *QueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultWithError) Reset() {
	*x = ResultWithError{}
	mi := &file_query_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultWithError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultWithError) ProtoMessage() {}

func (x *ResultWithError) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultWithError.ProtoReflect.Descriptor instead.
func (*ResultWithError) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{14}
}

func (x *ResultWithError) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ResultWithError) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute
type StreamExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	TransactionId     int64                  `protobuf:"varint,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ReservedId        int64                  `protobuf:"varint,7,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamExecuteRequest) Reset() {
	*x = StreamExecuteRequest{}
	mi := &file_query_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExecuteRequest) ProtoMessage() {}

func (x *StreamExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExecuteRequest.ProtoReflect.Descriptor instead.
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{15}
}

func (x *StreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *StreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *StreamExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StreamExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StreamExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *StreamExecuteRequest) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// StreamExecuteResponse is the returned value from StreamExecute
type StreamExecuteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *QueryResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExecuteResponse) Reset() {
	*x = StreamExecuteResponse{}
	mi := &file_query_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExecuteResponse) ProtoMessage() {}

func (x *StreamExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExecuteResponse.ProtoReflect.Descriptor instead.
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{16}
}

func (x *StreamExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// BeginRequest is the payload to Begin
type BeginRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BeginRequest) Reset() {
	*x = BeginRequest{}
	mi := &file_query_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginRequest) ProtoMessage() {}

func (x *BeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginRequest.ProtoReflect.Descriptor instead.
func (*BeginRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{17}
}

func (x *BeginRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// BeginResponse is the returned value from Begin
type BeginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId int64                  `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,2,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// The session_state_changes might be set if the transaction is a snapshot transaction
	// and the MySQL implementation supports getting a start gtid on snapshot
	SessionStateChanges string `protobuf:"bytes,3,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BeginResponse) Reset() {
	*x = BeginResponse{}
	mi := &file_query_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginResponse) ProtoMessage() {}

func (x *BeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginResponse.ProtoReflect.Descriptor instead.
func (*BeginResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{18}
}

func (x *BeginResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *BeginResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BeginResponse) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

// CommitRequest is the payload to Commit
type CommitRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_query_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{19}
}

func (x *CommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CommitRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CommitRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// CommitResponse is the returned value from Commit
type CommitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReservedId    int64                  `protobuf:"varint,1,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	mi := &file_query_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{20}
}

func (x *CommitResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// RollbackRequest is the payload to Rollback
type RollbackRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RollbackRequest) Reset() {
	*x = RollbackRequest{}
	mi := &file_query_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRequest) ProtoMessage() {}

func (x *RollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRequest.ProtoReflect.Descriptor instead.
func (*RollbackRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{21}
}

func (x *RollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *RollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *RollbackRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RollbackRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// RollbackResponse is the returned value from Rollback
type RollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReservedId    int64                  `protobuf:"varint,1,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackResponse) Reset() {
	*x = RollbackResponse{}
	mi := &file_query_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackResponse) ProtoMessage() {}

func (x *RollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackResponse.ProtoReflect.Descriptor instead.
func (*RollbackResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{22}
}

func (x *RollbackResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// PrepareRequest is the payload to Prepare
type PrepareRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Dtid              string                 `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	mi := &file_query_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{23}
}

func (x *PrepareRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *PrepareRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *PrepareRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PrepareRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PrepareRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// PrepareResponse is the returned value from Prepare
type PrepareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	mi := &file_query_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{24}
}

// CommitPreparedRequest is the payload to CommitPrepared
type CommitPreparedRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string                 `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CommitPreparedRequest) Reset() {
	*x = CommitPreparedRequest{}
	mi := &file_query_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitPreparedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPreparedRequest) ProtoMessage() {}

func (x *CommitPreparedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPreparedRequest.ProtoReflect.Descriptor instead.
func (*CommitPreparedRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{25}
}

func (x *CommitPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CommitPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CommitPreparedRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CommitPreparedRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// CommitPreparedResponse is the returned value from CommitPrepared
type CommitPreparedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitPreparedResponse) Reset() {
	*x = CommitPreparedResponse{}
	mi := &file_query_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitPreparedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPreparedResponse) ProtoMessage() {}

func (x *CommitPreparedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPreparedResponse.ProtoReflect.Descriptor instead.
func (*CommitPreparedResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{26}
}

// RollbackPreparedRequest is the payload to RollbackPrepared
type RollbackPreparedRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Dtid              string                 `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RollbackPreparedRequest) Reset() {
	*x = RollbackPreparedRequest{}
	mi := &file_query_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackPreparedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackPreparedRequest) ProtoMessage() {}

func (x *RollbackPreparedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackPreparedRequest.ProtoReflect.Descriptor instead.
func (*RollbackPreparedRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{27}
}

func (x *RollbackPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *RollbackPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *RollbackPreparedRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RollbackPreparedRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *RollbackPreparedRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// RollbackPreparedResponse is the returned value from RollbackPrepared
type RollbackPreparedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackPreparedResponse) Reset() {
	*x = RollbackPreparedResponse{}
	mi := &file_query_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackPreparedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackPreparedResponse) ProtoMessage() {}

func (x *RollbackPreparedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackPreparedResponse.ProtoReflect.Descriptor instead.
func (*RollbackPreparedResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{28}
}

// CreateTransactionRequest is the payload to CreateTransaction
type CreateTransactionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string                 `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
	Participants      []*Target              `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	mi := &file_query_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{29}
}

func (x *CreateTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CreateTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CreateTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreateTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

func (x *CreateTransactionRequest) GetParticipants() []*Target {
	if x != nil {
		return x.Participants
	}
	return nil
}

// CreateTransactionResponse is the returned value from CreateTransaction
type CreateTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
	mi := &file_query_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionResponse) ProtoMessage() {}

func (x *CreateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{30}
}

// StartCommitRequest is the payload to StartCommit
type StartCommitRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Dtid              string                 `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StartCommitRequest) Reset() {
	*x = StartCommitRequest{}
	mi := &file_query_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCommitRequest) ProtoMessage() {}

func (x *StartCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCommitRequest.ProtoReflect.Descriptor instead.
func (*StartCommitRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{31}
}

func (x *StartCommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *StartCommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *StartCommitRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StartCommitRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *StartCommitRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// StartCommitResponse is the returned value from StartCommit
type StartCommitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         StartCommitState       `protobuf:"varint,1,opt,name=state,proto3,enum=query.StartCommitState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartCommitResponse) Reset() {
	*x = StartCommitResponse{}
	mi := &file_query_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCommitResponse) ProtoMessage() {}

func (x *StartCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCommitResponse.ProtoReflect.Descriptor instead.
func (*StartCommitResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{32}
}

func (x *StartCommitResponse) GetState() StartCommitState {
	if x != nil {
		return x.State
	}
	return StartCommitState_Unknown
}

// SetRollbackRequest is the payload to SetRollback
type SetRollbackRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Dtid              string                 `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SetRollbackRequest) Reset() {
	*x = SetRollbackRequest{}
	mi := &file_query_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRollbackRequest) ProtoMessage() {}

func (x *SetRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRollbackRequest.ProtoReflect.Descriptor instead.
func (*SetRollbackRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{33}
}

func (x *SetRollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *SetRollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *SetRollbackRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SetRollbackRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SetRollbackRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// SetRollbackResponse is the returned value from SetRollback
type SetRollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRollbackResponse) Reset() {
	*x = SetRollbackResponse{}
	mi := &file_query_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRollbackResponse) ProtoMessage() {}

func (x *SetRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRollbackResponse.ProtoReflect.Descriptor instead.
func (*SetRollbackResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{34}
}

// ConcludeTransactionRequest is the payload to ConcludeTransaction
type ConcludeTransactionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string                 `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConcludeTransactionRequest) Reset() {
	*x = ConcludeTransactionRequest{}
	mi := &file_query_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcludeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcludeTransactionRequest) ProtoMessage() {}

func (x *ConcludeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcludeTransactionRequest.ProtoReflect.Descriptor instead.
func (*ConcludeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{35}
}

func (x *ConcludeTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// ConcludeTransactionResponse is the returned value from ConcludeTransaction
type ConcludeTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcludeTransactionResponse) Reset() {
	*x = ConcludeTransactionResponse{}
	mi := &file_query_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcludeTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcludeTransactionResponse) ProtoMessage() {}

func (x *ConcludeTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcludeTransactionResponse.ProtoReflect.Descriptor instead.
func (*ConcludeTransactionResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{36}
}

// ReadTransactionRequest is the payload to ReadTransaction
type ReadTransactionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string                 `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReadTransactionRequest) Reset() {
	*x = ReadTransactionRequest{}
	mi := &file_query_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTransactionRequest) ProtoMessage() {}

func (x *ReadTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReadTransactionRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{37}
}

func (x *ReadTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReadTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReadTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReadTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// ReadTransactionResponse is the returned value from ReadTransaction
type ReadTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *TransactionMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadTransactionResponse) Reset() {
	*x = ReadTransactionResponse{}
	mi := &file_query_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTransactionResponse) ProtoMessage() {}

func (x *ReadTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTransactionResponse.ProtoReflect.Descriptor instead.
func (*ReadTransactionResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{38}
}

func (x *ReadTransactionResponse) GetMetadata() *TransactionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// UnresolvedTransactionsRequest is the payload to UnresolvedTransactions
type UnresolvedTransactionsRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	AbandonAge        int64                  `protobuf:"varint,4,opt,name=abandon_age,json=abandonAge,proto3" json:"abandon_age,omitempty"` // Unresolved Transactions older than this (in seconds).
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnresolvedTransactionsRequest) Reset() {
	*x = UnresolvedTransactionsRequest{}
	mi := &file_query_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnresolvedTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolvedTransactionsRequest) ProtoMessage() {}

func (x *UnresolvedTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolvedTransactionsRequest.ProtoReflect.Descriptor instead.
func (*UnresolvedTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{39}
}

func (x *UnresolvedTransactionsRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *UnresolvedTransactionsRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *UnresolvedTransactionsRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UnresolvedTransactionsRequest) GetAbandonAge() int64 {
	if x != nil {
		return x.AbandonAge
	}
	return 0
}

// UnresolvedTransactionsResponse is the returned value from UnresolvedTransactions
type UnresolvedTransactionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transactions  []*TransactionMetadata `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnresolvedTransactionsResponse) Reset() {
	*x = UnresolvedTransactionsResponse{}
	mi := &file_query_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnresolvedTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolvedTransactionsResponse) ProtoMessage() {}

func (x *UnresolvedTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolvedTransactionsResponse.ProtoReflect.Descriptor instead.
func (*UnresolvedTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{40}
}

func (x *UnresolvedTransactionsResponse) GetTransactions() []*TransactionMetadata {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// BeginExecuteRequest is the payload to BeginExecute
type BeginExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	ReservedId        int64                  `protobuf:"varint,6,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	PreQueries        []string               `protobuf:"bytes,7,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BeginExecuteRequest) Reset() {
	*x = BeginExecuteRequest{}
	mi := &file_query_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginExecuteRequest) ProtoMessage() {}

func (x *BeginExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginExecuteRequest.ProtoReflect.Descriptor instead.
func (*BeginExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{41}
}

func (x *BeginExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BeginExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BeginExecuteRequest) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *BeginExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

// BeginExecuteResponse is the returned value from BeginExecute
type BeginExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64                 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,4,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// The session_state_changes might be set if the transaction is a snapshot transaction
	// and the MySQL implementation supports getting a start gtid on snapshot
	SessionStateChanges string `protobuf:"bytes,5,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BeginExecuteResponse) Reset() {
	*x = BeginExecuteResponse{}
	mi := &file_query_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginExecuteResponse) ProtoMessage() {}

func (x *BeginExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginExecuteResponse.ProtoReflect.Descriptor instead.
func (*BeginExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{42}
}

func (x *BeginExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BeginExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BeginExecuteResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *BeginExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BeginExecuteResponse) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

// BeginStreamExecuteRequest is the payload to BeginStreamExecute
type BeginStreamExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	PreQueries        []string               `protobuf:"bytes,6,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	ReservedId        int64                  `protobuf:"varint,7,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BeginStreamExecuteRequest) Reset() {
	*x = BeginStreamExecuteRequest{}
	mi := &file_query_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginStreamExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginStreamExecuteRequest) ProtoMessage() {}

func (x *BeginStreamExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginStreamExecuteRequest.ProtoReflect.Descriptor instead.
func (*BeginStreamExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{43}
}

func (x *BeginStreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

func (x *BeginStreamExecuteRequest) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// BeginStreamExecuteResponse is the returned value from BeginStreamExecute
type BeginStreamExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the stream execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64                 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,4,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// The session_state_changes might be set if the transaction is a snapshot transaction
	// and the MySQL implementation supports getting a start gtid on snapshot
	SessionStateChanges string `protobuf:"bytes,5,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BeginStreamExecuteResponse) Reset() {
	*x = BeginStreamExecuteResponse{}
	mi := &file_query_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginStreamExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginStreamExecuteResponse) ProtoMessage() {}

func (x *BeginStreamExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginStreamExecuteResponse.ProtoReflect.Descriptor instead.
func (*BeginStreamExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{44}
}

func (x *BeginStreamExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BeginStreamExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BeginStreamExecuteResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *BeginStreamExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BeginStreamExecuteResponse) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

// MessageStreamRequest is the request payload for MessageStream.
type MessageStreamRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// name is the message table name.
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageStreamRequest) Reset() {
	*x = MessageStreamRequest{}
	mi := &file_query_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamRequest) ProtoMessage() {}

func (x *MessageStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamRequest.ProtoReflect.Descriptor instead.
func (*MessageStreamRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{45}
}

func (x *MessageStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *MessageStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *MessageStreamRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MessageStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MessageStreamResponse is a response for MessageStream.
type MessageStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *QueryResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageStreamResponse) Reset() {
	*x = MessageStreamResponse{}
	mi := &file_query_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamResponse) ProtoMessage() {}

func (x *MessageStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamResponse.ProtoReflect.Descriptor instead.
func (*MessageStreamResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{46}
}

func (x *MessageStreamResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// MessageAckRequest is the request payload for MessageAck.
type MessageAckRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// name is the message table name.
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ids           []*Value `protobuf:"bytes,5,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageAckRequest) Reset() {
	*x = MessageAckRequest{}
	mi := &file_query_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAckRequest) ProtoMessage() {}

func (x *MessageAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAckRequest.ProtoReflect.Descriptor instead.
func (*MessageAckRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{47}
}

func (x *MessageAckRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *MessageAckRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *MessageAckRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MessageAckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageAckRequest) GetIds() []*Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MessageAckResponse is the response for MessageAck.
type MessageAckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result contains the result of the ack operation.
	// Since this acts like a DML, only
	// RowsAffected is returned in the result.
	Result        *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageAckResponse) Reset() {
	*x = MessageAckResponse{}
	mi := &file_query_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAckResponse) ProtoMessage() {}

func (x *MessageAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAckResponse.ProtoReflect.Descriptor instead.
func (*MessageAckResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{48}
}

func (x *MessageAckResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// ReserveExecuteRequest is the payload to ReserveExecute
type ReserveExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	TransactionId     int64                  `protobuf:"varint,5,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	PreQueries        []string               `protobuf:"bytes,7,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReserveExecuteRequest) Reset() {
	*x = ReserveExecuteRequest{}
	mi := &file_query_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveExecuteRequest) ProtoMessage() {}

func (x *ReserveExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveExecuteRequest.ProtoReflect.Descriptor instead.
func (*ReserveExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{49}
}

func (x *ReserveExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReserveExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReserveExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReserveExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ReserveExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReserveExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ReserveExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

// ReserveExecuteResponse is the returned value from ReserveExecute
type ReserveExecuteResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Error  *vtrpc.RPCError        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The following fields might be non-zero even if an error is present.
	ReservedId    int64                 `protobuf:"varint,3,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,4,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveExecuteResponse) Reset() {
	*x = ReserveExecuteResponse{}
	mi := &file_query_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveExecuteResponse) ProtoMessage() {}

func (x *ReserveExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveExecuteResponse.ProtoReflect.Descriptor instead.
func (*ReserveExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{50}
}

func (x *ReserveExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReserveExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReserveExecuteResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *ReserveExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

// ReserveStreamExecuteRequest is the payload to ReserveStreamExecute
type ReserveStreamExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	TransactionId     int64                  `protobuf:"varint,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	PreQueries        []string               `protobuf:"bytes,7,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReserveStreamExecuteRequest) Reset() {
	*x = ReserveStreamExecuteRequest{}
	mi := &file_query_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveStreamExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveStreamExecuteRequest) ProtoMessage() {}

func (x *ReserveStreamExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveStreamExecuteRequest.ProtoReflect.Descriptor instead.
func (*ReserveStreamExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{51}
}

func (x *ReserveStreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReserveStreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReserveStreamExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReserveStreamExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ReserveStreamExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ReserveStreamExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReserveStreamExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

// ReserveStreamExecuteResponse is the returned value from ReserveStreamExecute
type ReserveStreamExecuteResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Error  *vtrpc.RPCError        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The following fields might be non-zero even if an error is present.
	ReservedId    int64                 `protobuf:"varint,3,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,4,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveStreamExecuteResponse) Reset() {
	*x = ReserveStreamExecuteResponse{}
	mi := &file_query_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveStreamExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveStreamExecuteResponse) ProtoMessage() {}

func (x *ReserveStreamExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveStreamExecuteResponse.ProtoReflect.Descriptor instead.
func (*ReserveStreamExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{52}
}

func (x *ReserveStreamExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReserveStreamExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReserveStreamExecuteResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *ReserveStreamExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

// ReserveBeginExecuteRequest is the payload to ReserveBeginExecute
type ReserveBeginExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	PreQueries        []string               `protobuf:"bytes,6,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	PostBeginQueries  []string               `protobuf:"bytes,7,rep,name=post_begin_queries,json=postBeginQueries,proto3" json:"post_begin_queries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReserveBeginExecuteRequest) Reset() {
	*x = ReserveBeginExecuteRequest{}
	mi := &file_query_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBeginExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBeginExecuteRequest) ProtoMessage() {}

func (x *ReserveBeginExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBeginExecuteRequest.ProtoReflect.Descriptor instead.
func (*ReserveBeginExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{53}
}

func (x *ReserveBeginExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

func (x *ReserveBeginExecuteRequest) GetPostBeginQueries() []string {
	if x != nil {
		return x.PostBeginQueries
	}
	return nil
}

// ReserveBeginExecuteResponse is the returned value from ReserveBeginExecute
type ReserveBeginExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The following fields might be non-zero even if an error is present.
	TransactionId int64                 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ReservedId    int64                 `protobuf:"varint,4,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// The session_state_changes might be set if the transaction is a snapshot transaction
	// and the MySQL implementation supports getting a start gtid on snapshot
	SessionStateChanges string `protobuf:"bytes,6,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ReserveBeginExecuteResponse) Reset() {
	*x = ReserveBeginExecuteResponse{}
	mi := &file_query_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBeginExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBeginExecuteResponse) ProtoMessage() {}

func (x *ReserveBeginExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBeginExecuteResponse.ProtoReflect.Descriptor instead.
func (*ReserveBeginExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{54}
}

func (x *ReserveBeginExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReserveBeginExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReserveBeginExecuteResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReserveBeginExecuteResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *ReserveBeginExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ReserveBeginExecuteResponse) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

// ReserveBeginStreamExecuteRequest is the payload to ReserveBeginStreamExecute
type ReserveBeginStreamExecuteRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery            `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions        `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	PreQueries        []string               `protobuf:"bytes,6,rep,name=pre_queries,json=preQueries,proto3" json:"pre_queries,omitempty"`
	PostBeginQueries  []string               `protobuf:"bytes,7,rep,name=post_begin_queries,json=postBeginQueries,proto3" json:"post_begin_queries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReserveBeginStreamExecuteRequest) Reset() {
	*x = ReserveBeginStreamExecuteRequest{}
	mi := &file_query_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBeginStreamExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBeginStreamExecuteRequest) ProtoMessage() {}

func (x *ReserveBeginStreamExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBeginStreamExecuteRequest.ProtoReflect.Descriptor instead.
func (*ReserveBeginStreamExecuteRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{55}
}

func (x *ReserveBeginStreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetPreQueries() []string {
	if x != nil {
		return x.PreQueries
	}
	return nil
}

func (x *ReserveBeginStreamExecuteRequest) GetPostBeginQueries() []string {
	if x != nil {
		return x.PostBeginQueries
	}
	return nil
}

// ReserveBeginStreamExecuteResponse is the returned value from ReserveBeginStreamExecute
type ReserveBeginStreamExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the stream execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The following fields might be non-zero even if an error is present.
	TransactionId int64                 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ReservedId    int64                 `protobuf:"varint,4,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// The session_state_changes might be set if the transaction is a snapshot transaction
	// and the MySQL implementation supports getting a start gtid on snapshot
	SessionStateChanges string `protobuf:"bytes,6,opt,name=session_state_changes,json=sessionStateChanges,proto3" json:"session_state_changes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ReserveBeginStreamExecuteResponse) Reset() {
	*x = ReserveBeginStreamExecuteResponse{}
	mi := &file_query_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBeginStreamExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBeginStreamExecuteResponse) ProtoMessage() {}

func (x *ReserveBeginStreamExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBeginStreamExecuteResponse.ProtoReflect.Descriptor instead.
func (*ReserveBeginStreamExecuteResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{56}
}

func (x *ReserveBeginStreamExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReserveBeginStreamExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReserveBeginStreamExecuteResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReserveBeginStreamExecuteResponse) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *ReserveBeginStreamExecuteResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ReserveBeginStreamExecuteResponse) GetSessionStateChanges() string {
	if x != nil {
		return x.SessionStateChanges
	}
	return ""
}

// ReleaseRequest is the payload to Release
type ReleaseRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EffectiveCallerId *vtrpc.CallerID        `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID        `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediate_caller_id,omitempty"`
	Target            *Target                `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64                  `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ReservedId        int64                  `protobuf:"varint,5,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	mi := &file_query_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{57}
}

func (x *ReleaseRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReleaseRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReleaseRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReleaseRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReleaseRequest) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

// ReleaseResponse is the returned value from Release
type ReleaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseResponse) Reset() {
	*x = ReleaseResponse{}
	mi := &file_query_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResponse) ProtoMessage() {}

func (x *ReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResponse.ProtoReflect.Descriptor instead.
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{58}
}

// StreamHealthRequest is the payload for StreamHealth
type StreamHealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamHealthRequest) Reset() {
	*x = StreamHealthRequest{}
	mi := &file_query_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHealthRequest) ProtoMessage() {}

func (x *StreamHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHealthRequest.ProtoReflect.Descriptor instead.
func (*StreamHealthRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{59}
}

// RealtimeStats contains information about the tablet status.
// It is only valid for a single tablet.
type RealtimeStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// health_error is the last error we got from health check,
	// or empty is the server is healthy. This is used for subset selection,
	// we do not send queries to servers that are not healthy.
	HealthError string `protobuf:"bytes,1,opt,name=health_error,json=healthError,proto3" json:"health_error,omitempty"`
	// replication_lag_seconds is populated for replicas only. It indicates
	// how far behind on (MySQL) replication a replica currently is.  It is used
	// by clients for subset selection (so we don't try to send traffic
	// to tablets that are too far behind).
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// TODO(mberlin): Let's switch it to int64 instead?
	ReplicationLagSeconds uint32 `protobuf:"varint,2,opt,name=replication_lag_seconds,json=replicationLagSeconds,proto3" json:"replication_lag_seconds,omitempty"`
	// bin_log_players_count is the number of currently running binlog players.
	// if the value is 0, it means that filtered replication is currently not
	// running on the tablet. If >0, filtered replication is running.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	BinlogPlayersCount int32 `protobuf:"varint,3,opt,name=binlog_players_count,json=binlogPlayersCount,proto3" json:"binlog_players_count,omitempty"`
	// filtered_replication_lag_seconds is populated for the receiving
	// primary of an ongoing filtered replication only.
	// It specifies how far the receiving primary lags behind the sending primary.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// NOTE: This field must not be evaluated if "bin_log_players_count" is 0.
	FilteredReplicationLagSeconds int64 `protobuf:"varint,4,opt,name=filtered_replication_lag_seconds,json=filteredReplicationLagSeconds,proto3" json:"filtered_replication_lag_seconds,omitempty"`
	// cpu_usage is used for load-based balancing
	CpuUsage float64 `protobuf:"fixed64,5,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// qps is the average QPS (queries per second) rate in the last XX seconds
	// where XX is usually 60 (See query_service_stats.go).
	Qps float64 `protobuf:"fixed64,6,opt,name=qps,proto3" json:"qps,omitempty"`
	// table_schema_changed is to provide list of tables that have schema changes detected by the tablet.
	TableSchemaChanged []string `protobuf:"bytes,7,rep,name=table_schema_changed,json=tableSchemaChanged,proto3" json:"table_schema_changed,omitempty"`
	// view_schema_changed is to provide list of views that have schema changes detected by the tablet.
	ViewSchemaChanged []string `protobuf:"bytes,8,rep,name=view_schema_changed,json=viewSchemaChanged,proto3" json:"view_schema_changed,omitempty"`
	// udfs_changed is used to signal that the UDFs have changed on the tablet.
	UdfsChanged   bool `protobuf:"varint,9,opt,name=udfs_changed,json=udfsChanged,proto3" json:"udfs_changed,omitempty"`
	TxUnresolved  bool `protobuf:"varint,10,opt,name=tx_unresolved,json=txUnresolved,proto3" json:"tx_unresolved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealtimeStats) Reset() {
	*x = RealtimeStats{}
	mi := &file_query_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealtimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimeStats) ProtoMessage() {}

func (x *RealtimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimeStats.ProtoReflect.Descriptor instead.
func (*RealtimeStats) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{60}
}

func (x *RealtimeStats) GetHealthError() string {
	if x != nil {
		return x.HealthError
	}
	return ""
}

func (x *RealtimeStats) GetReplicationLagSeconds() uint32 {
	if x != nil {
		return x.ReplicationLagSeconds
	}
	return 0
}

func (x *RealtimeStats) GetBinlogPlayersCount() int32 {
	if x != nil {
		return x.BinlogPlayersCount
	}
	return 0
}

func (x *RealtimeStats) GetFilteredReplicationLagSeconds() int64 {
	if x != nil {
		return x.FilteredReplicationLagSeconds
	}
	return 0
}

func (x *RealtimeStats) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *RealtimeStats) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

func (x *RealtimeStats) GetTableSchemaChanged() []string {
	if x != nil {
		return x.TableSchemaChanged
	}
	return nil
}

func (x *RealtimeStats) GetViewSchemaChanged() []string {
	if x != nil {
		return x.ViewSchemaChanged
	}
	return nil
}

func (x *RealtimeStats) GetUdfsChanged() bool {
	if x != nil {
		return x.UdfsChanged
	}
	return false
}

func (x *RealtimeStats) GetTxUnresolved() bool {
	if x != nil {
		return x.TxUnresolved
	}
	return false
}

// AggregateStats contains information about the health of a group of
// tablets for a Target.  It is used to propagate stats from a vtgate
// to another, or from the Gateway layer of a vtgate to the routing
// layer.
type AggregateStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// healthy_tablet_count is the number of healthy tablets in the group.
	HealthyTabletCount int32 `protobuf:"varint,1,opt,name=healthy_tablet_count,json=healthyTabletCount,proto3" json:"healthy_tablet_count,omitempty"`
	// unhealthy_tablet_count is the number of unhealthy tablets in the group.
	UnhealthyTabletCount int32 `protobuf:"varint,2,opt,name=unhealthy_tablet_count,json=unhealthyTabletCount,proto3" json:"unhealthy_tablet_count,omitempty"`
	// replication_lag_seconds_min is the minimum of the
	// replication_lag_seconds values of the healthy tablets. It is unset
	// if the tablet type is primary.
	ReplicationLagSecondsMin uint32 `protobuf:"varint,3,opt,name=replication_lag_seconds_min,json=replicationLagSecondsMin,proto3" json:"replication_lag_seconds_min,omitempty"`
	// replication_lag_seconds_max is the maximum of the
	// replication_lag_seconds values of the healthy tablets. It is unset
	// if the tablet type is primary.
	ReplicationLagSecondsMax uint32 `protobuf:"varint,4,opt,name=replication_lag_seconds_max,json=replicationLagSecondsMax,proto3" json:"replication_lag_seconds_max,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *AggregateStats) Reset() {
	*x = AggregateStats{}
	mi := &file_query_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateStats) ProtoMessage() {}

func (x *AggregateStats) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateStats.ProtoReflect.Descriptor instead.
func (*AggregateStats) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{61}
}

func (x *AggregateStats) GetHealthyTabletCount() int32 {
	if x != nil {
		return x.HealthyTabletCount
	}
	return 0
}

func (x *AggregateStats) GetUnhealthyTabletCount() int32 {
	if x != nil {
		return x.UnhealthyTabletCount
	}
	return 0
}

func (x *AggregateStats) GetReplicationLagSecondsMin() uint32 {
	if x != nil {
		return x.ReplicationLagSecondsMin
	}
	return 0
}

func (x *AggregateStats) GetReplicationLagSecondsMax() uint32 {
	if x != nil {
		return x.ReplicationLagSecondsMax
	}
	return 0
}

// StreamHealthResponse is streamed by StreamHealth on a regular basis.
// It is expected to be used between a vtgate and vttablet:
// - target describes the tablet.
// - realtime_stats is set.
// - aggregate_stats is not set (deprecated)
type StreamHealthResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// target is the current server type. Only queries with that exact Target
	// record will be accepted (the cell may not match, however).
	Target *Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// serving is true iff the tablet is serving. A tablet may not be serving
	// if filtered replication is enabled on a primary for instance,
	// or if a replica should not be used because the keyspace is being resharded.
	Serving bool `protobuf:"varint,2,opt,name=serving,proto3" json:"serving,omitempty"`
	// primary_term_start_timestamp can be interpreted as the
	// last time we knew that this tablet was promoted to a PRIMARY of this shard
	// (if StreamHealthResponse describes a group of tablets, between
	// two vtgates, only one primary will be present in the group, and
	// this is this primary's value).
	//
	// It is used by vtgate when determining the current PRIMARY of a shard.
	// If vtgate sees more than one PRIMARY tablet, this timestamp is used
	// as tiebreaker where the PRIMARY with the highest timestamp wins.
	// Another usage of this timestamp is in go/vt/vtgate/buffer to detect the end
	// of a reparent (failover) and stop buffering.
	//
	// In practice, this field is set to:
	// a) the last time the RPC tabletmanager.TabletExternallyReparented was
	//
	//	called on this tablet (usually done by an external failover tool e.g.
	//	Orchestrator). The failover tool can call this as long as we are the
	//	primary i.e. even ages after the last reparent occurred.
	//
	// OR
	// b) the last time an active reparent was executed through a vtctl command
	//
	//	(InitShardPrimary, PlannedReparentShard, EmergencyReparentShard)
	//
	// OR
	// c) the last time vttablet was started and it initialized its tablet type
	//
	//	as PRIMARY because it was recorded as the shard's current primary in the
	//	topology (see go/vt/vttablet/tabletmanager/init_tablet.go)
	//
	// OR
	// d) 0 if the vttablet is not a PRIMARY.
	PrimaryTermStartTimestamp int64 `protobuf:"varint,3,opt,name=primary_term_start_timestamp,json=primaryTermStartTimestamp,proto3" json:"primary_term_start_timestamp,omitempty"`
	// realtime_stats contains information about the tablet status.
	// It is only filled in if the information is about a tablet.
	RealtimeStats *RealtimeStats `protobuf:"bytes,4,opt,name=realtime_stats,json=realtimeStats,proto3" json:"realtime_stats,omitempty"`
	// tablet_alias is the alias of the sending tablet. The discovery/healthcheck.go
	// code uses it to verify that it's talking to the correct tablet and that it
	// hasn't changed in the meantime e.g. due to tablet restarts where ports or
	// ips have been reused but assigned differently.
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamHealthResponse) Reset() {
	*x = StreamHealthResponse{}
	mi := &file_query_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHealthResponse) ProtoMessage() {}

func (x *StreamHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHealthResponse.ProtoReflect.Descriptor instead.
func (*StreamHealthResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{62}
}

func (x *StreamHealthResponse) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamHealthResponse) GetServing() bool {
	if x != nil {
		return x.Serving
	}
	return false
}

func (x *StreamHealthResponse) GetPrimaryTermStartTimestamp() int64 {
	if x != nil {
		return x.PrimaryTermStartTimestamp
	}
	return 0
}

func (x *StreamHealthResponse) GetRealtimeStats() *RealtimeStats {
	if x != nil {
		return x.RealtimeStats
	}
	return nil
}

func (x *StreamHealthResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

// TransactionMetadata contains the metadata for a distributed transaction.
type TransactionMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dtid          string                 `protobuf:"bytes,1,opt,name=dtid,proto3" json:"dtid,omitempty"`
	State         TransactionState       `protobuf:"varint,2,opt,name=state,proto3,enum=query.TransactionState" json:"state,omitempty"`
	TimeCreated   int64                  `protobuf:"varint,3,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	Participants  []*Target              `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionMetadata) Reset() {
	*x = TransactionMetadata{}
	mi := &file_query_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMetadata) ProtoMessage() {}

func (x *TransactionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMetadata.ProtoReflect.Descriptor instead.
func (*TransactionMetadata) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{63}
}

func (x *TransactionMetadata) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

func (x *TransactionMetadata) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_UNKNOWN
}

func (x *TransactionMetadata) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *TransactionMetadata) GetParticipants() []*Target {
	if x != nil {
		return x.Participants
	}
	return nil
}

// GetSchemaRequest is the payload to GetSchema
type GetSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        *Target                `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TableType     SchemaTableType        `protobuf:"varint,2,opt,name=table_type,json=tableType,proto3,enum=query.SchemaTableType" json:"table_type,omitempty"`
	TableNames    []string               `protobuf:"bytes,3,rep,name=table_names,json=tableNames,proto3" json:"table_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	mi := &file_query_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{64}
}

func (x *GetSchemaRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GetSchemaRequest) GetTableType() SchemaTableType {
	if x != nil {
		return x.TableType
	}
	return SchemaTableType_VIEWS
}

func (x *GetSchemaRequest) GetTableNames() []string {
	if x != nil {
		return x.TableNames
	}
	return nil
}

// UDFInfo represents the information about a UDF.
type UDFInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Aggregating   bool                   `protobuf:"varint,2,opt,name=aggregating,proto3" json:"aggregating,omitempty"`
	ReturnType    Type                   `protobuf:"varint,3,opt,name=return_type,json=returnType,proto3,enum=query.Type" json:"return_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UDFInfo) Reset() {
	*x = UDFInfo{}
	mi := &file_query_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UDFInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDFInfo) ProtoMessage() {}

func (x *UDFInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDFInfo.ProtoReflect.Descriptor instead.
func (*UDFInfo) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{65}
}

func (x *UDFInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UDFInfo) GetAggregating() bool {
	if x != nil {
		return x.Aggregating
	}
	return false
}

func (x *UDFInfo) GetReturnType() Type {
	if x != nil {
		return x.ReturnType
	}
	return Type_NULL_TYPE
}

// GetSchemaResponse is the returned value from GetSchema
type GetSchemaResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Udfs  []*UDFInfo             `protobuf:"bytes,1,rep,name=udfs,proto3" json:"udfs,omitempty"`
	// this is for the schema definition for the requested tables and views.
	TableDefinition map[string]string `protobuf:"bytes,2,rep,name=table_definition,json=tableDefinition,proto3" json:"table_definition,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	mi := &file_query_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{66}
}

func (x *GetSchemaResponse) GetUdfs() []*UDFInfo {
	if x != nil {
		return x.Udfs
	}
	return nil
}

func (x *GetSchemaResponse) GetTableDefinition() map[string]string {
	if x != nil {
		return x.TableDefinition
	}
	return nil
}

// One individual Statement in a transaction.
type StreamEvent_Statement struct {
	state    protoimpl.MessageState         `protogen:"open.v1"`
	Category StreamEvent_Statement_Category `protobuf:"varint,1,opt,name=category,proto3,enum=query.StreamEvent_Statement_Category" json:"category,omitempty"`
	// table_name, primary_key_fields and primary_key_values are set for DML.
	TableName        string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	PrimaryKeyFields []*Field `protobuf:"bytes,3,rep,name=primary_key_fields,json=primaryKeyFields,proto3" json:"primary_key_fields,omitempty"`
	PrimaryKeyValues []*Row   `protobuf:"bytes,4,rep,name=primary_key_values,json=primaryKeyValues,proto3" json:"primary_key_values,omitempty"`
	// sql is set for all queries.
	// FIXME(alainjobart) we may not need it for DMLs.
	Sql           []byte `protobuf:"bytes,5,opt,name=sql,proto3" json:"sql,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEvent_Statement) Reset() {
	*x = StreamEvent_Statement{}
	mi := &file_query_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEvent_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_Statement) ProtoMessage() {}

func (x *StreamEvent_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_Statement.ProtoReflect.Descriptor instead.
func (*StreamEvent_Statement) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{11, 0}
}

func (x *StreamEvent_Statement) GetCategory() StreamEvent_Statement_Category {
	if x != nil {
		return x.Category
	}
	return StreamEvent_Statement_Error
}

func (x *StreamEvent_Statement) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StreamEvent_Statement) GetPrimaryKeyFields() []*Field {
	if x != nil {
		return x.PrimaryKeyFields
	}
	return nil
}

func (x *StreamEvent_Statement) GetPrimaryKeyValues() []*Row {
	if x != nil {
		return x.PrimaryKeyValues
	}
	return nil
}

func (x *StreamEvent_Statement) GetSql() []byte {
	if x != nil {
		return x.Sql
	}
	return nil
}

var File_query_proto protoreflect.FileDescriptor

const file_query_proto_rawDesc = "" +
	"\n" +
	"\vquery.proto\x12\x05query\x1a\x0etopodata.proto\x1a\vvtrpc.proto\"\x85\x01\n" +
	"\x06Target\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x125\n" +
	"\vtablet_type\x18\x03 \x01(\x0e2\x14.topodata.TabletTypeR\n" +
	"tabletType\x12\x12\n" +
	"\x04cell\x18\x04 \x01(\tR\x04cell\"D\n" +
	"\x0eVTGateCallerID\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x16\n" +
	"\x06groups\x18\x02 \x03(\tR\x06groups\"\\\n" +
	"\n" +
	"EventToken\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x1a\n" +
	"\bposition\x18\x03 \x01(\tR\bposition\">\n" +
	"\x05Value\x12\x1f\n" +
	"\x04type\x18\x01 \x01(\x0e2\v.query.TypeR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"k\n" +
	"\fBindVariable\x12\x1f\n" +
	"\x04type\x18\x01 \x01(\x0e2\v.query.TypeR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12$\n" +
	"\x06values\x18\x03 \x03(\v2\f.query.ValueR\x06values\"\xc2\x01\n" +
	"\n" +
	"BoundQuery\x12\x10\n" +
	"\x03sql\x18\x01 \x01(\tR\x03sql\x12K\n" +
	"\x0ebind_variables\x18\x02 \x03(\v2$.query.BoundQuery.BindVariablesEntryR\rbindVariables\x1aU\n" +
	"\x12BindVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.query.BindVariableR\x05value:\x028\x01\"\xb5\f\n" +
	"\x0eExecuteOptions\x12M\n" +
	"\x0fincluded_fields\x18\x04 \x01(\x0e2$.query.ExecuteOptions.IncludedFieldsR\x0eincludedFields\x12*\n" +
	"\x11client_found_rows\x18\x05 \x01(\bR\x0fclientFoundRows\x12:\n" +
	"\bworkload\x18\x06 \x01(\x0e2\x1e.query.ExecuteOptions.WorkloadR\bworkload\x12(\n" +
	"\x10sql_select_limit\x18\b \x01(\x03R\x0esqlSelectLimit\x12_\n" +
	"\x15transaction_isolation\x18\t \x01(\x0e2*.query.ExecuteOptions.TransactionIsolationR\x14transactionIsolation\x121\n" +
	"\x15skip_query_plan_cache\x18\n" +
	" \x01(\bR\x12skipQueryPlanCache\x12M\n" +
	"\x0fplanner_version\x18\v \x01(\x0e2$.query.ExecuteOptions.PlannerVersionR\x0eplannerVersion\x125\n" +
	"\x17has_created_temp_tables\x18\f \x01(\bR\x14hasCreatedTempTables\x12F\n" +
	"\fconsolidator\x18\r \x01(\x0e2\".query.ExecuteOptions.ConsolidatorR\fconsolidator\x12c\n" +
	"\x17transaction_access_mode\x18\x0e \x03(\x0e2+.query.ExecuteOptions.TransactionAccessModeR\x15transactionAccessMode\x12\"\n" +
	"\fWorkloadName\x18\x0f \x01(\tR\fWorkloadName\x12\x1a\n" +
	"\bpriority\x18\x10 \x01(\tR\bpriority\x125\n" +
	"\x15authoritative_timeout\x18\x11 \x01(\x03H\x00R\x14authoritativeTimeout\x12/\n" +
	"\x14fetch_last_insert_id\x18\x12 \x01(\bR\x11fetchLastInsertId\x12(\n" +
	"\x10in_dml_execution\x18\x13 \x01(\bR\x0einDmlExecution\";\n" +
	"\x0eIncludedFields\x12\x11\n" +
	"\rTYPE_AND_NAME\x10\x00\x12\r\n" +
	"\tTYPE_ONLY\x10\x01\x12\a\n" +
	"\x03ALL\x10\x02\"8\n" +
	"\bWorkload\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\b\n" +
	"\x04OLTP\x10\x01\x12\b\n" +
	"\x04OLAP\x10\x02\x12\a\n" +
	"\x03DBA\x10\x03\"\xa7\x01\n" +
	"\x14TransactionIsolation\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\x13\n" +
	"\x0fREPEATABLE_READ\x10\x01\x12\x12\n" +
	"\x0eREAD_COMMITTED\x10\x02\x12\x14\n" +
	"\x10READ_UNCOMMITTED\x10\x03\x12\x10\n" +
	"\fSERIALIZABLE\x10\x04\x12!\n" +
	"\x1dCONSISTENT_SNAPSHOT_READ_ONLY\x10\x05\x12\x0e\n" +
	"\n" +
	"AUTOCOMMIT\x10\x06\"\x92\x01\n" +
	"\x0ePlannerVersion\x12\x13\n" +
	"\x0fDEFAULT_PLANNER\x10\x00\x12\x06\n" +
	"\x02V3\x10\x01\x12\b\n" +
	"\x04Gen4\x10\x02\x12\x0e\n" +
	"\n" +
	"Gen4Greedy\x10\x03\x12\x12\n" +
	"\x0eGen4Left2Right\x10\x04\x12\x14\n" +
	"\x10Gen4WithFallback\x10\x05\x12\x11\n" +
	"\rGen4CompareV3\x10\x06\x12\f\n" +
	"\bV3Insert\x10\a\"\x84\x01\n" +
	"\fConsolidator\x12\x1c\n" +
	"\x18CONSOLIDATOR_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CONSOLIDATOR_DISABLED\x10\x01\x12\x18\n" +
	"\x14CONSOLIDATOR_ENABLED\x10\x02\x12!\n" +
	"\x1dCONSOLIDATOR_ENABLED_REPLICAS\x10\x03\"O\n" +
	"\x15TransactionAccessMode\x12\x17\n" +
	"\x13CONSISTENT_SNAPSHOT\x10\x00\x12\x0e\n" +
	"\n" +
	"READ_WRITE\x10\x01\x12\r\n" +
	"\tREAD_ONLY\x10\x02B\t\n" +
	"\atimeoutJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\xb8\x02\n" +
	"\x05Field\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\x04type\x18\x02 \x01(\x0e2\v.query.TypeR\x04type\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12\x1b\n" +
	"\torg_table\x18\x04 \x01(\tR\borgTable\x12\x1a\n" +
	"\bdatabase\x18\x05 \x01(\tR\bdatabase\x12\x19\n" +
	"\borg_name\x18\x06 \x01(\tR\aorgName\x12#\n" +
	"\rcolumn_length\x18\a \x01(\rR\fcolumnLength\x12\x18\n" +
	"\acharset\x18\b \x01(\rR\acharset\x12\x1a\n" +
	"\bdecimals\x18\t \x01(\rR\bdecimals\x12\x14\n" +
	"\x05flags\x18\n" +
	" \x01(\rR\x05flags\x12\x1f\n" +
	"\vcolumn_type\x18\v \x01(\tR\n" +
	"columnType\"7\n" +
	"\x03Row\x12\x18\n" +
	"\alengths\x18\x01 \x03(\x12R\alengths\x12\x16\n" +
	"\x06values\x18\x02 \x01(\fR\x06values\"\x8f\x02\n" +
	"\vQueryResult\x12$\n" +
	"\x06fields\x18\x01 \x03(\v2\f.query.FieldR\x06fields\x12#\n" +
	"\rrows_affected\x18\x02 \x01(\x04R\frowsAffected\x12\x1b\n" +
	"\tinsert_id\x18\x03 \x01(\x04R\binsertId\x12\x1e\n" +
	"\x04rows\x18\x04 \x03(\v2\n" +
	".query.RowR\x04rows\x12\x12\n" +
	"\x04info\x18\x06 \x01(\tR\x04info\x122\n" +
	"\x15session_state_changes\x18\a \x01(\tR\x13sessionStateChanges\x12*\n" +
	"\x11insert_id_changed\x18\b \x01(\bR\x0finsertIdChangedJ\x04\b\x05\x10\x06\"<\n" +
	"\fQueryWarning\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xa0\x03\n" +
	"\vStreamEvent\x12<\n" +
	"\n" +
	"statements\x18\x01 \x03(\v2\x1c.query.StreamEvent.StatementR\n" +
	"statements\x122\n" +
	"\vevent_token\x18\x02 \x01(\v2\x11.query.EventTokenR\n" +
	"eventToken\x1a\x9e\x02\n" +
	"\tStatement\x12A\n" +
	"\bcategory\x18\x01 \x01(\x0e2%.query.StreamEvent.Statement.CategoryR\bcategory\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x12:\n" +
	"\x12primary_key_fields\x18\x03 \x03(\v2\f.query.FieldR\x10primaryKeyFields\x128\n" +
	"\x12primary_key_values\x18\x04 \x03(\v2\n" +
	".query.RowR\x10primaryKeyValues\x12\x10\n" +
	"\x03sql\x18\x05 \x01(\fR\x03sql\"'\n" +
	"\bCategory\x12\t\n" +
	"\x05Error\x10\x00\x12\a\n" +
	"\x03DML\x10\x01\x12\a\n" +
	"\x03DDL\x10\x02\"\xe1\x02\n" +
	"\x0eExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12%\n" +
	"\x0etransaction_id\x18\x05 \x01(\x03R\rtransactionId\x12/\n" +
	"\aoptions\x18\x06 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vreserved_id\x18\a \x01(\x03R\n" +
	"reservedId\"=\n" +
	"\x0fExecuteResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"d\n" +
	"\x0fResultWithError\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\"\xe7\x02\n" +
	"\x14StreamExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12%\n" +
	"\x0etransaction_id\x18\x06 \x01(\x03R\rtransactionId\x12\x1f\n" +
	"\vreserved_id\x18\a \x01(\x03R\n" +
	"reservedId\"C\n" +
	"\x15StreamExecuteResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"\xee\x01\n" +
	"\fBeginRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12/\n" +
	"\aoptions\x18\x04 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\"\xa4\x01\n" +
	"\rBeginResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\x03R\rtransactionId\x128\n" +
	"\ftablet_alias\x18\x02 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x122\n" +
	"\x15session_state_changes\x18\x03 \x01(\tR\x13sessionStateChanges\"\xe5\x01\n" +
	"\rCommitRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\"1\n" +
	"\x0eCommitResponse\x12\x1f\n" +
	"\vreserved_id\x18\x01 \x01(\x03R\n" +
	"reservedId\"\xe7\x01\n" +
	"\x0fRollbackRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\"3\n" +
	"\x10RollbackResponse\x12\x1f\n" +
	"\vreserved_id\x18\x01 \x01(\x03R\n" +
	"reservedId\"\xfa\x01\n" +
	"\x0ePrepareRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\x12\x12\n" +
	"\x04dtid\x18\x05 \x01(\tR\x04dtid\"\x11\n" +
	"\x0fPrepareResponse\"\xda\x01\n" +
	"\x15CommitPreparedRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04dtid\x18\x04 \x01(\tR\x04dtid\"\x18\n" +
	"\x16CommitPreparedResponse\"\x83\x02\n" +
	"\x17RollbackPreparedRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\x12\x12\n" +
	"\x04dtid\x18\x05 \x01(\tR\x04dtid\"\x1a\n" +
	"\x18RollbackPreparedResponse\"\x90\x02\n" +
	"\x18CreateTransactionRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04dtid\x18\x04 \x01(\tR\x04dtid\x121\n" +
	"\fparticipants\x18\x05 \x03(\v2\r.query.TargetR\fparticipants\"\x1b\n" +
	"\x19CreateTransactionResponse\"\xfe\x01\n" +
	"\x12StartCommitRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\x12\x12\n" +
	"\x04dtid\x18\x05 \x01(\tR\x04dtid\"D\n" +
	"\x13StartCommitResponse\x12-\n" +
	"\x05state\x18\x01 \x01(\x0e2\x17.query.StartCommitStateR\x05state\"\xfe\x01\n" +
	"\x12SetRollbackRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\x12\x12\n" +
	"\x04dtid\x18\x05 \x01(\tR\x04dtid\"\x15\n" +
	"\x13SetRollbackResponse\"\xdf\x01\n" +
	"\x1aConcludeTransactionRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04dtid\x18\x04 \x01(\tR\x04dtid\"\x1d\n" +
	"\x1bConcludeTransactionResponse\"\xdb\x01\n" +
	"\x16ReadTransactionRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04dtid\x18\x04 \x01(\tR\x04dtid\"Q\n" +
	"\x17ReadTransactionResponse\x126\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1a.query.TransactionMetadataR\bmetadata\"\xef\x01\n" +
	"\x1dUnresolvedTransactionsRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x1f\n" +
	"\vabandon_age\x18\x04 \x01(\x03R\n" +
	"abandonAge\"`\n" +
	"\x1eUnresolvedTransactionsResponse\x12>\n" +
	"\ftransactions\x18\x01 \x03(\v2\x1a.query.TransactionMetadataR\ftransactions\"\xe0\x02\n" +
	"\x13BeginExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vreserved_id\x18\x06 \x01(\x03R\n" +
	"reservedId\x12\x1f\n" +
	"\vpre_queries\x18\a \x03(\tR\n" +
	"preQueries\"\xfe\x01\n" +
	"\x14BeginExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\x03R\rtransactionId\x128\n" +
	"\ftablet_alias\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x122\n" +
	"\x15session_state_changes\x18\x05 \x01(\tR\x13sessionStateChanges\"\xe6\x02\n" +
	"\x19BeginStreamExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vpre_queries\x18\x06 \x03(\tR\n" +
	"preQueries\x12\x1f\n" +
	"\vreserved_id\x18\a \x01(\x03R\n" +
	"reservedId\"\x84\x02\n" +
	"\x1aBeginStreamExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\x03R\rtransactionId\x128\n" +
	"\ftablet_alias\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x122\n" +
	"\x15session_state_changes\x18\x05 \x01(\tR\x13sessionStateChanges\"\xd9\x01\n" +
	"\x14MessageStreamRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"C\n" +
	"\x15MessageStreamResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"\xf6\x01\n" +
	"\x11MessageAckRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1e\n" +
	"\x03ids\x18\x05 \x03(\v2\f.query.ValueR\x03ids\"@\n" +
	"\x12MessageAckResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"\xe8\x02\n" +
	"\x15ReserveExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12%\n" +
	"\x0etransaction_id\x18\x05 \x01(\x03R\rtransactionId\x12/\n" +
	"\aoptions\x18\x06 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vpre_queries\x18\a \x03(\tR\n" +
	"preQueries\"\xc6\x01\n" +
	"\x16ReserveExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12\x1f\n" +
	"\vreserved_id\x18\x03 \x01(\x03R\n" +
	"reservedId\x128\n" +
	"\ftablet_alias\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\xee\x02\n" +
	"\x1bReserveStreamExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12%\n" +
	"\x0etransaction_id\x18\x06 \x01(\x03R\rtransactionId\x12\x1f\n" +
	"\vpre_queries\x18\a \x03(\tR\n" +
	"preQueries\"\xcc\x01\n" +
	"\x1cReserveStreamExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12\x1f\n" +
	"\vreserved_id\x18\x03 \x01(\x03R\n" +
	"reservedId\x128\n" +
	"\ftablet_alias\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\xf4\x02\n" +
	"\x1aReserveBeginExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vpre_queries\x18\x06 \x03(\tR\n" +
	"preQueries\x12,\n" +
	"\x12post_begin_queries\x18\a \x03(\tR\x10postBeginQueries\"\xa6\x02\n" +
	"\x1bReserveBeginExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\x03R\rtransactionId\x12\x1f\n" +
	"\vreserved_id\x18\x04 \x01(\x03R\n" +
	"reservedId\x128\n" +
	"\ftablet_alias\x18\x05 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x122\n" +
	"\x15session_state_changes\x18\x06 \x01(\tR\x13sessionStateChanges\"\xfa\x02\n" +
	" ReserveBeginStreamExecuteRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12'\n" +
	"\x05query\x18\x04 \x01(\v2\x11.query.BoundQueryR\x05query\x12/\n" +
	"\aoptions\x18\x05 \x01(\v2\x15.query.ExecuteOptionsR\aoptions\x12\x1f\n" +
	"\vpre_queries\x18\x06 \x03(\tR\n" +
	"preQueries\x12,\n" +
	"\x12post_begin_queries\x18\a \x03(\tR\x10postBeginQueries\"\xac\x02\n" +
	"!ReserveBeginStreamExecuteResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x12*\n" +
	"\x06result\x18\x02 \x01(\v2\x12.query.QueryResultR\x06result\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\x03R\rtransactionId\x12\x1f\n" +
	"\vreserved_id\x18\x04 \x01(\x03R\n" +
	"reservedId\x128\n" +
	"\ftablet_alias\x18\x05 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x122\n" +
	"\x15session_state_changes\x18\x06 \x01(\tR\x13sessionStateChanges\"\x87\x02\n" +
	"\x0eReleaseRequest\x12?\n" +
	"\x13effective_caller_id\x18\x01 \x01(\v2\x0f.vtrpc.CallerIDR\x11effectiveCallerId\x12E\n" +
	"\x13immediate_caller_id\x18\x02 \x01(\v2\x15.query.VTGateCallerIDR\x11immediateCallerId\x12%\n" +
	"\x06target\x18\x03 \x01(\v2\r.query.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\x03R\rtransactionId\x12\x1f\n" +
	"\vreserved_id\x18\x05 \x01(\x03R\n" +
	"reservedId\"\x11\n" +
	"\x0fReleaseResponse\"\x15\n" +
	"\x13StreamHealthRequest\"\xbe\x03\n" +
	"\rRealtimeStats\x12!\n" +
	"\fhealth_error\x18\x01 \x01(\tR\vhealthError\x126\n" +
	"\x17replication_lag_seconds\x18\x02 \x01(\rR\x15replicationLagSeconds\x120\n" +
	"\x14binlog_players_count\x18\x03 \x01(\x05R\x12binlogPlayersCount\x12G\n" +
	" filtered_replication_lag_seconds\x18\x04 \x01(\x03R\x1dfilteredReplicationLagSeconds\x12\x1b\n" +
	"\tcpu_usage\x18\x05 \x01(\x01R\bcpuUsage\x12\x10\n" +
	"\x03qps\x18\x06 \x01(\x01R\x03qps\x120\n" +
	"\x14table_schema_changed\x18\a \x03(\tR\x12tableSchemaChanged\x12.\n" +
	"\x13view_schema_changed\x18\b \x03(\tR\x11viewSchemaChanged\x12!\n" +
	"\fudfs_changed\x18\t \x01(\bR\vudfsChanged\x12#\n" +
	"\rtx_unresolved\x18\n" +
	" \x01(\bR\ftxUnresolved\"\xf6\x01\n" +
	"\x0eAggregateStats\x120\n" +
	"\x14healthy_tablet_count\x18\x01 \x01(\x05R\x12healthyTabletCount\x124\n" +
	"\x16unhealthy_tablet_count\x18\x02 \x01(\x05R\x14unhealthyTabletCount\x12=\n" +
	"\x1breplication_lag_seconds_min\x18\x03 \x01(\rR\x18replicationLagSecondsMin\x12=\n" +
	"\x1breplication_lag_seconds_max\x18\x04 \x01(\rR\x18replicationLagSecondsMax\"\x95\x02\n" +
	"\x14StreamHealthResponse\x12%\n" +
	"\x06target\x18\x01 \x01(\v2\r.query.TargetR\x06target\x12\x18\n" +
	"\aserving\x18\x02 \x01(\bR\aserving\x12?\n" +
	"\x1cprimary_term_start_timestamp\x18\x03 \x01(\x03R\x19primaryTermStartTimestamp\x12;\n" +
	"\x0erealtime_stats\x18\x04 \x01(\v2\x14.query.RealtimeStatsR\rrealtimeStats\x128\n" +
	"\ftablet_alias\x18\x05 \x01(\v2\x15.topodata.TabletAliasR\vtabletAliasJ\x04\b\x06\x10\a\"\xae\x01\n" +
	"\x13TransactionMetadata\x12\x12\n" +
	"\x04dtid\x18\x01 \x01(\tR\x04dtid\x12-\n" +
	"\x05state\x18\x02 \x01(\x0e2\x17.query.TransactionStateR\x05state\x12!\n" +
	"\ftime_created\x18\x03 \x01(\x03R\vtimeCreated\x121\n" +
	"\fparticipants\x18\x04 \x03(\v2\r.query.TargetR\fparticipants\"\x91\x01\n" +
	"\x10GetSchemaRequest\x12%\n" +
	"\x06target\x18\x01 \x01(\v2\r.query.TargetR\x06target\x125\n" +
	"\n" +
	"table_type\x18\x02 \x01(\x0e2\x16.query.SchemaTableTypeR\ttableType\x12\x1f\n" +
	"\vtable_names\x18\x03 \x03(\tR\n" +
	"tableNames\"m\n" +
	"\aUDFInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vaggregating\x18\x02 \x01(\bR\vaggregating\x12,\n" +
	"\vreturn_type\x18\x03 \x01(\x0e2\v.query.TypeR\n" +
	"returnType\"\xd5\x01\n" +
	"\x11GetSchemaResponse\x12\"\n" +
	"\x04udfs\x18\x01 \x03(\v2\x0e.query.UDFInfoR\x04udfs\x12X\n" +
	"\x10table_definition\x18\x02 \x03(\v2-.query.GetSchemaResponse.TableDefinitionEntryR\x0ftableDefinition\x1aB\n" +
	"\x14TableDefinitionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\x92\x03\n" +
	"\tMySqlFlag\x12\t\n" +
	"\x05EMPTY\x10\x00\x12\x11\n" +
	"\rNOT_NULL_FLAG\x10\x01\x12\x10\n" +
	"\fPRI_KEY_FLAG\x10\x02\x12\x13\n" +
	"\x0fUNIQUE_KEY_FLAG\x10\x04\x12\x15\n" +
	"\x11MULTIPLE_KEY_FLAG\x10\b\x12\r\n" +
	"\tBLOB_FLAG\x10\x10\x12\x11\n" +
	"\rUNSIGNED_FLAG\x10 \x12\x11\n" +
	"\rZEROFILL_FLAG\x10@\x12\x10\n" +
	"\vBINARY_FLAG\x10\x80\x01\x12\x0e\n" +
	"\tENUM_FLAG\x10\x80\x02\x12\x18\n" +
	"\x13AUTO_INCREMENT_FLAG\x10\x80\x04\x12\x13\n" +
	"\x0eTIMESTAMP_FLAG\x10\x80\b\x12\r\n" +
	"\bSET_FLAG\x10\x80\x10\x12\x1a\n" +
	"\x15NO_DEFAULT_VALUE_FLAG\x10\x80 \x12\x17\n" +
	"\x12ON_UPDATE_NOW_FLAG\x10\x80@\x12\x0e\n" +
	"\bNUM_FLAG\x10\x80\x80\x02\x12\x13\n" +
	"\rPART_KEY_FLAG\x10\x80\x80\x01\x12\x10\n" +
	"\n" +
	"GROUP_FLAG\x10\x80\x80\x02\x12\x11\n" +
	"\vUNIQUE_FLAG\x10\x80\x80\x04\x12\x11\n" +
	"\vBINCMP_FLAG\x10\x80\x80\b\x1a\x02\x10\x01*k\n" +
	"\x04Flag\x12\b\n" +
	"\x04NONE\x10\x00\x12\x0f\n" +
	"\n" +
	"ISINTEGRAL\x10\x80\x02\x12\x0f\n" +
	"\n" +
	"ISUNSIGNED\x10\x80\x04\x12\f\n" +
	"\aISFLOAT\x10\x80\b\x12\r\n" +
	"\bISQUOTED\x10\x80\x10\x12\v\n" +
	"\x06ISTEXT\x10\x80 \x12\r\n" +
	"\bISBINARY\x10\x80@*\xe7\x03\n" +
	"\x04Type\x12\r\n" +
	"\tNULL_TYPE\x10\x00\x12\t\n" +
	"\x04INT8\x10\x81\x02\x12\n" +
	"\n" +
	"\x05UINT8\x10\x82\x06\x12\n" +
	"\n" +
	"\x05INT16\x10\x83\x02\x12\v\n" +
	"\x06UINT16\x10\x84\x06\x12\n" +
	"\n" +
	"\x05INT24\x10\x85\x02\x12\v\n" +
	"\x06UINT24\x10\x86\x06\x12\n" +
	"\n" +
	"\x05INT32\x10\x87\x02\x12\v\n" +
	"\x06UINT32\x10\x88\x06\x12\n" +
	"\n" +
	"\x05INT64\x10\x89\x02\x12\v\n" +
	"\x06UINT64\x10\x8a\x06\x12\f\n" +
	"\aFLOAT32\x10\x8b\b\x12\f\n" +
	"\aFLOAT64\x10\x8c\b\x12\x0e\n" +
	"\tTIMESTAMP\x10\x8d\x10\x12\t\n" +
	"\x04DATE\x10\x8e\x10\x12\t\n" +
	"\x04TIME\x10\x8f\x10\x12\r\n" +
	"\bDATETIME\x10\x90\x10\x12\t\n" +
	"\x04YEAR\x10\x91\x06\x12\v\n" +
	"\aDECIMAL\x10\x12\x12\t\n" +
	"\x04TEXT\x10\x930\x12\t\n" +
	"\x04BLOB\x10\x94P\x12\f\n" +
	"\aVARCHAR\x10\x950\x12\x0e\n" +
	"\tVARBINARY\x10\x96P\x12\t\n" +
	"\x04CHAR\x10\x970\x12\v\n" +
	"\x06BINARY\x10\x98P\x12\b\n" +
	"\x03BIT\x10\x99\x10\x12\t\n" +
	"\x04ENUM\x10\x9a\x10\x12\b\n" +
	"\x03SET\x10\x9b\x10\x12\t\n" +
	"\x05TUPLE\x10\x1c\x12\r\n" +
	"\bGEOMETRY\x10\x9d\x10\x12\t\n" +
	"\x04JSON\x10\x9e\x10\x12\x0e\n" +
	"\n" +
	"EXPRESSION\x10\x1f\x12\v\n" +
	"\x06HEXNUM\x10\xa0 \x12\v\n" +
	"\x06HEXVAL\x10\xa1 \x12\v\n" +
	"\x06BITNUM\x10\xa2 \x12\v\n" +
	"\x06VECTOR\x10\xa3\x10\x12\b\n" +
	"\x03RAW\x10\xa4\x10\x12\x0e\n" +
	"\tROW_TUPLE\x10\xa5\x10*6\n" +
	"\x10StartCommitState\x12\v\n" +
	"\aUnknown\x10\x00\x12\b\n" +
	"\x04Fail\x10\x01\x12\v\n" +
	"\aSuccess\x10\x02*F\n" +
	"\x10TransactionState\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aPREPARE\x10\x01\x12\f\n" +
	"\bROLLBACK\x10\x02\x12\n" +
	"\n" +
	"\x06COMMIT\x10\x03*;\n" +
	"\x0fSchemaTableType\x12\t\n" +
	"\x05VIEWS\x10\x00\x12\n" +
	"\n" +
	"\x06TABLES\x10\x01\x12\a\n" +
	"\x03ALL\x10\x02\x12\b\n" +
	"\x04UDFS\x10\x03B5\n" +
	"\x0fio.vitess.protoZ\"vitess.io/vitess/go/vt/proto/queryb\x06proto3"

var (
	file_query_proto_rawDescOnce sync.Once
	file_query_proto_rawDescData []byte
)

func file_query_proto_rawDescGZIP() []byte {
	file_query_proto_rawDescOnce.Do(func() {
		file_query_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_query_proto_rawDesc), len(file_query_proto_rawDesc)))
	})
	return file_query_proto_rawDescData
}

var file_query_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_query_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_query_proto_goTypes = []any{
	(MySqlFlag)(0),                            // 0: query.MySqlFlag
	(Flag)(0),                                 // 1: query.Flag
	(Type)(0),                                 // 2: query.Type
	(StartCommitState)(0),                     // 3: query.StartCommitState
	(TransactionState)(0),                     // 4: query.TransactionState
	(SchemaTableType)(0),                      // 5: query.SchemaTableType
	(ExecuteOptions_IncludedFields)(0),        // 6: query.ExecuteOptions.IncludedFields
	(ExecuteOptions_Workload)(0),              // 7: query.ExecuteOptions.Workload
	(ExecuteOptions_TransactionIsolation)(0),  // 8: query.ExecuteOptions.TransactionIsolation
	(ExecuteOptions_PlannerVersion)(0),        // 9: query.ExecuteOptions.PlannerVersion
	(ExecuteOptions_Consolidator)(0),          // 10: query.ExecuteOptions.Consolidator
	(ExecuteOptions_TransactionAccessMode)(0), // 11: query.ExecuteOptions.TransactionAccessMode
	(StreamEvent_Statement_Category)(0),       // 12: query.StreamEvent.Statement.Category
	(*Target)(nil),                            // 13: query.Target
	(*VTGateCallerID)(nil),                    // 14: query.VTGateCallerID
	(*EventToken)(nil),                        // 15: query.EventToken
	(*Value)(nil),                             // 16: query.Value
	(*BindVariable)(nil),                      // 17: query.BindVariable
	(*BoundQuery)(nil),                        // 18: query.BoundQuery
	(*ExecuteOptions)(nil),                    // 19: query.ExecuteOptions
	(*Field)(nil),                             // 20: query.Field
	(*Row)(nil),                               // 21: query.Row
	(*QueryResult)(nil),                       // 22: query.QueryResult
	(*QueryWarning)(nil),                      // 23: query.QueryWarning
	(*StreamEvent)(nil),                       // 24: query.StreamEvent
	(*ExecuteRequest)(nil),                    // 25: query.ExecuteRequest
	(*ExecuteResponse)(nil),                   // 26: query.ExecuteResponse
	(*ResultWithError)(nil),                   // 27: query.ResultWithError
	(*StreamExecuteRequest)(nil),              // 28: query.StreamExecuteRequest
	(*StreamExecuteResponse)(nil),             // 29: query.StreamExecuteResponse
	(*BeginRequest)(nil),                      // 30: query.BeginRequest
	(*BeginResponse)(nil),                     // 31: query.BeginResponse
	(*CommitRequest)(nil),                     // 32: query.CommitRequest
	(*CommitResponse)(nil),                    // 33: query.CommitResponse
	(*RollbackRequest)(nil),                   // 34: query.RollbackRequest
	(*RollbackResponse)(nil),                  // 35: query.RollbackResponse
	(*PrepareRequest)(nil),                    // 36: query.PrepareRequest
	(*PrepareResponse)(nil),                   // 37: query.PrepareResponse
	(*CommitPreparedRequest)(nil),             // 38: query.CommitPreparedRequest
	(*CommitPreparedResponse)(nil),            // 39: query.CommitPreparedResponse
	(*RollbackPreparedRequest)(nil),           // 40: query.RollbackPreparedRequest
	(*RollbackPreparedResponse)(nil),          // 41: query.RollbackPreparedResponse
	(*CreateTransactionRequest)(nil),          // 42: query.CreateTransactionRequest
	(*CreateTransactionResponse)(nil),         // 43: query.CreateTransactionResponse
	(*StartCommitRequest)(nil),                // 44: query.StartCommitRequest
	(*StartCommitResponse)(nil),               // 45: query.StartCommitResponse
	(*SetRollbackRequest)(nil),                // 46: query.SetRollbackRequest
	(*SetRollbackResponse)(nil),               // 47: query.SetRollbackResponse
	(*ConcludeTransactionRequest)(nil),        // 48: query.ConcludeTransactionRequest
	(*ConcludeTransactionResponse)(nil),       // 49: query.ConcludeTransactionResponse
	(*ReadTransactionRequest)(nil),            // 50: query.ReadTransactionRequest
	(*ReadTransactionResponse)(nil),           // 51: query.ReadTransactionResponse
	(*UnresolvedTransactionsRequest)(nil),     // 52: query.UnresolvedTransactionsRequest
	(*UnresolvedTransactionsResponse)(nil),    // 53: query.UnresolvedTransactionsResponse
	(*BeginExecuteRequest)(nil),               // 54: query.BeginExecuteRequest
	(*BeginExecuteResponse)(nil),              // 55: query.BeginExecuteResponse
	(*BeginStreamExecuteRequest)(nil),         // 56: query.BeginStreamExecuteRequest
	(*BeginStreamExecuteResponse)(nil),        // 57: query.BeginStreamExecuteResponse
	(*MessageStreamRequest)(nil),              // 58: query.MessageStreamRequest
	(*MessageStreamResponse)(nil),             // 59: query.MessageStreamResponse
	(*MessageAckRequest)(nil),                 // 60: query.MessageAckRequest
	(*MessageAckResponse)(nil),                // 61: query.MessageAckResponse
	(*ReserveExecuteRequest)(nil),             // 62: query.ReserveExecuteRequest
	(*ReserveExecuteResponse)(nil),            // 63: query.ReserveExecuteResponse
	(*ReserveStreamExecuteRequest)(nil),       // 64: query.ReserveStreamExecuteRequest
	(*ReserveStreamExecuteResponse)(nil),      // 65: query.ReserveStreamExecuteResponse
	(*ReserveBeginExecuteRequest)(nil),        // 66: query.ReserveBeginExecuteRequest
	(*ReserveBeginExecuteResponse)(nil),       // 67: query.ReserveBeginExecuteResponse
	(*ReserveBeginStreamExecuteRequest)(nil),  // 68: query.ReserveBeginStreamExecuteRequest
	(*ReserveBeginStreamExecuteResponse)(nil), // 69: query.ReserveBeginStreamExecuteResponse
	(*ReleaseRequest)(nil),                    // 70: query.ReleaseRequest
	(*ReleaseResponse)(nil),                   // 71: query.ReleaseResponse
	(*StreamHealthRequest)(nil),               // 72: query.StreamHealthRequest
	(*RealtimeStats)(nil),                     // 73: query.RealtimeStats
	(*AggregateStats)(nil),                    // 74: query.AggregateStats
	(*StreamHealthResponse)(nil),              // 75: query.StreamHealthResponse
	(*TransactionMetadata)(nil),               // 76: query.TransactionMetadata
	(*GetSchemaRequest)(nil),                  // 77: query.GetSchemaRequest
	(*UDFInfo)(nil),                           // 78: query.UDFInfo
	(*GetSchemaResponse)(nil),                 // 79: query.GetSchemaResponse
	nil,                                       // 80: query.BoundQuery.BindVariablesEntry
	(*StreamEvent_Statement)(nil),             // 81: query.StreamEvent.Statement
	nil,                                       // 82: query.GetSchemaResponse.TableDefinitionEntry
	(topodata.TabletType)(0),                  // 83: topodata.TabletType
	(*vtrpc.CallerID)(nil),                    // 84: vtrpc.CallerID
	(*vtrpc.RPCError)(nil),                    // 85: vtrpc.RPCError
	(*topodata.TabletAlias)(nil),              // 86: topodata.TabletAlias
}
var file_query_proto_depIdxs = []int32{
	83,  // 0: query.Target.tablet_type:type_name -> topodata.TabletType
	2,   // 1: query.Value.type:type_name -> query.Type
	2,   // 2: query.BindVariable.type:type_name -> query.Type
	16,  // 3: query.BindVariable.values:type_name -> query.Value
	80,  // 4: query.BoundQuery.bind_variables:type_name -> query.BoundQuery.BindVariablesEntry
	6,   // 5: query.ExecuteOptions.included_fields:type_name -> query.ExecuteOptions.IncludedFields
	7,   // 6: query.ExecuteOptions.workload:type_name -> query.ExecuteOptions.Workload
	8,   // 7: query.ExecuteOptions.transaction_isolation:type_name -> query.ExecuteOptions.TransactionIsolation
	9,   // 8: query.ExecuteOptions.planner_version:type_name -> query.ExecuteOptions.PlannerVersion
	10,  // 9: query.ExecuteOptions.consolidator:type_name -> query.ExecuteOptions.Consolidator
	11,  // 10: query.ExecuteOptions.transaction_access_mode:type_name -> query.ExecuteOptions.TransactionAccessMode
	2,   // 11: query.Field.type:type_name -> query.Type
	20,  // 12: query.QueryResult.fields:type_name -> query.Field
	21,  // 13: query.QueryResult.rows:type_name -> query.Row
	81,  // 14: query.StreamEvent.statements:type_name -> query.StreamEvent.Statement
	15,  // 15: query.StreamEvent.event_token:type_name -> query.EventToken
	84,  // 16: query.ExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 17: query.ExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 18: query.ExecuteRequest.target:type_name -> query.Target
	18,  // 19: query.ExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 20: query.ExecuteRequest.options:type_name -> query.ExecuteOptions
	22,  // 21: query.ExecuteResponse.result:type_name -> query.QueryResult
	85,  // 22: query.ResultWithError.error:type_name -> vtrpc.RPCError
	22,  // 23: query.ResultWithError.result:type_name -> query.QueryResult
	84,  // 24: query.StreamExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 25: query.StreamExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 26: query.StreamExecuteRequest.target:type_name -> query.Target
	18,  // 27: query.StreamExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 28: query.StreamExecuteRequest.options:type_name -> query.ExecuteOptions
	22,  // 29: query.StreamExecuteResponse.result:type_name -> query.QueryResult
	84,  // 30: query.BeginRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 31: query.BeginRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 32: query.BeginRequest.target:type_name -> query.Target
	19,  // 33: query.BeginRequest.options:type_name -> query.ExecuteOptions
	86,  // 34: query.BeginResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 35: query.CommitRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 36: query.CommitRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 37: query.CommitRequest.target:type_name -> query.Target
	84,  // 38: query.RollbackRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 39: query.RollbackRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 40: query.RollbackRequest.target:type_name -> query.Target
	84,  // 41: query.PrepareRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 42: query.PrepareRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 43: query.PrepareRequest.target:type_name -> query.Target
	84,  // 44: query.CommitPreparedRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 45: query.CommitPreparedRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 46: query.CommitPreparedRequest.target:type_name -> query.Target
	84,  // 47: query.RollbackPreparedRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 48: query.RollbackPreparedRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 49: query.RollbackPreparedRequest.target:type_name -> query.Target
	84,  // 50: query.CreateTransactionRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 51: query.CreateTransactionRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 52: query.CreateTransactionRequest.target:type_name -> query.Target
	13,  // 53: query.CreateTransactionRequest.participants:type_name -> query.Target
	84,  // 54: query.StartCommitRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 55: query.StartCommitRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 56: query.StartCommitRequest.target:type_name -> query.Target
	3,   // 57: query.StartCommitResponse.state:type_name -> query.StartCommitState
	84,  // 58: query.SetRollbackRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 59: query.SetRollbackRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 60: query.SetRollbackRequest.target:type_name -> query.Target
	84,  // 61: query.ConcludeTransactionRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 62: query.ConcludeTransactionRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 63: query.ConcludeTransactionRequest.target:type_name -> query.Target
	84,  // 64: query.ReadTransactionRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 65: query.ReadTransactionRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 66: query.ReadTransactionRequest.target:type_name -> query.Target
	76,  // 67: query.ReadTransactionResponse.metadata:type_name -> query.TransactionMetadata
	84,  // 68: query.UnresolvedTransactionsRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 69: query.UnresolvedTransactionsRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 70: query.UnresolvedTransactionsRequest.target:type_name -> query.Target
	76,  // 71: query.UnresolvedTransactionsResponse.transactions:type_name -> query.TransactionMetadata
	84,  // 72: query.BeginExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 73: query.BeginExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 74: query.BeginExecuteRequest.target:type_name -> query.Target
	18,  // 75: query.BeginExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 76: query.BeginExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 77: query.BeginExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 78: query.BeginExecuteResponse.result:type_name -> query.QueryResult
	86,  // 79: query.BeginExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 80: query.BeginStreamExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 81: query.BeginStreamExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 82: query.BeginStreamExecuteRequest.target:type_name -> query.Target
	18,  // 83: query.BeginStreamExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 84: query.BeginStreamExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 85: query.BeginStreamExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 86: query.BeginStreamExecuteResponse.result:type_name -> query.QueryResult
	86,  // 87: query.BeginStreamExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 88: query.MessageStreamRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 89: query.MessageStreamRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 90: query.MessageStreamRequest.target:type_name -> query.Target
	22,  // 91: query.MessageStreamResponse.result:type_name -> query.QueryResult
	84,  // 92: query.MessageAckRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 93: query.MessageAckRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 94: query.MessageAckRequest.target:type_name -> query.Target
	16,  // 95: query.MessageAckRequest.ids:type_name -> query.Value
	22,  // 96: query.MessageAckResponse.result:type_name -> query.QueryResult
	84,  // 97: query.ReserveExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 98: query.ReserveExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 99: query.ReserveExecuteRequest.target:type_name -> query.Target
	18,  // 100: query.ReserveExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 101: query.ReserveExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 102: query.ReserveExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 103: query.ReserveExecuteResponse.result:type_name -> query.QueryResult
	86,  // 104: query.ReserveExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 105: query.ReserveStreamExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 106: query.ReserveStreamExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 107: query.ReserveStreamExecuteRequest.target:type_name -> query.Target
	18,  // 108: query.ReserveStreamExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 109: query.ReserveStreamExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 110: query.ReserveStreamExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 111: query.ReserveStreamExecuteResponse.result:type_name -> query.QueryResult
	86,  // 112: query.ReserveStreamExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 113: query.ReserveBeginExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 114: query.ReserveBeginExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 115: query.ReserveBeginExecuteRequest.target:type_name -> query.Target
	18,  // 116: query.ReserveBeginExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 117: query.ReserveBeginExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 118: query.ReserveBeginExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 119: query.ReserveBeginExecuteResponse.result:type_name -> query.QueryResult
	86,  // 120: query.ReserveBeginExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 121: query.ReserveBeginStreamExecuteRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 122: query.ReserveBeginStreamExecuteRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 123: query.ReserveBeginStreamExecuteRequest.target:type_name -> query.Target
	18,  // 124: query.ReserveBeginStreamExecuteRequest.query:type_name -> query.BoundQuery
	19,  // 125: query.ReserveBeginStreamExecuteRequest.options:type_name -> query.ExecuteOptions
	85,  // 126: query.ReserveBeginStreamExecuteResponse.error:type_name -> vtrpc.RPCError
	22,  // 127: query.ReserveBeginStreamExecuteResponse.result:type_name -> query.QueryResult
	86,  // 128: query.ReserveBeginStreamExecuteResponse.tablet_alias:type_name -> topodata.TabletAlias
	84,  // 129: query.ReleaseRequest.effective_caller_id:type_name -> vtrpc.CallerID
	14,  // 130: query.ReleaseRequest.immediate_caller_id:type_name -> query.VTGateCallerID
	13,  // 131: query.ReleaseRequest.target:type_name -> query.Target
	13,  // 132: query.StreamHealthResponse.target:type_name -> query.Target
	73,  // 133: query.StreamHealthResponse.realtime_stats:type_name -> query.RealtimeStats
	86,  // 134: query.StreamHealthResponse.tablet_alias:type_name -> topodata.TabletAlias
	4,   // 135: query.TransactionMetadata.state:type_name -> query.TransactionState
	13,  // 136: query.TransactionMetadata.participants:type_name -> query.Target
	13,  // 137: query.GetSchemaRequest.target:type_name -> query.Target
	5,   // 138: query.GetSchemaRequest.table_type:type_name -> query.SchemaTableType
	2,   // 139: query.UDFInfo.return_type:type_name -> query.Type
	78,  // 140: query.GetSchemaResponse.udfs:type_name -> query.UDFInfo
	82,  // 141: query.GetSchemaResponse.table_definition:type_name -> query.GetSchemaResponse.TableDefinitionEntry
	17,  // 142: query.BoundQuery.BindVariablesEntry.value:type_name -> query.BindVariable
	12,  // 143: query.StreamEvent.Statement.category:type_name -> query.StreamEvent.Statement.Category
	20,  // 144: query.StreamEvent.Statement.primary_key_fields:type_name -> query.Field
	21,  // 145: query.StreamEvent.Statement.primary_key_values:type_name -> query.Row
	146, // [146:146] is the sub-list for method output_type
	146, // [146:146] is the sub-list for method input_type
	146, // [146:146] is the sub-list for extension type_name
	146, // [146:146] is the sub-list for extension extendee
	0,   // [0:146] is the sub-list for field type_name
}

func init() { file_query_proto_init() }
func file_query_proto_init() {
	if File_query_proto != nil {
		return
	}
	file_query_proto_msgTypes[6].OneofWrappers = []any{
		(*ExecuteOptions_AuthoritativeTimeout)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_query_proto_rawDesc), len(file_query_proto_rawDesc)),
			NumEnums:      13,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_query_proto_goTypes,
		DependencyIndexes: file_query_proto_depIdxs,
		EnumInfos:         file_query_proto_enumTypes,
		MessageInfos:      file_query_proto_msgTypes,
	}.Build()
	File_query_proto = out.File
	file_query_proto_goTypes = nil
	file_query_proto_depIdxs = nil
}
