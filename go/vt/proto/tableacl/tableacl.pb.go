//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Table ACL proto definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: tableacl.proto

package tableacl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TableGroupSpec defines ACLs for a group of tables.
type TableGroupSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// either tables or a table name prefixes (if it ends in a %)
	TableNamesOrPrefixes []string `protobuf:"bytes,2,rep,name=table_names_or_prefixes,json=tableNamesOrPrefixes,proto3" json:"table_names_or_prefixes,omitempty"`
	Readers              []string `protobuf:"bytes,3,rep,name=readers,proto3" json:"readers,omitempty"`
	Writers              []string `protobuf:"bytes,4,rep,name=writers,proto3" json:"writers,omitempty"`
	Admins               []string `protobuf:"bytes,5,rep,name=admins,proto3" json:"admins,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TableGroupSpec) Reset() {
	*x = TableGroupSpec{}
	mi := &file_tableacl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGroupSpec) ProtoMessage() {}

func (x *TableGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tableacl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGroupSpec.ProtoReflect.Descriptor instead.
func (*TableGroupSpec) Descriptor() ([]byte, []int) {
	return file_tableacl_proto_rawDescGZIP(), []int{0}
}

func (x *TableGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableGroupSpec) GetTableNamesOrPrefixes() []string {
	if x != nil {
		return x.TableNamesOrPrefixes
	}
	return nil
}

func (x *TableGroupSpec) GetReaders() []string {
	if x != nil {
		return x.Readers
	}
	return nil
}

func (x *TableGroupSpec) GetWriters() []string {
	if x != nil {
		return x.Writers
	}
	return nil
}

func (x *TableGroupSpec) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableGroups   []*TableGroupSpec      `protobuf:"bytes,1,rep,name=table_groups,json=tableGroups,proto3" json:"table_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_tableacl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_tableacl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_tableacl_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetTableGroups() []*TableGroupSpec {
	if x != nil {
		return x.TableGroups
	}
	return nil
}

var File_tableacl_proto protoreflect.FileDescriptor

const file_tableacl_proto_rawDesc = "" +
	"\n" +
	"\x0etableacl.proto\x12\btableacl\"\xa7\x01\n" +
	"\x0eTableGroupSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x125\n" +
	"\x17table_names_or_prefixes\x18\x02 \x03(\tR\x14tableNamesOrPrefixes\x12\x18\n" +
	"\areaders\x18\x03 \x03(\tR\areaders\x12\x18\n" +
	"\awriters\x18\x04 \x03(\tR\awriters\x12\x16\n" +
	"\x06admins\x18\x05 \x03(\tR\x06admins\"E\n" +
	"\x06Config\x12;\n" +
	"\ftable_groups\x18\x01 \x03(\v2\x18.tableacl.TableGroupSpecR\vtableGroupsB'Z%vitess.io/vitess/go/vt/proto/tableaclb\x06proto3"

var (
	file_tableacl_proto_rawDescOnce sync.Once
	file_tableacl_proto_rawDescData []byte
)

func file_tableacl_proto_rawDescGZIP() []byte {
	file_tableacl_proto_rawDescOnce.Do(func() {
		file_tableacl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tableacl_proto_rawDesc), len(file_tableacl_proto_rawDesc)))
	})
	return file_tableacl_proto_rawDescData
}

var file_tableacl_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tableacl_proto_goTypes = []any{
	(*TableGroupSpec)(nil), // 0: tableacl.TableGroupSpec
	(*Config)(nil),         // 1: tableacl.Config
}
var file_tableacl_proto_depIdxs = []int32{
	0, // 0: tableacl.Config.table_groups:type_name -> tableacl.TableGroupSpec
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tableacl_proto_init() }
func file_tableacl_proto_init() {
	if File_tableacl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tableacl_proto_rawDesc), len(file_tableacl_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tableacl_proto_goTypes,
		DependencyIndexes: file_tableacl_proto_depIdxs,
		MessageInfos:      file_tableacl_proto_msgTypes,
	}.Build()
	File_tableacl_proto = out.File
	file_tableacl_proto_goTypes = nil
	file_tableacl_proto_depIdxs = nil
}
