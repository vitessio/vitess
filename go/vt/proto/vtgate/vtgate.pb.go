// Code generated by protoc-gen-go.
// source: vtgate.proto
// DO NOT EDIT!

/*
Package vtgate is a generated protocol buffer package.

It is generated from these files:
	vtgate.proto

It has these top-level messages:
	Session
	ExecuteRequest
	ExecuteResponse
	ExecuteShardsRequest
	ExecuteShardsResponse
	ExecuteKeyspaceIdsRequest
	ExecuteKeyspaceIdsResponse
	ExecuteKeyRangesRequest
	ExecuteKeyRangesResponse
	ExecuteEntityIdsRequest
	ExecuteEntityIdsResponse
	ExecuteBatchRequest
	QueryResponse
	ExecuteBatchResponse
	BoundShardQuery
	ExecuteBatchShardsRequest
	ExecuteBatchShardsResponse
	BoundKeyspaceIdQuery
	ExecuteBatchKeyspaceIdsRequest
	ExecuteBatchKeyspaceIdsResponse
	StreamExecuteRequest
	StreamExecuteResponse
	StreamExecuteShardsRequest
	StreamExecuteShardsResponse
	StreamExecuteKeyspaceIdsRequest
	StreamExecuteKeyspaceIdsResponse
	StreamExecuteKeyRangesRequest
	StreamExecuteKeyRangesResponse
	BeginRequest
	BeginResponse
	CommitRequest
	CommitResponse
	RollbackRequest
	RollbackResponse
	ResolveTransactionRequest
	ResolveTransactionResponse
	SplitQueryRequest
	SplitQueryResponse
	GetSrvKeyspaceRequest
	GetSrvKeyspaceResponse
	UpdateStreamRequest
	UpdateStreamResponse
*/
package vtgate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import query "github.com/youtube/vitess/go/vt/proto/query"
import topodata "github.com/youtube/vitess/go/vt/proto/topodata"
import vtrpc "github.com/youtube/vitess/go/vt/proto/vtrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Session objects are session cookies and are invalidated on
// use. Query results will contain updated session values.
// Their content should be opaque to the user.
type Session struct {
	InTransaction bool                    `protobuf:"varint,1,opt,name=in_transaction,json=inTransaction" json:"in_transaction,omitempty"`
	ShardSessions []*Session_ShardSession `protobuf:"bytes,2,rep,name=shard_sessions,json=shardSessions" json:"shard_sessions,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Session) GetShardSessions() []*Session_ShardSession {
	if m != nil {
		return m.ShardSessions
	}
	return nil
}

type Session_ShardSession struct {
	Target        *query.Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	TransactionId int64         `protobuf:"varint,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *Session_ShardSession) Reset()                    { *m = Session_ShardSession{} }
func (m *Session_ShardSession) String() string            { return proto.CompactTextString(m) }
func (*Session_ShardSession) ProtoMessage()               {}
func (*Session_ShardSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Session_ShardSession) GetTarget() *query.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// ExecuteRequest is the payload to Execute.
type ExecuteRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// not_in_transaction is deprecated and should not be used.
	NotInTransaction bool `protobuf:"varint,5,opt,name=not_in_transaction,json=notInTransaction" json:"not_in_transaction,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,6,opt,name=keyspace" json:"keyspace,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,7,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecuteRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteResponse is the returned value from Execute.
type ExecuteResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecuteResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteShardsRequest is the payload to ExecuteShards.
type ExecuteShardsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	// shards to target the query to. A DML can only target one shard.
	Shards []string `protobuf:"bytes,5,rep,name=shards" json:"shards,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,6,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// not_in_transaction is deprecated and should not be used.
	NotInTransaction bool `protobuf:"varint,7,opt,name=not_in_transaction,json=notInTransaction" json:"not_in_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteShardsRequest) Reset()                    { *m = ExecuteShardsRequest{} }
func (m *ExecuteShardsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteShardsRequest) ProtoMessage()               {}
func (*ExecuteShardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecuteShardsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteShardsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteShardsRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteShardsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteShardsResponse is the returned value from ExecuteShards.
type ExecuteShardsResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteShardsResponse) Reset()                    { *m = ExecuteShardsResponse{} }
func (m *ExecuteShardsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteShardsResponse) ProtoMessage()               {}
func (*ExecuteShardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecuteShardsResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteShardsResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteShardsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteKeyspaceIdsRequest is the payload to ExecuteKeyspaceIds.
type ExecuteKeyspaceIdsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	// keyspace_ids contains the list of keyspace_ids affected by this query.
	// Will be used to find the shards to send the query to.
	KeyspaceIds [][]byte `protobuf:"bytes,5,rep,name=keyspace_ids,json=keyspaceIds,proto3" json:"keyspace_ids,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,6,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// not_in_transaction is deprecated and should not be used.
	NotInTransaction bool `protobuf:"varint,7,opt,name=not_in_transaction,json=notInTransaction" json:"not_in_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteKeyspaceIdsRequest) Reset()                    { *m = ExecuteKeyspaceIdsRequest{} }
func (m *ExecuteKeyspaceIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteKeyspaceIdsRequest) ProtoMessage()               {}
func (*ExecuteKeyspaceIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ExecuteKeyspaceIdsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteKeyspaceIdsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteKeyspaceIdsRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteKeyspaceIdsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteKeyspaceIdsResponse is the returned value from ExecuteKeyspaceIds.
type ExecuteKeyspaceIdsResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteKeyspaceIdsResponse) Reset()                    { *m = ExecuteKeyspaceIdsResponse{} }
func (m *ExecuteKeyspaceIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteKeyspaceIdsResponse) ProtoMessage()               {}
func (*ExecuteKeyspaceIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExecuteKeyspaceIdsResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteKeyspaceIdsResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteKeyspaceIdsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteKeyRangesRequest is the payload to ExecuteKeyRanges.
type ExecuteKeyRangesRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to
	Keyspace string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	// key_ranges contains the list of key ranges affected by this query.
	// Will be used to find the shards to send the query to.
	KeyRanges []*topodata.KeyRange `protobuf:"bytes,5,rep,name=key_ranges,json=keyRanges" json:"key_ranges,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,6,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// not_in_transaction is deprecated and should not be used.
	NotInTransaction bool `protobuf:"varint,7,opt,name=not_in_transaction,json=notInTransaction" json:"not_in_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteKeyRangesRequest) Reset()                    { *m = ExecuteKeyRangesRequest{} }
func (m *ExecuteKeyRangesRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteKeyRangesRequest) ProtoMessage()               {}
func (*ExecuteKeyRangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecuteKeyRangesRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteKeyRangesRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteKeyRangesRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteKeyRangesRequest) GetKeyRanges() []*topodata.KeyRange {
	if m != nil {
		return m.KeyRanges
	}
	return nil
}

func (m *ExecuteKeyRangesRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteKeyRangesResponse is the returned value from ExecuteKeyRanges.
type ExecuteKeyRangesResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteKeyRangesResponse) Reset()                    { *m = ExecuteKeyRangesResponse{} }
func (m *ExecuteKeyRangesResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteKeyRangesResponse) ProtoMessage()               {}
func (*ExecuteKeyRangesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ExecuteKeyRangesResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteKeyRangesResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteKeyRangesResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteEntityIdsRequest is the payload to ExecuteEntityIds.
type ExecuteEntityIdsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	// entity_column_name is the column name to use.
	EntityColumnName string `protobuf:"bytes,5,opt,name=entity_column_name,json=entityColumnName" json:"entity_column_name,omitempty"`
	// entity_keyspace_ids are pairs of entity_column_name values
	// associated with its corresponding keyspace_id.
	EntityKeyspaceIds []*ExecuteEntityIdsRequest_EntityId `protobuf:"bytes,6,rep,name=entity_keyspace_ids,json=entityKeyspaceIds" json:"entity_keyspace_ids,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,7,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// not_in_transaction is deprecated and should not be used.
	NotInTransaction bool `protobuf:"varint,8,opt,name=not_in_transaction,json=notInTransaction" json:"not_in_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,9,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteEntityIdsRequest) Reset()                    { *m = ExecuteEntityIdsRequest{} }
func (m *ExecuteEntityIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteEntityIdsRequest) ProtoMessage()               {}
func (*ExecuteEntityIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ExecuteEntityIdsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteEntityIdsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteEntityIdsRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteEntityIdsRequest) GetEntityKeyspaceIds() []*ExecuteEntityIdsRequest_EntityId {
	if m != nil {
		return m.EntityKeyspaceIds
	}
	return nil
}

func (m *ExecuteEntityIdsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ExecuteEntityIdsRequest_EntityId struct {
	// type is the type of the entity's value. Can be NULL_TYPE.
	Type query.Type `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	// value is the value for the entity. Not set if type is NULL_TYPE.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// keyspace_id is the associated keyspace_id for the entity.
	KeyspaceId []byte `protobuf:"bytes,3,opt,name=keyspace_id,json=keyspaceId,proto3" json:"keyspace_id,omitempty"`
}

func (m *ExecuteEntityIdsRequest_EntityId) Reset()         { *m = ExecuteEntityIdsRequest_EntityId{} }
func (m *ExecuteEntityIdsRequest_EntityId) String() string { return proto.CompactTextString(m) }
func (*ExecuteEntityIdsRequest_EntityId) ProtoMessage()    {}
func (*ExecuteEntityIdsRequest_EntityId) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

// ExecuteEntityIdsResponse is the returned value from ExecuteEntityIds.
type ExecuteEntityIdsResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ExecuteEntityIdsResponse) Reset()                    { *m = ExecuteEntityIdsResponse{} }
func (m *ExecuteEntityIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteEntityIdsResponse) ProtoMessage()               {}
func (*ExecuteEntityIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExecuteEntityIdsResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteEntityIdsResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteEntityIdsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch.
type ExecuteBatchRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Queries []*query.BoundQuery `protobuf:"bytes,3,rep,name=queries" json:"queries,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// as_transaction will execute the queries in this batch in a single transaction per shard,
	// created for this purpose.
	// (this can be seen as adding a 'begin' before and 'commit' after the queries).
	// Only makes sense if tablet_type is master. If set, the Session is ignored.
	AsTransaction bool `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,6,opt,name=keyspace" json:"keyspace,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,7,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteBatchRequest) Reset()                    { *m = ExecuteBatchRequest{} }
func (m *ExecuteBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchRequest) ProtoMessage()               {}
func (*ExecuteBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ExecuteBatchRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchRequest) GetQueries() []*query.BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// QueryResponse represents a query response
// in the form of result or error but not both.
// This is used in a list for ExecuteBatchResponse.
type QueryResponse struct {
	// error contains an query level error, only set if result is unset.
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *query.QueryResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch.
type ExecuteBatchResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// results contains the query results, only set if application level error is unset.
	Results []*QueryResponse `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

func (m *ExecuteBatchResponse) Reset()                    { *m = ExecuteBatchResponse{} }
func (m *ExecuteBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchResponse) ProtoMessage()               {}
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ExecuteBatchResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteBatchResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchResponse) GetResults() []*QueryResponse {
	if m != nil {
		return m.Results
	}
	return nil
}

// BoundShardQuery represents a single query request for the
// specified list of shards. This is used in a list for
// ExecuteBatchShardsRequest.
type BoundShardQuery struct {
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	// shards to target the query to. A DML can only target one shard.
	Shards []string `protobuf:"bytes,3,rep,name=shards" json:"shards,omitempty"`
}

func (m *BoundShardQuery) Reset()                    { *m = BoundShardQuery{} }
func (m *BoundShardQuery) String() string            { return proto.CompactTextString(m) }
func (*BoundShardQuery) ProtoMessage()               {}
func (*BoundShardQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BoundShardQuery) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// ExecuteBatchShardsRequest is the payload to ExecuteBatchShards
type ExecuteBatchShardsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// queries carries all the queries to execute.
	Queries []*BoundShardQuery `protobuf:"bytes,3,rep,name=queries" json:"queries,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// as_transaction will execute the queries in this batch in a single transaction per shard, created for this purpose.
	// (this can be seen as adding a 'begin' before and 'commit' after the queries).
	// Only makes sense if tablet_type is master. If set, the Session is ignored.
	AsTransaction bool `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteBatchShardsRequest) Reset()                    { *m = ExecuteBatchShardsRequest{} }
func (m *ExecuteBatchShardsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchShardsRequest) ProtoMessage()               {}
func (*ExecuteBatchShardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ExecuteBatchShardsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteBatchShardsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchShardsRequest) GetQueries() []*BoundShardQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchShardsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteBatchShardsResponse is the returned value from ExecuteBatchShards.
type ExecuteBatchShardsResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Results []*query.QueryResult `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

func (m *ExecuteBatchShardsResponse) Reset()                    { *m = ExecuteBatchShardsResponse{} }
func (m *ExecuteBatchShardsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchShardsResponse) ProtoMessage()               {}
func (*ExecuteBatchShardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ExecuteBatchShardsResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteBatchShardsResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchShardsResponse) GetResults() []*query.QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// BoundKeyspaceIdQuery represents a single query request for the
// specified list of keyspace ids. This is used in a list for
// ExecuteBatchKeyspaceIdsRequest.
type BoundKeyspaceIdQuery struct {
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	// keyspace_ids contains the list of keyspace_ids affected by this query.
	// Will be used to find the shards to send the query to.
	KeyspaceIds [][]byte `protobuf:"bytes,3,rep,name=keyspace_ids,json=keyspaceIds,proto3" json:"keyspace_ids,omitempty"`
}

func (m *BoundKeyspaceIdQuery) Reset()                    { *m = BoundKeyspaceIdQuery{} }
func (m *BoundKeyspaceIdQuery) String() string            { return proto.CompactTextString(m) }
func (*BoundKeyspaceIdQuery) ProtoMessage()               {}
func (*BoundKeyspaceIdQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BoundKeyspaceIdQuery) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// ExecuteBatchKeyspaceIdsRequest is the payload to ExecuteBatchKeyspaceId.
type ExecuteBatchKeyspaceIdsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data. It is returned by Begin.
	// Do not fill it in if outside of a transaction.
	Session *Session                `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	Queries []*BoundKeyspaceIdQuery `protobuf:"bytes,3,rep,name=queries" json:"queries,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// as_transaction will execute the queries in this batch in a single transaction per shard, created for this purpose.
	// (this can be seen as adding a 'begin' before and 'commit' after the queries).
	// Only makes sense if tablet_type is master. If set, the Session is ignored.
	AsTransaction bool `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *ExecuteBatchKeyspaceIdsRequest) Reset()                    { *m = ExecuteBatchKeyspaceIdsRequest{} }
func (m *ExecuteBatchKeyspaceIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchKeyspaceIdsRequest) ProtoMessage()               {}
func (*ExecuteBatchKeyspaceIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ExecuteBatchKeyspaceIdsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteBatchKeyspaceIdsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchKeyspaceIdsRequest) GetQueries() []*BoundKeyspaceIdQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchKeyspaceIdsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteBatchKeyspaceIdsResponse is the returned value from ExecuteBatchKeyspaceId.
type ExecuteBatchKeyspaceIdsResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// session is the updated session information (only returned inside a transaction).
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Results []*query.QueryResult `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

func (m *ExecuteBatchKeyspaceIdsResponse) Reset()         { *m = ExecuteBatchKeyspaceIdsResponse{} }
func (m *ExecuteBatchKeyspaceIdsResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchKeyspaceIdsResponse) ProtoMessage()    {}
func (*ExecuteBatchKeyspaceIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *ExecuteBatchKeyspaceIdsResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteBatchKeyspaceIdsResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchKeyspaceIdsResponse) GetResults() []*query.QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute.
type StreamExecuteRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *StreamExecuteRequest) Reset()                    { *m = StreamExecuteRequest{} }
func (m *StreamExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteRequest) ProtoMessage()               {}
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *StreamExecuteRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// StreamExecuteResponse is the returned value from StreamExecute.
type StreamExecuteResponse struct {
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *StreamExecuteResponse) Reset()                    { *m = StreamExecuteResponse{} }
func (m *StreamExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteResponse) ProtoMessage()               {}
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *StreamExecuteResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// StreamExecuteShardsRequest is the payload to StreamExecuteShards.
type StreamExecuteShardsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	// shards to target the query to.
	Shards []string `protobuf:"bytes,4,rep,name=shards" json:"shards,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,5,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *StreamExecuteShardsRequest) Reset()                    { *m = StreamExecuteShardsRequest{} }
func (m *StreamExecuteShardsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteShardsRequest) ProtoMessage()               {}
func (*StreamExecuteShardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *StreamExecuteShardsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *StreamExecuteShardsRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteShardsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// StreamExecuteShardsResponse is the returned value from StreamExecuteShards.
type StreamExecuteShardsResponse struct {
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *StreamExecuteShardsResponse) Reset()                    { *m = StreamExecuteShardsResponse{} }
func (m *StreamExecuteShardsResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteShardsResponse) ProtoMessage()               {}
func (*StreamExecuteShardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *StreamExecuteShardsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// StreamExecuteKeyspaceIdsRequest is the payload to StreamExecuteKeyspaceIds.
type StreamExecuteKeyspaceIdsRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	// keyspace_ids contains the list of keyspace_ids affected by this query.
	// Will be used to find the shards to send the query to.
	KeyspaceIds [][]byte `protobuf:"bytes,4,rep,name=keyspace_ids,json=keyspaceIds,proto3" json:"keyspace_ids,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,5,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *StreamExecuteKeyspaceIdsRequest) Reset()         { *m = StreamExecuteKeyspaceIdsRequest{} }
func (m *StreamExecuteKeyspaceIdsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteKeyspaceIdsRequest) ProtoMessage()    {}
func (*StreamExecuteKeyspaceIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *StreamExecuteKeyspaceIdsRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *StreamExecuteKeyspaceIdsRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteKeyspaceIdsRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// StreamExecuteKeyspaceIdsResponse is the returned value from StreamExecuteKeyspaceIds.
type StreamExecuteKeyspaceIdsResponse struct {
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *StreamExecuteKeyspaceIdsResponse) Reset()         { *m = StreamExecuteKeyspaceIdsResponse{} }
func (m *StreamExecuteKeyspaceIdsResponse) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteKeyspaceIdsResponse) ProtoMessage()    {}
func (*StreamExecuteKeyspaceIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *StreamExecuteKeyspaceIdsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// StreamExecuteKeyRangesRequest is the payload to StreamExecuteKeyRanges.
type StreamExecuteKeyRangesRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	// key_ranges contains the list of key ranges affected by this query.
	// Will be used to find the shards to send the query to.
	KeyRanges []*topodata.KeyRange `protobuf:"bytes,4,rep,name=key_ranges,json=keyRanges" json:"key_ranges,omitempty"`
	// tablet_type is the type of tablets that this query is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,5,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// options
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *StreamExecuteKeyRangesRequest) Reset()                    { *m = StreamExecuteKeyRangesRequest{} }
func (m *StreamExecuteKeyRangesRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteKeyRangesRequest) ProtoMessage()               {}
func (*StreamExecuteKeyRangesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *StreamExecuteKeyRangesRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *StreamExecuteKeyRangesRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteKeyRangesRequest) GetKeyRanges() []*topodata.KeyRange {
	if m != nil {
		return m.KeyRanges
	}
	return nil
}

func (m *StreamExecuteKeyRangesRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// StreamExecuteKeyRangesResponse is the returned value from StreamExecuteKeyRanges.
type StreamExecuteKeyRangesResponse struct {
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *StreamExecuteKeyRangesResponse) Reset()                    { *m = StreamExecuteKeyRangesResponse{} }
func (m *StreamExecuteKeyRangesResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamExecuteKeyRangesResponse) ProtoMessage()               {}
func (*StreamExecuteKeyRangesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *StreamExecuteKeyRangesResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// BeginRequest is the payload to Begin.
type BeginRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

func (m *BeginRequest) Reset()                    { *m = BeginRequest{} }
func (m *BeginRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginRequest) ProtoMessage()               {}
func (*BeginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BeginRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

// BeginResponse is the returned value from Begin.
type BeginResponse struct {
	// session is the initial session information to use for subsequent queries.
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *BeginResponse) Reset()                    { *m = BeginResponse{} }
func (m *BeginResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginResponse) ProtoMessage()               {}
func (*BeginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BeginResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// CommitRequest is the payload to Commit.
type CommitRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data to commit.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	// atomic specifies if the commit should go through the
	// 2PC workflow to ensure atomicity.
	Atomic bool `protobuf:"varint,3,opt,name=atomic" json:"atomic,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CommitRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *CommitRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// CommitResponse is the returned value from Commit.
type CommitResponse struct {
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

// RollbackRequest is the payload to Rollback.
type RollbackRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// session carries the current transaction data to rollback.
	Session *Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
}

func (m *RollbackRequest) Reset()                    { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string            { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()               {}
func (*RollbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RollbackRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *RollbackRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// RollbackResponse is the returned value from Rollback.
type RollbackResponse struct {
}

func (m *RollbackResponse) Reset()                    { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()               {}
func (*RollbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

// ResolveTransactionRequest is the payload to ResolveTransaction.
type ResolveTransactionRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// dtid is the dtid of the transaction to be resolved.
	Dtid string `protobuf:"bytes,2,opt,name=dtid" json:"dtid,omitempty"`
}

func (m *ResolveTransactionRequest) Reset()                    { *m = ResolveTransactionRequest{} }
func (m *ResolveTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveTransactionRequest) ProtoMessage()               {}
func (*ResolveTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ResolveTransactionRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

// ResolveTransactionResponse is the returned value from Rollback.
type ResolveTransactionResponse struct {
}

func (m *ResolveTransactionResponse) Reset()                    { *m = ResolveTransactionResponse{} }
func (m *ResolveTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*ResolveTransactionResponse) ProtoMessage()               {}
func (*ResolveTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

// SplitQueryRequest is the payload to SplitQuery.
//
// SplitQuery takes a "SELECT" query and generates a list of queries called
// "query-parts". Each query-part consists of the original query with an
// added WHERE clause that restricts the query-part to operate only on
// rows whose values in the the columns listed in the "split_column" field
// of the request (see below) are in a particular range.
//
// It is guaranteed that the set of rows obtained from
// executing each query-part on a database snapshot
// and merging (without deduping) the results is equal to the set of rows
// obtained from executing the original query on the same snapshot
// with the rows containing NULL values in any of the split_column's excluded.
//
// This is typically called by the MapReduce master when reading from Vitess.
// There it's desirable that the sets of rows returned by the query-parts
// have roughly the same size.
type SplitQueryRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	// The query and bind variables to produce splits for.
	// The given query must be a simple query of the form
	// SELECT <cols> FROM <table> WHERE <filter>.
	// It must not contain subqueries nor any of the keywords
	// JOIN, GROUP BY, ORDER BY, LIMIT, DISTINCT.
	// Furthermore, <table> must be a single “concrete” table.
	// It cannot be a view.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// Each generated query-part will be restricted to rows whose values
	// in the columns listed in this field are in a particular range.
	// The list of columns named here must be a prefix of the list of
	// columns defining some index or primary key of the table
	// referenced in 'query'. For many tables using the primary key columns
	// (in order) is sufficient and this is the default if this field is omitted.
	// See the comment on the 'algorithm' field for more restrictions and
	// information.
	SplitColumn []string `protobuf:"bytes,4,rep,name=split_column,json=splitColumn" json:"split_column,omitempty"`
	// You can specify either an estimate of the number of query-parts to
	// generate or an estimate of the number of rows each query-part should
	// return.
	// Thus, exactly one of split_count or num_rows_per_query_part
	// should be nonzero.
	// The non-given parameter is calculated from the given parameter
	// using the formula: split_count * num_rows_per_query_pary = table_size,
	// where table_size is an approximation of the number of rows in the
	// table.
	// Note that if "split_count" is given it is regarded as an estimate.
	// The number of query-parts returned may differ slightly (in particular,
	// if it's not a whole multiple of the number of vitess shards).
	SplitCount          int64 `protobuf:"varint,5,opt,name=split_count,json=splitCount" json:"split_count,omitempty"`
	NumRowsPerQueryPart int64 `protobuf:"varint,6,opt,name=num_rows_per_query_part,json=numRowsPerQueryPart" json:"num_rows_per_query_part,omitempty"`
	// The algorithm to use to split the query. The split algorithm is performed
	// on each database shard in parallel. The lists of query-parts generated
	// by the shards are merged and returned to the caller.
	// Two algorithms are supported:
	//  EQUAL_SPLITS
	//    If this algorithm is selected then only the first 'split_column' given
	//    is used (or the first primary key column if the 'split_column' field is
	//    empty). In the rest of this algorithm's description, we refer to
	//    this column as "the split column".
	//    The split column must have numeric type (integral or floating point).
	//    The algorithm works by taking the interval [min, max], where min and
	//    max are the minimum and maximum values of the split column in
	//    the table-shard, respectively, and partitioning it into 'split_count'
	//    sub-intervals of equal size. The added WHERE clause of each query-part
	//    restricts that part to rows whose value in the split column belongs to
	//    a particular sub-interval. This is fast, but requires that the
	//    distribution of values of the split column be uniform in [min, max]
	//    for the number of rows returned by each query part to be roughly the
	//    same.
	//  FULL_SCAN
	//    If this algorithm is used then the split_column must be the primary key
	//    columns (in order).
	//    This algorithm performs a full-scan of the table-shard referenced
	//    in 'query' to get "boundary" rows that are num_rows_per_query_part
	//    apart when the table is ordered by the columns listed in
	//    'split_column'. It then restricts each query-part to the rows
	//    located between two successive boundary rows.
	//    This algorithm supports multiple split_column's of any type,
	//    but is slower than EQUAL_SPLITS.
	Algorithm query.SplitQueryRequest_Algorithm `protobuf:"varint,7,opt,name=algorithm,enum=query.SplitQueryRequest_Algorithm" json:"algorithm,omitempty"`
	// TODO(erez): This field is no longer used by the server code.
	// Remove this field after this new server code is released to prod.
	// We must keep it for now, so that clients can still send it to the old
	// server code currently in production.
	UseSplitQueryV2 bool `protobuf:"varint,8,opt,name=use_split_query_v2,json=useSplitQueryV2" json:"use_split_query_v2,omitempty"`
}

func (m *SplitQueryRequest) Reset()                    { *m = SplitQueryRequest{} }
func (m *SplitQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitQueryRequest) ProtoMessage()               {}
func (*SplitQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *SplitQueryRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *SplitQueryRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// SplitQueryResponse is the returned value from SplitQuery.
type SplitQueryResponse struct {
	// splits contains the queries to run to fetch the entire data set.
	Splits []*SplitQueryResponse_Part `protobuf:"bytes,1,rep,name=splits" json:"splits,omitempty"`
}

func (m *SplitQueryResponse) Reset()                    { *m = SplitQueryResponse{} }
func (m *SplitQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitQueryResponse) ProtoMessage()               {}
func (*SplitQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SplitQueryResponse) GetSplits() []*SplitQueryResponse_Part {
	if m != nil {
		return m.Splits
	}
	return nil
}

type SplitQueryResponse_KeyRangePart struct {
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	// key ranges to target the query to.
	KeyRanges []*topodata.KeyRange `protobuf:"bytes,2,rep,name=key_ranges,json=keyRanges" json:"key_ranges,omitempty"`
}

func (m *SplitQueryResponse_KeyRangePart) Reset()         { *m = SplitQueryResponse_KeyRangePart{} }
func (m *SplitQueryResponse_KeyRangePart) String() string { return proto.CompactTextString(m) }
func (*SplitQueryResponse_KeyRangePart) ProtoMessage()    {}
func (*SplitQueryResponse_KeyRangePart) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

func (m *SplitQueryResponse_KeyRangePart) GetKeyRanges() []*topodata.KeyRange {
	if m != nil {
		return m.KeyRanges
	}
	return nil
}

type SplitQueryResponse_ShardPart struct {
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	// shards to target the query to.
	Shards []string `protobuf:"bytes,2,rep,name=shards" json:"shards,omitempty"`
}

func (m *SplitQueryResponse_ShardPart) Reset()         { *m = SplitQueryResponse_ShardPart{} }
func (m *SplitQueryResponse_ShardPart) String() string { return proto.CompactTextString(m) }
func (*SplitQueryResponse_ShardPart) ProtoMessage()    {}
func (*SplitQueryResponse_ShardPart) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 1}
}

type SplitQueryResponse_Part struct {
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// key_range_part is set if the query should be executed by
	// ExecuteKeyRanges.
	KeyRangePart *SplitQueryResponse_KeyRangePart `protobuf:"bytes,2,opt,name=key_range_part,json=keyRangePart" json:"key_range_part,omitempty"`
	// shard_part is set if the query should be executed by ExecuteShards.
	ShardPart *SplitQueryResponse_ShardPart `protobuf:"bytes,3,opt,name=shard_part,json=shardPart" json:"shard_part,omitempty"`
	// size is the approximate number of rows this query will return.
	Size int64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *SplitQueryResponse_Part) Reset()                    { *m = SplitQueryResponse_Part{} }
func (m *SplitQueryResponse_Part) String() string            { return proto.CompactTextString(m) }
func (*SplitQueryResponse_Part) ProtoMessage()               {}
func (*SplitQueryResponse_Part) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 2} }

func (m *SplitQueryResponse_Part) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SplitQueryResponse_Part) GetKeyRangePart() *SplitQueryResponse_KeyRangePart {
	if m != nil {
		return m.KeyRangePart
	}
	return nil
}

func (m *SplitQueryResponse_Part) GetShardPart() *SplitQueryResponse_ShardPart {
	if m != nil {
		return m.ShardPart
	}
	return nil
}

// GetSrvKeyspaceRequest is the payload to GetSrvKeyspace.
type GetSrvKeyspaceRequest struct {
	// keyspace name to fetch.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *GetSrvKeyspaceRequest) Reset()                    { *m = GetSrvKeyspaceRequest{} }
func (m *GetSrvKeyspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSrvKeyspaceRequest) ProtoMessage()               {}
func (*GetSrvKeyspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

// GetSrvKeyspaceResponse is the returned value from GetSrvKeyspace.
type GetSrvKeyspaceResponse struct {
	// srv_keyspace is the topology object for the SrvKeyspace.
	SrvKeyspace *topodata.SrvKeyspace `protobuf:"bytes,1,opt,name=srv_keyspace,json=srvKeyspace" json:"srv_keyspace,omitempty"`
}

func (m *GetSrvKeyspaceResponse) Reset()                    { *m = GetSrvKeyspaceResponse{} }
func (m *GetSrvKeyspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSrvKeyspaceResponse) ProtoMessage()               {}
func (*GetSrvKeyspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GetSrvKeyspaceResponse) GetSrvKeyspace() *topodata.SrvKeyspace {
	if m != nil {
		return m.SrvKeyspace
	}
	return nil
}

// UpdateStreamRequest is the payload to UpdateStream.
type UpdateStreamRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// keyspace to target the query to.
	Keyspace string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	// shard to target the query to, for unsharded keyspaces.
	Shard string `protobuf:"bytes,3,opt,name=shard" json:"shard,omitempty"`
	// KeyRange to target the query to, for sharded keyspaces.
	KeyRange *topodata.KeyRange `protobuf:"bytes,4,opt,name=key_range,json=keyRange" json:"key_range,omitempty"`
	// tablet_type is the type of tablets that this request is targeted to.
	TabletType topodata.TabletType `protobuf:"varint,5,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// timestamp is the timestamp to start the stream from.  It is
	// unused is event is set, and we are only streaming from the shard
	// described by event.shard.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// event is the event to start the stream from.
	// Note it is only used if we are streaming from exactly the same shard
	// as this event was coming from. Otherwise we can't use this event,
	// and will use the timestamp as a starting point.
	Event *query.EventToken `protobuf:"bytes,7,opt,name=event" json:"event,omitempty"`
}

func (m *UpdateStreamRequest) Reset()                    { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()               {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *UpdateStreamRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *UpdateStreamRequest) GetKeyRange() *topodata.KeyRange {
	if m != nil {
		return m.KeyRange
	}
	return nil
}

func (m *UpdateStreamRequest) GetEvent() *query.EventToken {
	if m != nil {
		return m.Event
	}
	return nil
}

// UpdateStreamResponse is streamed by UpdateStream.
type UpdateStreamResponse struct {
	// event is one event from the stream.
	Event *query.StreamEvent `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	// resume_timestamp is the timestamp to resume streaming from if the
	// client is interrupted. If the Update Stream only goes to one
	// shard, this is equal to event.timestamp. If the Update Stream
	// goes to multiple shards and aggregates, this is the minimum value
	// of the current timestamp for all shards.
	ResumeTimestamp int64 `protobuf:"varint,2,opt,name=resume_timestamp,json=resumeTimestamp" json:"resume_timestamp,omitempty"`
}

func (m *UpdateStreamResponse) Reset()                    { *m = UpdateStreamResponse{} }
func (m *UpdateStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateStreamResponse) ProtoMessage()               {}
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *UpdateStreamResponse) GetEvent() *query.StreamEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "vtgate.Session")
	proto.RegisterType((*Session_ShardSession)(nil), "vtgate.Session.ShardSession")
	proto.RegisterType((*ExecuteRequest)(nil), "vtgate.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "vtgate.ExecuteResponse")
	proto.RegisterType((*ExecuteShardsRequest)(nil), "vtgate.ExecuteShardsRequest")
	proto.RegisterType((*ExecuteShardsResponse)(nil), "vtgate.ExecuteShardsResponse")
	proto.RegisterType((*ExecuteKeyspaceIdsRequest)(nil), "vtgate.ExecuteKeyspaceIdsRequest")
	proto.RegisterType((*ExecuteKeyspaceIdsResponse)(nil), "vtgate.ExecuteKeyspaceIdsResponse")
	proto.RegisterType((*ExecuteKeyRangesRequest)(nil), "vtgate.ExecuteKeyRangesRequest")
	proto.RegisterType((*ExecuteKeyRangesResponse)(nil), "vtgate.ExecuteKeyRangesResponse")
	proto.RegisterType((*ExecuteEntityIdsRequest)(nil), "vtgate.ExecuteEntityIdsRequest")
	proto.RegisterType((*ExecuteEntityIdsRequest_EntityId)(nil), "vtgate.ExecuteEntityIdsRequest.EntityId")
	proto.RegisterType((*ExecuteEntityIdsResponse)(nil), "vtgate.ExecuteEntityIdsResponse")
	proto.RegisterType((*ExecuteBatchRequest)(nil), "vtgate.ExecuteBatchRequest")
	proto.RegisterType((*QueryResponse)(nil), "vtgate.QueryResponse")
	proto.RegisterType((*ExecuteBatchResponse)(nil), "vtgate.ExecuteBatchResponse")
	proto.RegisterType((*BoundShardQuery)(nil), "vtgate.BoundShardQuery")
	proto.RegisterType((*ExecuteBatchShardsRequest)(nil), "vtgate.ExecuteBatchShardsRequest")
	proto.RegisterType((*ExecuteBatchShardsResponse)(nil), "vtgate.ExecuteBatchShardsResponse")
	proto.RegisterType((*BoundKeyspaceIdQuery)(nil), "vtgate.BoundKeyspaceIdQuery")
	proto.RegisterType((*ExecuteBatchKeyspaceIdsRequest)(nil), "vtgate.ExecuteBatchKeyspaceIdsRequest")
	proto.RegisterType((*ExecuteBatchKeyspaceIdsResponse)(nil), "vtgate.ExecuteBatchKeyspaceIdsResponse")
	proto.RegisterType((*StreamExecuteRequest)(nil), "vtgate.StreamExecuteRequest")
	proto.RegisterType((*StreamExecuteResponse)(nil), "vtgate.StreamExecuteResponse")
	proto.RegisterType((*StreamExecuteShardsRequest)(nil), "vtgate.StreamExecuteShardsRequest")
	proto.RegisterType((*StreamExecuteShardsResponse)(nil), "vtgate.StreamExecuteShardsResponse")
	proto.RegisterType((*StreamExecuteKeyspaceIdsRequest)(nil), "vtgate.StreamExecuteKeyspaceIdsRequest")
	proto.RegisterType((*StreamExecuteKeyspaceIdsResponse)(nil), "vtgate.StreamExecuteKeyspaceIdsResponse")
	proto.RegisterType((*StreamExecuteKeyRangesRequest)(nil), "vtgate.StreamExecuteKeyRangesRequest")
	proto.RegisterType((*StreamExecuteKeyRangesResponse)(nil), "vtgate.StreamExecuteKeyRangesResponse")
	proto.RegisterType((*BeginRequest)(nil), "vtgate.BeginRequest")
	proto.RegisterType((*BeginResponse)(nil), "vtgate.BeginResponse")
	proto.RegisterType((*CommitRequest)(nil), "vtgate.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "vtgate.CommitResponse")
	proto.RegisterType((*RollbackRequest)(nil), "vtgate.RollbackRequest")
	proto.RegisterType((*RollbackResponse)(nil), "vtgate.RollbackResponse")
	proto.RegisterType((*ResolveTransactionRequest)(nil), "vtgate.ResolveTransactionRequest")
	proto.RegisterType((*ResolveTransactionResponse)(nil), "vtgate.ResolveTransactionResponse")
	proto.RegisterType((*SplitQueryRequest)(nil), "vtgate.SplitQueryRequest")
	proto.RegisterType((*SplitQueryResponse)(nil), "vtgate.SplitQueryResponse")
	proto.RegisterType((*SplitQueryResponse_KeyRangePart)(nil), "vtgate.SplitQueryResponse.KeyRangePart")
	proto.RegisterType((*SplitQueryResponse_ShardPart)(nil), "vtgate.SplitQueryResponse.ShardPart")
	proto.RegisterType((*SplitQueryResponse_Part)(nil), "vtgate.SplitQueryResponse.Part")
	proto.RegisterType((*GetSrvKeyspaceRequest)(nil), "vtgate.GetSrvKeyspaceRequest")
	proto.RegisterType((*GetSrvKeyspaceResponse)(nil), "vtgate.GetSrvKeyspaceResponse")
	proto.RegisterType((*UpdateStreamRequest)(nil), "vtgate.UpdateStreamRequest")
	proto.RegisterType((*UpdateStreamResponse)(nil), "vtgate.UpdateStreamResponse")
}

func init() { proto.RegisterFile("vtgate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x59, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xd6, 0xee, 0xfa, 0xf3, 0xf5, 0x47, 0xd2, 0x49, 0xd2, 0xba, 0x26, 0x34, 0xe9, 0x8a, 0xa8,
	0x2e, 0x8d, 0x5c, 0x35, 0xe5, 0x4b, 0x08, 0x09, 0x48, 0x88, 0x50, 0x54, 0x28, 0x65, 0x12, 0x10,
	0x07, 0xaa, 0xd5, 0xc6, 0x1e, 0xa5, 0x8b, 0xbd, 0xbb, 0xee, 0xce, 0xac, 0x4b, 0x38, 0xa0, 0xfe,
	0x83, 0x9e, 0x90, 0x00, 0x21, 0x21, 0x24, 0xae, 0x5c, 0x91, 0xb8, 0x71, 0x40, 0xf0, 0x03, 0x38,
	0x70, 0xe7, 0x0f, 0x20, 0xf8, 0x05, 0x68, 0x67, 0x66, 0x3f, 0xbc, 0x89, 0x1d, 0xc7, 0x89, 0x2b,
	0xf7, 0xe4, 0x9d, 0x99, 0x77, 0xde, 0x79, 0xe6, 0x79, 0x9f, 0x9d, 0xf7, 0xdd, 0x31, 0x94, 0xfb,
	0xec, 0xc0, 0x64, 0xa4, 0xd9, 0xf3, 0x5c, 0xe6, 0xa2, 0x9c, 0x68, 0xd5, 0x4b, 0x0f, 0x7d, 0xe2,
	0x1d, 0x8a, 0xce, 0x7a, 0x95, 0xb9, 0x3d, 0xb7, 0x6d, 0x32, 0x53, 0xb6, 0x4b, 0x7d, 0xe6, 0xf5,
	0x5a, 0xa2, 0xa1, 0xff, 0xa9, 0x40, 0x7e, 0x97, 0x50, 0x6a, 0xb9, 0x0e, 0x5a, 0x83, 0xaa, 0xe5,
	0x18, 0xcc, 0x33, 0x1d, 0x6a, 0xb6, 0x98, 0xe5, 0x3a, 0x35, 0x65, 0x55, 0x69, 0x14, 0x70, 0xc5,
	0x72, 0xf6, 0xe2, 0x4e, 0xb4, 0x05, 0x55, 0xfa, 0xc0, 0xf4, 0xda, 0x06, 0x15, 0xf3, 0x68, 0x4d,
	0x5d, 0xd5, 0x1a, 0xa5, 0x8d, 0xe5, 0xa6, 0xc4, 0x22, 0xfd, 0x35, 0x77, 0x03, 0x2b, 0xd9, 0xc0,
	0x15, 0x9a, 0x68, 0xd1, 0xfa, 0xa7, 0x50, 0x4e, 0x0e, 0xa3, 0x35, 0xc8, 0x31, 0xd3, 0x3b, 0x20,
	0x8c, 0xaf, 0x59, 0xda, 0xa8, 0x34, 0xc5, 0x16, 0xf6, 0x78, 0x27, 0x96, 0x83, 0x01, 0xc4, 0x04,
	0x3e, 0xc3, 0x6a, 0xd7, 0xd4, 0x55, 0xa5, 0xa1, 0xe1, 0x4a, 0xa2, 0x77, 0xa7, 0xad, 0xff, 0xa6,
	0x42, 0x75, 0xfb, 0x73, 0xd2, 0xf2, 0x19, 0xc1, 0xe4, 0xa1, 0x4f, 0x28, 0x43, 0xeb, 0x50, 0x6c,
	0x99, 0xdd, 0x2e, 0xf1, 0x82, 0x49, 0x62, 0x8d, 0xb9, 0xa6, 0x60, 0x62, 0x8b, 0xf7, 0xef, 0xbc,
	0x83, 0x0b, 0xc2, 0x62, 0xa7, 0x8d, 0xae, 0x43, 0x5e, 0xee, 0x8e, 0x2f, 0x20, 0x6c, 0x93, 0x9b,
	0xc3, 0xe1, 0x38, 0xba, 0x06, 0x59, 0x0e, 0xb5, 0xa6, 0x71, 0xc3, 0x0b, 0x12, 0xf8, 0xa6, 0xeb,
	0x3b, 0xed, 0x0f, 0x83, 0x47, 0x2c, 0xc6, 0xd1, 0xcb, 0x50, 0x62, 0xe6, 0x7e, 0x97, 0x30, 0x83,
	0x1d, 0xf6, 0x48, 0x2d, 0xb3, 0xaa, 0x34, 0xaa, 0x1b, 0x8b, 0xcd, 0x28, 0x3a, 0x7b, 0x7c, 0x70,
	0xef, 0xb0, 0x47, 0x30, 0xb0, 0xe8, 0x19, 0xad, 0x03, 0x72, 0x5c, 0x66, 0xa4, 0x22, 0x93, 0xe5,
	0x91, 0x99, 0x77, 0x5c, 0xb6, 0x33, 0x10, 0x9c, 0x3a, 0x14, 0x3a, 0xe4, 0x90, 0xf6, 0xcc, 0x16,
	0xa9, 0xe5, 0x56, 0x95, 0x46, 0x11, 0x47, 0x6d, 0x74, 0x13, 0xf2, 0x6e, 0x8f, 0xf1, 0x88, 0xe5,
	0x39, 0xd6, 0x25, 0x89, 0x55, 0x52, 0xf5, 0x81, 0x18, 0xc4, 0xa1, 0x95, 0xfe, 0x44, 0x81, 0xb9,
	0x88, 0x46, 0xda, 0x73, 0x1d, 0x4a, 0xd0, 0x1a, 0x64, 0x89, 0xe7, 0xb9, 0x5e, 0x8a, 0x43, 0x7c,
	0x6f, 0x6b, 0x3b, 0xe8, 0xc6, 0x62, 0xf4, 0x34, 0x04, 0xbe, 0x08, 0x39, 0x8f, 0x50, 0xbf, 0xcb,
	0x24, 0x83, 0x48, 0xa2, 0x12, 0xe4, 0xf1, 0x11, 0x2c, 0x2d, 0xf4, 0xbf, 0x55, 0x58, 0x94, 0x88,
	0xb8, 0x7c, 0xe8, 0xec, 0x84, 0x37, 0xc9, 0x7c, 0x26, 0xc5, 0xfc, 0x45, 0xc8, 0x71, 0xf9, 0xd3,
	0x5a, 0x76, 0x55, 0x6b, 0x14, 0xb1, 0x6c, 0xa5, 0x25, 0x91, 0x3b, 0x93, 0x24, 0xf2, 0x43, 0x24,
	0x91, 0x08, 0x7b, 0x61, 0xac, 0xb0, 0x7f, 0xa5, 0xc0, 0x52, 0x8a, 0xe4, 0x99, 0x08, 0xfe, 0x7f,
	0x2a, 0x5c, 0x96, 0xb8, 0xee, 0x48, 0x66, 0x77, 0x9e, 0x15, 0x05, 0x5c, 0x85, 0x72, 0xf8, 0x6c,
	0x58, 0x52, 0x07, 0x65, 0x5c, 0xea, 0xc4, 0xfb, 0x98, 0x51, 0x31, 0x7c, 0xab, 0x40, 0xfd, 0x38,
	0xd2, 0x67, 0x42, 0x11, 0x8f, 0x35, 0xb8, 0x14, 0x83, 0xc3, 0xa6, 0x73, 0x40, 0x9e, 0x11, 0x3d,
	0xdc, 0x02, 0xe8, 0x90, 0x43, 0xc3, 0xe3, 0x90, 0xb9, 0x1a, 0x82, 0x9d, 0x46, 0xb1, 0x0e, 0x77,
	0x83, 0x8b, 0x9d, 0x70, 0x5f, 0x33, 0xaa, 0x8f, 0xaf, 0x15, 0xa8, 0x1d, 0x0d, 0xc1, 0x4c, 0xa8,
	0xe3, 0x97, 0x4c, 0xa4, 0x8e, 0x6d, 0x87, 0x59, 0xec, 0xf0, 0x99, 0x39, 0x2d, 0xd6, 0x01, 0x11,
	0x8e, 0xd8, 0x68, 0xb9, 0x5d, 0xdf, 0x76, 0x0c, 0xc7, 0xb4, 0x09, 0xcf, 0xf9, 0x45, 0x3c, 0x2f,
	0x46, 0xb6, 0xf8, 0xc0, 0x5d, 0xd3, 0x26, 0xe8, 0x13, 0x58, 0x90, 0xd6, 0x03, 0x47, 0x4c, 0x8e,
	0x8b, 0xaa, 0x11, 0x22, 0x1d, 0xc2, 0x44, 0x33, 0xec, 0xc0, 0x17, 0x84, 0x93, 0x3b, 0xc3, 0x8f,
	0xa4, 0xfc, 0x99, 0x24, 0x57, 0x38, 0x59, 0x72, 0xc5, 0x71, 0x24, 0x57, 0xdf, 0x87, 0x42, 0x08,
	0x1a, 0xad, 0x40, 0x86, 0x43, 0x53, 0x38, 0xb4, 0x52, 0x58, 0x35, 0x06, 0x88, 0xf8, 0x00, 0x5a,
	0x84, 0x6c, 0xdf, 0xec, 0xfa, 0x84, 0x07, 0xae, 0x8c, 0x45, 0x03, 0xad, 0x40, 0x29, 0xc1, 0x15,
	0x8f, 0x55, 0x19, 0x43, 0x7c, 0x1a, 0x27, 0x65, 0x9d, 0x60, 0x6c, 0x26, 0x64, 0xfd, 0xbb, 0x0a,
	0x0b, 0x12, 0xda, 0xa6, 0xc9, 0x5a, 0x0f, 0xa6, 0x2e, 0xe9, 0x1b, 0x90, 0x0f, 0xd0, 0x58, 0x84,
	0xd6, 0x34, 0xae, 0xa9, 0x63, 0x44, 0x1d, 0x5a, 0x4c, 0x5a, 0xe5, 0xae, 0x41, 0xd5, 0xa4, 0xc7,
	0x54, 0xb8, 0x15, 0x93, 0x4e, 0xad, 0xbc, 0xdd, 0x87, 0x4a, 0xc8, 0xef, 0xa9, 0xe2, 0x1a, 0x07,
	0x4b, 0x3d, 0x31, 0x58, 0xdf, 0x28, 0x51, 0xc1, 0x2a, 0x83, 0x35, 0x35, 0x0d, 0xdd, 0x84, 0xbc,
	0x58, 0x34, 0x0c, 0xd3, 0x52, 0x68, 0x3a, 0xb0, 0x4b, 0x1c, 0x5a, 0xe9, 0x0e, 0xcc, 0xf1, 0x08,
	0xf2, 0x22, 0x8f, 0xdb, 0xc4, 0xa7, 0x97, 0x72, 0x8a, 0xd3, 0x4b, 0x1d, 0x5a, 0xed, 0x6a, 0xc9,
	0x6a, 0x57, 0xff, 0x39, 0xae, 0xdf, 0x38, 0x17, 0x4f, 0xa9, 0x82, 0xbf, 0x95, 0x96, 0xef, 0xa5,
	0xd0, 0x34, 0xb5, 0xfb, 0xa7, 0x25, 0xe2, 0x84, 0x50, 0x73, 0x63, 0x09, 0xf5, 0xbb, 0xb8, 0x06,
	0x1b, 0x20, 0x6e, 0x6a, 0x52, 0x5a, 0x4f, 0x4b, 0xe9, 0x38, 0x89, 0x47, 0x3a, 0xfa, 0x12, 0x16,
	0x39, 0x93, 0x71, 0xe6, 0x38, 0x47, 0x31, 0xa5, 0x0b, 0x67, 0xed, 0x48, 0xe1, 0xac, 0xff, 0xaa,
	0xc2, 0x95, 0x24, 0x3d, 0x4f, 0xf3, 0xe3, 0xe0, 0x95, 0xb4, 0xb8, 0x96, 0x07, 0xc4, 0x95, 0xa2,
	0x64, 0x66, 0x15, 0xf6, 0x83, 0x02, 0x2b, 0x43, 0x29, 0x9c, 0x11, 0x99, 0xfd, 0xab, 0xc0, 0xe2,
	0x2e, 0xf3, 0x88, 0x69, 0x9f, 0xe9, 0x6a, 0x27, 0x52, 0xa5, 0x7a, 0xba, 0xfb, 0x1a, 0x6d, 0xcc,
	0x10, 0x8d, 0xaa, 0xeb, 0x12, 0x71, 0xc9, 0x8e, 0x15, 0x97, 0x2d, 0x58, 0x4a, 0x6d, 0x59, 0x06,
	0x23, 0xce, 0x41, 0xca, 0x89, 0x39, 0xe8, 0x89, 0x0a, 0xf5, 0x01, 0x2f, 0x67, 0x39, 0x78, 0xc7,
	0xa6, 0x2f, 0xc9, 0x83, 0x36, 0x34, 0x43, 0x64, 0x46, 0xdd, 0x87, 0x64, 0xc7, 0xa4, 0xfc, 0xd4,
	0x72, 0xdf, 0x81, 0xe7, 0x8e, 0x25, 0x64, 0x02, 0x72, 0xbf, 0x57, 0x61, 0x65, 0xc0, 0xd7, 0x99,
	0x4f, 0x9f, 0x73, 0x61, 0x38, 0x7d, 0x6c, 0x66, 0x4e, 0xbc, 0x6f, 0x98, 0x1a, 0xd9, 0x77, 0x61,
	0x75, 0x38, 0x41, 0x13, 0x30, 0xfe, 0x93, 0x0a, 0xcf, 0xa7, 0x1d, 0x9e, 0xe5, 0xd3, 0xff, 0x5c,
	0xf8, 0x1e, 0xfc, 0x9e, 0xcf, 0x4c, 0xf0, 0x3d, 0x3f, 0x35, 0xfe, 0xdf, 0x83, 0x2b, 0xc3, 0xe8,
	0x9a, 0x80, 0xfd, 0x37, 0xa0, 0xbc, 0x49, 0x0e, 0x2c, 0x67, 0x22, 0xae, 0xf5, 0xd7, 0xa1, 0x22,
	0x67, 0xcb, 0xa5, 0x13, 0xd9, 0x42, 0x19, 0x9d, 0x2d, 0xf4, 0xc7, 0x0a, 0x54, 0xb6, 0x5c, 0xdb,
	0xb6, 0xd8, 0xd4, 0xb3, 0xfa, 0x45, 0xc8, 0x99, 0xcc, 0xb5, 0xad, 0x16, 0x8f, 0x73, 0x01, 0xcb,
	0x96, 0x3e, 0x0f, 0xd5, 0x10, 0x81, 0xc0, 0xaf, 0x7f, 0x06, 0x73, 0xd8, 0xed, 0x76, 0xf7, 0xcd,
	0x56, 0x67, 0xda, 0xa8, 0x74, 0x04, 0xf3, 0xf1, 0x5a, 0x72, 0xfd, 0xfb, 0x70, 0x19, 0x13, 0xea,
	0x76, 0xfb, 0x24, 0x91, 0xff, 0x27, 0x43, 0x82, 0x20, 0xd3, 0x66, 0xf2, 0x1f, 0x95, 0x22, 0xe6,
	0xcf, 0xfa, 0x32, 0xd4, 0x8f, 0x73, 0x2f, 0x17, 0xff, 0x47, 0x85, 0x0b, 0xbb, 0xbd, 0xae, 0xc5,
	0xa4, 0x50, 0x26, 0x59, 0x75, 0x54, 0xed, 0x37, 0xf6, 0x5d, 0xca, 0x55, 0x28, 0xd3, 0x00, 0x87,
	0xbc, 0x2e, 0x91, 0x59, 0xa5, 0xc4, 0xfb, 0xc4, 0x45, 0x49, 0xf0, 0xc5, 0x1f, 0x9a, 0xf8, 0x0e,
	0xe3, 0x6f, 0x9b, 0x86, 0x41, 0x5a, 0xf8, 0x0e, 0x43, 0x2f, 0xc1, 0x25, 0xc7, 0xb7, 0x0d, 0xcf,
	0x7d, 0x44, 0x8d, 0x1e, 0xf1, 0x0c, 0xee, 0xd9, 0xe8, 0x99, 0x1e, 0xe3, 0xef, 0x99, 0x86, 0x17,
	0x1c, 0xdf, 0xc6, 0xee, 0x23, 0x7a, 0x8f, 0x78, 0x7c, 0xf1, 0x7b, 0xa6, 0xc7, 0xd0, 0x5b, 0x50,
	0x34, 0xbb, 0x07, 0xae, 0x67, 0xb1, 0x07, 0xb6, 0xbc, 0x1f, 0xd1, 0x25, 0xcc, 0x23, 0xcc, 0x34,
	0xdf, 0x0e, 0x2d, 0x71, 0x3c, 0x09, 0xdd, 0x00, 0xe4, 0x53, 0x62, 0x08, 0x70, 0x62, 0xd1, 0xfe,
	0x86, 0xbc, 0x2c, 0x99, 0xf3, 0x29, 0x89, 0xdd, 0x7c, 0xbc, 0xa1, 0xff, 0xa1, 0x01, 0x4a, 0xfa,
	0x95, 0x6f, 0xd1, 0xab, 0x90, 0xe3, 0xf3, 0x69, 0x4d, 0xe1, 0x27, 0xcf, 0x4a, 0xa4, 0xa1, 0x23,
	0xb6, 0xcd, 0x00, 0x36, 0x96, 0xe6, 0xf5, 0xfb, 0x50, 0x0e, 0x8f, 0x03, 0xbe, 0x9d, 0x64, 0x34,
	0x94, 0x91, 0x47, 0x9c, 0x3a, 0xc6, 0x11, 0x57, 0x7f, 0x13, 0x8a, 0x3c, 0xb5, 0x9e, 0xe8, 0x3b,
	0x2e, 0x08, 0xd4, 0x64, 0x41, 0x50, 0xff, 0x4b, 0x81, 0x0c, 0x9f, 0x3c, 0xf6, 0xb7, 0xc4, 0xfb,
	0x50, 0x8d, 0x50, 0x8a, 0xe8, 0x89, 0xd7, 0xea, 0xda, 0x08, 0x4a, 0x92, 0x14, 0xe0, 0x72, 0x27,
	0x49, 0xc8, 0x16, 0x80, 0xf8, 0xb3, 0x93, 0xbb, 0x12, 0x3a, 0x7c, 0x61, 0x84, 0xab, 0x68, 0xbb,
	0xb8, 0x48, 0xa3, 0x9d, 0x23, 0xc8, 0x50, 0xeb, 0x0b, 0x51, 0x0e, 0x6a, 0x98, 0x3f, 0xeb, 0xb7,
	0x61, 0xe9, 0x5d, 0xc2, 0x76, 0xbd, 0x7e, 0x98, 0x0e, 0xc3, 0xd7, 0x67, 0x04, 0x4d, 0x3a, 0x86,
	0x8b, 0xe9, 0x49, 0x52, 0x01, 0xaf, 0x41, 0x99, 0x7a, 0x7d, 0x63, 0x60, 0x66, 0x90, 0x1a, 0xa2,
	0xf0, 0x24, 0x27, 0x95, 0x68, 0xdc, 0xd0, 0x7f, 0x54, 0x61, 0xe1, 0xa3, 0x5e, 0xdb, 0x64, 0x44,
	0x64, 0x89, 0xf3, 0x7f, 0x8d, 0x17, 0x21, 0xcb, 0xb9, 0x90, 0x49, 0x53, 0x34, 0xd0, 0x4d, 0x28,
	0x46, 0x81, 0xe2, 0xcc, 0x1c, 0xaf, 0xa6, 0x42, 0x18, 0x8e, 0x49, 0xf3, 0xe5, 0x32, 0x14, 0x99,
	0x65, 0x13, 0xca, 0x4c, 0xbb, 0x27, 0xdf, 0xe4, 0xb8, 0x23, 0xd0, 0x15, 0xe9, 0x13, 0x87, 0xc9,
	0x2b, 0xa3, 0x50, 0x57, 0xdb, 0x41, 0xdf, 0x9e, 0xdb, 0x21, 0x0e, 0x16, 0xe3, 0x7a, 0x07, 0x16,
	0x07, 0x59, 0x92, 0xc4, 0x37, 0x42, 0x07, 0x83, 0xa9, 0x53, 0x66, 0xdc, 0x60, 0x44, 0x7a, 0x40,
	0xd7, 0x61, 0x3e, 0xc8, 0xa1, 0x36, 0x31, 0x62, 0x3c, 0xe2, 0xdf, 0xeb, 0x39, 0xd1, 0xbf, 0x17,
	0x76, 0x6f, 0xd6, 0xa1, 0xd6, 0x72, 0xed, 0xe6, 0xa1, 0xeb, 0x33, 0x7f, 0x9f, 0x34, 0xfb, 0x16,
	0x23, 0x94, 0x8a, 0x7f, 0xec, 0xf7, 0x73, 0xfc, 0xe7, 0xf6, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x24, 0xd9, 0x31, 0xae, 0xfa, 0x1f, 0x00, 0x00,
}
