// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replicationdata.proto

package replicationdata

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StopReplicationMode is used to provide controls over how replication is stopped.
type StopReplicationMode int32

const (
	StopReplicationMode_IOANDSQLTHREAD StopReplicationMode = 0
	StopReplicationMode_IOTHREADONLY   StopReplicationMode = 1
)

var StopReplicationMode_name = map[int32]string{
	0: "IOANDSQLTHREAD",
	1: "IOTHREADONLY",
}

var StopReplicationMode_value = map[string]int32{
	"IOANDSQLTHREAD": 0,
	"IOTHREADONLY":   1,
}

func (x StopReplicationMode) String() string {
	return proto.EnumName(StopReplicationMode_name, int32(x))
}

func (StopReplicationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{0}
}

// Status is the replication status for MySQL/MariaDB/File-based. Returned by a
// flavor-specific command and parsed into a Position and fields.
type Status struct {
	Position            string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	IoThreadRunning     bool   `protobuf:"varint,2,opt,name=io_thread_running,json=ioThreadRunning,proto3" json:"io_thread_running,omitempty"`
	SqlThreadRunning    bool   `protobuf:"varint,3,opt,name=sql_thread_running,json=sqlThreadRunning,proto3" json:"sql_thread_running,omitempty"`
	SecondsBehindMaster uint32 `protobuf:"varint,4,opt,name=seconds_behind_master,json=secondsBehindMaster,proto3" json:"seconds_behind_master,omitempty"`
	MasterHost          string `protobuf:"bytes,5,opt,name=master_host,json=masterHost,proto3" json:"master_host,omitempty"`
	MasterPort          int32  `protobuf:"varint,6,opt,name=master_port,json=masterPort,proto3" json:"master_port,omitempty"`
	MasterConnectRetry  int32  `protobuf:"varint,7,opt,name=master_connect_retry,json=masterConnectRetry,proto3" json:"master_connect_retry,omitempty"`
	// RelayLogPosition will be empty for flavors that do not support returning the full GTIDSet from the relay log, such as MariaDB.
	RelayLogPosition     string   `protobuf:"bytes,8,opt,name=relay_log_position,json=relayLogPosition,proto3" json:"relay_log_position,omitempty"`
	FilePosition         string   `protobuf:"bytes,9,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	FileRelayLogPosition string   `protobuf:"bytes,10,opt,name=file_relay_log_position,json=fileRelayLogPosition,proto3" json:"file_relay_log_position,omitempty"`
	MasterServerId       uint32   `protobuf:"varint,11,opt,name=master_server_id,json=masterServerId,proto3" json:"master_server_id,omitempty"`
	MasterUuid           string   `protobuf:"bytes,12,opt,name=master_uuid,json=masterUuid,proto3" json:"master_uuid,omitempty"`
	LastSqlErrno         uint32   `protobuf:"varint,13,opt,name=last_sql_errno,json=lastSqlErrno,proto3" json:"last_sql_errno,omitempty"`
	SkipCounter          uint32   `protobuf:"varint,14,opt,name=skip_counter,json=skipCounter,proto3" json:"skip_counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Status) GetIoThreadRunning() bool {
	if m != nil {
		return m.IoThreadRunning
	}
	return false
}

func (m *Status) GetSqlThreadRunning() bool {
	if m != nil {
		return m.SqlThreadRunning
	}
	return false
}

func (m *Status) GetSecondsBehindMaster() uint32 {
	if m != nil {
		return m.SecondsBehindMaster
	}
	return 0
}

func (m *Status) GetMasterHost() string {
	if m != nil {
		return m.MasterHost
	}
	return ""
}

func (m *Status) GetMasterPort() int32 {
	if m != nil {
		return m.MasterPort
	}
	return 0
}

func (m *Status) GetMasterConnectRetry() int32 {
	if m != nil {
		return m.MasterConnectRetry
	}
	return 0
}

func (m *Status) GetRelayLogPosition() string {
	if m != nil {
		return m.RelayLogPosition
	}
	return ""
}

func (m *Status) GetFilePosition() string {
	if m != nil {
		return m.FilePosition
	}
	return ""
}

func (m *Status) GetFileRelayLogPosition() string {
	if m != nil {
		return m.FileRelayLogPosition
	}
	return ""
}

func (m *Status) GetMasterServerId() uint32 {
	if m != nil {
		return m.MasterServerId
	}
	return 0
}

func (m *Status) GetMasterUuid() string {
	if m != nil {
		return m.MasterUuid
	}
	return ""
}

func (m *Status) GetLastSqlErrno() uint32 {
	if m != nil {
		return m.LastSqlErrno
	}
	return 0
}

func (m *Status) GetSkipCounter() uint32 {
	if m != nil {
		return m.SkipCounter
	}
	return 0
}

// StopReplicationStatus represents the replication status before calling StopReplication, and the replication status collected immediately after
// calling StopReplication.
type StopReplicationStatus struct {
	Before               *Status  `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After                *Status  `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopReplicationStatus) Reset()         { *m = StopReplicationStatus{} }
func (m *StopReplicationStatus) String() string { return proto.CompactTextString(m) }
func (*StopReplicationStatus) ProtoMessage()    {}
func (*StopReplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{1}
}

func (m *StopReplicationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopReplicationStatus.Unmarshal(m, b)
}
func (m *StopReplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopReplicationStatus.Marshal(b, m, deterministic)
}
func (m *StopReplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReplicationStatus.Merge(m, src)
}
func (m *StopReplicationStatus) XXX_Size() int {
	return xxx_messageInfo_StopReplicationStatus.Size(m)
}
func (m *StopReplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StopReplicationStatus proto.InternalMessageInfo

func (m *StopReplicationStatus) GetBefore() *Status {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *StopReplicationStatus) GetAfter() *Status {
	if m != nil {
		return m.After
	}
	return nil
}

// MasterStatus is the replication status for a MySQL master (returned by 'show master status').
type MasterStatus struct {
	Position             string   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	FilePosition         string   `protobuf:"bytes,2,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MasterStatus) Reset()         { *m = MasterStatus{} }
func (m *MasterStatus) String() string { return proto.CompactTextString(m) }
func (*MasterStatus) ProtoMessage()    {}
func (*MasterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{2}
}

func (m *MasterStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterStatus.Unmarshal(m, b)
}
func (m *MasterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterStatus.Marshal(b, m, deterministic)
}
func (m *MasterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterStatus.Merge(m, src)
}
func (m *MasterStatus) XXX_Size() int {
	return xxx_messageInfo_MasterStatus.Size(m)
}
func (m *MasterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MasterStatus proto.InternalMessageInfo

func (m *MasterStatus) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *MasterStatus) GetFilePosition() string {
	if m != nil {
		return m.FilePosition
	}
	return ""
}

func init() {
	proto.RegisterEnum("replicationdata.StopReplicationMode", StopReplicationMode_name, StopReplicationMode_value)
	proto.RegisterType((*Status)(nil), "replicationdata.Status")
	proto.RegisterType((*StopReplicationStatus)(nil), "replicationdata.StopReplicationStatus")
	proto.RegisterType((*MasterStatus)(nil), "replicationdata.MasterStatus")
}

func init() { proto.RegisterFile("replicationdata.proto", fileDescriptor_ee8ee22b8c4b9d06) }

var fileDescriptor_ee8ee22b8c4b9d06 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5d, 0x6f, 0xda, 0x3c,
	0x14, 0xc7, 0x9f, 0xf0, 0x14, 0x46, 0x0f, 0x81, 0x66, 0x6e, 0x51, 0xa3, 0xdd, 0x8c, 0xb1, 0x5d,
	0xa0, 0xaa, 0x23, 0x53, 0xa7, 0x5d, 0xed, 0xaa, 0x6f, 0x52, 0x91, 0x68, 0xe9, 0x42, 0x77, 0xb1,
	0xdd, 0x58, 0x81, 0x18, 0xb0, 0x96, 0xf9, 0x04, 0xdb, 0x61, 0xea, 0xf7, 0xdb, 0x07, 0x9b, 0x6c,
	0x53, 0xca, 0xd2, 0x69, 0xda, 0x5d, 0xfc, 0xfb, 0xff, 0xe4, 0x97, 0x73, 0x4e, 0xa0, 0x2d, 0x59,
	0x9e, 0xf1, 0x69, 0xa2, 0x39, 0x8a, 0x34, 0xd1, 0x49, 0x3f, 0x97, 0xa8, 0x91, 0xec, 0x95, 0x70,
	0xf7, 0xe7, 0x0e, 0xd4, 0xc6, 0x3a, 0xd1, 0x85, 0x22, 0x2f, 0xa0, 0x9e, 0xa3, 0xe2, 0x26, 0x0a,
	0xbd, 0x8e, 0xd7, 0xdb, 0x8d, 0x37, 0x6b, 0x72, 0x04, 0xcf, 0x39, 0x52, 0xbd, 0x90, 0x2c, 0x49,
	0xa9, 0x2c, 0x84, 0xe0, 0x62, 0x1e, 0x56, 0x3a, 0x5e, 0xaf, 0x1e, 0xef, 0x71, 0xbc, 0xb3, 0x3c,
	0x76, 0x98, 0x1c, 0x03, 0x51, 0xcb, 0xac, 0x2c, 0xff, 0x6f, 0xe5, 0x40, 0x2d, 0xb3, 0xdf, 0xed,
	0x13, 0x68, 0x2b, 0x36, 0x45, 0x91, 0x2a, 0x3a, 0x61, 0x0b, 0x2e, 0x52, 0xfa, 0x3d, 0x51, 0x9a,
	0xc9, 0x70, 0xa7, 0xe3, 0xf5, 0x9a, 0xf1, 0xfe, 0x3a, 0x3c, 0xb3, 0xd9, 0xb5, 0x8d, 0xc8, 0x4b,
	0x68, 0x38, 0x89, 0x2e, 0x50, 0xe9, 0xb0, 0x6a, 0x2f, 0x0b, 0x0e, 0x5d, 0xa1, 0xd2, 0x5b, 0x42,
	0x8e, 0x52, 0x87, 0xb5, 0x8e, 0xd7, 0xab, 0x3e, 0x08, 0xb7, 0x28, 0x35, 0x79, 0x07, 0x07, 0x6b,
	0x61, 0x8a, 0x42, 0xb0, 0xa9, 0xa6, 0x92, 0x69, 0x79, 0x1f, 0x3e, 0xb3, 0x26, 0x71, 0xd9, 0xb9,
	0x8b, 0x62, 0x93, 0x98, 0x57, 0x49, 0x96, 0x25, 0xf7, 0x34, 0xc3, 0x39, 0xdd, 0xd4, 0xa9, 0x6e,
	0x8f, 0x0e, 0x6c, 0x32, 0xc4, 0xf9, 0xed, 0x43, 0xbd, 0x5e, 0x43, 0x73, 0xc6, 0x33, 0xf6, 0x28,
	0xee, 0x5a, 0xd1, 0x37, 0x70, 0x23, 0x7d, 0x80, 0x43, 0x2b, 0xfd, 0x61, 0x5f, 0xb0, 0xfa, 0x81,
	0x89, 0xe3, 0xf2, 0xde, 0x3d, 0x08, 0xd6, 0x77, 0x57, 0x4c, 0xae, 0x98, 0xa4, 0x3c, 0x0d, 0x1b,
	0xb6, 0x58, 0x2d, 0xc7, 0xc7, 0x16, 0x0f, 0xd2, 0xad, 0x32, 0x14, 0x05, 0x4f, 0x43, 0x7f, 0xbb,
	0x4e, 0x9f, 0x0b, 0x9e, 0x92, 0x37, 0xd0, 0xca, 0x12, 0xa5, 0xa9, 0xe9, 0x17, 0x93, 0x52, 0x60,
	0xd8, 0xb4, 0x1b, 0xf9, 0x86, 0x8e, 0x97, 0xd9, 0xa5, 0x61, 0xe4, 0x15, 0xf8, 0xea, 0x1b, 0xcf,
	0xe9, 0x14, 0x0b, 0x61, 0x3a, 0xd3, 0xb2, 0x4e, 0xc3, 0xb0, 0x73, 0x87, 0xba, 0x3f, 0xa0, 0x3d,
	0xd6, 0x98, 0xc7, 0x8f, 0xd3, 0xb5, 0x1e, 0xaa, 0x08, 0x6a, 0x13, 0x36, 0x43, 0xc9, 0xec, 0x48,
	0x35, 0x4e, 0x0e, 0xfb, 0xe5, 0xc1, 0x74, 0x62, 0xbc, 0xd6, 0xc8, 0x5b, 0xa8, 0x26, 0x33, 0x73,
	0x4a, 0xe5, 0xef, 0xbe, 0xb3, 0xba, 0x23, 0xf0, 0xdd, 0x50, 0xfc, 0xc3, 0x10, 0x3f, 0x69, 0x4a,
	0xe5, 0x69, 0x53, 0x8e, 0x3e, 0xc2, 0x7e, 0xe9, 0x25, 0xd7, 0x98, 0x32, 0x42, 0xa0, 0x35, 0x18,
	0x9d, 0xde, 0x5c, 0x8c, 0x3f, 0x0d, 0xef, 0xae, 0xe2, 0xcb, 0xd3, 0x8b, 0xe0, 0x3f, 0x12, 0x80,
	0x3f, 0x18, 0xb9, 0xd5, 0xe8, 0x66, 0xf8, 0x25, 0xf0, 0xce, 0xfa, 0x5f, 0x8f, 0x57, 0x5c, 0x33,
	0xa5, 0xfa, 0x1c, 0x23, 0xf7, 0x15, 0xcd, 0x31, 0x5a, 0xe9, 0xc8, 0xfe, 0x7e, 0x51, 0xe9, 0x2d,
	0x93, 0x9a, 0xc5, 0xef, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x08, 0x80, 0xcc, 0x74, 0xae, 0x03,
	0x00, 0x00,
}
