//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file defines the replication related structures we use.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: replicationdata.proto

package replicationdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StopReplicationMode is used to provide controls over how replication is stopped.
type StopReplicationMode int32

const (
	StopReplicationMode_IOANDSQLTHREAD StopReplicationMode = 0
	StopReplicationMode_IOTHREADONLY   StopReplicationMode = 1
)

// Enum value maps for StopReplicationMode.
var (
	StopReplicationMode_name = map[int32]string{
		0: "IOANDSQLTHREAD",
		1: "IOTHREADONLY",
	}
	StopReplicationMode_value = map[string]int32{
		"IOANDSQLTHREAD": 0,
		"IOTHREADONLY":   1,
	}
)

func (x StopReplicationMode) Enum() *StopReplicationMode {
	p := new(StopReplicationMode)
	*p = x
	return p
}

func (x StopReplicationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopReplicationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_replicationdata_proto_enumTypes[0].Descriptor()
}

func (StopReplicationMode) Type() protoreflect.EnumType {
	return &file_replicationdata_proto_enumTypes[0]
}

func (x StopReplicationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopReplicationMode.Descriptor instead.
func (StopReplicationMode) EnumDescriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{0}
}

// Status is the replication status for MySQL/MariaDB/File-based. Returned by a
// flavor-specific command and parsed into a Position and fields.
type Status struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Position              string                 `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ReplicationLagSeconds uint32                 `protobuf:"varint,4,opt,name=replication_lag_seconds,json=replicationLagSeconds,proto3" json:"replication_lag_seconds,omitempty"`
	SourceHost            string                 `protobuf:"bytes,5,opt,name=source_host,json=sourceHost,proto3" json:"source_host,omitempty"`
	SourcePort            int32                  `protobuf:"varint,6,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	ConnectRetry          int32                  `protobuf:"varint,7,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	// RelayLogPosition will be empty for flavors that do not support returning the full GTIDSet from the relay log, such as MariaDB.
	RelayLogPosition                       string `protobuf:"bytes,8,opt,name=relay_log_position,json=relayLogPosition,proto3" json:"relay_log_position,omitempty"`
	FilePosition                           string `protobuf:"bytes,9,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	RelayLogSourceBinlogEquivalentPosition string `protobuf:"bytes,10,opt,name=relay_log_source_binlog_equivalent_position,json=relayLogSourceBinlogEquivalentPosition,proto3" json:"relay_log_source_binlog_equivalent_position,omitempty"`
	SourceServerId                         uint32 `protobuf:"varint,11,opt,name=source_server_id,json=sourceServerId,proto3" json:"source_server_id,omitempty"`
	SourceUuid                             string `protobuf:"bytes,12,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	IoState                                int32  `protobuf:"varint,13,opt,name=io_state,json=ioState,proto3" json:"io_state,omitempty"`
	LastIoError                            string `protobuf:"bytes,14,opt,name=last_io_error,json=lastIoError,proto3" json:"last_io_error,omitempty"`
	SqlState                               int32  `protobuf:"varint,15,opt,name=sql_state,json=sqlState,proto3" json:"sql_state,omitempty"`
	LastSqlError                           string `protobuf:"bytes,16,opt,name=last_sql_error,json=lastSqlError,proto3" json:"last_sql_error,omitempty"`
	RelayLogFilePosition                   string `protobuf:"bytes,17,opt,name=relay_log_file_position,json=relayLogFilePosition,proto3" json:"relay_log_file_position,omitempty"`
	SourceUser                             string `protobuf:"bytes,18,opt,name=source_user,json=sourceUser,proto3" json:"source_user,omitempty"`
	SqlDelay                               uint32 `protobuf:"varint,19,opt,name=sql_delay,json=sqlDelay,proto3" json:"sql_delay,omitempty"`
	AutoPosition                           bool   `protobuf:"varint,20,opt,name=auto_position,json=autoPosition,proto3" json:"auto_position,omitempty"`
	UsingGtid                              bool   `protobuf:"varint,21,opt,name=using_gtid,json=usingGtid,proto3" json:"using_gtid,omitempty"`
	HasReplicationFilters                  bool   `protobuf:"varint,22,opt,name=has_replication_filters,json=hasReplicationFilters,proto3" json:"has_replication_filters,omitempty"`
	SslAllowed                             bool   `protobuf:"varint,23,opt,name=ssl_allowed,json=sslAllowed,proto3" json:"ssl_allowed,omitempty"`
	ReplicationLagUnknown                  bool   `protobuf:"varint,24,opt,name=replication_lag_unknown,json=replicationLagUnknown,proto3" json:"replication_lag_unknown,omitempty"`
	BackupRunning                          bool   `protobuf:"varint,25,opt,name=backup_running,json=backupRunning,proto3" json:"backup_running,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_replicationdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_replicationdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Status) GetReplicationLagSeconds() uint32 {
	if x != nil {
		return x.ReplicationLagSeconds
	}
	return 0
}

func (x *Status) GetSourceHost() string {
	if x != nil {
		return x.SourceHost
	}
	return ""
}

func (x *Status) GetSourcePort() int32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *Status) GetConnectRetry() int32 {
	if x != nil {
		return x.ConnectRetry
	}
	return 0
}

func (x *Status) GetRelayLogPosition() string {
	if x != nil {
		return x.RelayLogPosition
	}
	return ""
}

func (x *Status) GetFilePosition() string {
	if x != nil {
		return x.FilePosition
	}
	return ""
}

func (x *Status) GetRelayLogSourceBinlogEquivalentPosition() string {
	if x != nil {
		return x.RelayLogSourceBinlogEquivalentPosition
	}
	return ""
}

func (x *Status) GetSourceServerId() uint32 {
	if x != nil {
		return x.SourceServerId
	}
	return 0
}

func (x *Status) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *Status) GetIoState() int32 {
	if x != nil {
		return x.IoState
	}
	return 0
}

func (x *Status) GetLastIoError() string {
	if x != nil {
		return x.LastIoError
	}
	return ""
}

func (x *Status) GetSqlState() int32 {
	if x != nil {
		return x.SqlState
	}
	return 0
}

func (x *Status) GetLastSqlError() string {
	if x != nil {
		return x.LastSqlError
	}
	return ""
}

func (x *Status) GetRelayLogFilePosition() string {
	if x != nil {
		return x.RelayLogFilePosition
	}
	return ""
}

func (x *Status) GetSourceUser() string {
	if x != nil {
		return x.SourceUser
	}
	return ""
}

func (x *Status) GetSqlDelay() uint32 {
	if x != nil {
		return x.SqlDelay
	}
	return 0
}

func (x *Status) GetAutoPosition() bool {
	if x != nil {
		return x.AutoPosition
	}
	return false
}

func (x *Status) GetUsingGtid() bool {
	if x != nil {
		return x.UsingGtid
	}
	return false
}

func (x *Status) GetHasReplicationFilters() bool {
	if x != nil {
		return x.HasReplicationFilters
	}
	return false
}

func (x *Status) GetSslAllowed() bool {
	if x != nil {
		return x.SslAllowed
	}
	return false
}

func (x *Status) GetReplicationLagUnknown() bool {
	if x != nil {
		return x.ReplicationLagUnknown
	}
	return false
}

func (x *Status) GetBackupRunning() bool {
	if x != nil {
		return x.BackupRunning
	}
	return false
}

// Configuration holds replication configuration information gathered from performance_schema and global variables.
type Configuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HeartbeatInterval controls the heartbeat interval that the primary sends to the replica
	HeartbeatInterval float64 `protobuf:"fixed64,1,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// ReplicaNetTimeout specifies the number of seconds to wait for more data or a heartbeat signal from the source before the replica considers the connection broken
	ReplicaNetTimeout int32 `protobuf:"varint,2,opt,name=replica_net_timeout,json=replicaNetTimeout,proto3" json:"replica_net_timeout,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	mi := &file_replicationdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_replicationdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{1}
}

func (x *Configuration) GetHeartbeatInterval() float64 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

func (x *Configuration) GetReplicaNetTimeout() int32 {
	if x != nil {
		return x.ReplicaNetTimeout
	}
	return 0
}

// StopReplicationStatus represents the replication status before calling StopReplication, and the replication status collected immediately after
// calling StopReplication.
type StopReplicationStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Before        *Status                `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After         *Status                `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationStatus) Reset() {
	*x = StopReplicationStatus{}
	mi := &file_replicationdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationStatus) ProtoMessage() {}

func (x *StopReplicationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_replicationdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationStatus.ProtoReflect.Descriptor instead.
func (*StopReplicationStatus) Descriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{2}
}

func (x *StopReplicationStatus) GetBefore() *Status {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *StopReplicationStatus) GetAfter() *Status {
	if x != nil {
		return x.After
	}
	return nil
}

// PrimaryStatus is the replication status for a MySQL primary (returned by 'show binary log status').
type PrimaryStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      string                 `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	FilePosition  string                 `protobuf:"bytes,2,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	ServerUuid    string                 `protobuf:"bytes,3,opt,name=server_uuid,json=serverUuid,proto3" json:"server_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatus) Reset() {
	*x = PrimaryStatus{}
	mi := &file_replicationdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatus) ProtoMessage() {}

func (x *PrimaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_replicationdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatus.ProtoReflect.Descriptor instead.
func (*PrimaryStatus) Descriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{3}
}

func (x *PrimaryStatus) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *PrimaryStatus) GetFilePosition() string {
	if x != nil {
		return x.FilePosition
	}
	return ""
}

func (x *PrimaryStatus) GetServerUuid() string {
	if x != nil {
		return x.ServerUuid
	}
	return ""
}

// FullStatus contains the full status of MySQL including the replication information, semi-sync information, GTID information among others
type FullStatus struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ServerId                    uint32                 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerUuid                  string                 `protobuf:"bytes,2,opt,name=server_uuid,json=serverUuid,proto3" json:"server_uuid,omitempty"`
	ReplicationStatus           *Status                `protobuf:"bytes,3,opt,name=replication_status,json=replicationStatus,proto3" json:"replication_status,omitempty"`
	PrimaryStatus               *PrimaryStatus         `protobuf:"bytes,4,opt,name=primary_status,json=primaryStatus,proto3" json:"primary_status,omitempty"`
	GtidPurged                  string                 `protobuf:"bytes,5,opt,name=gtid_purged,json=gtidPurged,proto3" json:"gtid_purged,omitempty"`
	Version                     string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	VersionComment              string                 `protobuf:"bytes,7,opt,name=version_comment,json=versionComment,proto3" json:"version_comment,omitempty"`
	ReadOnly                    bool                   `protobuf:"varint,8,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	GtidMode                    string                 `protobuf:"bytes,9,opt,name=gtid_mode,json=gtidMode,proto3" json:"gtid_mode,omitempty"`
	BinlogFormat                string                 `protobuf:"bytes,10,opt,name=binlog_format,json=binlogFormat,proto3" json:"binlog_format,omitempty"`
	BinlogRowImage              string                 `protobuf:"bytes,11,opt,name=binlog_row_image,json=binlogRowImage,proto3" json:"binlog_row_image,omitempty"`
	LogBinEnabled               bool                   `protobuf:"varint,12,opt,name=log_bin_enabled,json=logBinEnabled,proto3" json:"log_bin_enabled,omitempty"`
	LogReplicaUpdates           bool                   `protobuf:"varint,13,opt,name=log_replica_updates,json=logReplicaUpdates,proto3" json:"log_replica_updates,omitempty"`
	SemiSyncPrimaryEnabled      bool                   `protobuf:"varint,14,opt,name=semi_sync_primary_enabled,json=semiSyncPrimaryEnabled,proto3" json:"semi_sync_primary_enabled,omitempty"`
	SemiSyncReplicaEnabled      bool                   `protobuf:"varint,15,opt,name=semi_sync_replica_enabled,json=semiSyncReplicaEnabled,proto3" json:"semi_sync_replica_enabled,omitempty"`
	SemiSyncPrimaryStatus       bool                   `protobuf:"varint,16,opt,name=semi_sync_primary_status,json=semiSyncPrimaryStatus,proto3" json:"semi_sync_primary_status,omitempty"`
	SemiSyncReplicaStatus       bool                   `protobuf:"varint,17,opt,name=semi_sync_replica_status,json=semiSyncReplicaStatus,proto3" json:"semi_sync_replica_status,omitempty"`
	SemiSyncPrimaryClients      uint32                 `protobuf:"varint,18,opt,name=semi_sync_primary_clients,json=semiSyncPrimaryClients,proto3" json:"semi_sync_primary_clients,omitempty"`
	SemiSyncPrimaryTimeout      uint64                 `protobuf:"varint,19,opt,name=semi_sync_primary_timeout,json=semiSyncPrimaryTimeout,proto3" json:"semi_sync_primary_timeout,omitempty"`
	SemiSyncWaitForReplicaCount uint32                 `protobuf:"varint,20,opt,name=semi_sync_wait_for_replica_count,json=semiSyncWaitForReplicaCount,proto3" json:"semi_sync_wait_for_replica_count,omitempty"`
	SuperReadOnly               bool                   `protobuf:"varint,21,opt,name=super_read_only,json=superReadOnly,proto3" json:"super_read_only,omitempty"`
	ReplicationConfiguration    *Configuration         `protobuf:"bytes,22,opt,name=replication_configuration,json=replicationConfiguration,proto3" json:"replication_configuration,omitempty"`
	DiskStalled                 bool                   `protobuf:"varint,23,opt,name=disk_stalled,json=diskStalled,proto3" json:"disk_stalled,omitempty"`
	SemiSyncBlocked             bool                   `protobuf:"varint,24,opt,name=semi_sync_blocked,json=semiSyncBlocked,proto3" json:"semi_sync_blocked,omitempty"`
	TabletType                  topodata.TabletType    `protobuf:"varint,25,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FullStatus) Reset() {
	*x = FullStatus{}
	mi := &file_replicationdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullStatus) ProtoMessage() {}

func (x *FullStatus) ProtoReflect() protoreflect.Message {
	mi := &file_replicationdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullStatus.ProtoReflect.Descriptor instead.
func (*FullStatus) Descriptor() ([]byte, []int) {
	return file_replicationdata_proto_rawDescGZIP(), []int{4}
}

func (x *FullStatus) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FullStatus) GetServerUuid() string {
	if x != nil {
		return x.ServerUuid
	}
	return ""
}

func (x *FullStatus) GetReplicationStatus() *Status {
	if x != nil {
		return x.ReplicationStatus
	}
	return nil
}

func (x *FullStatus) GetPrimaryStatus() *PrimaryStatus {
	if x != nil {
		return x.PrimaryStatus
	}
	return nil
}

func (x *FullStatus) GetGtidPurged() string {
	if x != nil {
		return x.GtidPurged
	}
	return ""
}

func (x *FullStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FullStatus) GetVersionComment() string {
	if x != nil {
		return x.VersionComment
	}
	return ""
}

func (x *FullStatus) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *FullStatus) GetGtidMode() string {
	if x != nil {
		return x.GtidMode
	}
	return ""
}

func (x *FullStatus) GetBinlogFormat() string {
	if x != nil {
		return x.BinlogFormat
	}
	return ""
}

func (x *FullStatus) GetBinlogRowImage() string {
	if x != nil {
		return x.BinlogRowImage
	}
	return ""
}

func (x *FullStatus) GetLogBinEnabled() bool {
	if x != nil {
		return x.LogBinEnabled
	}
	return false
}

func (x *FullStatus) GetLogReplicaUpdates() bool {
	if x != nil {
		return x.LogReplicaUpdates
	}
	return false
}

func (x *FullStatus) GetSemiSyncPrimaryEnabled() bool {
	if x != nil {
		return x.SemiSyncPrimaryEnabled
	}
	return false
}

func (x *FullStatus) GetSemiSyncReplicaEnabled() bool {
	if x != nil {
		return x.SemiSyncReplicaEnabled
	}
	return false
}

func (x *FullStatus) GetSemiSyncPrimaryStatus() bool {
	if x != nil {
		return x.SemiSyncPrimaryStatus
	}
	return false
}

func (x *FullStatus) GetSemiSyncReplicaStatus() bool {
	if x != nil {
		return x.SemiSyncReplicaStatus
	}
	return false
}

func (x *FullStatus) GetSemiSyncPrimaryClients() uint32 {
	if x != nil {
		return x.SemiSyncPrimaryClients
	}
	return 0
}

func (x *FullStatus) GetSemiSyncPrimaryTimeout() uint64 {
	if x != nil {
		return x.SemiSyncPrimaryTimeout
	}
	return 0
}

func (x *FullStatus) GetSemiSyncWaitForReplicaCount() uint32 {
	if x != nil {
		return x.SemiSyncWaitForReplicaCount
	}
	return 0
}

func (x *FullStatus) GetSuperReadOnly() bool {
	if x != nil {
		return x.SuperReadOnly
	}
	return false
}

func (x *FullStatus) GetReplicationConfiguration() *Configuration {
	if x != nil {
		return x.ReplicationConfiguration
	}
	return nil
}

func (x *FullStatus) GetDiskStalled() bool {
	if x != nil {
		return x.DiskStalled
	}
	return false
}

func (x *FullStatus) GetSemiSyncBlocked() bool {
	if x != nil {
		return x.SemiSyncBlocked
	}
	return false
}

func (x *FullStatus) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

var File_replicationdata_proto protoreflect.FileDescriptor

const file_replicationdata_proto_rawDesc = "" +
	"\n" +
	"\x15replicationdata.proto\x12\x0freplicationdata\x1a\x0etopodata.proto\"\xbd\a\n" +
	"\x06Status\x12\x1a\n" +
	"\bposition\x18\x01 \x01(\tR\bposition\x126\n" +
	"\x17replication_lag_seconds\x18\x04 \x01(\rR\x15replicationLagSeconds\x12\x1f\n" +
	"\vsource_host\x18\x05 \x01(\tR\n" +
	"sourceHost\x12\x1f\n" +
	"\vsource_port\x18\x06 \x01(\x05R\n" +
	"sourcePort\x12#\n" +
	"\rconnect_retry\x18\a \x01(\x05R\fconnectRetry\x12,\n" +
	"\x12relay_log_position\x18\b \x01(\tR\x10relayLogPosition\x12#\n" +
	"\rfile_position\x18\t \x01(\tR\ffilePosition\x12[\n" +
	"+relay_log_source_binlog_equivalent_position\x18\n" +
	" \x01(\tR&relayLogSourceBinlogEquivalentPosition\x12(\n" +
	"\x10source_server_id\x18\v \x01(\rR\x0esourceServerId\x12\x1f\n" +
	"\vsource_uuid\x18\f \x01(\tR\n" +
	"sourceUuid\x12\x19\n" +
	"\bio_state\x18\r \x01(\x05R\aioState\x12\"\n" +
	"\rlast_io_error\x18\x0e \x01(\tR\vlastIoError\x12\x1b\n" +
	"\tsql_state\x18\x0f \x01(\x05R\bsqlState\x12$\n" +
	"\x0elast_sql_error\x18\x10 \x01(\tR\flastSqlError\x125\n" +
	"\x17relay_log_file_position\x18\x11 \x01(\tR\x14relayLogFilePosition\x12\x1f\n" +
	"\vsource_user\x18\x12 \x01(\tR\n" +
	"sourceUser\x12\x1b\n" +
	"\tsql_delay\x18\x13 \x01(\rR\bsqlDelay\x12#\n" +
	"\rauto_position\x18\x14 \x01(\bR\fautoPosition\x12\x1d\n" +
	"\n" +
	"using_gtid\x18\x15 \x01(\bR\tusingGtid\x126\n" +
	"\x17has_replication_filters\x18\x16 \x01(\bR\x15hasReplicationFilters\x12\x1f\n" +
	"\vssl_allowed\x18\x17 \x01(\bR\n" +
	"sslAllowed\x126\n" +
	"\x17replication_lag_unknown\x18\x18 \x01(\bR\x15replicationLagUnknown\x12%\n" +
	"\x0ebackup_running\x18\x19 \x01(\bR\rbackupRunningJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"n\n" +
	"\rConfiguration\x12-\n" +
	"\x12heartbeat_interval\x18\x01 \x01(\x01R\x11heartbeatInterval\x12.\n" +
	"\x13replica_net_timeout\x18\x02 \x01(\x05R\x11replicaNetTimeout\"w\n" +
	"\x15StopReplicationStatus\x12/\n" +
	"\x06before\x18\x01 \x01(\v2\x17.replicationdata.StatusR\x06before\x12-\n" +
	"\x05after\x18\x02 \x01(\v2\x17.replicationdata.StatusR\x05after\"q\n" +
	"\rPrimaryStatus\x12\x1a\n" +
	"\bposition\x18\x01 \x01(\tR\bposition\x12#\n" +
	"\rfile_position\x18\x02 \x01(\tR\ffilePosition\x12\x1f\n" +
	"\vserver_uuid\x18\x03 \x01(\tR\n" +
	"serverUuid\"\xce\t\n" +
	"\n" +
	"FullStatus\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\rR\bserverId\x12\x1f\n" +
	"\vserver_uuid\x18\x02 \x01(\tR\n" +
	"serverUuid\x12F\n" +
	"\x12replication_status\x18\x03 \x01(\v2\x17.replicationdata.StatusR\x11replicationStatus\x12E\n" +
	"\x0eprimary_status\x18\x04 \x01(\v2\x1e.replicationdata.PrimaryStatusR\rprimaryStatus\x12\x1f\n" +
	"\vgtid_purged\x18\x05 \x01(\tR\n" +
	"gtidPurged\x12\x18\n" +
	"\aversion\x18\x06 \x01(\tR\aversion\x12'\n" +
	"\x0fversion_comment\x18\a \x01(\tR\x0eversionComment\x12\x1b\n" +
	"\tread_only\x18\b \x01(\bR\breadOnly\x12\x1b\n" +
	"\tgtid_mode\x18\t \x01(\tR\bgtidMode\x12#\n" +
	"\rbinlog_format\x18\n" +
	" \x01(\tR\fbinlogFormat\x12(\n" +
	"\x10binlog_row_image\x18\v \x01(\tR\x0ebinlogRowImage\x12&\n" +
	"\x0flog_bin_enabled\x18\f \x01(\bR\rlogBinEnabled\x12.\n" +
	"\x13log_replica_updates\x18\r \x01(\bR\x11logReplicaUpdates\x129\n" +
	"\x19semi_sync_primary_enabled\x18\x0e \x01(\bR\x16semiSyncPrimaryEnabled\x129\n" +
	"\x19semi_sync_replica_enabled\x18\x0f \x01(\bR\x16semiSyncReplicaEnabled\x127\n" +
	"\x18semi_sync_primary_status\x18\x10 \x01(\bR\x15semiSyncPrimaryStatus\x127\n" +
	"\x18semi_sync_replica_status\x18\x11 \x01(\bR\x15semiSyncReplicaStatus\x129\n" +
	"\x19semi_sync_primary_clients\x18\x12 \x01(\rR\x16semiSyncPrimaryClients\x129\n" +
	"\x19semi_sync_primary_timeout\x18\x13 \x01(\x04R\x16semiSyncPrimaryTimeout\x12E\n" +
	" semi_sync_wait_for_replica_count\x18\x14 \x01(\rR\x1bsemiSyncWaitForReplicaCount\x12&\n" +
	"\x0fsuper_read_only\x18\x15 \x01(\bR\rsuperReadOnly\x12[\n" +
	"\x19replication_configuration\x18\x16 \x01(\v2\x1e.replicationdata.ConfigurationR\x18replicationConfiguration\x12!\n" +
	"\fdisk_stalled\x18\x17 \x01(\bR\vdiskStalled\x12*\n" +
	"\x11semi_sync_blocked\x18\x18 \x01(\bR\x0fsemiSyncBlocked\x125\n" +
	"\vtablet_type\x18\x19 \x01(\x0e2\x14.topodata.TabletTypeR\n" +
	"tabletType*;\n" +
	"\x13StopReplicationMode\x12\x12\n" +
	"\x0eIOANDSQLTHREAD\x10\x00\x12\x10\n" +
	"\fIOTHREADONLY\x10\x01B.Z,vitess.io/vitess/go/vt/proto/replicationdatab\x06proto3"

var (
	file_replicationdata_proto_rawDescOnce sync.Once
	file_replicationdata_proto_rawDescData []byte
)

func file_replicationdata_proto_rawDescGZIP() []byte {
	file_replicationdata_proto_rawDescOnce.Do(func() {
		file_replicationdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_replicationdata_proto_rawDesc), len(file_replicationdata_proto_rawDesc)))
	})
	return file_replicationdata_proto_rawDescData
}

var file_replicationdata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_replicationdata_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_replicationdata_proto_goTypes = []any{
	(StopReplicationMode)(0),      // 0: replicationdata.StopReplicationMode
	(*Status)(nil),                // 1: replicationdata.Status
	(*Configuration)(nil),         // 2: replicationdata.Configuration
	(*StopReplicationStatus)(nil), // 3: replicationdata.StopReplicationStatus
	(*PrimaryStatus)(nil),         // 4: replicationdata.PrimaryStatus
	(*FullStatus)(nil),            // 5: replicationdata.FullStatus
	(topodata.TabletType)(0),      // 6: topodata.TabletType
}
var file_replicationdata_proto_depIdxs = []int32{
	1, // 0: replicationdata.StopReplicationStatus.before:type_name -> replicationdata.Status
	1, // 1: replicationdata.StopReplicationStatus.after:type_name -> replicationdata.Status
	1, // 2: replicationdata.FullStatus.replication_status:type_name -> replicationdata.Status
	4, // 3: replicationdata.FullStatus.primary_status:type_name -> replicationdata.PrimaryStatus
	2, // 4: replicationdata.FullStatus.replication_configuration:type_name -> replicationdata.Configuration
	6, // 5: replicationdata.FullStatus.tablet_type:type_name -> topodata.TabletType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_replicationdata_proto_init() }
func file_replicationdata_proto_init() {
	if File_replicationdata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_replicationdata_proto_rawDesc), len(file_replicationdata_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_replicationdata_proto_goTypes,
		DependencyIndexes: file_replicationdata_proto_depIdxs,
		EnumInfos:         file_replicationdata_proto_enumTypes,
		MessageInfos:      file_replicationdata_proto_msgTypes,
	}.Build()
	File_replicationdata_proto = out.File
	file_replicationdata_proto_goTypes = nil
	file_replicationdata_proto_depIdxs = nil
}
