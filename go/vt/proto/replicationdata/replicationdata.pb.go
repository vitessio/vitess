// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: replicationdata.proto

package replicationdata

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StopReplicationMode is used to provide controls over how replication is stopped.
type StopReplicationMode int32

const (
	StopReplicationMode_IOANDSQLTHREAD StopReplicationMode = 0
	StopReplicationMode_IOTHREADONLY   StopReplicationMode = 1
)

var StopReplicationMode_name = map[int32]string{
	0: "IOANDSQLTHREAD",
	1: "IOTHREADONLY",
}

var StopReplicationMode_value = map[string]int32{
	"IOANDSQLTHREAD": 0,
	"IOTHREADONLY":   1,
}

func (x StopReplicationMode) String() string {
	return proto.EnumName(StopReplicationMode_name, int32(x))
}

func (StopReplicationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{0}
}

// Status is the replication status for MySQL/MariaDB/File-based. Returned by a
// flavor-specific command and parsed into a Position and fields.
type Status struct {
	Position            string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SqlThreadRunning    bool   `protobuf:"varint,3,opt,name=sql_thread_running,json=sqlThreadRunning,proto3" json:"sql_thread_running,omitempty"`
	SecondsBehindMaster uint32 `protobuf:"varint,4,opt,name=seconds_behind_master,json=secondsBehindMaster,proto3" json:"seconds_behind_master,omitempty"`
	MasterHost          string `protobuf:"bytes,5,opt,name=master_host,json=masterHost,proto3" json:"master_host,omitempty"`
	MasterPort          int32  `protobuf:"varint,6,opt,name=master_port,json=masterPort,proto3" json:"master_port,omitempty"`
	MasterConnectRetry  int32  `protobuf:"varint,7,opt,name=master_connect_retry,json=masterConnectRetry,proto3" json:"master_connect_retry,omitempty"`
	// RelayLogPosition will be empty for flavors that do not support returning the full GTIDSet from the relay log, such as MariaDB.
	RelayLogPosition     string   `protobuf:"bytes,8,opt,name=relay_log_position,json=relayLogPosition,proto3" json:"relay_log_position,omitempty"`
	FilePosition         string   `protobuf:"bytes,9,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	FileRelayLogPosition string   `protobuf:"bytes,10,opt,name=file_relay_log_position,json=fileRelayLogPosition,proto3" json:"file_relay_log_position,omitempty"`
	MasterServerId       uint32   `protobuf:"varint,11,opt,name=master_server_id,json=masterServerId,proto3" json:"master_server_id,omitempty"`
	MasterUuid           string   `protobuf:"bytes,12,opt,name=master_uuid,json=masterUuid,proto3" json:"master_uuid,omitempty"`
	IoThreadRunningState string   `protobuf:"bytes,13,opt,name=io_thread_running_state,json=ioThreadRunningState,proto3" json:"io_thread_running_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Status) GetSqlThreadRunning() bool {
	if m != nil {
		return m.SqlThreadRunning
	}
	return false
}

func (m *Status) GetSecondsBehindMaster() uint32 {
	if m != nil {
		return m.SecondsBehindMaster
	}
	return 0
}

func (m *Status) GetMasterHost() string {
	if m != nil {
		return m.MasterHost
	}
	return ""
}

func (m *Status) GetMasterPort() int32 {
	if m != nil {
		return m.MasterPort
	}
	return 0
}

func (m *Status) GetMasterConnectRetry() int32 {
	if m != nil {
		return m.MasterConnectRetry
	}
	return 0
}

func (m *Status) GetRelayLogPosition() string {
	if m != nil {
		return m.RelayLogPosition
	}
	return ""
}

func (m *Status) GetFilePosition() string {
	if m != nil {
		return m.FilePosition
	}
	return ""
}

func (m *Status) GetFileRelayLogPosition() string {
	if m != nil {
		return m.FileRelayLogPosition
	}
	return ""
}

func (m *Status) GetMasterServerId() uint32 {
	if m != nil {
		return m.MasterServerId
	}
	return 0
}

func (m *Status) GetMasterUuid() string {
	if m != nil {
		return m.MasterUuid
	}
	return ""
}

func (m *Status) GetIoThreadRunningState() string {
	if m != nil {
		return m.IoThreadRunningState
	}
	return ""
}

// StopReplicationStatus represents the replication status before calling StopReplication, and the replication status collected immediately after
// calling StopReplication.
type StopReplicationStatus struct {
	Before               *Status  `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After                *Status  `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopReplicationStatus) Reset()         { *m = StopReplicationStatus{} }
func (m *StopReplicationStatus) String() string { return proto.CompactTextString(m) }
func (*StopReplicationStatus) ProtoMessage()    {}
func (*StopReplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{1}
}
func (m *StopReplicationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopReplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopReplicationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopReplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReplicationStatus.Merge(m, src)
}
func (m *StopReplicationStatus) XXX_Size() int {
	return m.Size()
}
func (m *StopReplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StopReplicationStatus proto.InternalMessageInfo

func (m *StopReplicationStatus) GetBefore() *Status {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *StopReplicationStatus) GetAfter() *Status {
	if m != nil {
		return m.After
	}
	return nil
}

// MasterStatus is the replication status for a MySQL master (returned by 'show master status').
type MasterStatus struct {
	Position             string   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	FilePosition         string   `protobuf:"bytes,2,opt,name=file_position,json=filePosition,proto3" json:"file_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MasterStatus) Reset()         { *m = MasterStatus{} }
func (m *MasterStatus) String() string { return proto.CompactTextString(m) }
func (*MasterStatus) ProtoMessage()    {}
func (*MasterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{2}
}
func (m *MasterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterStatus.Merge(m, src)
}
func (m *MasterStatus) XXX_Size() int {
	return m.Size()
}
func (m *MasterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MasterStatus proto.InternalMessageInfo

func (m *MasterStatus) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *MasterStatus) GetFilePosition() string {
	if m != nil {
		return m.FilePosition
	}
	return ""
}

func init() {
	proto.RegisterEnum("replicationdata.StopReplicationMode", StopReplicationMode_name, StopReplicationMode_value)
	proto.RegisterType((*Status)(nil), "replicationdata.Status")
	proto.RegisterType((*StopReplicationStatus)(nil), "replicationdata.StopReplicationStatus")
	proto.RegisterType((*MasterStatus)(nil), "replicationdata.MasterStatus")
}

func init() { proto.RegisterFile("replicationdata.proto", fileDescriptor_ee8ee22b8c4b9d06) }

var fileDescriptor_ee8ee22b8c4b9d06 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x97, 0xae, 0x2d, 0xdd, 0x69, 0x3b, 0x22, 0x6f, 0xd5, 0x22, 0x2e, 0x4a, 0x55, 0x6e,
	0x2a, 0x34, 0x1a, 0x34, 0xc4, 0x15, 0x12, 0xd2, 0xc6, 0x90, 0x56, 0xd4, 0xad, 0x23, 0x1d, 0x17,
	0x70, 0x63, 0xa5, 0xb5, 0xdb, 0x5a, 0x0a, 0x39, 0x99, 0xed, 0x14, 0xed, 0x1d, 0x78, 0x00, 0x1e,
	0x89, 0x4b, 0x1e, 0x01, 0x95, 0x17, 0x41, 0xb1, 0xb3, 0xae, 0x64, 0x08, 0x71, 0x17, 0x7f, 0xdf,
	0x4f, 0xce, 0xf9, 0xf3, 0x19, 0x5a, 0x92, 0x27, 0x91, 0x98, 0x86, 0x5a, 0x60, 0xcc, 0x42, 0x1d,
	0xf6, 0x13, 0x89, 0x1a, 0xc9, 0xc3, 0x82, 0xdc, 0xfd, 0x5a, 0x86, 0xea, 0x58, 0x87, 0x3a, 0x55,
	0xe4, 0x11, 0xd4, 0x12, 0x54, 0x22, 0xb3, 0x3c, 0xa7, 0xe3, 0xf4, 0x76, 0x82, 0xf5, 0x99, 0x1c,
	0x02, 0x51, 0xd7, 0x11, 0xd5, 0x0b, 0xc9, 0x43, 0x46, 0x65, 0x1a, 0xc7, 0x22, 0x9e, 0x7b, 0xdb,
	0x1d, 0xa7, 0x57, 0x0b, 0x5c, 0x75, 0x1d, 0x5d, 0x19, 0x23, 0xb0, 0x3a, 0x39, 0x82, 0x96, 0xe2,
	0x53, 0x8c, 0x99, 0xa2, 0x13, 0xbe, 0x10, 0x31, 0xa3, 0x9f, 0x43, 0xa5, 0xb9, 0xf4, 0xca, 0x1d,
	0xa7, 0xd7, 0x0c, 0xf6, 0x72, 0xf3, 0xc4, 0x78, 0xe7, 0xc6, 0x22, 0x8f, 0xa1, 0x6e, 0x21, 0xba,
	0x40, 0xa5, 0xbd, 0x8a, 0x29, 0x00, 0xac, 0x74, 0x86, 0x4a, 0x6f, 0x00, 0x09, 0x4a, 0xed, 0x55,
	0x3b, 0x4e, 0xaf, 0x72, 0x0b, 0x5c, 0xa2, 0xd4, 0xe4, 0x39, 0xec, 0xe7, 0xc0, 0x14, 0xe3, 0x98,
	0x4f, 0x35, 0x95, 0x5c, 0xcb, 0x1b, 0xef, 0x81, 0x21, 0x89, 0xf5, 0xde, 0x58, 0x2b, 0xc8, 0x9c,
	0xac, 0x2b, 0xc9, 0xa3, 0xf0, 0x86, 0x46, 0x38, 0xa7, 0xeb, 0xde, 0x6b, 0xe6, 0xd7, 0xae, 0x71,
	0x86, 0x38, 0xbf, 0xbc, 0x9d, 0xc1, 0x13, 0x68, 0xce, 0x44, 0xc4, 0xef, 0xc0, 0x1d, 0x03, 0x36,
	0x32, 0x71, 0x0d, 0xbd, 0x84, 0x03, 0x03, 0xfd, 0xe5, 0x5e, 0x30, 0xf8, 0x7e, 0x66, 0x07, 0xc5,
	0xbb, 0x7b, 0xe0, 0xe6, 0xb5, 0x2b, 0x2e, 0x97, 0x5c, 0x52, 0xc1, 0xbc, 0xba, 0x19, 0xd6, 0xae,
	0xd5, 0xc7, 0x46, 0x1e, 0xb0, 0x8d, 0x31, 0xa4, 0xa9, 0x60, 0x5e, 0x63, 0x73, 0x4e, 0x1f, 0x52,
	0xc1, 0xb2, 0x0a, 0x04, 0x16, 0x36, 0x45, 0x95, 0x0e, 0x35, 0xf7, 0x9a, 0xb6, 0x02, 0x81, 0x7f,
	0xac, 0x2b, 0x5b, 0x3f, 0x7f, 0x57, 0xae, 0x95, 0xdc, 0xed, 0xee, 0x17, 0x68, 0x8d, 0x35, 0x26,
	0xc1, 0x5d, 0x4a, 0xf2, 0x70, 0xf8, 0x50, 0x9d, 0xf0, 0x19, 0x4a, 0x6e, 0xa2, 0x51, 0x3f, 0x3a,
	0xe8, 0x17, 0x03, 0x66, 0xc1, 0x20, 0xc7, 0xc8, 0x33, 0xa8, 0x84, 0xb3, 0x6c, 0xe7, 0xa5, 0x7f,
	0xf3, 0x96, 0xea, 0x8e, 0xa0, 0x61, 0x83, 0xf0, 0x1f, 0x61, 0xbc, 0xb7, 0x88, 0xd2, 0xfd, 0x45,
	0x3c, 0x7d, 0x05, 0x7b, 0x85, 0x4e, 0xce, 0x91, 0x71, 0x42, 0x60, 0x77, 0x30, 0x3a, 0xbe, 0x38,
	0x1d, 0xbf, 0x1f, 0x5e, 0x9d, 0x05, 0x6f, 0x8f, 0x4f, 0xdd, 0x2d, 0xe2, 0x42, 0x63, 0x30, 0xb2,
	0xa7, 0xd1, 0xc5, 0xf0, 0xa3, 0xeb, 0x9c, 0xbc, 0xfe, 0xbe, 0x6a, 0x3b, 0x3f, 0x56, 0x6d, 0xe7,
	0xe7, 0xaa, 0xed, 0x7c, 0xfb, 0xd5, 0xde, 0xfa, 0x74, 0xb8, 0x14, 0x9a, 0x2b, 0xd5, 0x17, 0xe8,
	0xdb, 0x2f, 0x7f, 0x8e, 0xfe, 0x52, 0xfb, 0xe6, 0x59, 0xf9, 0x85, 0xde, 0x26, 0x55, 0x23, 0xbf,
	0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x69, 0x98, 0x15, 0x09, 0x86, 0x03, 0x00, 0x00,
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IoThreadRunningState) > 0 {
		i -= len(m.IoThreadRunningState)
		copy(dAtA[i:], m.IoThreadRunningState)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.IoThreadRunningState)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MasterUuid) > 0 {
		i -= len(m.MasterUuid)
		copy(dAtA[i:], m.MasterUuid)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.MasterUuid)))
		i--
		dAtA[i] = 0x62
	}
	if m.MasterServerId != 0 {
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.MasterServerId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FileRelayLogPosition) > 0 {
		i -= len(m.FileRelayLogPosition)
		copy(dAtA[i:], m.FileRelayLogPosition)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.FileRelayLogPosition)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FilePosition) > 0 {
		i -= len(m.FilePosition)
		copy(dAtA[i:], m.FilePosition)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.FilePosition)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RelayLogPosition) > 0 {
		i -= len(m.RelayLogPosition)
		copy(dAtA[i:], m.RelayLogPosition)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.RelayLogPosition)))
		i--
		dAtA[i] = 0x42
	}
	if m.MasterConnectRetry != 0 {
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.MasterConnectRetry))
		i--
		dAtA[i] = 0x38
	}
	if m.MasterPort != 0 {
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.MasterPort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MasterHost) > 0 {
		i -= len(m.MasterHost)
		copy(dAtA[i:], m.MasterHost)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.MasterHost)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SecondsBehindMaster != 0 {
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.SecondsBehindMaster))
		i--
		dAtA[i] = 0x20
	}
	if m.SqlThreadRunning {
		i--
		if m.SqlThreadRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopReplicationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReplicationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopReplicationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.After != nil {
		{
			size, err := m.After.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicationdata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Before != nil {
		{
			size, err := m.Before.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReplicationdata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MasterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MasterStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FilePosition) > 0 {
		i -= len(m.FilePosition)
		copy(dAtA[i:], m.FilePosition)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.FilePosition)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReplicationdata(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplicationdata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.SqlThreadRunning {
		n += 2
	}
	if m.SecondsBehindMaster != 0 {
		n += 1 + sovReplicationdata(uint64(m.SecondsBehindMaster))
	}
	l = len(m.MasterHost)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.MasterPort != 0 {
		n += 1 + sovReplicationdata(uint64(m.MasterPort))
	}
	if m.MasterConnectRetry != 0 {
		n += 1 + sovReplicationdata(uint64(m.MasterConnectRetry))
	}
	l = len(m.RelayLogPosition)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	l = len(m.FilePosition)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	l = len(m.FileRelayLogPosition)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.MasterServerId != 0 {
		n += 1 + sovReplicationdata(uint64(m.MasterServerId))
	}
	l = len(m.MasterUuid)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	l = len(m.IoThreadRunningState)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopReplicationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MasterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	l = len(m.FilePosition)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReplicationdata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplicationdata(x uint64) (n int) {
	return sovReplicationdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlThreadRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SqlThreadRunning = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMaster", wireType)
			}
			m.SecondsBehindMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMaster |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPort", wireType)
			}
			m.MasterPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterConnectRetry", wireType)
			}
			m.MasterConnectRetry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterConnectRetry |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayLogPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayLogPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileRelayLogPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileRelayLogPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterServerId", wireType)
			}
			m.MasterServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterServerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IoThreadRunningState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IoThreadRunningState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicationdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReplicationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReplicationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReplicationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &Status{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &Status{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicationdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicationdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicationdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplicationdata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplicationdata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplicationdata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplicationdata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicationdata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplicationdata = fmt.Errorf("proto: unexpected end of group")
)
