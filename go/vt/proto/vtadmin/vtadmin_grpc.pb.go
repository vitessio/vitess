// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vtadmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VTAdminClient is the client API for VTAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VTAdminClient interface {
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(ctx context.Context, in *FindSchemaRequest, opts ...grpc.CallOption) (*Schema, error)
	// GetClusters returns all configured clusters.
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(ctx context.Context, in *GetGatesRequest, opts ...grpc.CallOption) (*GetGatesResponse, error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(ctx context.Context, in *GetKeyspaceRequest, opts ...grpc.CallOption) (*Keyspace, error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(ctx context.Context, in *GetKeyspacesRequest, opts ...grpc.CallOption) (*GetKeyspacesResponse, error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(ctx context.Context, in *GetSchemasRequest, opts ...grpc.CallOption) (*GetSchemasResponse, error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(ctx context.Context, in *GetSrvVSchemaRequest, opts ...grpc.CallOption) (*SrvVSchema, error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters and cells.
	GetSrvVSchemas(ctx context.Context, in *GetSrvVSchemasRequest, opts ...grpc.CallOption) (*GetSrvVSchemasResponse, error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(ctx context.Context, in *GetTabletRequest, opts ...grpc.CallOption) (*Tablet, error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(ctx context.Context, in *GetTabletsRequest, opts ...grpc.CallOption) (*GetTabletsResponse, error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(ctx context.Context, in *GetVSchemaRequest, opts ...grpc.CallOption) (*VSchema, error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(ctx context.Context, in *GetVSchemasRequest, opts ...grpc.CallOption) (*GetVSchemasResponse, error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(ctx context.Context, in *GetWorkflowsRequest, opts ...grpc.CallOption) (*GetWorkflowsResponse, error)
	// VTExplain provides information on how Vitess plans to execute a particular query.
	VTExplain(ctx context.Context, in *VTExplainRequest, opts ...grpc.CallOption) (*VTExplainResponse, error)
}

type vTAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewVTAdminClient(cc grpc.ClientConnInterface) VTAdminClient {
	return &vTAdminClient{cc}
}

func (c *vTAdminClient) FindSchema(ctx context.Context, in *FindSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/FindSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetGates(ctx context.Context, in *GetGatesRequest, opts ...grpc.CallOption) (*GetGatesResponse, error) {
	out := new(GetGatesResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetGates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetKeyspace(ctx context.Context, in *GetKeyspaceRequest, opts ...grpc.CallOption) (*Keyspace, error) {
	out := new(Keyspace)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetKeyspaces(ctx context.Context, in *GetKeyspacesRequest, opts ...grpc.CallOption) (*GetKeyspacesResponse, error) {
	out := new(GetKeyspacesResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetKeyspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetSchemas(ctx context.Context, in *GetSchemasRequest, opts ...grpc.CallOption) (*GetSchemasResponse, error) {
	out := new(GetSchemasResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetSrvVSchema(ctx context.Context, in *GetSrvVSchemaRequest, opts ...grpc.CallOption) (*SrvVSchema, error) {
	out := new(SrvVSchema)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetSrvVSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetSrvVSchemas(ctx context.Context, in *GetSrvVSchemasRequest, opts ...grpc.CallOption) (*GetSrvVSchemasResponse, error) {
	out := new(GetSrvVSchemasResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetSrvVSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetTablet(ctx context.Context, in *GetTabletRequest, opts ...grpc.CallOption) (*Tablet, error) {
	out := new(Tablet)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetTablets(ctx context.Context, in *GetTabletsRequest, opts ...grpc.CallOption) (*GetTabletsResponse, error) {
	out := new(GetTabletsResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetTablets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetVSchema(ctx context.Context, in *GetVSchemaRequest, opts ...grpc.CallOption) (*VSchema, error) {
	out := new(VSchema)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetVSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetVSchemas(ctx context.Context, in *GetVSchemasRequest, opts ...grpc.CallOption) (*GetVSchemasResponse, error) {
	out := new(GetVSchemasResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetVSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) GetWorkflows(ctx context.Context, in *GetWorkflowsRequest, opts ...grpc.CallOption) (*GetWorkflowsResponse, error) {
	out := new(GetWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/GetWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTAdminClient) VTExplain(ctx context.Context, in *VTExplainRequest, opts ...grpc.CallOption) (*VTExplainResponse, error) {
	out := new(VTExplainResponse)
	err := c.cc.Invoke(ctx, "/vtadmin.VTAdmin/VTExplain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VTAdminServer is the server API for VTAdmin service.
// All implementations must embed UnimplementedVTAdminServer
// for forward compatibility
type VTAdminServer interface {
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *FindSchemaRequest) (*Schema, error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *GetGatesRequest) (*GetGatesResponse, error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *GetKeyspaceRequest) (*Keyspace, error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *GetKeyspacesRequest) (*GetKeyspacesResponse, error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *GetSchemaRequest) (*Schema, error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *GetSchemasRequest) (*GetSchemasResponse, error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *GetSrvVSchemaRequest) (*SrvVSchema, error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters and cells.
	GetSrvVSchemas(context.Context, *GetSrvVSchemasRequest) (*GetSrvVSchemasResponse, error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *GetTabletRequest) (*Tablet, error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *GetTabletsRequest) (*GetTabletsResponse, error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *GetVSchemaRequest) (*VSchema, error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *GetVSchemasRequest) (*GetVSchemasResponse, error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *GetWorkflowsRequest) (*GetWorkflowsResponse, error)
	// VTExplain provides information on how Vitess plans to execute a particular query.
	VTExplain(context.Context, *VTExplainRequest) (*VTExplainResponse, error)
	mustEmbedUnimplementedVTAdminServer()
}

// UnimplementedVTAdminServer must be embedded to have forward compatible implementations.
type UnimplementedVTAdminServer struct {
}

func (UnimplementedVTAdminServer) FindSchema(context.Context, *FindSchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSchema not implemented")
}
func (UnimplementedVTAdminServer) GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedVTAdminServer) GetGates(context.Context, *GetGatesRequest) (*GetGatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGates not implemented")
}
func (UnimplementedVTAdminServer) GetKeyspace(context.Context, *GetKeyspaceRequest) (*Keyspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyspace not implemented")
}
func (UnimplementedVTAdminServer) GetKeyspaces(context.Context, *GetKeyspacesRequest) (*GetKeyspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyspaces not implemented")
}
func (UnimplementedVTAdminServer) GetSchema(context.Context, *GetSchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedVTAdminServer) GetSchemas(context.Context, *GetSchemasRequest) (*GetSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (UnimplementedVTAdminServer) GetSrvVSchema(context.Context, *GetSrvVSchemaRequest) (*SrvVSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSrvVSchema not implemented")
}
func (UnimplementedVTAdminServer) GetSrvVSchemas(context.Context, *GetSrvVSchemasRequest) (*GetSrvVSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSrvVSchemas not implemented")
}
func (UnimplementedVTAdminServer) GetTablet(context.Context, *GetTabletRequest) (*Tablet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablet not implemented")
}
func (UnimplementedVTAdminServer) GetTablets(context.Context, *GetTabletsRequest) (*GetTabletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablets not implemented")
}
func (UnimplementedVTAdminServer) GetVSchema(context.Context, *GetVSchemaRequest) (*VSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVSchema not implemented")
}
func (UnimplementedVTAdminServer) GetVSchemas(context.Context, *GetVSchemasRequest) (*GetVSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVSchemas not implemented")
}
func (UnimplementedVTAdminServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedVTAdminServer) GetWorkflows(context.Context, *GetWorkflowsRequest) (*GetWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflows not implemented")
}
func (UnimplementedVTAdminServer) VTExplain(context.Context, *VTExplainRequest) (*VTExplainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VTExplain not implemented")
}
func (UnimplementedVTAdminServer) mustEmbedUnimplementedVTAdminServer() {}

// UnsafeVTAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VTAdminServer will
// result in compilation errors.
type UnsafeVTAdminServer interface {
	mustEmbedUnimplementedVTAdminServer()
}

func RegisterVTAdminServer(s grpc.ServiceRegistrar, srv VTAdminServer) {
	s.RegisterService(&VTAdmin_ServiceDesc, srv)
}

func _VTAdmin_FindSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).FindSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/FindSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).FindSchema(ctx, req.(*FindSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetGates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetGates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetGates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetGates(ctx, req.(*GetGatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetKeyspace(ctx, req.(*GetKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetKeyspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetKeyspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetKeyspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetKeyspaces(ctx, req.(*GetKeyspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetSchemas(ctx, req.(*GetSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetSrvVSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSrvVSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetSrvVSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetSrvVSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetSrvVSchema(ctx, req.(*GetSrvVSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetSrvVSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSrvVSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetSrvVSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetSrvVSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetSrvVSchemas(ctx, req.(*GetSrvVSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTabletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetTablet(ctx, req.(*GetTabletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetTablets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTabletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetTablets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetTablets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetTablets(ctx, req.(*GetTabletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetVSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetVSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetVSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetVSchema(ctx, req.(*GetVSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetVSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetVSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetVSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetVSchemas(ctx, req.(*GetVSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_GetWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).GetWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/GetWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).GetWorkflows(ctx, req.(*GetWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTAdmin_VTExplain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VTExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTAdminServer).VTExplain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtadmin.VTAdmin/VTExplain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTAdminServer).VTExplain(ctx, req.(*VTExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VTAdmin_ServiceDesc is the grpc.ServiceDesc for VTAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VTAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vtadmin.VTAdmin",
	HandlerType: (*VTAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSchema",
			Handler:    _VTAdmin_FindSchema_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _VTAdmin_GetClusters_Handler,
		},
		{
			MethodName: "GetGates",
			Handler:    _VTAdmin_GetGates_Handler,
		},
		{
			MethodName: "GetKeyspace",
			Handler:    _VTAdmin_GetKeyspace_Handler,
		},
		{
			MethodName: "GetKeyspaces",
			Handler:    _VTAdmin_GetKeyspaces_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _VTAdmin_GetSchema_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _VTAdmin_GetSchemas_Handler,
		},
		{
			MethodName: "GetSrvVSchema",
			Handler:    _VTAdmin_GetSrvVSchema_Handler,
		},
		{
			MethodName: "GetSrvVSchemas",
			Handler:    _VTAdmin_GetSrvVSchemas_Handler,
		},
		{
			MethodName: "GetTablet",
			Handler:    _VTAdmin_GetTablet_Handler,
		},
		{
			MethodName: "GetTablets",
			Handler:    _VTAdmin_GetTablets_Handler,
		},
		{
			MethodName: "GetVSchema",
			Handler:    _VTAdmin_GetVSchema_Handler,
		},
		{
			MethodName: "GetVSchemas",
			Handler:    _VTAdmin_GetVSchemas_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _VTAdmin_GetWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflows",
			Handler:    _VTAdmin_GetWorkflows_Handler,
		},
		{
			MethodName: "VTExplain",
			Handler:    _VTAdmin_VTExplain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vtadmin.proto",
}
