//
//Copyright 2025 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file defines the replication related structures we use.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: vtorcdata.proto

package vtorcdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vttime "vitess.io/vitess/go/vt/proto/vttime"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalysisType int32

const (
	AnalysisType_NoProblem                              AnalysisType = 0
	AnalysisType_ClusterHasNoPrimary                    AnalysisType = 1
	AnalysisType_PrimaryTabletDeleted                   AnalysisType = 2
	AnalysisType_InvalidPrimary                         AnalysisType = 3
	AnalysisType_InvalidReplica                         AnalysisType = 4
	AnalysisType_DeadPrimaryWithoutReplicas             AnalysisType = 5
	AnalysisType_DeadPrimary                            AnalysisType = 6
	AnalysisType_DeadPrimaryAndReplicas                 AnalysisType = 7
	AnalysisType_DeadPrimaryAndSomeReplicas             AnalysisType = 8
	AnalysisType_PrimaryHasPrimary                      AnalysisType = 9
	AnalysisType_PrimaryIsReadOnly                      AnalysisType = 10
	AnalysisType_PrimaryCurrentTypeMismatch             AnalysisType = 11
	AnalysisType_PrimarySemiSyncMustBeSet               AnalysisType = 12
	AnalysisType_PrimarySemiSyncMustNotBeSet            AnalysisType = 13
	AnalysisType_ReplicaIsWritable                      AnalysisType = 14
	AnalysisType_NotConnectedToPrimary                  AnalysisType = 15
	AnalysisType_ConnectedToWrongPrimary                AnalysisType = 16
	AnalysisType_ReplicationStopped                     AnalysisType = 17
	AnalysisType_ReplicaSemiSyncMustBeSet               AnalysisType = 18
	AnalysisType_ReplicaSemiSyncMustNotBeSet            AnalysisType = 19
	AnalysisType_ReplicaMisconfigured                   AnalysisType = 20
	AnalysisType_UnreachablePrimaryWithLaggingReplicas  AnalysisType = 21
	AnalysisType_UnreachablePrimary                     AnalysisType = 22
	AnalysisType_PrimarySingleReplicaNotReplicating     AnalysisType = 23
	AnalysisType_PrimarySingleReplicaDead               AnalysisType = 24
	AnalysisType_AllPrimaryReplicasNotReplicating       AnalysisType = 25
	AnalysisType_AllPrimaryReplicasNotReplicatingOrDead AnalysisType = 26
	AnalysisType_LockedSemiSyncPrimaryHypothesis        AnalysisType = 27
	AnalysisType_LockedSemiSyncPrimary                  AnalysisType = 28
	AnalysisType_PrimarySemiSyncBlocked                 AnalysisType = 29
	AnalysisType_ErrantGtidDetected                     AnalysisType = 30
	AnalysisType_PrimaryDiskStalled                     AnalysisType = 31
)

// Enum value maps for AnalysisType.
var (
	AnalysisType_name = map[int32]string{
		0:  "NoProblem",
		1:  "ClusterHasNoPrimary",
		2:  "PrimaryTabletDeleted",
		3:  "InvalidPrimary",
		4:  "InvalidReplica",
		5:  "DeadPrimaryWithoutReplicas",
		6:  "DeadPrimary",
		7:  "DeadPrimaryAndReplicas",
		8:  "DeadPrimaryAndSomeReplicas",
		9:  "PrimaryHasPrimary",
		10: "PrimaryIsReadOnly",
		11: "PrimaryCurrentTypeMismatch",
		12: "PrimarySemiSyncMustBeSet",
		13: "PrimarySemiSyncMustNotBeSet",
		14: "ReplicaIsWritable",
		15: "NotConnectedToPrimary",
		16: "ConnectedToWrongPrimary",
		17: "ReplicationStopped",
		18: "ReplicaSemiSyncMustBeSet",
		19: "ReplicaSemiSyncMustNotBeSet",
		20: "ReplicaMisconfigured",
		21: "UnreachablePrimaryWithLaggingReplicas",
		22: "UnreachablePrimary",
		23: "PrimarySingleReplicaNotReplicating",
		24: "PrimarySingleReplicaDead",
		25: "AllPrimaryReplicasNotReplicating",
		26: "AllPrimaryReplicasNotReplicatingOrDead",
		27: "LockedSemiSyncPrimaryHypothesis",
		28: "LockedSemiSyncPrimary",
		29: "PrimarySemiSyncBlocked",
		30: "ErrantGtidDetected",
		31: "PrimaryDiskStalled",
	}
	AnalysisType_value = map[string]int32{
		"NoProblem":                              0,
		"ClusterHasNoPrimary":                    1,
		"PrimaryTabletDeleted":                   2,
		"InvalidPrimary":                         3,
		"InvalidReplica":                         4,
		"DeadPrimaryWithoutReplicas":             5,
		"DeadPrimary":                            6,
		"DeadPrimaryAndReplicas":                 7,
		"DeadPrimaryAndSomeReplicas":             8,
		"PrimaryHasPrimary":                      9,
		"PrimaryIsReadOnly":                      10,
		"PrimaryCurrentTypeMismatch":             11,
		"PrimarySemiSyncMustBeSet":               12,
		"PrimarySemiSyncMustNotBeSet":            13,
		"ReplicaIsWritable":                      14,
		"NotConnectedToPrimary":                  15,
		"ConnectedToWrongPrimary":                16,
		"ReplicationStopped":                     17,
		"ReplicaSemiSyncMustBeSet":               18,
		"ReplicaSemiSyncMustNotBeSet":            19,
		"ReplicaMisconfigured":                   20,
		"UnreachablePrimaryWithLaggingReplicas":  21,
		"UnreachablePrimary":                     22,
		"PrimarySingleReplicaNotReplicating":     23,
		"PrimarySingleReplicaDead":               24,
		"AllPrimaryReplicasNotReplicating":       25,
		"AllPrimaryReplicasNotReplicatingOrDead": 26,
		"LockedSemiSyncPrimaryHypothesis":        27,
		"LockedSemiSyncPrimary":                  28,
		"PrimarySemiSyncBlocked":                 29,
		"ErrantGtidDetected":                     30,
		"PrimaryDiskStalled":                     31,
	}
)

func (x AnalysisType) Enum() *AnalysisType {
	p := new(AnalysisType)
	*p = x
	return p
}

func (x AnalysisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisType) Descriptor() protoreflect.EnumDescriptor {
	return file_vtorcdata_proto_enumTypes[0].Descriptor()
}

func (AnalysisType) Type() protoreflect.EnumType {
	return &file_vtorcdata_proto_enumTypes[0]
}

func (x AnalysisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisType.Descriptor instead.
func (AnalysisType) EnumDescriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{0}
}

type StructureAnalysisType int32

const (
	StructureAnalysisType_NoStructureAnalysis                                  StructureAnalysisType = 0
	StructureAnalysisType_StatementAndMixedLoggingReplicasStructureWarning     StructureAnalysisType = 1
	StructureAnalysisType_StatementAndRowLoggingReplicasStructureWarning       StructureAnalysisType = 2
	StructureAnalysisType_MixedAndRowLoggingReplicasStructureWarning           StructureAnalysisType = 3
	StructureAnalysisType_MultipleMajorVersionsLoggingReplicasStructureWarning StructureAnalysisType = 4
	StructureAnalysisType_NoLoggingReplicasStructureWarning                    StructureAnalysisType = 5
	StructureAnalysisType_DifferentGtidModesStructureWarning                   StructureAnalysisType = 6
	StructureAnalysisType_ErrantGtidStructureWarning                           StructureAnalysisType = 7
	StructureAnalysisType_NoFailoverSupportStructureWarning                    StructureAnalysisType = 8
	StructureAnalysisType_NoWriteablePrimaryStructureWarning                   StructureAnalysisType = 9
	StructureAnalysisType_NotEnoughValidSemiSyncReplicasStructureWarning       StructureAnalysisType = 10
)

// Enum value maps for StructureAnalysisType.
var (
	StructureAnalysisType_name = map[int32]string{
		0:  "NoStructureAnalysis",
		1:  "StatementAndMixedLoggingReplicasStructureWarning",
		2:  "StatementAndRowLoggingReplicasStructureWarning",
		3:  "MixedAndRowLoggingReplicasStructureWarning",
		4:  "MultipleMajorVersionsLoggingReplicasStructureWarning",
		5:  "NoLoggingReplicasStructureWarning",
		6:  "DifferentGtidModesStructureWarning",
		7:  "ErrantGtidStructureWarning",
		8:  "NoFailoverSupportStructureWarning",
		9:  "NoWriteablePrimaryStructureWarning",
		10: "NotEnoughValidSemiSyncReplicasStructureWarning",
	}
	StructureAnalysisType_value = map[string]int32{
		"NoStructureAnalysis":                                  0,
		"StatementAndMixedLoggingReplicasStructureWarning":     1,
		"StatementAndRowLoggingReplicasStructureWarning":       2,
		"MixedAndRowLoggingReplicasStructureWarning":           3,
		"MultipleMajorVersionsLoggingReplicasStructureWarning": 4,
		"NoLoggingReplicasStructureWarning":                    5,
		"DifferentGtidModesStructureWarning":                   6,
		"ErrantGtidStructureWarning":                           7,
		"NoFailoverSupportStructureWarning":                    8,
		"NoWriteablePrimaryStructureWarning":                   9,
		"NotEnoughValidSemiSyncReplicasStructureWarning":       10,
	}
)

func (x StructureAnalysisType) Enum() *StructureAnalysisType {
	p := new(StructureAnalysisType)
	*p = x
	return p
}

func (x StructureAnalysisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureAnalysisType) Descriptor() protoreflect.EnumDescriptor {
	return file_vtorcdata_proto_enumTypes[1].Descriptor()
}

func (StructureAnalysisType) Type() protoreflect.EnumType {
	return &file_vtorcdata_proto_enumTypes[1]
}

func (x StructureAnalysisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureAnalysisType.Descriptor instead.
func (StructureAnalysisType) EnumDescriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{1}
}

type GTIDMode int32

const (
	GTIDMode_OFF            GTIDMode = 0
	GTIDMode_OFF_PERMISSIVE GTIDMode = 1
	GTIDMode_ON_PERMISSIVE  GTIDMode = 2
	GTIDMode_ON             GTIDMode = 3
)

// Enum value maps for GTIDMode.
var (
	GTIDMode_name = map[int32]string{
		0: "OFF",
		1: "OFF_PERMISSIVE",
		2: "ON_PERMISSIVE",
		3: "ON",
	}
	GTIDMode_value = map[string]int32{
		"OFF":            0,
		"OFF_PERMISSIVE": 1,
		"ON_PERMISSIVE":  2,
		"ON":             3,
	}
)

func (x GTIDMode) Enum() *GTIDMode {
	p := new(GTIDMode)
	*p = x
	return p
}

func (x GTIDMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GTIDMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vtorcdata_proto_enumTypes[2].Descriptor()
}

func (GTIDMode) Type() protoreflect.EnumType {
	return &file_vtorcdata_proto_enumTypes[2]
}

func (x GTIDMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GTIDMode.Descriptor instead.
func (GTIDMode) EnumDescriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{2}
}

type BinlogType int32

const (
	BinlogType_BinaryLog BinlogType = 0
	BinlogType_RelayLog  BinlogType = 1
)

// Enum value maps for BinlogType.
var (
	BinlogType_name = map[int32]string{
		0: "BinaryLog",
		1: "RelayLog",
	}
	BinlogType_value = map[string]int32{
		"BinaryLog": 0,
		"RelayLog":  1,
	}
)

func (x BinlogType) Enum() *BinlogType {
	p := new(BinlogType)
	*p = x
	return p
}

func (x BinlogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinlogType) Descriptor() protoreflect.EnumDescriptor {
	return file_vtorcdata_proto_enumTypes[3].Descriptor()
}

func (BinlogType) Type() protoreflect.EnumType {
	return &file_vtorcdata_proto_enumTypes[3]
}

func (x BinlogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinlogType.Descriptor instead.
func (BinlogType) EnumDescriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{3}
}

type BinlogCoordinates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogFile       string                 `protobuf:"bytes,1,opt,name=LogFile,proto3" json:"LogFile,omitempty"`
	LogPos        uint64                 `protobuf:"varint,2,opt,name=LogPos,proto3" json:"LogPos,omitempty"`
	Type          BinlogType             `protobuf:"varint,3,opt,name=type,proto3,enum=vtorcdata.BinlogType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinlogCoordinates) Reset() {
	*x = BinlogCoordinates{}
	mi := &file_vtorcdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinlogCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogCoordinates) ProtoMessage() {}

func (x *BinlogCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_vtorcdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogCoordinates.ProtoReflect.Descriptor instead.
func (*BinlogCoordinates) Descriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{0}
}

func (x *BinlogCoordinates) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *BinlogCoordinates) GetLogPos() uint64 {
	if x != nil {
		return x.LogPos
	}
	return 0
}

func (x *BinlogCoordinates) GetType() BinlogType {
	if x != nil {
		return x.Type
	}
	return BinlogType_BinaryLog
}

type ReplicationAnalysis struct {
	state                                     protoimpl.MessageState  `protogen:"open.v1"`
	RecoveryId                                int64                   `protobuf:"varint,1,opt,name=recovery_id,json=recoveryId,proto3" json:"recovery_id,omitempty"`
	AnalyzedInstanceAlias                     string                  `protobuf:"bytes,2,opt,name=analyzed_instance_alias,json=analyzedInstanceAlias,proto3" json:"analyzed_instance_alias,omitempty"`
	AnalyzedInstancePrimaryAlias              string                  `protobuf:"bytes,3,opt,name=analyzed_instance_primary_alias,json=analyzedInstancePrimaryAlias,proto3" json:"analyzed_instance_primary_alias,omitempty"`
	AnalyzedKeyspace                          string                  `protobuf:"bytes,4,opt,name=analyzed_keyspace,json=analyzedKeyspace,proto3" json:"analyzed_keyspace,omitempty"`
	AnalyzedShard                             string                  `protobuf:"bytes,5,opt,name=analyzed_shard,json=analyzedShard,proto3" json:"analyzed_shard,omitempty"`
	TabletType                                topodata.TabletType     `protobuf:"varint,6,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	CurrentTabletType                         topodata.TabletType     `protobuf:"varint,7,opt,name=current_tablet_type,json=currentTabletType,proto3,enum=topodata.TabletType" json:"current_tablet_type,omitempty"`
	PrimaryTimestamp                          *vttime.Time            `protobuf:"bytes,8,opt,name=primary_timestamp,json=primaryTimestamp,proto3" json:"primary_timestamp,omitempty"`
	ShardPrimaryTermTimestamp                 *vttime.Time            `protobuf:"bytes,9,opt,name=shard_primary_term_timestamp,json=shardPrimaryTermTimestamp,proto3" json:"shard_primary_term_timestamp,omitempty"`
	AnalyzedInstanceBinlogCoordinates         *BinlogCoordinates      `protobuf:"bytes,10,opt,name=analyzed_instance_binlog_coordinates,json=analyzedInstanceBinlogCoordinates,proto3" json:"analyzed_instance_binlog_coordinates,omitempty"`
	IsPrimary                                 bool                    `protobuf:"varint,11,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsClusterPrimary                          bool                    `protobuf:"varint,12,opt,name=is_cluster_primary,json=isClusterPrimary,proto3" json:"is_cluster_primary,omitempty"`
	IsReadOnly                                bool                    `protobuf:"varint,13,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
	IsDiskStalled                             bool                    `protobuf:"varint,14,opt,name=is_disk_stalled,json=isDiskStalled,proto3" json:"is_disk_stalled,omitempty"`
	IsActionableRecovery                      bool                    `protobuf:"varint,15,opt,name=is_actionable_recovery,json=isActionableRecovery,proto3" json:"is_actionable_recovery,omitempty"`
	LastCheckValid                            bool                    `protobuf:"varint,16,opt,name=last_check_valid,json=lastCheckValid,proto3" json:"last_check_valid,omitempty"`
	LastCheckPartialSuccess                   bool                    `protobuf:"varint,17,opt,name=last_check_partial_success,json=lastCheckPartialSuccess,proto3" json:"last_check_partial_success,omitempty"`
	ReplicationStopped                        bool                    `protobuf:"varint,18,opt,name=replication_stopped,json=replicationStopped,proto3" json:"replication_stopped,omitempty"`
	GtidMode                                  GTIDMode                `protobuf:"varint,19,opt,name=gtid_mode,json=gtidMode,proto3,enum=vtorcdata.GTIDMode" json:"gtid_mode,omitempty"`
	MinReplicaGtidMode                        GTIDMode                `protobuf:"varint,20,opt,name=min_replica_gtid_mode,json=minReplicaGtidMode,proto3,enum=vtorcdata.GTIDMode" json:"min_replica_gtid_mode,omitempty"`
	MaxReplicaGtidMode                        GTIDMode                `protobuf:"varint,21,opt,name=max_replica_gtid_mode,json=maxReplicaGtidMode,proto3,enum=vtorcdata.GTIDMode" json:"max_replica_gtid_mode,omitempty"`
	ErrantGtid                                string                  `protobuf:"bytes,22,opt,name=errant_gtid,json=errantGtid,proto3" json:"errant_gtid,omitempty"`
	MaxReplicaErrantGtid                      string                  `protobuf:"bytes,23,opt,name=max_replica_errant_gtid,json=maxReplicaErrantGtid,proto3" json:"max_replica_errant_gtid,omitempty"`
	ReplicaNetTimeout                         int32                   `protobuf:"varint,24,opt,name=replica_net_timeout,json=replicaNetTimeout,proto3" json:"replica_net_timeout,omitempty"`
	HeartbeatInterval                         float32                 `protobuf:"fixed32,25,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	Analysis                                  AnalysisType            `protobuf:"varint,26,opt,name=analysis,proto3,enum=vtorcdata.AnalysisType" json:"analysis,omitempty"`
	Description                               string                  `protobuf:"bytes,27,opt,name=description,proto3" json:"description,omitempty"`
	StructureAnalysis                         []StructureAnalysisType `protobuf:"varint,28,rep,packed,name=structure_analysis,json=structureAnalysis,proto3,enum=vtorcdata.StructureAnalysisType" json:"structure_analysis,omitempty"`
	OracleGtidImmediateTopology               bool                    `protobuf:"varint,29,opt,name=oracle_gtid_immediate_topology,json=oracleGtidImmediateTopology,proto3" json:"oracle_gtid_immediate_topology,omitempty"`
	BinlogServerImmediateTopology             bool                    `protobuf:"varint,30,opt,name=binlog_server_immediate_topology,json=binlogServerImmediateTopology,proto3" json:"binlog_server_immediate_topology,omitempty"`
	SemiSyncPrimaryEnabled                    bool                    `protobuf:"varint,31,opt,name=semi_sync_primary_enabled,json=semiSyncPrimaryEnabled,proto3" json:"semi_sync_primary_enabled,omitempty"`
	SemiSyncPrimaryStatus                     bool                    `protobuf:"varint,32,opt,name=semi_sync_primary_status,json=semiSyncPrimaryStatus,proto3" json:"semi_sync_primary_status,omitempty"`
	SemiSyncReplicaEnabled                    bool                    `protobuf:"varint,33,opt,name=semi_sync_replica_enabled,json=semiSyncReplicaEnabled,proto3" json:"semi_sync_replica_enabled,omitempty"`
	SemiSyncBlocked                           bool                    `protobuf:"varint,34,opt,name=semi_sync_blocked,json=semiSyncBlocked,proto3" json:"semi_sync_blocked,omitempty"`
	CountReplicas                             uint32                  `protobuf:"varint,35,opt,name=count_replicas,json=countReplicas,proto3" json:"count_replicas,omitempty"`
	CountValidReplicas                        uint32                  `protobuf:"varint,36,opt,name=count_valid_replicas,json=countValidReplicas,proto3" json:"count_valid_replicas,omitempty"`
	CountValidReplicatingReplicas             uint32                  `protobuf:"varint,37,opt,name=count_valid_replicating_replicas,json=countValidReplicatingReplicas,proto3" json:"count_valid_replicating_replicas,omitempty"`
	CountSemiSyncPrimaryWaitForReplica        uint32                  `protobuf:"varint,38,opt,name=count_semi_sync_primary_wait_for_replica,json=countSemiSyncPrimaryWaitForReplica,proto3" json:"count_semi_sync_primary_wait_for_replica,omitempty"`
	CountSemiSyncPrimaryClients               uint32                  `protobuf:"varint,39,opt,name=count_semi_sync_primary_clients,json=countSemiSyncPrimaryClients,proto3" json:"count_semi_sync_primary_clients,omitempty"`
	CountSemiSyncReplicasEnabled              uint32                  `protobuf:"varint,40,opt,name=count_semi_sync_replicas_enabled,json=countSemiSyncReplicasEnabled,proto3" json:"count_semi_sync_replicas_enabled,omitempty"`
	CountLoggingReplicas                      uint32                  `protobuf:"varint,41,opt,name=count_logging_replicas,json=countLoggingReplicas,proto3" json:"count_logging_replicas,omitempty"`
	CountStatementBasedLoggingReplicas        uint32                  `protobuf:"varint,42,opt,name=count_statement_based_logging_replicas,json=countStatementBasedLoggingReplicas,proto3" json:"count_statement_based_logging_replicas,omitempty"`
	CountMixedBasedLoggingReplicas            uint32                  `protobuf:"varint,43,opt,name=count_mixed_based_logging_replicas,json=countMixedBasedLoggingReplicas,proto3" json:"count_mixed_based_logging_replicas,omitempty"`
	CountRowBasedLoggingReplicas              uint32                  `protobuf:"varint,44,opt,name=count_row_based_logging_replicas,json=countRowBasedLoggingReplicas,proto3" json:"count_row_based_logging_replicas,omitempty"`
	CountDistinctMajorVersionsLoggingReplicas uint32                  `protobuf:"varint,45,opt,name=count_distinct_major_versions_logging_replicas,json=countDistinctMajorVersionsLoggingReplicas,proto3" json:"count_distinct_major_versions_logging_replicas,omitempty"`
	CountDelayedReplicas                      uint32                  `protobuf:"varint,46,opt,name=count_delayed_replicas,json=countDelayedReplicas,proto3" json:"count_delayed_replicas,omitempty"`
	CountLaggingReplicas                      uint32                  `protobuf:"varint,47,opt,name=count_lagging_replicas,json=countLaggingReplicas,proto3" json:"count_lagging_replicas,omitempty"`
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *ReplicationAnalysis) Reset() {
	*x = ReplicationAnalysis{}
	mi := &file_vtorcdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationAnalysis) ProtoMessage() {}

func (x *ReplicationAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_vtorcdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationAnalysis.ProtoReflect.Descriptor instead.
func (*ReplicationAnalysis) Descriptor() ([]byte, []int) {
	return file_vtorcdata_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationAnalysis) GetRecoveryId() int64 {
	if x != nil {
		return x.RecoveryId
	}
	return 0
}

func (x *ReplicationAnalysis) GetAnalyzedInstanceAlias() string {
	if x != nil {
		return x.AnalyzedInstanceAlias
	}
	return ""
}

func (x *ReplicationAnalysis) GetAnalyzedInstancePrimaryAlias() string {
	if x != nil {
		return x.AnalyzedInstancePrimaryAlias
	}
	return ""
}

func (x *ReplicationAnalysis) GetAnalyzedKeyspace() string {
	if x != nil {
		return x.AnalyzedKeyspace
	}
	return ""
}

func (x *ReplicationAnalysis) GetAnalyzedShard() string {
	if x != nil {
		return x.AnalyzedShard
	}
	return ""
}

func (x *ReplicationAnalysis) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

func (x *ReplicationAnalysis) GetCurrentTabletType() topodata.TabletType {
	if x != nil {
		return x.CurrentTabletType
	}
	return topodata.TabletType(0)
}

func (x *ReplicationAnalysis) GetPrimaryTimestamp() *vttime.Time {
	if x != nil {
		return x.PrimaryTimestamp
	}
	return nil
}

func (x *ReplicationAnalysis) GetShardPrimaryTermTimestamp() *vttime.Time {
	if x != nil {
		return x.ShardPrimaryTermTimestamp
	}
	return nil
}

func (x *ReplicationAnalysis) GetAnalyzedInstanceBinlogCoordinates() *BinlogCoordinates {
	if x != nil {
		return x.AnalyzedInstanceBinlogCoordinates
	}
	return nil
}

func (x *ReplicationAnalysis) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *ReplicationAnalysis) GetIsClusterPrimary() bool {
	if x != nil {
		return x.IsClusterPrimary
	}
	return false
}

func (x *ReplicationAnalysis) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

func (x *ReplicationAnalysis) GetIsDiskStalled() bool {
	if x != nil {
		return x.IsDiskStalled
	}
	return false
}

func (x *ReplicationAnalysis) GetIsActionableRecovery() bool {
	if x != nil {
		return x.IsActionableRecovery
	}
	return false
}

func (x *ReplicationAnalysis) GetLastCheckValid() bool {
	if x != nil {
		return x.LastCheckValid
	}
	return false
}

func (x *ReplicationAnalysis) GetLastCheckPartialSuccess() bool {
	if x != nil {
		return x.LastCheckPartialSuccess
	}
	return false
}

func (x *ReplicationAnalysis) GetReplicationStopped() bool {
	if x != nil {
		return x.ReplicationStopped
	}
	return false
}

func (x *ReplicationAnalysis) GetGtidMode() GTIDMode {
	if x != nil {
		return x.GtidMode
	}
	return GTIDMode_OFF
}

func (x *ReplicationAnalysis) GetMinReplicaGtidMode() GTIDMode {
	if x != nil {
		return x.MinReplicaGtidMode
	}
	return GTIDMode_OFF
}

func (x *ReplicationAnalysis) GetMaxReplicaGtidMode() GTIDMode {
	if x != nil {
		return x.MaxReplicaGtidMode
	}
	return GTIDMode_OFF
}

func (x *ReplicationAnalysis) GetErrantGtid() string {
	if x != nil {
		return x.ErrantGtid
	}
	return ""
}

func (x *ReplicationAnalysis) GetMaxReplicaErrantGtid() string {
	if x != nil {
		return x.MaxReplicaErrantGtid
	}
	return ""
}

func (x *ReplicationAnalysis) GetReplicaNetTimeout() int32 {
	if x != nil {
		return x.ReplicaNetTimeout
	}
	return 0
}

func (x *ReplicationAnalysis) GetHeartbeatInterval() float32 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

func (x *ReplicationAnalysis) GetAnalysis() AnalysisType {
	if x != nil {
		return x.Analysis
	}
	return AnalysisType_NoProblem
}

func (x *ReplicationAnalysis) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReplicationAnalysis) GetStructureAnalysis() []StructureAnalysisType {
	if x != nil {
		return x.StructureAnalysis
	}
	return nil
}

func (x *ReplicationAnalysis) GetOracleGtidImmediateTopology() bool {
	if x != nil {
		return x.OracleGtidImmediateTopology
	}
	return false
}

func (x *ReplicationAnalysis) GetBinlogServerImmediateTopology() bool {
	if x != nil {
		return x.BinlogServerImmediateTopology
	}
	return false
}

func (x *ReplicationAnalysis) GetSemiSyncPrimaryEnabled() bool {
	if x != nil {
		return x.SemiSyncPrimaryEnabled
	}
	return false
}

func (x *ReplicationAnalysis) GetSemiSyncPrimaryStatus() bool {
	if x != nil {
		return x.SemiSyncPrimaryStatus
	}
	return false
}

func (x *ReplicationAnalysis) GetSemiSyncReplicaEnabled() bool {
	if x != nil {
		return x.SemiSyncReplicaEnabled
	}
	return false
}

func (x *ReplicationAnalysis) GetSemiSyncBlocked() bool {
	if x != nil {
		return x.SemiSyncBlocked
	}
	return false
}

func (x *ReplicationAnalysis) GetCountReplicas() uint32 {
	if x != nil {
		return x.CountReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountValidReplicas() uint32 {
	if x != nil {
		return x.CountValidReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountValidReplicatingReplicas() uint32 {
	if x != nil {
		return x.CountValidReplicatingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountSemiSyncPrimaryWaitForReplica() uint32 {
	if x != nil {
		return x.CountSemiSyncPrimaryWaitForReplica
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountSemiSyncPrimaryClients() uint32 {
	if x != nil {
		return x.CountSemiSyncPrimaryClients
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountSemiSyncReplicasEnabled() uint32 {
	if x != nil {
		return x.CountSemiSyncReplicasEnabled
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountLoggingReplicas() uint32 {
	if x != nil {
		return x.CountLoggingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountStatementBasedLoggingReplicas() uint32 {
	if x != nil {
		return x.CountStatementBasedLoggingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountMixedBasedLoggingReplicas() uint32 {
	if x != nil {
		return x.CountMixedBasedLoggingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountRowBasedLoggingReplicas() uint32 {
	if x != nil {
		return x.CountRowBasedLoggingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountDistinctMajorVersionsLoggingReplicas() uint32 {
	if x != nil {
		return x.CountDistinctMajorVersionsLoggingReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountDelayedReplicas() uint32 {
	if x != nil {
		return x.CountDelayedReplicas
	}
	return 0
}

func (x *ReplicationAnalysis) GetCountLaggingReplicas() uint32 {
	if x != nil {
		return x.CountLaggingReplicas
	}
	return 0
}

var File_vtorcdata_proto protoreflect.FileDescriptor

const file_vtorcdata_proto_rawDesc = "" +
	"\n" +
	"\x0fvtorcdata.proto\x12\tvtorcdata\x1a\x0etopodata.proto\x1a\fvttime.proto\"p\n" +
	"\x11BinlogCoordinates\x12\x18\n" +
	"\aLogFile\x18\x01 \x01(\tR\aLogFile\x12\x16\n" +
	"\x06LogPos\x18\x02 \x01(\x04R\x06LogPos\x12)\n" +
	"\x04type\x18\x03 \x01(\x0e2\x15.vtorcdata.BinlogTypeR\x04type\"\xe1\x15\n" +
	"\x13ReplicationAnalysis\x12\x1f\n" +
	"\vrecovery_id\x18\x01 \x01(\x03R\n" +
	"recoveryId\x126\n" +
	"\x17analyzed_instance_alias\x18\x02 \x01(\tR\x15analyzedInstanceAlias\x12E\n" +
	"\x1fanalyzed_instance_primary_alias\x18\x03 \x01(\tR\x1canalyzedInstancePrimaryAlias\x12+\n" +
	"\x11analyzed_keyspace\x18\x04 \x01(\tR\x10analyzedKeyspace\x12%\n" +
	"\x0eanalyzed_shard\x18\x05 \x01(\tR\ranalyzedShard\x125\n" +
	"\vtablet_type\x18\x06 \x01(\x0e2\x14.topodata.TabletTypeR\n" +
	"tabletType\x12D\n" +
	"\x13current_tablet_type\x18\a \x01(\x0e2\x14.topodata.TabletTypeR\x11currentTabletType\x129\n" +
	"\x11primary_timestamp\x18\b \x01(\v2\f.vttime.TimeR\x10primaryTimestamp\x12M\n" +
	"\x1cshard_primary_term_timestamp\x18\t \x01(\v2\f.vttime.TimeR\x19shardPrimaryTermTimestamp\x12m\n" +
	"$analyzed_instance_binlog_coordinates\x18\n" +
	" \x01(\v2\x1c.vtorcdata.BinlogCoordinatesR!analyzedInstanceBinlogCoordinates\x12\x1d\n" +
	"\n" +
	"is_primary\x18\v \x01(\bR\tisPrimary\x12,\n" +
	"\x12is_cluster_primary\x18\f \x01(\bR\x10isClusterPrimary\x12 \n" +
	"\fis_read_only\x18\r \x01(\bR\n" +
	"isReadOnly\x12&\n" +
	"\x0fis_disk_stalled\x18\x0e \x01(\bR\risDiskStalled\x124\n" +
	"\x16is_actionable_recovery\x18\x0f \x01(\bR\x14isActionableRecovery\x12(\n" +
	"\x10last_check_valid\x18\x10 \x01(\bR\x0elastCheckValid\x12;\n" +
	"\x1alast_check_partial_success\x18\x11 \x01(\bR\x17lastCheckPartialSuccess\x12/\n" +
	"\x13replication_stopped\x18\x12 \x01(\bR\x12replicationStopped\x120\n" +
	"\tgtid_mode\x18\x13 \x01(\x0e2\x13.vtorcdata.GTIDModeR\bgtidMode\x12F\n" +
	"\x15min_replica_gtid_mode\x18\x14 \x01(\x0e2\x13.vtorcdata.GTIDModeR\x12minReplicaGtidMode\x12F\n" +
	"\x15max_replica_gtid_mode\x18\x15 \x01(\x0e2\x13.vtorcdata.GTIDModeR\x12maxReplicaGtidMode\x12\x1f\n" +
	"\verrant_gtid\x18\x16 \x01(\tR\n" +
	"errantGtid\x125\n" +
	"\x17max_replica_errant_gtid\x18\x17 \x01(\tR\x14maxReplicaErrantGtid\x12.\n" +
	"\x13replica_net_timeout\x18\x18 \x01(\x05R\x11replicaNetTimeout\x12-\n" +
	"\x12heartbeat_interval\x18\x19 \x01(\x02R\x11heartbeatInterval\x123\n" +
	"\banalysis\x18\x1a \x01(\x0e2\x17.vtorcdata.AnalysisTypeR\banalysis\x12 \n" +
	"\vdescription\x18\x1b \x01(\tR\vdescription\x12O\n" +
	"\x12structure_analysis\x18\x1c \x03(\x0e2 .vtorcdata.StructureAnalysisTypeR\x11structureAnalysis\x12C\n" +
	"\x1eoracle_gtid_immediate_topology\x18\x1d \x01(\bR\x1boracleGtidImmediateTopology\x12G\n" +
	" binlog_server_immediate_topology\x18\x1e \x01(\bR\x1dbinlogServerImmediateTopology\x129\n" +
	"\x19semi_sync_primary_enabled\x18\x1f \x01(\bR\x16semiSyncPrimaryEnabled\x127\n" +
	"\x18semi_sync_primary_status\x18  \x01(\bR\x15semiSyncPrimaryStatus\x129\n" +
	"\x19semi_sync_replica_enabled\x18! \x01(\bR\x16semiSyncReplicaEnabled\x12*\n" +
	"\x11semi_sync_blocked\x18\" \x01(\bR\x0fsemiSyncBlocked\x12%\n" +
	"\x0ecount_replicas\x18# \x01(\rR\rcountReplicas\x120\n" +
	"\x14count_valid_replicas\x18$ \x01(\rR\x12countValidReplicas\x12G\n" +
	" count_valid_replicating_replicas\x18% \x01(\rR\x1dcountValidReplicatingReplicas\x12T\n" +
	"(count_semi_sync_primary_wait_for_replica\x18& \x01(\rR\"countSemiSyncPrimaryWaitForReplica\x12D\n" +
	"\x1fcount_semi_sync_primary_clients\x18' \x01(\rR\x1bcountSemiSyncPrimaryClients\x12F\n" +
	" count_semi_sync_replicas_enabled\x18( \x01(\rR\x1ccountSemiSyncReplicasEnabled\x124\n" +
	"\x16count_logging_replicas\x18) \x01(\rR\x14countLoggingReplicas\x12R\n" +
	"&count_statement_based_logging_replicas\x18* \x01(\rR\"countStatementBasedLoggingReplicas\x12J\n" +
	"\"count_mixed_based_logging_replicas\x18+ \x01(\rR\x1ecountMixedBasedLoggingReplicas\x12F\n" +
	" count_row_based_logging_replicas\x18, \x01(\rR\x1ccountRowBasedLoggingReplicas\x12a\n" +
	".count_distinct_major_versions_logging_replicas\x18- \x01(\rR)countDistinctMajorVersionsLoggingReplicas\x124\n" +
	"\x16count_delayed_replicas\x18. \x01(\rR\x14countDelayedReplicas\x124\n" +
	"\x16count_lagging_replicas\x18/ \x01(\rR\x14countLaggingReplicas*\x99\a\n" +
	"\fAnalysisType\x12\r\n" +
	"\tNoProblem\x10\x00\x12\x17\n" +
	"\x13ClusterHasNoPrimary\x10\x01\x12\x18\n" +
	"\x14PrimaryTabletDeleted\x10\x02\x12\x12\n" +
	"\x0eInvalidPrimary\x10\x03\x12\x12\n" +
	"\x0eInvalidReplica\x10\x04\x12\x1e\n" +
	"\x1aDeadPrimaryWithoutReplicas\x10\x05\x12\x0f\n" +
	"\vDeadPrimary\x10\x06\x12\x1a\n" +
	"\x16DeadPrimaryAndReplicas\x10\a\x12\x1e\n" +
	"\x1aDeadPrimaryAndSomeReplicas\x10\b\x12\x15\n" +
	"\x11PrimaryHasPrimary\x10\t\x12\x15\n" +
	"\x11PrimaryIsReadOnly\x10\n" +
	"\x12\x1e\n" +
	"\x1aPrimaryCurrentTypeMismatch\x10\v\x12\x1c\n" +
	"\x18PrimarySemiSyncMustBeSet\x10\f\x12\x1f\n" +
	"\x1bPrimarySemiSyncMustNotBeSet\x10\r\x12\x15\n" +
	"\x11ReplicaIsWritable\x10\x0e\x12\x19\n" +
	"\x15NotConnectedToPrimary\x10\x0f\x12\x1b\n" +
	"\x17ConnectedToWrongPrimary\x10\x10\x12\x16\n" +
	"\x12ReplicationStopped\x10\x11\x12\x1c\n" +
	"\x18ReplicaSemiSyncMustBeSet\x10\x12\x12\x1f\n" +
	"\x1bReplicaSemiSyncMustNotBeSet\x10\x13\x12\x18\n" +
	"\x14ReplicaMisconfigured\x10\x14\x12)\n" +
	"%UnreachablePrimaryWithLaggingReplicas\x10\x15\x12\x16\n" +
	"\x12UnreachablePrimary\x10\x16\x12&\n" +
	"\"PrimarySingleReplicaNotReplicating\x10\x17\x12\x1c\n" +
	"\x18PrimarySingleReplicaDead\x10\x18\x12$\n" +
	" AllPrimaryReplicasNotReplicating\x10\x19\x12*\n" +
	"&AllPrimaryReplicasNotReplicatingOrDead\x10\x1a\x12#\n" +
	"\x1fLockedSemiSyncPrimaryHypothesis\x10\x1b\x12\x19\n" +
	"\x15LockedSemiSyncPrimary\x10\x1c\x12\x1a\n" +
	"\x16PrimarySemiSyncBlocked\x10\x1d\x12\x16\n" +
	"\x12ErrantGtidDetected\x10\x1e\x12\x16\n" +
	"\x12PrimaryDiskStalled\x10\x1f*\xf6\x03\n" +
	"\x15StructureAnalysisType\x12\x17\n" +
	"\x13NoStructureAnalysis\x10\x00\x124\n" +
	"0StatementAndMixedLoggingReplicasStructureWarning\x10\x01\x122\n" +
	".StatementAndRowLoggingReplicasStructureWarning\x10\x02\x12.\n" +
	"*MixedAndRowLoggingReplicasStructureWarning\x10\x03\x128\n" +
	"4MultipleMajorVersionsLoggingReplicasStructureWarning\x10\x04\x12%\n" +
	"!NoLoggingReplicasStructureWarning\x10\x05\x12&\n" +
	"\"DifferentGtidModesStructureWarning\x10\x06\x12\x1e\n" +
	"\x1aErrantGtidStructureWarning\x10\a\x12%\n" +
	"!NoFailoverSupportStructureWarning\x10\b\x12&\n" +
	"\"NoWriteablePrimaryStructureWarning\x10\t\x122\n" +
	".NotEnoughValidSemiSyncReplicasStructureWarning\x10\n" +
	"*B\n" +
	"\bGTIDMode\x12\a\n" +
	"\x03OFF\x10\x00\x12\x12\n" +
	"\x0eOFF_PERMISSIVE\x10\x01\x12\x11\n" +
	"\rON_PERMISSIVE\x10\x02\x12\x06\n" +
	"\x02ON\x10\x03*)\n" +
	"\n" +
	"BinlogType\x12\r\n" +
	"\tBinaryLog\x10\x00\x12\f\n" +
	"\bRelayLog\x10\x01B(Z&vitess.io/vitess/go/vt/proto/vtorcdatab\x06proto3"

var (
	file_vtorcdata_proto_rawDescOnce sync.Once
	file_vtorcdata_proto_rawDescData []byte
)

func file_vtorcdata_proto_rawDescGZIP() []byte {
	file_vtorcdata_proto_rawDescOnce.Do(func() {
		file_vtorcdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vtorcdata_proto_rawDesc), len(file_vtorcdata_proto_rawDesc)))
	})
	return file_vtorcdata_proto_rawDescData
}

var file_vtorcdata_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_vtorcdata_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_vtorcdata_proto_goTypes = []any{
	(AnalysisType)(0),           // 0: vtorcdata.AnalysisType
	(StructureAnalysisType)(0),  // 1: vtorcdata.StructureAnalysisType
	(GTIDMode)(0),               // 2: vtorcdata.GTIDMode
	(BinlogType)(0),             // 3: vtorcdata.BinlogType
	(*BinlogCoordinates)(nil),   // 4: vtorcdata.BinlogCoordinates
	(*ReplicationAnalysis)(nil), // 5: vtorcdata.ReplicationAnalysis
	(topodata.TabletType)(0),    // 6: topodata.TabletType
	(*vttime.Time)(nil),         // 7: vttime.Time
}
var file_vtorcdata_proto_depIdxs = []int32{
	3,  // 0: vtorcdata.BinlogCoordinates.type:type_name -> vtorcdata.BinlogType
	6,  // 1: vtorcdata.ReplicationAnalysis.tablet_type:type_name -> topodata.TabletType
	6,  // 2: vtorcdata.ReplicationAnalysis.current_tablet_type:type_name -> topodata.TabletType
	7,  // 3: vtorcdata.ReplicationAnalysis.primary_timestamp:type_name -> vttime.Time
	7,  // 4: vtorcdata.ReplicationAnalysis.shard_primary_term_timestamp:type_name -> vttime.Time
	4,  // 5: vtorcdata.ReplicationAnalysis.analyzed_instance_binlog_coordinates:type_name -> vtorcdata.BinlogCoordinates
	2,  // 6: vtorcdata.ReplicationAnalysis.gtid_mode:type_name -> vtorcdata.GTIDMode
	2,  // 7: vtorcdata.ReplicationAnalysis.min_replica_gtid_mode:type_name -> vtorcdata.GTIDMode
	2,  // 8: vtorcdata.ReplicationAnalysis.max_replica_gtid_mode:type_name -> vtorcdata.GTIDMode
	0,  // 9: vtorcdata.ReplicationAnalysis.analysis:type_name -> vtorcdata.AnalysisType
	1,  // 10: vtorcdata.ReplicationAnalysis.structure_analysis:type_name -> vtorcdata.StructureAnalysisType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_vtorcdata_proto_init() }
func file_vtorcdata_proto_init() {
	if File_vtorcdata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vtorcdata_proto_rawDesc), len(file_vtorcdata_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vtorcdata_proto_goTypes,
		DependencyIndexes: file_vtorcdata_proto_depIdxs,
		EnumInfos:         file_vtorcdata_proto_enumTypes,
		MessageInfos:      file_vtorcdata_proto_msgTypes,
	}.Build()
	File_vtorcdata_proto = out.File
	file_vtorcdata_proto_goTypes = nil
	file_vtorcdata_proto_depIdxs = nil
}
