//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to mysqlctld.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: mysqlctl.proto

package mysqlctl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"
	vttime "vitess.io/vitess/go/vt/proto/vttime"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status is an enum representing the possible status of a backup.
type BackupInfo_Status int32

const (
	BackupInfo_UNKNOWN    BackupInfo_Status = 0
	BackupInfo_INCOMPLETE BackupInfo_Status = 1
	BackupInfo_COMPLETE   BackupInfo_Status = 2
	// A backup status of INVALID should be set if the backup is complete
	// but unusable in some way (partial upload, corrupt file, etc).
	BackupInfo_INVALID BackupInfo_Status = 3
	// A backup status of VALID should be set if the backup is both
	// complete and usuable.
	BackupInfo_VALID BackupInfo_Status = 4
)

// Enum value maps for BackupInfo_Status.
var (
	BackupInfo_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "INCOMPLETE",
		2: "COMPLETE",
		3: "INVALID",
		4: "VALID",
	}
	BackupInfo_Status_value = map[string]int32{
		"UNKNOWN":    0,
		"INCOMPLETE": 1,
		"COMPLETE":   2,
		"INVALID":    3,
		"VALID":      4,
	}
)

func (x BackupInfo_Status) Enum() *BackupInfo_Status {
	p := new(BackupInfo_Status)
	*p = x
	return p
}

func (x BackupInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlctl_proto_enumTypes[0].Descriptor()
}

func (BackupInfo_Status) Type() protoreflect.EnumType {
	return &file_mysqlctl_proto_enumTypes[0]
}

func (x BackupInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupInfo_Status.Descriptor instead.
func (BackupInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{18, 0}
}

type StartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MysqldArgs    []string               `protobuf:"bytes,1,rep,name=mysqld_args,json=mysqldArgs,proto3" json:"mysqld_args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_mysqlctl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{0}
}

func (x *StartRequest) GetMysqldArgs() []string {
	if x != nil {
		return x.MysqldArgs
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	mi := &file_mysqlctl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{1}
}

type ShutdownRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WaitForMysqld        bool                   `protobuf:"varint,1,opt,name=wait_for_mysqld,json=waitForMysqld,proto3" json:"wait_for_mysqld,omitempty"`
	MysqlShutdownTimeout *vttime.Duration       `protobuf:"bytes,2,opt,name=mysql_shutdown_timeout,json=mysqlShutdownTimeout,proto3" json:"mysql_shutdown_timeout,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_mysqlctl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{2}
}

func (x *ShutdownRequest) GetWaitForMysqld() bool {
	if x != nil {
		return x.WaitForMysqld
	}
	return false
}

func (x *ShutdownRequest) GetMysqlShutdownTimeout() *vttime.Duration {
	if x != nil {
		return x.MysqlShutdownTimeout
	}
	return nil
}

type ShutdownResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_mysqlctl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{3}
}

type RunMysqlUpgradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMysqlUpgradeRequest) Reset() {
	*x = RunMysqlUpgradeRequest{}
	mi := &file_mysqlctl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMysqlUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMysqlUpgradeRequest) ProtoMessage() {}

func (x *RunMysqlUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMysqlUpgradeRequest.ProtoReflect.Descriptor instead.
func (*RunMysqlUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{4}
}

type RunMysqlUpgradeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMysqlUpgradeResponse) Reset() {
	*x = RunMysqlUpgradeResponse{}
	mi := &file_mysqlctl_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMysqlUpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMysqlUpgradeResponse) ProtoMessage() {}

func (x *RunMysqlUpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMysqlUpgradeResponse.ProtoReflect.Descriptor instead.
func (*RunMysqlUpgradeResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{5}
}

type ApplyBinlogFileRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	BinlogFileName        string                 `protobuf:"bytes,1,opt,name=binlog_file_name,json=binlogFileName,proto3" json:"binlog_file_name,omitempty"`
	BinlogRestorePosition string                 `protobuf:"bytes,2,opt,name=binlog_restore_position,json=binlogRestorePosition,proto3" json:"binlog_restore_position,omitempty"`
	BinlogRestoreDatetime *vttime.Time           `protobuf:"bytes,3,opt,name=binlog_restore_datetime,json=binlogRestoreDatetime,proto3" json:"binlog_restore_datetime,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ApplyBinlogFileRequest) Reset() {
	*x = ApplyBinlogFileRequest{}
	mi := &file_mysqlctl_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyBinlogFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyBinlogFileRequest) ProtoMessage() {}

func (x *ApplyBinlogFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyBinlogFileRequest.ProtoReflect.Descriptor instead.
func (*ApplyBinlogFileRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyBinlogFileRequest) GetBinlogFileName() string {
	if x != nil {
		return x.BinlogFileName
	}
	return ""
}

func (x *ApplyBinlogFileRequest) GetBinlogRestorePosition() string {
	if x != nil {
		return x.BinlogRestorePosition
	}
	return ""
}

func (x *ApplyBinlogFileRequest) GetBinlogRestoreDatetime() *vttime.Time {
	if x != nil {
		return x.BinlogRestoreDatetime
	}
	return nil
}

type ApplyBinlogFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyBinlogFileResponse) Reset() {
	*x = ApplyBinlogFileResponse{}
	mi := &file_mysqlctl_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyBinlogFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyBinlogFileResponse) ProtoMessage() {}

func (x *ApplyBinlogFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyBinlogFileResponse.ProtoReflect.Descriptor instead.
func (*ApplyBinlogFileResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{7}
}

type ReadBinlogFilesTimestampsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BinlogFileNames []string               `protobuf:"bytes,1,rep,name=binlog_file_names,json=binlogFileNames,proto3" json:"binlog_file_names,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadBinlogFilesTimestampsRequest) Reset() {
	*x = ReadBinlogFilesTimestampsRequest{}
	mi := &file_mysqlctl_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadBinlogFilesTimestampsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBinlogFilesTimestampsRequest) ProtoMessage() {}

func (x *ReadBinlogFilesTimestampsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBinlogFilesTimestampsRequest.ProtoReflect.Descriptor instead.
func (*ReadBinlogFilesTimestampsRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{8}
}

func (x *ReadBinlogFilesTimestampsRequest) GetBinlogFileNames() []string {
	if x != nil {
		return x.BinlogFileNames
	}
	return nil
}

type ReadBinlogFilesTimestampsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FirstTimestamp is the timestamp of the first found transaction searching in order of given binlog files
	FirstTimestamp *vttime.Time `protobuf:"bytes,1,opt,name=first_timestamp,json=firstTimestamp,proto3" json:"first_timestamp,omitempty"`
	// FirstTimestampBinlog is the name of the binary log in which the first timestamp is found
	FirstTimestampBinlog string `protobuf:"bytes,2,opt,name=first_timestamp_binlog,json=firstTimestampBinlog,proto3" json:"first_timestamp_binlog,omitempty"`
	// LastTimestamp is the timestamp of the last found transaction in given binlog files
	LastTimestamp *vttime.Time `protobuf:"bytes,3,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	// LastTimestampBinlog is the name of the binary log in which the last timestamp is found
	LastTimestampBinlog string `protobuf:"bytes,4,opt,name=last_timestamp_binlog,json=lastTimestampBinlog,proto3" json:"last_timestamp_binlog,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ReadBinlogFilesTimestampsResponse) Reset() {
	*x = ReadBinlogFilesTimestampsResponse{}
	mi := &file_mysqlctl_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadBinlogFilesTimestampsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBinlogFilesTimestampsResponse) ProtoMessage() {}

func (x *ReadBinlogFilesTimestampsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBinlogFilesTimestampsResponse.ProtoReflect.Descriptor instead.
func (*ReadBinlogFilesTimestampsResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{9}
}

func (x *ReadBinlogFilesTimestampsResponse) GetFirstTimestamp() *vttime.Time {
	if x != nil {
		return x.FirstTimestamp
	}
	return nil
}

func (x *ReadBinlogFilesTimestampsResponse) GetFirstTimestampBinlog() string {
	if x != nil {
		return x.FirstTimestampBinlog
	}
	return ""
}

func (x *ReadBinlogFilesTimestampsResponse) GetLastTimestamp() *vttime.Time {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *ReadBinlogFilesTimestampsResponse) GetLastTimestampBinlog() string {
	if x != nil {
		return x.LastTimestampBinlog
	}
	return ""
}

type ReinitConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReinitConfigRequest) Reset() {
	*x = ReinitConfigRequest{}
	mi := &file_mysqlctl_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReinitConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinitConfigRequest) ProtoMessage() {}

func (x *ReinitConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinitConfigRequest.ProtoReflect.Descriptor instead.
func (*ReinitConfigRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{10}
}

type ReinitConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReinitConfigResponse) Reset() {
	*x = ReinitConfigResponse{}
	mi := &file_mysqlctl_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReinitConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinitConfigResponse) ProtoMessage() {}

func (x *ReinitConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinitConfigResponse.ProtoReflect.Descriptor instead.
func (*ReinitConfigResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{11}
}

type RefreshConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshConfigRequest) Reset() {
	*x = RefreshConfigRequest{}
	mi := &file_mysqlctl_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshConfigRequest) ProtoMessage() {}

func (x *RefreshConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshConfigRequest.ProtoReflect.Descriptor instead.
func (*RefreshConfigRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{12}
}

type RefreshConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshConfigResponse) Reset() {
	*x = RefreshConfigResponse{}
	mi := &file_mysqlctl_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshConfigResponse) ProtoMessage() {}

func (x *RefreshConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshConfigResponse.ProtoReflect.Descriptor instead.
func (*RefreshConfigResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{13}
}

type VersionStringRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionStringRequest) Reset() {
	*x = VersionStringRequest{}
	mi := &file_mysqlctl_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStringRequest) ProtoMessage() {}

func (x *VersionStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStringRequest.ProtoReflect.Descriptor instead.
func (*VersionStringRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{14}
}

type VersionStringResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionStringResponse) Reset() {
	*x = VersionStringResponse{}
	mi := &file_mysqlctl_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStringResponse) ProtoMessage() {}

func (x *VersionStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStringResponse.ProtoReflect.Descriptor instead.
func (*VersionStringResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{15}
}

func (x *VersionStringResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HostMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostMetricsRequest) Reset() {
	*x = HostMetricsRequest{}
	mi := &file_mysqlctl_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsRequest) ProtoMessage() {}

func (x *HostMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsRequest.ProtoReflect.Descriptor instead.
func (*HostMetricsRequest) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{16}
}

type HostMetricsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metrics is a map (metric name -> metric value/error) so that the client has as much
	// information as possible about all the checked metrics.
	Metrics       map[string]*HostMetricsResponse_Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostMetricsResponse) Reset() {
	*x = HostMetricsResponse{}
	mi := &file_mysqlctl_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsResponse) ProtoMessage() {}

func (x *HostMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsResponse.ProtoReflect.Descriptor instead.
func (*HostMetricsResponse) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{17}
}

func (x *HostMetricsResponse) GetMetrics() map[string]*HostMetricsResponse_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// BackupInfo is the read-only attributes of a mysqlctl/backupstorage.BackupHandle.
type BackupInfo struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Directory   string                 `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Keyspace    string                 `protobuf:"bytes,3,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard       string                 `protobuf:"bytes,4,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Time        *vttime.Time           `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	// Engine is the name of the backupengine implementation used to create
	// this backup.
	Engine        string            `protobuf:"bytes,7,opt,name=engine,proto3" json:"engine,omitempty"`
	Status        BackupInfo_Status `protobuf:"varint,8,opt,name=status,proto3,enum=mysqlctl.BackupInfo_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupInfo) Reset() {
	*x = BackupInfo{}
	mi := &file_mysqlctl_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupInfo) ProtoMessage() {}

func (x *BackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupInfo.ProtoReflect.Descriptor instead.
func (*BackupInfo) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{18}
}

func (x *BackupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupInfo) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *BackupInfo) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *BackupInfo) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *BackupInfo) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BackupInfo) GetTime() *vttime.Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BackupInfo) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *BackupInfo) GetStatus() BackupInfo_Status {
	if x != nil {
		return x.Status
	}
	return BackupInfo_UNKNOWN
}

type HostMetricsResponse_Metric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the metric
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value is the metric value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// Error indicates an error retrieving the value
	Error         *vtrpc.RPCError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostMetricsResponse_Metric) Reset() {
	*x = HostMetricsResponse_Metric{}
	mi := &file_mysqlctl_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsResponse_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsResponse_Metric) ProtoMessage() {}

func (x *HostMetricsResponse_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlctl_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsResponse_Metric.ProtoReflect.Descriptor instead.
func (*HostMetricsResponse_Metric) Descriptor() ([]byte, []int) {
	return file_mysqlctl_proto_rawDescGZIP(), []int{17, 0}
}

func (x *HostMetricsResponse_Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostMetricsResponse_Metric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HostMetricsResponse_Metric) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_mysqlctl_proto protoreflect.FileDescriptor

const file_mysqlctl_proto_rawDesc = "" +
	"\n" +
	"\x0emysqlctl.proto\x12\bmysqlctl\x1a\x0etopodata.proto\x1a\fvttime.proto\x1a\vvtrpc.proto\"/\n" +
	"\fStartRequest\x12\x1f\n" +
	"\vmysqld_args\x18\x01 \x03(\tR\n" +
	"mysqldArgs\"\x0f\n" +
	"\rStartResponse\"\x81\x01\n" +
	"\x0fShutdownRequest\x12&\n" +
	"\x0fwait_for_mysqld\x18\x01 \x01(\bR\rwaitForMysqld\x12F\n" +
	"\x16mysql_shutdown_timeout\x18\x02 \x01(\v2\x10.vttime.DurationR\x14mysqlShutdownTimeout\"\x12\n" +
	"\x10ShutdownResponse\"\x18\n" +
	"\x16RunMysqlUpgradeRequest\"\x19\n" +
	"\x17RunMysqlUpgradeResponse\"\xc0\x01\n" +
	"\x16ApplyBinlogFileRequest\x12(\n" +
	"\x10binlog_file_name\x18\x01 \x01(\tR\x0ebinlogFileName\x126\n" +
	"\x17binlog_restore_position\x18\x02 \x01(\tR\x15binlogRestorePosition\x12D\n" +
	"\x17binlog_restore_datetime\x18\x03 \x01(\v2\f.vttime.TimeR\x15binlogRestoreDatetime\"\x19\n" +
	"\x17ApplyBinlogFileResponse\"N\n" +
	" ReadBinlogFilesTimestampsRequest\x12*\n" +
	"\x11binlog_file_names\x18\x01 \x03(\tR\x0fbinlogFileNames\"\xf9\x01\n" +
	"!ReadBinlogFilesTimestampsResponse\x125\n" +
	"\x0ffirst_timestamp\x18\x01 \x01(\v2\f.vttime.TimeR\x0efirstTimestamp\x124\n" +
	"\x16first_timestamp_binlog\x18\x02 \x01(\tR\x14firstTimestampBinlog\x123\n" +
	"\x0elast_timestamp\x18\x03 \x01(\v2\f.vttime.TimeR\rlastTimestamp\x122\n" +
	"\x15last_timestamp_binlog\x18\x04 \x01(\tR\x13lastTimestampBinlog\"\x15\n" +
	"\x13ReinitConfigRequest\"\x16\n" +
	"\x14ReinitConfigResponse\"\x16\n" +
	"\x14RefreshConfigRequest\"\x17\n" +
	"\x15RefreshConfigResponse\"\x16\n" +
	"\x14VersionStringRequest\"1\n" +
	"\x15VersionStringResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"\x14\n" +
	"\x12HostMetricsRequest\"\x98\x02\n" +
	"\x13HostMetricsResponse\x12D\n" +
	"\ametrics\x18\x01 \x03(\v2*.mysqlctl.HostMetricsResponse.MetricsEntryR\ametrics\x1aY\n" +
	"\x06Metric\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12%\n" +
	"\x05error\x18\x03 \x01(\v2\x0f.vtrpc.RPCErrorR\x05error\x1a`\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12:\n" +
	"\x05value\x18\x02 \x01(\v2$.mysqlctl.HostMetricsResponse.MetricR\x05value:\x028\x01\"\xe6\x02\n" +
	"\n" +
	"BackupInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tdirectory\x18\x02 \x01(\tR\tdirectory\x12\x1a\n" +
	"\bkeyspace\x18\x03 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x04 \x01(\tR\x05shard\x128\n" +
	"\ftablet_alias\x18\x05 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12 \n" +
	"\x04time\x18\x06 \x01(\v2\f.vttime.TimeR\x04time\x12\x16\n" +
	"\x06engine\x18\a \x01(\tR\x06engine\x123\n" +
	"\x06status\x18\b \x01(\x0e2\x1b.mysqlctl.BackupInfo.StatusR\x06status\"K\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0e\n" +
	"\n" +
	"INCOMPLETE\x10\x01\x12\f\n" +
	"\bCOMPLETE\x10\x02\x12\v\n" +
	"\aINVALID\x10\x03\x12\t\n" +
	"\x05VALID\x10\x042\xfe\x05\n" +
	"\bMysqlCtl\x12:\n" +
	"\x05Start\x12\x16.mysqlctl.StartRequest\x1a\x17.mysqlctl.StartResponse\"\x00\x12C\n" +
	"\bShutdown\x12\x19.mysqlctl.ShutdownRequest\x1a\x1a.mysqlctl.ShutdownResponse\"\x00\x12X\n" +
	"\x0fRunMysqlUpgrade\x12 .mysqlctl.RunMysqlUpgradeRequest\x1a!.mysqlctl.RunMysqlUpgradeResponse\"\x00\x12X\n" +
	"\x0fApplyBinlogFile\x12 .mysqlctl.ApplyBinlogFileRequest\x1a!.mysqlctl.ApplyBinlogFileResponse\"\x00\x12v\n" +
	"\x19ReadBinlogFilesTimestamps\x12*.mysqlctl.ReadBinlogFilesTimestampsRequest\x1a+.mysqlctl.ReadBinlogFilesTimestampsResponse\"\x00\x12O\n" +
	"\fReinitConfig\x12\x1d.mysqlctl.ReinitConfigRequest\x1a\x1e.mysqlctl.ReinitConfigResponse\"\x00\x12R\n" +
	"\rRefreshConfig\x12\x1e.mysqlctl.RefreshConfigRequest\x1a\x1f.mysqlctl.RefreshConfigResponse\"\x00\x12R\n" +
	"\rVersionString\x12\x1e.mysqlctl.VersionStringRequest\x1a\x1f.mysqlctl.VersionStringResponse\"\x00\x12L\n" +
	"\vHostMetrics\x12\x1c.mysqlctl.HostMetricsRequest\x1a\x1d.mysqlctl.HostMetricsResponse\"\x00B'Z%vitess.io/vitess/go/vt/proto/mysqlctlb\x06proto3"

var (
	file_mysqlctl_proto_rawDescOnce sync.Once
	file_mysqlctl_proto_rawDescData []byte
)

func file_mysqlctl_proto_rawDescGZIP() []byte {
	file_mysqlctl_proto_rawDescOnce.Do(func() {
		file_mysqlctl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mysqlctl_proto_rawDesc), len(file_mysqlctl_proto_rawDesc)))
	})
	return file_mysqlctl_proto_rawDescData
}

var file_mysqlctl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mysqlctl_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_mysqlctl_proto_goTypes = []any{
	(BackupInfo_Status)(0),                    // 0: mysqlctl.BackupInfo.Status
	(*StartRequest)(nil),                      // 1: mysqlctl.StartRequest
	(*StartResponse)(nil),                     // 2: mysqlctl.StartResponse
	(*ShutdownRequest)(nil),                   // 3: mysqlctl.ShutdownRequest
	(*ShutdownResponse)(nil),                  // 4: mysqlctl.ShutdownResponse
	(*RunMysqlUpgradeRequest)(nil),            // 5: mysqlctl.RunMysqlUpgradeRequest
	(*RunMysqlUpgradeResponse)(nil),           // 6: mysqlctl.RunMysqlUpgradeResponse
	(*ApplyBinlogFileRequest)(nil),            // 7: mysqlctl.ApplyBinlogFileRequest
	(*ApplyBinlogFileResponse)(nil),           // 8: mysqlctl.ApplyBinlogFileResponse
	(*ReadBinlogFilesTimestampsRequest)(nil),  // 9: mysqlctl.ReadBinlogFilesTimestampsRequest
	(*ReadBinlogFilesTimestampsResponse)(nil), // 10: mysqlctl.ReadBinlogFilesTimestampsResponse
	(*ReinitConfigRequest)(nil),               // 11: mysqlctl.ReinitConfigRequest
	(*ReinitConfigResponse)(nil),              // 12: mysqlctl.ReinitConfigResponse
	(*RefreshConfigRequest)(nil),              // 13: mysqlctl.RefreshConfigRequest
	(*RefreshConfigResponse)(nil),             // 14: mysqlctl.RefreshConfigResponse
	(*VersionStringRequest)(nil),              // 15: mysqlctl.VersionStringRequest
	(*VersionStringResponse)(nil),             // 16: mysqlctl.VersionStringResponse
	(*HostMetricsRequest)(nil),                // 17: mysqlctl.HostMetricsRequest
	(*HostMetricsResponse)(nil),               // 18: mysqlctl.HostMetricsResponse
	(*BackupInfo)(nil),                        // 19: mysqlctl.BackupInfo
	(*HostMetricsResponse_Metric)(nil),        // 20: mysqlctl.HostMetricsResponse.Metric
	nil,                                       // 21: mysqlctl.HostMetricsResponse.MetricsEntry
	(*vttime.Duration)(nil),                   // 22: vttime.Duration
	(*vttime.Time)(nil),                       // 23: vttime.Time
	(*topodata.TabletAlias)(nil),              // 24: topodata.TabletAlias
	(*vtrpc.RPCError)(nil),                    // 25: vtrpc.RPCError
}
var file_mysqlctl_proto_depIdxs = []int32{
	22, // 0: mysqlctl.ShutdownRequest.mysql_shutdown_timeout:type_name -> vttime.Duration
	23, // 1: mysqlctl.ApplyBinlogFileRequest.binlog_restore_datetime:type_name -> vttime.Time
	23, // 2: mysqlctl.ReadBinlogFilesTimestampsResponse.first_timestamp:type_name -> vttime.Time
	23, // 3: mysqlctl.ReadBinlogFilesTimestampsResponse.last_timestamp:type_name -> vttime.Time
	21, // 4: mysqlctl.HostMetricsResponse.metrics:type_name -> mysqlctl.HostMetricsResponse.MetricsEntry
	24, // 5: mysqlctl.BackupInfo.tablet_alias:type_name -> topodata.TabletAlias
	23, // 6: mysqlctl.BackupInfo.time:type_name -> vttime.Time
	0,  // 7: mysqlctl.BackupInfo.status:type_name -> mysqlctl.BackupInfo.Status
	25, // 8: mysqlctl.HostMetricsResponse.Metric.error:type_name -> vtrpc.RPCError
	20, // 9: mysqlctl.HostMetricsResponse.MetricsEntry.value:type_name -> mysqlctl.HostMetricsResponse.Metric
	1,  // 10: mysqlctl.MysqlCtl.Start:input_type -> mysqlctl.StartRequest
	3,  // 11: mysqlctl.MysqlCtl.Shutdown:input_type -> mysqlctl.ShutdownRequest
	5,  // 12: mysqlctl.MysqlCtl.RunMysqlUpgrade:input_type -> mysqlctl.RunMysqlUpgradeRequest
	7,  // 13: mysqlctl.MysqlCtl.ApplyBinlogFile:input_type -> mysqlctl.ApplyBinlogFileRequest
	9,  // 14: mysqlctl.MysqlCtl.ReadBinlogFilesTimestamps:input_type -> mysqlctl.ReadBinlogFilesTimestampsRequest
	11, // 15: mysqlctl.MysqlCtl.ReinitConfig:input_type -> mysqlctl.ReinitConfigRequest
	13, // 16: mysqlctl.MysqlCtl.RefreshConfig:input_type -> mysqlctl.RefreshConfigRequest
	15, // 17: mysqlctl.MysqlCtl.VersionString:input_type -> mysqlctl.VersionStringRequest
	17, // 18: mysqlctl.MysqlCtl.HostMetrics:input_type -> mysqlctl.HostMetricsRequest
	2,  // 19: mysqlctl.MysqlCtl.Start:output_type -> mysqlctl.StartResponse
	4,  // 20: mysqlctl.MysqlCtl.Shutdown:output_type -> mysqlctl.ShutdownResponse
	6,  // 21: mysqlctl.MysqlCtl.RunMysqlUpgrade:output_type -> mysqlctl.RunMysqlUpgradeResponse
	8,  // 22: mysqlctl.MysqlCtl.ApplyBinlogFile:output_type -> mysqlctl.ApplyBinlogFileResponse
	10, // 23: mysqlctl.MysqlCtl.ReadBinlogFilesTimestamps:output_type -> mysqlctl.ReadBinlogFilesTimestampsResponse
	12, // 24: mysqlctl.MysqlCtl.ReinitConfig:output_type -> mysqlctl.ReinitConfigResponse
	14, // 25: mysqlctl.MysqlCtl.RefreshConfig:output_type -> mysqlctl.RefreshConfigResponse
	16, // 26: mysqlctl.MysqlCtl.VersionString:output_type -> mysqlctl.VersionStringResponse
	18, // 27: mysqlctl.MysqlCtl.HostMetrics:output_type -> mysqlctl.HostMetricsResponse
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_mysqlctl_proto_init() }
func file_mysqlctl_proto_init() {
	if File_mysqlctl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mysqlctl_proto_rawDesc), len(file_mysqlctl_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mysqlctl_proto_goTypes,
		DependencyIndexes: file_mysqlctl_proto_depIdxs,
		EnumInfos:         file_mysqlctl_proto_enumTypes,
		MessageInfos:      file_mysqlctl_proto_msgTypes,
	}.Build()
	File_mysqlctl_proto = out.File
	file_mysqlctl_proto_goTypes = nil
	file_mysqlctl_proto_depIdxs = nil
}
