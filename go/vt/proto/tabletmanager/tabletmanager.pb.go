// Code generated by protoc-gen-go.
// source: tabletmanager.proto
// DO NOT EDIT!

/*
Package tabletmanager is a generated protocol buffer package.

It is generated from these files:
	tabletmanager.proto

It has these top-level messages:
	SnapshotArgs
*/
package tabletmanager

import proto "github.com/golang/protobuf/proto"
import vtctl "github.com/youtube/vitess/go/vt/proto/vtctl"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type SnapshotArgs struct {
	Concurrency         int64 `protobuf:"varint,1,opt,name=concurrency" json:"concurrency,omitempty"`
	ServerMode          bool  `protobuf:"varint,2,opt,name=server_mode" json:"server_mode,omitempty"`
	ForceMasterSnapshot bool  `protobuf:"varint,3,opt,name=force_master_snapshot" json:"force_master_snapshot,omitempty"`
}

func (m *SnapshotArgs) Reset()         { *m = SnapshotArgs{} }
func (m *SnapshotArgs) String() string { return proto.CompactTextString(m) }
func (*SnapshotArgs) ProtoMessage()    {}

func init() {
}

// Client API for TabletManager service

type TabletManagerClient interface {
	// FIXME(alainjobart) need to also return SnapshotReply
	Snapshot(ctx context.Context, in *SnapshotArgs, opts ...grpc.CallOption) (TabletManager_SnapshotClient, error)
}

type tabletManagerClient struct {
	cc *grpc.ClientConn
}

func NewTabletManagerClient(cc *grpc.ClientConn) TabletManagerClient {
	return &tabletManagerClient{cc}
}

func (c *tabletManagerClient) Snapshot(ctx context.Context, in *SnapshotArgs, opts ...grpc.CallOption) (TabletManager_SnapshotClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TabletManager_serviceDesc.Streams[0], c.cc, "/tabletmanager.TabletManager/Snapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerSnapshotClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_SnapshotClient interface {
	Recv() (*vtctl.LoggerEvent, error)
	grpc.ClientStream
}

type tabletManagerSnapshotClient struct {
	grpc.ClientStream
}

func (x *tabletManagerSnapshotClient) Recv() (*vtctl.LoggerEvent, error) {
	m := new(vtctl.LoggerEvent)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TabletManager service

type TabletManagerServer interface {
	// FIXME(alainjobart) need to also return SnapshotReply
	Snapshot(*SnapshotArgs, TabletManager_SnapshotServer) error
}

func RegisterTabletManagerServer(s *grpc.Server, srv TabletManagerServer) {
	s.RegisterService(&_TabletManager_serviceDesc, srv)
}

func _TabletManager_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnapshotArgs)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).Snapshot(m, &tabletManagerSnapshotServer{stream})
}

type TabletManager_SnapshotServer interface {
	Send(*vtctl.LoggerEvent) error
	grpc.ServerStream
}

type tabletManagerSnapshotServer struct {
	grpc.ServerStream
}

func (x *tabletManagerSnapshotServer) Send(m *vtctl.LoggerEvent) error {
	return x.ServerStream.SendProto(m)
}

var _TabletManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabletmanager.TabletManager",
	HandlerType: (*TabletManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Snapshot",
			Handler:       _TabletManager_Snapshot_Handler,
			ServerStreams: true,
		},
	},
}
