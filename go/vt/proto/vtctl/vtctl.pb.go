// Code generated by protoc-gen-go.
// source: vtctl.proto
// DO NOT EDIT!

/*
Package vtctl is a generated protocol buffer package.

It is generated from these files:
	vtctl.proto

It has these top-level messages:
	ExecuteVtctlCommandArgs
	Time
	LoggerEvent
*/
package vtctl

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// ExecuteVtctlCommandArgs arguments to ExecuteVtctlCommand
// timeouts are in nanoseconds.
type ExecuteVtctlCommandArgs struct {
	Args          []string `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	ActionTimeout int64    `protobuf:"varint,2,opt,name=action_timeout" json:"action_timeout,omitempty"`
	LockTimeout   int64    `protobuf:"varint,3,opt,name=lock_timeout" json:"lock_timeout,omitempty"`
}

func (m *ExecuteVtctlCommandArgs) Reset()         { *m = ExecuteVtctlCommandArgs{} }
func (m *ExecuteVtctlCommandArgs) String() string { return proto.CompactTextString(m) }
func (*ExecuteVtctlCommandArgs) ProtoMessage()    {}

// Time represents a time stamp in nanoseconds. In go, use time.Unix to
// rebuild the Time value, and t.Unix() / t.Nanosecond() to generate.
type Time struct {
	Seconds     int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanoseconds int64 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}

// Streamed by ExecuteVtctlCommand
type LoggerEvent struct {
	Time  *Time  `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	File  string `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
	Line  int64  `protobuf:"varint,4,opt,name=line" json:"line,omitempty"`
	Value string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
}

func (m *LoggerEvent) Reset()         { *m = LoggerEvent{} }
func (m *LoggerEvent) String() string { return proto.CompactTextString(m) }
func (*LoggerEvent) ProtoMessage()    {}

func (m *LoggerEvent) GetTime() *Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
}

// Client API for Vtctl service

type VtctlClient interface {
	ExecuteVtctlCommand(ctx context.Context, in *ExecuteVtctlCommandArgs, opts ...grpc.CallOption) (Vtctl_ExecuteVtctlCommandClient, error)
}

type vtctlClient struct {
	cc *grpc.ClientConn
}

func NewVtctlClient(cc *grpc.ClientConn) VtctlClient {
	return &vtctlClient{cc}
}

func (c *vtctlClient) ExecuteVtctlCommand(ctx context.Context, in *ExecuteVtctlCommandArgs, opts ...grpc.CallOption) (Vtctl_ExecuteVtctlCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Vtctl_serviceDesc.Streams[0], c.cc, "/vtctl.Vtctl/ExecuteVtctlCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &vtctlExecuteVtctlCommandClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vtctl_ExecuteVtctlCommandClient interface {
	Recv() (*LoggerEvent, error)
	grpc.ClientStream
}

type vtctlExecuteVtctlCommandClient struct {
	grpc.ClientStream
}

func (x *vtctlExecuteVtctlCommandClient) Recv() (*LoggerEvent, error) {
	m := new(LoggerEvent)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Vtctl service

type VtctlServer interface {
	ExecuteVtctlCommand(*ExecuteVtctlCommandArgs, Vtctl_ExecuteVtctlCommandServer) error
}

func RegisterVtctlServer(s *grpc.Server, srv VtctlServer) {
	s.RegisterService(&_Vtctl_serviceDesc, srv)
}

func _Vtctl_ExecuteVtctlCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteVtctlCommandArgs)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(VtctlServer).ExecuteVtctlCommand(m, &vtctlExecuteVtctlCommandServer{stream})
}

type Vtctl_ExecuteVtctlCommandServer interface {
	Send(*LoggerEvent) error
	grpc.ServerStream
}

type vtctlExecuteVtctlCommandServer struct {
	grpc.ServerStream
}

func (x *vtctlExecuteVtctlCommandServer) Send(m *LoggerEvent) error {
	return x.ServerStream.SendProto(m)
}

var _Vtctl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vtctl.Vtctl",
	HandlerType: (*VtctlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteVtctlCommand",
			Handler:       _Vtctl_ExecuteVtctlCommand_Handler,
			ServerStreams: true,
		},
	},
}
