//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains the data structures for a service allowing
// you to use vtctld as a server for vt commands.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: vtctldata.proto

package vtctldata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
	logutil "vitess.io/vitess/go/vt/proto/logutil"
	mysqlctl "vitess.io/vitess/go/vt/proto/mysqlctl"
	query "vitess.io/vitess/go/vt/proto/query"
	replicationdata "vitess.io/vitess/go/vt/proto/replicationdata"
	tabletmanagerdata "vitess.io/vitess/go/vt/proto/tabletmanagerdata"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vschema "vitess.io/vitess/go/vt/proto/vschema"
	vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"
	vttime "vitess.io/vitess/go/vt/proto/vttime"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MaterializationIntent describes the reason for creating the Materialize flow
type MaterializationIntent int32

const (
	// CUSTOM is the default value
	MaterializationIntent_CUSTOM MaterializationIntent = 0
	// MOVETABLES is when we are creating a MoveTables flow
	MaterializationIntent_MOVETABLES MaterializationIntent = 1
	// CREATELOOKUPINDEX is when we are creating a CreateLookupIndex flow
	MaterializationIntent_CREATELOOKUPINDEX MaterializationIntent = 2
	// REFERENCE is when we are creating a materialization for reference tables
	MaterializationIntent_REFERENCE MaterializationIntent = 3
)

// Enum value maps for MaterializationIntent.
var (
	MaterializationIntent_name = map[int32]string{
		0: "CUSTOM",
		1: "MOVETABLES",
		2: "CREATELOOKUPINDEX",
		3: "REFERENCE",
	}
	MaterializationIntent_value = map[string]int32{
		"CUSTOM":            0,
		"MOVETABLES":        1,
		"CREATELOOKUPINDEX": 2,
		"REFERENCE":         3,
	}
)

func (x MaterializationIntent) Enum() *MaterializationIntent {
	p := new(MaterializationIntent)
	*p = x
	return p
}

func (x MaterializationIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaterializationIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_vtctldata_proto_enumTypes[0].Descriptor()
}

func (MaterializationIntent) Type() protoreflect.EnumType {
	return &file_vtctldata_proto_enumTypes[0]
}

func (x MaterializationIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaterializationIntent.Descriptor instead.
func (MaterializationIntent) EnumDescriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{0}
}

type QueryOrdering int32

const (
	QueryOrdering_NONE       QueryOrdering = 0
	QueryOrdering_ASCENDING  QueryOrdering = 1
	QueryOrdering_DESCENDING QueryOrdering = 2
)

// Enum value maps for QueryOrdering.
var (
	QueryOrdering_name = map[int32]string{
		0: "NONE",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	QueryOrdering_value = map[string]int32{
		"NONE":       0,
		"ASCENDING":  1,
		"DESCENDING": 2,
	}
)

func (x QueryOrdering) Enum() *QueryOrdering {
	p := new(QueryOrdering)
	*p = x
	return p
}

func (x QueryOrdering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOrdering) Descriptor() protoreflect.EnumDescriptor {
	return file_vtctldata_proto_enumTypes[1].Descriptor()
}

func (QueryOrdering) Type() protoreflect.EnumType {
	return &file_vtctldata_proto_enumTypes[1]
}

func (x QueryOrdering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOrdering.Descriptor instead.
func (QueryOrdering) EnumDescriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{1}
}

type ShardedAutoIncrementHandling int32

const (
	ShardedAutoIncrementHandling_LEAVE   ShardedAutoIncrementHandling = 0
	ShardedAutoIncrementHandling_REMOVE  ShardedAutoIncrementHandling = 1
	ShardedAutoIncrementHandling_REPLACE ShardedAutoIncrementHandling = 2
)

// Enum value maps for ShardedAutoIncrementHandling.
var (
	ShardedAutoIncrementHandling_name = map[int32]string{
		0: "LEAVE",
		1: "REMOVE",
		2: "REPLACE",
	}
	ShardedAutoIncrementHandling_value = map[string]int32{
		"LEAVE":   0,
		"REMOVE":  1,
		"REPLACE": 2,
	}
)

func (x ShardedAutoIncrementHandling) Enum() *ShardedAutoIncrementHandling {
	p := new(ShardedAutoIncrementHandling)
	*p = x
	return p
}

func (x ShardedAutoIncrementHandling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardedAutoIncrementHandling) Descriptor() protoreflect.EnumDescriptor {
	return file_vtctldata_proto_enumTypes[2].Descriptor()
}

func (ShardedAutoIncrementHandling) Type() protoreflect.EnumType {
	return &file_vtctldata_proto_enumTypes[2]
}

func (x ShardedAutoIncrementHandling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardedAutoIncrementHandling.Descriptor instead.
func (ShardedAutoIncrementHandling) EnumDescriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{2}
}

type SchemaMigration_Strategy int32

const (
	// SchemaMigration_VITESS uses vreplication to run the schema migration. It is
	// the default strategy for OnlineDDL requests.
	//
	// SchemaMigration_VITESS was also formerly called "ONLINE".
	SchemaMigration_VITESS SchemaMigration_Strategy = 0
	SchemaMigration_ONLINE SchemaMigration_Strategy = 0
	// SchemaMigration_DIRECT runs the migration directly against MySQL (e.g. `ALTER TABLE ...`),
	// meaning it is not actually an "online" DDL migration.
	SchemaMigration_DIRECT SchemaMigration_Strategy = 3
	// SchemaMigration_MYSQL is a managed migration (queued and executed by the
	// scheduler) but runs through a MySQL `ALTER TABLE`.
	SchemaMigration_MYSQL SchemaMigration_Strategy = 4
)

// Enum value maps for SchemaMigration_Strategy.
var (
	SchemaMigration_Strategy_name = map[int32]string{
		0: "VITESS",
		// Duplicate value: 0: "ONLINE",
		3: "DIRECT",
		4: "MYSQL",
	}
	SchemaMigration_Strategy_value = map[string]int32{
		"VITESS": 0,
		"ONLINE": 0,
		"DIRECT": 3,
		"MYSQL":  4,
	}
)

func (x SchemaMigration_Strategy) Enum() *SchemaMigration_Strategy {
	p := new(SchemaMigration_Strategy)
	*p = x
	return p
}

func (x SchemaMigration_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaMigration_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_vtctldata_proto_enumTypes[3].Descriptor()
}

func (SchemaMigration_Strategy) Type() protoreflect.EnumType {
	return &file_vtctldata_proto_enumTypes[3]
}

func (x SchemaMigration_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaMigration_Strategy.Descriptor instead.
func (SchemaMigration_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{5, 0}
}

type SchemaMigration_Status int32

const (
	SchemaMigration_UNKNOWN   SchemaMigration_Status = 0
	SchemaMigration_REQUESTED SchemaMigration_Status = 1
	SchemaMigration_CANCELLED SchemaMigration_Status = 2
	SchemaMigration_QUEUED    SchemaMigration_Status = 3
	SchemaMigration_READY     SchemaMigration_Status = 4
	SchemaMigration_RUNNING   SchemaMigration_Status = 5
	SchemaMigration_COMPLETE  SchemaMigration_Status = 6
	SchemaMigration_FAILED    SchemaMigration_Status = 7
)

// Enum value maps for SchemaMigration_Status.
var (
	SchemaMigration_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "REQUESTED",
		2: "CANCELLED",
		3: "QUEUED",
		4: "READY",
		5: "RUNNING",
		6: "COMPLETE",
		7: "FAILED",
	}
	SchemaMigration_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"REQUESTED": 1,
		"CANCELLED": 2,
		"QUEUED":    3,
		"READY":     4,
		"RUNNING":   5,
		"COMPLETE":  6,
		"FAILED":    7,
	}
)

func (x SchemaMigration_Status) Enum() *SchemaMigration_Status {
	p := new(SchemaMigration_Status)
	*p = x
	return p
}

func (x SchemaMigration_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaMigration_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vtctldata_proto_enumTypes[4].Descriptor()
}

func (SchemaMigration_Status) Type() protoreflect.EnumType {
	return &file_vtctldata_proto_enumTypes[4]
}

func (x SchemaMigration_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaMigration_Status.Descriptor instead.
func (SchemaMigration_Status) EnumDescriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{5, 1}
}

// ExecuteVtctlCommandRequest is the payload for ExecuteVtctlCommand.
// timeouts are in nanoseconds.
type ExecuteVtctlCommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Args          []string               `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	ActionTimeout int64                  `protobuf:"varint,2,opt,name=action_timeout,json=actionTimeout,proto3" json:"action_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteVtctlCommandRequest) Reset() {
	*x = ExecuteVtctlCommandRequest{}
	mi := &file_vtctldata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteVtctlCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteVtctlCommandRequest) ProtoMessage() {}

func (x *ExecuteVtctlCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteVtctlCommandRequest.ProtoReflect.Descriptor instead.
func (*ExecuteVtctlCommandRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteVtctlCommandRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecuteVtctlCommandRequest) GetActionTimeout() int64 {
	if x != nil {
		return x.ActionTimeout
	}
	return 0
}

// ExecuteVtctlCommandResponse is streamed back by ExecuteVtctlCommand.
type ExecuteVtctlCommandResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *logutil.Event         `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteVtctlCommandResponse) Reset() {
	*x = ExecuteVtctlCommandResponse{}
	mi := &file_vtctldata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteVtctlCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteVtctlCommandResponse) ProtoMessage() {}

func (x *ExecuteVtctlCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteVtctlCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecuteVtctlCommandResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteVtctlCommandResponse) GetEvent() *logutil.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// TableMaterializeSttings contains the settings for one table.
type TableMaterializeSettings struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TargetTable string                 `protobuf:"bytes,1,opt,name=target_table,json=targetTable,proto3" json:"target_table,omitempty"`
	// source_expression is a select statement.
	SourceExpression string `protobuf:"bytes,2,opt,name=source_expression,json=sourceExpression,proto3" json:"source_expression,omitempty"`
	// create_ddl contains the DDL to create the target table.
	// If empty, the target table must already exist.
	// if "copy", the target table DDL is the same as the source table.
	CreateDdl     string `protobuf:"bytes,3,opt,name=create_ddl,json=createDdl,proto3" json:"create_ddl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableMaterializeSettings) Reset() {
	*x = TableMaterializeSettings{}
	mi := &file_vtctldata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableMaterializeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMaterializeSettings) ProtoMessage() {}

func (x *TableMaterializeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMaterializeSettings.ProtoReflect.Descriptor instead.
func (*TableMaterializeSettings) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{2}
}

func (x *TableMaterializeSettings) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *TableMaterializeSettings) GetSourceExpression() string {
	if x != nil {
		return x.SourceExpression
	}
	return ""
}

func (x *TableMaterializeSettings) GetCreateDdl() string {
	if x != nil {
		return x.CreateDdl
	}
	return ""
}

// MaterializeSettings contains the settings for the Materialize command.
type MaterializeSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// workflow is the name of the workflow.
	Workflow       string `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	SourceKeyspace string `protobuf:"bytes,2,opt,name=source_keyspace,json=sourceKeyspace,proto3" json:"source_keyspace,omitempty"`
	TargetKeyspace string `protobuf:"bytes,3,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	// stop_after_copy specifies if vreplication should be stopped after copying.
	StopAfterCopy bool                        `protobuf:"varint,4,opt,name=stop_after_copy,json=stopAfterCopy,proto3" json:"stop_after_copy,omitempty"`
	TableSettings []*TableMaterializeSettings `protobuf:"bytes,5,rep,name=table_settings,json=tableSettings,proto3" json:"table_settings,omitempty"`
	// optional parameters.
	Cell        string `protobuf:"bytes,6,opt,name=cell,proto3" json:"cell,omitempty"`
	TabletTypes string `protobuf:"bytes,7,opt,name=tablet_types,json=tabletTypes,proto3" json:"tablet_types,omitempty"`
	// ExternalCluster is the name of the mounted cluster which has the source keyspace/db for this workflow
	// it is of the type <cluster_type.cluster_name>
	ExternalCluster string `protobuf:"bytes,8,opt,name=external_cluster,json=externalCluster,proto3" json:"external_cluster,omitempty"`
	// MaterializationIntent is used to identify the reason behind the materialization workflow: eg. MoveTables, CreateLookupVindex
	MaterializationIntent MaterializationIntent `protobuf:"varint,9,opt,name=materialization_intent,json=materializationIntent,proto3,enum=vtctldata.MaterializationIntent" json:"materialization_intent,omitempty"`
	// SourceTimeZone is the time zone in which datetimes on the source were stored, provided as an option in MoveTable
	SourceTimeZone string `protobuf:"bytes,10,opt,name=source_time_zone,json=sourceTimeZone,proto3" json:"source_time_zone,omitempty"`
	// TargetTimeZone is not currently specifiable by the user, defaults to UTC for the forward workflows
	// and to the SourceTimeZone in reverse workflows
	TargetTimeZone string   `protobuf:"bytes,11,opt,name=target_time_zone,json=targetTimeZone,proto3" json:"target_time_zone,omitempty"`
	SourceShards   []string `protobuf:"bytes,12,rep,name=source_shards,json=sourceShards,proto3" json:"source_shards,omitempty"`
	// OnDdl specifies the action to be taken when a DDL is encountered.
	OnDdl string `protobuf:"bytes,13,opt,name=on_ddl,json=onDdl,proto3" json:"on_ddl,omitempty"`
	// DeferSecondaryKeys specifies if secondary keys should be created in one shot after table copy finishes.
	DeferSecondaryKeys        bool                                        `protobuf:"varint,14,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,15,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	AtomicCopy                bool                                        `protobuf:"varint,16,opt,name=atomic_copy,json=atomicCopy,proto3" json:"atomic_copy,omitempty"`
	WorkflowOptions           *WorkflowOptions                            `protobuf:"bytes,17,opt,name=workflow_options,json=workflowOptions,proto3" json:"workflow_options,omitempty"`
	// ReferenceTables is set to a csv list of tables, if the materialization is for reference tables.
	ReferenceTables []string `protobuf:"bytes,18,rep,name=reference_tables,json=referenceTables,proto3" json:"reference_tables,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MaterializeSettings) Reset() {
	*x = MaterializeSettings{}
	mi := &file_vtctldata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializeSettings) ProtoMessage() {}

func (x *MaterializeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializeSettings.ProtoReflect.Descriptor instead.
func (*MaterializeSettings) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{3}
}

func (x *MaterializeSettings) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MaterializeSettings) GetSourceKeyspace() string {
	if x != nil {
		return x.SourceKeyspace
	}
	return ""
}

func (x *MaterializeSettings) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *MaterializeSettings) GetStopAfterCopy() bool {
	if x != nil {
		return x.StopAfterCopy
	}
	return false
}

func (x *MaterializeSettings) GetTableSettings() []*TableMaterializeSettings {
	if x != nil {
		return x.TableSettings
	}
	return nil
}

func (x *MaterializeSettings) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *MaterializeSettings) GetTabletTypes() string {
	if x != nil {
		return x.TabletTypes
	}
	return ""
}

func (x *MaterializeSettings) GetExternalCluster() string {
	if x != nil {
		return x.ExternalCluster
	}
	return ""
}

func (x *MaterializeSettings) GetMaterializationIntent() MaterializationIntent {
	if x != nil {
		return x.MaterializationIntent
	}
	return MaterializationIntent_CUSTOM
}

func (x *MaterializeSettings) GetSourceTimeZone() string {
	if x != nil {
		return x.SourceTimeZone
	}
	return ""
}

func (x *MaterializeSettings) GetTargetTimeZone() string {
	if x != nil {
		return x.TargetTimeZone
	}
	return ""
}

func (x *MaterializeSettings) GetSourceShards() []string {
	if x != nil {
		return x.SourceShards
	}
	return nil
}

func (x *MaterializeSettings) GetOnDdl() string {
	if x != nil {
		return x.OnDdl
	}
	return ""
}

func (x *MaterializeSettings) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *MaterializeSettings) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *MaterializeSettings) GetAtomicCopy() bool {
	if x != nil {
		return x.AtomicCopy
	}
	return false
}

func (x *MaterializeSettings) GetWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorkflowOptions
	}
	return nil
}

func (x *MaterializeSettings) GetReferenceTables() []string {
	if x != nil {
		return x.ReferenceTables
	}
	return nil
}

type Keyspace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Keyspace      *topodata.Keyspace     `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Keyspace) Reset() {
	*x = Keyspace{}
	mi := &file_vtctldata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keyspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyspace) ProtoMessage() {}

func (x *Keyspace) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyspace.ProtoReflect.Descriptor instead.
func (*Keyspace) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{4}
}

func (x *Keyspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Keyspace) GetKeyspace() *topodata.Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

// SchemaMigration represents a row in the schema_migrations sidecar table.
type SchemaMigration struct {
	state                       protoimpl.MessageState   `protogen:"open.v1"`
	Uuid                        string                   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Keyspace                    string                   `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard                       string                   `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Schema                      string                   `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Table                       string                   `protobuf:"bytes,5,opt,name=table,proto3" json:"table,omitempty"`
	MigrationStatement          string                   `protobuf:"bytes,6,opt,name=migration_statement,json=migrationStatement,proto3" json:"migration_statement,omitempty"`
	Strategy                    SchemaMigration_Strategy `protobuf:"varint,7,opt,name=strategy,proto3,enum=vtctldata.SchemaMigration_Strategy" json:"strategy,omitempty"`
	Options                     string                   `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	AddedAt                     *vttime.Time             `protobuf:"bytes,9,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	RequestedAt                 *vttime.Time             `protobuf:"bytes,10,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	ReadyAt                     *vttime.Time             `protobuf:"bytes,11,opt,name=ready_at,json=readyAt,proto3" json:"ready_at,omitempty"`
	StartedAt                   *vttime.Time             `protobuf:"bytes,12,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	LivenessTimestamp           *vttime.Time             `protobuf:"bytes,13,opt,name=liveness_timestamp,json=livenessTimestamp,proto3" json:"liveness_timestamp,omitempty"`
	CompletedAt                 *vttime.Time             `protobuf:"bytes,14,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	CleanedUpAt                 *vttime.Time             `protobuf:"bytes,15,opt,name=cleaned_up_at,json=cleanedUpAt,proto3" json:"cleaned_up_at,omitempty"`
	Status                      SchemaMigration_Status   `protobuf:"varint,16,opt,name=status,proto3,enum=vtctldata.SchemaMigration_Status" json:"status,omitempty"`
	LogPath                     string                   `protobuf:"bytes,17,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	Artifacts                   string                   `protobuf:"bytes,18,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
	Retries                     uint64                   `protobuf:"varint,19,opt,name=retries,proto3" json:"retries,omitempty"`
	Tablet                      *topodata.TabletAlias    `protobuf:"bytes,20,opt,name=tablet,proto3" json:"tablet,omitempty"`
	TabletFailure               bool                     `protobuf:"varint,21,opt,name=tablet_failure,json=tabletFailure,proto3" json:"tablet_failure,omitempty"`
	Progress                    float32                  `protobuf:"fixed32,22,opt,name=progress,proto3" json:"progress,omitempty"`
	MigrationContext            string                   `protobuf:"bytes,23,opt,name=migration_context,json=migrationContext,proto3" json:"migration_context,omitempty"`
	DdlAction                   string                   `protobuf:"bytes,24,opt,name=ddl_action,json=ddlAction,proto3" json:"ddl_action,omitempty"`
	Message                     string                   `protobuf:"bytes,25,opt,name=message,proto3" json:"message,omitempty"`
	EtaSeconds                  int64                    `protobuf:"varint,26,opt,name=eta_seconds,json=etaSeconds,proto3" json:"eta_seconds,omitempty"`
	RowsCopied                  uint64                   `protobuf:"varint,27,opt,name=rows_copied,json=rowsCopied,proto3" json:"rows_copied,omitempty"`
	TableRows                   int64                    `protobuf:"varint,28,opt,name=table_rows,json=tableRows,proto3" json:"table_rows,omitempty"`
	AddedUniqueKeys             uint32                   `protobuf:"varint,29,opt,name=added_unique_keys,json=addedUniqueKeys,proto3" json:"added_unique_keys,omitempty"`
	RemovedUniqueKeys           uint32                   `protobuf:"varint,30,opt,name=removed_unique_keys,json=removedUniqueKeys,proto3" json:"removed_unique_keys,omitempty"`
	LogFile                     string                   `protobuf:"bytes,31,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`
	ArtifactRetention           *vttime.Duration         `protobuf:"bytes,32,opt,name=artifact_retention,json=artifactRetention,proto3" json:"artifact_retention,omitempty"`
	PostponeCompletion          bool                     `protobuf:"varint,33,opt,name=postpone_completion,json=postponeCompletion,proto3" json:"postpone_completion,omitempty"`
	RemovedUniqueKeyNames       string                   `protobuf:"bytes,34,opt,name=removed_unique_key_names,json=removedUniqueKeyNames,proto3" json:"removed_unique_key_names,omitempty"`
	DroppedNoDefaultColumnNames string                   `protobuf:"bytes,35,opt,name=dropped_no_default_column_names,json=droppedNoDefaultColumnNames,proto3" json:"dropped_no_default_column_names,omitempty"`
	ExpandedColumnNames         string                   `protobuf:"bytes,36,opt,name=expanded_column_names,json=expandedColumnNames,proto3" json:"expanded_column_names,omitempty"`
	RevertibleNotes             string                   `protobuf:"bytes,37,opt,name=revertible_notes,json=revertibleNotes,proto3" json:"revertible_notes,omitempty"`
	AllowConcurrent             bool                     `protobuf:"varint,38,opt,name=allow_concurrent,json=allowConcurrent,proto3" json:"allow_concurrent,omitempty"`
	RevertedUuid                string                   `protobuf:"bytes,39,opt,name=reverted_uuid,json=revertedUuid,proto3" json:"reverted_uuid,omitempty"`
	IsView                      bool                     `protobuf:"varint,40,opt,name=is_view,json=isView,proto3" json:"is_view,omitempty"`
	ReadyToComplete             bool                     `protobuf:"varint,41,opt,name=ready_to_complete,json=readyToComplete,proto3" json:"ready_to_complete,omitempty"`
	VitessLivenessIndicator     int64                    `protobuf:"varint,42,opt,name=vitess_liveness_indicator,json=vitessLivenessIndicator,proto3" json:"vitess_liveness_indicator,omitempty"`
	UserThrottleRatio           float32                  `protobuf:"fixed32,43,opt,name=user_throttle_ratio,json=userThrottleRatio,proto3" json:"user_throttle_ratio,omitempty"`
	SpecialPlan                 string                   `protobuf:"bytes,44,opt,name=special_plan,json=specialPlan,proto3" json:"special_plan,omitempty"`
	LastThrottledAt             *vttime.Time             `protobuf:"bytes,45,opt,name=last_throttled_at,json=lastThrottledAt,proto3" json:"last_throttled_at,omitempty"`
	ComponentThrottled          string                   `protobuf:"bytes,46,opt,name=component_throttled,json=componentThrottled,proto3" json:"component_throttled,omitempty"`
	CancelledAt                 *vttime.Time             `protobuf:"bytes,47,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"`
	PostponeLaunch              bool                     `protobuf:"varint,48,opt,name=postpone_launch,json=postponeLaunch,proto3" json:"postpone_launch,omitempty"`
	Stage                       string                   `protobuf:"bytes,49,opt,name=stage,proto3" json:"stage,omitempty"` // enum?
	CutoverAttempts             uint32                   `protobuf:"varint,50,opt,name=cutover_attempts,json=cutoverAttempts,proto3" json:"cutover_attempts,omitempty"`
	IsImmediateOperation        bool                     `protobuf:"varint,51,opt,name=is_immediate_operation,json=isImmediateOperation,proto3" json:"is_immediate_operation,omitempty"`
	ReviewedAt                  *vttime.Time             `protobuf:"bytes,52,opt,name=reviewed_at,json=reviewedAt,proto3" json:"reviewed_at,omitempty"`
	ReadyToCompleteAt           *vttime.Time             `protobuf:"bytes,53,opt,name=ready_to_complete_at,json=readyToCompleteAt,proto3" json:"ready_to_complete_at,omitempty"`
	RemovedForeignKeyNames      string                   `protobuf:"bytes,54,opt,name=removed_foreign_key_names,json=removedForeignKeyNames,proto3" json:"removed_foreign_key_names,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SchemaMigration) Reset() {
	*x = SchemaMigration{}
	mi := &file_vtctldata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMigration) ProtoMessage() {}

func (x *SchemaMigration) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMigration.ProtoReflect.Descriptor instead.
func (*SchemaMigration) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaMigration) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SchemaMigration) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SchemaMigration) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *SchemaMigration) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SchemaMigration) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SchemaMigration) GetMigrationStatement() string {
	if x != nil {
		return x.MigrationStatement
	}
	return ""
}

func (x *SchemaMigration) GetStrategy() SchemaMigration_Strategy {
	if x != nil {
		return x.Strategy
	}
	return SchemaMigration_VITESS
}

func (x *SchemaMigration) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SchemaMigration) GetAddedAt() *vttime.Time {
	if x != nil {
		return x.AddedAt
	}
	return nil
}

func (x *SchemaMigration) GetRequestedAt() *vttime.Time {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *SchemaMigration) GetReadyAt() *vttime.Time {
	if x != nil {
		return x.ReadyAt
	}
	return nil
}

func (x *SchemaMigration) GetStartedAt() *vttime.Time {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *SchemaMigration) GetLivenessTimestamp() *vttime.Time {
	if x != nil {
		return x.LivenessTimestamp
	}
	return nil
}

func (x *SchemaMigration) GetCompletedAt() *vttime.Time {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *SchemaMigration) GetCleanedUpAt() *vttime.Time {
	if x != nil {
		return x.CleanedUpAt
	}
	return nil
}

func (x *SchemaMigration) GetStatus() SchemaMigration_Status {
	if x != nil {
		return x.Status
	}
	return SchemaMigration_UNKNOWN
}

func (x *SchemaMigration) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *SchemaMigration) GetArtifacts() string {
	if x != nil {
		return x.Artifacts
	}
	return ""
}

func (x *SchemaMigration) GetRetries() uint64 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *SchemaMigration) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *SchemaMigration) GetTabletFailure() bool {
	if x != nil {
		return x.TabletFailure
	}
	return false
}

func (x *SchemaMigration) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SchemaMigration) GetMigrationContext() string {
	if x != nil {
		return x.MigrationContext
	}
	return ""
}

func (x *SchemaMigration) GetDdlAction() string {
	if x != nil {
		return x.DdlAction
	}
	return ""
}

func (x *SchemaMigration) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SchemaMigration) GetEtaSeconds() int64 {
	if x != nil {
		return x.EtaSeconds
	}
	return 0
}

func (x *SchemaMigration) GetRowsCopied() uint64 {
	if x != nil {
		return x.RowsCopied
	}
	return 0
}

func (x *SchemaMigration) GetTableRows() int64 {
	if x != nil {
		return x.TableRows
	}
	return 0
}

func (x *SchemaMigration) GetAddedUniqueKeys() uint32 {
	if x != nil {
		return x.AddedUniqueKeys
	}
	return 0
}

func (x *SchemaMigration) GetRemovedUniqueKeys() uint32 {
	if x != nil {
		return x.RemovedUniqueKeys
	}
	return 0
}

func (x *SchemaMigration) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *SchemaMigration) GetArtifactRetention() *vttime.Duration {
	if x != nil {
		return x.ArtifactRetention
	}
	return nil
}

func (x *SchemaMigration) GetPostponeCompletion() bool {
	if x != nil {
		return x.PostponeCompletion
	}
	return false
}

func (x *SchemaMigration) GetRemovedUniqueKeyNames() string {
	if x != nil {
		return x.RemovedUniqueKeyNames
	}
	return ""
}

func (x *SchemaMigration) GetDroppedNoDefaultColumnNames() string {
	if x != nil {
		return x.DroppedNoDefaultColumnNames
	}
	return ""
}

func (x *SchemaMigration) GetExpandedColumnNames() string {
	if x != nil {
		return x.ExpandedColumnNames
	}
	return ""
}

func (x *SchemaMigration) GetRevertibleNotes() string {
	if x != nil {
		return x.RevertibleNotes
	}
	return ""
}

func (x *SchemaMigration) GetAllowConcurrent() bool {
	if x != nil {
		return x.AllowConcurrent
	}
	return false
}

func (x *SchemaMigration) GetRevertedUuid() string {
	if x != nil {
		return x.RevertedUuid
	}
	return ""
}

func (x *SchemaMigration) GetIsView() bool {
	if x != nil {
		return x.IsView
	}
	return false
}

func (x *SchemaMigration) GetReadyToComplete() bool {
	if x != nil {
		return x.ReadyToComplete
	}
	return false
}

func (x *SchemaMigration) GetVitessLivenessIndicator() int64 {
	if x != nil {
		return x.VitessLivenessIndicator
	}
	return 0
}

func (x *SchemaMigration) GetUserThrottleRatio() float32 {
	if x != nil {
		return x.UserThrottleRatio
	}
	return 0
}

func (x *SchemaMigration) GetSpecialPlan() string {
	if x != nil {
		return x.SpecialPlan
	}
	return ""
}

func (x *SchemaMigration) GetLastThrottledAt() *vttime.Time {
	if x != nil {
		return x.LastThrottledAt
	}
	return nil
}

func (x *SchemaMigration) GetComponentThrottled() string {
	if x != nil {
		return x.ComponentThrottled
	}
	return ""
}

func (x *SchemaMigration) GetCancelledAt() *vttime.Time {
	if x != nil {
		return x.CancelledAt
	}
	return nil
}

func (x *SchemaMigration) GetPostponeLaunch() bool {
	if x != nil {
		return x.PostponeLaunch
	}
	return false
}

func (x *SchemaMigration) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *SchemaMigration) GetCutoverAttempts() uint32 {
	if x != nil {
		return x.CutoverAttempts
	}
	return 0
}

func (x *SchemaMigration) GetIsImmediateOperation() bool {
	if x != nil {
		return x.IsImmediateOperation
	}
	return false
}

func (x *SchemaMigration) GetReviewedAt() *vttime.Time {
	if x != nil {
		return x.ReviewedAt
	}
	return nil
}

func (x *SchemaMigration) GetReadyToCompleteAt() *vttime.Time {
	if x != nil {
		return x.ReadyToCompleteAt
	}
	return nil
}

func (x *SchemaMigration) GetRemovedForeignKeyNames() string {
	if x != nil {
		return x.RemovedForeignKeyNames
	}
	return ""
}

type Shard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Shard         *topodata.Shard        `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Shard) Reset() {
	*x = Shard{}
	mi := &file_vtctldata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{6}
}

func (x *Shard) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Shard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shard) GetShard() *topodata.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type WorkflowOptions struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TenantId string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Remove auto_increment clauses on tables when moving them to a sharded
	// keyspace and optionally replace them with vschema AutoIncrement
	// definitions.
	ShardedAutoIncrementHandling ShardedAutoIncrementHandling `protobuf:"varint,2,opt,name=sharded_auto_increment_handling,json=shardedAutoIncrementHandling,proto3,enum=vtctldata.ShardedAutoIncrementHandling" json:"sharded_auto_increment_handling,omitempty"`
	// Shards on which vreplication streams in the target keyspace are created for this workflow and to which the data
	// from the source will be vreplicated.
	Shards []string          `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	Config map[string]string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Where to create any related schema and vschema objects such as
	// sequence tables.
	GlobalKeyspace string `protobuf:"bytes,5,opt,name=global_keyspace,json=globalKeyspace,proto3" json:"global_keyspace,omitempty"`
	// Lookup Vindexes that are being backfilled by the workflow.
	LookupVindexes []string `protobuf:"bytes,6,rep,name=lookup_vindexes,json=lookupVindexes,proto3" json:"lookup_vindexes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_vtctldata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowOptions) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *WorkflowOptions) GetShardedAutoIncrementHandling() ShardedAutoIncrementHandling {
	if x != nil {
		return x.ShardedAutoIncrementHandling
	}
	return ShardedAutoIncrementHandling_LEAVE
}

func (x *WorkflowOptions) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkflowOptions) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WorkflowOptions) GetGlobalKeyspace() string {
	if x != nil {
		return x.GlobalKeyspace
	}
	return ""
}

func (x *WorkflowOptions) GetLookupVindexes() []string {
	if x != nil {
		return x.LookupVindexes
	}
	return nil
}

// TODO: comment the hell out of this.
type Workflow struct {
	state  protoimpl.MessageState        `protogen:"open.v1"`
	Name   string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source *Workflow_ReplicationLocation `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target *Workflow_ReplicationLocation `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// This represents how long it's been since we processed any event in the
	// stream.
	MaxVReplicationLag int64                            `protobuf:"varint,4,opt,name=max_v_replication_lag,json=maxVReplicationLag,proto3" json:"max_v_replication_lag,omitempty"`
	ShardStreams       map[string]*Workflow_ShardStream `protobuf:"bytes,5,rep,name=shard_streams,json=shardStreams,proto3" json:"shard_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkflowType       string                           `protobuf:"bytes,6,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowSubType    string                           `protobuf:"bytes,7,opt,name=workflow_sub_type,json=workflowSubType,proto3" json:"workflow_sub_type,omitempty"`
	// This represents the lag across all shards, between the current time and
	// the timestamp of the last transaction OR heartbeat timestamp (if there
	// have been no writes to replicate from the source).
	MaxVReplicationTransactionLag int64 `protobuf:"varint,8,opt,name=max_v_replication_transaction_lag,json=maxVReplicationTransactionLag,proto3" json:"max_v_replication_transaction_lag,omitempty"`
	// This specifies whether to defer the creation of secondary keys.
	DeferSecondaryKeys bool `protobuf:"varint,9,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	// These are additional (optional) settings for vreplication workflows. Previously we used to add it to the
	// binlogdata.BinlogSource proto object. More details in go/vt/sidecardb/schema/vreplication.sql.
	Options       *WorkflowOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_vtctldata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8}
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetSource() *Workflow_ReplicationLocation {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Workflow) GetTarget() *Workflow_ReplicationLocation {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Workflow) GetMaxVReplicationLag() int64 {
	if x != nil {
		return x.MaxVReplicationLag
	}
	return 0
}

func (x *Workflow) GetShardStreams() map[string]*Workflow_ShardStream {
	if x != nil {
		return x.ShardStreams
	}
	return nil
}

func (x *Workflow) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *Workflow) GetWorkflowSubType() string {
	if x != nil {
		return x.WorkflowSubType
	}
	return ""
}

func (x *Workflow) GetMaxVReplicationTransactionLag() int64 {
	if x != nil {
		return x.MaxVReplicationTransactionLag
	}
	return 0
}

func (x *Workflow) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *Workflow) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type AddCellInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CellInfo      *topodata.CellInfo     `protobuf:"bytes,2,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCellInfoRequest) Reset() {
	*x = AddCellInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCellInfoRequest) ProtoMessage() {}

func (x *AddCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCellInfoRequest.ProtoReflect.Descriptor instead.
func (*AddCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{9}
}

func (x *AddCellInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCellInfoRequest) GetCellInfo() *topodata.CellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type AddCellInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCellInfoResponse) Reset() {
	*x = AddCellInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCellInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCellInfoResponse) ProtoMessage() {}

func (x *AddCellInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCellInfoResponse.ProtoReflect.Descriptor instead.
func (*AddCellInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{10}
}

type AddCellsAliasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cells         []string               `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCellsAliasRequest) Reset() {
	*x = AddCellsAliasRequest{}
	mi := &file_vtctldata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCellsAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCellsAliasRequest) ProtoMessage() {}

func (x *AddCellsAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCellsAliasRequest.ProtoReflect.Descriptor instead.
func (*AddCellsAliasRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{11}
}

func (x *AddCellsAliasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCellsAliasRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type AddCellsAliasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCellsAliasResponse) Reset() {
	*x = AddCellsAliasResponse{}
	mi := &file_vtctldata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCellsAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCellsAliasResponse) ProtoMessage() {}

func (x *AddCellsAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCellsAliasResponse.ProtoReflect.Descriptor instead.
func (*AddCellsAliasResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{12}
}

type ApplyKeyspaceRoutingRulesRequest struct {
	state                protoimpl.MessageState        `protogen:"open.v1"`
	KeyspaceRoutingRules *vschema.KeyspaceRoutingRules `protobuf:"bytes,1,opt,name=keyspace_routing_rules,json=keyspaceRoutingRules,proto3" json:"keyspace_routing_rules,omitempty"`
	// SkipRebuild, if set, will cause ApplyKeyspaceRoutingRules to skip rebuilding the
	// SrvVSchema objects in each cell in RebuildCells.
	SkipRebuild bool `protobuf:"varint,2,opt,name=skip_rebuild,json=skipRebuild,proto3" json:"skip_rebuild,omitempty"`
	// RebuildCells limits the SrvVSchema rebuild to the specified cells. If not
	// provided the SrvVSchema will be rebuilt in every cell in the topology.
	//
	// Ignored if SkipRebuild is set.
	RebuildCells  []string `protobuf:"bytes,3,rep,name=rebuild_cells,json=rebuildCells,proto3" json:"rebuild_cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyKeyspaceRoutingRulesRequest) Reset() {
	*x = ApplyKeyspaceRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyKeyspaceRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyKeyspaceRoutingRulesRequest) ProtoMessage() {}

func (x *ApplyKeyspaceRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyKeyspaceRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*ApplyKeyspaceRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{13}
}

func (x *ApplyKeyspaceRoutingRulesRequest) GetKeyspaceRoutingRules() *vschema.KeyspaceRoutingRules {
	if x != nil {
		return x.KeyspaceRoutingRules
	}
	return nil
}

func (x *ApplyKeyspaceRoutingRulesRequest) GetSkipRebuild() bool {
	if x != nil {
		return x.SkipRebuild
	}
	return false
}

func (x *ApplyKeyspaceRoutingRulesRequest) GetRebuildCells() []string {
	if x != nil {
		return x.RebuildCells
	}
	return nil
}

type ApplyKeyspaceRoutingRulesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// KeyspaceRoutingRules returns the current set of rules.
	KeyspaceRoutingRules *vschema.KeyspaceRoutingRules `protobuf:"bytes,1,opt,name=keyspace_routing_rules,json=keyspaceRoutingRules,proto3" json:"keyspace_routing_rules,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ApplyKeyspaceRoutingRulesResponse) Reset() {
	*x = ApplyKeyspaceRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyKeyspaceRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyKeyspaceRoutingRulesResponse) ProtoMessage() {}

func (x *ApplyKeyspaceRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyKeyspaceRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*ApplyKeyspaceRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{14}
}

func (x *ApplyKeyspaceRoutingRulesResponse) GetKeyspaceRoutingRules() *vschema.KeyspaceRoutingRules {
	if x != nil {
		return x.KeyspaceRoutingRules
	}
	return nil
}

type ApplyRoutingRulesRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	RoutingRules *vschema.RoutingRules  `protobuf:"bytes,1,opt,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"`
	// SkipRebuild, if set, will cause ApplyRoutingRules to skip rebuilding the
	// SrvVSchema objects in each cell in RebuildCells.
	SkipRebuild bool `protobuf:"varint,2,opt,name=skip_rebuild,json=skipRebuild,proto3" json:"skip_rebuild,omitempty"`
	// RebuildCells limits the SrvVSchema rebuild to the specified cells. If not
	// provided the SrvVSchema will be rebuilt in every cell in the topology.
	//
	// Ignored if SkipRebuild is set.
	RebuildCells  []string `protobuf:"bytes,3,rep,name=rebuild_cells,json=rebuildCells,proto3" json:"rebuild_cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyRoutingRulesRequest) Reset() {
	*x = ApplyRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRoutingRulesRequest) ProtoMessage() {}

func (x *ApplyRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*ApplyRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{15}
}

func (x *ApplyRoutingRulesRequest) GetRoutingRules() *vschema.RoutingRules {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

func (x *ApplyRoutingRulesRequest) GetSkipRebuild() bool {
	if x != nil {
		return x.SkipRebuild
	}
	return false
}

func (x *ApplyRoutingRulesRequest) GetRebuildCells() []string {
	if x != nil {
		return x.RebuildCells
	}
	return nil
}

type ApplyRoutingRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyRoutingRulesResponse) Reset() {
	*x = ApplyRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRoutingRulesResponse) ProtoMessage() {}

func (x *ApplyRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*ApplyRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{16}
}

type ApplyShardRoutingRulesRequest struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	ShardRoutingRules *vschema.ShardRoutingRules `protobuf:"bytes,1,opt,name=shard_routing_rules,json=shardRoutingRules,proto3" json:"shard_routing_rules,omitempty"`
	// SkipRebuild, if set, will cause ApplyShardRoutingRules to skip rebuilding the
	// SrvVSchema objects in each cell in RebuildCells.
	SkipRebuild bool `protobuf:"varint,2,opt,name=skip_rebuild,json=skipRebuild,proto3" json:"skip_rebuild,omitempty"`
	// RebuildCells limits the SrvVSchema rebuild to the specified cells. If not
	// provided the SrvVSchema will be rebuilt in every cell in the topology.
	//
	// Ignored if SkipRebuild is set.
	RebuildCells  []string `protobuf:"bytes,3,rep,name=rebuild_cells,json=rebuildCells,proto3" json:"rebuild_cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyShardRoutingRulesRequest) Reset() {
	*x = ApplyShardRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyShardRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyShardRoutingRulesRequest) ProtoMessage() {}

func (x *ApplyShardRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyShardRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*ApplyShardRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{17}
}

func (x *ApplyShardRoutingRulesRequest) GetShardRoutingRules() *vschema.ShardRoutingRules {
	if x != nil {
		return x.ShardRoutingRules
	}
	return nil
}

func (x *ApplyShardRoutingRulesRequest) GetSkipRebuild() bool {
	if x != nil {
		return x.SkipRebuild
	}
	return false
}

func (x *ApplyShardRoutingRulesRequest) GetRebuildCells() []string {
	if x != nil {
		return x.RebuildCells
	}
	return nil
}

type ApplyShardRoutingRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyShardRoutingRulesResponse) Reset() {
	*x = ApplyShardRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyShardRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyShardRoutingRulesResponse) ProtoMessage() {}

func (x *ApplyShardRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyShardRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*ApplyShardRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{18}
}

type ApplySchemaRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// SQL commands to run.
	Sql []string `protobuf:"bytes,3,rep,name=sql,proto3" json:"sql,omitempty"`
	// Online DDL strategy, compatible with @@ddl_strategy session variable (examples: 'gh-ost', 'pt-osc', 'gh-ost --max-load=Threads_running=100'")
	DdlStrategy string `protobuf:"bytes,4,opt,name=ddl_strategy,json=ddlStrategy,proto3" json:"ddl_strategy,omitempty"`
	// Optional: explicit UUIDs for migration.
	// If given, must match number of DDL changes
	UuidList []string `protobuf:"bytes,5,rep,name=uuid_list,json=uuidList,proto3" json:"uuid_list,omitempty"`
	// For Online DDL, optionally supply a custom unique string used as context for the migration(s) in this command.
	// By default a unique context is auto-generated by Vitess
	MigrationContext string `protobuf:"bytes,6,opt,name=migration_context,json=migrationContext,proto3" json:"migration_context,omitempty"`
	// WaitReplicasTimeout is the duration of time to wait for replicas to catch
	// up in reparenting.
	WaitReplicasTimeout *vttime.Duration `protobuf:"bytes,7,opt,name=wait_replicas_timeout,json=waitReplicasTimeout,proto3" json:"wait_replicas_timeout,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,9,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// BatchSize indicates how many queries to apply together
	BatchSize     int64 `protobuf:"varint,10,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplySchemaRequest) Reset() {
	*x = ApplySchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySchemaRequest) ProtoMessage() {}

func (x *ApplySchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySchemaRequest.ProtoReflect.Descriptor instead.
func (*ApplySchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{19}
}

func (x *ApplySchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ApplySchemaRequest) GetSql() []string {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *ApplySchemaRequest) GetDdlStrategy() string {
	if x != nil {
		return x.DdlStrategy
	}
	return ""
}

func (x *ApplySchemaRequest) GetUuidList() []string {
	if x != nil {
		return x.UuidList
	}
	return nil
}

func (x *ApplySchemaRequest) GetMigrationContext() string {
	if x != nil {
		return x.MigrationContext
	}
	return ""
}

func (x *ApplySchemaRequest) GetWaitReplicasTimeout() *vttime.Duration {
	if x != nil {
		return x.WaitReplicasTimeout
	}
	return nil
}

func (x *ApplySchemaRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *ApplySchemaRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type ApplySchemaResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UuidList            []string               `protobuf:"bytes,1,rep,name=uuid_list,json=uuidList,proto3" json:"uuid_list,omitempty"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,2,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ApplySchemaResponse) Reset() {
	*x = ApplySchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySchemaResponse) ProtoMessage() {}

func (x *ApplySchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySchemaResponse.ProtoReflect.Descriptor instead.
func (*ApplySchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{20}
}

func (x *ApplySchemaResponse) GetUuidList() []string {
	if x != nil {
		return x.UuidList
	}
	return nil
}

func (x *ApplySchemaResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type ApplyVSchemaRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Keyspace    string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	SkipRebuild bool                   `protobuf:"varint,2,opt,name=skip_rebuild,json=skipRebuild,proto3" json:"skip_rebuild,omitempty"`
	DryRun      bool                   `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Cells       []string               `protobuf:"bytes,4,rep,name=cells,proto3" json:"cells,omitempty"`
	VSchema     *vschema.Keyspace      `protobuf:"bytes,5,opt,name=v_schema,json=vSchema,proto3" json:"v_schema,omitempty"`
	Sql         string                 `protobuf:"bytes,6,opt,name=sql,proto3" json:"sql,omitempty"`
	// Strict returns an error if there are unknown vindex params.
	Strict        bool `protobuf:"varint,7,opt,name=strict,proto3" json:"strict,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyVSchemaRequest) Reset() {
	*x = ApplyVSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyVSchemaRequest) ProtoMessage() {}

func (x *ApplyVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyVSchemaRequest.ProtoReflect.Descriptor instead.
func (*ApplyVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{21}
}

func (x *ApplyVSchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ApplyVSchemaRequest) GetSkipRebuild() bool {
	if x != nil {
		return x.SkipRebuild
	}
	return false
}

func (x *ApplyVSchemaRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ApplyVSchemaRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *ApplyVSchemaRequest) GetVSchema() *vschema.Keyspace {
	if x != nil {
		return x.VSchema
	}
	return nil
}

func (x *ApplyVSchemaRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ApplyVSchemaRequest) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

type ApplyVSchemaResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	VSchema *vschema.Keyspace      `protobuf:"bytes,1,opt,name=v_schema,json=vSchema,proto3" json:"v_schema,omitempty"`
	// UnknownVindexParams is a map of vindex name to params that were not recognized by the vindex
	// type. E.g.:
	//
	//	{
	//	  "lookup_vdx": {
	//	    "params": ["raed_lock", "not_verify"]
	//	  }
	//	}
	UnknownVindexParams map[string]*ApplyVSchemaResponse_ParamList `protobuf:"bytes,2,rep,name=unknown_vindex_params,json=unknownVindexParams,proto3" json:"unknown_vindex_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ApplyVSchemaResponse) Reset() {
	*x = ApplyVSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyVSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyVSchemaResponse) ProtoMessage() {}

func (x *ApplyVSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyVSchemaResponse.ProtoReflect.Descriptor instead.
func (*ApplyVSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{22}
}

func (x *ApplyVSchemaResponse) GetVSchema() *vschema.Keyspace {
	if x != nil {
		return x.VSchema
	}
	return nil
}

func (x *ApplyVSchemaResponse) GetUnknownVindexParams() map[string]*ApplyVSchemaResponse_ParamList {
	if x != nil {
		return x.UnknownVindexParams
	}
	return nil
}

type BackupRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// AllowPrimary allows the backup to proceed if TabletAlias is a PRIMARY.
	//
	// WARNING: If using the builtin backup engine, this will shutdown mysqld on
	// the primary for the duration of the backup, and no writes will be possible.
	AllowPrimary bool `protobuf:"varint,2,opt,name=allow_primary,json=allowPrimary,proto3" json:"allow_primary,omitempty"`
	// Concurrency specifies the number of compression/checksum jobs to run
	// simultaneously.
	Concurrency int32 `protobuf:"varint,3,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// IncrementalFromPos indicates a position of a previous backup. When this value is non-empty
	// then the backup becomes incremental and applies as of given position.
	IncrementalFromPos string `protobuf:"bytes,4,opt,name=incremental_from_pos,json=incrementalFromPos,proto3" json:"incremental_from_pos,omitempty"`
	// UpgradeSafe indicates if the backup should be taken with innodb_fast_shutdown=0
	// so that it's a backup that can be used for an upgrade.
	UpgradeSafe bool `protobuf:"varint,5,opt,name=upgrade_safe,json=upgradeSafe,proto3" json:"upgrade_safe,omitempty"`
	// BackupEngine specifies if we want to use a particular backup engine for this backup request
	BackupEngine *string `protobuf:"bytes,6,opt,name=backup_engine,json=backupEngine,proto3,oneof" json:"backup_engine,omitempty"`
	// MysqlShutdownTimeout is the duration to wait for mysqld to shutdown before
	// starting the backup. This is available so we can override this for upgrade safe
	// backups which might take longer to shut down.
	MysqlShutdownTimeout *vttime.Duration `protobuf:"bytes,7,opt,name=mysql_shutdown_timeout,json=mysqlShutdownTimeout,proto3" json:"mysql_shutdown_timeout,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	mi := &file_vtctldata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{23}
}

func (x *BackupRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BackupRequest) GetAllowPrimary() bool {
	if x != nil {
		return x.AllowPrimary
	}
	return false
}

func (x *BackupRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *BackupRequest) GetIncrementalFromPos() string {
	if x != nil {
		return x.IncrementalFromPos
	}
	return ""
}

func (x *BackupRequest) GetUpgradeSafe() bool {
	if x != nil {
		return x.UpgradeSafe
	}
	return false
}

func (x *BackupRequest) GetBackupEngine() string {
	if x != nil && x.BackupEngine != nil {
		return *x.BackupEngine
	}
	return ""
}

func (x *BackupRequest) GetMysqlShutdownTimeout() *vttime.Duration {
	if x != nil {
		return x.MysqlShutdownTimeout
	}
	return nil
}

type BackupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TabletAlias is the alias being used for the backup.
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Keyspace      string                `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Event         *logutil.Event        `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	mi := &file_vtctldata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{24}
}

func (x *BackupResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BackupResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *BackupResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *BackupResponse) GetEvent() *logutil.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type BackupShardRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// AllowPrimary allows the backup to occur on a PRIMARY tablet. See
	// BackupRequest.AllowPrimary for warnings and caveats.
	AllowPrimary bool `protobuf:"varint,3,opt,name=allow_primary,json=allowPrimary,proto3" json:"allow_primary,omitempty"`
	// Concurrency specifies the number of compression/checksum jobs to run
	// simultaneously.
	Concurrency int32 `protobuf:"varint,4,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// UpgradeSafe indicates if the backup should be taken with innodb_fast_shutdown=0
	// so that it's a backup that can be used for an upgrade.
	UpgradeSafe bool `protobuf:"varint,5,opt,name=upgrade_safe,json=upgradeSafe,proto3" json:"upgrade_safe,omitempty"`
	// IncrementalFromPos indicates a position of a previous backup. When this value is non-empty
	// then the backup becomes incremental and applies as of given position.
	IncrementalFromPos string `protobuf:"bytes,6,opt,name=incremental_from_pos,json=incrementalFromPos,proto3" json:"incremental_from_pos,omitempty"`
	// MysqlShutdownTimeout is the duration to wait for mysqld to shutdown before
	// starting the backup. This is available so we can override this for upgrade safe
	// backups which might take longer to shut down.
	MysqlShutdownTimeout *vttime.Duration `protobuf:"bytes,7,opt,name=mysql_shutdown_timeout,json=mysqlShutdownTimeout,proto3" json:"mysql_shutdown_timeout,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BackupShardRequest) Reset() {
	*x = BackupShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupShardRequest) ProtoMessage() {}

func (x *BackupShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupShardRequest.ProtoReflect.Descriptor instead.
func (*BackupShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{25}
}

func (x *BackupShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *BackupShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *BackupShardRequest) GetAllowPrimary() bool {
	if x != nil {
		return x.AllowPrimary
	}
	return false
}

func (x *BackupShardRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *BackupShardRequest) GetUpgradeSafe() bool {
	if x != nil {
		return x.UpgradeSafe
	}
	return false
}

func (x *BackupShardRequest) GetIncrementalFromPos() string {
	if x != nil {
		return x.IncrementalFromPos
	}
	return ""
}

func (x *BackupShardRequest) GetMysqlShutdownTimeout() *vttime.Duration {
	if x != nil {
		return x.MysqlShutdownTimeout
	}
	return nil
}

type CancelSchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller. This is needed when strict table ACLs are enforced on the tablets.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelSchemaMigrationRequest) Reset() {
	*x = CancelSchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSchemaMigrationRequest) ProtoMessage() {}

func (x *CancelSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CancelSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{26}
}

func (x *CancelSchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *CancelSchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CancelSchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type CancelSchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CancelSchemaMigrationResponse) Reset() {
	*x = CancelSchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSchemaMigrationResponse) ProtoMessage() {}

func (x *CancelSchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*CancelSchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{27}
}

func (x *CancelSchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type ChangeTabletTagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Replace       bool                   `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTabletTagsRequest) Reset() {
	*x = ChangeTabletTagsRequest{}
	mi := &file_vtctldata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTabletTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTabletTagsRequest) ProtoMessage() {}

func (x *ChangeTabletTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTabletTagsRequest.ProtoReflect.Descriptor instead.
func (*ChangeTabletTagsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{28}
}

func (x *ChangeTabletTagsRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ChangeTabletTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ChangeTabletTagsRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type ChangeTabletTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeforeTags    map[string]string      `protobuf:"bytes,1,rep,name=before_tags,json=beforeTags,proto3" json:"before_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AfterTags     map[string]string      `protobuf:"bytes,2,rep,name=after_tags,json=afterTags,proto3" json:"after_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTabletTagsResponse) Reset() {
	*x = ChangeTabletTagsResponse{}
	mi := &file_vtctldata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTabletTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTabletTagsResponse) ProtoMessage() {}

func (x *ChangeTabletTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTabletTagsResponse.ProtoReflect.Descriptor instead.
func (*ChangeTabletTagsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{29}
}

func (x *ChangeTabletTagsResponse) GetBeforeTags() map[string]string {
	if x != nil {
		return x.BeforeTags
	}
	return nil
}

func (x *ChangeTabletTagsResponse) GetAfterTags() map[string]string {
	if x != nil {
		return x.AfterTags
	}
	return nil
}

type ChangeTabletTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	DbType        topodata.TabletType    `protobuf:"varint,2,opt,name=db_type,json=dbType,proto3,enum=topodata.TabletType" json:"db_type,omitempty"`
	DryRun        bool                   `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTabletTypeRequest) Reset() {
	*x = ChangeTabletTypeRequest{}
	mi := &file_vtctldata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTabletTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTabletTypeRequest) ProtoMessage() {}

func (x *ChangeTabletTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTabletTypeRequest.ProtoReflect.Descriptor instead.
func (*ChangeTabletTypeRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{30}
}

func (x *ChangeTabletTypeRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ChangeTabletTypeRequest) GetDbType() topodata.TabletType {
	if x != nil {
		return x.DbType
	}
	return topodata.TabletType(0)
}

func (x *ChangeTabletTypeRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type ChangeTabletTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeforeTablet  *topodata.Tablet       `protobuf:"bytes,1,opt,name=before_tablet,json=beforeTablet,proto3" json:"before_tablet,omitempty"`
	AfterTablet   *topodata.Tablet       `protobuf:"bytes,2,opt,name=after_tablet,json=afterTablet,proto3" json:"after_tablet,omitempty"`
	WasDryRun     bool                   `protobuf:"varint,3,opt,name=was_dry_run,json=wasDryRun,proto3" json:"was_dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTabletTypeResponse) Reset() {
	*x = ChangeTabletTypeResponse{}
	mi := &file_vtctldata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTabletTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTabletTypeResponse) ProtoMessage() {}

func (x *ChangeTabletTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTabletTypeResponse.ProtoReflect.Descriptor instead.
func (*ChangeTabletTypeResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{31}
}

func (x *ChangeTabletTypeResponse) GetBeforeTablet() *topodata.Tablet {
	if x != nil {
		return x.BeforeTablet
	}
	return nil
}

func (x *ChangeTabletTypeResponse) GetAfterTablet() *topodata.Tablet {
	if x != nil {
		return x.AfterTablet
	}
	return nil
}

func (x *ChangeTabletTypeResponse) GetWasDryRun() bool {
	if x != nil {
		return x.WasDryRun
	}
	return false
}

type CheckThrottlerRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	AppName     string                 `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Scope       string                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// SkipRequestHeartbeats ensures this check does not renew heartbeat lease
	SkipRequestHeartbeats bool `protobuf:"varint,4,opt,name=skip_request_heartbeats,json=skipRequestHeartbeats,proto3" json:"skip_request_heartbeats,omitempty"`
	// OKIfNotExists asks the throttler to return OK even if the metric does not exist
	OkIfNotExists bool `protobuf:"varint,5,opt,name=ok_if_not_exists,json=okIfNotExists,proto3" json:"ok_if_not_exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckThrottlerRequest) Reset() {
	*x = CheckThrottlerRequest{}
	mi := &file_vtctldata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckThrottlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckThrottlerRequest) ProtoMessage() {}

func (x *CheckThrottlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckThrottlerRequest.ProtoReflect.Descriptor instead.
func (*CheckThrottlerRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{32}
}

func (x *CheckThrottlerRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *CheckThrottlerRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CheckThrottlerRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CheckThrottlerRequest) GetSkipRequestHeartbeats() bool {
	if x != nil {
		return x.SkipRequestHeartbeats
	}
	return false
}

func (x *CheckThrottlerRequest) GetOkIfNotExists() bool {
	if x != nil {
		return x.OkIfNotExists
	}
	return false
}

type CheckThrottlerResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias                     `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Check         *tabletmanagerdata.CheckThrottlerResponse `protobuf:"bytes,2,opt,name=Check,proto3" json:"Check,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckThrottlerResponse) Reset() {
	*x = CheckThrottlerResponse{}
	mi := &file_vtctldata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckThrottlerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckThrottlerResponse) ProtoMessage() {}

func (x *CheckThrottlerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckThrottlerResponse.ProtoReflect.Descriptor instead.
func (*CheckThrottlerResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{33}
}

func (x *CheckThrottlerResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *CheckThrottlerResponse) GetCheck() *tabletmanagerdata.CheckThrottlerResponse {
	if x != nil {
		return x.Check
	}
	return nil
}

type CleanupSchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanupSchemaMigrationRequest) Reset() {
	*x = CleanupSchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupSchemaMigrationRequest) ProtoMessage() {}

func (x *CleanupSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CleanupSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{34}
}

func (x *CleanupSchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *CleanupSchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CleanupSchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type CleanupSchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CleanupSchemaMigrationResponse) Reset() {
	*x = CleanupSchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupSchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupSchemaMigrationResponse) ProtoMessage() {}

func (x *CleanupSchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupSchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*CleanupSchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{35}
}

func (x *CleanupSchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type CompleteSchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteSchemaMigrationRequest) Reset() {
	*x = CompleteSchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSchemaMigrationRequest) ProtoMessage() {}

func (x *CompleteSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CompleteSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{36}
}

func (x *CompleteSchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *CompleteSchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CompleteSchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type CompleteSchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CompleteSchemaMigrationResponse) Reset() {
	*x = CompleteSchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteSchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSchemaMigrationResponse) ProtoMessage() {}

func (x *CompleteSchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*CompleteSchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{37}
}

func (x *CompleteSchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type CopySchemaShardRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SourceTabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=source_tablet_alias,json=sourceTabletAlias,proto3" json:"source_tablet_alias,omitempty"`
	Tables              []string               `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	ExcludeTables       []string               `protobuf:"bytes,3,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	IncludeViews        bool                   `protobuf:"varint,4,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	SkipVerify          bool                   `protobuf:"varint,5,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
	WaitReplicasTimeout *vttime.Duration       `protobuf:"bytes,6,opt,name=wait_replicas_timeout,json=waitReplicasTimeout,proto3" json:"wait_replicas_timeout,omitempty"`
	DestinationKeyspace string                 `protobuf:"bytes,7,opt,name=destination_keyspace,json=destinationKeyspace,proto3" json:"destination_keyspace,omitempty"`
	DestinationShard    string                 `protobuf:"bytes,8,opt,name=destination_shard,json=destinationShard,proto3" json:"destination_shard,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CopySchemaShardRequest) Reset() {
	*x = CopySchemaShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopySchemaShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopySchemaShardRequest) ProtoMessage() {}

func (x *CopySchemaShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopySchemaShardRequest.ProtoReflect.Descriptor instead.
func (*CopySchemaShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{38}
}

func (x *CopySchemaShardRequest) GetSourceTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.SourceTabletAlias
	}
	return nil
}

func (x *CopySchemaShardRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *CopySchemaShardRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *CopySchemaShardRequest) GetIncludeViews() bool {
	if x != nil {
		return x.IncludeViews
	}
	return false
}

func (x *CopySchemaShardRequest) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

func (x *CopySchemaShardRequest) GetWaitReplicasTimeout() *vttime.Duration {
	if x != nil {
		return x.WaitReplicasTimeout
	}
	return nil
}

func (x *CopySchemaShardRequest) GetDestinationKeyspace() string {
	if x != nil {
		return x.DestinationKeyspace
	}
	return ""
}

func (x *CopySchemaShardRequest) GetDestinationShard() string {
	if x != nil {
		return x.DestinationShard
	}
	return ""
}

type CopySchemaShardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopySchemaShardResponse) Reset() {
	*x = CopySchemaShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopySchemaShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopySchemaShardResponse) ProtoMessage() {}

func (x *CopySchemaShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopySchemaShardResponse.ProtoReflect.Descriptor instead.
func (*CopySchemaShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{39}
}

type CreateKeyspaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the keyspace.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Force proceeds with the request even if the keyspace already exists.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	// AllowEmptyVSchema allows a keyspace to be created with no vschema.
	AllowEmptyVSchema bool `protobuf:"varint,3,opt,name=allow_empty_v_schema,json=allowEmptyVSchema,proto3" json:"allow_empty_v_schema,omitempty"`
	// Type is the type of the keyspace to create.
	Type topodata.KeyspaceType `protobuf:"varint,7,opt,name=type,proto3,enum=topodata.KeyspaceType" json:"type,omitempty"`
	// BaseKeyspace specifies the base keyspace for SNAPSHOT keyspaces. It is
	// required to create a SNAPSHOT keyspace.
	BaseKeyspace string `protobuf:"bytes,8,opt,name=base_keyspace,json=baseKeyspace,proto3" json:"base_keyspace,omitempty"`
	// SnapshotTime specifies the snapshot time for this keyspace. It is required
	// to create a SNAPSHOT keyspace.
	SnapshotTime *vttime.Time `protobuf:"bytes,9,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// DurabilityPolicy is the durability policy to be
	// used for this keyspace.
	DurabilityPolicy string `protobuf:"bytes,10,opt,name=durability_policy,json=durabilityPolicy,proto3" json:"durability_policy,omitempty"`
	// SidecarDBName is the name of the sidecar database that
	// each vttablet in the keyspace will use.
	SidecarDbName string `protobuf:"bytes,11,opt,name=sidecar_db_name,json=sidecarDbName,proto3" json:"sidecar_db_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKeyspaceRequest) Reset() {
	*x = CreateKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyspaceRequest) ProtoMessage() {}

func (x *CreateKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{40}
}

func (x *CreateKeyspaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKeyspaceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CreateKeyspaceRequest) GetAllowEmptyVSchema() bool {
	if x != nil {
		return x.AllowEmptyVSchema
	}
	return false
}

func (x *CreateKeyspaceRequest) GetType() topodata.KeyspaceType {
	if x != nil {
		return x.Type
	}
	return topodata.KeyspaceType(0)
}

func (x *CreateKeyspaceRequest) GetBaseKeyspace() string {
	if x != nil {
		return x.BaseKeyspace
	}
	return ""
}

func (x *CreateKeyspaceRequest) GetSnapshotTime() *vttime.Time {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *CreateKeyspaceRequest) GetDurabilityPolicy() string {
	if x != nil {
		return x.DurabilityPolicy
	}
	return ""
}

func (x *CreateKeyspaceRequest) GetSidecarDbName() string {
	if x != nil {
		return x.SidecarDbName
	}
	return ""
}

type CreateKeyspaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the newly-created keyspace.
	Keyspace      *Keyspace `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKeyspaceResponse) Reset() {
	*x = CreateKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyspaceResponse) ProtoMessage() {}

func (x *CreateKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{41}
}

func (x *CreateKeyspaceResponse) GetKeyspace() *Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

type CreateShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace to create the shard in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// ShardName is the name of the shard to create. E.g. "-" or "-80".
	ShardName string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Force treats an attempt to create a shard that already exists as a
	// non-error.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	// IncludeParent creates the parent keyspace as an empty BASE keyspace, if it
	// doesn't already exist.
	IncludeParent bool `protobuf:"varint,4,opt,name=include_parent,json=includeParent,proto3" json:"include_parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShardRequest) Reset() {
	*x = CreateShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShardRequest) ProtoMessage() {}

func (x *CreateShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShardRequest.ProtoReflect.Descriptor instead.
func (*CreateShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{42}
}

func (x *CreateShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *CreateShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *CreateShardRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CreateShardRequest) GetIncludeParent() bool {
	if x != nil {
		return x.IncludeParent
	}
	return false
}

type CreateShardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the created keyspace. It is set only if IncludeParent was
	// specified in the request and the parent keyspace needed to be created.
	Keyspace *Keyspace `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the newly-created shard object.
	Shard *Shard `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// ShardAlreadyExists is set if Force was specified in the request and the
	// shard already existed.
	ShardAlreadyExists bool `protobuf:"varint,3,opt,name=shard_already_exists,json=shardAlreadyExists,proto3" json:"shard_already_exists,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateShardResponse) Reset() {
	*x = CreateShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShardResponse) ProtoMessage() {}

func (x *CreateShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShardResponse.ProtoReflect.Descriptor instead.
func (*CreateShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{43}
}

func (x *CreateShardResponse) GetKeyspace() *Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

func (x *CreateShardResponse) GetShard() *Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *CreateShardResponse) GetShardAlreadyExists() bool {
	if x != nil {
		return x.ShardAlreadyExists
	}
	return false
}

type DeleteCellInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCellInfoRequest) Reset() {
	*x = DeleteCellInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellInfoRequest) ProtoMessage() {}

func (x *DeleteCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteCellInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteCellInfoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteCellInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCellInfoResponse) Reset() {
	*x = DeleteCellInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCellInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellInfoResponse) ProtoMessage() {}

func (x *DeleteCellInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellInfoResponse.ProtoReflect.Descriptor instead.
func (*DeleteCellInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{45}
}

type DeleteCellsAliasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCellsAliasRequest) Reset() {
	*x = DeleteCellsAliasRequest{}
	mi := &file_vtctldata_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCellsAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellsAliasRequest) ProtoMessage() {}

func (x *DeleteCellsAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellsAliasRequest.ProtoReflect.Descriptor instead.
func (*DeleteCellsAliasRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteCellsAliasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCellsAliasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCellsAliasResponse) Reset() {
	*x = DeleteCellsAliasResponse{}
	mi := &file_vtctldata_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCellsAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellsAliasResponse) ProtoMessage() {}

func (x *DeleteCellsAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellsAliasResponse.ProtoReflect.Descriptor instead.
func (*DeleteCellsAliasResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{47}
}

type DeleteKeyspaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace to delete.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Recursive causes all shards in the keyspace to be recursively deleted
	// before deleting the keyspace. It is an error to call DeleteKeyspace on a
	// non-empty keyspace without also specifying Recursive.
	Recursive bool `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Force allows a keyspace to be deleted even if the keyspace lock cannot be
	// obtained. This should only be used to force-clean a keyspace.
	Force         bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKeyspaceRequest) Reset() {
	*x = DeleteKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyspaceRequest) ProtoMessage() {}

func (x *DeleteKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *DeleteKeyspaceRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *DeleteKeyspaceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteKeyspaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKeyspaceResponse) Reset() {
	*x = DeleteKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyspaceResponse) ProtoMessage() {}

func (x *DeleteKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{49}
}

type DeleteShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shards is the list of shards to delete. The nested topodatapb.Shard field
	// is not required for DeleteShard, but the Keyspace and Shard fields are.
	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	// Recursive also deletes all tablets belonging to the shard(s). It is an
	// error to call DeleteShard on a non-empty shard without also specificying
	// Recursive.
	Recursive bool `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// EvenIfServing allows a shard to be deleted even if it is serving, which is
	// normally an error. Use with caution.
	EvenIfServing bool `protobuf:"varint,4,opt,name=even_if_serving,json=evenIfServing,proto3" json:"even_if_serving,omitempty"`
	// Force allows a shard to be deleted even if the shard lock cannot be
	// obtained. This should only be used to force-clean a shard.
	Force         bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShardsRequest) Reset() {
	*x = DeleteShardsRequest{}
	mi := &file_vtctldata_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardsRequest) ProtoMessage() {}

func (x *DeleteShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardsRequest.ProtoReflect.Descriptor instead.
func (*DeleteShardsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteShardsRequest) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *DeleteShardsRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *DeleteShardsRequest) GetEvenIfServing() bool {
	if x != nil {
		return x.EvenIfServing
	}
	return false
}

func (x *DeleteShardsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteShardsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteShardsResponse) Reset() {
	*x = DeleteShardsResponse{}
	mi := &file_vtctldata_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardsResponse) ProtoMessage() {}

func (x *DeleteShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardsResponse.ProtoReflect.Descriptor instead.
func (*DeleteShardsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{51}
}

type DeleteSrvVSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          string                 `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSrvVSchemaRequest) Reset() {
	*x = DeleteSrvVSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSrvVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSrvVSchemaRequest) ProtoMessage() {}

func (x *DeleteSrvVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSrvVSchemaRequest.ProtoReflect.Descriptor instead.
func (*DeleteSrvVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteSrvVSchemaRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

type DeleteSrvVSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSrvVSchemaResponse) Reset() {
	*x = DeleteSrvVSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSrvVSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSrvVSchemaResponse) ProtoMessage() {}

func (x *DeleteSrvVSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSrvVSchemaResponse.ProtoReflect.Descriptor instead.
func (*DeleteSrvVSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{53}
}

type DeleteTabletsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TabletAliases is the list of tablets to delete.
	TabletAliases []*topodata.TabletAlias `protobuf:"bytes,1,rep,name=tablet_aliases,json=tabletAliases,proto3" json:"tablet_aliases,omitempty"`
	// AllowPrimary allows for the primary tablet of a shard to be deleted.
	// Use with caution.
	AllowPrimary  bool `protobuf:"varint,2,opt,name=allow_primary,json=allowPrimary,proto3" json:"allow_primary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTabletsRequest) Reset() {
	*x = DeleteTabletsRequest{}
	mi := &file_vtctldata_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletsRequest) ProtoMessage() {}

func (x *DeleteTabletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTabletsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteTabletsRequest) GetTabletAliases() []*topodata.TabletAlias {
	if x != nil {
		return x.TabletAliases
	}
	return nil
}

func (x *DeleteTabletsRequest) GetAllowPrimary() bool {
	if x != nil {
		return x.AllowPrimary
	}
	return false
}

type DeleteTabletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTabletsResponse) Reset() {
	*x = DeleteTabletsResponse{}
	mi := &file_vtctldata_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletsResponse) ProtoMessage() {}

func (x *DeleteTabletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletsResponse.ProtoReflect.Descriptor instead.
func (*DeleteTabletsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{55}
}

type EmergencyReparentShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace to perform the Emergency Reparent in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard to perform the Emergency Reparent in.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Optional alias of a tablet that should become the new shard primary. If not
	// not specified, the vtctld will select the most up-to-date canditate to
	// promote.
	NewPrimary *topodata.TabletAlias `protobuf:"bytes,3,opt,name=new_primary,json=newPrimary,proto3" json:"new_primary,omitempty"`
	// List of replica aliases to ignore during the Emergency Reparent. The vtctld
	// will not attempt to stop replication on these tablets, nor attempt to
	// demote any that may think they are the shard primary.
	IgnoreReplicas []*topodata.TabletAlias `protobuf:"bytes,4,rep,name=ignore_replicas,json=ignoreReplicas,proto3" json:"ignore_replicas,omitempty"`
	// WaitReplicasTimeout is the duration of time to wait for replicas to catch
	// up in reparenting.
	WaitReplicasTimeout *vttime.Duration `protobuf:"bytes,5,opt,name=wait_replicas_timeout,json=waitReplicasTimeout,proto3" json:"wait_replicas_timeout,omitempty"`
	// PreventCrossCellPromotion is used to only promote the new primary from the same cell
	// as the failed primary.
	PreventCrossCellPromotion bool `protobuf:"varint,6,opt,name=prevent_cross_cell_promotion,json=preventCrossCellPromotion,proto3" json:"prevent_cross_cell_promotion,omitempty"`
	// WaitForAllTablets makes ERS wait for a response from all the tablets before proceeding.
	// Useful when all the tablets are up and reachable.
	WaitForAllTablets bool `protobuf:"varint,7,opt,name=wait_for_all_tablets,json=waitForAllTablets,proto3" json:"wait_for_all_tablets,omitempty"`
	// ExpectedPrimary is the optional alias we expect to be the current primary in order for
	// the reparent operation to succeed.
	ExpectedPrimary *topodata.TabletAlias `protobuf:"bytes,8,opt,name=expected_primary,json=expectedPrimary,proto3" json:"expected_primary,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EmergencyReparentShardRequest) Reset() {
	*x = EmergencyReparentShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmergencyReparentShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyReparentShardRequest) ProtoMessage() {}

func (x *EmergencyReparentShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyReparentShardRequest.ProtoReflect.Descriptor instead.
func (*EmergencyReparentShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{56}
}

func (x *EmergencyReparentShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *EmergencyReparentShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *EmergencyReparentShardRequest) GetNewPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.NewPrimary
	}
	return nil
}

func (x *EmergencyReparentShardRequest) GetIgnoreReplicas() []*topodata.TabletAlias {
	if x != nil {
		return x.IgnoreReplicas
	}
	return nil
}

func (x *EmergencyReparentShardRequest) GetWaitReplicasTimeout() *vttime.Duration {
	if x != nil {
		return x.WaitReplicasTimeout
	}
	return nil
}

func (x *EmergencyReparentShardRequest) GetPreventCrossCellPromotion() bool {
	if x != nil {
		return x.PreventCrossCellPromotion
	}
	return false
}

func (x *EmergencyReparentShardRequest) GetWaitForAllTablets() bool {
	if x != nil {
		return x.WaitForAllTablets
	}
	return false
}

func (x *EmergencyReparentShardRequest) GetExpectedPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.ExpectedPrimary
	}
	return nil
}

type EmergencyReparentShardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace the Emergency Reparent took place in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard the Emergency Reparent took place in.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// PromotedPrimary is the alias of the tablet that was promoted to shard
	// primary. If NewPrimary was set in the request, then this will be the same
	// alias. Otherwise, it will be the alias of the tablet found to be most
	// up-to-date.
	PromotedPrimary *topodata.TabletAlias `protobuf:"bytes,3,opt,name=promoted_primary,json=promotedPrimary,proto3" json:"promoted_primary,omitempty"`
	Events          []*logutil.Event      `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EmergencyReparentShardResponse) Reset() {
	*x = EmergencyReparentShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmergencyReparentShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyReparentShardResponse) ProtoMessage() {}

func (x *EmergencyReparentShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyReparentShardResponse.ProtoReflect.Descriptor instead.
func (*EmergencyReparentShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{57}
}

func (x *EmergencyReparentShardResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *EmergencyReparentShardResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *EmergencyReparentShardResponse) GetPromotedPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.PromotedPrimary
	}
	return nil
}

func (x *EmergencyReparentShardResponse) GetEvents() []*logutil.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ExecuteFetchAsAppRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Query       string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// MaxRows is an optional parameter to limit the number of rows read into the
	// QueryResult. Note that this does not apply a LIMIT to the query, just how
	// many rows are read from the MySQL server on the tablet side.
	//
	// This field is optional. Specifying a non-positive value will use whatever
	// default is configured in the VtctldService.
	MaxRows int64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// UsePool causes the query to be run with a pooled connection to the tablet.
	UsePool       bool `protobuf:"varint,4,opt,name=use_pool,json=usePool,proto3" json:"use_pool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteFetchAsAppRequest) Reset() {
	*x = ExecuteFetchAsAppRequest{}
	mi := &file_vtctldata_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteFetchAsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAppRequest) ProtoMessage() {}

func (x *ExecuteFetchAsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAppRequest.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAppRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{58}
}

func (x *ExecuteFetchAsAppRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ExecuteFetchAsAppRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecuteFetchAsAppRequest) GetMaxRows() int64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteFetchAsAppRequest) GetUsePool() bool {
	if x != nil {
		return x.UsePool
	}
	return false
}

type ExecuteFetchAsAppResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *query.QueryResult     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteFetchAsAppResponse) Reset() {
	*x = ExecuteFetchAsAppResponse{}
	mi := &file_vtctldata_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteFetchAsAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAppResponse) ProtoMessage() {}

func (x *ExecuteFetchAsAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAppResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAppResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{59}
}

func (x *ExecuteFetchAsAppResponse) GetResult() *query.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteFetchAsDBARequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Query       string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// MaxRows is an optional parameter to limit the number of rows read into the
	// QueryResult. Note that this does not apply a LIMIT to the query, just how
	// many rows are read from the MySQL server on the tablet side.
	//
	// This field is optional. Specifying a non-positive value will use whatever
	// default is configured in the VtctldService.
	MaxRows int64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// DisableBinlogs instructs the tablet not to use binary logging when
	// executing the query.
	DisableBinlogs bool `protobuf:"varint,4,opt,name=disable_binlogs,json=disableBinlogs,proto3" json:"disable_binlogs,omitempty"`
	// ReloadSchema instructs the tablet to reload its schema after executing the
	// query.
	ReloadSchema  bool `protobuf:"varint,5,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteFetchAsDBARequest) Reset() {
	*x = ExecuteFetchAsDBARequest{}
	mi := &file_vtctldata_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteFetchAsDBARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsDBARequest) ProtoMessage() {}

func (x *ExecuteFetchAsDBARequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsDBARequest.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsDBARequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{60}
}

func (x *ExecuteFetchAsDBARequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ExecuteFetchAsDBARequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecuteFetchAsDBARequest) GetMaxRows() int64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteFetchAsDBARequest) GetDisableBinlogs() bool {
	if x != nil {
		return x.DisableBinlogs
	}
	return false
}

func (x *ExecuteFetchAsDBARequest) GetReloadSchema() bool {
	if x != nil {
		return x.ReloadSchema
	}
	return false
}

type ExecuteFetchAsDBAResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *query.QueryResult     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteFetchAsDBAResponse) Reset() {
	*x = ExecuteFetchAsDBAResponse{}
	mi := &file_vtctldata_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteFetchAsDBAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsDBAResponse) ProtoMessage() {}

func (x *ExecuteFetchAsDBAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsDBAResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsDBAResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{61}
}

func (x *ExecuteFetchAsDBAResponse) GetResult() *query.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteHookRequest struct {
	state             protoimpl.MessageState                `protogen:"open.v1"`
	TabletAlias       *topodata.TabletAlias                 `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	TabletHookRequest *tabletmanagerdata.ExecuteHookRequest `protobuf:"bytes,2,opt,name=tablet_hook_request,json=tabletHookRequest,proto3" json:"tablet_hook_request,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ExecuteHookRequest) Reset() {
	*x = ExecuteHookRequest{}
	mi := &file_vtctldata_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteHookRequest) ProtoMessage() {}

func (x *ExecuteHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteHookRequest.ProtoReflect.Descriptor instead.
func (*ExecuteHookRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{62}
}

func (x *ExecuteHookRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ExecuteHookRequest) GetTabletHookRequest() *tabletmanagerdata.ExecuteHookRequest {
	if x != nil {
		return x.TabletHookRequest
	}
	return nil
}

type ExecuteHookResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	HookResult    *tabletmanagerdata.ExecuteHookResponse `protobuf:"bytes,1,opt,name=hook_result,json=hookResult,proto3" json:"hook_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteHookResponse) Reset() {
	*x = ExecuteHookResponse{}
	mi := &file_vtctldata_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteHookResponse) ProtoMessage() {}

func (x *ExecuteHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteHookResponse.ProtoReflect.Descriptor instead.
func (*ExecuteHookResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{63}
}

func (x *ExecuteHookResponse) GetHookResult() *tabletmanagerdata.ExecuteHookResponse {
	if x != nil {
		return x.HookResult
	}
	return nil
}

type ExecuteMultiFetchAsDBARequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// SQL could have potentially multiple queries separated by semicolons.
	Sql string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	// MaxRows is an optional parameter to limit the number of rows read into the
	// QueryResult. Note that this does not apply a LIMIT to a query, just how
	// many rows are read from the MySQL server on the tablet side.
	//
	// This field is optional. Specifying a non-positive value will use whatever
	// default is configured in the VtctldService.
	MaxRows int64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// DisableBinlogs instructs the tablet not to use binary logging when
	// executing the query.
	DisableBinlogs bool `protobuf:"varint,4,opt,name=disable_binlogs,json=disableBinlogs,proto3" json:"disable_binlogs,omitempty"`
	// ReloadSchema instructs the tablet to reload its schema after executing the
	// query.
	ReloadSchema  bool `protobuf:"varint,5,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteMultiFetchAsDBARequest) Reset() {
	*x = ExecuteMultiFetchAsDBARequest{}
	mi := &file_vtctldata_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteMultiFetchAsDBARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteMultiFetchAsDBARequest) ProtoMessage() {}

func (x *ExecuteMultiFetchAsDBARequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteMultiFetchAsDBARequest.ProtoReflect.Descriptor instead.
func (*ExecuteMultiFetchAsDBARequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{64}
}

func (x *ExecuteMultiFetchAsDBARequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *ExecuteMultiFetchAsDBARequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ExecuteMultiFetchAsDBARequest) GetMaxRows() int64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteMultiFetchAsDBARequest) GetDisableBinlogs() bool {
	if x != nil {
		return x.DisableBinlogs
	}
	return false
}

func (x *ExecuteMultiFetchAsDBARequest) GetReloadSchema() bool {
	if x != nil {
		return x.ReloadSchema
	}
	return false
}

type ExecuteMultiFetchAsDBAResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*query.QueryResult   `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteMultiFetchAsDBAResponse) Reset() {
	*x = ExecuteMultiFetchAsDBAResponse{}
	mi := &file_vtctldata_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteMultiFetchAsDBAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteMultiFetchAsDBAResponse) ProtoMessage() {}

func (x *ExecuteMultiFetchAsDBAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteMultiFetchAsDBAResponse.ProtoReflect.Descriptor instead.
func (*ExecuteMultiFetchAsDBAResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{65}
}

func (x *ExecuteMultiFetchAsDBAResponse) GetResults() []*query.QueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FindAllShardsInKeyspaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAllShardsInKeyspaceRequest) Reset() {
	*x = FindAllShardsInKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAllShardsInKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllShardsInKeyspaceRequest) ProtoMessage() {}

func (x *FindAllShardsInKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllShardsInKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*FindAllShardsInKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{66}
}

func (x *FindAllShardsInKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type FindAllShardsInKeyspaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shards        map[string]*Shard      `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAllShardsInKeyspaceResponse) Reset() {
	*x = FindAllShardsInKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAllShardsInKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllShardsInKeyspaceResponse) ProtoMessage() {}

func (x *FindAllShardsInKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllShardsInKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*FindAllShardsInKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{67}
}

func (x *FindAllShardsInKeyspaceResponse) GetShards() map[string]*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type ForceCutOverSchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceCutOverSchemaMigrationRequest) Reset() {
	*x = ForceCutOverSchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceCutOverSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceCutOverSchemaMigrationRequest) ProtoMessage() {}

func (x *ForceCutOverSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceCutOverSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*ForceCutOverSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{68}
}

func (x *ForceCutOverSchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ForceCutOverSchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ForceCutOverSchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type ForceCutOverSchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ForceCutOverSchemaMigrationResponse) Reset() {
	*x = ForceCutOverSchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceCutOverSchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceCutOverSchemaMigrationResponse) ProtoMessage() {}

func (x *ForceCutOverSchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceCutOverSchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*ForceCutOverSchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{69}
}

func (x *ForceCutOverSchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type GetBackupsRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Limit, if nonzero, will return only the most N recent backups.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Detailed indicates whether to use the backupengine, if supported, to
	// populate additional fields, such as Engine and Status, on BackupInfo
	// objects in the response. If not set, or if the backupengine does not
	// support populating these fields, Engine will always be empty, and Status
	// will always be UNKNOWN.
	Detailed bool `protobuf:"varint,4,opt,name=detailed,proto3" json:"detailed,omitempty"`
	// DetailedLimit, if nonzero, will only populate additional fields (see Detailed)
	// on the N most recent backups. The Limit field still dictates the total
	// number of backup info objects returned, so, in reality, min(Limit, DetailedLimit)
	// backup infos will have additional fields set, and any remaining backups
	// will not.
	DetailedLimit uint32 `protobuf:"varint,5,opt,name=detailed_limit,json=detailedLimit,proto3" json:"detailed_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackupsRequest) Reset() {
	*x = GetBackupsRequest{}
	mi := &file_vtctldata_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupsRequest) ProtoMessage() {}

func (x *GetBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupsRequest.ProtoReflect.Descriptor instead.
func (*GetBackupsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{70}
}

func (x *GetBackupsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetBackupsRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *GetBackupsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBackupsRequest) GetDetailed() bool {
	if x != nil {
		return x.Detailed
	}
	return false
}

func (x *GetBackupsRequest) GetDetailedLimit() uint32 {
	if x != nil {
		return x.DetailedLimit
	}
	return 0
}

type GetBackupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Backups       []*mysqlctl.BackupInfo `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackupsResponse) Reset() {
	*x = GetBackupsResponse{}
	mi := &file_vtctldata_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupsResponse) ProtoMessage() {}

func (x *GetBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupsResponse.ProtoReflect.Descriptor instead.
func (*GetBackupsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{71}
}

func (x *GetBackupsResponse) GetBackups() []*mysqlctl.BackupInfo {
	if x != nil {
		return x.Backups
	}
	return nil
}

type GetCellInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          string                 `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellInfoRequest) Reset() {
	*x = GetCellInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfoRequest) ProtoMessage() {}

func (x *GetCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{72}
}

func (x *GetCellInfoRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

type GetCellInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CellInfo      *topodata.CellInfo     `protobuf:"bytes,1,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellInfoResponse) Reset() {
	*x = GetCellInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfoResponse) ProtoMessage() {}

func (x *GetCellInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCellInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{73}
}

func (x *GetCellInfoResponse) GetCellInfo() *topodata.CellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type GetCellInfoNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellInfoNamesRequest) Reset() {
	*x = GetCellInfoNamesRequest{}
	mi := &file_vtctldata_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellInfoNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfoNamesRequest) ProtoMessage() {}

func (x *GetCellInfoNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfoNamesRequest.ProtoReflect.Descriptor instead.
func (*GetCellInfoNamesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{74}
}

type GetCellInfoNamesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellInfoNamesResponse) Reset() {
	*x = GetCellInfoNamesResponse{}
	mi := &file_vtctldata_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellInfoNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfoNamesResponse) ProtoMessage() {}

func (x *GetCellInfoNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfoNamesResponse.ProtoReflect.Descriptor instead.
func (*GetCellInfoNamesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{75}
}

func (x *GetCellInfoNamesResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetCellsAliasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellsAliasesRequest) Reset() {
	*x = GetCellsAliasesRequest{}
	mi := &file_vtctldata_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellsAliasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellsAliasesRequest) ProtoMessage() {}

func (x *GetCellsAliasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellsAliasesRequest.ProtoReflect.Descriptor instead.
func (*GetCellsAliasesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{76}
}

type GetCellsAliasesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Aliases       map[string]*topodata.CellsAlias `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCellsAliasesResponse) Reset() {
	*x = GetCellsAliasesResponse{}
	mi := &file_vtctldata_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCellsAliasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellsAliasesResponse) ProtoMessage() {}

func (x *GetCellsAliasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellsAliasesResponse.ProtoReflect.Descriptor instead.
func (*GetCellsAliasesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{77}
}

func (x *GetCellsAliasesResponse) GetAliases() map[string]*topodata.CellsAlias {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type GetFullStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFullStatusRequest) Reset() {
	*x = GetFullStatusRequest{}
	mi := &file_vtctldata_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFullStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullStatusRequest) ProtoMessage() {}

func (x *GetFullStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullStatusRequest.ProtoReflect.Descriptor instead.
func (*GetFullStatusRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{78}
}

func (x *GetFullStatusRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type GetFullStatusResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        *replicationdata.FullStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFullStatusResponse) Reset() {
	*x = GetFullStatusResponse{}
	mi := &file_vtctldata_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFullStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullStatusResponse) ProtoMessage() {}

func (x *GetFullStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullStatusResponse.ProtoReflect.Descriptor instead.
func (*GetFullStatusResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{79}
}

func (x *GetFullStatusResponse) GetStatus() *replicationdata.FullStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetKeyspacesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyspacesRequest) Reset() {
	*x = GetKeyspacesRequest{}
	mi := &file_vtctldata_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspacesRequest) ProtoMessage() {}

func (x *GetKeyspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspacesRequest.ProtoReflect.Descriptor instead.
func (*GetKeyspacesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{80}
}

type GetKeyspacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspaces     []*Keyspace            `protobuf:"bytes,1,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyspacesResponse) Reset() {
	*x = GetKeyspacesResponse{}
	mi := &file_vtctldata_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspacesResponse) ProtoMessage() {}

func (x *GetKeyspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspacesResponse.ProtoReflect.Descriptor instead.
func (*GetKeyspacesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{81}
}

func (x *GetKeyspacesResponse) GetKeyspaces() []*Keyspace {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

type GetKeyspaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyspaceRequest) Reset() {
	*x = GetKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspaceRequest) ProtoMessage() {}

func (x *GetKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*GetKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{82}
}

func (x *GetKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type GetKeyspaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      *Keyspace              `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyspaceResponse) Reset() {
	*x = GetKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspaceResponse) ProtoMessage() {}

func (x *GetKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*GetKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{83}
}

func (x *GetKeyspaceResponse) GetKeyspace() *Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

type GetPermissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPermissionsRequest) Reset() {
	*x = GetPermissionsRequest{}
	mi := &file_vtctldata_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsRequest) ProtoMessage() {}

func (x *GetPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{84}
}

func (x *GetPermissionsRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type GetPermissionsResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Permissions   *tabletmanagerdata.Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPermissionsResponse) Reset() {
	*x = GetPermissionsResponse{}
	mi := &file_vtctldata_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsResponse) ProtoMessage() {}

func (x *GetPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{85}
}

func (x *GetPermissionsResponse) GetPermissions() *tabletmanagerdata.Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type GetKeyspaceRoutingRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyspaceRoutingRulesRequest) Reset() {
	*x = GetKeyspaceRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspaceRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspaceRoutingRulesRequest) ProtoMessage() {}

func (x *GetKeyspaceRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspaceRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*GetKeyspaceRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{86}
}

type GetKeyspaceRoutingRulesResponse struct {
	state                protoimpl.MessageState        `protogen:"open.v1"`
	KeyspaceRoutingRules *vschema.KeyspaceRoutingRules `protobuf:"bytes,1,opt,name=keyspace_routing_rules,json=keyspaceRoutingRules,proto3" json:"keyspace_routing_rules,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetKeyspaceRoutingRulesResponse) Reset() {
	*x = GetKeyspaceRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyspaceRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspaceRoutingRulesResponse) ProtoMessage() {}

func (x *GetKeyspaceRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspaceRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*GetKeyspaceRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{87}
}

func (x *GetKeyspaceRoutingRulesResponse) GetKeyspaceRoutingRules() *vschema.KeyspaceRoutingRules {
	if x != nil {
		return x.KeyspaceRoutingRules
	}
	return nil
}

type GetRoutingRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoutingRulesRequest) Reset() {
	*x = GetRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingRulesRequest) ProtoMessage() {}

func (x *GetRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*GetRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{88}
}

type GetRoutingRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoutingRules  *vschema.RoutingRules  `protobuf:"bytes,1,opt,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoutingRulesResponse) Reset() {
	*x = GetRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingRulesResponse) ProtoMessage() {}

func (x *GetRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*GetRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{89}
}

func (x *GetRoutingRulesResponse) GetRoutingRules() *vschema.RoutingRules {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

type GetSchemaRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// Tables is a list of tables for which we should gather information. Each is
	// either an exact match, or a regular expression of the form /regexp/.
	Tables []string `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// ExcludeTables is a list of tables to exclude from the result. Each is
	// either an exact match, or a regular expression of the form /regexp/.
	ExcludeTables []string `protobuf:"bytes,3,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	// IncludeViews specifies whether to include views in the result.
	IncludeViews bool `protobuf:"varint,4,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	// TableNamesOnly specifies whether to limit the results to just table names,
	// rather than full schema information for each table.
	TableNamesOnly bool `protobuf:"varint,5,opt,name=table_names_only,json=tableNamesOnly,proto3" json:"table_names_only,omitempty"`
	// TableSizesOnly specifies whether to limit the results to just table sizes,
	// rather than full schema information for each table. It is ignored if
	// TableNamesOnly is set to true.
	TableSizesOnly bool `protobuf:"varint,6,opt,name=table_sizes_only,json=tableSizesOnly,proto3" json:"table_sizes_only,omitempty"`
	// TableSchemaOnly specifies whether to limit the results to just table/view
	// schema definition (CREATE TABLE/VIEW statements) and skip column/field information
	TableSchemaOnly bool `protobuf:"varint,7,opt,name=table_schema_only,json=tableSchemaOnly,proto3" json:"table_schema_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{90}
}

func (x *GetSchemaRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *GetSchemaRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetSchemaRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *GetSchemaRequest) GetIncludeViews() bool {
	if x != nil {
		return x.IncludeViews
	}
	return false
}

func (x *GetSchemaRequest) GetTableNamesOnly() bool {
	if x != nil {
		return x.TableNamesOnly
	}
	return false
}

func (x *GetSchemaRequest) GetTableSizesOnly() bool {
	if x != nil {
		return x.TableSizesOnly
	}
	return false
}

func (x *GetSchemaRequest) GetTableSchemaOnly() bool {
	if x != nil {
		return x.TableSchemaOnly
	}
	return false
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Schema        *tabletmanagerdata.SchemaDefinition `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{91}
}

func (x *GetSchemaResponse) GetSchema() *tabletmanagerdata.SchemaDefinition {
	if x != nil {
		return x.Schema
	}
	return nil
}

// GetSchemaMigrationsRequest controls the behavior of the GetSchemaMigrations
// rpc.
//
// Keyspace is a required field, while all other fields are optional.
//
// If UUID is set, other optional fields will be ignored, since there will be at
// most one migration with that UUID. Furthermore, if no migration with that
// UUID exists, an empty response, not an error, is returned.
//
// MigrationContext, Status, and Recent are mutually exclusive.
type GetSchemaMigrationsRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Uuid, if set, will cause GetSchemaMigrations to return exactly 1 migration,
	// namely the one with that UUID. If no migration exists, the response will
	// be an empty slice, not an error.
	//
	// If this field is set, other fields (status filters, limit, skip, order) are
	// ignored.
	Uuid             string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MigrationContext string                 `protobuf:"bytes,3,opt,name=migration_context,json=migrationContext,proto3" json:"migration_context,omitempty"`
	Status           SchemaMigration_Status `protobuf:"varint,4,opt,name=status,proto3,enum=vtctldata.SchemaMigration_Status" json:"status,omitempty"`
	// Recent, if set, returns migrations requested between now and the provided
	// value.
	Recent        *vttime.Duration `protobuf:"bytes,5,opt,name=recent,proto3" json:"recent,omitempty"`
	Order         QueryOrdering    `protobuf:"varint,6,opt,name=order,proto3,enum=vtctldata.QueryOrdering" json:"order,omitempty"`
	Limit         uint64           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Skip          uint64           `protobuf:"varint,8,opt,name=skip,proto3" json:"skip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaMigrationsRequest) Reset() {
	*x = GetSchemaMigrationsRequest{}
	mi := &file_vtctldata_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaMigrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaMigrationsRequest) ProtoMessage() {}

func (x *GetSchemaMigrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaMigrationsRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaMigrationsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{92}
}

func (x *GetSchemaMigrationsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetSchemaMigrationsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetSchemaMigrationsRequest) GetMigrationContext() string {
	if x != nil {
		return x.MigrationContext
	}
	return ""
}

func (x *GetSchemaMigrationsRequest) GetStatus() SchemaMigration_Status {
	if x != nil {
		return x.Status
	}
	return SchemaMigration_UNKNOWN
}

func (x *GetSchemaMigrationsRequest) GetRecent() *vttime.Duration {
	if x != nil {
		return x.Recent
	}
	return nil
}

func (x *GetSchemaMigrationsRequest) GetOrder() QueryOrdering {
	if x != nil {
		return x.Order
	}
	return QueryOrdering_NONE
}

func (x *GetSchemaMigrationsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSchemaMigrationsRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type GetSchemaMigrationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Migrations    []*SchemaMigration     `protobuf:"bytes,1,rep,name=migrations,proto3" json:"migrations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaMigrationsResponse) Reset() {
	*x = GetSchemaMigrationsResponse{}
	mi := &file_vtctldata_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaMigrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaMigrationsResponse) ProtoMessage() {}

func (x *GetSchemaMigrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaMigrationsResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaMigrationsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{93}
}

func (x *GetSchemaMigrationsResponse) GetMigrations() []*SchemaMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

type GetShardReplicationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Cells is the list of cells to fetch data for. Omit to fetch data from all
	// cells.
	Cells         []string `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardReplicationRequest) Reset() {
	*x = GetShardReplicationRequest{}
	mi := &file_vtctldata_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardReplicationRequest) ProtoMessage() {}

func (x *GetShardReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardReplicationRequest.ProtoReflect.Descriptor instead.
func (*GetShardReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{94}
}

func (x *GetShardReplicationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetShardReplicationRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *GetShardReplicationRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetShardReplicationResponse struct {
	state                  protoimpl.MessageState                `protogen:"open.v1"`
	ShardReplicationByCell map[string]*topodata.ShardReplication `protobuf:"bytes,1,rep,name=shard_replication_by_cell,json=shardReplicationByCell,proto3" json:"shard_replication_by_cell,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetShardReplicationResponse) Reset() {
	*x = GetShardReplicationResponse{}
	mi := &file_vtctldata_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardReplicationResponse) ProtoMessage() {}

func (x *GetShardReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardReplicationResponse.ProtoReflect.Descriptor instead.
func (*GetShardReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{95}
}

func (x *GetShardReplicationResponse) GetShardReplicationByCell() map[string]*topodata.ShardReplication {
	if x != nil {
		return x.ShardReplicationByCell
	}
	return nil
}

type GetShardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ShardName     string                 `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardRequest) Reset() {
	*x = GetShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardRequest) ProtoMessage() {}

func (x *GetShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardRequest.ProtoReflect.Descriptor instead.
func (*GetShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{96}
}

func (x *GetShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type GetShardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shard         *Shard                 `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardResponse) Reset() {
	*x = GetShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardResponse) ProtoMessage() {}

func (x *GetShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardResponse.ProtoReflect.Descriptor instead.
func (*GetShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{97}
}

func (x *GetShardResponse) GetShard() *Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type GetShardRoutingRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardRoutingRulesRequest) Reset() {
	*x = GetShardRoutingRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardRoutingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardRoutingRulesRequest) ProtoMessage() {}

func (x *GetShardRoutingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardRoutingRulesRequest.ProtoReflect.Descriptor instead.
func (*GetShardRoutingRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{98}
}

type GetShardRoutingRulesResponse struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	ShardRoutingRules *vschema.ShardRoutingRules `protobuf:"bytes,1,opt,name=shard_routing_rules,json=shardRoutingRules,proto3" json:"shard_routing_rules,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetShardRoutingRulesResponse) Reset() {
	*x = GetShardRoutingRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardRoutingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardRoutingRulesResponse) ProtoMessage() {}

func (x *GetShardRoutingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardRoutingRulesResponse.ProtoReflect.Descriptor instead.
func (*GetShardRoutingRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{99}
}

func (x *GetShardRoutingRulesResponse) GetShardRoutingRules() *vschema.ShardRoutingRules {
	if x != nil {
		return x.ShardRoutingRules
	}
	return nil
}

type GetSrvKeyspaceNamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cells         []string               `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvKeyspaceNamesRequest) Reset() {
	*x = GetSrvKeyspaceNamesRequest{}
	mi := &file_vtctldata_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvKeyspaceNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspaceNamesRequest) ProtoMessage() {}

func (x *GetSrvKeyspaceNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspaceNamesRequest.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspaceNamesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{100}
}

func (x *GetSrvKeyspaceNamesRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvKeyspaceNamesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Names is a mapping of cell name to a list of SrvKeyspace names.
	Names         map[string]*GetSrvKeyspaceNamesResponse_NameList `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvKeyspaceNamesResponse) Reset() {
	*x = GetSrvKeyspaceNamesResponse{}
	mi := &file_vtctldata_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvKeyspaceNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspaceNamesResponse) ProtoMessage() {}

func (x *GetSrvKeyspaceNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspaceNamesResponse.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspaceNamesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{101}
}

func (x *GetSrvKeyspaceNamesResponse) GetNames() map[string]*GetSrvKeyspaceNamesResponse_NameList {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetSrvKeyspacesRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
	// equivalent to specifying all cells in the topo.
	Cells         []string `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvKeyspacesRequest) Reset() {
	*x = GetSrvKeyspacesRequest{}
	mi := &file_vtctldata_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvKeyspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspacesRequest) ProtoMessage() {}

func (x *GetSrvKeyspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspacesRequest.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspacesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{102}
}

func (x *GetSrvKeyspacesRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetSrvKeyspacesRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvKeyspacesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SrvKeyspaces is a mapping of cell name to SrvKeyspace.
	SrvKeyspaces  map[string]*topodata.SrvKeyspace `protobuf:"bytes,1,rep,name=srv_keyspaces,json=srvKeyspaces,proto3" json:"srv_keyspaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvKeyspacesResponse) Reset() {
	*x = GetSrvKeyspacesResponse{}
	mi := &file_vtctldata_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvKeyspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspacesResponse) ProtoMessage() {}

func (x *GetSrvKeyspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspacesResponse.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspacesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{103}
}

func (x *GetSrvKeyspacesResponse) GetSrvKeyspaces() map[string]*topodata.SrvKeyspace {
	if x != nil {
		return x.SrvKeyspaces
	}
	return nil
}

type UpdateThrottlerConfigRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Enable instructs to enable the throttler
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// Disable instructs to disable the throttler
	Disable bool `protobuf:"varint,3,opt,name=disable,proto3" json:"disable,omitempty"`
	// Threshold for throttler (with no custom query, ie using default query, only positive values are considered)
	Threshold float64 `protobuf:"fixed64,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// CustomQuery replaces the default replication lag query
	CustomQuery string `protobuf:"bytes,5,opt,name=custom_query,json=customQuery,proto3" json:"custom_query,omitempty"`
	// CustomQuerySet indicates that the value of CustomQuery has changed
	CustomQuerySet bool `protobuf:"varint,6,opt,name=custom_query_set,json=customQuerySet,proto3" json:"custom_query_set,omitempty"`
	// CheckAsCheckSelf instructs the throttler to respond to /check requests by checking the tablet's own health
	CheckAsCheckSelf bool `protobuf:"varint,7,opt,name=check_as_check_self,json=checkAsCheckSelf,proto3" json:"check_as_check_self,omitempty"`
	// CheckAsCheckShard instructs the throttler to respond to /check requests by checking the shard's health (this is the default behavior)
	CheckAsCheckShard bool `protobuf:"varint,8,opt,name=check_as_check_shard,json=checkAsCheckShard,proto3" json:"check_as_check_shard,omitempty"`
	// ThrottledApp indicates a single throttled app rule (ignored if name is empty)
	ThrottledApp *topodata.ThrottledAppRule `protobuf:"bytes,9,opt,name=throttled_app,json=throttledApp,proto3" json:"throttled_app,omitempty"`
	// MetricName is the name of the metric for which we apply a new threshold
	MetricName string `protobuf:"bytes,10,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// AppName is the name of the app for which we assign metrics
	AppName string `protobuf:"bytes,11,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// AppCheckedMetrics are the metrics to be checked got the given AppName. These can be scoped. For example:
	// ["lag", "self/loadvg", "shard/threads_running"]
	AppCheckedMetrics []string `protobuf:"bytes,12,rep,name=app_checked_metrics,json=appCheckedMetrics,proto3" json:"app_checked_metrics,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateThrottlerConfigRequest) Reset() {
	*x = UpdateThrottlerConfigRequest{}
	mi := &file_vtctldata_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateThrottlerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThrottlerConfigRequest) ProtoMessage() {}

func (x *UpdateThrottlerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThrottlerConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateThrottlerConfigRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateThrottlerConfigRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *UpdateThrottlerConfigRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateThrottlerConfigRequest) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *UpdateThrottlerConfigRequest) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *UpdateThrottlerConfigRequest) GetCustomQuery() string {
	if x != nil {
		return x.CustomQuery
	}
	return ""
}

func (x *UpdateThrottlerConfigRequest) GetCustomQuerySet() bool {
	if x != nil {
		return x.CustomQuerySet
	}
	return false
}

func (x *UpdateThrottlerConfigRequest) GetCheckAsCheckSelf() bool {
	if x != nil {
		return x.CheckAsCheckSelf
	}
	return false
}

func (x *UpdateThrottlerConfigRequest) GetCheckAsCheckShard() bool {
	if x != nil {
		return x.CheckAsCheckShard
	}
	return false
}

func (x *UpdateThrottlerConfigRequest) GetThrottledApp() *topodata.ThrottledAppRule {
	if x != nil {
		return x.ThrottledApp
	}
	return nil
}

func (x *UpdateThrottlerConfigRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *UpdateThrottlerConfigRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateThrottlerConfigRequest) GetAppCheckedMetrics() []string {
	if x != nil {
		return x.AppCheckedMetrics
	}
	return nil
}

type UpdateThrottlerConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateThrottlerConfigResponse) Reset() {
	*x = UpdateThrottlerConfigResponse{}
	mi := &file_vtctldata_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateThrottlerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThrottlerConfigResponse) ProtoMessage() {}

func (x *UpdateThrottlerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThrottlerConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateThrottlerConfigResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{105}
}

type GetSrvVSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          string                 `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvVSchemaRequest) Reset() {
	*x = GetSrvVSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemaRequest) ProtoMessage() {}

func (x *GetSrvVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{106}
}

func (x *GetSrvVSchemaRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

type GetSrvVSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SrvVSchema    *vschema.SrvVSchema    `protobuf:"bytes,1,opt,name=srv_v_schema,json=srvVSchema,proto3" json:"srv_v_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvVSchemaResponse) Reset() {
	*x = GetSrvVSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvVSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemaResponse) ProtoMessage() {}

func (x *GetSrvVSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{107}
}

func (x *GetSrvVSchemaResponse) GetSrvVSchema() *vschema.SrvVSchema {
	if x != nil {
		return x.SrvVSchema
	}
	return nil
}

type GetSrvVSchemasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cells         []string               `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvVSchemasRequest) Reset() {
	*x = GetSrvVSchemasRequest{}
	mi := &file_vtctldata_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvVSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemasRequest) ProtoMessage() {}

func (x *GetSrvVSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemasRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{108}
}

func (x *GetSrvVSchemasRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvVSchemasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SrvVSchemas is a mapping of cell name to SrvVSchema
	SrvVSchemas   map[string]*vschema.SrvVSchema `protobuf:"bytes,1,rep,name=srv_v_schemas,json=srvVSchemas,proto3" json:"srv_v_schemas,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvVSchemasResponse) Reset() {
	*x = GetSrvVSchemasResponse{}
	mi := &file_vtctldata_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvVSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemasResponse) ProtoMessage() {}

func (x *GetSrvVSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemasResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{109}
}

func (x *GetSrvVSchemasResponse) GetSrvVSchemas() map[string]*vschema.SrvVSchema {
	if x != nil {
		return x.SrvVSchemas
	}
	return nil
}

type GetTabletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletRequest) Reset() {
	*x = GetTabletRequest{}
	mi := &file_vtctldata_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletRequest) ProtoMessage() {}

func (x *GetTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletRequest.ProtoReflect.Descriptor instead.
func (*GetTabletRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{110}
}

func (x *GetTabletRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type GetTabletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablet        *topodata.Tablet       `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletResponse) Reset() {
	*x = GetTabletResponse{}
	mi := &file_vtctldata_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletResponse) ProtoMessage() {}

func (x *GetTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletResponse.ProtoReflect.Descriptor instead.
func (*GetTabletResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{111}
}

func (x *GetTabletResponse) GetTablet() *topodata.Tablet {
	if x != nil {
		return x.Tablet
	}
	return nil
}

type GetTabletsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace to return tablets for. Omit to return
	// tablets from all keyspaces.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard to return tablets for. This field is ignored
	// if Keyspace is not set.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Cells is an optional set of cells to return tablets for.
	Cells []string `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	// Strict specifies how the server should treat failures from individual
	// cells.
	//
	// When false (the default), GetTablets will return data from any cells that
	// return successfully, but will fail the request if all cells fail. When
	// true, any individual cell can fail the full request.
	Strict bool `protobuf:"varint,4,opt,name=strict,proto3" json:"strict,omitempty"`
	// TabletAliases is an optional list of tablet aliases to fetch Tablet objects
	// for. If specified, Keyspace, Shard, and Cells are ignored, and tablets are
	// looked up by their respective aliases' Cells directly.
	TabletAliases []*topodata.TabletAlias `protobuf:"bytes,5,rep,name=tablet_aliases,json=tabletAliases,proto3" json:"tablet_aliases,omitempty"`
	// tablet_type specifies the type of tablets to return. Omit to return all
	// tablet types.
	TabletType    topodata.TabletType `protobuf:"varint,6,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletsRequest) Reset() {
	*x = GetTabletsRequest{}
	mi := &file_vtctldata_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletsRequest) ProtoMessage() {}

func (x *GetTabletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletsRequest.ProtoReflect.Descriptor instead.
func (*GetTabletsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{112}
}

func (x *GetTabletsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetTabletsRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *GetTabletsRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *GetTabletsRequest) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

func (x *GetTabletsRequest) GetTabletAliases() []*topodata.TabletAlias {
	if x != nil {
		return x.TabletAliases
	}
	return nil
}

func (x *GetTabletsRequest) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

type GetTabletsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablets       []*topodata.Tablet     `protobuf:"bytes,1,rep,name=tablets,proto3" json:"tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletsResponse) Reset() {
	*x = GetTabletsResponse{}
	mi := &file_vtctldata_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletsResponse) ProtoMessage() {}

func (x *GetTabletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletsResponse.ProtoReflect.Descriptor instead.
func (*GetTabletsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{113}
}

func (x *GetTabletsResponse) GetTablets() []*topodata.Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type GetThrottlerStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TabletAlias is the alias of the tablet to probe
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThrottlerStatusRequest) Reset() {
	*x = GetThrottlerStatusRequest{}
	mi := &file_vtctldata_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThrottlerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThrottlerStatusRequest) ProtoMessage() {}

func (x *GetThrottlerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThrottlerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetThrottlerStatusRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{114}
}

func (x *GetThrottlerStatusRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type GetThrottlerStatusResponse struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Status        *tabletmanagerdata.GetThrottlerStatusResponse `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThrottlerStatusResponse) Reset() {
	*x = GetThrottlerStatusResponse{}
	mi := &file_vtctldata_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThrottlerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThrottlerStatusResponse) ProtoMessage() {}

func (x *GetThrottlerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThrottlerStatusResponse.ProtoReflect.Descriptor instead.
func (*GetThrottlerStatusResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{115}
}

func (x *GetThrottlerStatusResponse) GetStatus() *tabletmanagerdata.GetThrottlerStatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetTopologyPathRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	AsJson        bool                   `protobuf:"varint,3,opt,name=as_json,json=asJson,proto3" json:"as_json,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopologyPathRequest) Reset() {
	*x = GetTopologyPathRequest{}
	mi := &file_vtctldata_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopologyPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyPathRequest) ProtoMessage() {}

func (x *GetTopologyPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyPathRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyPathRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{116}
}

func (x *GetTopologyPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetTopologyPathRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetTopologyPathRequest) GetAsJson() bool {
	if x != nil {
		return x.AsJson
	}
	return false
}

type GetTopologyPathResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cell          *TopologyCell          `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopologyPathResponse) Reset() {
	*x = GetTopologyPathResponse{}
	mi := &file_vtctldata_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopologyPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyPathResponse) ProtoMessage() {}

func (x *GetTopologyPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyPathResponse.ProtoReflect.Descriptor instead.
func (*GetTopologyPathResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{117}
}

func (x *GetTopologyPathResponse) GetCell() *TopologyCell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type TopologyCell struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path  string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Data is the file contents of the cell located at path.
	// It is only populated if the cell is a terminal node.
	Data          string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Children      []string `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Version       int64    `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopologyCell) Reset() {
	*x = TopologyCell{}
	mi := &file_vtctldata_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyCell) ProtoMessage() {}

func (x *TopologyCell) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyCell.ProtoReflect.Descriptor instead.
func (*TopologyCell) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{118}
}

func (x *TopologyCell) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopologyCell) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TopologyCell) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TopologyCell) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *TopologyCell) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetUnresolvedTransactionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	AbandonAge    int64                  `protobuf:"varint,2,opt,name=abandon_age,json=abandonAge,proto3" json:"abandon_age,omitempty"` // in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnresolvedTransactionsRequest) Reset() {
	*x = GetUnresolvedTransactionsRequest{}
	mi := &file_vtctldata_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnresolvedTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnresolvedTransactionsRequest) ProtoMessage() {}

func (x *GetUnresolvedTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnresolvedTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetUnresolvedTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{119}
}

func (x *GetUnresolvedTransactionsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetUnresolvedTransactionsRequest) GetAbandonAge() int64 {
	if x != nil {
		return x.AbandonAge
	}
	return 0
}

type GetUnresolvedTransactionsResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Transactions  []*query.TransactionMetadata `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnresolvedTransactionsResponse) Reset() {
	*x = GetUnresolvedTransactionsResponse{}
	mi := &file_vtctldata_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnresolvedTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnresolvedTransactionsResponse) ProtoMessage() {}

func (x *GetUnresolvedTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnresolvedTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetUnresolvedTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{120}
}

func (x *GetUnresolvedTransactionsResponse) GetTransactions() []*query.TransactionMetadata {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetTransactionInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dtid          string                 `protobuf:"bytes,1,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionInfoRequest) Reset() {
	*x = GetTransactionInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionInfoRequest) ProtoMessage() {}

func (x *GetTransactionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{121}
}

func (x *GetTransactionInfoRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

type ShardTransactionState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shard         string                 `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	TimeCreated   int64                  `protobuf:"varint,4,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	Statements    []string               `protobuf:"bytes,5,rep,name=statements,proto3" json:"statements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardTransactionState) Reset() {
	*x = ShardTransactionState{}
	mi := &file_vtctldata_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardTransactionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardTransactionState) ProtoMessage() {}

func (x *ShardTransactionState) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardTransactionState.ProtoReflect.Descriptor instead.
func (*ShardTransactionState) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{122}
}

func (x *ShardTransactionState) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ShardTransactionState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ShardTransactionState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ShardTransactionState) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ShardTransactionState) GetStatements() []string {
	if x != nil {
		return x.Statements
	}
	return nil
}

type GetTransactionInfoResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Metadata      *query.TransactionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ShardStates   []*ShardTransactionState   `protobuf:"bytes,2,rep,name=shard_states,json=shardStates,proto3" json:"shard_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionInfoResponse) Reset() {
	*x = GetTransactionInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionInfoResponse) ProtoMessage() {}

func (x *GetTransactionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{123}
}

func (x *GetTransactionInfoResponse) GetMetadata() *query.TransactionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetTransactionInfoResponse) GetShardStates() []*ShardTransactionState {
	if x != nil {
		return x.ShardStates
	}
	return nil
}

type ConcludeTransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dtid          string                 `protobuf:"bytes,1,opt,name=dtid,proto3" json:"dtid,omitempty"`
	Participants  []*query.Target        `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcludeTransactionRequest) Reset() {
	*x = ConcludeTransactionRequest{}
	mi := &file_vtctldata_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcludeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcludeTransactionRequest) ProtoMessage() {}

func (x *ConcludeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcludeTransactionRequest.ProtoReflect.Descriptor instead.
func (*ConcludeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{124}
}

func (x *ConcludeTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

func (x *ConcludeTransactionRequest) GetParticipants() []*query.Target {
	if x != nil {
		return x.Participants
	}
	return nil
}

type ConcludeTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcludeTransactionResponse) Reset() {
	*x = ConcludeTransactionResponse{}
	mi := &file_vtctldata_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcludeTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcludeTransactionResponse) ProtoMessage() {}

func (x *ConcludeTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcludeTransactionResponse.ProtoReflect.Descriptor instead.
func (*ConcludeTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{125}
}

type GetVSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVSchemaRequest) Reset() {
	*x = GetVSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVSchemaRequest) ProtoMessage() {}

func (x *GetVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{126}
}

func (x *GetVSchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type GetVersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	mi := &file_vtctldata_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{127}
}

func (x *GetVersionRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type GetVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	mi := &file_vtctldata_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{128}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetVSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VSchema       *vschema.Keyspace      `protobuf:"bytes,1,opt,name=v_schema,json=vSchema,proto3" json:"v_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVSchemaResponse) Reset() {
	*x = GetVSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVSchemaResponse) ProtoMessage() {}

func (x *GetVSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetVSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{129}
}

func (x *GetVSchemaResponse) GetVSchema() *vschema.Keyspace {
	if x != nil {
		return x.VSchema
	}
	return nil
}

type GetWorkflowsRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Keyspace   string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ActiveOnly bool                   `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	NameOnly   bool                   `protobuf:"varint,3,opt,name=name_only,json=nameOnly,proto3" json:"name_only,omitempty"`
	// If you only want a specific workflow then set this field.
	Workflow      string   `protobuf:"bytes,4,opt,name=workflow,proto3" json:"workflow,omitempty"`
	IncludeLogs   bool     `protobuf:"varint,5,opt,name=include_logs,json=includeLogs,proto3" json:"include_logs,omitempty"`
	Shards        []string `protobuf:"bytes,6,rep,name=shards,proto3" json:"shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowsRequest) Reset() {
	*x = GetWorkflowsRequest{}
	mi := &file_vtctldata_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsRequest) ProtoMessage() {}

func (x *GetWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{130}
}

func (x *GetWorkflowsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetWorkflowsRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *GetWorkflowsRequest) GetNameOnly() bool {
	if x != nil {
		return x.NameOnly
	}
	return false
}

func (x *GetWorkflowsRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *GetWorkflowsRequest) GetIncludeLogs() bool {
	if x != nil {
		return x.IncludeLogs
	}
	return false
}

func (x *GetWorkflowsRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

type GetWorkflowsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workflows     []*Workflow            `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowsResponse) Reset() {
	*x = GetWorkflowsResponse{}
	mi := &file_vtctldata_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsResponse) ProtoMessage() {}

func (x *GetWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{131}
}

func (x *GetWorkflowsResponse) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type InitShardPrimaryRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Keyspace                string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard                   string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	PrimaryElectTabletAlias *topodata.TabletAlias  `protobuf:"bytes,3,opt,name=primary_elect_tablet_alias,json=primaryElectTabletAlias,proto3" json:"primary_elect_tablet_alias,omitempty"`
	Force                   bool                   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	WaitReplicasTimeout     *vttime.Duration       `protobuf:"bytes,5,opt,name=wait_replicas_timeout,json=waitReplicasTimeout,proto3" json:"wait_replicas_timeout,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *InitShardPrimaryRequest) Reset() {
	*x = InitShardPrimaryRequest{}
	mi := &file_vtctldata_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitShardPrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitShardPrimaryRequest) ProtoMessage() {}

func (x *InitShardPrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitShardPrimaryRequest.ProtoReflect.Descriptor instead.
func (*InitShardPrimaryRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{132}
}

func (x *InitShardPrimaryRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *InitShardPrimaryRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *InitShardPrimaryRequest) GetPrimaryElectTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.PrimaryElectTabletAlias
	}
	return nil
}

func (x *InitShardPrimaryRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *InitShardPrimaryRequest) GetWaitReplicasTimeout() *vttime.Duration {
	if x != nil {
		return x.WaitReplicasTimeout
	}
	return nil
}

type InitShardPrimaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*logutil.Event       `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitShardPrimaryResponse) Reset() {
	*x = InitShardPrimaryResponse{}
	mi := &file_vtctldata_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitShardPrimaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitShardPrimaryResponse) ProtoMessage() {}

func (x *InitShardPrimaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitShardPrimaryResponse.ProtoReflect.Descriptor instead.
func (*InitShardPrimaryResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{133}
}

func (x *InitShardPrimaryResponse) GetEvents() []*logutil.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type LaunchSchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaunchSchemaMigrationRequest) Reset() {
	*x = LaunchSchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSchemaMigrationRequest) ProtoMessage() {}

func (x *LaunchSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*LaunchSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{134}
}

func (x *LaunchSchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *LaunchSchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LaunchSchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type LaunchSchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LaunchSchemaMigrationResponse) Reset() {
	*x = LaunchSchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchSchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSchemaMigrationResponse) ProtoMessage() {}

func (x *LaunchSchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*LaunchSchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{135}
}

func (x *LaunchSchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type LookupVindexCompleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Where the lookup vindex lives.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// This is the name of the lookup vindex and the vreplication workflow.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Where the vreplication workflow lives.
	TableKeyspace string `protobuf:"bytes,3,opt,name=table_keyspace,json=tableKeyspace,proto3" json:"table_keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupVindexCompleteRequest) Reset() {
	*x = LookupVindexCompleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexCompleteRequest) ProtoMessage() {}

func (x *LookupVindexCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexCompleteRequest.ProtoReflect.Descriptor instead.
func (*LookupVindexCompleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{136}
}

func (x *LookupVindexCompleteRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *LookupVindexCompleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LookupVindexCompleteRequest) GetTableKeyspace() string {
	if x != nil {
		return x.TableKeyspace
	}
	return ""
}

type LookupVindexCompleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupVindexCompleteResponse) Reset() {
	*x = LookupVindexCompleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexCompleteResponse) ProtoMessage() {}

func (x *LookupVindexCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexCompleteResponse.ProtoReflect.Descriptor instead.
func (*LookupVindexCompleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{137}
}

type LookupVindexCreateRequest struct {
	state                      protoimpl.MessageState                      `protogen:"open.v1"`
	Keyspace                   string                                      `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow                   string                                      `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Cells                      []string                                    `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	Vindex                     *vschema.Keyspace                           `protobuf:"bytes,4,opt,name=vindex,proto3" json:"vindex,omitempty"`
	ContinueAfterCopyWithOwner bool                                        `protobuf:"varint,5,opt,name=continue_after_copy_with_owner,json=continueAfterCopyWithOwner,proto3" json:"continue_after_copy_with_owner,omitempty"`
	TabletTypes                []topodata.TabletType                       `protobuf:"varint,6,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference  tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,7,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *LookupVindexCreateRequest) Reset() {
	*x = LookupVindexCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexCreateRequest) ProtoMessage() {}

func (x *LookupVindexCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexCreateRequest.ProtoReflect.Descriptor instead.
func (*LookupVindexCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{138}
}

func (x *LookupVindexCreateRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *LookupVindexCreateRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *LookupVindexCreateRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *LookupVindexCreateRequest) GetVindex() *vschema.Keyspace {
	if x != nil {
		return x.Vindex
	}
	return nil
}

func (x *LookupVindexCreateRequest) GetContinueAfterCopyWithOwner() bool {
	if x != nil {
		return x.ContinueAfterCopyWithOwner
	}
	return false
}

func (x *LookupVindexCreateRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *LookupVindexCreateRequest) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

type LookupVindexCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupVindexCreateResponse) Reset() {
	*x = LookupVindexCreateResponse{}
	mi := &file_vtctldata_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexCreateResponse) ProtoMessage() {}

func (x *LookupVindexCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexCreateResponse.ProtoReflect.Descriptor instead.
func (*LookupVindexCreateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{139}
}

type LookupVindexExternalizeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Where the lookup vindex lives.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// This is the name of the lookup vindex and the vreplication workflow.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Where the vreplication workflow lives.
	TableKeyspace string `protobuf:"bytes,3,opt,name=table_keyspace,json=tableKeyspace,proto3" json:"table_keyspace,omitempty"`
	// If this is set true, we directly delete the workflow instead of stopping.
	// Also, complete command is not required to delete workflow in that case.
	DeleteWorkflow bool `protobuf:"varint,4,opt,name=delete_workflow,json=deleteWorkflow,proto3" json:"delete_workflow,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LookupVindexExternalizeRequest) Reset() {
	*x = LookupVindexExternalizeRequest{}
	mi := &file_vtctldata_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexExternalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexExternalizeRequest) ProtoMessage() {}

func (x *LookupVindexExternalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexExternalizeRequest.ProtoReflect.Descriptor instead.
func (*LookupVindexExternalizeRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{140}
}

func (x *LookupVindexExternalizeRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *LookupVindexExternalizeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LookupVindexExternalizeRequest) GetTableKeyspace() string {
	if x != nil {
		return x.TableKeyspace
	}
	return ""
}

func (x *LookupVindexExternalizeRequest) GetDeleteWorkflow() bool {
	if x != nil {
		return x.DeleteWorkflow
	}
	return false
}

type LookupVindexExternalizeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Was the workflow stopped.
	WorkflowStopped bool `protobuf:"varint,1,opt,name=workflow_stopped,json=workflowStopped,proto3" json:"workflow_stopped,omitempty"`
	// Was the workflow deleted.
	WorkflowDeleted bool `protobuf:"varint,2,opt,name=workflow_deleted,json=workflowDeleted,proto3" json:"workflow_deleted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LookupVindexExternalizeResponse) Reset() {
	*x = LookupVindexExternalizeResponse{}
	mi := &file_vtctldata_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexExternalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexExternalizeResponse) ProtoMessage() {}

func (x *LookupVindexExternalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexExternalizeResponse.ProtoReflect.Descriptor instead.
func (*LookupVindexExternalizeResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{141}
}

func (x *LookupVindexExternalizeResponse) GetWorkflowStopped() bool {
	if x != nil {
		return x.WorkflowStopped
	}
	return false
}

func (x *LookupVindexExternalizeResponse) GetWorkflowDeleted() bool {
	if x != nil {
		return x.WorkflowDeleted
	}
	return false
}

type LookupVindexInternalizeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Where the lookup vindex lives.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// This is the name of the lookup vindex and the vreplication workflow.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Where the vreplication workflow lives.
	TableKeyspace string `protobuf:"bytes,3,opt,name=table_keyspace,json=tableKeyspace,proto3" json:"table_keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupVindexInternalizeRequest) Reset() {
	*x = LookupVindexInternalizeRequest{}
	mi := &file_vtctldata_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexInternalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexInternalizeRequest) ProtoMessage() {}

func (x *LookupVindexInternalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexInternalizeRequest.ProtoReflect.Descriptor instead.
func (*LookupVindexInternalizeRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{142}
}

func (x *LookupVindexInternalizeRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *LookupVindexInternalizeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LookupVindexInternalizeRequest) GetTableKeyspace() string {
	if x != nil {
		return x.TableKeyspace
	}
	return ""
}

type LookupVindexInternalizeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupVindexInternalizeResponse) Reset() {
	*x = LookupVindexInternalizeResponse{}
	mi := &file_vtctldata_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupVindexInternalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVindexInternalizeResponse) ProtoMessage() {}

func (x *LookupVindexInternalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVindexInternalizeResponse.ProtoReflect.Descriptor instead.
func (*LookupVindexInternalizeResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{143}
}

type MaterializeCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *MaterializeSettings   `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaterializeCreateRequest) Reset() {
	*x = MaterializeCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializeCreateRequest) ProtoMessage() {}

func (x *MaterializeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializeCreateRequest.ProtoReflect.Descriptor instead.
func (*MaterializeCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{144}
}

func (x *MaterializeCreateRequest) GetSettings() *MaterializeSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type MaterializeCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaterializeCreateResponse) Reset() {
	*x = MaterializeCreateResponse{}
	mi := &file_vtctldata_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializeCreateResponse) ProtoMessage() {}

func (x *MaterializeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializeCreateResponse.ProtoReflect.Descriptor instead.
func (*MaterializeCreateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{145}
}

type WorkflowAddTablesRequest struct {
	state                 protoimpl.MessageState      `protogen:"open.v1"`
	Workflow              string                      `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Keyspace              string                      `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	TableSettings         []*TableMaterializeSettings `protobuf:"bytes,3,rep,name=table_settings,json=tableSettings,proto3" json:"table_settings,omitempty"`
	MaterializationIntent MaterializationIntent       `protobuf:"varint,4,opt,name=materialization_intent,json=materializationIntent,proto3,enum=vtctldata.MaterializationIntent" json:"materialization_intent,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WorkflowAddTablesRequest) Reset() {
	*x = WorkflowAddTablesRequest{}
	mi := &file_vtctldata_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowAddTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowAddTablesRequest) ProtoMessage() {}

func (x *WorkflowAddTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowAddTablesRequest.ProtoReflect.Descriptor instead.
func (*WorkflowAddTablesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{146}
}

func (x *WorkflowAddTablesRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *WorkflowAddTablesRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowAddTablesRequest) GetTableSettings() []*TableMaterializeSettings {
	if x != nil {
		return x.TableSettings
	}
	return nil
}

func (x *WorkflowAddTablesRequest) GetMaterializationIntent() MaterializationIntent {
	if x != nil {
		return x.MaterializationIntent
	}
	return MaterializationIntent_CUSTOM
}

type WorkflowAddTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowAddTablesResponse) Reset() {
	*x = WorkflowAddTablesResponse{}
	mi := &file_vtctldata_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowAddTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowAddTablesResponse) ProtoMessage() {}

func (x *WorkflowAddTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowAddTablesResponse.ProtoReflect.Descriptor instead.
func (*WorkflowAddTablesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{147}
}

type MigrateCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The necessary info gets passed on to each primary tablet involved
	// in the workflow via the CreateVReplicationWorkflow tabletmanager RPC.
	Workflow                  string                                      `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	SourceKeyspace            string                                      `protobuf:"bytes,2,opt,name=source_keyspace,json=sourceKeyspace,proto3" json:"source_keyspace,omitempty"`
	TargetKeyspace            string                                      `protobuf:"bytes,3,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	MountName                 string                                      `protobuf:"bytes,4,opt,name=mount_name,json=mountName,proto3" json:"mount_name,omitempty"`
	Cells                     []string                                    `protobuf:"bytes,5,rep,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []topodata.TabletType                       `protobuf:"varint,6,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,7,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	AllTables                 bool                                        `protobuf:"varint,8,opt,name=all_tables,json=allTables,proto3" json:"all_tables,omitempty"`
	IncludeTables             []string                                    `protobuf:"bytes,9,rep,name=include_tables,json=includeTables,proto3" json:"include_tables,omitempty"`
	ExcludeTables             []string                                    `protobuf:"bytes,10,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	// SourceTimeZone is the time zone in which datetimes on the source were stored, provided as an option in MoveTables
	SourceTimeZone string `protobuf:"bytes,11,opt,name=source_time_zone,json=sourceTimeZone,proto3" json:"source_time_zone,omitempty"`
	// OnDdl specifies the action to be taken when a DDL is encountered.
	OnDdl string `protobuf:"bytes,12,opt,name=on_ddl,json=onDdl,proto3" json:"on_ddl,omitempty"`
	// StopAfterCopy specifies if vreplication should be stopped after copying.
	StopAfterCopy bool `protobuf:"varint,13,opt,name=stop_after_copy,json=stopAfterCopy,proto3" json:"stop_after_copy,omitempty"`
	// DropForeignKeys specifies if foreign key constraints should be elided on the target.
	DropForeignKeys bool `protobuf:"varint,14,opt,name=drop_foreign_keys,json=dropForeignKeys,proto3" json:"drop_foreign_keys,omitempty"`
	// DeferSecondaryKeys specifies if secondary keys should be created in one shot after table copy finishes.
	DeferSecondaryKeys bool `protobuf:"varint,15,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	// Start the workflow after creating it.
	AutoStart bool `protobuf:"varint,16,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	// NoRoutingRules is set to true if routing rules should not be created on the target when the workflow is created.
	NoRoutingRules bool `protobuf:"varint,17,opt,name=no_routing_rules,json=noRoutingRules,proto3" json:"no_routing_rules,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MigrateCreateRequest) Reset() {
	*x = MigrateCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCreateRequest) ProtoMessage() {}

func (x *MigrateCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCreateRequest.ProtoReflect.Descriptor instead.
func (*MigrateCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{148}
}

func (x *MigrateCreateRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MigrateCreateRequest) GetSourceKeyspace() string {
	if x != nil {
		return x.SourceKeyspace
	}
	return ""
}

func (x *MigrateCreateRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *MigrateCreateRequest) GetMountName() string {
	if x != nil {
		return x.MountName
	}
	return ""
}

func (x *MigrateCreateRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *MigrateCreateRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *MigrateCreateRequest) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *MigrateCreateRequest) GetAllTables() bool {
	if x != nil {
		return x.AllTables
	}
	return false
}

func (x *MigrateCreateRequest) GetIncludeTables() []string {
	if x != nil {
		return x.IncludeTables
	}
	return nil
}

func (x *MigrateCreateRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *MigrateCreateRequest) GetSourceTimeZone() string {
	if x != nil {
		return x.SourceTimeZone
	}
	return ""
}

func (x *MigrateCreateRequest) GetOnDdl() string {
	if x != nil {
		return x.OnDdl
	}
	return ""
}

func (x *MigrateCreateRequest) GetStopAfterCopy() bool {
	if x != nil {
		return x.StopAfterCopy
	}
	return false
}

func (x *MigrateCreateRequest) GetDropForeignKeys() bool {
	if x != nil {
		return x.DropForeignKeys
	}
	return false
}

func (x *MigrateCreateRequest) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *MigrateCreateRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *MigrateCreateRequest) GetNoRoutingRules() bool {
	if x != nil {
		return x.NoRoutingRules
	}
	return false
}

type MigrateCompleteRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Workflow         string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace   string                 `protobuf:"bytes,3,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	KeepData         bool                   `protobuf:"varint,4,opt,name=keep_data,json=keepData,proto3" json:"keep_data,omitempty"`
	KeepRoutingRules bool                   `protobuf:"varint,5,opt,name=keep_routing_rules,json=keepRoutingRules,proto3" json:"keep_routing_rules,omitempty"`
	RenameTables     bool                   `protobuf:"varint,6,opt,name=rename_tables,json=renameTables,proto3" json:"rename_tables,omitempty"`
	DryRun           bool                   `protobuf:"varint,7,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MigrateCompleteRequest) Reset() {
	*x = MigrateCompleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCompleteRequest) ProtoMessage() {}

func (x *MigrateCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCompleteRequest.ProtoReflect.Descriptor instead.
func (*MigrateCompleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{149}
}

func (x *MigrateCompleteRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MigrateCompleteRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *MigrateCompleteRequest) GetKeepData() bool {
	if x != nil {
		return x.KeepData
	}
	return false
}

func (x *MigrateCompleteRequest) GetKeepRoutingRules() bool {
	if x != nil {
		return x.KeepRoutingRules
	}
	return false
}

func (x *MigrateCompleteRequest) GetRenameTables() bool {
	if x != nil {
		return x.RenameTables
	}
	return false
}

func (x *MigrateCompleteRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type MigrateCompleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	DryRunResults []string               `protobuf:"bytes,2,rep,name=dry_run_results,json=dryRunResults,proto3" json:"dry_run_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MigrateCompleteResponse) Reset() {
	*x = MigrateCompleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCompleteResponse) ProtoMessage() {}

func (x *MigrateCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCompleteResponse.ProtoReflect.Descriptor instead.
func (*MigrateCompleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{150}
}

func (x *MigrateCompleteResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MigrateCompleteResponse) GetDryRunResults() []string {
	if x != nil {
		return x.DryRunResults
	}
	return nil
}

type MountRegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopoType      string                 `protobuf:"bytes,1,opt,name=topo_type,json=topoType,proto3" json:"topo_type,omitempty"`
	TopoServer    string                 `protobuf:"bytes,2,opt,name=topo_server,json=topoServer,proto3" json:"topo_server,omitempty"`
	TopoRoot      string                 `protobuf:"bytes,3,opt,name=topo_root,json=topoRoot,proto3" json:"topo_root,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountRegisterRequest) Reset() {
	*x = MountRegisterRequest{}
	mi := &file_vtctldata_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRegisterRequest) ProtoMessage() {}

func (x *MountRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRegisterRequest.ProtoReflect.Descriptor instead.
func (*MountRegisterRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{151}
}

func (x *MountRegisterRequest) GetTopoType() string {
	if x != nil {
		return x.TopoType
	}
	return ""
}

func (x *MountRegisterRequest) GetTopoServer() string {
	if x != nil {
		return x.TopoServer
	}
	return ""
}

func (x *MountRegisterRequest) GetTopoRoot() string {
	if x != nil {
		return x.TopoRoot
	}
	return ""
}

func (x *MountRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MountRegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountRegisterResponse) Reset() {
	*x = MountRegisterResponse{}
	mi := &file_vtctldata_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRegisterResponse) ProtoMessage() {}

func (x *MountRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRegisterResponse.ProtoReflect.Descriptor instead.
func (*MountRegisterResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{152}
}

type MountUnregisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountUnregisterRequest) Reset() {
	*x = MountUnregisterRequest{}
	mi := &file_vtctldata_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountUnregisterRequest) ProtoMessage() {}

func (x *MountUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountUnregisterRequest.ProtoReflect.Descriptor instead.
func (*MountUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{153}
}

func (x *MountUnregisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MountUnregisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountUnregisterResponse) Reset() {
	*x = MountUnregisterResponse{}
	mi := &file_vtctldata_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountUnregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountUnregisterResponse) ProtoMessage() {}

func (x *MountUnregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountUnregisterResponse.ProtoReflect.Descriptor instead.
func (*MountUnregisterResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{154}
}

type MountShowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountShowRequest) Reset() {
	*x = MountShowRequest{}
	mi := &file_vtctldata_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountShowRequest) ProtoMessage() {}

func (x *MountShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountShowRequest.ProtoReflect.Descriptor instead.
func (*MountShowRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{155}
}

func (x *MountShowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MountShowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopoType      string                 `protobuf:"bytes,1,opt,name=topo_type,json=topoType,proto3" json:"topo_type,omitempty"`
	TopoServer    string                 `protobuf:"bytes,2,opt,name=topo_server,json=topoServer,proto3" json:"topo_server,omitempty"`
	TopoRoot      string                 `protobuf:"bytes,3,opt,name=topo_root,json=topoRoot,proto3" json:"topo_root,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountShowResponse) Reset() {
	*x = MountShowResponse{}
	mi := &file_vtctldata_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountShowResponse) ProtoMessage() {}

func (x *MountShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountShowResponse.ProtoReflect.Descriptor instead.
func (*MountShowResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{156}
}

func (x *MountShowResponse) GetTopoType() string {
	if x != nil {
		return x.TopoType
	}
	return ""
}

func (x *MountShowResponse) GetTopoServer() string {
	if x != nil {
		return x.TopoServer
	}
	return ""
}

func (x *MountShowResponse) GetTopoRoot() string {
	if x != nil {
		return x.TopoRoot
	}
	return ""
}

func (x *MountShowResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MountListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountListRequest) Reset() {
	*x = MountListRequest{}
	mi := &file_vtctldata_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountListRequest) ProtoMessage() {}

func (x *MountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountListRequest.ProtoReflect.Descriptor instead.
func (*MountListRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{157}
}

type MountListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountListResponse) Reset() {
	*x = MountListResponse{}
	mi := &file_vtctldata_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountListResponse) ProtoMessage() {}

func (x *MountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountListResponse.ProtoReflect.Descriptor instead.
func (*MountListResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{158}
}

func (x *MountListResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type MoveTablesCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The necessary info gets passed on to each primary tablet involved
	// in the workflow via the CreateVReplicationWorkflow tabletmanager RPC.
	Workflow                  string                                      `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	SourceKeyspace            string                                      `protobuf:"bytes,2,opt,name=source_keyspace,json=sourceKeyspace,proto3" json:"source_keyspace,omitempty"`
	TargetKeyspace            string                                      `protobuf:"bytes,3,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	Cells                     []string                                    `protobuf:"bytes,4,rep,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []topodata.TabletType                       `protobuf:"varint,5,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,6,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	SourceShards              []string                                    `protobuf:"bytes,7,rep,name=source_shards,json=sourceShards,proto3" json:"source_shards,omitempty"`
	AllTables                 bool                                        `protobuf:"varint,8,opt,name=all_tables,json=allTables,proto3" json:"all_tables,omitempty"`
	IncludeTables             []string                                    `protobuf:"bytes,9,rep,name=include_tables,json=includeTables,proto3" json:"include_tables,omitempty"`
	ExcludeTables             []string                                    `protobuf:"bytes,10,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	// The name of the external cluster mounted in topo server.
	ExternalClusterName string `protobuf:"bytes,11,opt,name=external_cluster_name,json=externalClusterName,proto3" json:"external_cluster_name,omitempty"`
	// SourceTimeZone is the time zone in which datetimes on the source were stored, provided as an option in MoveTables
	SourceTimeZone string `protobuf:"bytes,12,opt,name=source_time_zone,json=sourceTimeZone,proto3" json:"source_time_zone,omitempty"`
	// OnDdl specifies the action to be taken when a DDL is encountered.
	OnDdl string `protobuf:"bytes,13,opt,name=on_ddl,json=onDdl,proto3" json:"on_ddl,omitempty"`
	// StopAfterCopy specifies if vreplication should be stopped after copying.
	StopAfterCopy bool `protobuf:"varint,14,opt,name=stop_after_copy,json=stopAfterCopy,proto3" json:"stop_after_copy,omitempty"`
	// DropForeignKeys specifies if foreign key constraints should be elided on the target.
	DropForeignKeys bool `protobuf:"varint,15,opt,name=drop_foreign_keys,json=dropForeignKeys,proto3" json:"drop_foreign_keys,omitempty"`
	// DeferSecondaryKeys specifies if secondary keys should be created in one shot after table copy finishes.
	DeferSecondaryKeys bool `protobuf:"varint,16,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	// Start the workflow after creating it.
	AutoStart bool `protobuf:"varint,17,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	// NoRoutingRules is set to true if routing rules should not be created on the target when the workflow is created.
	NoRoutingRules bool `protobuf:"varint,18,opt,name=no_routing_rules,json=noRoutingRules,proto3" json:"no_routing_rules,omitempty"`
	// Run a single copy phase for the entire database.
	AtomicCopy      bool             `protobuf:"varint,19,opt,name=atomic_copy,json=atomicCopy,proto3" json:"atomic_copy,omitempty"`
	WorkflowOptions *WorkflowOptions `protobuf:"bytes,20,opt,name=workflow_options,json=workflowOptions,proto3" json:"workflow_options,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MoveTablesCreateRequest) Reset() {
	*x = MoveTablesCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCreateRequest) ProtoMessage() {}

func (x *MoveTablesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCreateRequest.ProtoReflect.Descriptor instead.
func (*MoveTablesCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{159}
}

func (x *MoveTablesCreateRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetSourceKeyspace() string {
	if x != nil {
		return x.SourceKeyspace
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *MoveTablesCreateRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *MoveTablesCreateRequest) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *MoveTablesCreateRequest) GetSourceShards() []string {
	if x != nil {
		return x.SourceShards
	}
	return nil
}

func (x *MoveTablesCreateRequest) GetAllTables() bool {
	if x != nil {
		return x.AllTables
	}
	return false
}

func (x *MoveTablesCreateRequest) GetIncludeTables() []string {
	if x != nil {
		return x.IncludeTables
	}
	return nil
}

func (x *MoveTablesCreateRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *MoveTablesCreateRequest) GetExternalClusterName() string {
	if x != nil {
		return x.ExternalClusterName
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetSourceTimeZone() string {
	if x != nil {
		return x.SourceTimeZone
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetOnDdl() string {
	if x != nil {
		return x.OnDdl
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetStopAfterCopy() bool {
	if x != nil {
		return x.StopAfterCopy
	}
	return false
}

func (x *MoveTablesCreateRequest) GetDropForeignKeys() bool {
	if x != nil {
		return x.DropForeignKeys
	}
	return false
}

func (x *MoveTablesCreateRequest) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *MoveTablesCreateRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *MoveTablesCreateRequest) GetNoRoutingRules() bool {
	if x != nil {
		return x.NoRoutingRules
	}
	return false
}

func (x *MoveTablesCreateRequest) GetAtomicCopy() bool {
	if x != nil {
		return x.AtomicCopy
	}
	return false
}

func (x *MoveTablesCreateRequest) GetWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorkflowOptions
	}
	return nil
}

type MoveTablesCreateResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Summary       string                                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Details       []*MoveTablesCreateResponse_TabletInfo `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTablesCreateResponse) Reset() {
	*x = MoveTablesCreateResponse{}
	mi := &file_vtctldata_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCreateResponse) ProtoMessage() {}

func (x *MoveTablesCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCreateResponse.ProtoReflect.Descriptor instead.
func (*MoveTablesCreateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{160}
}

func (x *MoveTablesCreateResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MoveTablesCreateResponse) GetDetails() []*MoveTablesCreateResponse_TabletInfo {
	if x != nil {
		return x.Details
	}
	return nil
}

type MoveTablesCompleteRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Workflow         string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace   string                 `protobuf:"bytes,3,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	KeepData         bool                   `protobuf:"varint,4,opt,name=keep_data,json=keepData,proto3" json:"keep_data,omitempty"`
	KeepRoutingRules bool                   `protobuf:"varint,5,opt,name=keep_routing_rules,json=keepRoutingRules,proto3" json:"keep_routing_rules,omitempty"`
	RenameTables     bool                   `protobuf:"varint,6,opt,name=rename_tables,json=renameTables,proto3" json:"rename_tables,omitempty"`
	DryRun           bool                   `protobuf:"varint,7,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Shards           []string               `protobuf:"bytes,8,rep,name=shards,proto3" json:"shards,omitempty"`
	// Set to true if the you know that the source keyspace is no
	// longer available but still want to complete the workflow.
	IgnoreSourceKeyspace bool `protobuf:"varint,9,opt,name=ignore_source_keyspace,json=ignoreSourceKeyspace,proto3" json:"ignore_source_keyspace,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MoveTablesCompleteRequest) Reset() {
	*x = MoveTablesCompleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCompleteRequest) ProtoMessage() {}

func (x *MoveTablesCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCompleteRequest.ProtoReflect.Descriptor instead.
func (*MoveTablesCompleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{161}
}

func (x *MoveTablesCompleteRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MoveTablesCompleteRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *MoveTablesCompleteRequest) GetKeepData() bool {
	if x != nil {
		return x.KeepData
	}
	return false
}

func (x *MoveTablesCompleteRequest) GetKeepRoutingRules() bool {
	if x != nil {
		return x.KeepRoutingRules
	}
	return false
}

func (x *MoveTablesCompleteRequest) GetRenameTables() bool {
	if x != nil {
		return x.RenameTables
	}
	return false
}

func (x *MoveTablesCompleteRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *MoveTablesCompleteRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *MoveTablesCompleteRequest) GetIgnoreSourceKeyspace() bool {
	if x != nil {
		return x.IgnoreSourceKeyspace
	}
	return false
}

type MoveTablesCompleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	DryRunResults []string               `protobuf:"bytes,2,rep,name=dry_run_results,json=dryRunResults,proto3" json:"dry_run_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTablesCompleteResponse) Reset() {
	*x = MoveTablesCompleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCompleteResponse) ProtoMessage() {}

func (x *MoveTablesCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCompleteResponse.ProtoReflect.Descriptor instead.
func (*MoveTablesCompleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{162}
}

func (x *MoveTablesCompleteResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MoveTablesCompleteResponse) GetDryRunResults() []string {
	if x != nil {
		return x.DryRunResults
	}
	return nil
}

type PingTabletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingTabletRequest) Reset() {
	*x = PingTabletRequest{}
	mi := &file_vtctldata_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTabletRequest) ProtoMessage() {}

func (x *PingTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTabletRequest.ProtoReflect.Descriptor instead.
func (*PingTabletRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{163}
}

func (x *PingTabletRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type PingTabletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingTabletResponse) Reset() {
	*x = PingTabletResponse{}
	mi := &file_vtctldata_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTabletResponse) ProtoMessage() {}

func (x *PingTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTabletResponse.ProtoReflect.Descriptor instead.
func (*PingTabletResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{164}
}

type PlannedReparentShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace to perform the Planned Reparent in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard to perform teh Planned Reparent in.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// NewPrimary is the alias of the tablet to promote to shard primary. If not
	// specified, the vtctld will select the most up-to-date candidate to promote.
	//
	// It is an error to set NewPrimary and AvoidPrimary to the same alias.
	NewPrimary *topodata.TabletAlias `protobuf:"bytes,3,opt,name=new_primary,json=newPrimary,proto3" json:"new_primary,omitempty"`
	// AvoidPrimary is the alias of the tablet to demote. In other words,
	// specifying an AvoidPrimary alias tells the vtctld to promote any replica
	// other than this one. A shard whose current primary is not this one is then
	// a no-op.
	//
	// It is an error to set NewPrimary and AvoidPrimary to the same alias.
	AvoidPrimary *topodata.TabletAlias `protobuf:"bytes,4,opt,name=avoid_primary,json=avoidPrimary,proto3" json:"avoid_primary,omitempty"`
	// WaitReplicasTimeout is the duration of time to wait for replicas to catch
	// up in replication both before and after the reparent. The timeout is not
	// cumulative across both wait periods, meaning that the replicas have
	// WaitReplicasTimeout time to catch up before the reparent, and an additional
	// WaitReplicasTimeout time to catch up after the reparent.
	WaitReplicasTimeout *vttime.Duration `protobuf:"bytes,5,opt,name=wait_replicas_timeout,json=waitReplicasTimeout,proto3" json:"wait_replicas_timeout,omitempty"`
	// TolerableReplicationLag is the amount of replication lag that is considered
	// acceptable for a tablet to be eligible for promotion when Vitess makes the choice of a new primary.
	// A value of 0 indicates that Vitess shouldn't consider the replication lag at all.
	TolerableReplicationLag *vttime.Duration `protobuf:"bytes,6,opt,name=tolerable_replication_lag,json=tolerableReplicationLag,proto3" json:"tolerable_replication_lag,omitempty"`
	// AllowCrossCellPromotion allows cross cell promotion,
	AllowCrossCellPromotion bool `protobuf:"varint,7,opt,name=allow_cross_cell_promotion,json=allowCrossCellPromotion,proto3" json:"allow_cross_cell_promotion,omitempty"`
	// ExpectedPrimary is the optional alias we expect to be the current primary in order for
	// the reparent operation to succeed.
	ExpectedPrimary *topodata.TabletAlias `protobuf:"bytes,8,opt,name=expected_primary,json=expectedPrimary,proto3" json:"expected_primary,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlannedReparentShardRequest) Reset() {
	*x = PlannedReparentShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlannedReparentShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedReparentShardRequest) ProtoMessage() {}

func (x *PlannedReparentShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedReparentShardRequest.ProtoReflect.Descriptor instead.
func (*PlannedReparentShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{165}
}

func (x *PlannedReparentShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *PlannedReparentShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *PlannedReparentShardRequest) GetNewPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.NewPrimary
	}
	return nil
}

func (x *PlannedReparentShardRequest) GetAvoidPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.AvoidPrimary
	}
	return nil
}

func (x *PlannedReparentShardRequest) GetWaitReplicasTimeout() *vttime.Duration {
	if x != nil {
		return x.WaitReplicasTimeout
	}
	return nil
}

func (x *PlannedReparentShardRequest) GetTolerableReplicationLag() *vttime.Duration {
	if x != nil {
		return x.TolerableReplicationLag
	}
	return nil
}

func (x *PlannedReparentShardRequest) GetAllowCrossCellPromotion() bool {
	if x != nil {
		return x.AllowCrossCellPromotion
	}
	return false
}

func (x *PlannedReparentShardRequest) GetExpectedPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.ExpectedPrimary
	}
	return nil
}

type PlannedReparentShardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace the Planned Reparent took place in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard the Planned Reparent took place in.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// PromotedPrimary is the alias of the tablet that was promoted to shard
	// primary. If NewPrimary was set in the request, then this will be the same
	// alias. Otherwise, it will be the alias of the tablet found to be most
	// up-to-date.
	PromotedPrimary *topodata.TabletAlias `protobuf:"bytes,3,opt,name=promoted_primary,json=promotedPrimary,proto3" json:"promoted_primary,omitempty"`
	Events          []*logutil.Event      `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlannedReparentShardResponse) Reset() {
	*x = PlannedReparentShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlannedReparentShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedReparentShardResponse) ProtoMessage() {}

func (x *PlannedReparentShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedReparentShardResponse.ProtoReflect.Descriptor instead.
func (*PlannedReparentShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{166}
}

func (x *PlannedReparentShardResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *PlannedReparentShardResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *PlannedReparentShardResponse) GetPromotedPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.PromotedPrimary
	}
	return nil
}

func (x *PlannedReparentShardResponse) GetEvents() []*logutil.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type RebuildKeyspaceGraphRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Cells    []string               `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	// AllowPartial, when set, allows a SNAPSHOT keyspace to serve with an
	// incomplete set of shards. It is ignored for all other keyspace types.
	AllowPartial  bool `protobuf:"varint,3,opt,name=allow_partial,json=allowPartial,proto3" json:"allow_partial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildKeyspaceGraphRequest) Reset() {
	*x = RebuildKeyspaceGraphRequest{}
	mi := &file_vtctldata_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildKeyspaceGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildKeyspaceGraphRequest) ProtoMessage() {}

func (x *RebuildKeyspaceGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildKeyspaceGraphRequest.ProtoReflect.Descriptor instead.
func (*RebuildKeyspaceGraphRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{167}
}

func (x *RebuildKeyspaceGraphRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RebuildKeyspaceGraphRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *RebuildKeyspaceGraphRequest) GetAllowPartial() bool {
	if x != nil {
		return x.AllowPartial
	}
	return false
}

type RebuildKeyspaceGraphResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildKeyspaceGraphResponse) Reset() {
	*x = RebuildKeyspaceGraphResponse{}
	mi := &file_vtctldata_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildKeyspaceGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildKeyspaceGraphResponse) ProtoMessage() {}

func (x *RebuildKeyspaceGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildKeyspaceGraphResponse.ProtoReflect.Descriptor instead.
func (*RebuildKeyspaceGraphResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{168}
}

type RebuildVSchemaGraphRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cells specifies the cells to rebuild the SrvVSchema objects for. If empty,
	// RebuildVSchemaGraph rebuilds the SrvVSchema for every cell in the topo.
	Cells         []string `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildVSchemaGraphRequest) Reset() {
	*x = RebuildVSchemaGraphRequest{}
	mi := &file_vtctldata_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildVSchemaGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildVSchemaGraphRequest) ProtoMessage() {}

func (x *RebuildVSchemaGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildVSchemaGraphRequest.ProtoReflect.Descriptor instead.
func (*RebuildVSchemaGraphRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{169}
}

func (x *RebuildVSchemaGraphRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type RebuildVSchemaGraphResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildVSchemaGraphResponse) Reset() {
	*x = RebuildVSchemaGraphResponse{}
	mi := &file_vtctldata_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildVSchemaGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildVSchemaGraphResponse) ProtoMessage() {}

func (x *RebuildVSchemaGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildVSchemaGraphResponse.ProtoReflect.Descriptor instead.
func (*RebuildVSchemaGraphResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{170}
}

type RefreshStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshStateRequest) Reset() {
	*x = RefreshStateRequest{}
	mi := &file_vtctldata_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateRequest) ProtoMessage() {}

func (x *RefreshStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateRequest.ProtoReflect.Descriptor instead.
func (*RefreshStateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{171}
}

func (x *RefreshStateRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type RefreshStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshStateResponse) Reset() {
	*x = RefreshStateResponse{}
	mi := &file_vtctldata_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateResponse) ProtoMessage() {}

func (x *RefreshStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateResponse.ProtoReflect.Descriptor instead.
func (*RefreshStateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{172}
}

type RefreshStateByShardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Cells         []string               `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshStateByShardRequest) Reset() {
	*x = RefreshStateByShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshStateByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateByShardRequest) ProtoMessage() {}

func (x *RefreshStateByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateByShardRequest.ProtoReflect.Descriptor instead.
func (*RefreshStateByShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{173}
}

func (x *RefreshStateByShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RefreshStateByShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *RefreshStateByShardRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type RefreshStateByShardResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsPartialRefresh bool                   `protobuf:"varint,1,opt,name=is_partial_refresh,json=isPartialRefresh,proto3" json:"is_partial_refresh,omitempty"`
	// This explains why we had a partial refresh (if we did)
	PartialRefreshDetails string `protobuf:"bytes,2,opt,name=partial_refresh_details,json=partialRefreshDetails,proto3" json:"partial_refresh_details,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RefreshStateByShardResponse) Reset() {
	*x = RefreshStateByShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshStateByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateByShardResponse) ProtoMessage() {}

func (x *RefreshStateByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateByShardResponse.ProtoReflect.Descriptor instead.
func (*RefreshStateByShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{174}
}

func (x *RefreshStateByShardResponse) GetIsPartialRefresh() bool {
	if x != nil {
		return x.IsPartialRefresh
	}
	return false
}

func (x *RefreshStateByShardResponse) GetPartialRefreshDetails() string {
	if x != nil {
		return x.PartialRefreshDetails
	}
	return ""
}

type ReloadSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaRequest) Reset() {
	*x = ReloadSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaRequest) ProtoMessage() {}

func (x *ReloadSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{175}
}

func (x *ReloadSchemaRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type ReloadSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaResponse) Reset() {
	*x = ReloadSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaResponse) ProtoMessage() {}

func (x *ReloadSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{176}
}

type ReloadSchemaKeyspaceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Keyspace       string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	WaitPosition   string                 `protobuf:"bytes,2,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
	IncludePrimary bool                   `protobuf:"varint,3,opt,name=include_primary,json=includePrimary,proto3" json:"include_primary,omitempty"`
	// Concurrency is the global concurrency across all shards in the keyspace
	// (so, at most this many tablets will be reloaded across the keyspace at any
	// given point).
	Concurrency   int32 `protobuf:"varint,4,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaKeyspaceRequest) Reset() {
	*x = ReloadSchemaKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaKeyspaceRequest) ProtoMessage() {}

func (x *ReloadSchemaKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemaKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{177}
}

func (x *ReloadSchemaKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ReloadSchemaKeyspaceRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

func (x *ReloadSchemaKeyspaceRequest) GetIncludePrimary() bool {
	if x != nil {
		return x.IncludePrimary
	}
	return false
}

func (x *ReloadSchemaKeyspaceRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type ReloadSchemaKeyspaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*logutil.Event       `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaKeyspaceResponse) Reset() {
	*x = ReloadSchemaKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaKeyspaceResponse) ProtoMessage() {}

func (x *ReloadSchemaKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemaKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{178}
}

func (x *ReloadSchemaKeyspaceResponse) GetEvents() []*logutil.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ReloadSchemaShardRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Keyspace       string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard          string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	WaitPosition   string                 `protobuf:"bytes,3,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
	IncludePrimary bool                   `protobuf:"varint,4,opt,name=include_primary,json=includePrimary,proto3" json:"include_primary,omitempty"`
	// Concurrency is the maximum number of tablets to reload at one time.
	Concurrency   int32 `protobuf:"varint,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaShardRequest) Reset() {
	*x = ReloadSchemaShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaShardRequest) ProtoMessage() {}

func (x *ReloadSchemaShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaShardRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemaShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{179}
}

func (x *ReloadSchemaShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetIncludePrimary() bool {
	if x != nil {
		return x.IncludePrimary
	}
	return false
}

func (x *ReloadSchemaShardRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type ReloadSchemaShardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*logutil.Event       `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloadSchemaShardResponse) Reset() {
	*x = ReloadSchemaShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadSchemaShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaShardResponse) ProtoMessage() {}

func (x *ReloadSchemaShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaShardResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemaShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{180}
}

func (x *ReloadSchemaShardResponse) GetEvents() []*logutil.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type RemoveBackupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveBackupRequest) Reset() {
	*x = RemoveBackupRequest{}
	mi := &file_vtctldata_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBackupRequest) ProtoMessage() {}

func (x *RemoveBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBackupRequest.ProtoReflect.Descriptor instead.
func (*RemoveBackupRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{181}
}

func (x *RemoveBackupRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RemoveBackupRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *RemoveBackupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveBackupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveBackupResponse) Reset() {
	*x = RemoveBackupResponse{}
	mi := &file_vtctldata_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBackupResponse) ProtoMessage() {}

func (x *RemoveBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBackupResponse.ProtoReflect.Descriptor instead.
func (*RemoveBackupResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{182}
}

type RemoveKeyspaceCellRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Cell     string                 `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
	// Force proceeds even if the cell's topology server cannot be reached. This
	// should only be set if a cell has been shut down entirely, and the global
	// topology data just needs to be updated.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	// Recursive also deletes all tablets in that cell belonging to the specified
	// keyspace.
	Recursive     bool `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveKeyspaceCellRequest) Reset() {
	*x = RemoveKeyspaceCellRequest{}
	mi := &file_vtctldata_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveKeyspaceCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyspaceCellRequest) ProtoMessage() {}

func (x *RemoveKeyspaceCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyspaceCellRequest.ProtoReflect.Descriptor instead.
func (*RemoveKeyspaceCellRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{183}
}

func (x *RemoveKeyspaceCellRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RemoveKeyspaceCellRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *RemoveKeyspaceCellRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveKeyspaceCellRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type RemoveKeyspaceCellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveKeyspaceCellResponse) Reset() {
	*x = RemoveKeyspaceCellResponse{}
	mi := &file_vtctldata_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveKeyspaceCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyspaceCellResponse) ProtoMessage() {}

func (x *RemoveKeyspaceCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyspaceCellResponse.ProtoReflect.Descriptor instead.
func (*RemoveKeyspaceCellResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{184}
}

type RemoveShardCellRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Keyspace  string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ShardName string                 `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	Cell      string                 `protobuf:"bytes,3,opt,name=cell,proto3" json:"cell,omitempty"`
	// Force proceeds even if the cell's topology server cannot be reached. This
	// should only be set if a cell has been shut down entirely, and the global
	// topology data just needs to be updated.
	Force bool `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	// Recursive also deletes all tablets in that cell belonging to the specified
	// keyspace and shard.
	Recursive     bool `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveShardCellRequest) Reset() {
	*x = RemoveShardCellRequest{}
	mi := &file_vtctldata_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveShardCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveShardCellRequest) ProtoMessage() {}

func (x *RemoveShardCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveShardCellRequest.ProtoReflect.Descriptor instead.
func (*RemoveShardCellRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{185}
}

func (x *RemoveShardCellRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RemoveShardCellRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *RemoveShardCellRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *RemoveShardCellRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveShardCellRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type RemoveShardCellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveShardCellResponse) Reset() {
	*x = RemoveShardCellResponse{}
	mi := &file_vtctldata_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveShardCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveShardCellResponse) ProtoMessage() {}

func (x *RemoveShardCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveShardCellResponse.ProtoReflect.Descriptor instead.
func (*RemoveShardCellResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{186}
}

type ReparentTabletRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tablet is the alias of the tablet that should be reparented under the
	// current shard primary.
	Tablet        *topodata.TabletAlias `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReparentTabletRequest) Reset() {
	*x = ReparentTabletRequest{}
	mi := &file_vtctldata_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReparentTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReparentTabletRequest) ProtoMessage() {}

func (x *ReparentTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReparentTabletRequest.ProtoReflect.Descriptor instead.
func (*ReparentTabletRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{187}
}

func (x *ReparentTabletRequest) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

type ReparentTabletResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the name of the keyspace the tablet was reparented in.
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Shard is the name of the shard the tablet was reparented in.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// Primary is the alias of the tablet that the tablet was reparented under.
	Primary       *topodata.TabletAlias `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReparentTabletResponse) Reset() {
	*x = ReparentTabletResponse{}
	mi := &file_vtctldata_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReparentTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReparentTabletResponse) ProtoMessage() {}

func (x *ReparentTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReparentTabletResponse.ProtoReflect.Descriptor instead.
func (*ReparentTabletResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{188}
}

func (x *ReparentTabletResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ReparentTabletResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ReparentTabletResponse) GetPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.Primary
	}
	return nil
}

type ReshardCreateRequest struct {
	state                     protoimpl.MessageState                      `protogen:"open.v1"`
	Workflow                  string                                      `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Keyspace                  string                                      `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	SourceShards              []string                                    `protobuf:"bytes,3,rep,name=source_shards,json=sourceShards,proto3" json:"source_shards,omitempty"`
	TargetShards              []string                                    `protobuf:"bytes,4,rep,name=target_shards,json=targetShards,proto3" json:"target_shards,omitempty"`
	Cells                     []string                                    `protobuf:"bytes,5,rep,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []topodata.TabletType                       `protobuf:"varint,6,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,7,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	// SkipSchemaCopy specifies if the schema should be copied from the source shard, set false if
	// schema is already created on the target shard before Reshard is invoked.
	SkipSchemaCopy bool `protobuf:"varint,8,opt,name=skip_schema_copy,json=skipSchemaCopy,proto3" json:"skip_schema_copy,omitempty"`
	// OnDdl specifies the action to be taken when a DDL is encountered.
	OnDdl string `protobuf:"bytes,9,opt,name=on_ddl,json=onDdl,proto3" json:"on_ddl,omitempty"`
	// StopAfterCopy specifies if vreplication should be stopped after copying.
	StopAfterCopy bool `protobuf:"varint,10,opt,name=stop_after_copy,json=stopAfterCopy,proto3" json:"stop_after_copy,omitempty"`
	// DeferSecondaryKeys specifies if secondary keys should be created in one shot after table copy finishes.
	DeferSecondaryKeys bool `protobuf:"varint,11,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	// Start the workflow after creating it.
	AutoStart       bool             `protobuf:"varint,12,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	WorkflowOptions *WorkflowOptions `protobuf:"bytes,13,opt,name=workflow_options,json=workflowOptions,proto3" json:"workflow_options,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReshardCreateRequest) Reset() {
	*x = ReshardCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReshardCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshardCreateRequest) ProtoMessage() {}

func (x *ReshardCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshardCreateRequest.ProtoReflect.Descriptor instead.
func (*ReshardCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{189}
}

func (x *ReshardCreateRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *ReshardCreateRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ReshardCreateRequest) GetSourceShards() []string {
	if x != nil {
		return x.SourceShards
	}
	return nil
}

func (x *ReshardCreateRequest) GetTargetShards() []string {
	if x != nil {
		return x.TargetShards
	}
	return nil
}

func (x *ReshardCreateRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *ReshardCreateRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *ReshardCreateRequest) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *ReshardCreateRequest) GetSkipSchemaCopy() bool {
	if x != nil {
		return x.SkipSchemaCopy
	}
	return false
}

func (x *ReshardCreateRequest) GetOnDdl() string {
	if x != nil {
		return x.OnDdl
	}
	return ""
}

func (x *ReshardCreateRequest) GetStopAfterCopy() bool {
	if x != nil {
		return x.StopAfterCopy
	}
	return false
}

func (x *ReshardCreateRequest) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *ReshardCreateRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *ReshardCreateRequest) GetWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorkflowOptions
	}
	return nil
}

type RestoreFromBackupRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// BackupTime, if set, will use the backup taken most closely at or before
	// this time. If nil, the latest backup will be restored on the tablet.
	BackupTime *vttime.Time `protobuf:"bytes,2,opt,name=backup_time,json=backupTime,proto3" json:"backup_time,omitempty"`
	// RestoreToPos indicates a position for a point-in-time recovery. The recovery
	// is expected to utilize one full backup, followed by zero or more incremental backups,
	// that reach the precise desired position
	RestoreToPos string `protobuf:"bytes,3,opt,name=restore_to_pos,json=restoreToPos,proto3" json:"restore_to_pos,omitempty"`
	// Dry run does not actually performs the restore, but validates the steps and availability of backups
	DryRun bool `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// RestoreToTimestamp, if given, requested an inremental restore up to (and excluding) the given timestamp.
	// RestoreToTimestamp and RestoreToPos are mutually exclusive.
	RestoreToTimestamp *vttime.Time `protobuf:"bytes,5,opt,name=restore_to_timestamp,json=restoreToTimestamp,proto3" json:"restore_to_timestamp,omitempty"`
	// AllowedBackupEngines, if present will filter out any backups taken with engines not included in the list
	AllowedBackupEngines []string `protobuf:"bytes,6,rep,name=allowed_backup_engines,json=allowedBackupEngines,proto3" json:"allowed_backup_engines,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RestoreFromBackupRequest) Reset() {
	*x = RestoreFromBackupRequest{}
	mi := &file_vtctldata_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreFromBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFromBackupRequest) ProtoMessage() {}

func (x *RestoreFromBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFromBackupRequest.ProtoReflect.Descriptor instead.
func (*RestoreFromBackupRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{190}
}

func (x *RestoreFromBackupRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *RestoreFromBackupRequest) GetBackupTime() *vttime.Time {
	if x != nil {
		return x.BackupTime
	}
	return nil
}

func (x *RestoreFromBackupRequest) GetRestoreToPos() string {
	if x != nil {
		return x.RestoreToPos
	}
	return ""
}

func (x *RestoreFromBackupRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *RestoreFromBackupRequest) GetRestoreToTimestamp() *vttime.Time {
	if x != nil {
		return x.RestoreToTimestamp
	}
	return nil
}

func (x *RestoreFromBackupRequest) GetAllowedBackupEngines() []string {
	if x != nil {
		return x.AllowedBackupEngines
	}
	return nil
}

type RestoreFromBackupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TabletAlias is the alias of the tablet doing the restore.
	TabletAlias   *topodata.TabletAlias `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Keyspace      string                `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Event         *logutil.Event        `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreFromBackupResponse) Reset() {
	*x = RestoreFromBackupResponse{}
	mi := &file_vtctldata_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreFromBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFromBackupResponse) ProtoMessage() {}

func (x *RestoreFromBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFromBackupResponse.ProtoReflect.Descriptor instead.
func (*RestoreFromBackupResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{191}
}

func (x *RestoreFromBackupResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *RestoreFromBackupResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RestoreFromBackupResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *RestoreFromBackupResponse) GetEvent() *logutil.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type RetrySchemaMigrationRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Uuid     string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *vtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrySchemaMigrationRequest) Reset() {
	*x = RetrySchemaMigrationRequest{}
	mi := &file_vtctldata_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrySchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrySchemaMigrationRequest) ProtoMessage() {}

func (x *RetrySchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrySchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*RetrySchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{192}
}

func (x *RetrySchemaMigrationRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RetrySchemaMigrationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RetrySchemaMigrationRequest) GetCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type RetrySchemaMigrationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RowsAffectedByShard map[string]uint64      `protobuf:"bytes,1,rep,name=rows_affected_by_shard,json=rowsAffectedByShard,proto3" json:"rows_affected_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RetrySchemaMigrationResponse) Reset() {
	*x = RetrySchemaMigrationResponse{}
	mi := &file_vtctldata_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrySchemaMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrySchemaMigrationResponse) ProtoMessage() {}

func (x *RetrySchemaMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrySchemaMigrationResponse.ProtoReflect.Descriptor instead.
func (*RetrySchemaMigrationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{193}
}

func (x *RetrySchemaMigrationResponse) GetRowsAffectedByShard() map[string]uint64 {
	if x != nil {
		return x.RowsAffectedByShard
	}
	return nil
}

type RunHealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunHealthCheckRequest) Reset() {
	*x = RunHealthCheckRequest{}
	mi := &file_vtctldata_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckRequest) ProtoMessage() {}

func (x *RunHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*RunHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{194}
}

func (x *RunHealthCheckRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type RunHealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunHealthCheckResponse) Reset() {
	*x = RunHealthCheckResponse{}
	mi := &file_vtctldata_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckResponse) ProtoMessage() {}

func (x *RunHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*RunHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{195}
}

type SetKeyspaceDurabilityPolicyRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Keyspace         string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	DurabilityPolicy string                 `protobuf:"bytes,2,opt,name=durability_policy,json=durabilityPolicy,proto3" json:"durability_policy,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetKeyspaceDurabilityPolicyRequest) Reset() {
	*x = SetKeyspaceDurabilityPolicyRequest{}
	mi := &file_vtctldata_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyspaceDurabilityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyspaceDurabilityPolicyRequest) ProtoMessage() {}

func (x *SetKeyspaceDurabilityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyspaceDurabilityPolicyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyspaceDurabilityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{196}
}

func (x *SetKeyspaceDurabilityPolicyRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SetKeyspaceDurabilityPolicyRequest) GetDurabilityPolicy() string {
	if x != nil {
		return x.DurabilityPolicy
	}
	return ""
}

type SetKeyspaceDurabilityPolicyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the updated keyspace record.
	Keyspace      *topodata.Keyspace `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetKeyspaceDurabilityPolicyResponse) Reset() {
	*x = SetKeyspaceDurabilityPolicyResponse{}
	mi := &file_vtctldata_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyspaceDurabilityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyspaceDurabilityPolicyResponse) ProtoMessage() {}

func (x *SetKeyspaceDurabilityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyspaceDurabilityPolicyResponse.ProtoReflect.Descriptor instead.
func (*SetKeyspaceDurabilityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{197}
}

func (x *SetKeyspaceDurabilityPolicyResponse) GetKeyspace() *topodata.Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

type SetKeyspaceShardingInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Force         bool                   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetKeyspaceShardingInfoRequest) Reset() {
	*x = SetKeyspaceShardingInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyspaceShardingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyspaceShardingInfoRequest) ProtoMessage() {}

func (x *SetKeyspaceShardingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyspaceShardingInfoRequest.ProtoReflect.Descriptor instead.
func (*SetKeyspaceShardingInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{198}
}

func (x *SetKeyspaceShardingInfoRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SetKeyspaceShardingInfoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SetKeyspaceShardingInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keyspace is the updated keyspace record.
	Keyspace      *topodata.Keyspace `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetKeyspaceShardingInfoResponse) Reset() {
	*x = SetKeyspaceShardingInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyspaceShardingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyspaceShardingInfoResponse) ProtoMessage() {}

func (x *SetKeyspaceShardingInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyspaceShardingInfoResponse.ProtoReflect.Descriptor instead.
func (*SetKeyspaceShardingInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{199}
}

func (x *SetKeyspaceShardingInfoResponse) GetKeyspace() *topodata.Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

type SetShardIsPrimaryServingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	IsServing     bool                   `protobuf:"varint,3,opt,name=is_serving,json=isServing,proto3" json:"is_serving,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetShardIsPrimaryServingRequest) Reset() {
	*x = SetShardIsPrimaryServingRequest{}
	mi := &file_vtctldata_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetShardIsPrimaryServingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetShardIsPrimaryServingRequest) ProtoMessage() {}

func (x *SetShardIsPrimaryServingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetShardIsPrimaryServingRequest.ProtoReflect.Descriptor instead.
func (*SetShardIsPrimaryServingRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{200}
}

func (x *SetShardIsPrimaryServingRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SetShardIsPrimaryServingRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *SetShardIsPrimaryServingRequest) GetIsServing() bool {
	if x != nil {
		return x.IsServing
	}
	return false
}

type SetShardIsPrimaryServingResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard is the updated shard record.
	Shard         *topodata.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetShardIsPrimaryServingResponse) Reset() {
	*x = SetShardIsPrimaryServingResponse{}
	mi := &file_vtctldata_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetShardIsPrimaryServingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetShardIsPrimaryServingResponse) ProtoMessage() {}

func (x *SetShardIsPrimaryServingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetShardIsPrimaryServingResponse.ProtoReflect.Descriptor instead.
func (*SetShardIsPrimaryServingResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{201}
}

func (x *SetShardIsPrimaryServingResponse) GetShard() *topodata.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type SetShardTabletControlRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Keyspace   string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard      string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletType topodata.TabletType    `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	Cells      []string               `protobuf:"bytes,4,rep,name=cells,proto3" json:"cells,omitempty"`
	// DeniedTables updates the list of denied tables the shard will serve for
	// the given tablet type. This is useful to fix tables that are being blocked
	// after a MoveTables operation.
	//
	// NOTE: Setting this field will cause DisableQueryService to be ignored.
	DeniedTables []string `protobuf:"bytes,5,rep,name=denied_tables,json=deniedTables,proto3" json:"denied_tables,omitempty"`
	// DisableQueryService instructs whether to enable the query service on
	// tablets of the given type in the shard. This is useful to fix Reshard
	// operations gone awry.
	//
	// NOTE: this is ignored if DeniedTables is not empty.
	DisableQueryService bool `protobuf:"varint,6,opt,name=disable_query_service,json=disableQueryService,proto3" json:"disable_query_service,omitempty"`
	// Remove removes the ShardTabletControl record entirely. If set, this takes
	// precedence over DeniedTables and DisableQueryService fields, and is useful
	// to manually remove serving restrictions after a completed MoveTables
	// operation.
	Remove        bool `protobuf:"varint,7,opt,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetShardTabletControlRequest) Reset() {
	*x = SetShardTabletControlRequest{}
	mi := &file_vtctldata_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetShardTabletControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetShardTabletControlRequest) ProtoMessage() {}

func (x *SetShardTabletControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetShardTabletControlRequest.ProtoReflect.Descriptor instead.
func (*SetShardTabletControlRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{202}
}

func (x *SetShardTabletControlRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SetShardTabletControlRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *SetShardTabletControlRequest) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

func (x *SetShardTabletControlRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *SetShardTabletControlRequest) GetDeniedTables() []string {
	if x != nil {
		return x.DeniedTables
	}
	return nil
}

func (x *SetShardTabletControlRequest) GetDisableQueryService() bool {
	if x != nil {
		return x.DisableQueryService
	}
	return false
}

func (x *SetShardTabletControlRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

type SetShardTabletControlResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard is the updated shard record.
	Shard         *topodata.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetShardTabletControlResponse) Reset() {
	*x = SetShardTabletControlResponse{}
	mi := &file_vtctldata_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetShardTabletControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetShardTabletControlResponse) ProtoMessage() {}

func (x *SetShardTabletControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetShardTabletControlResponse.ProtoReflect.Descriptor instead.
func (*SetShardTabletControlResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{203}
}

func (x *SetShardTabletControlResponse) GetShard() *topodata.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type SetWritableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Writable      bool                   `protobuf:"varint,2,opt,name=writable,proto3" json:"writable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWritableRequest) Reset() {
	*x = SetWritableRequest{}
	mi := &file_vtctldata_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWritableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWritableRequest) ProtoMessage() {}

func (x *SetWritableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWritableRequest.ProtoReflect.Descriptor instead.
func (*SetWritableRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{204}
}

func (x *SetWritableRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *SetWritableRequest) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type SetWritableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWritableResponse) Reset() {
	*x = SetWritableResponse{}
	mi := &file_vtctldata_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWritableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWritableResponse) ProtoMessage() {}

func (x *SetWritableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWritableResponse.ProtoReflect.Descriptor instead.
func (*SetWritableResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{205}
}

type ShardReplicationAddRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,3,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationAddRequest) Reset() {
	*x = ShardReplicationAddRequest{}
	mi := &file_vtctldata_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationAddRequest) ProtoMessage() {}

func (x *ShardReplicationAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationAddRequest.ProtoReflect.Descriptor instead.
func (*ShardReplicationAddRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{206}
}

func (x *ShardReplicationAddRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ShardReplicationAddRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ShardReplicationAddRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type ShardReplicationAddResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationAddResponse) Reset() {
	*x = ShardReplicationAddResponse{}
	mi := &file_vtctldata_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationAddResponse) ProtoMessage() {}

func (x *ShardReplicationAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationAddResponse.ProtoReflect.Descriptor instead.
func (*ShardReplicationAddResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{207}
}

type ShardReplicationFixRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Cell          string                 `protobuf:"bytes,3,opt,name=cell,proto3" json:"cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationFixRequest) Reset() {
	*x = ShardReplicationFixRequest{}
	mi := &file_vtctldata_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationFixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationFixRequest) ProtoMessage() {}

func (x *ShardReplicationFixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationFixRequest.ProtoReflect.Descriptor instead.
func (*ShardReplicationFixRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{208}
}

func (x *ShardReplicationFixRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ShardReplicationFixRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ShardReplicationFixRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

type ShardReplicationFixResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error contains information about the error fixed by a
	// ShardReplicationFix RPC. If there were no errors to fix (i.e. all nodes
	// in the replication graph are valid), this field is nil.
	Error         *topodata.ShardReplicationError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationFixResponse) Reset() {
	*x = ShardReplicationFixResponse{}
	mi := &file_vtctldata_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationFixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationFixResponse) ProtoMessage() {}

func (x *ShardReplicationFixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationFixResponse.ProtoReflect.Descriptor instead.
func (*ShardReplicationFixResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{209}
}

func (x *ShardReplicationFixResponse) GetError() *topodata.ShardReplicationError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ShardReplicationPositionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationPositionsRequest) Reset() {
	*x = ShardReplicationPositionsRequest{}
	mi := &file_vtctldata_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationPositionsRequest) ProtoMessage() {}

func (x *ShardReplicationPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationPositionsRequest.ProtoReflect.Descriptor instead.
func (*ShardReplicationPositionsRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{210}
}

func (x *ShardReplicationPositionsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ShardReplicationPositionsRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

type ShardReplicationPositionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ReplicationStatuses is a mapping of tablet alias string to replication
	// status for that tablet.
	ReplicationStatuses map[string]*replicationdata.Status `protobuf:"bytes,1,rep,name=replication_statuses,json=replicationStatuses,proto3" json:"replication_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// TabletMap is the set of tablets whose replication statuses were queried,
	// keyed by tablet alias.
	TabletMap     map[string]*topodata.Tablet `protobuf:"bytes,2,rep,name=tablet_map,json=tabletMap,proto3" json:"tablet_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationPositionsResponse) Reset() {
	*x = ShardReplicationPositionsResponse{}
	mi := &file_vtctldata_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationPositionsResponse) ProtoMessage() {}

func (x *ShardReplicationPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationPositionsResponse.ProtoReflect.Descriptor instead.
func (*ShardReplicationPositionsResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{211}
}

func (x *ShardReplicationPositionsResponse) GetReplicationStatuses() map[string]*replicationdata.Status {
	if x != nil {
		return x.ReplicationStatuses
	}
	return nil
}

func (x *ShardReplicationPositionsResponse) GetTabletMap() map[string]*topodata.Tablet {
	if x != nil {
		return x.TabletMap
	}
	return nil
}

type ShardReplicationRemoveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,3,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationRemoveRequest) Reset() {
	*x = ShardReplicationRemoveRequest{}
	mi := &file_vtctldata_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationRemoveRequest) ProtoMessage() {}

func (x *ShardReplicationRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationRemoveRequest.ProtoReflect.Descriptor instead.
func (*ShardReplicationRemoveRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{212}
}

func (x *ShardReplicationRemoveRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ShardReplicationRemoveRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ShardReplicationRemoveRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type ShardReplicationRemoveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardReplicationRemoveResponse) Reset() {
	*x = ShardReplicationRemoveResponse{}
	mi := &file_vtctldata_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardReplicationRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardReplicationRemoveResponse) ProtoMessage() {}

func (x *ShardReplicationRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardReplicationRemoveResponse.ProtoReflect.Descriptor instead.
func (*ShardReplicationRemoveResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{213}
}

type SleepTabletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Duration      *vttime.Duration       `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepTabletRequest) Reset() {
	*x = SleepTabletRequest{}
	mi := &file_vtctldata_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepTabletRequest) ProtoMessage() {}

func (x *SleepTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepTabletRequest.ProtoReflect.Descriptor instead.
func (*SleepTabletRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{214}
}

func (x *SleepTabletRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *SleepTabletRequest) GetDuration() *vttime.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type SleepTabletResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepTabletResponse) Reset() {
	*x = SleepTabletResponse{}
	mi := &file_vtctldata_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepTabletResponse) ProtoMessage() {}

func (x *SleepTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepTabletResponse.ProtoReflect.Descriptor instead.
func (*SleepTabletResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{215}
}

type SourceShardAddRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Keyspace       string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard          string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Uid            int32                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	SourceKeyspace string                 `protobuf:"bytes,4,opt,name=source_keyspace,json=sourceKeyspace,proto3" json:"source_keyspace,omitempty"`
	SourceShard    string                 `protobuf:"bytes,5,opt,name=source_shard,json=sourceShard,proto3" json:"source_shard,omitempty"`
	// KeyRange identifies the key range to use for the SourceShard. This field is
	// optional.
	KeyRange *topodata.KeyRange `protobuf:"bytes,6,opt,name=key_range,json=keyRange,proto3" json:"key_range,omitempty"`
	// Tables is a list of tables replicate (for MoveTables). Each "table" can be
	// either an exact match or a regular expression of the form "/regexp/".
	Tables        []string `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceShardAddRequest) Reset() {
	*x = SourceShardAddRequest{}
	mi := &file_vtctldata_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceShardAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceShardAddRequest) ProtoMessage() {}

func (x *SourceShardAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceShardAddRequest.ProtoReflect.Descriptor instead.
func (*SourceShardAddRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{216}
}

func (x *SourceShardAddRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SourceShardAddRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *SourceShardAddRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SourceShardAddRequest) GetSourceKeyspace() string {
	if x != nil {
		return x.SourceKeyspace
	}
	return ""
}

func (x *SourceShardAddRequest) GetSourceShard() string {
	if x != nil {
		return x.SourceShard
	}
	return ""
}

func (x *SourceShardAddRequest) GetKeyRange() *topodata.KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *SourceShardAddRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

type SourceShardAddResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard is the updated shard record.
	Shard         *topodata.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceShardAddResponse) Reset() {
	*x = SourceShardAddResponse{}
	mi := &file_vtctldata_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceShardAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceShardAddResponse) ProtoMessage() {}

func (x *SourceShardAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceShardAddResponse.ProtoReflect.Descriptor instead.
func (*SourceShardAddResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{217}
}

func (x *SourceShardAddResponse) GetShard() *topodata.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type SourceShardDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Uid           int32                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceShardDeleteRequest) Reset() {
	*x = SourceShardDeleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceShardDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceShardDeleteRequest) ProtoMessage() {}

func (x *SourceShardDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceShardDeleteRequest.ProtoReflect.Descriptor instead.
func (*SourceShardDeleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{218}
}

func (x *SourceShardDeleteRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *SourceShardDeleteRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *SourceShardDeleteRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type SourceShardDeleteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard is the updated shard record.
	Shard         *topodata.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceShardDeleteResponse) Reset() {
	*x = SourceShardDeleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceShardDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceShardDeleteResponse) ProtoMessage() {}

func (x *SourceShardDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceShardDeleteResponse.ProtoReflect.Descriptor instead.
func (*SourceShardDeleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{219}
}

func (x *SourceShardDeleteResponse) GetShard() *topodata.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type StartReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationRequest) Reset() {
	*x = StartReplicationRequest{}
	mi := &file_vtctldata_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationRequest) ProtoMessage() {}

func (x *StartReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{220}
}

func (x *StartReplicationRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type StartReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationResponse) Reset() {
	*x = StartReplicationResponse{}
	mi := &file_vtctldata_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationResponse) ProtoMessage() {}

func (x *StartReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{221}
}

type StopReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletAlias   *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationRequest) Reset() {
	*x = StopReplicationRequest{}
	mi := &file_vtctldata_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationRequest) ProtoMessage() {}

func (x *StopReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{222}
}

func (x *StopReplicationRequest) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

type StopReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationResponse) Reset() {
	*x = StopReplicationResponse{}
	mi := &file_vtctldata_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationResponse) ProtoMessage() {}

func (x *StopReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{223}
}

type TabletExternallyReparentedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tablet is the alias of the tablet that was promoted externally and should
	// be updated to the shard primary in the topo.
	Tablet        *topodata.TabletAlias `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabletExternallyReparentedRequest) Reset() {
	*x = TabletExternallyReparentedRequest{}
	mi := &file_vtctldata_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletExternallyReparentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletExternallyReparentedRequest) ProtoMessage() {}

func (x *TabletExternallyReparentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletExternallyReparentedRequest.ProtoReflect.Descriptor instead.
func (*TabletExternallyReparentedRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{224}
}

func (x *TabletExternallyReparentedRequest) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

type TabletExternallyReparentedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	NewPrimary    *topodata.TabletAlias  `protobuf:"bytes,3,opt,name=new_primary,json=newPrimary,proto3" json:"new_primary,omitempty"`
	OldPrimary    *topodata.TabletAlias  `protobuf:"bytes,4,opt,name=old_primary,json=oldPrimary,proto3" json:"old_primary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabletExternallyReparentedResponse) Reset() {
	*x = TabletExternallyReparentedResponse{}
	mi := &file_vtctldata_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletExternallyReparentedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletExternallyReparentedResponse) ProtoMessage() {}

func (x *TabletExternallyReparentedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletExternallyReparentedResponse.ProtoReflect.Descriptor instead.
func (*TabletExternallyReparentedResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{225}
}

func (x *TabletExternallyReparentedResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *TabletExternallyReparentedResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *TabletExternallyReparentedResponse) GetNewPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.NewPrimary
	}
	return nil
}

func (x *TabletExternallyReparentedResponse) GetOldPrimary() *topodata.TabletAlias {
	if x != nil {
		return x.OldPrimary
	}
	return nil
}

type UpdateCellInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CellInfo      *topodata.CellInfo     `protobuf:"bytes,2,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCellInfoRequest) Reset() {
	*x = UpdateCellInfoRequest{}
	mi := &file_vtctldata_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCellInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellInfoRequest) ProtoMessage() {}

func (x *UpdateCellInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateCellInfoRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{226}
}

func (x *UpdateCellInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCellInfoRequest) GetCellInfo() *topodata.CellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type UpdateCellInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CellInfo      *topodata.CellInfo     `protobuf:"bytes,2,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCellInfoResponse) Reset() {
	*x = UpdateCellInfoResponse{}
	mi := &file_vtctldata_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCellInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellInfoResponse) ProtoMessage() {}

func (x *UpdateCellInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateCellInfoResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{227}
}

func (x *UpdateCellInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCellInfoResponse) GetCellInfo() *topodata.CellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type UpdateCellsAliasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CellsAlias    *topodata.CellsAlias   `protobuf:"bytes,2,opt,name=cells_alias,json=cellsAlias,proto3" json:"cells_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCellsAliasRequest) Reset() {
	*x = UpdateCellsAliasRequest{}
	mi := &file_vtctldata_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCellsAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellsAliasRequest) ProtoMessage() {}

func (x *UpdateCellsAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellsAliasRequest.ProtoReflect.Descriptor instead.
func (*UpdateCellsAliasRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{228}
}

func (x *UpdateCellsAliasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCellsAliasRequest) GetCellsAlias() *topodata.CellsAlias {
	if x != nil {
		return x.CellsAlias
	}
	return nil
}

type UpdateCellsAliasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CellsAlias    *topodata.CellsAlias   `protobuf:"bytes,2,opt,name=cells_alias,json=cellsAlias,proto3" json:"cells_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCellsAliasResponse) Reset() {
	*x = UpdateCellsAliasResponse{}
	mi := &file_vtctldata_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCellsAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellsAliasResponse) ProtoMessage() {}

func (x *UpdateCellsAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellsAliasResponse.ProtoReflect.Descriptor instead.
func (*UpdateCellsAliasResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{229}
}

func (x *UpdateCellsAliasResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCellsAliasResponse) GetCellsAlias() *topodata.CellsAlias {
	if x != nil {
		return x.CellsAlias
	}
	return nil
}

type ValidateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PingTablets   bool                   `protobuf:"varint,1,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	mi := &file_vtctldata_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{230}
}

func (x *ValidateRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateResponse struct {
	state             protoimpl.MessageState               `protogen:"open.v1"`
	Results           []string                             `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	ResultsByKeyspace map[string]*ValidateKeyspaceResponse `protobuf:"bytes,2,rep,name=results_by_keyspace,json=resultsByKeyspace,proto3" json:"results_by_keyspace,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	mi := &file_vtctldata_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{231}
}

func (x *ValidateResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidateResponse) GetResultsByKeyspace() map[string]*ValidateKeyspaceResponse {
	if x != nil {
		return x.ResultsByKeyspace
	}
	return nil
}

type ValidateKeyspaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	PingTablets   bool                   `protobuf:"varint,2,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateKeyspaceRequest) Reset() {
	*x = ValidateKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateKeyspaceRequest) ProtoMessage() {}

func (x *ValidateKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{232}
}

func (x *ValidateKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateKeyspaceRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateKeyspaceResponse struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Results        []string                          `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	ResultsByShard map[string]*ValidateShardResponse `protobuf:"bytes,2,rep,name=results_by_shard,json=resultsByShard,proto3" json:"results_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateKeyspaceResponse) Reset() {
	*x = ValidateKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateKeyspaceResponse) ProtoMessage() {}

func (x *ValidateKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*ValidateKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{233}
}

func (x *ValidateKeyspaceResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidateKeyspaceResponse) GetResultsByShard() map[string]*ValidateShardResponse {
	if x != nil {
		return x.ResultsByShard
	}
	return nil
}

type ValidatePermissionsKeyspaceRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// If you only want to validate a subset of the shards in the
	// keyspace, then specify a list of shard names.
	Shards        []string `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatePermissionsKeyspaceRequest) Reset() {
	*x = ValidatePermissionsKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatePermissionsKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePermissionsKeyspaceRequest) ProtoMessage() {}

func (x *ValidatePermissionsKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePermissionsKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidatePermissionsKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{234}
}

func (x *ValidatePermissionsKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidatePermissionsKeyspaceRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

type ValidatePermissionsKeyspaceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatePermissionsKeyspaceResponse) Reset() {
	*x = ValidatePermissionsKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatePermissionsKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePermissionsKeyspaceResponse) ProtoMessage() {}

func (x *ValidatePermissionsKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePermissionsKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*ValidatePermissionsKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{235}
}

type ValidateSchemaKeyspaceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Keyspace       string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ExcludeTables  []string               `protobuf:"bytes,2,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	IncludeViews   bool                   `protobuf:"varint,3,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	SkipNoPrimary  bool                   `protobuf:"varint,4,opt,name=skip_no_primary,json=skipNoPrimary,proto3" json:"skip_no_primary,omitempty"`
	IncludeVschema bool                   `protobuf:"varint,5,opt,name=include_vschema,json=includeVschema,proto3" json:"include_vschema,omitempty"`
	// If you only want to validate a subset of the shards in the
	// keyspace, then specify a list of shard names.
	Shards        []string `protobuf:"bytes,6,rep,name=shards,proto3" json:"shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSchemaKeyspaceRequest) Reset() {
	*x = ValidateSchemaKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSchemaKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSchemaKeyspaceRequest) ProtoMessage() {}

func (x *ValidateSchemaKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSchemaKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateSchemaKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{236}
}

func (x *ValidateSchemaKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateSchemaKeyspaceRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *ValidateSchemaKeyspaceRequest) GetIncludeViews() bool {
	if x != nil {
		return x.IncludeViews
	}
	return false
}

func (x *ValidateSchemaKeyspaceRequest) GetSkipNoPrimary() bool {
	if x != nil {
		return x.SkipNoPrimary
	}
	return false
}

func (x *ValidateSchemaKeyspaceRequest) GetIncludeVschema() bool {
	if x != nil {
		return x.IncludeVschema
	}
	return false
}

func (x *ValidateSchemaKeyspaceRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

type ValidateSchemaKeyspaceResponse struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Results        []string                          `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	ResultsByShard map[string]*ValidateShardResponse `protobuf:"bytes,2,rep,name=results_by_shard,json=resultsByShard,proto3" json:"results_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateSchemaKeyspaceResponse) Reset() {
	*x = ValidateSchemaKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSchemaKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSchemaKeyspaceResponse) ProtoMessage() {}

func (x *ValidateSchemaKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSchemaKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*ValidateSchemaKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{237}
}

func (x *ValidateSchemaKeyspaceResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidateSchemaKeyspaceResponse) GetResultsByShard() map[string]*ValidateShardResponse {
	if x != nil {
		return x.ResultsByShard
	}
	return nil
}

type ValidateShardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	PingTablets   bool                   `protobuf:"varint,3,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateShardRequest) Reset() {
	*x = ValidateShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateShardRequest) ProtoMessage() {}

func (x *ValidateShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateShardRequest.ProtoReflect.Descriptor instead.
func (*ValidateShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{238}
}

func (x *ValidateShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ValidateShardRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateShardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []string               `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateShardResponse) Reset() {
	*x = ValidateShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateShardResponse) ProtoMessage() {}

func (x *ValidateShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateShardResponse.ProtoReflect.Descriptor instead.
func (*ValidateShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{239}
}

func (x *ValidateShardResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type ValidateVersionKeyspaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateVersionKeyspaceRequest) Reset() {
	*x = ValidateVersionKeyspaceRequest{}
	mi := &file_vtctldata_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVersionKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionKeyspaceRequest) ProtoMessage() {}

func (x *ValidateVersionKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateVersionKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{240}
}

func (x *ValidateVersionKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type ValidateVersionKeyspaceResponse struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Results        []string                          `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	ResultsByShard map[string]*ValidateShardResponse `protobuf:"bytes,2,rep,name=results_by_shard,json=resultsByShard,proto3" json:"results_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateVersionKeyspaceResponse) Reset() {
	*x = ValidateVersionKeyspaceResponse{}
	mi := &file_vtctldata_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVersionKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionKeyspaceResponse) ProtoMessage() {}

func (x *ValidateVersionKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*ValidateVersionKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{241}
}

func (x *ValidateVersionKeyspaceResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidateVersionKeyspaceResponse) GetResultsByShard() map[string]*ValidateShardResponse {
	if x != nil {
		return x.ResultsByShard
	}
	return nil
}

type ValidateVersionShardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateVersionShardRequest) Reset() {
	*x = ValidateVersionShardRequest{}
	mi := &file_vtctldata_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVersionShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionShardRequest) ProtoMessage() {}

func (x *ValidateVersionShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionShardRequest.ProtoReflect.Descriptor instead.
func (*ValidateVersionShardRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{242}
}

func (x *ValidateVersionShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateVersionShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

type ValidateVersionShardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []string               `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateVersionShardResponse) Reset() {
	*x = ValidateVersionShardResponse{}
	mi := &file_vtctldata_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVersionShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionShardResponse) ProtoMessage() {}

func (x *ValidateVersionShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionShardResponse.ProtoReflect.Descriptor instead.
func (*ValidateVersionShardResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{243}
}

func (x *ValidateVersionShardResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type ValidateVSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shards        []string               `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	ExcludeTables []string               `protobuf:"bytes,3,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	IncludeViews  bool                   `protobuf:"varint,4,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateVSchemaRequest) Reset() {
	*x = ValidateVSchemaRequest{}
	mi := &file_vtctldata_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVSchemaRequest) ProtoMessage() {}

func (x *ValidateVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVSchemaRequest.ProtoReflect.Descriptor instead.
func (*ValidateVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{244}
}

func (x *ValidateVSchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateVSchemaRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ValidateVSchemaRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *ValidateVSchemaRequest) GetIncludeViews() bool {
	if x != nil {
		return x.IncludeViews
	}
	return false
}

type ValidateVSchemaResponse struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Results        []string                          `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	ResultsByShard map[string]*ValidateShardResponse `protobuf:"bytes,2,rep,name=results_by_shard,json=resultsByShard,proto3" json:"results_by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateVSchemaResponse) Reset() {
	*x = ValidateVSchemaResponse{}
	mi := &file_vtctldata_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateVSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVSchemaResponse) ProtoMessage() {}

func (x *ValidateVSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVSchemaResponse.ProtoReflect.Descriptor instead.
func (*ValidateVSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{245}
}

func (x *ValidateVSchemaResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidateVSchemaResponse) GetResultsByShard() map[string]*ValidateShardResponse {
	if x != nil {
		return x.ResultsByShard
	}
	return nil
}

type VDiffCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the workflow that we're diffing tables for.
	Workflow string `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	// The keyspace where the vreplication workflow is running.
	TargetKeyspace string `protobuf:"bytes,2,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	// A unique identifier for the vdiff.
	// If empty, a new UUID will be generated.
	Uuid string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The cells to look for source tablets in.
	// If empty, all cells are used.
	SourceCells []string `protobuf:"bytes,4,rep,name=source_cells,json=sourceCells,proto3" json:"source_cells,omitempty"`
	// The cells to look for target tablets in.
	// If empty, all cells are used.
	TargetCells []string `protobuf:"bytes,5,rep,name=target_cells,json=targetCells,proto3" json:"target_cells,omitempty"`
	// The tablet types to use when searching for tablets to use when streaming
	// results.
	// A default value of "replica,rdonly,primary" is used by the tablet picker.
	TabletTypes []topodata.TabletType `protobuf:"varint,6,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	// When performing source tablet selection, look for candidates in the type
	// order as they are listed in the tablet_types value (or the default of
	// "replica,rdonly,primary" that the tablet picker uses).
	// The default is ANY (0) and you can use INORDER (1) to e.g. ensure that a
	// primary tablet is only used if there are no available replica or rdonly
	// tablets.
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,7,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	// The tables to compare. If empty, all tables in the workflow are compared.
	Tables []string `protobuf:"bytes,8,rep,name=tables,proto3" json:"tables,omitempty"`
	// The maximum number of rows to compare for each table on each shard.
	// The default is a max int64 value: 2^63 - 1 or 9,223,372,036,854,775,807.
	Limit int64 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// How long to wait for the relevant vreplication stream(s) to catch up when
	// attempting to setup the table snapshots on the source and target to use for
	// the diff on each shard.
	// The default is 30s.
	FilteredReplicationWaitTime *vttime.Duration `protobuf:"bytes,10,opt,name=filtered_replication_wait_time,json=filteredReplicationWaitTime,proto3" json:"filtered_replication_wait_time,omitempty"`
	// Include the MySQL query used for the diff in the report that is stored on
	// each shard primary tablet in the _vt.vdiff_table records.
	DebugQuery bool `protobuf:"varint,11,opt,name=debug_query,json=debugQuery,proto3" json:"debug_query,omitempty"`
	// Only show the Primary Key columns in any row diff output. You would
	// typically want to use this if you set the max_sample_rows very high.
	OnlyPKs bool `protobuf:"varint,12,opt,name=only_p_ks,json=onlyPKs,proto3" json:"only_p_ks,omitempty"`
	// Update the table statistics, using ANALYZE TABLE, on each table involved
	// in the vdiff during initialization on each target shard. This will ensure
	// that progress estimates are as accurate as possible -- but it does involve
	// locks and can potentially impact query processing on the target keyspace.
	UpdateTableStats bool `protobuf:"varint,13,opt,name=update_table_stats,json=updateTableStats,proto3" json:"update_table_stats,omitempty"`
	// If there are collation differences between the source and target, you can
	// have rows that are identical but simply returned in a different order from
	// MySQL. We will do a second pass to compare the rows for any actual
	// differences in this case and this flag allows you to control the resources
	// used for this operation.
	// The default is 0, comparing no extra rows.
	MaxExtraRowsToCompare int64 `protobuf:"varint,14,opt,name=max_extra_rows_to_compare,json=maxExtraRowsToCompare,proto3" json:"max_extra_rows_to_compare,omitempty"`
	// Wait for the vdiff to complete before returning (making the call synchronous
	// vs asynchronous by default).
	Wait bool `protobuf:"varint,15,opt,name=wait,proto3" json:"wait,omitempty"`
	// When wait is true, this is how frequently the vdiff progress will be shown.
	WaitUpdateInterval *vttime.Duration `protobuf:"bytes,16,opt,name=wait_update_interval,json=waitUpdateInterval,proto3" json:"wait_update_interval,omitempty"`
	// Automatically retry the vdiff if we encounter an error. This should almost
	// always be set to true (default is false).
	AutoRetry bool `protobuf:"varint,17,opt,name=auto_retry,json=autoRetry,proto3" json:"auto_retry,omitempty"`
	// Include additional information in the vdiff report that is produced and
	// stored on each target shard primary's _vt sidecar database.
	Verbose bool `protobuf:"varint,18,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// The maximum number of rows to include in the row diff report (when
	// differences are found) for each table on each shard.
	// The default is 0, which will include no sample rows that differed.
	MaxReportSampleRows int64 `protobuf:"varint,19,opt,name=max_report_sample_rows,json=maxReportSampleRows,proto3" json:"max_report_sample_rows,omitempty"`
	// The maximum time that a diff of a single table can run on each target shard
	// before it is stopped and then later resumed from where we left off. This
	// can be helpful in limiting the impact of holding open that large transaction
	// where we scan up to every row in the table.
	// The default is 0 or no limit.
	MaxDiffDuration *vttime.Duration `protobuf:"bytes,20,opt,name=max_diff_duration,json=maxDiffDuration,proto3" json:"max_diff_duration,omitempty"`
	// At what length should we truncate the column values in the row diff report
	// generated for each table on each shard when differences are detected.
	// The default is 0, meaning do not truncate.
	RowDiffColumnTruncateAt int64 `protobuf:"varint,21,opt,name=row_diff_column_truncate_at,json=rowDiffColumnTruncateAt,proto3" json:"row_diff_column_truncate_at,omitempty"`
	// Auto start the vdiff after creating it.
	// The default is true if no value is specified.
	AutoStart     *bool `protobuf:"varint,22,opt,name=auto_start,json=autoStart,proto3,oneof" json:"auto_start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffCreateRequest) Reset() {
	*x = VDiffCreateRequest{}
	mi := &file_vtctldata_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffCreateRequest) ProtoMessage() {}

func (x *VDiffCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffCreateRequest.ProtoReflect.Descriptor instead.
func (*VDiffCreateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{246}
}

func (x *VDiffCreateRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffCreateRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *VDiffCreateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VDiffCreateRequest) GetSourceCells() []string {
	if x != nil {
		return x.SourceCells
	}
	return nil
}

func (x *VDiffCreateRequest) GetTargetCells() []string {
	if x != nil {
		return x.TargetCells
	}
	return nil
}

func (x *VDiffCreateRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *VDiffCreateRequest) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *VDiffCreateRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *VDiffCreateRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VDiffCreateRequest) GetFilteredReplicationWaitTime() *vttime.Duration {
	if x != nil {
		return x.FilteredReplicationWaitTime
	}
	return nil
}

func (x *VDiffCreateRequest) GetDebugQuery() bool {
	if x != nil {
		return x.DebugQuery
	}
	return false
}

func (x *VDiffCreateRequest) GetOnlyPKs() bool {
	if x != nil {
		return x.OnlyPKs
	}
	return false
}

func (x *VDiffCreateRequest) GetUpdateTableStats() bool {
	if x != nil {
		return x.UpdateTableStats
	}
	return false
}

func (x *VDiffCreateRequest) GetMaxExtraRowsToCompare() int64 {
	if x != nil {
		return x.MaxExtraRowsToCompare
	}
	return 0
}

func (x *VDiffCreateRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *VDiffCreateRequest) GetWaitUpdateInterval() *vttime.Duration {
	if x != nil {
		return x.WaitUpdateInterval
	}
	return nil
}

func (x *VDiffCreateRequest) GetAutoRetry() bool {
	if x != nil {
		return x.AutoRetry
	}
	return false
}

func (x *VDiffCreateRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *VDiffCreateRequest) GetMaxReportSampleRows() int64 {
	if x != nil {
		return x.MaxReportSampleRows
	}
	return 0
}

func (x *VDiffCreateRequest) GetMaxDiffDuration() *vttime.Duration {
	if x != nil {
		return x.MaxDiffDuration
	}
	return nil
}

func (x *VDiffCreateRequest) GetRowDiffColumnTruncateAt() int64 {
	if x != nil {
		return x.RowDiffColumnTruncateAt
	}
	return 0
}

func (x *VDiffCreateRequest) GetAutoStart() bool {
	if x != nil && x.AutoStart != nil {
		return *x.AutoStart
	}
	return false
}

type VDiffCreateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intentionally upper case to maintain compatibility with
	// vtctlclient and other VDiff client command output.
	UUID          string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffCreateResponse) Reset() {
	*x = VDiffCreateResponse{}
	mi := &file_vtctldata_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffCreateResponse) ProtoMessage() {}

func (x *VDiffCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffCreateResponse.ProtoReflect.Descriptor instead.
func (*VDiffCreateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{247}
}

func (x *VDiffCreateResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type VDiffDeleteRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Workflow       string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace string                 `protobuf:"bytes,2,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	// This will be 'all' or a UUID.
	Arg           string `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffDeleteRequest) Reset() {
	*x = VDiffDeleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffDeleteRequest) ProtoMessage() {}

func (x *VDiffDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffDeleteRequest.ProtoReflect.Descriptor instead.
func (*VDiffDeleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{248}
}

func (x *VDiffDeleteRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffDeleteRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *VDiffDeleteRequest) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

type VDiffDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffDeleteResponse) Reset() {
	*x = VDiffDeleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffDeleteResponse) ProtoMessage() {}

func (x *VDiffDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffDeleteResponse.ProtoReflect.Descriptor instead.
func (*VDiffDeleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{249}
}

type VDiffResumeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Workflow       string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace string                 `protobuf:"bytes,2,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	Uuid           string                 `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TargetShards   []string               `protobuf:"bytes,4,rep,name=target_shards,json=targetShards,proto3" json:"target_shards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VDiffResumeRequest) Reset() {
	*x = VDiffResumeRequest{}
	mi := &file_vtctldata_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffResumeRequest) ProtoMessage() {}

func (x *VDiffResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffResumeRequest.ProtoReflect.Descriptor instead.
func (*VDiffResumeRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{250}
}

func (x *VDiffResumeRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffResumeRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *VDiffResumeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VDiffResumeRequest) GetTargetShards() []string {
	if x != nil {
		return x.TargetShards
	}
	return nil
}

type VDiffResumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffResumeResponse) Reset() {
	*x = VDiffResumeResponse{}
	mi := &file_vtctldata_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffResumeResponse) ProtoMessage() {}

func (x *VDiffResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffResumeResponse.ProtoReflect.Descriptor instead.
func (*VDiffResumeResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{251}
}

type VDiffShowRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Workflow       string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace string                 `protobuf:"bytes,2,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	// This will be 'all', 'last', or a UUID.
	Arg           string `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffShowRequest) Reset() {
	*x = VDiffShowRequest{}
	mi := &file_vtctldata_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffShowRequest) ProtoMessage() {}

func (x *VDiffShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffShowRequest.ProtoReflect.Descriptor instead.
func (*VDiffShowRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{252}
}

func (x *VDiffShowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffShowRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *VDiffShowRequest) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

type VDiffShowResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key is keyspace/shard.
	TabletResponses map[string]*tabletmanagerdata.VDiffResponse `protobuf:"bytes,1,rep,name=tablet_responses,json=tabletResponses,proto3" json:"tablet_responses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VDiffShowResponse) Reset() {
	*x = VDiffShowResponse{}
	mi := &file_vtctldata_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffShowResponse) ProtoMessage() {}

func (x *VDiffShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffShowResponse.ProtoReflect.Descriptor instead.
func (*VDiffShowResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{253}
}

func (x *VDiffShowResponse) GetTabletResponses() map[string]*tabletmanagerdata.VDiffResponse {
	if x != nil {
		return x.TabletResponses
	}
	return nil
}

type VDiffStopRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Workflow       string                 `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TargetKeyspace string                 `protobuf:"bytes,2,opt,name=target_keyspace,json=targetKeyspace,proto3" json:"target_keyspace,omitempty"`
	Uuid           string                 `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TargetShards   []string               `protobuf:"bytes,4,rep,name=target_shards,json=targetShards,proto3" json:"target_shards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VDiffStopRequest) Reset() {
	*x = VDiffStopRequest{}
	mi := &file_vtctldata_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffStopRequest) ProtoMessage() {}

func (x *VDiffStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffStopRequest.ProtoReflect.Descriptor instead.
func (*VDiffStopRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{254}
}

func (x *VDiffStopRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffStopRequest) GetTargetKeyspace() string {
	if x != nil {
		return x.TargetKeyspace
	}
	return ""
}

func (x *VDiffStopRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VDiffStopRequest) GetTargetShards() []string {
	if x != nil {
		return x.TargetShards
	}
	return nil
}

type VDiffStopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiffStopResponse) Reset() {
	*x = VDiffStopResponse{}
	mi := &file_vtctldata_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiffStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffStopResponse) ProtoMessage() {}

func (x *VDiffStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffStopResponse.ProtoReflect.Descriptor instead.
func (*VDiffStopResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{255}
}

type WorkflowDeleteRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Keyspace         string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow         string                 `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	KeepData         bool                   `protobuf:"varint,3,opt,name=keep_data,json=keepData,proto3" json:"keep_data,omitempty"`
	KeepRoutingRules bool                   `protobuf:"varint,4,opt,name=keep_routing_rules,json=keepRoutingRules,proto3" json:"keep_routing_rules,omitempty"`
	Shards           []string               `protobuf:"bytes,5,rep,name=shards,proto3" json:"shards,omitempty"`
	// The max records to delete from the moved tables when cleaning
	// up the migrated data. This is only used with multi-tenant
	// MoveTables migrations.
	DeleteBatchSize int64 `protobuf:"varint,6,opt,name=delete_batch_size,json=deleteBatchSize,proto3" json:"delete_batch_size,omitempty"`
	// Set to true if the you know that the source keyspace is no
	// longer available but still want to clean everything up on the
	// target keyspace.
	IgnoreSourceKeyspace bool `protobuf:"varint,7,opt,name=ignore_source_keyspace,json=ignoreSourceKeyspace,proto3" json:"ignore_source_keyspace,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WorkflowDeleteRequest) Reset() {
	*x = WorkflowDeleteRequest{}
	mi := &file_vtctldata_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDeleteRequest) ProtoMessage() {}

func (x *WorkflowDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDeleteRequest.ProtoReflect.Descriptor instead.
func (*WorkflowDeleteRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{256}
}

func (x *WorkflowDeleteRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowDeleteRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *WorkflowDeleteRequest) GetKeepData() bool {
	if x != nil {
		return x.KeepData
	}
	return false
}

func (x *WorkflowDeleteRequest) GetKeepRoutingRules() bool {
	if x != nil {
		return x.KeepRoutingRules
	}
	return false
}

func (x *WorkflowDeleteRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkflowDeleteRequest) GetDeleteBatchSize() int64 {
	if x != nil {
		return x.DeleteBatchSize
	}
	return 0
}

func (x *WorkflowDeleteRequest) GetIgnoreSourceKeyspace() bool {
	if x != nil {
		return x.IgnoreSourceKeyspace
	}
	return false
}

type WorkflowDeleteResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Summary       string                               `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Details       []*WorkflowDeleteResponse_TabletInfo `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowDeleteResponse) Reset() {
	*x = WorkflowDeleteResponse{}
	mi := &file_vtctldata_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDeleteResponse) ProtoMessage() {}

func (x *WorkflowDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDeleteResponse.ProtoReflect.Descriptor instead.
func (*WorkflowDeleteResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{257}
}

func (x *WorkflowDeleteResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WorkflowDeleteResponse) GetDetails() []*WorkflowDeleteResponse_TabletInfo {
	if x != nil {
		return x.Details
	}
	return nil
}

type WorkflowStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow      string                 `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Shards        []string               `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowStatusRequest) Reset() {
	*x = WorkflowStatusRequest{}
	mi := &file_vtctldata_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatusRequest) ProtoMessage() {}

func (x *WorkflowStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatusRequest.ProtoReflect.Descriptor instead.
func (*WorkflowStatusRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{258}
}

func (x *WorkflowStatusRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowStatusRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *WorkflowStatusRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

type WorkflowStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key is keyspace/shard.
	TableCopyState map[string]*WorkflowStatusResponse_TableCopyState `protobuf:"bytes,1,rep,name=table_copy_state,json=tableCopyState,proto3" json:"table_copy_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShardStreams   map[string]*WorkflowStatusResponse_ShardStreams   `protobuf:"bytes,2,rep,name=shard_streams,json=shardStreams,proto3" json:"shard_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TrafficState   string                                            `protobuf:"bytes,3,opt,name=traffic_state,json=trafficState,proto3" json:"traffic_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkflowStatusResponse) Reset() {
	*x = WorkflowStatusResponse{}
	mi := &file_vtctldata_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatusResponse) ProtoMessage() {}

func (x *WorkflowStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatusResponse.ProtoReflect.Descriptor instead.
func (*WorkflowStatusResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{259}
}

func (x *WorkflowStatusResponse) GetTableCopyState() map[string]*WorkflowStatusResponse_TableCopyState {
	if x != nil {
		return x.TableCopyState
	}
	return nil
}

func (x *WorkflowStatusResponse) GetShardStreams() map[string]*WorkflowStatusResponse_ShardStreams {
	if x != nil {
		return x.ShardStreams
	}
	return nil
}

func (x *WorkflowStatusResponse) GetTrafficState() string {
	if x != nil {
		return x.TrafficState
	}
	return ""
}

type WorkflowSwitchTrafficRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Keyspace                  string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow                  string                 `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Cells                     []string               `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []topodata.TabletType  `protobuf:"varint,4,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	MaxReplicationLagAllowed  *vttime.Duration       `protobuf:"bytes,5,opt,name=max_replication_lag_allowed,json=maxReplicationLagAllowed,proto3" json:"max_replication_lag_allowed,omitempty"`
	EnableReverseReplication  bool                   `protobuf:"varint,6,opt,name=enable_reverse_replication,json=enableReverseReplication,proto3" json:"enable_reverse_replication,omitempty"`
	Direction                 int32                  `protobuf:"varint,7,opt,name=direction,proto3" json:"direction,omitempty"`
	Timeout                   *vttime.Duration       `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DryRun                    bool                   `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	InitializeTargetSequences bool                   `protobuf:"varint,10,opt,name=initialize_target_sequences,json=initializeTargetSequences,proto3" json:"initialize_target_sequences,omitempty"`
	Shards                    []string               `protobuf:"bytes,11,rep,name=shards,proto3" json:"shards,omitempty"`
	Force                     bool                   `protobuf:"varint,12,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *WorkflowSwitchTrafficRequest) Reset() {
	*x = WorkflowSwitchTrafficRequest{}
	mi := &file_vtctldata_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowSwitchTrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowSwitchTrafficRequest) ProtoMessage() {}

func (x *WorkflowSwitchTrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowSwitchTrafficRequest.ProtoReflect.Descriptor instead.
func (*WorkflowSwitchTrafficRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{260}
}

func (x *WorkflowSwitchTrafficRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowSwitchTrafficRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *WorkflowSwitchTrafficRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *WorkflowSwitchTrafficRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *WorkflowSwitchTrafficRequest) GetMaxReplicationLagAllowed() *vttime.Duration {
	if x != nil {
		return x.MaxReplicationLagAllowed
	}
	return nil
}

func (x *WorkflowSwitchTrafficRequest) GetEnableReverseReplication() bool {
	if x != nil {
		return x.EnableReverseReplication
	}
	return false
}

func (x *WorkflowSwitchTrafficRequest) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *WorkflowSwitchTrafficRequest) GetTimeout() *vttime.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *WorkflowSwitchTrafficRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *WorkflowSwitchTrafficRequest) GetInitializeTargetSequences() bool {
	if x != nil {
		return x.InitializeTargetSequences
	}
	return false
}

func (x *WorkflowSwitchTrafficRequest) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkflowSwitchTrafficRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type WorkflowSwitchTrafficResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	StartState    string                 `protobuf:"bytes,2,opt,name=start_state,json=startState,proto3" json:"start_state,omitempty"`
	CurrentState  string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	DryRunResults []string               `protobuf:"bytes,4,rep,name=dry_run_results,json=dryRunResults,proto3" json:"dry_run_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowSwitchTrafficResponse) Reset() {
	*x = WorkflowSwitchTrafficResponse{}
	mi := &file_vtctldata_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowSwitchTrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowSwitchTrafficResponse) ProtoMessage() {}

func (x *WorkflowSwitchTrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowSwitchTrafficResponse.ProtoReflect.Descriptor instead.
func (*WorkflowSwitchTrafficResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{261}
}

func (x *WorkflowSwitchTrafficResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WorkflowSwitchTrafficResponse) GetStartState() string {
	if x != nil {
		return x.StartState
	}
	return ""
}

func (x *WorkflowSwitchTrafficResponse) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *WorkflowSwitchTrafficResponse) GetDryRunResults() []string {
	if x != nil {
		return x.DryRunResults
	}
	return nil
}

type WorkflowUpdateRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Keyspace string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// TabletRequest gets passed on to each primary tablet involved
	// in the workflow via the UpdateVReplicationWorkflow tabletmanager RPC.
	TabletRequest *tabletmanagerdata.UpdateVReplicationWorkflowRequest `protobuf:"bytes,2,opt,name=tablet_request,json=tabletRequest,proto3" json:"tablet_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowUpdateRequest) Reset() {
	*x = WorkflowUpdateRequest{}
	mi := &file_vtctldata_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowUpdateRequest) ProtoMessage() {}

func (x *WorkflowUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowUpdateRequest.ProtoReflect.Descriptor instead.
func (*WorkflowUpdateRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{262}
}

func (x *WorkflowUpdateRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowUpdateRequest) GetTabletRequest() *tabletmanagerdata.UpdateVReplicationWorkflowRequest {
	if x != nil {
		return x.TabletRequest
	}
	return nil
}

type WorkflowUpdateResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Summary       string                               `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Details       []*WorkflowUpdateResponse_TabletInfo `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowUpdateResponse) Reset() {
	*x = WorkflowUpdateResponse{}
	mi := &file_vtctldata_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowUpdateResponse) ProtoMessage() {}

func (x *WorkflowUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowUpdateResponse.ProtoReflect.Descriptor instead.
func (*WorkflowUpdateResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{263}
}

func (x *WorkflowUpdateResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WorkflowUpdateResponse) GetDetails() []*WorkflowUpdateResponse_TabletInfo {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetMirrorRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMirrorRulesRequest) Reset() {
	*x = GetMirrorRulesRequest{}
	mi := &file_vtctldata_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMirrorRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorRulesRequest) ProtoMessage() {}

func (x *GetMirrorRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorRulesRequest.ProtoReflect.Descriptor instead.
func (*GetMirrorRulesRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{264}
}

type GetMirrorRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MirrorRules   *vschema.MirrorRules   `protobuf:"bytes,1,opt,name=mirror_rules,json=mirrorRules,proto3" json:"mirror_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMirrorRulesResponse) Reset() {
	*x = GetMirrorRulesResponse{}
	mi := &file_vtctldata_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMirrorRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorRulesResponse) ProtoMessage() {}

func (x *GetMirrorRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorRulesResponse.ProtoReflect.Descriptor instead.
func (*GetMirrorRulesResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{265}
}

func (x *GetMirrorRulesResponse) GetMirrorRules() *vschema.MirrorRules {
	if x != nil {
		return x.MirrorRules
	}
	return nil
}

type WorkflowMirrorTrafficRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow      string                 `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	TabletTypes   []topodata.TabletType  `protobuf:"varint,3,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	Percent       float32                `protobuf:"fixed32,4,opt,name=percent,proto3" json:"percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowMirrorTrafficRequest) Reset() {
	*x = WorkflowMirrorTrafficRequest{}
	mi := &file_vtctldata_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowMirrorTrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMirrorTrafficRequest) ProtoMessage() {}

func (x *WorkflowMirrorTrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMirrorTrafficRequest.ProtoReflect.Descriptor instead.
func (*WorkflowMirrorTrafficRequest) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{266}
}

func (x *WorkflowMirrorTrafficRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *WorkflowMirrorTrafficRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *WorkflowMirrorTrafficRequest) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *WorkflowMirrorTrafficRequest) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type WorkflowMirrorTrafficResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	StartState    string                 `protobuf:"bytes,2,opt,name=start_state,json=startState,proto3" json:"start_state,omitempty"`
	CurrentState  string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowMirrorTrafficResponse) Reset() {
	*x = WorkflowMirrorTrafficResponse{}
	mi := &file_vtctldata_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowMirrorTrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMirrorTrafficResponse) ProtoMessage() {}

func (x *WorkflowMirrorTrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMirrorTrafficResponse.ProtoReflect.Descriptor instead.
func (*WorkflowMirrorTrafficResponse) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{267}
}

func (x *WorkflowMirrorTrafficResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WorkflowMirrorTrafficResponse) GetStartState() string {
	if x != nil {
		return x.StartState
	}
	return ""
}

func (x *WorkflowMirrorTrafficResponse) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

type Workflow_ReplicationLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyspace      string                 `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shards        []string               `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workflow_ReplicationLocation) Reset() {
	*x = Workflow_ReplicationLocation{}
	mi := &file_vtctldata_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_ReplicationLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_ReplicationLocation) ProtoMessage() {}

func (x *Workflow_ReplicationLocation) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_ReplicationLocation.ProtoReflect.Descriptor instead.
func (*Workflow_ReplicationLocation) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Workflow_ReplicationLocation) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Workflow_ReplicationLocation) GetShards() []string {
	if x != nil {
		return x.Shards
	}
	return nil
}

type Workflow_ShardStream struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	Streams          []*Workflow_Stream              `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	TabletControls   []*topodata.Shard_TabletControl `protobuf:"bytes,2,rep,name=tablet_controls,json=tabletControls,proto3" json:"tablet_controls,omitempty"`
	IsPrimaryServing bool                            `protobuf:"varint,3,opt,name=is_primary_serving,json=isPrimaryServing,proto3" json:"is_primary_serving,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Workflow_ShardStream) Reset() {
	*x = Workflow_ShardStream{}
	mi := &file_vtctldata_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_ShardStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_ShardStream) ProtoMessage() {}

func (x *Workflow_ShardStream) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_ShardStream.ProtoReflect.Descriptor instead.
func (*Workflow_ShardStream) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Workflow_ShardStream) GetStreams() []*Workflow_Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *Workflow_ShardStream) GetTabletControls() []*topodata.Shard_TabletControl {
	if x != nil {
		return x.TabletControls
	}
	return nil
}

func (x *Workflow_ShardStream) GetIsPrimaryServing() bool {
	if x != nil {
		return x.IsPrimaryServing
	}
	return false
}

type Workflow_Stream struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	Id                   int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Shard                string                       `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Tablet               *topodata.TabletAlias        `protobuf:"bytes,3,opt,name=tablet,proto3" json:"tablet,omitempty"`
	BinlogSource         *binlogdata.BinlogSource     `protobuf:"bytes,4,opt,name=binlog_source,json=binlogSource,proto3" json:"binlog_source,omitempty"`
	Position             string                       `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	StopPosition         string                       `protobuf:"bytes,6,opt,name=stop_position,json=stopPosition,proto3" json:"stop_position,omitempty"`
	State                string                       `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	DbName               string                       `protobuf:"bytes,8,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TransactionTimestamp *vttime.Time                 `protobuf:"bytes,9,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	TimeUpdated          *vttime.Time                 `protobuf:"bytes,10,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	Message              string                       `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	CopyStates           []*Workflow_Stream_CopyState `protobuf:"bytes,12,rep,name=copy_states,json=copyStates,proto3" json:"copy_states,omitempty"`
	Logs                 []*Workflow_Stream_Log       `protobuf:"bytes,13,rep,name=logs,proto3" json:"logs,omitempty"`
	// LogFetchError is set if we fail to fetch some logs for this stream. We
	// will never fail to fetch workflows because we cannot fetch the logs, but
	// we will still forward log-fetch errors to the caller, should that be
	// relevant to the context in which they are fetching workflows.
	//
	// Note that this field being set does not necessarily mean that Logs is nil;
	// if there are N logs that exist for the stream, and we fail to fetch the
	// ith log, we will still return logs in [0, i) + (i, N].
	LogFetchError             string                                      `protobuf:"bytes,14,opt,name=log_fetch_error,json=logFetchError,proto3" json:"log_fetch_error,omitempty"`
	Tags                      []string                                    `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	RowsCopied                int64                                       `protobuf:"varint,16,opt,name=rows_copied,json=rowsCopied,proto3" json:"rows_copied,omitempty"`
	ThrottlerStatus           *Workflow_Stream_ThrottlerStatus            `protobuf:"bytes,17,opt,name=throttler_status,json=throttlerStatus,proto3" json:"throttler_status,omitempty"`
	TabletTypes               []topodata.TabletType                       `protobuf:"varint,18,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=topodata.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference tabletmanagerdata.TabletSelectionPreference `protobuf:"varint,19,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=tabletmanagerdata.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	Cells                     []string                                    `protobuf:"bytes,20,rep,name=cells,proto3" json:"cells,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Workflow_Stream) Reset() {
	*x = Workflow_Stream{}
	mi := &file_vtctldata_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Stream) ProtoMessage() {}

func (x *Workflow_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Stream.ProtoReflect.Descriptor instead.
func (*Workflow_Stream) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 3}
}

func (x *Workflow_Stream) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Workflow_Stream) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *Workflow_Stream) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *Workflow_Stream) GetBinlogSource() *binlogdata.BinlogSource {
	if x != nil {
		return x.BinlogSource
	}
	return nil
}

func (x *Workflow_Stream) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Workflow_Stream) GetStopPosition() string {
	if x != nil {
		return x.StopPosition
	}
	return ""
}

func (x *Workflow_Stream) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Workflow_Stream) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *Workflow_Stream) GetTransactionTimestamp() *vttime.Time {
	if x != nil {
		return x.TransactionTimestamp
	}
	return nil
}

func (x *Workflow_Stream) GetTimeUpdated() *vttime.Time {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *Workflow_Stream) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Workflow_Stream) GetCopyStates() []*Workflow_Stream_CopyState {
	if x != nil {
		return x.CopyStates
	}
	return nil
}

func (x *Workflow_Stream) GetLogs() []*Workflow_Stream_Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Workflow_Stream) GetLogFetchError() string {
	if x != nil {
		return x.LogFetchError
	}
	return ""
}

func (x *Workflow_Stream) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Workflow_Stream) GetRowsCopied() int64 {
	if x != nil {
		return x.RowsCopied
	}
	return 0
}

func (x *Workflow_Stream) GetThrottlerStatus() *Workflow_Stream_ThrottlerStatus {
	if x != nil {
		return x.ThrottlerStatus
	}
	return nil
}

func (x *Workflow_Stream) GetTabletTypes() []topodata.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *Workflow_Stream) GetTabletSelectionPreference() tabletmanagerdata.TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return tabletmanagerdata.TabletSelectionPreference(0)
}

func (x *Workflow_Stream) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type Workflow_Stream_CopyState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         string                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	LastPk        string                 `protobuf:"bytes,2,opt,name=last_pk,json=lastPk,proto3" json:"last_pk,omitempty"`
	StreamId      int64                  `protobuf:"varint,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workflow_Stream_CopyState) Reset() {
	*x = Workflow_Stream_CopyState{}
	mi := &file_vtctldata_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_Stream_CopyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Stream_CopyState) ProtoMessage() {}

func (x *Workflow_Stream_CopyState) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Stream_CopyState.ProtoReflect.Descriptor instead.
func (*Workflow_Stream_CopyState) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 3, 0}
}

func (x *Workflow_Stream_CopyState) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Workflow_Stream_CopyState) GetLastPk() string {
	if x != nil {
		return x.LastPk
	}
	return ""
}

func (x *Workflow_Stream_CopyState) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type Workflow_Stream_Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamId      int64                  `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt     *vttime.Time           `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *vttime.Time           `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Message       string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Count         int64                  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workflow_Stream_Log) Reset() {
	*x = Workflow_Stream_Log{}
	mi := &file_vtctldata_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_Stream_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Stream_Log) ProtoMessage() {}

func (x *Workflow_Stream_Log) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Stream_Log.ProtoReflect.Descriptor instead.
func (*Workflow_Stream_Log) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 3, 1}
}

func (x *Workflow_Stream_Log) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Workflow_Stream_Log) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Workflow_Stream_Log) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Workflow_Stream_Log) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Workflow_Stream_Log) GetCreatedAt() *vttime.Time {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workflow_Stream_Log) GetUpdatedAt() *vttime.Time {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Workflow_Stream_Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Workflow_Stream_Log) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Workflow_Stream_ThrottlerStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ComponentThrottled string                 `protobuf:"bytes,1,opt,name=component_throttled,json=componentThrottled,proto3" json:"component_throttled,omitempty"`
	TimeThrottled      *vttime.Time           `protobuf:"bytes,2,opt,name=time_throttled,json=timeThrottled,proto3" json:"time_throttled,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Workflow_Stream_ThrottlerStatus) Reset() {
	*x = Workflow_Stream_ThrottlerStatus{}
	mi := &file_vtctldata_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow_Stream_ThrottlerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Stream_ThrottlerStatus) ProtoMessage() {}

func (x *Workflow_Stream_ThrottlerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Stream_ThrottlerStatus.ProtoReflect.Descriptor instead.
func (*Workflow_Stream_ThrottlerStatus) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{8, 3, 2}
}

func (x *Workflow_Stream_ThrottlerStatus) GetComponentThrottled() string {
	if x != nil {
		return x.ComponentThrottled
	}
	return ""
}

func (x *Workflow_Stream_ThrottlerStatus) GetTimeThrottled() *vttime.Time {
	if x != nil {
		return x.TimeThrottled
	}
	return nil
}

type ApplyVSchemaResponse_ParamList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        []string               `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyVSchemaResponse_ParamList) Reset() {
	*x = ApplyVSchemaResponse_ParamList{}
	mi := &file_vtctldata_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyVSchemaResponse_ParamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyVSchemaResponse_ParamList) ProtoMessage() {}

func (x *ApplyVSchemaResponse_ParamList) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyVSchemaResponse_ParamList.ProtoReflect.Descriptor instead.
func (*ApplyVSchemaResponse_ParamList) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{22, 1}
}

func (x *ApplyVSchemaResponse_ParamList) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetSrvKeyspaceNamesResponse_NameList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSrvKeyspaceNamesResponse_NameList) Reset() {
	*x = GetSrvKeyspaceNamesResponse_NameList{}
	mi := &file_vtctldata_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSrvKeyspaceNamesResponse_NameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspaceNamesResponse_NameList) ProtoMessage() {}

func (x *GetSrvKeyspaceNamesResponse_NameList) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspaceNamesResponse_NameList.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspaceNamesResponse_NameList) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{101, 1}
}

func (x *GetSrvKeyspaceNamesResponse_NameList) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type MoveTablesCreateResponse_TabletInfo struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Tablet *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	// Created is set if the workflow was created on this tablet or not.
	Created       bool `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTablesCreateResponse_TabletInfo) Reset() {
	*x = MoveTablesCreateResponse_TabletInfo{}
	mi := &file_vtctldata_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTablesCreateResponse_TabletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCreateResponse_TabletInfo) ProtoMessage() {}

func (x *MoveTablesCreateResponse_TabletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCreateResponse_TabletInfo.ProtoReflect.Descriptor instead.
func (*MoveTablesCreateResponse_TabletInfo) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{160, 0}
}

func (x *MoveTablesCreateResponse_TabletInfo) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *MoveTablesCreateResponse_TabletInfo) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

type WorkflowDeleteResponse_TabletInfo struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Tablet *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	// Delete is set if the workflow was deleted on this tablet.
	Deleted       bool `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowDeleteResponse_TabletInfo) Reset() {
	*x = WorkflowDeleteResponse_TabletInfo{}
	mi := &file_vtctldata_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowDeleteResponse_TabletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowDeleteResponse_TabletInfo) ProtoMessage() {}

func (x *WorkflowDeleteResponse_TabletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowDeleteResponse_TabletInfo.ProtoReflect.Descriptor instead.
func (*WorkflowDeleteResponse_TabletInfo) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{257, 0}
}

func (x *WorkflowDeleteResponse_TabletInfo) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *WorkflowDeleteResponse_TabletInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type WorkflowStatusResponse_TableCopyState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RowsCopied      int64                  `protobuf:"varint,1,opt,name=rows_copied,json=rowsCopied,proto3" json:"rows_copied,omitempty"`
	RowsTotal       int64                  `protobuf:"varint,2,opt,name=rows_total,json=rowsTotal,proto3" json:"rows_total,omitempty"`
	RowsPercentage  float32                `protobuf:"fixed32,3,opt,name=rows_percentage,json=rowsPercentage,proto3" json:"rows_percentage,omitempty"`
	BytesCopied     int64                  `protobuf:"varint,4,opt,name=bytes_copied,json=bytesCopied,proto3" json:"bytes_copied,omitempty"`
	BytesTotal      int64                  `protobuf:"varint,5,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
	BytesPercentage float32                `protobuf:"fixed32,6,opt,name=bytes_percentage,json=bytesPercentage,proto3" json:"bytes_percentage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorkflowStatusResponse_TableCopyState) Reset() {
	*x = WorkflowStatusResponse_TableCopyState{}
	mi := &file_vtctldata_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatusResponse_TableCopyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatusResponse_TableCopyState) ProtoMessage() {}

func (x *WorkflowStatusResponse_TableCopyState) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatusResponse_TableCopyState.ProtoReflect.Descriptor instead.
func (*WorkflowStatusResponse_TableCopyState) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{259, 0}
}

func (x *WorkflowStatusResponse_TableCopyState) GetRowsCopied() int64 {
	if x != nil {
		return x.RowsCopied
	}
	return 0
}

func (x *WorkflowStatusResponse_TableCopyState) GetRowsTotal() int64 {
	if x != nil {
		return x.RowsTotal
	}
	return 0
}

func (x *WorkflowStatusResponse_TableCopyState) GetRowsPercentage() float32 {
	if x != nil {
		return x.RowsPercentage
	}
	return 0
}

func (x *WorkflowStatusResponse_TableCopyState) GetBytesCopied() int64 {
	if x != nil {
		return x.BytesCopied
	}
	return 0
}

func (x *WorkflowStatusResponse_TableCopyState) GetBytesTotal() int64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

func (x *WorkflowStatusResponse_TableCopyState) GetBytesPercentage() float32 {
	if x != nil {
		return x.BytesPercentage
	}
	return 0
}

type WorkflowStatusResponse_ShardStreamState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tablet        *topodata.TabletAlias  `protobuf:"bytes,2,opt,name=tablet,proto3" json:"tablet,omitempty"`
	SourceShard   string                 `protobuf:"bytes,3,opt,name=source_shard,json=sourceShard,proto3" json:"source_shard,omitempty"`
	Position      string                 `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Info          string                 `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowStatusResponse_ShardStreamState) Reset() {
	*x = WorkflowStatusResponse_ShardStreamState{}
	mi := &file_vtctldata_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatusResponse_ShardStreamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatusResponse_ShardStreamState) ProtoMessage() {}

func (x *WorkflowStatusResponse_ShardStreamState) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatusResponse_ShardStreamState.ProtoReflect.Descriptor instead.
func (*WorkflowStatusResponse_ShardStreamState) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{259, 1}
}

func (x *WorkflowStatusResponse_ShardStreamState) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkflowStatusResponse_ShardStreamState) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *WorkflowStatusResponse_ShardStreamState) GetSourceShard() string {
	if x != nil {
		return x.SourceShard
	}
	return ""
}

func (x *WorkflowStatusResponse_ShardStreamState) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *WorkflowStatusResponse_ShardStreamState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowStatusResponse_ShardStreamState) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type WorkflowStatusResponse_ShardStreams struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Streams       []*WorkflowStatusResponse_ShardStreamState `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowStatusResponse_ShardStreams) Reset() {
	*x = WorkflowStatusResponse_ShardStreams{}
	mi := &file_vtctldata_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowStatusResponse_ShardStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStatusResponse_ShardStreams) ProtoMessage() {}

func (x *WorkflowStatusResponse_ShardStreams) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStatusResponse_ShardStreams.ProtoReflect.Descriptor instead.
func (*WorkflowStatusResponse_ShardStreams) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{259, 2}
}

func (x *WorkflowStatusResponse_ShardStreams) GetStreams() []*WorkflowStatusResponse_ShardStreamState {
	if x != nil {
		return x.Streams
	}
	return nil
}

type WorkflowUpdateResponse_TabletInfo struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Tablet *topodata.TabletAlias  `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	// Changed is true if any of the provided values were different
	// than what was already stored on this tablet.
	Changed       bool `protobuf:"varint,2,opt,name=changed,proto3" json:"changed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowUpdateResponse_TabletInfo) Reset() {
	*x = WorkflowUpdateResponse_TabletInfo{}
	mi := &file_vtctldata_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowUpdateResponse_TabletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowUpdateResponse_TabletInfo) ProtoMessage() {}

func (x *WorkflowUpdateResponse_TabletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vtctldata_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowUpdateResponse_TabletInfo.ProtoReflect.Descriptor instead.
func (*WorkflowUpdateResponse_TabletInfo) Descriptor() ([]byte, []int) {
	return file_vtctldata_proto_rawDescGZIP(), []int{263, 0}
}

func (x *WorkflowUpdateResponse_TabletInfo) GetTablet() *topodata.TabletAlias {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *WorkflowUpdateResponse_TabletInfo) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

var File_vtctldata_proto protoreflect.FileDescriptor

const file_vtctldata_proto_rawDesc = "" +
	"\n" +
	"\x0fvtctldata.proto\x12\tvtctldata\x1a\x10binlogdata.proto\x1a\rlogutil.proto\x1a\x0emysqlctl.proto\x1a\vquery.proto\x1a\x15replicationdata.proto\x1a\x17tabletmanagerdata.proto\x1a\x0etopodata.proto\x1a\rvschema.proto\x1a\vvtrpc.proto\x1a\fvttime.proto\"W\n" +
	"\x1aExecuteVtctlCommandRequest\x12\x12\n" +
	"\x04args\x18\x01 \x03(\tR\x04args\x12%\n" +
	"\x0eaction_timeout\x18\x02 \x01(\x03R\ractionTimeout\"C\n" +
	"\x1bExecuteVtctlCommandResponse\x12$\n" +
	"\x05event\x18\x01 \x01(\v2\x0e.logutil.EventR\x05event\"\x89\x01\n" +
	"\x18TableMaterializeSettings\x12!\n" +
	"\ftarget_table\x18\x01 \x01(\tR\vtargetTable\x12+\n" +
	"\x11source_expression\x18\x02 \x01(\tR\x10sourceExpression\x12\x1d\n" +
	"\n" +
	"create_ddl\x18\x03 \x01(\tR\tcreateDdl\"\xf5\x06\n" +
	"\x13MaterializeSettings\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0fsource_keyspace\x18\x02 \x01(\tR\x0esourceKeyspace\x12'\n" +
	"\x0ftarget_keyspace\x18\x03 \x01(\tR\x0etargetKeyspace\x12&\n" +
	"\x0fstop_after_copy\x18\x04 \x01(\bR\rstopAfterCopy\x12J\n" +
	"\x0etable_settings\x18\x05 \x03(\v2#.vtctldata.TableMaterializeSettingsR\rtableSettings\x12\x12\n" +
	"\x04cell\x18\x06 \x01(\tR\x04cell\x12!\n" +
	"\ftablet_types\x18\a \x01(\tR\vtabletTypes\x12)\n" +
	"\x10external_cluster\x18\b \x01(\tR\x0fexternalCluster\x12W\n" +
	"\x16materialization_intent\x18\t \x01(\x0e2 .vtctldata.MaterializationIntentR\x15materializationIntent\x12(\n" +
	"\x10source_time_zone\x18\n" +
	" \x01(\tR\x0esourceTimeZone\x12(\n" +
	"\x10target_time_zone\x18\v \x01(\tR\x0etargetTimeZone\x12#\n" +
	"\rsource_shards\x18\f \x03(\tR\fsourceShards\x12\x15\n" +
	"\x06on_ddl\x18\r \x01(\tR\x05onDdl\x120\n" +
	"\x14defer_secondary_keys\x18\x0e \x01(\bR\x12deferSecondaryKeys\x12l\n" +
	"\x1btablet_selection_preference\x18\x0f \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12\x1f\n" +
	"\vatomic_copy\x18\x10 \x01(\bR\n" +
	"atomicCopy\x12E\n" +
	"\x10workflow_options\x18\x11 \x01(\v2\x1a.vtctldata.WorkflowOptionsR\x0fworkflowOptions\x12)\n" +
	"\x10reference_tables\x18\x12 \x03(\tR\x0freferenceTables\"N\n" +
	"\bKeyspace\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12.\n" +
	"\bkeyspace\x18\x02 \x01(\v2\x12.topodata.KeyspaceR\bkeyspace\"\xb6\x13\n" +
	"\x0fSchemaMigration\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x1a\n" +
	"\bkeyspace\x18\x02 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x03 \x01(\tR\x05shard\x12\x16\n" +
	"\x06schema\x18\x04 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x05 \x01(\tR\x05table\x12/\n" +
	"\x13migration_statement\x18\x06 \x01(\tR\x12migrationStatement\x12?\n" +
	"\bstrategy\x18\a \x01(\x0e2#.vtctldata.SchemaMigration.StrategyR\bstrategy\x12\x18\n" +
	"\aoptions\x18\b \x01(\tR\aoptions\x12'\n" +
	"\badded_at\x18\t \x01(\v2\f.vttime.TimeR\aaddedAt\x12/\n" +
	"\frequested_at\x18\n" +
	" \x01(\v2\f.vttime.TimeR\vrequestedAt\x12'\n" +
	"\bready_at\x18\v \x01(\v2\f.vttime.TimeR\areadyAt\x12+\n" +
	"\n" +
	"started_at\x18\f \x01(\v2\f.vttime.TimeR\tstartedAt\x12;\n" +
	"\x12liveness_timestamp\x18\r \x01(\v2\f.vttime.TimeR\x11livenessTimestamp\x12/\n" +
	"\fcompleted_at\x18\x0e \x01(\v2\f.vttime.TimeR\vcompletedAt\x120\n" +
	"\rcleaned_up_at\x18\x0f \x01(\v2\f.vttime.TimeR\vcleanedUpAt\x129\n" +
	"\x06status\x18\x10 \x01(\x0e2!.vtctldata.SchemaMigration.StatusR\x06status\x12\x19\n" +
	"\blog_path\x18\x11 \x01(\tR\alogPath\x12\x1c\n" +
	"\tartifacts\x18\x12 \x01(\tR\tartifacts\x12\x18\n" +
	"\aretries\x18\x13 \x01(\x04R\aretries\x12-\n" +
	"\x06tablet\x18\x14 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12%\n" +
	"\x0etablet_failure\x18\x15 \x01(\bR\rtabletFailure\x12\x1a\n" +
	"\bprogress\x18\x16 \x01(\x02R\bprogress\x12+\n" +
	"\x11migration_context\x18\x17 \x01(\tR\x10migrationContext\x12\x1d\n" +
	"\n" +
	"ddl_action\x18\x18 \x01(\tR\tddlAction\x12\x18\n" +
	"\amessage\x18\x19 \x01(\tR\amessage\x12\x1f\n" +
	"\veta_seconds\x18\x1a \x01(\x03R\n" +
	"etaSeconds\x12\x1f\n" +
	"\vrows_copied\x18\x1b \x01(\x04R\n" +
	"rowsCopied\x12\x1d\n" +
	"\n" +
	"table_rows\x18\x1c \x01(\x03R\ttableRows\x12*\n" +
	"\x11added_unique_keys\x18\x1d \x01(\rR\x0faddedUniqueKeys\x12.\n" +
	"\x13removed_unique_keys\x18\x1e \x01(\rR\x11removedUniqueKeys\x12\x19\n" +
	"\blog_file\x18\x1f \x01(\tR\alogFile\x12?\n" +
	"\x12artifact_retention\x18  \x01(\v2\x10.vttime.DurationR\x11artifactRetention\x12/\n" +
	"\x13postpone_completion\x18! \x01(\bR\x12postponeCompletion\x127\n" +
	"\x18removed_unique_key_names\x18\" \x01(\tR\x15removedUniqueKeyNames\x12D\n" +
	"\x1fdropped_no_default_column_names\x18# \x01(\tR\x1bdroppedNoDefaultColumnNames\x122\n" +
	"\x15expanded_column_names\x18$ \x01(\tR\x13expandedColumnNames\x12)\n" +
	"\x10revertible_notes\x18% \x01(\tR\x0frevertibleNotes\x12)\n" +
	"\x10allow_concurrent\x18& \x01(\bR\x0fallowConcurrent\x12#\n" +
	"\rreverted_uuid\x18' \x01(\tR\frevertedUuid\x12\x17\n" +
	"\ais_view\x18( \x01(\bR\x06isView\x12*\n" +
	"\x11ready_to_complete\x18) \x01(\bR\x0freadyToComplete\x12:\n" +
	"\x19vitess_liveness_indicator\x18* \x01(\x03R\x17vitessLivenessIndicator\x12.\n" +
	"\x13user_throttle_ratio\x18+ \x01(\x02R\x11userThrottleRatio\x12!\n" +
	"\fspecial_plan\x18, \x01(\tR\vspecialPlan\x128\n" +
	"\x11last_throttled_at\x18- \x01(\v2\f.vttime.TimeR\x0flastThrottledAt\x12/\n" +
	"\x13component_throttled\x18. \x01(\tR\x12componentThrottled\x12/\n" +
	"\fcancelled_at\x18/ \x01(\v2\f.vttime.TimeR\vcancelledAt\x12'\n" +
	"\x0fpostpone_launch\x180 \x01(\bR\x0epostponeLaunch\x12\x14\n" +
	"\x05stage\x181 \x01(\tR\x05stage\x12)\n" +
	"\x10cutover_attempts\x182 \x01(\rR\x0fcutoverAttempts\x124\n" +
	"\x16is_immediate_operation\x183 \x01(\bR\x14isImmediateOperation\x12-\n" +
	"\vreviewed_at\x184 \x01(\v2\f.vttime.TimeR\n" +
	"reviewedAt\x12=\n" +
	"\x14ready_to_complete_at\x185 \x01(\v2\f.vttime.TimeR\x11readyToCompleteAt\x129\n" +
	"\x19removed_foreign_key_names\x186 \x01(\tR\x16removedForeignKeyNames\"I\n" +
	"\bStrategy\x12\n" +
	"\n" +
	"\x06VITESS\x10\x00\x12\n" +
	"\n" +
	"\x06ONLINE\x10\x00\x12\n" +
	"\n" +
	"\x06DIRECT\x10\x03\x12\t\n" +
	"\x05MYSQL\x10\x04\x1a\x02\x10\x01\"\x04\b\x01\x10\x01\"\x04\b\x02\x10\x02\"q\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tREQUESTED\x10\x01\x12\r\n" +
	"\tCANCELLED\x10\x02\x12\n" +
	"\n" +
	"\x06QUEUED\x10\x03\x12\t\n" +
	"\x05READY\x10\x04\x12\v\n" +
	"\aRUNNING\x10\x05\x12\f\n" +
	"\bCOMPLETE\x10\x06\x12\n" +
	"\n" +
	"\x06FAILED\x10\a\"^\n" +
	"\x05Shard\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x05shard\x18\x03 \x01(\v2\x0f.topodata.ShardR\x05shard\"\x83\x03\n" +
	"\x0fWorkflowOptions\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12n\n" +
	"\x1fsharded_auto_increment_handling\x18\x02 \x01(\x0e2'.vtctldata.ShardedAutoIncrementHandlingR\x1cshardedAutoIncrementHandling\x12\x16\n" +
	"\x06shards\x18\x03 \x03(\tR\x06shards\x12>\n" +
	"\x06config\x18\x04 \x03(\v2&.vtctldata.WorkflowOptions.ConfigEntryR\x06config\x12'\n" +
	"\x0fglobal_keyspace\x18\x05 \x01(\tR\x0eglobalKeyspace\x12'\n" +
	"\x0flookup_vindexes\x18\x06 \x03(\tR\x0elookupVindexes\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x11\n" +
	"\bWorkflow\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12?\n" +
	"\x06source\x18\x02 \x01(\v2'.vtctldata.Workflow.ReplicationLocationR\x06source\x12?\n" +
	"\x06target\x18\x03 \x01(\v2'.vtctldata.Workflow.ReplicationLocationR\x06target\x121\n" +
	"\x15max_v_replication_lag\x18\x04 \x01(\x03R\x12maxVReplicationLag\x12J\n" +
	"\rshard_streams\x18\x05 \x03(\v2%.vtctldata.Workflow.ShardStreamsEntryR\fshardStreams\x12#\n" +
	"\rworkflow_type\x18\x06 \x01(\tR\fworkflowType\x12*\n" +
	"\x11workflow_sub_type\x18\a \x01(\tR\x0fworkflowSubType\x12H\n" +
	"!max_v_replication_transaction_lag\x18\b \x01(\x03R\x1dmaxVReplicationTransactionLag\x120\n" +
	"\x14defer_secondary_keys\x18\t \x01(\bR\x12deferSecondaryKeys\x124\n" +
	"\aoptions\x18\n" +
	" \x01(\v2\x1a.vtctldata.WorkflowOptionsR\aoptions\x1a`\n" +
	"\x11ShardStreamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.vtctldata.Workflow.ShardStreamR\x05value:\x028\x01\x1aI\n" +
	"\x13ReplicationLocation\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x16\n" +
	"\x06shards\x18\x02 \x03(\tR\x06shards\x1a\xb9\x01\n" +
	"\vShardStream\x124\n" +
	"\astreams\x18\x01 \x03(\v2\x1a.vtctldata.Workflow.StreamR\astreams\x12F\n" +
	"\x0ftablet_controls\x18\x02 \x03(\v2\x1d.topodata.Shard.TabletControlR\x0etabletControls\x12,\n" +
	"\x12is_primary_serving\x18\x03 \x01(\bR\x10isPrimaryServing\x1a\xc1\n" +
	"\n" +
	"\x06Stream\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12-\n" +
	"\x06tablet\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12=\n" +
	"\rbinlog_source\x18\x04 \x01(\v2\x18.binlogdata.BinlogSourceR\fbinlogSource\x12\x1a\n" +
	"\bposition\x18\x05 \x01(\tR\bposition\x12#\n" +
	"\rstop_position\x18\x06 \x01(\tR\fstopPosition\x12\x14\n" +
	"\x05state\x18\a \x01(\tR\x05state\x12\x17\n" +
	"\adb_name\x18\b \x01(\tR\x06dbName\x12A\n" +
	"\x15transaction_timestamp\x18\t \x01(\v2\f.vttime.TimeR\x14transactionTimestamp\x12/\n" +
	"\ftime_updated\x18\n" +
	" \x01(\v2\f.vttime.TimeR\vtimeUpdated\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\x12E\n" +
	"\vcopy_states\x18\f \x03(\v2$.vtctldata.Workflow.Stream.CopyStateR\n" +
	"copyStates\x122\n" +
	"\x04logs\x18\r \x03(\v2\x1e.vtctldata.Workflow.Stream.LogR\x04logs\x12&\n" +
	"\x0flog_fetch_error\x18\x0e \x01(\tR\rlogFetchError\x12\x12\n" +
	"\x04tags\x18\x0f \x03(\tR\x04tags\x12\x1f\n" +
	"\vrows_copied\x18\x10 \x01(\x03R\n" +
	"rowsCopied\x12U\n" +
	"\x10throttler_status\x18\x11 \x01(\v2*.vtctldata.Workflow.Stream.ThrottlerStatusR\x0fthrottlerStatus\x127\n" +
	"\ftablet_types\x18\x12 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\x13 \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12\x14\n" +
	"\x05cells\x18\x14 \x03(\tR\x05cells\x1aW\n" +
	"\tCopyState\x12\x14\n" +
	"\x05table\x18\x01 \x01(\tR\x05table\x12\x17\n" +
	"\alast_pk\x18\x02 \x01(\tR\x06lastPk\x12\x1b\n" +
	"\tstream_id\x18\x03 \x01(\x03R\bstreamId\x1a\xe6\x01\n" +
	"\x03Log\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\x03R\bstreamId\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x14\n" +
	"\x05state\x18\x04 \x01(\tR\x05state\x12+\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\f.vttime.TimeR\tcreatedAt\x12+\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\f.vttime.TimeR\tupdatedAt\x12\x18\n" +
	"\amessage\x18\a \x01(\tR\amessage\x12\x14\n" +
	"\x05count\x18\b \x01(\x03R\x05count\x1aw\n" +
	"\x0fThrottlerStatus\x12/\n" +
	"\x13component_throttled\x18\x01 \x01(\tR\x12componentThrottled\x123\n" +
	"\x0etime_throttled\x18\x02 \x01(\v2\f.vttime.TimeR\rtimeThrottled\"Y\n" +
	"\x12AddCellInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\tcell_info\x18\x02 \x01(\v2\x12.topodata.CellInfoR\bcellInfo\"\x15\n" +
	"\x13AddCellInfoResponse\"@\n" +
	"\x14AddCellsAliasRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05cells\x18\x02 \x03(\tR\x05cells\"\x17\n" +
	"\x15AddCellsAliasResponse\"\xbf\x01\n" +
	" ApplyKeyspaceRoutingRulesRequest\x12S\n" +
	"\x16keyspace_routing_rules\x18\x01 \x01(\v2\x1d.vschema.KeyspaceRoutingRulesR\x14keyspaceRoutingRules\x12!\n" +
	"\fskip_rebuild\x18\x02 \x01(\bR\vskipRebuild\x12#\n" +
	"\rrebuild_cells\x18\x03 \x03(\tR\frebuildCells\"x\n" +
	"!ApplyKeyspaceRoutingRulesResponse\x12S\n" +
	"\x16keyspace_routing_rules\x18\x01 \x01(\v2\x1d.vschema.KeyspaceRoutingRulesR\x14keyspaceRoutingRules\"\x9e\x01\n" +
	"\x18ApplyRoutingRulesRequest\x12:\n" +
	"\rrouting_rules\x18\x01 \x01(\v2\x15.vschema.RoutingRulesR\froutingRules\x12!\n" +
	"\fskip_rebuild\x18\x02 \x01(\bR\vskipRebuild\x12#\n" +
	"\rrebuild_cells\x18\x03 \x03(\tR\frebuildCells\"\x1b\n" +
	"\x19ApplyRoutingRulesResponse\"\xb3\x01\n" +
	"\x1dApplyShardRoutingRulesRequest\x12J\n" +
	"\x13shard_routing_rules\x18\x01 \x01(\v2\x1a.vschema.ShardRoutingRulesR\x11shardRoutingRules\x12!\n" +
	"\fskip_rebuild\x18\x02 \x01(\bR\vskipRebuild\x12#\n" +
	"\rrebuild_cells\x18\x03 \x03(\tR\frebuildCells\" \n" +
	"\x1eApplyShardRoutingRulesResponse\"\xce\x02\n" +
	"\x12ApplySchemaRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x10\n" +
	"\x03sql\x18\x03 \x03(\tR\x03sql\x12!\n" +
	"\fddl_strategy\x18\x04 \x01(\tR\vddlStrategy\x12\x1b\n" +
	"\tuuid_list\x18\x05 \x03(\tR\buuidList\x12+\n" +
	"\x11migration_context\x18\x06 \x01(\tR\x10migrationContext\x12D\n" +
	"\x15wait_replicas_timeout\x18\a \x01(\v2\x10.vttime.DurationR\x13waitReplicasTimeout\x12,\n" +
	"\tcaller_id\x18\t \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\x12\x1d\n" +
	"\n" +
	"batch_size\x18\n" +
	" \x01(\x03R\tbatchSizeJ\x04\b\x02\x10\x03J\x04\b\b\x10\t\"\xe8\x01\n" +
	"\x13ApplySchemaResponse\x12\x1b\n" +
	"\tuuid_list\x18\x01 \x03(\tR\buuidList\x12l\n" +
	"\x16rows_affected_by_shard\x18\x02 \x03(\v27.vtctldata.ApplySchemaResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xdb\x01\n" +
	"\x13ApplyVSchemaRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12!\n" +
	"\fskip_rebuild\x18\x02 \x01(\bR\vskipRebuild\x12\x17\n" +
	"\adry_run\x18\x03 \x01(\bR\x06dryRun\x12\x14\n" +
	"\x05cells\x18\x04 \x03(\tR\x05cells\x12,\n" +
	"\bv_schema\x18\x05 \x01(\v2\x11.vschema.KeyspaceR\avSchema\x12\x10\n" +
	"\x03sql\x18\x06 \x01(\tR\x03sql\x12\x16\n" +
	"\x06strict\x18\a \x01(\bR\x06strict\"\xca\x02\n" +
	"\x14ApplyVSchemaResponse\x12,\n" +
	"\bv_schema\x18\x01 \x01(\v2\x11.vschema.KeyspaceR\avSchema\x12l\n" +
	"\x15unknown_vindex_params\x18\x02 \x03(\v28.vtctldata.ApplyVSchemaResponse.UnknownVindexParamsEntryR\x13unknownVindexParams\x1aq\n" +
	"\x18UnknownVindexParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12?\n" +
	"\x05value\x18\x02 \x01(\v2).vtctldata.ApplyVSchemaResponse.ParamListR\x05value:\x028\x01\x1a#\n" +
	"\tParamList\x12\x16\n" +
	"\x06params\x18\x01 \x03(\tR\x06params\"\xe9\x02\n" +
	"\rBackupRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12#\n" +
	"\rallow_primary\x18\x02 \x01(\bR\fallowPrimary\x12 \n" +
	"\vconcurrency\x18\x03 \x01(\x05R\vconcurrency\x120\n" +
	"\x14incremental_from_pos\x18\x04 \x01(\tR\x12incrementalFromPos\x12!\n" +
	"\fupgrade_safe\x18\x05 \x01(\bR\vupgradeSafe\x12(\n" +
	"\rbackup_engine\x18\x06 \x01(\tH\x00R\fbackupEngine\x88\x01\x01\x12F\n" +
	"\x16mysql_shutdown_timeout\x18\a \x01(\v2\x10.vttime.DurationR\x14mysqlShutdownTimeoutB\x10\n" +
	"\x0e_backup_engine\"\xa2\x01\n" +
	"\x0eBackupResponse\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x1a\n" +
	"\bkeyspace\x18\x02 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x03 \x01(\tR\x05shard\x12$\n" +
	"\x05event\x18\x04 \x01(\v2\x0e.logutil.EventR\x05event\"\xaa\x02\n" +
	"\x12BackupShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12#\n" +
	"\rallow_primary\x18\x03 \x01(\bR\fallowPrimary\x12 \n" +
	"\vconcurrency\x18\x04 \x01(\x05R\vconcurrency\x12!\n" +
	"\fupgrade_safe\x18\x05 \x01(\bR\vupgradeSafe\x120\n" +
	"\x14incremental_from_pos\x18\x06 \x01(\tR\x12incrementalFromPos\x12F\n" +
	"\x16mysql_shutdown_timeout\x18\a \x01(\v2\x10.vttime.DurationR\x14mysqlShutdownTimeout\"|\n" +
	"\x1cCancelSchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xdf\x01\n" +
	"\x1dCancelSchemaMigrationResponse\x12v\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2A.vtctldata.CancelSchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xe8\x01\n" +
	"\x17ChangeTabletTagsRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12@\n" +
	"\x04tags\x18\x02 \x03(\v2,.vtctldata.ChangeTabletTagsRequest.TagsEntryR\x04tags\x12\x18\n" +
	"\areplace\x18\x03 \x01(\bR\areplace\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x02\n" +
	"\x18ChangeTabletTagsResponse\x12T\n" +
	"\vbefore_tags\x18\x01 \x03(\v23.vtctldata.ChangeTabletTagsResponse.BeforeTagsEntryR\n" +
	"beforeTags\x12Q\n" +
	"\n" +
	"after_tags\x18\x02 \x03(\v22.vtctldata.ChangeTabletTagsResponse.AfterTagsEntryR\tafterTags\x1a=\n" +
	"\x0fBeforeTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a<\n" +
	"\x0eAfterTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9b\x01\n" +
	"\x17ChangeTabletTypeRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12-\n" +
	"\adb_type\x18\x02 \x01(\x0e2\x14.topodata.TabletTypeR\x06dbType\x12\x17\n" +
	"\adry_run\x18\x03 \x01(\bR\x06dryRun\"\xa6\x01\n" +
	"\x18ChangeTabletTypeResponse\x125\n" +
	"\rbefore_tablet\x18\x01 \x01(\v2\x10.topodata.TabletR\fbeforeTablet\x123\n" +
	"\fafter_tablet\x18\x02 \x01(\v2\x10.topodata.TabletR\vafterTablet\x12\x1e\n" +
	"\vwas_dry_run\x18\x03 \x01(\bR\twasDryRun\"\xe3\x01\n" +
	"\x15CheckThrottlerRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x19\n" +
	"\bapp_name\x18\x02 \x01(\tR\aappName\x12\x14\n" +
	"\x05scope\x18\x03 \x01(\tR\x05scope\x126\n" +
	"\x17skip_request_heartbeats\x18\x04 \x01(\bR\x15skipRequestHeartbeats\x12'\n" +
	"\x10ok_if_not_exists\x18\x05 \x01(\bR\rokIfNotExists\"\x93\x01\n" +
	"\x16CheckThrottlerResponse\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12?\n" +
	"\x05Check\x18\x02 \x01(\v2).tabletmanagerdata.CheckThrottlerResponseR\x05Check\"}\n" +
	"\x1dCleanupSchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xe1\x01\n" +
	"\x1eCleanupSchemaMigrationResponse\x12w\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2B.vtctldata.CleanupSchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"~\n" +
	"\x1eCompleteSchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xe3\x01\n" +
	"\x1fCompleteSchemaMigrationResponse\x12x\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2C.vtctldata.CompleteSchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\x8a\x03\n" +
	"\x16CopySchemaShardRequest\x12E\n" +
	"\x13source_tablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x11sourceTabletAlias\x12\x16\n" +
	"\x06tables\x18\x02 \x03(\tR\x06tables\x12%\n" +
	"\x0eexclude_tables\x18\x03 \x03(\tR\rexcludeTables\x12#\n" +
	"\rinclude_views\x18\x04 \x01(\bR\fincludeViews\x12\x1f\n" +
	"\vskip_verify\x18\x05 \x01(\bR\n" +
	"skipVerify\x12D\n" +
	"\x15wait_replicas_timeout\x18\x06 \x01(\v2\x10.vttime.DurationR\x13waitReplicasTimeout\x121\n" +
	"\x14destination_keyspace\x18\a \x01(\tR\x13destinationKeyspace\x12+\n" +
	"\x11destination_shard\x18\b \x01(\tR\x10destinationShard\"\x19\n" +
	"\x17CopySchemaShardResponse\"\xdd\x02\n" +
	"\x15CreateKeyspaceRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\x12/\n" +
	"\x14allow_empty_v_schema\x18\x03 \x01(\bR\x11allowEmptyVSchema\x12*\n" +
	"\x04type\x18\a \x01(\x0e2\x16.topodata.KeyspaceTypeR\x04type\x12#\n" +
	"\rbase_keyspace\x18\b \x01(\tR\fbaseKeyspace\x121\n" +
	"\rsnapshot_time\x18\t \x01(\v2\f.vttime.TimeR\fsnapshotTime\x12+\n" +
	"\x11durability_policy\x18\n" +
	" \x01(\tR\x10durabilityPolicy\x12&\n" +
	"\x0fsidecar_db_name\x18\v \x01(\tR\rsidecarDbNameJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\a\"I\n" +
	"\x16CreateKeyspaceResponse\x12/\n" +
	"\bkeyspace\x18\x01 \x01(\v2\x13.vtctldata.KeyspaceR\bkeyspace\"\x8c\x01\n" +
	"\x12CreateShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\x12%\n" +
	"\x0einclude_parent\x18\x04 \x01(\bR\rincludeParent\"\xa0\x01\n" +
	"\x13CreateShardResponse\x12/\n" +
	"\bkeyspace\x18\x01 \x01(\v2\x13.vtctldata.KeyspaceR\bkeyspace\x12&\n" +
	"\x05shard\x18\x02 \x01(\v2\x10.vtctldata.ShardR\x05shard\x120\n" +
	"\x14shard_already_exists\x18\x03 \x01(\bR\x12shardAlreadyExists\"A\n" +
	"\x15DeleteCellInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\x18\n" +
	"\x16DeleteCellInfoResponse\"-\n" +
	"\x17DeleteCellsAliasRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x1a\n" +
	"\x18DeleteCellsAliasResponse\"g\n" +
	"\x15DeleteKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\"\x18\n" +
	"\x16DeleteKeyspaceResponse\"\x9b\x01\n" +
	"\x13DeleteShardsRequest\x12(\n" +
	"\x06shards\x18\x01 \x03(\v2\x10.vtctldata.ShardR\x06shards\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\x12&\n" +
	"\x0feven_if_serving\x18\x04 \x01(\bR\revenIfServing\x12\x14\n" +
	"\x05force\x18\x05 \x01(\bR\x05force\"\x16\n" +
	"\x14DeleteShardsResponse\"-\n" +
	"\x17DeleteSrvVSchemaRequest\x12\x12\n" +
	"\x04cell\x18\x01 \x01(\tR\x04cell\"\x1a\n" +
	"\x18DeleteSrvVSchemaResponse\"y\n" +
	"\x14DeleteTabletsRequest\x12<\n" +
	"\x0etablet_aliases\x18\x01 \x03(\v2\x15.topodata.TabletAliasR\rtabletAliases\x12#\n" +
	"\rallow_primary\x18\x02 \x01(\bR\fallowPrimary\"\x17\n" +
	"\x15DeleteTabletsResponse\"\xc3\x03\n" +
	"\x1dEmergencyReparentShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x126\n" +
	"\vnew_primary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\n" +
	"newPrimary\x12>\n" +
	"\x0fignore_replicas\x18\x04 \x03(\v2\x15.topodata.TabletAliasR\x0eignoreReplicas\x12D\n" +
	"\x15wait_replicas_timeout\x18\x05 \x01(\v2\x10.vttime.DurationR\x13waitReplicasTimeout\x12?\n" +
	"\x1cprevent_cross_cell_promotion\x18\x06 \x01(\bR\x19preventCrossCellPromotion\x12/\n" +
	"\x14wait_for_all_tablets\x18\a \x01(\bR\x11waitForAllTablets\x12@\n" +
	"\x10expected_primary\x18\b \x01(\v2\x15.topodata.TabletAliasR\x0fexpectedPrimary\"\xbc\x01\n" +
	"\x1eEmergencyReparentShardResponse\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12@\n" +
	"\x10promoted_primary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\x0fpromotedPrimary\x12&\n" +
	"\x06events\x18\x04 \x03(\v2\x0e.logutil.EventR\x06events\"\xa0\x01\n" +
	"\x18ExecuteFetchAsAppRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12\x19\n" +
	"\bmax_rows\x18\x03 \x01(\x03R\amaxRows\x12\x19\n" +
	"\buse_pool\x18\x04 \x01(\bR\ausePool\"G\n" +
	"\x19ExecuteFetchAsAppResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"\xd3\x01\n" +
	"\x18ExecuteFetchAsDBARequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12\x19\n" +
	"\bmax_rows\x18\x03 \x01(\x03R\amaxRows\x12'\n" +
	"\x0fdisable_binlogs\x18\x04 \x01(\bR\x0edisableBinlogs\x12#\n" +
	"\rreload_schema\x18\x05 \x01(\bR\freloadSchema\"G\n" +
	"\x19ExecuteFetchAsDBAResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result\"\xa5\x01\n" +
	"\x12ExecuteHookRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12U\n" +
	"\x13tablet_hook_request\x18\x02 \x01(\v2%.tabletmanagerdata.ExecuteHookRequestR\x11tabletHookRequest\"^\n" +
	"\x13ExecuteHookResponse\x12G\n" +
	"\vhook_result\x18\x01 \x01(\v2&.tabletmanagerdata.ExecuteHookResponseR\n" +
	"hookResult\"\xd4\x01\n" +
	"\x1dExecuteMultiFetchAsDBARequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x10\n" +
	"\x03sql\x18\x02 \x01(\tR\x03sql\x12\x19\n" +
	"\bmax_rows\x18\x03 \x01(\x03R\amaxRows\x12'\n" +
	"\x0fdisable_binlogs\x18\x04 \x01(\bR\x0edisableBinlogs\x12#\n" +
	"\rreload_schema\x18\x05 \x01(\bR\freloadSchema\"N\n" +
	"\x1eExecuteMultiFetchAsDBAResponse\x12,\n" +
	"\aresults\x18\x01 \x03(\v2\x12.query.QueryResultR\aresults\"<\n" +
	"\x1eFindAllShardsInKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\"\xbe\x01\n" +
	"\x1fFindAllShardsInKeyspaceResponse\x12N\n" +
	"\x06shards\x18\x01 \x03(\v26.vtctldata.FindAllShardsInKeyspaceResponse.ShardsEntryR\x06shards\x1aK\n" +
	"\vShardsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.vtctldata.ShardR\x05value:\x028\x01\"\x82\x01\n" +
	"\"ForceCutOverSchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xeb\x01\n" +
	"#ForceCutOverSchemaMigrationResponse\x12|\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2G.vtctldata.ForceCutOverSchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\x9e\x01\n" +
	"\x11GetBackupsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\rR\x05limit\x12\x1a\n" +
	"\bdetailed\x18\x04 \x01(\bR\bdetailed\x12%\n" +
	"\x0edetailed_limit\x18\x05 \x01(\rR\rdetailedLimit\"D\n" +
	"\x12GetBackupsResponse\x12.\n" +
	"\abackups\x18\x01 \x03(\v2\x14.mysqlctl.BackupInfoR\abackups\"(\n" +
	"\x12GetCellInfoRequest\x12\x12\n" +
	"\x04cell\x18\x01 \x01(\tR\x04cell\"F\n" +
	"\x13GetCellInfoResponse\x12/\n" +
	"\tcell_info\x18\x01 \x01(\v2\x12.topodata.CellInfoR\bcellInfo\"\x19\n" +
	"\x17GetCellInfoNamesRequest\"0\n" +
	"\x18GetCellInfoNamesResponse\x12\x14\n" +
	"\x05names\x18\x01 \x03(\tR\x05names\"\x18\n" +
	"\x16GetCellsAliasesRequest\"\xb6\x01\n" +
	"\x17GetCellsAliasesResponse\x12I\n" +
	"\aaliases\x18\x01 \x03(\v2/.vtctldata.GetCellsAliasesResponse.AliasesEntryR\aaliases\x1aP\n" +
	"\fAliasesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.topodata.CellsAliasR\x05value:\x028\x01\"P\n" +
	"\x14GetFullStatusRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"L\n" +
	"\x15GetFullStatusResponse\x123\n" +
	"\x06status\x18\x01 \x01(\v2\x1b.replicationdata.FullStatusR\x06status\"\x15\n" +
	"\x13GetKeyspacesRequest\"I\n" +
	"\x14GetKeyspacesResponse\x121\n" +
	"\tkeyspaces\x18\x01 \x03(\v2\x13.vtctldata.KeyspaceR\tkeyspaces\"0\n" +
	"\x12GetKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\"F\n" +
	"\x13GetKeyspaceResponse\x12/\n" +
	"\bkeyspace\x18\x01 \x01(\v2\x13.vtctldata.KeyspaceR\bkeyspace\"Q\n" +
	"\x15GetPermissionsRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"Z\n" +
	"\x16GetPermissionsResponse\x12@\n" +
	"\vpermissions\x18\x01 \x01(\v2\x1e.tabletmanagerdata.PermissionsR\vpermissions\" \n" +
	"\x1eGetKeyspaceRoutingRulesRequest\"v\n" +
	"\x1fGetKeyspaceRoutingRulesResponse\x12S\n" +
	"\x16keyspace_routing_rules\x18\x01 \x01(\v2\x1d.vschema.KeyspaceRoutingRulesR\x14keyspaceRoutingRules\"\x18\n" +
	"\x16GetRoutingRulesRequest\"U\n" +
	"\x17GetRoutingRulesResponse\x12:\n" +
	"\rrouting_rules\x18\x01 \x01(\v2\x15.vschema.RoutingRulesR\froutingRules\"\xb0\x02\n" +
	"\x10GetSchemaRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x16\n" +
	"\x06tables\x18\x02 \x03(\tR\x06tables\x12%\n" +
	"\x0eexclude_tables\x18\x03 \x03(\tR\rexcludeTables\x12#\n" +
	"\rinclude_views\x18\x04 \x01(\bR\fincludeViews\x12(\n" +
	"\x10table_names_only\x18\x05 \x01(\bR\x0etableNamesOnly\x12(\n" +
	"\x10table_sizes_only\x18\x06 \x01(\bR\x0etableSizesOnly\x12*\n" +
	"\x11table_schema_only\x18\a \x01(\bR\x0ftableSchemaOnly\"P\n" +
	"\x11GetSchemaResponse\x12;\n" +
	"\x06schema\x18\x01 \x01(\v2#.tabletmanagerdata.SchemaDefinitionR\x06schema\"\xb8\x02\n" +
	"\x1aGetSchemaMigrationsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12+\n" +
	"\x11migration_context\x18\x03 \x01(\tR\x10migrationContext\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.vtctldata.SchemaMigration.StatusR\x06status\x12(\n" +
	"\x06recent\x18\x05 \x01(\v2\x10.vttime.DurationR\x06recent\x12.\n" +
	"\x05order\x18\x06 \x01(\x0e2\x18.vtctldata.QueryOrderingR\x05order\x12\x14\n" +
	"\x05limit\x18\a \x01(\x04R\x05limit\x12\x12\n" +
	"\x04skip\x18\b \x01(\x04R\x04skip\"Y\n" +
	"\x1bGetSchemaMigrationsResponse\x12:\n" +
	"\n" +
	"migrations\x18\x01 \x03(\v2\x1a.vtctldata.SchemaMigrationR\n" +
	"migrations\"d\n" +
	"\x1aGetShardReplicationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x14\n" +
	"\x05cells\x18\x03 \x03(\tR\x05cells\"\x83\x02\n" +
	"\x1bGetShardReplicationResponse\x12}\n" +
	"\x19shard_replication_by_cell\x18\x01 \x03(\v2B.vtctldata.GetShardReplicationResponse.ShardReplicationByCellEntryR\x16shardReplicationByCell\x1ae\n" +
	"\x1bShardReplicationByCellEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.topodata.ShardReplicationR\x05value:\x028\x01\"L\n" +
	"\x0fGetShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\":\n" +
	"\x10GetShardResponse\x12&\n" +
	"\x05shard\x18\x01 \x01(\v2\x10.vtctldata.ShardR\x05shard\"\x1d\n" +
	"\x1bGetShardRoutingRulesRequest\"j\n" +
	"\x1cGetShardRoutingRulesResponse\x12J\n" +
	"\x13shard_routing_rules\x18\x01 \x01(\v2\x1a.vschema.ShardRoutingRulesR\x11shardRoutingRules\"2\n" +
	"\x1aGetSrvKeyspaceNamesRequest\x12\x14\n" +
	"\x05cells\x18\x01 \x03(\tR\x05cells\"\xf3\x01\n" +
	"\x1bGetSrvKeyspaceNamesResponse\x12G\n" +
	"\x05names\x18\x01 \x03(\v21.vtctldata.GetSrvKeyspaceNamesResponse.NamesEntryR\x05names\x1ai\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12E\n" +
	"\x05value\x18\x02 \x01(\v2/.vtctldata.GetSrvKeyspaceNamesResponse.NameListR\x05value:\x028\x01\x1a \n" +
	"\bNameList\x12\x14\n" +
	"\x05names\x18\x01 \x03(\tR\x05names\"J\n" +
	"\x16GetSrvKeyspacesRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05cells\x18\x02 \x03(\tR\x05cells\"\xcc\x01\n" +
	"\x17GetSrvKeyspacesResponse\x12Y\n" +
	"\rsrv_keyspaces\x18\x01 \x03(\v24.vtctldata.GetSrvKeyspacesResponse.SrvKeyspacesEntryR\fsrvKeyspaces\x1aV\n" +
	"\x11SrvKeyspacesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.topodata.SrvKeyspaceR\x05value:\x028\x01\"\xe4\x03\n" +
	"\x1cUpdateThrottlerConfigRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x16\n" +
	"\x06enable\x18\x02 \x01(\bR\x06enable\x12\x18\n" +
	"\adisable\x18\x03 \x01(\bR\adisable\x12\x1c\n" +
	"\tthreshold\x18\x04 \x01(\x01R\tthreshold\x12!\n" +
	"\fcustom_query\x18\x05 \x01(\tR\vcustomQuery\x12(\n" +
	"\x10custom_query_set\x18\x06 \x01(\bR\x0ecustomQuerySet\x12-\n" +
	"\x13check_as_check_self\x18\a \x01(\bR\x10checkAsCheckSelf\x12/\n" +
	"\x14check_as_check_shard\x18\b \x01(\bR\x11checkAsCheckShard\x12?\n" +
	"\rthrottled_app\x18\t \x01(\v2\x1a.topodata.ThrottledAppRuleR\fthrottledApp\x12\x1f\n" +
	"\vmetric_name\x18\n" +
	" \x01(\tR\n" +
	"metricName\x12\x19\n" +
	"\bapp_name\x18\v \x01(\tR\aappName\x12.\n" +
	"\x13app_checked_metrics\x18\f \x03(\tR\x11appCheckedMetrics\"\x1f\n" +
	"\x1dUpdateThrottlerConfigResponse\"*\n" +
	"\x14GetSrvVSchemaRequest\x12\x12\n" +
	"\x04cell\x18\x01 \x01(\tR\x04cell\"N\n" +
	"\x15GetSrvVSchemaResponse\x125\n" +
	"\fsrv_v_schema\x18\x01 \x01(\v2\x13.vschema.SrvVSchemaR\n" +
	"srvVSchema\"-\n" +
	"\x15GetSrvVSchemasRequest\x12\x14\n" +
	"\x05cells\x18\x02 \x03(\tR\x05cells\"\xc5\x01\n" +
	"\x16GetSrvVSchemasResponse\x12V\n" +
	"\rsrv_v_schemas\x18\x01 \x03(\v22.vtctldata.GetSrvVSchemasResponse.SrvVSchemasEntryR\vsrvVSchemas\x1aS\n" +
	"\x10SrvVSchemasEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.vschema.SrvVSchemaR\x05value:\x028\x01\"L\n" +
	"\x10GetTabletRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"=\n" +
	"\x11GetTabletResponse\x12(\n" +
	"\x06tablet\x18\x01 \x01(\v2\x10.topodata.TabletR\x06tablet\"\xe8\x01\n" +
	"\x11GetTabletsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x14\n" +
	"\x05cells\x18\x03 \x03(\tR\x05cells\x12\x16\n" +
	"\x06strict\x18\x04 \x01(\bR\x06strict\x12<\n" +
	"\x0etablet_aliases\x18\x05 \x03(\v2\x15.topodata.TabletAliasR\rtabletAliases\x125\n" +
	"\vtablet_type\x18\x06 \x01(\x0e2\x14.topodata.TabletTypeR\n" +
	"tabletType\"@\n" +
	"\x12GetTabletsResponse\x12*\n" +
	"\atablets\x18\x01 \x03(\v2\x10.topodata.TabletR\atablets\"U\n" +
	"\x19GetThrottlerStatusRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"c\n" +
	"\x1aGetThrottlerStatusResponse\x12E\n" +
	"\x06status\x18\x01 \x01(\v2-.tabletmanagerdata.GetThrottlerStatusResponseR\x06status\"_\n" +
	"\x16GetTopologyPathRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x03R\aversion\x12\x17\n" +
	"\aas_json\x18\x03 \x01(\bR\x06asJson\"F\n" +
	"\x17GetTopologyPathResponse\x12+\n" +
	"\x04cell\x18\x01 \x01(\v2\x17.vtctldata.TopologyCellR\x04cell\"\x80\x01\n" +
	"\fTopologyCell\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x12\x1a\n" +
	"\bchildren\x18\x04 \x03(\tR\bchildren\x12\x18\n" +
	"\aversion\x18\x05 \x01(\x03R\aversion\"_\n" +
	" GetUnresolvedTransactionsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1f\n" +
	"\vabandon_age\x18\x02 \x01(\x03R\n" +
	"abandonAge\"c\n" +
	"!GetUnresolvedTransactionsResponse\x12>\n" +
	"\ftransactions\x18\x01 \x03(\v2\x1a.query.TransactionMetadataR\ftransactions\"/\n" +
	"\x19GetTransactionInfoRequest\x12\x12\n" +
	"\x04dtid\x18\x01 \x01(\tR\x04dtid\"\xa0\x01\n" +
	"\x15ShardTransactionState\x12\x14\n" +
	"\x05shard\x18\x01 \x01(\tR\x05shard\x12\x14\n" +
	"\x05state\x18\x02 \x01(\tR\x05state\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12!\n" +
	"\ftime_created\x18\x04 \x01(\x03R\vtimeCreated\x12\x1e\n" +
	"\n" +
	"statements\x18\x05 \x03(\tR\n" +
	"statements\"\x99\x01\n" +
	"\x1aGetTransactionInfoResponse\x126\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1a.query.TransactionMetadataR\bmetadata\x12C\n" +
	"\fshard_states\x18\x02 \x03(\v2 .vtctldata.ShardTransactionStateR\vshardStates\"c\n" +
	"\x1aConcludeTransactionRequest\x12\x12\n" +
	"\x04dtid\x18\x01 \x01(\tR\x04dtid\x121\n" +
	"\fparticipants\x18\x02 \x03(\v2\r.query.TargetR\fparticipants\"\x1d\n" +
	"\x1bConcludeTransactionResponse\"/\n" +
	"\x11GetVSchemaRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\"M\n" +
	"\x11GetVersionRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\".\n" +
	"\x12GetVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"B\n" +
	"\x12GetVSchemaResponse\x12,\n" +
	"\bv_schema\x18\x01 \x01(\v2\x11.vschema.KeyspaceR\avSchema\"\xc6\x01\n" +
	"\x13GetWorkflowsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1f\n" +
	"\vactive_only\x18\x02 \x01(\bR\n" +
	"activeOnly\x12\x1b\n" +
	"\tname_only\x18\x03 \x01(\bR\bnameOnly\x12\x1a\n" +
	"\bworkflow\x18\x04 \x01(\tR\bworkflow\x12!\n" +
	"\finclude_logs\x18\x05 \x01(\bR\vincludeLogs\x12\x16\n" +
	"\x06shards\x18\x06 \x03(\tR\x06shards\"I\n" +
	"\x14GetWorkflowsResponse\x121\n" +
	"\tworkflows\x18\x01 \x03(\v2\x13.vtctldata.WorkflowR\tworkflows\"\xfb\x01\n" +
	"\x17InitShardPrimaryRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12R\n" +
	"\x1aprimary_elect_tablet_alias\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\x17primaryElectTabletAlias\x12\x14\n" +
	"\x05force\x18\x04 \x01(\bR\x05force\x12D\n" +
	"\x15wait_replicas_timeout\x18\x05 \x01(\v2\x10.vttime.DurationR\x13waitReplicasTimeout\"B\n" +
	"\x18InitShardPrimaryResponse\x12&\n" +
	"\x06events\x18\x01 \x03(\v2\x0e.logutil.EventR\x06events\"|\n" +
	"\x1cLaunchSchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xdf\x01\n" +
	"\x1dLaunchSchemaMigrationResponse\x12v\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2A.vtctldata.LaunchSchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"t\n" +
	"\x1bLookupVindexCompleteRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0etable_keyspace\x18\x03 \x01(\tR\rtableKeyspace\"\x1e\n" +
	"\x1cLookupVindexCompleteResponse\"\xff\x02\n" +
	"\x19LookupVindexCreateRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1a\n" +
	"\bworkflow\x18\x02 \x01(\tR\bworkflow\x12\x14\n" +
	"\x05cells\x18\x03 \x03(\tR\x05cells\x12)\n" +
	"\x06vindex\x18\x04 \x01(\v2\x11.vschema.KeyspaceR\x06vindex\x12B\n" +
	"\x1econtinue_after_copy_with_owner\x18\x05 \x01(\bR\x1acontinueAfterCopyWithOwner\x127\n" +
	"\ftablet_types\x18\x06 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\a \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\"\x1c\n" +
	"\x1aLookupVindexCreateResponse\"\xa0\x01\n" +
	"\x1eLookupVindexExternalizeRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0etable_keyspace\x18\x03 \x01(\tR\rtableKeyspace\x12'\n" +
	"\x0fdelete_workflow\x18\x04 \x01(\bR\x0edeleteWorkflow\"w\n" +
	"\x1fLookupVindexExternalizeResponse\x12)\n" +
	"\x10workflow_stopped\x18\x01 \x01(\bR\x0fworkflowStopped\x12)\n" +
	"\x10workflow_deleted\x18\x02 \x01(\bR\x0fworkflowDeleted\"w\n" +
	"\x1eLookupVindexInternalizeRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0etable_keyspace\x18\x03 \x01(\tR\rtableKeyspace\"!\n" +
	"\x1fLookupVindexInternalizeResponse\"V\n" +
	"\x18MaterializeCreateRequest\x12:\n" +
	"\bsettings\x18\x01 \x01(\v2\x1e.vtctldata.MaterializeSettingsR\bsettings\"\x1b\n" +
	"\x19MaterializeCreateResponse\"\xf7\x01\n" +
	"\x18WorkflowAddTablesRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12\x1a\n" +
	"\bkeyspace\x18\x02 \x01(\tR\bkeyspace\x12J\n" +
	"\x0etable_settings\x18\x03 \x03(\v2#.vtctldata.TableMaterializeSettingsR\rtableSettings\x12W\n" +
	"\x16materialization_intent\x18\x04 \x01(\x0e2 .vtctldata.MaterializationIntentR\x15materializationIntent\"\x1b\n" +
	"\x19WorkflowAddTablesResponse\"\xdd\x05\n" +
	"\x14MigrateCreateRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0fsource_keyspace\x18\x02 \x01(\tR\x0esourceKeyspace\x12'\n" +
	"\x0ftarget_keyspace\x18\x03 \x01(\tR\x0etargetKeyspace\x12\x1d\n" +
	"\n" +
	"mount_name\x18\x04 \x01(\tR\tmountName\x12\x14\n" +
	"\x05cells\x18\x05 \x03(\tR\x05cells\x127\n" +
	"\ftablet_types\x18\x06 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\a \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12\x1d\n" +
	"\n" +
	"all_tables\x18\b \x01(\bR\tallTables\x12%\n" +
	"\x0einclude_tables\x18\t \x03(\tR\rincludeTables\x12%\n" +
	"\x0eexclude_tables\x18\n" +
	" \x03(\tR\rexcludeTables\x12(\n" +
	"\x10source_time_zone\x18\v \x01(\tR\x0esourceTimeZone\x12\x15\n" +
	"\x06on_ddl\x18\f \x01(\tR\x05onDdl\x12&\n" +
	"\x0fstop_after_copy\x18\r \x01(\bR\rstopAfterCopy\x12*\n" +
	"\x11drop_foreign_keys\x18\x0e \x01(\bR\x0fdropForeignKeys\x120\n" +
	"\x14defer_secondary_keys\x18\x0f \x01(\bR\x12deferSecondaryKeys\x12\x1d\n" +
	"\n" +
	"auto_start\x18\x10 \x01(\bR\tautoStart\x12(\n" +
	"\x10no_routing_rules\x18\x11 \x01(\bR\x0enoRoutingRules\"\xe6\x01\n" +
	"\x16MigrateCompleteRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x03 \x01(\tR\x0etargetKeyspace\x12\x1b\n" +
	"\tkeep_data\x18\x04 \x01(\bR\bkeepData\x12,\n" +
	"\x12keep_routing_rules\x18\x05 \x01(\bR\x10keepRoutingRules\x12#\n" +
	"\rrename_tables\x18\x06 \x01(\bR\frenameTables\x12\x17\n" +
	"\adry_run\x18\a \x01(\bR\x06dryRun\"[\n" +
	"\x17MigrateCompleteResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12&\n" +
	"\x0fdry_run_results\x18\x02 \x03(\tR\rdryRunResults\"\x85\x01\n" +
	"\x14MountRegisterRequest\x12\x1b\n" +
	"\ttopo_type\x18\x01 \x01(\tR\btopoType\x12\x1f\n" +
	"\vtopo_server\x18\x02 \x01(\tR\n" +
	"topoServer\x12\x1b\n" +
	"\ttopo_root\x18\x03 \x01(\tR\btopoRoot\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x17\n" +
	"\x15MountRegisterResponse\",\n" +
	"\x16MountUnregisterRequest\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x19\n" +
	"\x17MountUnregisterResponse\"&\n" +
	"\x10MountShowRequest\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x82\x01\n" +
	"\x11MountShowResponse\x12\x1b\n" +
	"\ttopo_type\x18\x01 \x01(\tR\btopoType\x12\x1f\n" +
	"\vtopo_server\x18\x02 \x01(\tR\n" +
	"topoServer\x12\x1b\n" +
	"\ttopo_root\x18\x03 \x01(\tR\btopoRoot\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\"\x12\n" +
	"\x10MountListRequest\")\n" +
	"\x11MountListResponse\x12\x14\n" +
	"\x05names\x18\x01 \x03(\tR\x05names\"\x82\a\n" +
	"\x17MoveTablesCreateRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0fsource_keyspace\x18\x02 \x01(\tR\x0esourceKeyspace\x12'\n" +
	"\x0ftarget_keyspace\x18\x03 \x01(\tR\x0etargetKeyspace\x12\x14\n" +
	"\x05cells\x18\x04 \x03(\tR\x05cells\x127\n" +
	"\ftablet_types\x18\x05 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\x06 \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12#\n" +
	"\rsource_shards\x18\a \x03(\tR\fsourceShards\x12\x1d\n" +
	"\n" +
	"all_tables\x18\b \x01(\bR\tallTables\x12%\n" +
	"\x0einclude_tables\x18\t \x03(\tR\rincludeTables\x12%\n" +
	"\x0eexclude_tables\x18\n" +
	" \x03(\tR\rexcludeTables\x122\n" +
	"\x15external_cluster_name\x18\v \x01(\tR\x13externalClusterName\x12(\n" +
	"\x10source_time_zone\x18\f \x01(\tR\x0esourceTimeZone\x12\x15\n" +
	"\x06on_ddl\x18\r \x01(\tR\x05onDdl\x12&\n" +
	"\x0fstop_after_copy\x18\x0e \x01(\bR\rstopAfterCopy\x12*\n" +
	"\x11drop_foreign_keys\x18\x0f \x01(\bR\x0fdropForeignKeys\x120\n" +
	"\x14defer_secondary_keys\x18\x10 \x01(\bR\x12deferSecondaryKeys\x12\x1d\n" +
	"\n" +
	"auto_start\x18\x11 \x01(\bR\tautoStart\x12(\n" +
	"\x10no_routing_rules\x18\x12 \x01(\bR\x0enoRoutingRules\x12\x1f\n" +
	"\vatomic_copy\x18\x13 \x01(\bR\n" +
	"atomicCopy\x12E\n" +
	"\x10workflow_options\x18\x14 \x01(\v2\x1a.vtctldata.WorkflowOptionsR\x0fworkflowOptions\"\xd5\x01\n" +
	"\x18MoveTablesCreateResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12H\n" +
	"\adetails\x18\x02 \x03(\v2..vtctldata.MoveTablesCreateResponse.TabletInfoR\adetails\x1aU\n" +
	"\n" +
	"TabletInfo\x12-\n" +
	"\x06tablet\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12\x18\n" +
	"\acreated\x18\x02 \x01(\bR\acreated\"\xb7\x02\n" +
	"\x19MoveTablesCompleteRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x03 \x01(\tR\x0etargetKeyspace\x12\x1b\n" +
	"\tkeep_data\x18\x04 \x01(\bR\bkeepData\x12,\n" +
	"\x12keep_routing_rules\x18\x05 \x01(\bR\x10keepRoutingRules\x12#\n" +
	"\rrename_tables\x18\x06 \x01(\bR\frenameTables\x12\x17\n" +
	"\adry_run\x18\a \x01(\bR\x06dryRun\x12\x16\n" +
	"\x06shards\x18\b \x03(\tR\x06shards\x124\n" +
	"\x16ignore_source_keyspace\x18\t \x01(\bR\x14ignoreSourceKeyspace\"^\n" +
	"\x1aMoveTablesCompleteResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12&\n" +
	"\x0fdry_run_results\x18\x02 \x03(\tR\rdryRunResults\"M\n" +
	"\x11PingTabletRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x14\n" +
	"\x12PingTabletResponse\"\xd6\x03\n" +
	"\x1bPlannedReparentShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x126\n" +
	"\vnew_primary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\n" +
	"newPrimary\x12:\n" +
	"\ravoid_primary\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\favoidPrimary\x12D\n" +
	"\x15wait_replicas_timeout\x18\x05 \x01(\v2\x10.vttime.DurationR\x13waitReplicasTimeout\x12L\n" +
	"\x19tolerable_replication_lag\x18\x06 \x01(\v2\x10.vttime.DurationR\x17tolerableReplicationLag\x12;\n" +
	"\x1aallow_cross_cell_promotion\x18\a \x01(\bR\x17allowCrossCellPromotion\x12@\n" +
	"\x10expected_primary\x18\b \x01(\v2\x15.topodata.TabletAliasR\x0fexpectedPrimary\"\xba\x01\n" +
	"\x1cPlannedReparentShardResponse\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12@\n" +
	"\x10promoted_primary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\x0fpromotedPrimary\x12&\n" +
	"\x06events\x18\x04 \x03(\v2\x0e.logutil.EventR\x06events\"t\n" +
	"\x1bRebuildKeyspaceGraphRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05cells\x18\x02 \x03(\tR\x05cells\x12#\n" +
	"\rallow_partial\x18\x03 \x01(\bR\fallowPartial\"\x1e\n" +
	"\x1cRebuildKeyspaceGraphResponse\"2\n" +
	"\x1aRebuildVSchemaGraphRequest\x12\x14\n" +
	"\x05cells\x18\x01 \x03(\tR\x05cells\"\x1d\n" +
	"\x1bRebuildVSchemaGraphResponse\"O\n" +
	"\x13RefreshStateRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x16\n" +
	"\x14RefreshStateResponse\"d\n" +
	"\x1aRefreshStateByShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x14\n" +
	"\x05cells\x18\x03 \x03(\tR\x05cells\"\x83\x01\n" +
	"\x1bRefreshStateByShardResponse\x12,\n" +
	"\x12is_partial_refresh\x18\x01 \x01(\bR\x10isPartialRefresh\x126\n" +
	"\x17partial_refresh_details\x18\x02 \x01(\tR\x15partialRefreshDetails\"O\n" +
	"\x13ReloadSchemaRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x16\n" +
	"\x14ReloadSchemaResponse\"\xa9\x01\n" +
	"\x1bReloadSchemaKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12#\n" +
	"\rwait_position\x18\x02 \x01(\tR\fwaitPosition\x12'\n" +
	"\x0finclude_primary\x18\x03 \x01(\bR\x0eincludePrimary\x12 \n" +
	"\vconcurrency\x18\x04 \x01(\x05R\vconcurrency\"F\n" +
	"\x1cReloadSchemaKeyspaceResponse\x12&\n" +
	"\x06events\x18\x01 \x03(\v2\x0e.logutil.EventR\x06events\"\xbc\x01\n" +
	"\x18ReloadSchemaShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12#\n" +
	"\rwait_position\x18\x03 \x01(\tR\fwaitPosition\x12'\n" +
	"\x0finclude_primary\x18\x04 \x01(\bR\x0eincludePrimary\x12 \n" +
	"\vconcurrency\x18\x05 \x01(\x05R\vconcurrency\"C\n" +
	"\x19ReloadSchemaShardResponse\x12&\n" +
	"\x06events\x18\x02 \x03(\v2\x0e.logutil.EventR\x06events\"[\n" +
	"\x13RemoveBackupRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\x16\n" +
	"\x14RemoveBackupResponse\"\x7f\n" +
	"\x19RemoveKeyspaceCellRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04cell\x18\x02 \x01(\tR\x04cell\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\x12\x1c\n" +
	"\trecursive\x18\x04 \x01(\bR\trecursive\"\x1c\n" +
	"\x1aRemoveKeyspaceCellResponse\"\x9b\x01\n" +
	"\x16RemoveShardCellRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\x12\x12\n" +
	"\x04cell\x18\x03 \x01(\tR\x04cell\x12\x14\n" +
	"\x05force\x18\x04 \x01(\bR\x05force\x12\x1c\n" +
	"\trecursive\x18\x05 \x01(\bR\trecursive\"\x19\n" +
	"\x17RemoveShardCellResponse\"F\n" +
	"\x15ReparentTabletRequest\x12-\n" +
	"\x06tablet\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\"{\n" +
	"\x16ReparentTabletResponse\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12/\n" +
	"\aprimary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\aprimary\"\xd6\x04\n" +
	"\x14ReshardCreateRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12\x1a\n" +
	"\bkeyspace\x18\x02 \x01(\tR\bkeyspace\x12#\n" +
	"\rsource_shards\x18\x03 \x03(\tR\fsourceShards\x12#\n" +
	"\rtarget_shards\x18\x04 \x03(\tR\ftargetShards\x12\x14\n" +
	"\x05cells\x18\x05 \x03(\tR\x05cells\x127\n" +
	"\ftablet_types\x18\x06 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\a \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12(\n" +
	"\x10skip_schema_copy\x18\b \x01(\bR\x0eskipSchemaCopy\x12\x15\n" +
	"\x06on_ddl\x18\t \x01(\tR\x05onDdl\x12&\n" +
	"\x0fstop_after_copy\x18\n" +
	" \x01(\bR\rstopAfterCopy\x120\n" +
	"\x14defer_secondary_keys\x18\v \x01(\bR\x12deferSecondaryKeys\x12\x1d\n" +
	"\n" +
	"auto_start\x18\f \x01(\bR\tautoStart\x12E\n" +
	"\x10workflow_options\x18\r \x01(\v2\x1a.vtctldata.WorkflowOptionsR\x0fworkflowOptions\"\xb8\x02\n" +
	"\x18RestoreFromBackupRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12-\n" +
	"\vbackup_time\x18\x02 \x01(\v2\f.vttime.TimeR\n" +
	"backupTime\x12$\n" +
	"\x0erestore_to_pos\x18\x03 \x01(\tR\frestoreToPos\x12\x17\n" +
	"\adry_run\x18\x04 \x01(\bR\x06dryRun\x12>\n" +
	"\x14restore_to_timestamp\x18\x05 \x01(\v2\f.vttime.TimeR\x12restoreToTimestamp\x124\n" +
	"\x16allowed_backup_engines\x18\x06 \x03(\tR\x14allowedBackupEngines\"\xad\x01\n" +
	"\x19RestoreFromBackupResponse\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x1a\n" +
	"\bkeyspace\x18\x02 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x03 \x01(\tR\x05shard\x12$\n" +
	"\x05event\x18\x04 \x01(\v2\x0e.logutil.EventR\x05event\"{\n" +
	"\x1bRetrySchemaMigrationRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.vtrpc.CallerIDR\bcallerId\"\xdd\x01\n" +
	"\x1cRetrySchemaMigrationResponse\x12u\n" +
	"\x16rows_affected_by_shard\x18\x01 \x03(\v2@.vtctldata.RetrySchemaMigrationResponse.RowsAffectedByShardEntryR\x13rowsAffectedByShard\x1aF\n" +
	"\x18RowsAffectedByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"Q\n" +
	"\x15RunHealthCheckRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x18\n" +
	"\x16RunHealthCheckResponse\"m\n" +
	"\"SetKeyspaceDurabilityPolicyRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12+\n" +
	"\x11durability_policy\x18\x02 \x01(\tR\x10durabilityPolicy\"U\n" +
	"#SetKeyspaceDurabilityPolicyResponse\x12.\n" +
	"\bkeyspace\x18\x01 \x01(\v2\x12.topodata.KeyspaceR\bkeyspace\"^\n" +
	"\x1eSetKeyspaceShardingInfoRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05force\x18\x04 \x01(\bR\x05forceJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"Q\n" +
	"\x1fSetKeyspaceShardingInfoResponse\x12.\n" +
	"\bkeyspace\x18\x01 \x01(\v2\x12.topodata.KeyspaceR\bkeyspace\"r\n" +
	"\x1fSetShardIsPrimaryServingRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x1d\n" +
	"\n" +
	"is_serving\x18\x03 \x01(\bR\tisServing\"I\n" +
	" SetShardIsPrimaryServingResponse\x12%\n" +
	"\x05shard\x18\x01 \x01(\v2\x0f.topodata.ShardR\x05shard\"\x8e\x02\n" +
	"\x1cSetShardTabletControlRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x125\n" +
	"\vtablet_type\x18\x03 \x01(\x0e2\x14.topodata.TabletTypeR\n" +
	"tabletType\x12\x14\n" +
	"\x05cells\x18\x04 \x03(\tR\x05cells\x12#\n" +
	"\rdenied_tables\x18\x05 \x03(\tR\fdeniedTables\x122\n" +
	"\x15disable_query_service\x18\x06 \x01(\bR\x13disableQueryService\x12\x16\n" +
	"\x06remove\x18\a \x01(\bR\x06remove\"F\n" +
	"\x1dSetShardTabletControlResponse\x12%\n" +
	"\x05shard\x18\x01 \x01(\v2\x0f.topodata.ShardR\x05shard\"j\n" +
	"\x12SetWritableRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12\x1a\n" +
	"\bwritable\x18\x02 \x01(\bR\bwritable\"\x15\n" +
	"\x13SetWritableResponse\"\x88\x01\n" +
	"\x1aShardReplicationAddRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x128\n" +
	"\ftablet_alias\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x1d\n" +
	"\x1bShardReplicationAddResponse\"b\n" +
	"\x1aShardReplicationFixRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x12\n" +
	"\x04cell\x18\x03 \x01(\tR\x04cell\"T\n" +
	"\x1bShardReplicationFixResponse\x125\n" +
	"\x05error\x18\x01 \x01(\v2\x1f.topodata.ShardReplicationErrorR\x05error\"T\n" +
	" ShardReplicationPositionsRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\"\xaa\x03\n" +
	"!ShardReplicationPositionsResponse\x12x\n" +
	"\x14replication_statuses\x18\x01 \x03(\v2E.vtctldata.ShardReplicationPositionsResponse.ReplicationStatusesEntryR\x13replicationStatuses\x12Z\n" +
	"\n" +
	"tablet_map\x18\x02 \x03(\v2;.vtctldata.ShardReplicationPositionsResponse.TabletMapEntryR\ttabletMap\x1a_\n" +
	"\x18ReplicationStatusesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.replicationdata.StatusR\x05value:\x028\x01\x1aN\n" +
	"\x0eTabletMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.topodata.TabletR\x05value:\x028\x01\"\x8b\x01\n" +
	"\x1dShardReplicationRemoveRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x128\n" +
	"\ftablet_alias\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\" \n" +
	"\x1eShardReplicationRemoveResponse\"|\n" +
	"\x12SleepTabletRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\x12,\n" +
	"\bduration\x18\x02 \x01(\v2\x10.vttime.DurationR\bduration\"\x15\n" +
	"\x13SleepTabletResponse\"\xf0\x01\n" +
	"\x15SourceShardAddRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x05R\x03uid\x12'\n" +
	"\x0fsource_keyspace\x18\x04 \x01(\tR\x0esourceKeyspace\x12!\n" +
	"\fsource_shard\x18\x05 \x01(\tR\vsourceShard\x12/\n" +
	"\tkey_range\x18\x06 \x01(\v2\x12.topodata.KeyRangeR\bkeyRange\x12\x16\n" +
	"\x06tables\x18\a \x03(\tR\x06tables\"?\n" +
	"\x16SourceShardAddResponse\x12%\n" +
	"\x05shard\x18\x01 \x01(\v2\x0f.topodata.ShardR\x05shard\"^\n" +
	"\x18SourceShardDeleteRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x05R\x03uid\"B\n" +
	"\x19SourceShardDeleteResponse\x12%\n" +
	"\x05shard\x18\x01 \x01(\v2\x0f.topodata.ShardR\x05shard\"S\n" +
	"\x17StartReplicationRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x1a\n" +
	"\x18StartReplicationResponse\"R\n" +
	"\x16StopReplicationRequest\x128\n" +
	"\ftablet_alias\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\vtabletAlias\"\x19\n" +
	"\x17StopReplicationResponse\"R\n" +
	"!TabletExternallyReparentedRequest\x12-\n" +
	"\x06tablet\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\"\xc6\x01\n" +
	"\"TabletExternallyReparentedResponse\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x126\n" +
	"\vnew_primary\x18\x03 \x01(\v2\x15.topodata.TabletAliasR\n" +
	"newPrimary\x126\n" +
	"\vold_primary\x18\x04 \x01(\v2\x15.topodata.TabletAliasR\n" +
	"oldPrimary\"\\\n" +
	"\x15UpdateCellInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\tcell_info\x18\x02 \x01(\v2\x12.topodata.CellInfoR\bcellInfo\"]\n" +
	"\x16UpdateCellInfoResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\tcell_info\x18\x02 \x01(\v2\x12.topodata.CellInfoR\bcellInfo\"d\n" +
	"\x17UpdateCellsAliasRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x125\n" +
	"\vcells_alias\x18\x02 \x01(\v2\x14.topodata.CellsAliasR\n" +
	"cellsAlias\"e\n" +
	"\x18UpdateCellsAliasResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x125\n" +
	"\vcells_alias\x18\x02 \x01(\v2\x14.topodata.CellsAliasR\n" +
	"cellsAlias\"4\n" +
	"\x0fValidateRequest\x12!\n" +
	"\fping_tablets\x18\x01 \x01(\bR\vpingTablets\"\xfb\x01\n" +
	"\x10ValidateResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\x12b\n" +
	"\x13results_by_keyspace\x18\x02 \x03(\v22.vtctldata.ValidateResponse.ResultsByKeyspaceEntryR\x11resultsByKeyspace\x1ai\n" +
	"\x16ResultsByKeyspaceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x129\n" +
	"\x05value\x18\x02 \x01(\v2#.vtctldata.ValidateKeyspaceResponseR\x05value:\x028\x01\"X\n" +
	"\x17ValidateKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12!\n" +
	"\fping_tablets\x18\x02 \x01(\bR\vpingTablets\"\xfc\x01\n" +
	"\x18ValidateKeyspaceResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\x12a\n" +
	"\x10results_by_shard\x18\x02 \x03(\v27.vtctldata.ValidateKeyspaceResponse.ResultsByShardEntryR\x0eresultsByShard\x1ac\n" +
	"\x13ResultsByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .vtctldata.ValidateShardResponseR\x05value:\x028\x01\"X\n" +
	"\"ValidatePermissionsKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x16\n" +
	"\x06shards\x18\x02 \x03(\tR\x06shards\"%\n" +
	"#ValidatePermissionsKeyspaceResponse\"\xf0\x01\n" +
	"\x1dValidateSchemaKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12%\n" +
	"\x0eexclude_tables\x18\x02 \x03(\tR\rexcludeTables\x12#\n" +
	"\rinclude_views\x18\x03 \x01(\bR\fincludeViews\x12&\n" +
	"\x0fskip_no_primary\x18\x04 \x01(\bR\rskipNoPrimary\x12'\n" +
	"\x0finclude_vschema\x18\x05 \x01(\bR\x0eincludeVschema\x12\x16\n" +
	"\x06shards\x18\x06 \x03(\tR\x06shards\"\x88\x02\n" +
	"\x1eValidateSchemaKeyspaceResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\x12g\n" +
	"\x10results_by_shard\x18\x02 \x03(\v2=.vtctldata.ValidateSchemaKeyspaceResponse.ResultsByShardEntryR\x0eresultsByShard\x1ac\n" +
	"\x13ResultsByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .vtctldata.ValidateShardResponseR\x05value:\x028\x01\"k\n" +
	"\x14ValidateShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\x12!\n" +
	"\fping_tablets\x18\x03 \x01(\bR\vpingTablets\"1\n" +
	"\x15ValidateShardResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\"<\n" +
	"\x1eValidateVersionKeyspaceRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\"\x8a\x02\n" +
	"\x1fValidateVersionKeyspaceResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\x12h\n" +
	"\x10results_by_shard\x18\x02 \x03(\v2>.vtctldata.ValidateVersionKeyspaceResponse.ResultsByShardEntryR\x0eresultsByShard\x1ac\n" +
	"\x13ResultsByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .vtctldata.ValidateShardResponseR\x05value:\x028\x01\"O\n" +
	"\x1bValidateVersionShardRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\tR\x05shard\"8\n" +
	"\x1cValidateVersionShardResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\"\x98\x01\n" +
	"\x16ValidateVSchemaRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x16\n" +
	"\x06shards\x18\x02 \x03(\tR\x06shards\x12%\n" +
	"\x0eexclude_tables\x18\x03 \x03(\tR\rexcludeTables\x12#\n" +
	"\rinclude_views\x18\x04 \x01(\bR\fincludeViews\"\xfa\x01\n" +
	"\x17ValidateVSchemaResponse\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\x12`\n" +
	"\x10results_by_shard\x18\x02 \x03(\v26.vtctldata.ValidateVSchemaResponse.ResultsByShardEntryR\x0eresultsByShard\x1ac\n" +
	"\x13ResultsByShardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .vtctldata.ValidateShardResponseR\x05value:\x028\x01\"\xf9\a\n" +
	"\x12VDiffCreateRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x02 \x01(\tR\x0etargetKeyspace\x12\x12\n" +
	"\x04uuid\x18\x03 \x01(\tR\x04uuid\x12!\n" +
	"\fsource_cells\x18\x04 \x03(\tR\vsourceCells\x12!\n" +
	"\ftarget_cells\x18\x05 \x03(\tR\vtargetCells\x127\n" +
	"\ftablet_types\x18\x06 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12l\n" +
	"\x1btablet_selection_preference\x18\a \x01(\x0e2,.tabletmanagerdata.TabletSelectionPreferenceR\x19tabletSelectionPreference\x12\x16\n" +
	"\x06tables\x18\b \x03(\tR\x06tables\x12\x14\n" +
	"\x05limit\x18\t \x01(\x03R\x05limit\x12U\n" +
	"\x1efiltered_replication_wait_time\x18\n" +
	" \x01(\v2\x10.vttime.DurationR\x1bfilteredReplicationWaitTime\x12\x1f\n" +
	"\vdebug_query\x18\v \x01(\bR\n" +
	"debugQuery\x12\x1a\n" +
	"\tonly_p_ks\x18\f \x01(\bR\aonlyPKs\x12,\n" +
	"\x12update_table_stats\x18\r \x01(\bR\x10updateTableStats\x128\n" +
	"\x19max_extra_rows_to_compare\x18\x0e \x01(\x03R\x15maxExtraRowsToCompare\x12\x12\n" +
	"\x04wait\x18\x0f \x01(\bR\x04wait\x12B\n" +
	"\x14wait_update_interval\x18\x10 \x01(\v2\x10.vttime.DurationR\x12waitUpdateInterval\x12\x1d\n" +
	"\n" +
	"auto_retry\x18\x11 \x01(\bR\tautoRetry\x12\x18\n" +
	"\averbose\x18\x12 \x01(\bR\averbose\x123\n" +
	"\x16max_report_sample_rows\x18\x13 \x01(\x03R\x13maxReportSampleRows\x12<\n" +
	"\x11max_diff_duration\x18\x14 \x01(\v2\x10.vttime.DurationR\x0fmaxDiffDuration\x12<\n" +
	"\x1brow_diff_column_truncate_at\x18\x15 \x01(\x03R\x17rowDiffColumnTruncateAt\x12\"\n" +
	"\n" +
	"auto_start\x18\x16 \x01(\bH\x00R\tautoStart\x88\x01\x01B\r\n" +
	"\v_auto_start\")\n" +
	"\x13VDiffCreateResponse\x12\x12\n" +
	"\x04UUID\x18\x01 \x01(\tR\x04UUID\"k\n" +
	"\x12VDiffDeleteRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x02 \x01(\tR\x0etargetKeyspace\x12\x10\n" +
	"\x03arg\x18\x03 \x01(\tR\x03arg\"\x15\n" +
	"\x13VDiffDeleteResponse\"\x92\x01\n" +
	"\x12VDiffResumeRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x02 \x01(\tR\x0etargetKeyspace\x12\x12\n" +
	"\x04uuid\x18\x03 \x01(\tR\x04uuid\x12#\n" +
	"\rtarget_shards\x18\x04 \x03(\tR\ftargetShards\"\x15\n" +
	"\x13VDiffResumeResponse\"i\n" +
	"\x10VDiffShowRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x02 \x01(\tR\x0etargetKeyspace\x12\x10\n" +
	"\x03arg\x18\x03 \x01(\tR\x03arg\"\xd7\x01\n" +
	"\x11VDiffShowResponse\x12\\\n" +
	"\x10tablet_responses\x18\x01 \x03(\v21.vtctldata.VDiffShowResponse.TabletResponsesEntryR\x0ftabletResponses\x1ad\n" +
	"\x14TabletResponsesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .tabletmanagerdata.VDiffResponseR\x05value:\x028\x01\"\x90\x01\n" +
	"\x10VDiffStopRequest\x12\x1a\n" +
	"\bworkflow\x18\x01 \x01(\tR\bworkflow\x12'\n" +
	"\x0ftarget_keyspace\x18\x02 \x01(\tR\x0etargetKeyspace\x12\x12\n" +
	"\x04uuid\x18\x03 \x01(\tR\x04uuid\x12#\n" +
	"\rtarget_shards\x18\x04 \x03(\tR\ftargetShards\"\x13\n" +
	"\x11VDiffStopResponse\"\x94\x02\n" +
	"\x15WorkflowDeleteRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1a\n" +
	"\bworkflow\x18\x02 \x01(\tR\bworkflow\x12\x1b\n" +
	"\tkeep_data\x18\x03 \x01(\bR\bkeepData\x12,\n" +
	"\x12keep_routing_rules\x18\x04 \x01(\bR\x10keepRoutingRules\x12\x16\n" +
	"\x06shards\x18\x05 \x03(\tR\x06shards\x12*\n" +
	"\x11delete_batch_size\x18\x06 \x01(\x03R\x0fdeleteBatchSize\x124\n" +
	"\x16ignore_source_keyspace\x18\a \x01(\bR\x14ignoreSourceKeyspace\"\xd1\x01\n" +
	"\x16WorkflowDeleteResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12F\n" +
	"\adetails\x18\x02 \x03(\v2,.vtctldata.WorkflowDeleteResponse.TabletInfoR\adetails\x1aU\n" +
	"\n" +
	"TabletInfo\x12-\n" +
	"\x06tablet\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12\x18\n" +
	"\adeleted\x18\x02 \x01(\bR\adeleted\"g\n" +
	"\x15WorkflowStatusRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1a\n" +
	"\bworkflow\x18\x02 \x01(\tR\bworkflow\x12\x16\n" +
	"\x06shards\x18\x03 \x03(\tR\x06shards\"\xe6\a\n" +
	"\x16WorkflowStatusResponse\x12_\n" +
	"\x10table_copy_state\x18\x01 \x03(\v25.vtctldata.WorkflowStatusResponse.TableCopyStateEntryR\x0etableCopyState\x12X\n" +
	"\rshard_streams\x18\x02 \x03(\v23.vtctldata.WorkflowStatusResponse.ShardStreamsEntryR\fshardStreams\x12#\n" +
	"\rtraffic_state\x18\x03 \x01(\tR\ftrafficState\x1a\xe8\x01\n" +
	"\x0eTableCopyState\x12\x1f\n" +
	"\vrows_copied\x18\x01 \x01(\x03R\n" +
	"rowsCopied\x12\x1d\n" +
	"\n" +
	"rows_total\x18\x02 \x01(\x03R\trowsTotal\x12'\n" +
	"\x0frows_percentage\x18\x03 \x01(\x02R\x0erowsPercentage\x12!\n" +
	"\fbytes_copied\x18\x04 \x01(\x03R\vbytesCopied\x12\x1f\n" +
	"\vbytes_total\x18\x05 \x01(\x03R\n" +
	"bytesTotal\x12)\n" +
	"\x10bytes_percentage\x18\x06 \x01(\x02R\x0fbytesPercentage\x1a\xbc\x01\n" +
	"\x10ShardStreamState\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12-\n" +
	"\x06tablet\x18\x02 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12!\n" +
	"\fsource_shard\x18\x03 \x01(\tR\vsourceShard\x12\x1a\n" +
	"\bposition\x18\x04 \x01(\tR\bposition\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x12\n" +
	"\x04info\x18\x06 \x01(\tR\x04info\x1a\\\n" +
	"\fShardStreams\x12L\n" +
	"\astreams\x18\x02 \x03(\v22.vtctldata.WorkflowStatusResponse.ShardStreamStateR\astreams\x1as\n" +
	"\x13TableCopyStateEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12F\n" +
	"\x05value\x18\x02 \x01(\v20.vtctldata.WorkflowStatusResponse.TableCopyStateR\x05value:\x028\x01\x1ao\n" +
	"\x11ShardStreamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12D\n" +
	"\x05value\x18\x02 \x01(\v2..vtctldata.WorkflowStatusResponse.ShardStreamsR\x05value:\x028\x01\"\x85\x04\n" +
	"\x1cWorkflowSwitchTrafficRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1a\n" +
	"\bworkflow\x18\x02 \x01(\tR\bworkflow\x12\x14\n" +
	"\x05cells\x18\x03 \x03(\tR\x05cells\x127\n" +
	"\ftablet_types\x18\x04 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12O\n" +
	"\x1bmax_replication_lag_allowed\x18\x05 \x01(\v2\x10.vttime.DurationR\x18maxReplicationLagAllowed\x12<\n" +
	"\x1aenable_reverse_replication\x18\x06 \x01(\bR\x18enableReverseReplication\x12\x1c\n" +
	"\tdirection\x18\a \x01(\x05R\tdirection\x12*\n" +
	"\atimeout\x18\b \x01(\v2\x10.vttime.DurationR\atimeout\x12\x17\n" +
	"\adry_run\x18\t \x01(\bR\x06dryRun\x12>\n" +
	"\x1binitialize_target_sequences\x18\n" +
	" \x01(\bR\x19initializeTargetSequences\x12\x16\n" +
	"\x06shards\x18\v \x03(\tR\x06shards\x12\x14\n" +
	"\x05force\x18\f \x01(\bR\x05force\"\xa7\x01\n" +
	"\x1dWorkflowSwitchTrafficResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12\x1f\n" +
	"\vstart_state\x18\x02 \x01(\tR\n" +
	"startState\x12#\n" +
	"\rcurrent_state\x18\x03 \x01(\tR\fcurrentState\x12&\n" +
	"\x0fdry_run_results\x18\x04 \x03(\tR\rdryRunResults\"\x90\x01\n" +
	"\x15WorkflowUpdateRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12[\n" +
	"\x0etablet_request\x18\x02 \x01(\v24.tabletmanagerdata.UpdateVReplicationWorkflowRequestR\rtabletRequest\"\xd1\x01\n" +
	"\x16WorkflowUpdateResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12F\n" +
	"\adetails\x18\x02 \x03(\v2,.vtctldata.WorkflowUpdateResponse.TabletInfoR\adetails\x1aU\n" +
	"\n" +
	"TabletInfo\x12-\n" +
	"\x06tablet\x18\x01 \x01(\v2\x15.topodata.TabletAliasR\x06tablet\x12\x18\n" +
	"\achanged\x18\x02 \x01(\bR\achanged\"\x17\n" +
	"\x15GetMirrorRulesRequest\"Q\n" +
	"\x16GetMirrorRulesResponse\x127\n" +
	"\fmirror_rules\x18\x01 \x01(\v2\x14.vschema.MirrorRulesR\vmirrorRules\"\xa9\x01\n" +
	"\x1cWorkflowMirrorTrafficRequest\x12\x1a\n" +
	"\bkeyspace\x18\x01 \x01(\tR\bkeyspace\x12\x1a\n" +
	"\bworkflow\x18\x02 \x01(\tR\bworkflow\x127\n" +
	"\ftablet_types\x18\x03 \x03(\x0e2\x14.topodata.TabletTypeR\vtabletTypes\x12\x18\n" +
	"\apercent\x18\x04 \x01(\x02R\apercent\"\x7f\n" +
	"\x1dWorkflowMirrorTrafficResponse\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x12\x1f\n" +
	"\vstart_state\x18\x02 \x01(\tR\n" +
	"startState\x12#\n" +
	"\rcurrent_state\x18\x03 \x01(\tR\fcurrentState*Y\n" +
	"\x15MaterializationIntent\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x00\x12\x0e\n" +
	"\n" +
	"MOVETABLES\x10\x01\x12\x15\n" +
	"\x11CREATELOOKUPINDEX\x10\x02\x12\r\n" +
	"\tREFERENCE\x10\x03*8\n" +
	"\rQueryOrdering\x12\b\n" +
	"\x04NONE\x10\x00\x12\r\n" +
	"\tASCENDING\x10\x01\x12\x0e\n" +
	"\n" +
	"DESCENDING\x10\x02*B\n" +
	"\x1cShardedAutoIncrementHandling\x12\t\n" +
	"\x05LEAVE\x10\x00\x12\n" +
	"\n" +
	"\x06REMOVE\x10\x01\x12\v\n" +
	"\aREPLACE\x10\x02B(Z&vitess.io/vitess/go/vt/proto/vtctldatab\x06proto3"

var (
	file_vtctldata_proto_rawDescOnce sync.Once
	file_vtctldata_proto_rawDescData []byte
)

func file_vtctldata_proto_rawDescGZIP() []byte {
	file_vtctldata_proto_rawDescOnce.Do(func() {
		file_vtctldata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vtctldata_proto_rawDesc), len(file_vtctldata_proto_rawDesc)))
	})
	return file_vtctldata_proto_rawDescData
}

var file_vtctldata_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_vtctldata_proto_msgTypes = make([]protoimpl.MessageInfo, 311)
var file_vtctldata_proto_goTypes = []any{
	(MaterializationIntent)(0),                   // 0: vtctldata.MaterializationIntent
	(QueryOrdering)(0),                           // 1: vtctldata.QueryOrdering
	(ShardedAutoIncrementHandling)(0),            // 2: vtctldata.ShardedAutoIncrementHandling
	(SchemaMigration_Strategy)(0),                // 3: vtctldata.SchemaMigration.Strategy
	(SchemaMigration_Status)(0),                  // 4: vtctldata.SchemaMigration.Status
	(*ExecuteVtctlCommandRequest)(nil),           // 5: vtctldata.ExecuteVtctlCommandRequest
	(*ExecuteVtctlCommandResponse)(nil),          // 6: vtctldata.ExecuteVtctlCommandResponse
	(*TableMaterializeSettings)(nil),             // 7: vtctldata.TableMaterializeSettings
	(*MaterializeSettings)(nil),                  // 8: vtctldata.MaterializeSettings
	(*Keyspace)(nil),                             // 9: vtctldata.Keyspace
	(*SchemaMigration)(nil),                      // 10: vtctldata.SchemaMigration
	(*Shard)(nil),                                // 11: vtctldata.Shard
	(*WorkflowOptions)(nil),                      // 12: vtctldata.WorkflowOptions
	(*Workflow)(nil),                             // 13: vtctldata.Workflow
	(*AddCellInfoRequest)(nil),                   // 14: vtctldata.AddCellInfoRequest
	(*AddCellInfoResponse)(nil),                  // 15: vtctldata.AddCellInfoResponse
	(*AddCellsAliasRequest)(nil),                 // 16: vtctldata.AddCellsAliasRequest
	(*AddCellsAliasResponse)(nil),                // 17: vtctldata.AddCellsAliasResponse
	(*ApplyKeyspaceRoutingRulesRequest)(nil),     // 18: vtctldata.ApplyKeyspaceRoutingRulesRequest
	(*ApplyKeyspaceRoutingRulesResponse)(nil),    // 19: vtctldata.ApplyKeyspaceRoutingRulesResponse
	(*ApplyRoutingRulesRequest)(nil),             // 20: vtctldata.ApplyRoutingRulesRequest
	(*ApplyRoutingRulesResponse)(nil),            // 21: vtctldata.ApplyRoutingRulesResponse
	(*ApplyShardRoutingRulesRequest)(nil),        // 22: vtctldata.ApplyShardRoutingRulesRequest
	(*ApplyShardRoutingRulesResponse)(nil),       // 23: vtctldata.ApplyShardRoutingRulesResponse
	(*ApplySchemaRequest)(nil),                   // 24: vtctldata.ApplySchemaRequest
	(*ApplySchemaResponse)(nil),                  // 25: vtctldata.ApplySchemaResponse
	(*ApplyVSchemaRequest)(nil),                  // 26: vtctldata.ApplyVSchemaRequest
	(*ApplyVSchemaResponse)(nil),                 // 27: vtctldata.ApplyVSchemaResponse
	(*BackupRequest)(nil),                        // 28: vtctldata.BackupRequest
	(*BackupResponse)(nil),                       // 29: vtctldata.BackupResponse
	(*BackupShardRequest)(nil),                   // 30: vtctldata.BackupShardRequest
	(*CancelSchemaMigrationRequest)(nil),         // 31: vtctldata.CancelSchemaMigrationRequest
	(*CancelSchemaMigrationResponse)(nil),        // 32: vtctldata.CancelSchemaMigrationResponse
	(*ChangeTabletTagsRequest)(nil),              // 33: vtctldata.ChangeTabletTagsRequest
	(*ChangeTabletTagsResponse)(nil),             // 34: vtctldata.ChangeTabletTagsResponse
	(*ChangeTabletTypeRequest)(nil),              // 35: vtctldata.ChangeTabletTypeRequest
	(*ChangeTabletTypeResponse)(nil),             // 36: vtctldata.ChangeTabletTypeResponse
	(*CheckThrottlerRequest)(nil),                // 37: vtctldata.CheckThrottlerRequest
	(*CheckThrottlerResponse)(nil),               // 38: vtctldata.CheckThrottlerResponse
	(*CleanupSchemaMigrationRequest)(nil),        // 39: vtctldata.CleanupSchemaMigrationRequest
	(*CleanupSchemaMigrationResponse)(nil),       // 40: vtctldata.CleanupSchemaMigrationResponse
	(*CompleteSchemaMigrationRequest)(nil),       // 41: vtctldata.CompleteSchemaMigrationRequest
	(*CompleteSchemaMigrationResponse)(nil),      // 42: vtctldata.CompleteSchemaMigrationResponse
	(*CopySchemaShardRequest)(nil),               // 43: vtctldata.CopySchemaShardRequest
	(*CopySchemaShardResponse)(nil),              // 44: vtctldata.CopySchemaShardResponse
	(*CreateKeyspaceRequest)(nil),                // 45: vtctldata.CreateKeyspaceRequest
	(*CreateKeyspaceResponse)(nil),               // 46: vtctldata.CreateKeyspaceResponse
	(*CreateShardRequest)(nil),                   // 47: vtctldata.CreateShardRequest
	(*CreateShardResponse)(nil),                  // 48: vtctldata.CreateShardResponse
	(*DeleteCellInfoRequest)(nil),                // 49: vtctldata.DeleteCellInfoRequest
	(*DeleteCellInfoResponse)(nil),               // 50: vtctldata.DeleteCellInfoResponse
	(*DeleteCellsAliasRequest)(nil),              // 51: vtctldata.DeleteCellsAliasRequest
	(*DeleteCellsAliasResponse)(nil),             // 52: vtctldata.DeleteCellsAliasResponse
	(*DeleteKeyspaceRequest)(nil),                // 53: vtctldata.DeleteKeyspaceRequest
	(*DeleteKeyspaceResponse)(nil),               // 54: vtctldata.DeleteKeyspaceResponse
	(*DeleteShardsRequest)(nil),                  // 55: vtctldata.DeleteShardsRequest
	(*DeleteShardsResponse)(nil),                 // 56: vtctldata.DeleteShardsResponse
	(*DeleteSrvVSchemaRequest)(nil),              // 57: vtctldata.DeleteSrvVSchemaRequest
	(*DeleteSrvVSchemaResponse)(nil),             // 58: vtctldata.DeleteSrvVSchemaResponse
	(*DeleteTabletsRequest)(nil),                 // 59: vtctldata.DeleteTabletsRequest
	(*DeleteTabletsResponse)(nil),                // 60: vtctldata.DeleteTabletsResponse
	(*EmergencyReparentShardRequest)(nil),        // 61: vtctldata.EmergencyReparentShardRequest
	(*EmergencyReparentShardResponse)(nil),       // 62: vtctldata.EmergencyReparentShardResponse
	(*ExecuteFetchAsAppRequest)(nil),             // 63: vtctldata.ExecuteFetchAsAppRequest
	(*ExecuteFetchAsAppResponse)(nil),            // 64: vtctldata.ExecuteFetchAsAppResponse
	(*ExecuteFetchAsDBARequest)(nil),             // 65: vtctldata.ExecuteFetchAsDBARequest
	(*ExecuteFetchAsDBAResponse)(nil),            // 66: vtctldata.ExecuteFetchAsDBAResponse
	(*ExecuteHookRequest)(nil),                   // 67: vtctldata.ExecuteHookRequest
	(*ExecuteHookResponse)(nil),                  // 68: vtctldata.ExecuteHookResponse
	(*ExecuteMultiFetchAsDBARequest)(nil),        // 69: vtctldata.ExecuteMultiFetchAsDBARequest
	(*ExecuteMultiFetchAsDBAResponse)(nil),       // 70: vtctldata.ExecuteMultiFetchAsDBAResponse
	(*FindAllShardsInKeyspaceRequest)(nil),       // 71: vtctldata.FindAllShardsInKeyspaceRequest
	(*FindAllShardsInKeyspaceResponse)(nil),      // 72: vtctldata.FindAllShardsInKeyspaceResponse
	(*ForceCutOverSchemaMigrationRequest)(nil),   // 73: vtctldata.ForceCutOverSchemaMigrationRequest
	(*ForceCutOverSchemaMigrationResponse)(nil),  // 74: vtctldata.ForceCutOverSchemaMigrationResponse
	(*GetBackupsRequest)(nil),                    // 75: vtctldata.GetBackupsRequest
	(*GetBackupsResponse)(nil),                   // 76: vtctldata.GetBackupsResponse
	(*GetCellInfoRequest)(nil),                   // 77: vtctldata.GetCellInfoRequest
	(*GetCellInfoResponse)(nil),                  // 78: vtctldata.GetCellInfoResponse
	(*GetCellInfoNamesRequest)(nil),              // 79: vtctldata.GetCellInfoNamesRequest
	(*GetCellInfoNamesResponse)(nil),             // 80: vtctldata.GetCellInfoNamesResponse
	(*GetCellsAliasesRequest)(nil),               // 81: vtctldata.GetCellsAliasesRequest
	(*GetCellsAliasesResponse)(nil),              // 82: vtctldata.GetCellsAliasesResponse
	(*GetFullStatusRequest)(nil),                 // 83: vtctldata.GetFullStatusRequest
	(*GetFullStatusResponse)(nil),                // 84: vtctldata.GetFullStatusResponse
	(*GetKeyspacesRequest)(nil),                  // 85: vtctldata.GetKeyspacesRequest
	(*GetKeyspacesResponse)(nil),                 // 86: vtctldata.GetKeyspacesResponse
	(*GetKeyspaceRequest)(nil),                   // 87: vtctldata.GetKeyspaceRequest
	(*GetKeyspaceResponse)(nil),                  // 88: vtctldata.GetKeyspaceResponse
	(*GetPermissionsRequest)(nil),                // 89: vtctldata.GetPermissionsRequest
	(*GetPermissionsResponse)(nil),               // 90: vtctldata.GetPermissionsResponse
	(*GetKeyspaceRoutingRulesRequest)(nil),       // 91: vtctldata.GetKeyspaceRoutingRulesRequest
	(*GetKeyspaceRoutingRulesResponse)(nil),      // 92: vtctldata.GetKeyspaceRoutingRulesResponse
	(*GetRoutingRulesRequest)(nil),               // 93: vtctldata.GetRoutingRulesRequest
	(*GetRoutingRulesResponse)(nil),              // 94: vtctldata.GetRoutingRulesResponse
	(*GetSchemaRequest)(nil),                     // 95: vtctldata.GetSchemaRequest
	(*GetSchemaResponse)(nil),                    // 96: vtctldata.GetSchemaResponse
	(*GetSchemaMigrationsRequest)(nil),           // 97: vtctldata.GetSchemaMigrationsRequest
	(*GetSchemaMigrationsResponse)(nil),          // 98: vtctldata.GetSchemaMigrationsResponse
	(*GetShardReplicationRequest)(nil),           // 99: vtctldata.GetShardReplicationRequest
	(*GetShardReplicationResponse)(nil),          // 100: vtctldata.GetShardReplicationResponse
	(*GetShardRequest)(nil),                      // 101: vtctldata.GetShardRequest
	(*GetShardResponse)(nil),                     // 102: vtctldata.GetShardResponse
	(*GetShardRoutingRulesRequest)(nil),          // 103: vtctldata.GetShardRoutingRulesRequest
	(*GetShardRoutingRulesResponse)(nil),         // 104: vtctldata.GetShardRoutingRulesResponse
	(*GetSrvKeyspaceNamesRequest)(nil),           // 105: vtctldata.GetSrvKeyspaceNamesRequest
	(*GetSrvKeyspaceNamesResponse)(nil),          // 106: vtctldata.GetSrvKeyspaceNamesResponse
	(*GetSrvKeyspacesRequest)(nil),               // 107: vtctldata.GetSrvKeyspacesRequest
	(*GetSrvKeyspacesResponse)(nil),              // 108: vtctldata.GetSrvKeyspacesResponse
	(*UpdateThrottlerConfigRequest)(nil),         // 109: vtctldata.UpdateThrottlerConfigRequest
	(*UpdateThrottlerConfigResponse)(nil),        // 110: vtctldata.UpdateThrottlerConfigResponse
	(*GetSrvVSchemaRequest)(nil),                 // 111: vtctldata.GetSrvVSchemaRequest
	(*GetSrvVSchemaResponse)(nil),                // 112: vtctldata.GetSrvVSchemaResponse
	(*GetSrvVSchemasRequest)(nil),                // 113: vtctldata.GetSrvVSchemasRequest
	(*GetSrvVSchemasResponse)(nil),               // 114: vtctldata.GetSrvVSchemasResponse
	(*GetTabletRequest)(nil),                     // 115: vtctldata.GetTabletRequest
	(*GetTabletResponse)(nil),                    // 116: vtctldata.GetTabletResponse
	(*GetTabletsRequest)(nil),                    // 117: vtctldata.GetTabletsRequest
	(*GetTabletsResponse)(nil),                   // 118: vtctldata.GetTabletsResponse
	(*GetThrottlerStatusRequest)(nil),            // 119: vtctldata.GetThrottlerStatusRequest
	(*GetThrottlerStatusResponse)(nil),           // 120: vtctldata.GetThrottlerStatusResponse
	(*GetTopologyPathRequest)(nil),               // 121: vtctldata.GetTopologyPathRequest
	(*GetTopologyPathResponse)(nil),              // 122: vtctldata.GetTopologyPathResponse
	(*TopologyCell)(nil),                         // 123: vtctldata.TopologyCell
	(*GetUnresolvedTransactionsRequest)(nil),     // 124: vtctldata.GetUnresolvedTransactionsRequest
	(*GetUnresolvedTransactionsResponse)(nil),    // 125: vtctldata.GetUnresolvedTransactionsResponse
	(*GetTransactionInfoRequest)(nil),            // 126: vtctldata.GetTransactionInfoRequest
	(*ShardTransactionState)(nil),                // 127: vtctldata.ShardTransactionState
	(*GetTransactionInfoResponse)(nil),           // 128: vtctldata.GetTransactionInfoResponse
	(*ConcludeTransactionRequest)(nil),           // 129: vtctldata.ConcludeTransactionRequest
	(*ConcludeTransactionResponse)(nil),          // 130: vtctldata.ConcludeTransactionResponse
	(*GetVSchemaRequest)(nil),                    // 131: vtctldata.GetVSchemaRequest
	(*GetVersionRequest)(nil),                    // 132: vtctldata.GetVersionRequest
	(*GetVersionResponse)(nil),                   // 133: vtctldata.GetVersionResponse
	(*GetVSchemaResponse)(nil),                   // 134: vtctldata.GetVSchemaResponse
	(*GetWorkflowsRequest)(nil),                  // 135: vtctldata.GetWorkflowsRequest
	(*GetWorkflowsResponse)(nil),                 // 136: vtctldata.GetWorkflowsResponse
	(*InitShardPrimaryRequest)(nil),              // 137: vtctldata.InitShardPrimaryRequest
	(*InitShardPrimaryResponse)(nil),             // 138: vtctldata.InitShardPrimaryResponse
	(*LaunchSchemaMigrationRequest)(nil),         // 139: vtctldata.LaunchSchemaMigrationRequest
	(*LaunchSchemaMigrationResponse)(nil),        // 140: vtctldata.LaunchSchemaMigrationResponse
	(*LookupVindexCompleteRequest)(nil),          // 141: vtctldata.LookupVindexCompleteRequest
	(*LookupVindexCompleteResponse)(nil),         // 142: vtctldata.LookupVindexCompleteResponse
	(*LookupVindexCreateRequest)(nil),            // 143: vtctldata.LookupVindexCreateRequest
	(*LookupVindexCreateResponse)(nil),           // 144: vtctldata.LookupVindexCreateResponse
	(*LookupVindexExternalizeRequest)(nil),       // 145: vtctldata.LookupVindexExternalizeRequest
	(*LookupVindexExternalizeResponse)(nil),      // 146: vtctldata.LookupVindexExternalizeResponse
	(*LookupVindexInternalizeRequest)(nil),       // 147: vtctldata.LookupVindexInternalizeRequest
	(*LookupVindexInternalizeResponse)(nil),      // 148: vtctldata.LookupVindexInternalizeResponse
	(*MaterializeCreateRequest)(nil),             // 149: vtctldata.MaterializeCreateRequest
	(*MaterializeCreateResponse)(nil),            // 150: vtctldata.MaterializeCreateResponse
	(*WorkflowAddTablesRequest)(nil),             // 151: vtctldata.WorkflowAddTablesRequest
	(*WorkflowAddTablesResponse)(nil),            // 152: vtctldata.WorkflowAddTablesResponse
	(*MigrateCreateRequest)(nil),                 // 153: vtctldata.MigrateCreateRequest
	(*MigrateCompleteRequest)(nil),               // 154: vtctldata.MigrateCompleteRequest
	(*MigrateCompleteResponse)(nil),              // 155: vtctldata.MigrateCompleteResponse
	(*MountRegisterRequest)(nil),                 // 156: vtctldata.MountRegisterRequest
	(*MountRegisterResponse)(nil),                // 157: vtctldata.MountRegisterResponse
	(*MountUnregisterRequest)(nil),               // 158: vtctldata.MountUnregisterRequest
	(*MountUnregisterResponse)(nil),              // 159: vtctldata.MountUnregisterResponse
	(*MountShowRequest)(nil),                     // 160: vtctldata.MountShowRequest
	(*MountShowResponse)(nil),                    // 161: vtctldata.MountShowResponse
	(*MountListRequest)(nil),                     // 162: vtctldata.MountListRequest
	(*MountListResponse)(nil),                    // 163: vtctldata.MountListResponse
	(*MoveTablesCreateRequest)(nil),              // 164: vtctldata.MoveTablesCreateRequest
	(*MoveTablesCreateResponse)(nil),             // 165: vtctldata.MoveTablesCreateResponse
	(*MoveTablesCompleteRequest)(nil),            // 166: vtctldata.MoveTablesCompleteRequest
	(*MoveTablesCompleteResponse)(nil),           // 167: vtctldata.MoveTablesCompleteResponse
	(*PingTabletRequest)(nil),                    // 168: vtctldata.PingTabletRequest
	(*PingTabletResponse)(nil),                   // 169: vtctldata.PingTabletResponse
	(*PlannedReparentShardRequest)(nil),          // 170: vtctldata.PlannedReparentShardRequest
	(*PlannedReparentShardResponse)(nil),         // 171: vtctldata.PlannedReparentShardResponse
	(*RebuildKeyspaceGraphRequest)(nil),          // 172: vtctldata.RebuildKeyspaceGraphRequest
	(*RebuildKeyspaceGraphResponse)(nil),         // 173: vtctldata.RebuildKeyspaceGraphResponse
	(*RebuildVSchemaGraphRequest)(nil),           // 174: vtctldata.RebuildVSchemaGraphRequest
	(*RebuildVSchemaGraphResponse)(nil),          // 175: vtctldata.RebuildVSchemaGraphResponse
	(*RefreshStateRequest)(nil),                  // 176: vtctldata.RefreshStateRequest
	(*RefreshStateResponse)(nil),                 // 177: vtctldata.RefreshStateResponse
	(*RefreshStateByShardRequest)(nil),           // 178: vtctldata.RefreshStateByShardRequest
	(*RefreshStateByShardResponse)(nil),          // 179: vtctldata.RefreshStateByShardResponse
	(*ReloadSchemaRequest)(nil),                  // 180: vtctldata.ReloadSchemaRequest
	(*ReloadSchemaResponse)(nil),                 // 181: vtctldata.ReloadSchemaResponse
	(*ReloadSchemaKeyspaceRequest)(nil),          // 182: vtctldata.ReloadSchemaKeyspaceRequest
	(*ReloadSchemaKeyspaceResponse)(nil),         // 183: vtctldata.ReloadSchemaKeyspaceResponse
	(*ReloadSchemaShardRequest)(nil),             // 184: vtctldata.ReloadSchemaShardRequest
	(*ReloadSchemaShardResponse)(nil),            // 185: vtctldata.ReloadSchemaShardResponse
	(*RemoveBackupRequest)(nil),                  // 186: vtctldata.RemoveBackupRequest
	(*RemoveBackupResponse)(nil),                 // 187: vtctldata.RemoveBackupResponse
	(*RemoveKeyspaceCellRequest)(nil),            // 188: vtctldata.RemoveKeyspaceCellRequest
	(*RemoveKeyspaceCellResponse)(nil),           // 189: vtctldata.RemoveKeyspaceCellResponse
	(*RemoveShardCellRequest)(nil),               // 190: vtctldata.RemoveShardCellRequest
	(*RemoveShardCellResponse)(nil),              // 191: vtctldata.RemoveShardCellResponse
	(*ReparentTabletRequest)(nil),                // 192: vtctldata.ReparentTabletRequest
	(*ReparentTabletResponse)(nil),               // 193: vtctldata.ReparentTabletResponse
	(*ReshardCreateRequest)(nil),                 // 194: vtctldata.ReshardCreateRequest
	(*RestoreFromBackupRequest)(nil),             // 195: vtctldata.RestoreFromBackupRequest
	(*RestoreFromBackupResponse)(nil),            // 196: vtctldata.RestoreFromBackupResponse
	(*RetrySchemaMigrationRequest)(nil),          // 197: vtctldata.RetrySchemaMigrationRequest
	(*RetrySchemaMigrationResponse)(nil),         // 198: vtctldata.RetrySchemaMigrationResponse
	(*RunHealthCheckRequest)(nil),                // 199: vtctldata.RunHealthCheckRequest
	(*RunHealthCheckResponse)(nil),               // 200: vtctldata.RunHealthCheckResponse
	(*SetKeyspaceDurabilityPolicyRequest)(nil),   // 201: vtctldata.SetKeyspaceDurabilityPolicyRequest
	(*SetKeyspaceDurabilityPolicyResponse)(nil),  // 202: vtctldata.SetKeyspaceDurabilityPolicyResponse
	(*SetKeyspaceShardingInfoRequest)(nil),       // 203: vtctldata.SetKeyspaceShardingInfoRequest
	(*SetKeyspaceShardingInfoResponse)(nil),      // 204: vtctldata.SetKeyspaceShardingInfoResponse
	(*SetShardIsPrimaryServingRequest)(nil),      // 205: vtctldata.SetShardIsPrimaryServingRequest
	(*SetShardIsPrimaryServingResponse)(nil),     // 206: vtctldata.SetShardIsPrimaryServingResponse
	(*SetShardTabletControlRequest)(nil),         // 207: vtctldata.SetShardTabletControlRequest
	(*SetShardTabletControlResponse)(nil),        // 208: vtctldata.SetShardTabletControlResponse
	(*SetWritableRequest)(nil),                   // 209: vtctldata.SetWritableRequest
	(*SetWritableResponse)(nil),                  // 210: vtctldata.SetWritableResponse
	(*ShardReplicationAddRequest)(nil),           // 211: vtctldata.ShardReplicationAddRequest
	(*ShardReplicationAddResponse)(nil),          // 212: vtctldata.ShardReplicationAddResponse
	(*ShardReplicationFixRequest)(nil),           // 213: vtctldata.ShardReplicationFixRequest
	(*ShardReplicationFixResponse)(nil),          // 214: vtctldata.ShardReplicationFixResponse
	(*ShardReplicationPositionsRequest)(nil),     // 215: vtctldata.ShardReplicationPositionsRequest
	(*ShardReplicationPositionsResponse)(nil),    // 216: vtctldata.ShardReplicationPositionsResponse
	(*ShardReplicationRemoveRequest)(nil),        // 217: vtctldata.ShardReplicationRemoveRequest
	(*ShardReplicationRemoveResponse)(nil),       // 218: vtctldata.ShardReplicationRemoveResponse
	(*SleepTabletRequest)(nil),                   // 219: vtctldata.SleepTabletRequest
	(*SleepTabletResponse)(nil),                  // 220: vtctldata.SleepTabletResponse
	(*SourceShardAddRequest)(nil),                // 221: vtctldata.SourceShardAddRequest
	(*SourceShardAddResponse)(nil),               // 222: vtctldata.SourceShardAddResponse
	(*SourceShardDeleteRequest)(nil),             // 223: vtctldata.SourceShardDeleteRequest
	(*SourceShardDeleteResponse)(nil),            // 224: vtctldata.SourceShardDeleteResponse
	(*StartReplicationRequest)(nil),              // 225: vtctldata.StartReplicationRequest
	(*StartReplicationResponse)(nil),             // 226: vtctldata.StartReplicationResponse
	(*StopReplicationRequest)(nil),               // 227: vtctldata.StopReplicationRequest
	(*StopReplicationResponse)(nil),              // 228: vtctldata.StopReplicationResponse
	(*TabletExternallyReparentedRequest)(nil),    // 229: vtctldata.TabletExternallyReparentedRequest
	(*TabletExternallyReparentedResponse)(nil),   // 230: vtctldata.TabletExternallyReparentedResponse
	(*UpdateCellInfoRequest)(nil),                // 231: vtctldata.UpdateCellInfoRequest
	(*UpdateCellInfoResponse)(nil),               // 232: vtctldata.UpdateCellInfoResponse
	(*UpdateCellsAliasRequest)(nil),              // 233: vtctldata.UpdateCellsAliasRequest
	(*UpdateCellsAliasResponse)(nil),             // 234: vtctldata.UpdateCellsAliasResponse
	(*ValidateRequest)(nil),                      // 235: vtctldata.ValidateRequest
	(*ValidateResponse)(nil),                     // 236: vtctldata.ValidateResponse
	(*ValidateKeyspaceRequest)(nil),              // 237: vtctldata.ValidateKeyspaceRequest
	(*ValidateKeyspaceResponse)(nil),             // 238: vtctldata.ValidateKeyspaceResponse
	(*ValidatePermissionsKeyspaceRequest)(nil),   // 239: vtctldata.ValidatePermissionsKeyspaceRequest
	(*ValidatePermissionsKeyspaceResponse)(nil),  // 240: vtctldata.ValidatePermissionsKeyspaceResponse
	(*ValidateSchemaKeyspaceRequest)(nil),        // 241: vtctldata.ValidateSchemaKeyspaceRequest
	(*ValidateSchemaKeyspaceResponse)(nil),       // 242: vtctldata.ValidateSchemaKeyspaceResponse
	(*ValidateShardRequest)(nil),                 // 243: vtctldata.ValidateShardRequest
	(*ValidateShardResponse)(nil),                // 244: vtctldata.ValidateShardResponse
	(*ValidateVersionKeyspaceRequest)(nil),       // 245: vtctldata.ValidateVersionKeyspaceRequest
	(*ValidateVersionKeyspaceResponse)(nil),      // 246: vtctldata.ValidateVersionKeyspaceResponse
	(*ValidateVersionShardRequest)(nil),          // 247: vtctldata.ValidateVersionShardRequest
	(*ValidateVersionShardResponse)(nil),         // 248: vtctldata.ValidateVersionShardResponse
	(*ValidateVSchemaRequest)(nil),               // 249: vtctldata.ValidateVSchemaRequest
	(*ValidateVSchemaResponse)(nil),              // 250: vtctldata.ValidateVSchemaResponse
	(*VDiffCreateRequest)(nil),                   // 251: vtctldata.VDiffCreateRequest
	(*VDiffCreateResponse)(nil),                  // 252: vtctldata.VDiffCreateResponse
	(*VDiffDeleteRequest)(nil),                   // 253: vtctldata.VDiffDeleteRequest
	(*VDiffDeleteResponse)(nil),                  // 254: vtctldata.VDiffDeleteResponse
	(*VDiffResumeRequest)(nil),                   // 255: vtctldata.VDiffResumeRequest
	(*VDiffResumeResponse)(nil),                  // 256: vtctldata.VDiffResumeResponse
	(*VDiffShowRequest)(nil),                     // 257: vtctldata.VDiffShowRequest
	(*VDiffShowResponse)(nil),                    // 258: vtctldata.VDiffShowResponse
	(*VDiffStopRequest)(nil),                     // 259: vtctldata.VDiffStopRequest
	(*VDiffStopResponse)(nil),                    // 260: vtctldata.VDiffStopResponse
	(*WorkflowDeleteRequest)(nil),                // 261: vtctldata.WorkflowDeleteRequest
	(*WorkflowDeleteResponse)(nil),               // 262: vtctldata.WorkflowDeleteResponse
	(*WorkflowStatusRequest)(nil),                // 263: vtctldata.WorkflowStatusRequest
	(*WorkflowStatusResponse)(nil),               // 264: vtctldata.WorkflowStatusResponse
	(*WorkflowSwitchTrafficRequest)(nil),         // 265: vtctldata.WorkflowSwitchTrafficRequest
	(*WorkflowSwitchTrafficResponse)(nil),        // 266: vtctldata.WorkflowSwitchTrafficResponse
	(*WorkflowUpdateRequest)(nil),                // 267: vtctldata.WorkflowUpdateRequest
	(*WorkflowUpdateResponse)(nil),               // 268: vtctldata.WorkflowUpdateResponse
	(*GetMirrorRulesRequest)(nil),                // 269: vtctldata.GetMirrorRulesRequest
	(*GetMirrorRulesResponse)(nil),               // 270: vtctldata.GetMirrorRulesResponse
	(*WorkflowMirrorTrafficRequest)(nil),         // 271: vtctldata.WorkflowMirrorTrafficRequest
	(*WorkflowMirrorTrafficResponse)(nil),        // 272: vtctldata.WorkflowMirrorTrafficResponse
	nil,                                          // 273: vtctldata.WorkflowOptions.ConfigEntry
	nil,                                          // 274: vtctldata.Workflow.ShardStreamsEntry
	(*Workflow_ReplicationLocation)(nil),         // 275: vtctldata.Workflow.ReplicationLocation
	(*Workflow_ShardStream)(nil),                 // 276: vtctldata.Workflow.ShardStream
	(*Workflow_Stream)(nil),                      // 277: vtctldata.Workflow.Stream
	(*Workflow_Stream_CopyState)(nil),            // 278: vtctldata.Workflow.Stream.CopyState
	(*Workflow_Stream_Log)(nil),                  // 279: vtctldata.Workflow.Stream.Log
	(*Workflow_Stream_ThrottlerStatus)(nil),      // 280: vtctldata.Workflow.Stream.ThrottlerStatus
	nil,                                          // 281: vtctldata.ApplySchemaResponse.RowsAffectedByShardEntry
	nil,                                          // 282: vtctldata.ApplyVSchemaResponse.UnknownVindexParamsEntry
	(*ApplyVSchemaResponse_ParamList)(nil),       // 283: vtctldata.ApplyVSchemaResponse.ParamList
	nil,                                          // 284: vtctldata.CancelSchemaMigrationResponse.RowsAffectedByShardEntry
	nil,                                          // 285: vtctldata.ChangeTabletTagsRequest.TagsEntry
	nil,                                          // 286: vtctldata.ChangeTabletTagsResponse.BeforeTagsEntry
	nil,                                          // 287: vtctldata.ChangeTabletTagsResponse.AfterTagsEntry
	nil,                                          // 288: vtctldata.CleanupSchemaMigrationResponse.RowsAffectedByShardEntry
	nil,                                          // 289: vtctldata.CompleteSchemaMigrationResponse.RowsAffectedByShardEntry
	nil,                                          // 290: vtctldata.FindAllShardsInKeyspaceResponse.ShardsEntry
	nil,                                          // 291: vtctldata.ForceCutOverSchemaMigrationResponse.RowsAffectedByShardEntry
	nil,                                          // 292: vtctldata.GetCellsAliasesResponse.AliasesEntry
	nil,                                          // 293: vtctldata.GetShardReplicationResponse.ShardReplicationByCellEntry
	nil,                                          // 294: vtctldata.GetSrvKeyspaceNamesResponse.NamesEntry
	(*GetSrvKeyspaceNamesResponse_NameList)(nil), // 295: vtctldata.GetSrvKeyspaceNamesResponse.NameList
	nil, // 296: vtctldata.GetSrvKeyspacesResponse.SrvKeyspacesEntry
	nil, // 297: vtctldata.GetSrvVSchemasResponse.SrvVSchemasEntry
	nil, // 298: vtctldata.LaunchSchemaMigrationResponse.RowsAffectedByShardEntry
	(*MoveTablesCreateResponse_TabletInfo)(nil), // 299: vtctldata.MoveTablesCreateResponse.TabletInfo
	nil, // 300: vtctldata.RetrySchemaMigrationResponse.RowsAffectedByShardEntry
	nil, // 301: vtctldata.ShardReplicationPositionsResponse.ReplicationStatusesEntry
	nil, // 302: vtctldata.ShardReplicationPositionsResponse.TabletMapEntry
	nil, // 303: vtctldata.ValidateResponse.ResultsByKeyspaceEntry
	nil, // 304: vtctldata.ValidateKeyspaceResponse.ResultsByShardEntry
	nil, // 305: vtctldata.ValidateSchemaKeyspaceResponse.ResultsByShardEntry
	nil, // 306: vtctldata.ValidateVersionKeyspaceResponse.ResultsByShardEntry
	nil, // 307: vtctldata.ValidateVSchemaResponse.ResultsByShardEntry
	nil, // 308: vtctldata.VDiffShowResponse.TabletResponsesEntry
	(*WorkflowDeleteResponse_TabletInfo)(nil),       // 309: vtctldata.WorkflowDeleteResponse.TabletInfo
	(*WorkflowStatusResponse_TableCopyState)(nil),   // 310: vtctldata.WorkflowStatusResponse.TableCopyState
	(*WorkflowStatusResponse_ShardStreamState)(nil), // 311: vtctldata.WorkflowStatusResponse.ShardStreamState
	(*WorkflowStatusResponse_ShardStreams)(nil),     // 312: vtctldata.WorkflowStatusResponse.ShardStreams
	nil, // 313: vtctldata.WorkflowStatusResponse.TableCopyStateEntry
	nil, // 314: vtctldata.WorkflowStatusResponse.ShardStreamsEntry
	(*WorkflowUpdateResponse_TabletInfo)(nil),                   // 315: vtctldata.WorkflowUpdateResponse.TabletInfo
	(*logutil.Event)(nil),                                       // 316: logutil.Event
	(tabletmanagerdata.TabletSelectionPreference)(0),            // 317: tabletmanagerdata.TabletSelectionPreference
	(*topodata.Keyspace)(nil),                                   // 318: topodata.Keyspace
	(*vttime.Time)(nil),                                         // 319: vttime.Time
	(*topodata.TabletAlias)(nil),                                // 320: topodata.TabletAlias
	(*vttime.Duration)(nil),                                     // 321: vttime.Duration
	(*topodata.Shard)(nil),                                      // 322: topodata.Shard
	(*topodata.CellInfo)(nil),                                   // 323: topodata.CellInfo
	(*vschema.KeyspaceRoutingRules)(nil),                        // 324: vschema.KeyspaceRoutingRules
	(*vschema.RoutingRules)(nil),                                // 325: vschema.RoutingRules
	(*vschema.ShardRoutingRules)(nil),                           // 326: vschema.ShardRoutingRules
	(*vtrpc.CallerID)(nil),                                      // 327: vtrpc.CallerID
	(*vschema.Keyspace)(nil),                                    // 328: vschema.Keyspace
	(topodata.TabletType)(0),                                    // 329: topodata.TabletType
	(*topodata.Tablet)(nil),                                     // 330: topodata.Tablet
	(*tabletmanagerdata.CheckThrottlerResponse)(nil),            // 331: tabletmanagerdata.CheckThrottlerResponse
	(topodata.KeyspaceType)(0),                                  // 332: topodata.KeyspaceType
	(*query.QueryResult)(nil),                                   // 333: query.QueryResult
	(*tabletmanagerdata.ExecuteHookRequest)(nil),                // 334: tabletmanagerdata.ExecuteHookRequest
	(*tabletmanagerdata.ExecuteHookResponse)(nil),               // 335: tabletmanagerdata.ExecuteHookResponse
	(*mysqlctl.BackupInfo)(nil),                                 // 336: mysqlctl.BackupInfo
	(*replicationdata.FullStatus)(nil),                          // 337: replicationdata.FullStatus
	(*tabletmanagerdata.Permissions)(nil),                       // 338: tabletmanagerdata.Permissions
	(*tabletmanagerdata.SchemaDefinition)(nil),                  // 339: tabletmanagerdata.SchemaDefinition
	(*topodata.ThrottledAppRule)(nil),                           // 340: topodata.ThrottledAppRule
	(*vschema.SrvVSchema)(nil),                                  // 341: vschema.SrvVSchema
	(*tabletmanagerdata.GetThrottlerStatusResponse)(nil),        // 342: tabletmanagerdata.GetThrottlerStatusResponse
	(*query.TransactionMetadata)(nil),                           // 343: query.TransactionMetadata
	(*query.Target)(nil),                                        // 344: query.Target
	(*topodata.ShardReplicationError)(nil),                      // 345: topodata.ShardReplicationError
	(*topodata.KeyRange)(nil),                                   // 346: topodata.KeyRange
	(*topodata.CellsAlias)(nil),                                 // 347: topodata.CellsAlias
	(*tabletmanagerdata.UpdateVReplicationWorkflowRequest)(nil), // 348: tabletmanagerdata.UpdateVReplicationWorkflowRequest
	(*vschema.MirrorRules)(nil),                                 // 349: vschema.MirrorRules
	(*topodata.Shard_TabletControl)(nil),                        // 350: topodata.Shard.TabletControl
	(*binlogdata.BinlogSource)(nil),                             // 351: binlogdata.BinlogSource
	(*topodata.ShardReplication)(nil),                           // 352: topodata.ShardReplication
	(*topodata.SrvKeyspace)(nil),                                // 353: topodata.SrvKeyspace
	(*replicationdata.Status)(nil),                              // 354: replicationdata.Status
	(*tabletmanagerdata.VDiffResponse)(nil),                     // 355: tabletmanagerdata.VDiffResponse
}
var file_vtctldata_proto_depIdxs = []int32{
	316, // 0: vtctldata.ExecuteVtctlCommandResponse.event:type_name -> logutil.Event
	7,   // 1: vtctldata.MaterializeSettings.table_settings:type_name -> vtctldata.TableMaterializeSettings
	0,   // 2: vtctldata.MaterializeSettings.materialization_intent:type_name -> vtctldata.MaterializationIntent
	317, // 3: vtctldata.MaterializeSettings.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	12,  // 4: vtctldata.MaterializeSettings.workflow_options:type_name -> vtctldata.WorkflowOptions
	318, // 5: vtctldata.Keyspace.keyspace:type_name -> topodata.Keyspace
	3,   // 6: vtctldata.SchemaMigration.strategy:type_name -> vtctldata.SchemaMigration.Strategy
	319, // 7: vtctldata.SchemaMigration.added_at:type_name -> vttime.Time
	319, // 8: vtctldata.SchemaMigration.requested_at:type_name -> vttime.Time
	319, // 9: vtctldata.SchemaMigration.ready_at:type_name -> vttime.Time
	319, // 10: vtctldata.SchemaMigration.started_at:type_name -> vttime.Time
	319, // 11: vtctldata.SchemaMigration.liveness_timestamp:type_name -> vttime.Time
	319, // 12: vtctldata.SchemaMigration.completed_at:type_name -> vttime.Time
	319, // 13: vtctldata.SchemaMigration.cleaned_up_at:type_name -> vttime.Time
	4,   // 14: vtctldata.SchemaMigration.status:type_name -> vtctldata.SchemaMigration.Status
	320, // 15: vtctldata.SchemaMigration.tablet:type_name -> topodata.TabletAlias
	321, // 16: vtctldata.SchemaMigration.artifact_retention:type_name -> vttime.Duration
	319, // 17: vtctldata.SchemaMigration.last_throttled_at:type_name -> vttime.Time
	319, // 18: vtctldata.SchemaMigration.cancelled_at:type_name -> vttime.Time
	319, // 19: vtctldata.SchemaMigration.reviewed_at:type_name -> vttime.Time
	319, // 20: vtctldata.SchemaMigration.ready_to_complete_at:type_name -> vttime.Time
	322, // 21: vtctldata.Shard.shard:type_name -> topodata.Shard
	2,   // 22: vtctldata.WorkflowOptions.sharded_auto_increment_handling:type_name -> vtctldata.ShardedAutoIncrementHandling
	273, // 23: vtctldata.WorkflowOptions.config:type_name -> vtctldata.WorkflowOptions.ConfigEntry
	275, // 24: vtctldata.Workflow.source:type_name -> vtctldata.Workflow.ReplicationLocation
	275, // 25: vtctldata.Workflow.target:type_name -> vtctldata.Workflow.ReplicationLocation
	274, // 26: vtctldata.Workflow.shard_streams:type_name -> vtctldata.Workflow.ShardStreamsEntry
	12,  // 27: vtctldata.Workflow.options:type_name -> vtctldata.WorkflowOptions
	323, // 28: vtctldata.AddCellInfoRequest.cell_info:type_name -> topodata.CellInfo
	324, // 29: vtctldata.ApplyKeyspaceRoutingRulesRequest.keyspace_routing_rules:type_name -> vschema.KeyspaceRoutingRules
	324, // 30: vtctldata.ApplyKeyspaceRoutingRulesResponse.keyspace_routing_rules:type_name -> vschema.KeyspaceRoutingRules
	325, // 31: vtctldata.ApplyRoutingRulesRequest.routing_rules:type_name -> vschema.RoutingRules
	326, // 32: vtctldata.ApplyShardRoutingRulesRequest.shard_routing_rules:type_name -> vschema.ShardRoutingRules
	321, // 33: vtctldata.ApplySchemaRequest.wait_replicas_timeout:type_name -> vttime.Duration
	327, // 34: vtctldata.ApplySchemaRequest.caller_id:type_name -> vtrpc.CallerID
	281, // 35: vtctldata.ApplySchemaResponse.rows_affected_by_shard:type_name -> vtctldata.ApplySchemaResponse.RowsAffectedByShardEntry
	328, // 36: vtctldata.ApplyVSchemaRequest.v_schema:type_name -> vschema.Keyspace
	328, // 37: vtctldata.ApplyVSchemaResponse.v_schema:type_name -> vschema.Keyspace
	282, // 38: vtctldata.ApplyVSchemaResponse.unknown_vindex_params:type_name -> vtctldata.ApplyVSchemaResponse.UnknownVindexParamsEntry
	320, // 39: vtctldata.BackupRequest.tablet_alias:type_name -> topodata.TabletAlias
	321, // 40: vtctldata.BackupRequest.mysql_shutdown_timeout:type_name -> vttime.Duration
	320, // 41: vtctldata.BackupResponse.tablet_alias:type_name -> topodata.TabletAlias
	316, // 42: vtctldata.BackupResponse.event:type_name -> logutil.Event
	321, // 43: vtctldata.BackupShardRequest.mysql_shutdown_timeout:type_name -> vttime.Duration
	327, // 44: vtctldata.CancelSchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	284, // 45: vtctldata.CancelSchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.CancelSchemaMigrationResponse.RowsAffectedByShardEntry
	320, // 46: vtctldata.ChangeTabletTagsRequest.tablet_alias:type_name -> topodata.TabletAlias
	285, // 47: vtctldata.ChangeTabletTagsRequest.tags:type_name -> vtctldata.ChangeTabletTagsRequest.TagsEntry
	286, // 48: vtctldata.ChangeTabletTagsResponse.before_tags:type_name -> vtctldata.ChangeTabletTagsResponse.BeforeTagsEntry
	287, // 49: vtctldata.ChangeTabletTagsResponse.after_tags:type_name -> vtctldata.ChangeTabletTagsResponse.AfterTagsEntry
	320, // 50: vtctldata.ChangeTabletTypeRequest.tablet_alias:type_name -> topodata.TabletAlias
	329, // 51: vtctldata.ChangeTabletTypeRequest.db_type:type_name -> topodata.TabletType
	330, // 52: vtctldata.ChangeTabletTypeResponse.before_tablet:type_name -> topodata.Tablet
	330, // 53: vtctldata.ChangeTabletTypeResponse.after_tablet:type_name -> topodata.Tablet
	320, // 54: vtctldata.CheckThrottlerRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 55: vtctldata.CheckThrottlerResponse.tablet_alias:type_name -> topodata.TabletAlias
	331, // 56: vtctldata.CheckThrottlerResponse.Check:type_name -> tabletmanagerdata.CheckThrottlerResponse
	327, // 57: vtctldata.CleanupSchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	288, // 58: vtctldata.CleanupSchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.CleanupSchemaMigrationResponse.RowsAffectedByShardEntry
	327, // 59: vtctldata.CompleteSchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	289, // 60: vtctldata.CompleteSchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.CompleteSchemaMigrationResponse.RowsAffectedByShardEntry
	320, // 61: vtctldata.CopySchemaShardRequest.source_tablet_alias:type_name -> topodata.TabletAlias
	321, // 62: vtctldata.CopySchemaShardRequest.wait_replicas_timeout:type_name -> vttime.Duration
	332, // 63: vtctldata.CreateKeyspaceRequest.type:type_name -> topodata.KeyspaceType
	319, // 64: vtctldata.CreateKeyspaceRequest.snapshot_time:type_name -> vttime.Time
	9,   // 65: vtctldata.CreateKeyspaceResponse.keyspace:type_name -> vtctldata.Keyspace
	9,   // 66: vtctldata.CreateShardResponse.keyspace:type_name -> vtctldata.Keyspace
	11,  // 67: vtctldata.CreateShardResponse.shard:type_name -> vtctldata.Shard
	11,  // 68: vtctldata.DeleteShardsRequest.shards:type_name -> vtctldata.Shard
	320, // 69: vtctldata.DeleteTabletsRequest.tablet_aliases:type_name -> topodata.TabletAlias
	320, // 70: vtctldata.EmergencyReparentShardRequest.new_primary:type_name -> topodata.TabletAlias
	320, // 71: vtctldata.EmergencyReparentShardRequest.ignore_replicas:type_name -> topodata.TabletAlias
	321, // 72: vtctldata.EmergencyReparentShardRequest.wait_replicas_timeout:type_name -> vttime.Duration
	320, // 73: vtctldata.EmergencyReparentShardRequest.expected_primary:type_name -> topodata.TabletAlias
	320, // 74: vtctldata.EmergencyReparentShardResponse.promoted_primary:type_name -> topodata.TabletAlias
	316, // 75: vtctldata.EmergencyReparentShardResponse.events:type_name -> logutil.Event
	320, // 76: vtctldata.ExecuteFetchAsAppRequest.tablet_alias:type_name -> topodata.TabletAlias
	333, // 77: vtctldata.ExecuteFetchAsAppResponse.result:type_name -> query.QueryResult
	320, // 78: vtctldata.ExecuteFetchAsDBARequest.tablet_alias:type_name -> topodata.TabletAlias
	333, // 79: vtctldata.ExecuteFetchAsDBAResponse.result:type_name -> query.QueryResult
	320, // 80: vtctldata.ExecuteHookRequest.tablet_alias:type_name -> topodata.TabletAlias
	334, // 81: vtctldata.ExecuteHookRequest.tablet_hook_request:type_name -> tabletmanagerdata.ExecuteHookRequest
	335, // 82: vtctldata.ExecuteHookResponse.hook_result:type_name -> tabletmanagerdata.ExecuteHookResponse
	320, // 83: vtctldata.ExecuteMultiFetchAsDBARequest.tablet_alias:type_name -> topodata.TabletAlias
	333, // 84: vtctldata.ExecuteMultiFetchAsDBAResponse.results:type_name -> query.QueryResult
	290, // 85: vtctldata.FindAllShardsInKeyspaceResponse.shards:type_name -> vtctldata.FindAllShardsInKeyspaceResponse.ShardsEntry
	327, // 86: vtctldata.ForceCutOverSchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	291, // 87: vtctldata.ForceCutOverSchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.ForceCutOverSchemaMigrationResponse.RowsAffectedByShardEntry
	336, // 88: vtctldata.GetBackupsResponse.backups:type_name -> mysqlctl.BackupInfo
	323, // 89: vtctldata.GetCellInfoResponse.cell_info:type_name -> topodata.CellInfo
	292, // 90: vtctldata.GetCellsAliasesResponse.aliases:type_name -> vtctldata.GetCellsAliasesResponse.AliasesEntry
	320, // 91: vtctldata.GetFullStatusRequest.tablet_alias:type_name -> topodata.TabletAlias
	337, // 92: vtctldata.GetFullStatusResponse.status:type_name -> replicationdata.FullStatus
	9,   // 93: vtctldata.GetKeyspacesResponse.keyspaces:type_name -> vtctldata.Keyspace
	9,   // 94: vtctldata.GetKeyspaceResponse.keyspace:type_name -> vtctldata.Keyspace
	320, // 95: vtctldata.GetPermissionsRequest.tablet_alias:type_name -> topodata.TabletAlias
	338, // 96: vtctldata.GetPermissionsResponse.permissions:type_name -> tabletmanagerdata.Permissions
	324, // 97: vtctldata.GetKeyspaceRoutingRulesResponse.keyspace_routing_rules:type_name -> vschema.KeyspaceRoutingRules
	325, // 98: vtctldata.GetRoutingRulesResponse.routing_rules:type_name -> vschema.RoutingRules
	320, // 99: vtctldata.GetSchemaRequest.tablet_alias:type_name -> topodata.TabletAlias
	339, // 100: vtctldata.GetSchemaResponse.schema:type_name -> tabletmanagerdata.SchemaDefinition
	4,   // 101: vtctldata.GetSchemaMigrationsRequest.status:type_name -> vtctldata.SchemaMigration.Status
	321, // 102: vtctldata.GetSchemaMigrationsRequest.recent:type_name -> vttime.Duration
	1,   // 103: vtctldata.GetSchemaMigrationsRequest.order:type_name -> vtctldata.QueryOrdering
	10,  // 104: vtctldata.GetSchemaMigrationsResponse.migrations:type_name -> vtctldata.SchemaMigration
	293, // 105: vtctldata.GetShardReplicationResponse.shard_replication_by_cell:type_name -> vtctldata.GetShardReplicationResponse.ShardReplicationByCellEntry
	11,  // 106: vtctldata.GetShardResponse.shard:type_name -> vtctldata.Shard
	326, // 107: vtctldata.GetShardRoutingRulesResponse.shard_routing_rules:type_name -> vschema.ShardRoutingRules
	294, // 108: vtctldata.GetSrvKeyspaceNamesResponse.names:type_name -> vtctldata.GetSrvKeyspaceNamesResponse.NamesEntry
	296, // 109: vtctldata.GetSrvKeyspacesResponse.srv_keyspaces:type_name -> vtctldata.GetSrvKeyspacesResponse.SrvKeyspacesEntry
	340, // 110: vtctldata.UpdateThrottlerConfigRequest.throttled_app:type_name -> topodata.ThrottledAppRule
	341, // 111: vtctldata.GetSrvVSchemaResponse.srv_v_schema:type_name -> vschema.SrvVSchema
	297, // 112: vtctldata.GetSrvVSchemasResponse.srv_v_schemas:type_name -> vtctldata.GetSrvVSchemasResponse.SrvVSchemasEntry
	320, // 113: vtctldata.GetTabletRequest.tablet_alias:type_name -> topodata.TabletAlias
	330, // 114: vtctldata.GetTabletResponse.tablet:type_name -> topodata.Tablet
	320, // 115: vtctldata.GetTabletsRequest.tablet_aliases:type_name -> topodata.TabletAlias
	329, // 116: vtctldata.GetTabletsRequest.tablet_type:type_name -> topodata.TabletType
	330, // 117: vtctldata.GetTabletsResponse.tablets:type_name -> topodata.Tablet
	320, // 118: vtctldata.GetThrottlerStatusRequest.tablet_alias:type_name -> topodata.TabletAlias
	342, // 119: vtctldata.GetThrottlerStatusResponse.status:type_name -> tabletmanagerdata.GetThrottlerStatusResponse
	123, // 120: vtctldata.GetTopologyPathResponse.cell:type_name -> vtctldata.TopologyCell
	343, // 121: vtctldata.GetUnresolvedTransactionsResponse.transactions:type_name -> query.TransactionMetadata
	343, // 122: vtctldata.GetTransactionInfoResponse.metadata:type_name -> query.TransactionMetadata
	127, // 123: vtctldata.GetTransactionInfoResponse.shard_states:type_name -> vtctldata.ShardTransactionState
	344, // 124: vtctldata.ConcludeTransactionRequest.participants:type_name -> query.Target
	320, // 125: vtctldata.GetVersionRequest.tablet_alias:type_name -> topodata.TabletAlias
	328, // 126: vtctldata.GetVSchemaResponse.v_schema:type_name -> vschema.Keyspace
	13,  // 127: vtctldata.GetWorkflowsResponse.workflows:type_name -> vtctldata.Workflow
	320, // 128: vtctldata.InitShardPrimaryRequest.primary_elect_tablet_alias:type_name -> topodata.TabletAlias
	321, // 129: vtctldata.InitShardPrimaryRequest.wait_replicas_timeout:type_name -> vttime.Duration
	316, // 130: vtctldata.InitShardPrimaryResponse.events:type_name -> logutil.Event
	327, // 131: vtctldata.LaunchSchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	298, // 132: vtctldata.LaunchSchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.LaunchSchemaMigrationResponse.RowsAffectedByShardEntry
	328, // 133: vtctldata.LookupVindexCreateRequest.vindex:type_name -> vschema.Keyspace
	329, // 134: vtctldata.LookupVindexCreateRequest.tablet_types:type_name -> topodata.TabletType
	317, // 135: vtctldata.LookupVindexCreateRequest.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	8,   // 136: vtctldata.MaterializeCreateRequest.settings:type_name -> vtctldata.MaterializeSettings
	7,   // 137: vtctldata.WorkflowAddTablesRequest.table_settings:type_name -> vtctldata.TableMaterializeSettings
	0,   // 138: vtctldata.WorkflowAddTablesRequest.materialization_intent:type_name -> vtctldata.MaterializationIntent
	329, // 139: vtctldata.MigrateCreateRequest.tablet_types:type_name -> topodata.TabletType
	317, // 140: vtctldata.MigrateCreateRequest.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	329, // 141: vtctldata.MoveTablesCreateRequest.tablet_types:type_name -> topodata.TabletType
	317, // 142: vtctldata.MoveTablesCreateRequest.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	12,  // 143: vtctldata.MoveTablesCreateRequest.workflow_options:type_name -> vtctldata.WorkflowOptions
	299, // 144: vtctldata.MoveTablesCreateResponse.details:type_name -> vtctldata.MoveTablesCreateResponse.TabletInfo
	320, // 145: vtctldata.PingTabletRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 146: vtctldata.PlannedReparentShardRequest.new_primary:type_name -> topodata.TabletAlias
	320, // 147: vtctldata.PlannedReparentShardRequest.avoid_primary:type_name -> topodata.TabletAlias
	321, // 148: vtctldata.PlannedReparentShardRequest.wait_replicas_timeout:type_name -> vttime.Duration
	321, // 149: vtctldata.PlannedReparentShardRequest.tolerable_replication_lag:type_name -> vttime.Duration
	320, // 150: vtctldata.PlannedReparentShardRequest.expected_primary:type_name -> topodata.TabletAlias
	320, // 151: vtctldata.PlannedReparentShardResponse.promoted_primary:type_name -> topodata.TabletAlias
	316, // 152: vtctldata.PlannedReparentShardResponse.events:type_name -> logutil.Event
	320, // 153: vtctldata.RefreshStateRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 154: vtctldata.ReloadSchemaRequest.tablet_alias:type_name -> topodata.TabletAlias
	316, // 155: vtctldata.ReloadSchemaKeyspaceResponse.events:type_name -> logutil.Event
	316, // 156: vtctldata.ReloadSchemaShardResponse.events:type_name -> logutil.Event
	320, // 157: vtctldata.ReparentTabletRequest.tablet:type_name -> topodata.TabletAlias
	320, // 158: vtctldata.ReparentTabletResponse.primary:type_name -> topodata.TabletAlias
	329, // 159: vtctldata.ReshardCreateRequest.tablet_types:type_name -> topodata.TabletType
	317, // 160: vtctldata.ReshardCreateRequest.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	12,  // 161: vtctldata.ReshardCreateRequest.workflow_options:type_name -> vtctldata.WorkflowOptions
	320, // 162: vtctldata.RestoreFromBackupRequest.tablet_alias:type_name -> topodata.TabletAlias
	319, // 163: vtctldata.RestoreFromBackupRequest.backup_time:type_name -> vttime.Time
	319, // 164: vtctldata.RestoreFromBackupRequest.restore_to_timestamp:type_name -> vttime.Time
	320, // 165: vtctldata.RestoreFromBackupResponse.tablet_alias:type_name -> topodata.TabletAlias
	316, // 166: vtctldata.RestoreFromBackupResponse.event:type_name -> logutil.Event
	327, // 167: vtctldata.RetrySchemaMigrationRequest.caller_id:type_name -> vtrpc.CallerID
	300, // 168: vtctldata.RetrySchemaMigrationResponse.rows_affected_by_shard:type_name -> vtctldata.RetrySchemaMigrationResponse.RowsAffectedByShardEntry
	320, // 169: vtctldata.RunHealthCheckRequest.tablet_alias:type_name -> topodata.TabletAlias
	318, // 170: vtctldata.SetKeyspaceDurabilityPolicyResponse.keyspace:type_name -> topodata.Keyspace
	318, // 171: vtctldata.SetKeyspaceShardingInfoResponse.keyspace:type_name -> topodata.Keyspace
	322, // 172: vtctldata.SetShardIsPrimaryServingResponse.shard:type_name -> topodata.Shard
	329, // 173: vtctldata.SetShardTabletControlRequest.tablet_type:type_name -> topodata.TabletType
	322, // 174: vtctldata.SetShardTabletControlResponse.shard:type_name -> topodata.Shard
	320, // 175: vtctldata.SetWritableRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 176: vtctldata.ShardReplicationAddRequest.tablet_alias:type_name -> topodata.TabletAlias
	345, // 177: vtctldata.ShardReplicationFixResponse.error:type_name -> topodata.ShardReplicationError
	301, // 178: vtctldata.ShardReplicationPositionsResponse.replication_statuses:type_name -> vtctldata.ShardReplicationPositionsResponse.ReplicationStatusesEntry
	302, // 179: vtctldata.ShardReplicationPositionsResponse.tablet_map:type_name -> vtctldata.ShardReplicationPositionsResponse.TabletMapEntry
	320, // 180: vtctldata.ShardReplicationRemoveRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 181: vtctldata.SleepTabletRequest.tablet_alias:type_name -> topodata.TabletAlias
	321, // 182: vtctldata.SleepTabletRequest.duration:type_name -> vttime.Duration
	346, // 183: vtctldata.SourceShardAddRequest.key_range:type_name -> topodata.KeyRange
	322, // 184: vtctldata.SourceShardAddResponse.shard:type_name -> topodata.Shard
	322, // 185: vtctldata.SourceShardDeleteResponse.shard:type_name -> topodata.Shard
	320, // 186: vtctldata.StartReplicationRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 187: vtctldata.StopReplicationRequest.tablet_alias:type_name -> topodata.TabletAlias
	320, // 188: vtctldata.TabletExternallyReparentedRequest.tablet:type_name -> topodata.TabletAlias
	320, // 189: vtctldata.TabletExternallyReparentedResponse.new_primary:type_name -> topodata.TabletAlias
	320, // 190: vtctldata.TabletExternallyReparentedResponse.old_primary:type_name -> topodata.TabletAlias
	323, // 191: vtctldata.UpdateCellInfoRequest.cell_info:type_name -> topodata.CellInfo
	323, // 192: vtctldata.UpdateCellInfoResponse.cell_info:type_name -> topodata.CellInfo
	347, // 193: vtctldata.UpdateCellsAliasRequest.cells_alias:type_name -> topodata.CellsAlias
	347, // 194: vtctldata.UpdateCellsAliasResponse.cells_alias:type_name -> topodata.CellsAlias
	303, // 195: vtctldata.ValidateResponse.results_by_keyspace:type_name -> vtctldata.ValidateResponse.ResultsByKeyspaceEntry
	304, // 196: vtctldata.ValidateKeyspaceResponse.results_by_shard:type_name -> vtctldata.ValidateKeyspaceResponse.ResultsByShardEntry
	305, // 197: vtctldata.ValidateSchemaKeyspaceResponse.results_by_shard:type_name -> vtctldata.ValidateSchemaKeyspaceResponse.ResultsByShardEntry
	306, // 198: vtctldata.ValidateVersionKeyspaceResponse.results_by_shard:type_name -> vtctldata.ValidateVersionKeyspaceResponse.ResultsByShardEntry
	307, // 199: vtctldata.ValidateVSchemaResponse.results_by_shard:type_name -> vtctldata.ValidateVSchemaResponse.ResultsByShardEntry
	329, // 200: vtctldata.VDiffCreateRequest.tablet_types:type_name -> topodata.TabletType
	317, // 201: vtctldata.VDiffCreateRequest.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	321, // 202: vtctldata.VDiffCreateRequest.filtered_replication_wait_time:type_name -> vttime.Duration
	321, // 203: vtctldata.VDiffCreateRequest.wait_update_interval:type_name -> vttime.Duration
	321, // 204: vtctldata.VDiffCreateRequest.max_diff_duration:type_name -> vttime.Duration
	308, // 205: vtctldata.VDiffShowResponse.tablet_responses:type_name -> vtctldata.VDiffShowResponse.TabletResponsesEntry
	309, // 206: vtctldata.WorkflowDeleteResponse.details:type_name -> vtctldata.WorkflowDeleteResponse.TabletInfo
	313, // 207: vtctldata.WorkflowStatusResponse.table_copy_state:type_name -> vtctldata.WorkflowStatusResponse.TableCopyStateEntry
	314, // 208: vtctldata.WorkflowStatusResponse.shard_streams:type_name -> vtctldata.WorkflowStatusResponse.ShardStreamsEntry
	329, // 209: vtctldata.WorkflowSwitchTrafficRequest.tablet_types:type_name -> topodata.TabletType
	321, // 210: vtctldata.WorkflowSwitchTrafficRequest.max_replication_lag_allowed:type_name -> vttime.Duration
	321, // 211: vtctldata.WorkflowSwitchTrafficRequest.timeout:type_name -> vttime.Duration
	348, // 212: vtctldata.WorkflowUpdateRequest.tablet_request:type_name -> tabletmanagerdata.UpdateVReplicationWorkflowRequest
	315, // 213: vtctldata.WorkflowUpdateResponse.details:type_name -> vtctldata.WorkflowUpdateResponse.TabletInfo
	349, // 214: vtctldata.GetMirrorRulesResponse.mirror_rules:type_name -> vschema.MirrorRules
	329, // 215: vtctldata.WorkflowMirrorTrafficRequest.tablet_types:type_name -> topodata.TabletType
	276, // 216: vtctldata.Workflow.ShardStreamsEntry.value:type_name -> vtctldata.Workflow.ShardStream
	277, // 217: vtctldata.Workflow.ShardStream.streams:type_name -> vtctldata.Workflow.Stream
	350, // 218: vtctldata.Workflow.ShardStream.tablet_controls:type_name -> topodata.Shard.TabletControl
	320, // 219: vtctldata.Workflow.Stream.tablet:type_name -> topodata.TabletAlias
	351, // 220: vtctldata.Workflow.Stream.binlog_source:type_name -> binlogdata.BinlogSource
	319, // 221: vtctldata.Workflow.Stream.transaction_timestamp:type_name -> vttime.Time
	319, // 222: vtctldata.Workflow.Stream.time_updated:type_name -> vttime.Time
	278, // 223: vtctldata.Workflow.Stream.copy_states:type_name -> vtctldata.Workflow.Stream.CopyState
	279, // 224: vtctldata.Workflow.Stream.logs:type_name -> vtctldata.Workflow.Stream.Log
	280, // 225: vtctldata.Workflow.Stream.throttler_status:type_name -> vtctldata.Workflow.Stream.ThrottlerStatus
	329, // 226: vtctldata.Workflow.Stream.tablet_types:type_name -> topodata.TabletType
	317, // 227: vtctldata.Workflow.Stream.tablet_selection_preference:type_name -> tabletmanagerdata.TabletSelectionPreference
	319, // 228: vtctldata.Workflow.Stream.Log.created_at:type_name -> vttime.Time
	319, // 229: vtctldata.Workflow.Stream.Log.updated_at:type_name -> vttime.Time
	319, // 230: vtctldata.Workflow.Stream.ThrottlerStatus.time_throttled:type_name -> vttime.Time
	283, // 231: vtctldata.ApplyVSchemaResponse.UnknownVindexParamsEntry.value:type_name -> vtctldata.ApplyVSchemaResponse.ParamList
	11,  // 232: vtctldata.FindAllShardsInKeyspaceResponse.ShardsEntry.value:type_name -> vtctldata.Shard
	347, // 233: vtctldata.GetCellsAliasesResponse.AliasesEntry.value:type_name -> topodata.CellsAlias
	352, // 234: vtctldata.GetShardReplicationResponse.ShardReplicationByCellEntry.value:type_name -> topodata.ShardReplication
	295, // 235: vtctldata.GetSrvKeyspaceNamesResponse.NamesEntry.value:type_name -> vtctldata.GetSrvKeyspaceNamesResponse.NameList
	353, // 236: vtctldata.GetSrvKeyspacesResponse.SrvKeyspacesEntry.value:type_name -> topodata.SrvKeyspace
	341, // 237: vtctldata.GetSrvVSchemasResponse.SrvVSchemasEntry.value:type_name -> vschema.SrvVSchema
	320, // 238: vtctldata.MoveTablesCreateResponse.TabletInfo.tablet:type_name -> topodata.TabletAlias
	354, // 239: vtctldata.ShardReplicationPositionsResponse.ReplicationStatusesEntry.value:type_name -> replicationdata.Status
	330, // 240: vtctldata.ShardReplicationPositionsResponse.TabletMapEntry.value:type_name -> topodata.Tablet
	238, // 241: vtctldata.ValidateResponse.ResultsByKeyspaceEntry.value:type_name -> vtctldata.ValidateKeyspaceResponse
	244, // 242: vtctldata.ValidateKeyspaceResponse.ResultsByShardEntry.value:type_name -> vtctldata.ValidateShardResponse
	244, // 243: vtctldata.ValidateSchemaKeyspaceResponse.ResultsByShardEntry.value:type_name -> vtctldata.ValidateShardResponse
	244, // 244: vtctldata.ValidateVersionKeyspaceResponse.ResultsByShardEntry.value:type_name -> vtctldata.ValidateShardResponse
	244, // 245: vtctldata.ValidateVSchemaResponse.ResultsByShardEntry.value:type_name -> vtctldata.ValidateShardResponse
	355, // 246: vtctldata.VDiffShowResponse.TabletResponsesEntry.value:type_name -> tabletmanagerdata.VDiffResponse
	320, // 247: vtctldata.WorkflowDeleteResponse.TabletInfo.tablet:type_name -> topodata.TabletAlias
	320, // 248: vtctldata.WorkflowStatusResponse.ShardStreamState.tablet:type_name -> topodata.TabletAlias
	311, // 249: vtctldata.WorkflowStatusResponse.ShardStreams.streams:type_name -> vtctldata.WorkflowStatusResponse.ShardStreamState
	310, // 250: vtctldata.WorkflowStatusResponse.TableCopyStateEntry.value:type_name -> vtctldata.WorkflowStatusResponse.TableCopyState
	312, // 251: vtctldata.WorkflowStatusResponse.ShardStreamsEntry.value:type_name -> vtctldata.WorkflowStatusResponse.ShardStreams
	320, // 252: vtctldata.WorkflowUpdateResponse.TabletInfo.tablet:type_name -> topodata.TabletAlias
	253, // [253:253] is the sub-list for method output_type
	253, // [253:253] is the sub-list for method input_type
	253, // [253:253] is the sub-list for extension type_name
	253, // [253:253] is the sub-list for extension extendee
	0,   // [0:253] is the sub-list for field type_name
}

func init() { file_vtctldata_proto_init() }
func file_vtctldata_proto_init() {
	if File_vtctldata_proto != nil {
		return
	}
	file_vtctldata_proto_msgTypes[23].OneofWrappers = []any{}
	file_vtctldata_proto_msgTypes[246].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vtctldata_proto_rawDesc), len(file_vtctldata_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   311,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vtctldata_proto_goTypes,
		DependencyIndexes: file_vtctldata_proto_depIdxs,
		EnumInfos:         file_vtctldata_proto_enumTypes,
		MessageInfos:      file_vtctldata_proto_msgTypes,
	}.Build()
	File_vtctldata_proto = out.File
	file_vtctldata_proto_goTypes = nil
	file_vtctldata_proto_depIdxs = nil
}
