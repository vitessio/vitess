//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the types needed to define a vschema.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: vschema.proto

package vschema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	query "vitess.io/vitess/go/vt/proto/query"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Keyspace_ForeignKeyMode int32

const (
	Keyspace_unspecified Keyspace_ForeignKeyMode = 0
	Keyspace_disallow    Keyspace_ForeignKeyMode = 1
	Keyspace_unmanaged   Keyspace_ForeignKeyMode = 2
	Keyspace_managed     Keyspace_ForeignKeyMode = 3
)

// Enum value maps for Keyspace_ForeignKeyMode.
var (
	Keyspace_ForeignKeyMode_name = map[int32]string{
		0: "unspecified",
		1: "disallow",
		2: "unmanaged",
		3: "managed",
	}
	Keyspace_ForeignKeyMode_value = map[string]int32{
		"unspecified": 0,
		"disallow":    1,
		"unmanaged":   2,
		"managed":     3,
	}
)

func (x Keyspace_ForeignKeyMode) Enum() *Keyspace_ForeignKeyMode {
	p := new(Keyspace_ForeignKeyMode)
	*p = x
	return p
}

func (x Keyspace_ForeignKeyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Keyspace_ForeignKeyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vschema_proto_enumTypes[0].Descriptor()
}

func (Keyspace_ForeignKeyMode) Type() protoreflect.EnumType {
	return &file_vschema_proto_enumTypes[0]
}

func (x Keyspace_ForeignKeyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Keyspace_ForeignKeyMode.Descriptor instead.
func (Keyspace_ForeignKeyMode) EnumDescriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{2, 0}
}

// RoutingRules specify the high level routing rules for the VSchema.
type RoutingRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// rules should ideally be a map. However protos dont't allow
	// repeated fields as elements of a map. So, we use a list
	// instead.
	Rules         []*RoutingRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutingRules) Reset() {
	*x = RoutingRules{}
	mi := &file_vschema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingRules) ProtoMessage() {}

func (x *RoutingRules) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingRules.ProtoReflect.Descriptor instead.
func (*RoutingRules) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{0}
}

func (x *RoutingRules) GetRules() []*RoutingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// RoutingRule specifies a routing rule.
type RoutingRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromTable     string                 `protobuf:"bytes,1,opt,name=from_table,json=fromTable,proto3" json:"from_table,omitempty"`
	ToTables      []string               `protobuf:"bytes,2,rep,name=to_tables,json=toTables,proto3" json:"to_tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutingRule) Reset() {
	*x = RoutingRule{}
	mi := &file_vschema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingRule) ProtoMessage() {}

func (x *RoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingRule.ProtoReflect.Descriptor instead.
func (*RoutingRule) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{1}
}

func (x *RoutingRule) GetFromTable() string {
	if x != nil {
		return x.FromTable
	}
	return ""
}

func (x *RoutingRule) GetToTables() []string {
	if x != nil {
		return x.ToTables
	}
	return nil
}

// Keyspace is the vschema for a keyspace.
type Keyspace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If sharded is false, vindexes and tables are ignored.
	Sharded  bool               `protobuf:"varint,1,opt,name=sharded,proto3" json:"sharded,omitempty"`
	Vindexes map[string]*Vindex `protobuf:"bytes,2,rep,name=vindexes,proto3" json:"vindexes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tables   map[string]*Table  `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If require_explicit_routing is true, vindexes and tables are not added to global routing
	RequireExplicitRouting bool `protobuf:"varint,4,opt,name=require_explicit_routing,json=requireExplicitRouting,proto3" json:"require_explicit_routing,omitempty"`
	// foreign_key_mode dictates how Vitess should handle foreign keys for this keyspace.
	ForeignKeyMode Keyspace_ForeignKeyMode `protobuf:"varint,5,opt,name=foreign_key_mode,json=foreignKeyMode,proto3,enum=vschema.Keyspace_ForeignKeyMode" json:"foreign_key_mode,omitempty"`
	// multi_tenant_mode specifies that the keyspace is multi-tenant. Currently used during migrations with MoveTables.
	MultiTenantSpec *MultiTenantSpec `protobuf:"bytes,6,opt,name=multi_tenant_spec,json=multiTenantSpec,proto3" json:"multi_tenant_spec,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Keyspace) Reset() {
	*x = Keyspace{}
	mi := &file_vschema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keyspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyspace) ProtoMessage() {}

func (x *Keyspace) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyspace.ProtoReflect.Descriptor instead.
func (*Keyspace) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{2}
}

func (x *Keyspace) GetSharded() bool {
	if x != nil {
		return x.Sharded
	}
	return false
}

func (x *Keyspace) GetVindexes() map[string]*Vindex {
	if x != nil {
		return x.Vindexes
	}
	return nil
}

func (x *Keyspace) GetTables() map[string]*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *Keyspace) GetRequireExplicitRouting() bool {
	if x != nil {
		return x.RequireExplicitRouting
	}
	return false
}

func (x *Keyspace) GetForeignKeyMode() Keyspace_ForeignKeyMode {
	if x != nil {
		return x.ForeignKeyMode
	}
	return Keyspace_unspecified
}

func (x *Keyspace) GetMultiTenantSpec() *MultiTenantSpec {
	if x != nil {
		return x.MultiTenantSpec
	}
	return nil
}

type MultiTenantSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tenant_column is the name of the column that specifies the tenant id.
	TenantIdColumnName string `protobuf:"bytes,1,opt,name=tenant_id_column_name,json=tenantIdColumnName,proto3" json:"tenant_id_column_name,omitempty"`
	// tenant_column_type is the type of the column that specifies the tenant id.
	TenantIdColumnType query.Type `protobuf:"varint,2,opt,name=tenant_id_column_type,json=tenantIdColumnType,proto3,enum=query.Type" json:"tenant_id_column_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MultiTenantSpec) Reset() {
	*x = MultiTenantSpec{}
	mi := &file_vschema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiTenantSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTenantSpec) ProtoMessage() {}

func (x *MultiTenantSpec) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTenantSpec.ProtoReflect.Descriptor instead.
func (*MultiTenantSpec) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{3}
}

func (x *MultiTenantSpec) GetTenantIdColumnName() string {
	if x != nil {
		return x.TenantIdColumnName
	}
	return ""
}

func (x *MultiTenantSpec) GetTenantIdColumnType() query.Type {
	if x != nil {
		return x.TenantIdColumnType
	}
	return query.Type(0)
}

// Vindex is the vindex info for a Keyspace.
type Vindex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type must match one of the predefined
	// (or plugged in) vindex names.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// params is a map of attribute value pairs
	// that must be defined as required by the
	// vindex constructors. The values can only
	// be strings.
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A lookup vindex can have an owner table defined.
	// If so, rows in the lookup table are created or
	// deleted in sync with corresponding rows in the
	// owner table.
	Owner         string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vindex) Reset() {
	*x = Vindex{}
	mi := &file_vschema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vindex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vindex) ProtoMessage() {}

func (x *Vindex) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vindex.ProtoReflect.Descriptor instead.
func (*Vindex) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{4}
}

func (x *Vindex) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vindex) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Vindex) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// Table is the table info for a Keyspace.
type Table struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the table is a sequence, type must be
	// "sequence".
	//
	// If the table is a reference, type must be
	// "reference".
	// See https://vitess.io/docs/reference/features/vschema/#reference-tables.
	//
	// Otherwise, it should be empty.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// column_vindexes associates columns to vindexes.
	ColumnVindexes []*ColumnVindex `protobuf:"bytes,2,rep,name=column_vindexes,json=columnVindexes,proto3" json:"column_vindexes,omitempty"`
	// auto_increment is specified if a column needs
	// to be associated with a sequence.
	AutoIncrement *AutoIncrement `protobuf:"bytes,3,opt,name=auto_increment,json=autoIncrement,proto3" json:"auto_increment,omitempty"`
	// columns lists the columns for the table.
	Columns []*Column `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// pinned pins an unsharded table to a specific
	// shard, as dictated by the keyspace id.
	// The keyspace id is represented in hex form
	// like in keyranges.
	Pinned string `protobuf:"bytes,5,opt,name=pinned,proto3" json:"pinned,omitempty"`
	// column_list_authoritative is set to true if columns is
	// an authoritative list for the table. This allows
	// us to expand 'select *' expressions.
	ColumnListAuthoritative bool `protobuf:"varint,6,opt,name=column_list_authoritative,json=columnListAuthoritative,proto3" json:"column_list_authoritative,omitempty"`
	// reference tables may optionally indicate their source table.
	Source        string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_vschema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{5}
}

func (x *Table) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Table) GetColumnVindexes() []*ColumnVindex {
	if x != nil {
		return x.ColumnVindexes
	}
	return nil
}

func (x *Table) GetAutoIncrement() *AutoIncrement {
	if x != nil {
		return x.AutoIncrement
	}
	return nil
}

func (x *Table) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Table) GetPinned() string {
	if x != nil {
		return x.Pinned
	}
	return ""
}

func (x *Table) GetColumnListAuthoritative() bool {
	if x != nil {
		return x.ColumnListAuthoritative
	}
	return false
}

func (x *Table) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// ColumnVindex is used to associate a column to a vindex.
type ColumnVindex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Legacy implementation, moving forward all vindexes should define a list of columns.
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// The name must match a vindex defined in Keyspace.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of columns that define this Vindex
	Columns       []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnVindex) Reset() {
	*x = ColumnVindex{}
	mi := &file_vschema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnVindex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnVindex) ProtoMessage() {}

func (x *ColumnVindex) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnVindex.ProtoReflect.Descriptor instead.
func (*ColumnVindex) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnVindex) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ColumnVindex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnVindex) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Autoincrement is used to designate a column as auto-inc.
type AutoIncrement struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Column string                 `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// The sequence must match a table of type SEQUENCE.
	Sequence      string `protobuf:"bytes,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoIncrement) Reset() {
	*x = AutoIncrement{}
	mi := &file_vschema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoIncrement) ProtoMessage() {}

func (x *AutoIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoIncrement.ProtoReflect.Descriptor instead.
func (*AutoIncrement) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{7}
}

func (x *AutoIncrement) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *AutoIncrement) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

// Column describes a column.
type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          query.Type             `protobuf:"varint,2,opt,name=type,proto3,enum=query.Type" json:"type,omitempty"`
	Invisible     bool                   `protobuf:"varint,3,opt,name=invisible,proto3" json:"invisible,omitempty"`
	Default       string                 `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
	CollationName string                 `protobuf:"bytes,5,opt,name=collation_name,json=collationName,proto3" json:"collation_name,omitempty"`
	Size          int32                  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Scale         int32                  `protobuf:"varint,7,opt,name=scale,proto3" json:"scale,omitempty"`
	Nullable      *bool                  `protobuf:"varint,8,opt,name=nullable,proto3,oneof" json:"nullable,omitempty"`
	// values contains the list of values for an enum or set column.
	Values        []string `protobuf:"bytes,9,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_vschema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{8}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() query.Type {
	if x != nil {
		return x.Type
	}
	return query.Type(0)
}

func (x *Column) GetInvisible() bool {
	if x != nil {
		return x.Invisible
	}
	return false
}

func (x *Column) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Column) GetCollationName() string {
	if x != nil {
		return x.CollationName
	}
	return ""
}

func (x *Column) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Column) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *Column) GetNullable() bool {
	if x != nil && x.Nullable != nil {
		return *x.Nullable
	}
	return false
}

func (x *Column) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// SrvVSchema is the roll-up of all the Keyspace schema for a cell.
type SrvVSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// keyspaces is a map of keyspace name -> Keyspace object.
	Keyspaces            map[string]*Keyspace  `protobuf:"bytes,1,rep,name=keyspaces,proto3" json:"keyspaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RoutingRules         *RoutingRules         `protobuf:"bytes,2,opt,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"` // table routing rules
	ShardRoutingRules    *ShardRoutingRules    `protobuf:"bytes,3,opt,name=shard_routing_rules,json=shardRoutingRules,proto3" json:"shard_routing_rules,omitempty"`
	KeyspaceRoutingRules *KeyspaceRoutingRules `protobuf:"bytes,4,opt,name=keyspace_routing_rules,json=keyspaceRoutingRules,proto3" json:"keyspace_routing_rules,omitempty"`
	MirrorRules          *MirrorRules          `protobuf:"bytes,5,opt,name=mirror_rules,json=mirrorRules,proto3" json:"mirror_rules,omitempty"` // mirror rules
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SrvVSchema) Reset() {
	*x = SrvVSchema{}
	mi := &file_vschema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SrvVSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvVSchema) ProtoMessage() {}

func (x *SrvVSchema) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvVSchema.ProtoReflect.Descriptor instead.
func (*SrvVSchema) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{9}
}

func (x *SrvVSchema) GetKeyspaces() map[string]*Keyspace {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *SrvVSchema) GetRoutingRules() *RoutingRules {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

func (x *SrvVSchema) GetShardRoutingRules() *ShardRoutingRules {
	if x != nil {
		return x.ShardRoutingRules
	}
	return nil
}

func (x *SrvVSchema) GetKeyspaceRoutingRules() *KeyspaceRoutingRules {
	if x != nil {
		return x.KeyspaceRoutingRules
	}
	return nil
}

func (x *SrvVSchema) GetMirrorRules() *MirrorRules {
	if x != nil {
		return x.MirrorRules
	}
	return nil
}

// ShardRoutingRules specify the shard routing rules for the VSchema.
type ShardRoutingRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*ShardRoutingRule    `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardRoutingRules) Reset() {
	*x = ShardRoutingRules{}
	mi := &file_vschema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardRoutingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardRoutingRules) ProtoMessage() {}

func (x *ShardRoutingRules) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardRoutingRules.ProtoReflect.Descriptor instead.
func (*ShardRoutingRules) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{10}
}

func (x *ShardRoutingRules) GetRules() []*ShardRoutingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// ShardRoutingRule specifies a routing rule.
type ShardRoutingRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromKeyspace  string                 `protobuf:"bytes,1,opt,name=from_keyspace,json=fromKeyspace,proto3" json:"from_keyspace,omitempty"`
	ToKeyspace    string                 `protobuf:"bytes,2,opt,name=to_keyspace,json=toKeyspace,proto3" json:"to_keyspace,omitempty"`
	Shard         string                 `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardRoutingRule) Reset() {
	*x = ShardRoutingRule{}
	mi := &file_vschema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardRoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardRoutingRule) ProtoMessage() {}

func (x *ShardRoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardRoutingRule.ProtoReflect.Descriptor instead.
func (*ShardRoutingRule) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{11}
}

func (x *ShardRoutingRule) GetFromKeyspace() string {
	if x != nil {
		return x.FromKeyspace
	}
	return ""
}

func (x *ShardRoutingRule) GetToKeyspace() string {
	if x != nil {
		return x.ToKeyspace
	}
	return ""
}

func (x *ShardRoutingRule) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

type KeyspaceRoutingRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*KeyspaceRoutingRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyspaceRoutingRules) Reset() {
	*x = KeyspaceRoutingRules{}
	mi := &file_vschema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyspaceRoutingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyspaceRoutingRules) ProtoMessage() {}

func (x *KeyspaceRoutingRules) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyspaceRoutingRules.ProtoReflect.Descriptor instead.
func (*KeyspaceRoutingRules) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{12}
}

func (x *KeyspaceRoutingRules) GetRules() []*KeyspaceRoutingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type KeyspaceRoutingRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromKeyspace  string                 `protobuf:"bytes,1,opt,name=from_keyspace,json=fromKeyspace,proto3" json:"from_keyspace,omitempty"`
	ToKeyspace    string                 `protobuf:"bytes,2,opt,name=to_keyspace,json=toKeyspace,proto3" json:"to_keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyspaceRoutingRule) Reset() {
	*x = KeyspaceRoutingRule{}
	mi := &file_vschema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyspaceRoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyspaceRoutingRule) ProtoMessage() {}

func (x *KeyspaceRoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyspaceRoutingRule.ProtoReflect.Descriptor instead.
func (*KeyspaceRoutingRule) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{13}
}

func (x *KeyspaceRoutingRule) GetFromKeyspace() string {
	if x != nil {
		return x.FromKeyspace
	}
	return ""
}

func (x *KeyspaceRoutingRule) GetToKeyspace() string {
	if x != nil {
		return x.ToKeyspace
	}
	return ""
}

// MirrorRules specify the high level mirror rules for the VSchema.
type MirrorRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// rules should ideally be a map. However protos dont't allow
	// repeated fields as elements of a map. So, we use a list
	// instead.
	Rules         []*MirrorRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MirrorRules) Reset() {
	*x = MirrorRules{}
	mi := &file_vschema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirrorRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRules) ProtoMessage() {}

func (x *MirrorRules) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorRules.ProtoReflect.Descriptor instead.
func (*MirrorRules) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{14}
}

func (x *MirrorRules) GetRules() []*MirrorRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// MirrorRule specifies a mirror rule.
type MirrorRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromTable     string                 `protobuf:"bytes,1,opt,name=from_table,json=fromTable,proto3" json:"from_table,omitempty"`
	ToTable       string                 `protobuf:"bytes,2,opt,name=to_table,json=toTable,proto3" json:"to_table,omitempty"`
	Percent       float32                `protobuf:"fixed32,3,opt,name=percent,proto3" json:"percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MirrorRule) Reset() {
	*x = MirrorRule{}
	mi := &file_vschema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirrorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRule) ProtoMessage() {}

func (x *MirrorRule) ProtoReflect() protoreflect.Message {
	mi := &file_vschema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorRule.ProtoReflect.Descriptor instead.
func (*MirrorRule) Descriptor() ([]byte, []int) {
	return file_vschema_proto_rawDescGZIP(), []int{15}
}

func (x *MirrorRule) GetFromTable() string {
	if x != nil {
		return x.FromTable
	}
	return ""
}

func (x *MirrorRule) GetToTable() string {
	if x != nil {
		return x.ToTable
	}
	return ""
}

func (x *MirrorRule) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

var File_vschema_proto protoreflect.FileDescriptor

const file_vschema_proto_rawDesc = "" +
	"\n" +
	"\rvschema.proto\x12\avschema\x1a\vquery.proto\":\n" +
	"\fRoutingRules\x12*\n" +
	"\x05rules\x18\x01 \x03(\v2\x14.vschema.RoutingRuleR\x05rules\"I\n" +
	"\vRoutingRule\x12\x1d\n" +
	"\n" +
	"from_table\x18\x01 \x01(\tR\tfromTable\x12\x1b\n" +
	"\tto_tables\x18\x02 \x03(\tR\btoTables\"\xca\x04\n" +
	"\bKeyspace\x12\x18\n" +
	"\asharded\x18\x01 \x01(\bR\asharded\x12;\n" +
	"\bvindexes\x18\x02 \x03(\v2\x1f.vschema.Keyspace.VindexesEntryR\bvindexes\x125\n" +
	"\x06tables\x18\x03 \x03(\v2\x1d.vschema.Keyspace.TablesEntryR\x06tables\x128\n" +
	"\x18require_explicit_routing\x18\x04 \x01(\bR\x16requireExplicitRouting\x12J\n" +
	"\x10foreign_key_mode\x18\x05 \x01(\x0e2 .vschema.Keyspace.ForeignKeyModeR\x0eforeignKeyMode\x12D\n" +
	"\x11multi_tenant_spec\x18\x06 \x01(\v2\x18.vschema.MultiTenantSpecR\x0fmultiTenantSpec\x1aL\n" +
	"\rVindexesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.vschema.VindexR\x05value:\x028\x01\x1aI\n" +
	"\vTablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.vschema.TableR\x05value:\x028\x01\"K\n" +
	"\x0eForeignKeyMode\x12\x0f\n" +
	"\vunspecified\x10\x00\x12\f\n" +
	"\bdisallow\x10\x01\x12\r\n" +
	"\tunmanaged\x10\x02\x12\v\n" +
	"\amanaged\x10\x03\"\x84\x01\n" +
	"\x0fMultiTenantSpec\x121\n" +
	"\x15tenant_id_column_name\x18\x01 \x01(\tR\x12tenantIdColumnName\x12>\n" +
	"\x15tenant_id_column_type\x18\x02 \x01(\x0e2\v.query.TypeR\x12tenantIdColumnType\"\xa2\x01\n" +
	"\x06Vindex\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x123\n" +
	"\x06params\x18\x02 \x03(\v2\x1b.vschema.Vindex.ParamsEntryR\x06params\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x1a9\n" +
	"\vParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb1\x02\n" +
	"\x05Table\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12>\n" +
	"\x0fcolumn_vindexes\x18\x02 \x03(\v2\x15.vschema.ColumnVindexR\x0ecolumnVindexes\x12=\n" +
	"\x0eauto_increment\x18\x03 \x01(\v2\x16.vschema.AutoIncrementR\rautoIncrement\x12)\n" +
	"\acolumns\x18\x04 \x03(\v2\x0f.vschema.ColumnR\acolumns\x12\x16\n" +
	"\x06pinned\x18\x05 \x01(\tR\x06pinned\x12:\n" +
	"\x19column_list_authoritative\x18\x06 \x01(\bR\x17columnListAuthoritative\x12\x16\n" +
	"\x06source\x18\a \x01(\tR\x06source\"T\n" +
	"\fColumnVindex\x12\x16\n" +
	"\x06column\x18\x01 \x01(\tR\x06column\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acolumns\x18\x03 \x03(\tR\acolumns\"C\n" +
	"\rAutoIncrement\x12\x16\n" +
	"\x06column\x18\x01 \x01(\tR\x06column\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\tR\bsequence\"\x8c\x02\n" +
	"\x06Column\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\x04type\x18\x02 \x01(\x0e2\v.query.TypeR\x04type\x12\x1c\n" +
	"\tinvisible\x18\x03 \x01(\bR\tinvisible\x12\x18\n" +
	"\adefault\x18\x04 \x01(\tR\adefault\x12%\n" +
	"\x0ecollation_name\x18\x05 \x01(\tR\rcollationName\x12\x12\n" +
	"\x04size\x18\x06 \x01(\x05R\x04size\x12\x14\n" +
	"\x05scale\x18\a \x01(\x05R\x05scale\x12\x1f\n" +
	"\bnullable\x18\b \x01(\bH\x00R\bnullable\x88\x01\x01\x12\x16\n" +
	"\x06values\x18\t \x03(\tR\x06valuesB\v\n" +
	"\t_nullable\"\xb5\x03\n" +
	"\n" +
	"SrvVSchema\x12@\n" +
	"\tkeyspaces\x18\x01 \x03(\v2\".vschema.SrvVSchema.KeyspacesEntryR\tkeyspaces\x12:\n" +
	"\rrouting_rules\x18\x02 \x01(\v2\x15.vschema.RoutingRulesR\froutingRules\x12J\n" +
	"\x13shard_routing_rules\x18\x03 \x01(\v2\x1a.vschema.ShardRoutingRulesR\x11shardRoutingRules\x12S\n" +
	"\x16keyspace_routing_rules\x18\x04 \x01(\v2\x1d.vschema.KeyspaceRoutingRulesR\x14keyspaceRoutingRules\x127\n" +
	"\fmirror_rules\x18\x05 \x01(\v2\x14.vschema.MirrorRulesR\vmirrorRules\x1aO\n" +
	"\x0eKeyspacesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.vschema.KeyspaceR\x05value:\x028\x01\"D\n" +
	"\x11ShardRoutingRules\x12/\n" +
	"\x05rules\x18\x01 \x03(\v2\x19.vschema.ShardRoutingRuleR\x05rules\"n\n" +
	"\x10ShardRoutingRule\x12#\n" +
	"\rfrom_keyspace\x18\x01 \x01(\tR\ffromKeyspace\x12\x1f\n" +
	"\vto_keyspace\x18\x02 \x01(\tR\n" +
	"toKeyspace\x12\x14\n" +
	"\x05shard\x18\x03 \x01(\tR\x05shard\"J\n" +
	"\x14KeyspaceRoutingRules\x122\n" +
	"\x05rules\x18\x01 \x03(\v2\x1c.vschema.KeyspaceRoutingRuleR\x05rules\"[\n" +
	"\x13KeyspaceRoutingRule\x12#\n" +
	"\rfrom_keyspace\x18\x01 \x01(\tR\ffromKeyspace\x12\x1f\n" +
	"\vto_keyspace\x18\x02 \x01(\tR\n" +
	"toKeyspace\"8\n" +
	"\vMirrorRules\x12)\n" +
	"\x05rules\x18\x01 \x03(\v2\x13.vschema.MirrorRuleR\x05rules\"`\n" +
	"\n" +
	"MirrorRule\x12\x1d\n" +
	"\n" +
	"from_table\x18\x01 \x01(\tR\tfromTable\x12\x19\n" +
	"\bto_table\x18\x02 \x01(\tR\atoTable\x12\x18\n" +
	"\apercent\x18\x03 \x01(\x02R\apercentB&Z$vitess.io/vitess/go/vt/proto/vschemab\x06proto3"

var (
	file_vschema_proto_rawDescOnce sync.Once
	file_vschema_proto_rawDescData []byte
)

func file_vschema_proto_rawDescGZIP() []byte {
	file_vschema_proto_rawDescOnce.Do(func() {
		file_vschema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vschema_proto_rawDesc), len(file_vschema_proto_rawDesc)))
	})
	return file_vschema_proto_rawDescData
}

var file_vschema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vschema_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_vschema_proto_goTypes = []any{
	(Keyspace_ForeignKeyMode)(0), // 0: vschema.Keyspace.ForeignKeyMode
	(*RoutingRules)(nil),         // 1: vschema.RoutingRules
	(*RoutingRule)(nil),          // 2: vschema.RoutingRule
	(*Keyspace)(nil),             // 3: vschema.Keyspace
	(*MultiTenantSpec)(nil),      // 4: vschema.MultiTenantSpec
	(*Vindex)(nil),               // 5: vschema.Vindex
	(*Table)(nil),                // 6: vschema.Table
	(*ColumnVindex)(nil),         // 7: vschema.ColumnVindex
	(*AutoIncrement)(nil),        // 8: vschema.AutoIncrement
	(*Column)(nil),               // 9: vschema.Column
	(*SrvVSchema)(nil),           // 10: vschema.SrvVSchema
	(*ShardRoutingRules)(nil),    // 11: vschema.ShardRoutingRules
	(*ShardRoutingRule)(nil),     // 12: vschema.ShardRoutingRule
	(*KeyspaceRoutingRules)(nil), // 13: vschema.KeyspaceRoutingRules
	(*KeyspaceRoutingRule)(nil),  // 14: vschema.KeyspaceRoutingRule
	(*MirrorRules)(nil),          // 15: vschema.MirrorRules
	(*MirrorRule)(nil),           // 16: vschema.MirrorRule
	nil,                          // 17: vschema.Keyspace.VindexesEntry
	nil,                          // 18: vschema.Keyspace.TablesEntry
	nil,                          // 19: vschema.Vindex.ParamsEntry
	nil,                          // 20: vschema.SrvVSchema.KeyspacesEntry
	(query.Type)(0),              // 21: query.Type
}
var file_vschema_proto_depIdxs = []int32{
	2,  // 0: vschema.RoutingRules.rules:type_name -> vschema.RoutingRule
	17, // 1: vschema.Keyspace.vindexes:type_name -> vschema.Keyspace.VindexesEntry
	18, // 2: vschema.Keyspace.tables:type_name -> vschema.Keyspace.TablesEntry
	0,  // 3: vschema.Keyspace.foreign_key_mode:type_name -> vschema.Keyspace.ForeignKeyMode
	4,  // 4: vschema.Keyspace.multi_tenant_spec:type_name -> vschema.MultiTenantSpec
	21, // 5: vschema.MultiTenantSpec.tenant_id_column_type:type_name -> query.Type
	19, // 6: vschema.Vindex.params:type_name -> vschema.Vindex.ParamsEntry
	7,  // 7: vschema.Table.column_vindexes:type_name -> vschema.ColumnVindex
	8,  // 8: vschema.Table.auto_increment:type_name -> vschema.AutoIncrement
	9,  // 9: vschema.Table.columns:type_name -> vschema.Column
	21, // 10: vschema.Column.type:type_name -> query.Type
	20, // 11: vschema.SrvVSchema.keyspaces:type_name -> vschema.SrvVSchema.KeyspacesEntry
	1,  // 12: vschema.SrvVSchema.routing_rules:type_name -> vschema.RoutingRules
	11, // 13: vschema.SrvVSchema.shard_routing_rules:type_name -> vschema.ShardRoutingRules
	13, // 14: vschema.SrvVSchema.keyspace_routing_rules:type_name -> vschema.KeyspaceRoutingRules
	15, // 15: vschema.SrvVSchema.mirror_rules:type_name -> vschema.MirrorRules
	12, // 16: vschema.ShardRoutingRules.rules:type_name -> vschema.ShardRoutingRule
	14, // 17: vschema.KeyspaceRoutingRules.rules:type_name -> vschema.KeyspaceRoutingRule
	16, // 18: vschema.MirrorRules.rules:type_name -> vschema.MirrorRule
	5,  // 19: vschema.Keyspace.VindexesEntry.value:type_name -> vschema.Vindex
	6,  // 20: vschema.Keyspace.TablesEntry.value:type_name -> vschema.Table
	3,  // 21: vschema.SrvVSchema.KeyspacesEntry.value:type_name -> vschema.Keyspace
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_vschema_proto_init() }
func file_vschema_proto_init() {
	if File_vschema_proto != nil {
		return
	}
	file_vschema_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vschema_proto_rawDesc), len(file_vschema_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vschema_proto_goTypes,
		DependencyIndexes: file_vschema_proto_depIdxs,
		EnumInfos:         file_vschema_proto_enumTypes,
		MessageInfos:      file_vschema_proto_msgTypes,
	}.Build()
	File_vschema_proto = out.File
	file_vschema_proto_goTypes = nil
	file_vschema_proto_depIdxs = nil
}
