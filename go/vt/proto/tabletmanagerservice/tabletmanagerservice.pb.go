// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tabletmanagerservice.proto

package tabletmanagerservice

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	tabletmanagerdata "vitess.io/vitess/go/vt/proto/tabletmanagerdata"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tabletmanagerservice.proto", fileDescriptor_9ee75fe63cfd9360) }

var fileDescriptor_9ee75fe63cfd9360 = []byte{
	// 1116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdb, 0x6f, 0x1b, 0x45,
	0x14, 0xc6, 0x89, 0x04, 0x95, 0x98, 0x72, 0x1d, 0x2a, 0x2a, 0x05, 0x89, 0x5b, 0x13, 0x28, 0x71,
	0xb1, 0x7b, 0xa1, 0xbc, 0xbb, 0x97, 0xa4, 0x41, 0x8d, 0x30, 0x76, 0x43, 0x10, 0x48, 0x95, 0x26,
	0xf6, 0x89, 0xbd, 0x64, 0xbd, 0xb3, 0xcc, 0x8c, 0x2d, 0xf2, 0x84, 0xd4, 0x57, 0x24, 0xfe, 0x66,
	0xb4, 0xeb, 0x9d, 0xdd, 0x33, 0xbb, 0x67, 0x8f, 0x37, 0x6f, 0x96, 0xbf, 0xdf, 0x9c, 0x6f, 0x2e,
	0x67, 0xce, 0xcc, 0x8e, 0xd8, 0x75, 0xea, 0x3c, 0x06, 0xb7, 0x54, 0x89, 0x9a, 0x83, 0xb1, 0x60,
	0xd6, 0xd1, 0x14, 0xfa, 0xa9, 0xd1, 0x4e, 0xcb, 0x5b, 0x94, 0xb6, 0x7b, 0x3b, 0xf8, 0x77, 0xa6,
	0x9c, 0xda, 0xe0, 0x0f, 0xdf, 0xf4, 0xc4, 0xfb, 0xaf, 0x72, 0xed, 0x64, 0xa3, 0xc9, 0x63, 0xf1,
	0xf6, 0x28, 0x4a, 0xe6, 0xf2, 0xf3, 0x7e, 0xb3, 0x4d, 0x26, 0x8c, 0xe1, 0xaf, 0x15, 0x58, 0xb7,
	0xfb, 0x45, 0xab, 0x6e, 0x53, 0x9d, 0x58, 0xf8, 0xfa, 0x2d, 0xf9, 0x52, 0xbc, 0x33, 0x89, 0x01,
	0x52, 0x49, 0xb1, 0xb9, 0xe2, 0x83, 0x7d, 0xd9, 0x0e, 0x94, 0xd1, 0x5e, 0x8b, 0x9b, 0xcf, 0xff,
	0x86, 0xe9, 0xca, 0xc1, 0x0b, 0xad, 0x2f, 0xe5, 0x3e, 0xd1, 0x04, 0xe9, 0x3e, 0xf2, 0x37, 0xdb,
	0xb0, 0x32, 0xfe, 0x6f, 0xe2, 0xdd, 0x23, 0x70, 0x93, 0xe9, 0x02, 0x96, 0x4a, 0xde, 0x21, 0x9a,
	0x95, 0xaa, 0x8f, 0xbd, 0xc7, 0x43, 0x65, 0xe4, 0xb9, 0xf8, 0xe0, 0x08, 0xdc, 0x08, 0xcc, 0x32,
	0xb2, 0x36, 0xd2, 0x89, 0x95, 0x77, 0xe9, 0x96, 0x08, 0xf1, 0x1e, 0xdf, 0x75, 0x20, 0xf1, 0x14,
	0x4d, 0xc0, 0x8d, 0x41, 0xcd, 0x7e, 0x4e, 0xe2, 0x2b, 0x72, 0x8a, 0x90, 0xce, 0x4d, 0x51, 0x80,
	0x95, 0xf1, 0x95, 0x78, 0xaf, 0x10, 0xce, 0x4c, 0xe4, 0x40, 0x32, 0x2d, 0x73, 0xc0, 0x3b, 0x7c,
	0xbb, 0x95, 0x2b, 0x2d, 0xfe, 0x10, 0xe2, 0xe9, 0x42, 0x25, 0x73, 0x78, 0x75, 0x95, 0x82, 0xa4,
	0x66, 0xb8, 0x92, 0x7d, 0xf8, 0xfd, 0x2d, 0x14, 0xee, 0xff, 0x18, 0x2e, 0x0c, 0xd8, 0xc5, 0xc4,
	0xa9, 0x96, 0xfe, 0x63, 0x80, 0xeb, 0x7f, 0xc8, 0xe1, 0xb5, 0x1e, 0xaf, 0x92, 0x17, 0xa0, 0x62,
	0xb7, 0x78, 0xba, 0x80, 0xe9, 0x25, 0xb9, 0xd6, 0x21, 0xc2, 0xad, 0x75, 0x9d, 0x2c, 0x8d, 0x52,
	0xf1, 0xf1, 0xf1, 0x3c, 0xd1, 0x06, 0x36, 0xf2, 0x73, 0x63, 0xb4, 0x91, 0x3d, 0x22, 0x42, 0x83,
	0xf2, 0x76, 0xf7, 0xba, 0xc1, 0xe1, 0xec, 0xc5, 0x5a, 0xcd, 0x8a, 0x3d, 0x42, 0xcf, 0x5e, 0x05,
	0xf0, 0xb3, 0x87, 0xb9, 0xd2, 0xe2, 0x4f, 0xf1, 0xe1, 0xc8, 0xc0, 0x45, 0x1c, 0xcd, 0x17, 0x7e,
	0x27, 0x52, 0x93, 0x52, 0x63, 0xbc, 0xd1, 0x41, 0x17, 0x14, 0x6f, 0x96, 0x61, 0x9a, 0xc6, 0x57,
	0x85, 0x0f, 0x95, 0x44, 0x48, 0xe7, 0x36, 0x4b, 0x80, 0xe1, 0x4c, 0x7e, 0xa9, 0xa7, 0x97, 0x79,
	0x75, 0xb5, 0x64, 0x26, 0x57, 0x32, 0x97, 0xc9, 0x98, 0xc2, 0x6b, 0x71, 0x9a, 0xc4, 0x55, 0x78,
	0xaa, 0x5b, 0x18, 0xe0, 0xd6, 0x22, 0xe4, 0x70, 0x82, 0x15, 0x85, 0xf2, 0x10, 0xdc, 0x74, 0x31,
	0xb4, 0xcf, 0xce, 0x15, 0x99, 0x60, 0x0d, 0x8a, 0x4b, 0x30, 0x02, 0x2e, 0x1d, 0xff, 0x11, 0x9f,
	0x86, 0xf2, 0x30, 0x8e, 0x47, 0x26, 0x5a, 0x5b, 0x79, 0x7f, 0x6b, 0x24, 0x8f, 0x7a, 0xef, 0x07,
	0xd7, 0x68, 0xd1, 0x3e, 0xe4, 0x61, 0x9a, 0x76, 0x18, 0xf2, 0x30, 0x4d, 0xbb, 0x0f, 0x39, 0x87,
	0xb1, 0xe3, 0x18, 0xd2, 0x38, 0x9a, 0x2a, 0x17, 0xe9, 0x24, 0x2b, 0x26, 0x2b, 0x4b, 0x3a, 0x36,
	0x28, 0xce, 0x91, 0x80, 0x71, 0xe6, 0x9c, 0x28, 0xeb, 0xc0, 0x14, 0x66, 0x54, 0xe6, 0x60, 0x80,
	0xcb, 0x9c, 0x90, 0xc3, 0x35, 0x70, 0xa3, 0x8c, 0xb4, 0x8d, 0xb2, 0x4e, 0x90, 0x35, 0x30, 0x44,
	0xb8, 0x1a, 0x58, 0x27, 0x71, 0xb9, 0x38, 0x53, 0x91, 0x3b, 0xd4, 0x95, 0x13, 0xd5, 0xbe, 0xc6,
	0x70, 0xe5, 0xa2, 0x81, 0x62, 0xaf, 0x89, 0xd3, 0x29, 0x9a, 0x5a, 0xd2, 0xab, 0xc6, 0x70, 0x5e,
	0x0d, 0x14, 0x6f, 0x84, 0x9a, 0x78, 0x12, 0x25, 0xd1, 0x72, 0xb5, 0x24, 0x37, 0x02, 0x8d, 0x72,
	0x1b, 0xa1, 0xad, 0x45, 0xd9, 0x81, 0xa5, 0xf8, 0x68, 0xe2, 0x94, 0x71, 0x78, 0xb4, 0xf4, 0x10,
	0x42, 0xc8, 0x9b, 0xf6, 0x3a, 0xb1, 0xa5, 0xdd, 0xbf, 0x3b, 0x62, 0xb7, 0x2e, 0x9f, 0x26, 0x2e,
	0x8a, 0x87, 0x17, 0x0e, 0x8c, 0xfc, 0xa1, 0x43, 0xb4, 0x0a, 0xf7, 0x7d, 0x78, 0x7c, 0xcd, 0x56,
	0xf8, 0x60, 0x38, 0x02, 0x4f, 0x59, 0xf2, 0x60, 0x40, 0x3a, 0x77, 0x30, 0x04, 0x18, 0x9e, 0xdc,
	0x5f, 0x51, 0x1f, 0xb2, 0xf2, 0x40, 0x4e, 0x6e, 0x1d, 0xe2, 0x26, 0xb7, 0xc9, 0xe2, 0x64, 0xc2,
	0x6a, 0x95, 0xe1, 0x64, 0x32, 0xd1, 0x28, 0x97, 0x4c, 0x6d, 0x2d, 0xf0, 0x78, 0xc7, 0x60, 0x61,
	0x6b, 0x32, 0xd5, 0x21, 0x6e, 0xbc, 0x4d, 0x16, 0x9f, 0xbb, 0xc7, 0x49, 0xe4, 0x36, 0x45, 0x83,
	0x3c, 0x77, 0x2b, 0x99, 0x3b, 0x77, 0x31, 0x55, 0x06, 0x7f, 0xb3, 0x23, 0x6e, 0x8f, 0x74, 0xba,
	0x8a, 0xf3, 0x5b, 0x5f, 0xaa, 0x0c, 0x24, 0xee, 0x27, 0xbd, 0x32, 0x89, 0x8a, 0x25, 0x35, 0x39,
	0x2d, 0xac, 0xf7, 0x7d, 0x78, 0x9d, 0x26, 0x38, 0x41, 0xb3, 0xce, 0x15, 0xc3, 0x97, 0x6d, 0x9d,
	0x2f, 0x74, 0x2e, 0x41, 0x03, 0x0c, 0x1f, 0x11, 0xcf, 0x60, 0xa9, 0x1d, 0x14, 0x73, 0x48, 0xb5,
	0xc4, 0x00, 0x77, 0x44, 0x84, 0x1c, 0xce, 0x89, 0xd3, 0x64, 0xa6, 0x03, 0x9b, 0x03, 0xf2, 0x6e,
	0x12, 0x42, 0x5c, 0x4e, 0x34, 0xd9, 0xd2, 0xce, 0x0a, 0x59, 0x0c, 0xf3, 0x4c, 0xd9, 0x91, 0xd1,
	0x19, 0x34, 0x93, 0xcc, 0xd1, 0x89, 0x30, 0x6f, 0xf9, 0x7d, 0x47, 0x1a, 0x7f, 0x50, 0x4e, 0xc0,
	0xe7, 0xe1, 0x1d, 0xfa, 0x13, 0x28, 0x1c, 0xd5, 0x1e, 0x0f, 0x95, 0x91, 0xd7, 0xe2, 0x93, 0xca,
	0x79, 0x0c, 0x36, 0xab, 0x6a, 0x30, 0x93, 0x7c, 0x0f, 0x4b, 0xce, 0xbb, 0xf5, 0xbb, 0xe2, 0xa5,
	0xef, 0x7f, 0x3b, 0xe2, 0xb3, 0xda, 0xd9, 0x31, 0x4c, 0x66, 0xd9, 0x27, 0xef, 0xe6, 0x2e, 0xf1,
	0x78, 0xfb, 0x59, 0x83, 0x79, 0xdf, 0x91, 0x1f, 0xaf, 0xdb, 0x0c, 0xdf, 0x34, 0x8a, 0x89, 0xf7,
	0x9b, 0xe1, 0x2e, 0xf9, 0x0d, 0x80, 0x11, 0xee, 0xa6, 0x51, 0x27, 0x4b, 0xa3, 0x5f, 0xc4, 0x8d,
	0x27, 0x6a, 0x7a, 0xb9, 0x4a, 0x25, 0xf5, 0x54, 0xb1, 0x91, 0x7c, 0xe0, 0xaf, 0x18, 0xc2, 0x07,
	0xbc, 0xbf, 0x23, 0x4d, 0x76, 0xf5, 0xb3, 0x4e, 0x1b, 0x38, 0x34, 0x7a, 0x59, 0x44, 0x6f, 0xa9,
	0x75, 0x21, 0xc5, 0x5f, 0xfd, 0x1a, 0x30, 0xf2, 0x7c, 0x2d, 0x6e, 0x4e, 0x62, 0xb5, 0x86, 0x62,
	0xbd, 0xc8, 0x07, 0x82, 0x4a, 0x67, 0x1f, 0x08, 0x30, 0x16, 0xa4, 0xbc, 0xd3, 0x69, 0x2e, 0xd2,
	0x29, 0xef, 0x55, 0x36, 0xe5, 0x2b, 0x28, 0xbc, 0x91, 0x14, 0x7f, 0xfb, 0xcb, 0xd0, 0x01, 0xd7,
	0xb6, 0x76, 0x0d, 0xea, 0x75, 0x62, 0xf1, 0x21, 0x92, 0xdf, 0x15, 0x36, 0x23, 0xd9, 0x6b, 0xbb,
	0x4a, 0x04, 0x43, 0xd9, 0xdf, 0x42, 0x95, 0xc1, 0xaf, 0xc4, 0xad, 0xea, 0x7f, 0x74, 0xcf, 0xe9,
	0xb3, 0x01, 0x9a, 0x37, 0x9c, 0x41, 0x67, 0xbe, 0xfe, 0xc8, 0x95, 0xe9, 0xb6, 0xf5, 0x91, 0x2b,
	0x57, 0xb7, 0x3d, 0x72, 0x15, 0x10, 0x8e, 0x9c, 0x9d, 0x26, 0xed, 0x4b, 0x5f, 0xaa, 0x5c, 0x64,
	0x04, 0x05, 0x4b, 0x9f, 0xfd, 0x85, 0x4b, 0xf7, 0x41, 0x5b, 0x4a, 0x12, 0x85, 0xbb, 0xd7, 0x89,
	0xc5, 0x9f, 0x64, 0x5e, 0xad, 0x4a, 0x2b, 0x17, 0xa3, 0x51, 0x58, 0xef, 0x75, 0x83, 0xbd, 0xe3,
	0x93, 0x47, 0xbf, 0x3f, 0x58, 0x47, 0x0e, 0xac, 0xed, 0x47, 0x7a, 0xb0, 0xf9, 0x35, 0x98, 0xeb,
	0xc1, 0xda, 0x0d, 0xf2, 0x47, 0xda, 0x01, 0xf5, 0xa4, 0x7b, 0x7e, 0x23, 0xd7, 0x1e, 0xfd, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0x16, 0x3b, 0x7d, 0x0d, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TabletManagerClient is the client API for TabletManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(ctx context.Context, in *tabletmanagerdata.PingRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest, opts ...grpc.CallOption) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(ctx context.Context, in *tabletmanagerdata.ReplicationStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicationStatusResponse, error)
	// MasterStatus returns the current master status.
	MasterStatus(ctx context.Context, in *tabletmanagerdata.MasterStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MasterStatusResponse, error)
	// MasterPosition returns the current master position
	MasterPosition(ctx context.Context, in *tabletmanagerdata.MasterPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MasterPositionResponse, error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(ctx context.Context, in *tabletmanagerdata.WaitForPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.WaitForPositionResponse, error)
	// StopReplication makes mysql stop its replication
	StopReplication(ctx context.Context, in *tabletmanagerdata.StopReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationResponse, error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(ctx context.Context, in *tabletmanagerdata.StopReplicationMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationMinimumResponse, error)
	// StartReplication starts the mysql replication
	StartReplication(ctx context.Context, in *tabletmanagerdata.StartReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartReplicationResponse, error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(ctx context.Context, in *tabletmanagerdata.StartReplicationUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(ctx context.Context, in *tabletmanagerdata.GetReplicasRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetReplicasResponse, error)
	// VReplication API
	VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ResetReplicationResponse, error)
	// InitMaster initializes the tablet as a master
	InitMaster(ctx context.Context, in *tabletmanagerdata.InitMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitMasterResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	// InitReplica tells the tablet to reparent to the master unconditionally
	InitReplica(ctx context.Context, in *tabletmanagerdata.InitReplicaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitReplicaResponse, error)
	// DemoteMaster tells the soon-to-be-former master it's gonna change
	DemoteMaster(ctx context.Context, in *tabletmanagerdata.DemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.DemoteMasterResponse, error)
	// UndoDemoteMaster reverts all changes made by DemoteMaster
	UndoDemoteMaster(ctx context.Context, in *tabletmanagerdata.UndoDemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UndoDemoteMasterResponse, error)
	// ReplicaWasPromoted tells the remote tablet it is now the master
	ReplicaWasPromoted(ctx context.Context, in *tabletmanagerdata.ReplicaWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicaWasPromotedResponse, error)
	// SetMaster tells the replica to reparent
	SetMaster(ctx context.Context, in *tabletmanagerdata.SetMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetMasterResponse, error)
	// ReplicaWasRestarted tells the remote tablet its master has changed
	ReplicaWasRestarted(ctx context.Context, in *tabletmanagerdata.ReplicaWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicaWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	// PromoteReplica makes the replica the new master
	PromoteReplica(ctx context.Context, in *tabletmanagerdata.PromoteReplicaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteReplicaResponse, error)
	Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest, opts ...grpc.CallOption) (TabletManager_RestoreFromBackupClient, error)
	// Deprecated - remove after 7.0
	SlaveStatus(ctx context.Context, in *tabletmanagerdata.SlaveStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveStatusResponse, error)
	// Deprecated
	StopSlave(ctx context.Context, in *tabletmanagerdata.StopSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSlaveResponse, error)
	// Deprecated
	StopSlaveMinimum(ctx context.Context, in *tabletmanagerdata.StopSlaveMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSlaveMinimumResponse, error)
	// Deprecated
	StartSlave(ctx context.Context, in *tabletmanagerdata.StartSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSlaveResponse, error)
	// Deprecated
	StartSlaveUntilAfter(ctx context.Context, in *tabletmanagerdata.StartSlaveUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSlaveUntilAfterResponse, error)
	// Deprecated
	GetSlaves(ctx context.Context, in *tabletmanagerdata.GetSlavesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSlavesResponse, error)
	// Deprecated
	InitSlave(ctx context.Context, in *tabletmanagerdata.InitSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitSlaveResponse, error)
	// Deprecated
	SlaveWasPromoted(ctx context.Context, in *tabletmanagerdata.SlaveWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveWasPromotedResponse, error)
	// Deprecated
	SlaveWasRestarted(ctx context.Context, in *tabletmanagerdata.SlaveWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveWasRestartedResponse, error)
}

type tabletManagerClient struct {
	cc *grpc.ClientConn
}

func NewTabletManagerClient(cc *grpc.ClientConn) TabletManagerClient {
	return &tabletManagerClient{cc}
}

func (c *tabletManagerClient) Ping(ctx context.Context, in *tabletmanagerdata.PingRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PingResponse, error) {
	out := new(tabletmanagerdata.PingResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SleepResponse, error) {
	out := new(tabletmanagerdata.SleepResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteHookResponse, error) {
	out := new(tabletmanagerdata.ExecuteHookResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSchemaResponse, error) {
	out := new(tabletmanagerdata.GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetPermissionsResponse, error) {
	out := new(tabletmanagerdata.GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	out := new(tabletmanagerdata.SetReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadWriteResponse, error) {
	out := new(tabletmanagerdata.SetReadWriteResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ChangeTypeResponse, error) {
	out := new(tabletmanagerdata.ChangeTypeResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ChangeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RefreshStateResponse, error) {
	out := new(tabletmanagerdata.RefreshStateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RefreshState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	out := new(tabletmanagerdata.RunHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RunHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest, opts ...grpc.CallOption) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	out := new(tabletmanagerdata.IgnoreHealthErrorResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/IgnoreHealthError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	out := new(tabletmanagerdata.ReloadSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReloadSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	out := new(tabletmanagerdata.PreflightSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PreflightSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ApplySchemaResponse, error) {
	out := new(tabletmanagerdata.ApplySchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ApplySchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.LockTablesResponse, error) {
	out := new(tabletmanagerdata.LockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/LockTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UnlockTablesResponse, error) {
	out := new(tabletmanagerdata.UnlockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UnlockTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsDbaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAllPrivsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAppResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ReplicationStatus(ctx context.Context, in *tabletmanagerdata.ReplicationStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicationStatusResponse, error) {
	out := new(tabletmanagerdata.ReplicationStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) MasterStatus(ctx context.Context, in *tabletmanagerdata.MasterStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MasterStatusResponse, error) {
	out := new(tabletmanagerdata.MasterStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MasterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) MasterPosition(ctx context.Context, in *tabletmanagerdata.MasterPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MasterPositionResponse, error) {
	out := new(tabletmanagerdata.MasterPositionResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MasterPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) WaitForPosition(ctx context.Context, in *tabletmanagerdata.WaitForPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.WaitForPositionResponse, error) {
	out := new(tabletmanagerdata.WaitForPositionResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/WaitForPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopReplication(ctx context.Context, in *tabletmanagerdata.StopReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationResponse, error) {
	out := new(tabletmanagerdata.StopReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopReplicationMinimum(ctx context.Context, in *tabletmanagerdata.StopReplicationMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationMinimumResponse, error) {
	out := new(tabletmanagerdata.StopReplicationMinimumResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationMinimum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartReplication(ctx context.Context, in *tabletmanagerdata.StartReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartReplicationResponse, error) {
	out := new(tabletmanagerdata.StartReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartReplicationUntilAfter(ctx context.Context, in *tabletmanagerdata.StartReplicationUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error) {
	out := new(tabletmanagerdata.StartReplicationUntilAfterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetReplicas(ctx context.Context, in *tabletmanagerdata.GetReplicasRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetReplicasResponse, error) {
	out := new(tabletmanagerdata.GetReplicasResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationExecResponse, error) {
	out := new(tabletmanagerdata.VReplicationExecResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	out := new(tabletmanagerdata.VReplicationWaitForPosResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationWaitForPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ResetReplicationResponse, error) {
	out := new(tabletmanagerdata.ResetReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ResetReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitMaster(ctx context.Context, in *tabletmanagerdata.InitMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitMasterResponse, error) {
	out := new(tabletmanagerdata.InitMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	out := new(tabletmanagerdata.PopulateReparentJournalResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PopulateReparentJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitReplica(ctx context.Context, in *tabletmanagerdata.InitReplicaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitReplicaResponse, error) {
	out := new(tabletmanagerdata.InitReplicaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) DemoteMaster(ctx context.Context, in *tabletmanagerdata.DemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.DemoteMasterResponse, error) {
	out := new(tabletmanagerdata.DemoteMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/DemoteMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) UndoDemoteMaster(ctx context.Context, in *tabletmanagerdata.UndoDemoteMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UndoDemoteMasterResponse, error) {
	out := new(tabletmanagerdata.UndoDemoteMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UndoDemoteMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ReplicaWasPromoted(ctx context.Context, in *tabletmanagerdata.ReplicaWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicaWasPromotedResponse, error) {
	out := new(tabletmanagerdata.ReplicaWasPromotedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicaWasPromoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetMaster(ctx context.Context, in *tabletmanagerdata.SetMasterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetMasterResponse, error) {
	out := new(tabletmanagerdata.SetMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ReplicaWasRestarted(ctx context.Context, in *tabletmanagerdata.ReplicaWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReplicaWasRestartedResponse, error) {
	out := new(tabletmanagerdata.ReplicaWasRestartedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicaWasRestarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	out := new(tabletmanagerdata.StopReplicationAndGetStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PromoteReplica(ctx context.Context, in *tabletmanagerdata.PromoteReplicaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteReplicaResponse, error) {
	out := new(tabletmanagerdata.PromoteReplicaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TabletManager_serviceDesc.Streams[0], "/tabletmanagerservice.TabletManager/Backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_BackupClient interface {
	Recv() (*tabletmanagerdata.BackupResponse, error)
	grpc.ClientStream
}

type tabletManagerBackupClient struct {
	grpc.ClientStream
}

func (x *tabletManagerBackupClient) Recv() (*tabletmanagerdata.BackupResponse, error) {
	m := new(tabletmanagerdata.BackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest, opts ...grpc.CallOption) (TabletManager_RestoreFromBackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TabletManager_serviceDesc.Streams[1], "/tabletmanagerservice.TabletManager/RestoreFromBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerRestoreFromBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_RestoreFromBackupClient interface {
	Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error)
	grpc.ClientStream
}

type tabletManagerRestoreFromBackupClient struct {
	grpc.ClientStream
}

func (x *tabletManagerRestoreFromBackupClient) Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error) {
	m := new(tabletmanagerdata.RestoreFromBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tabletManagerClient) SlaveStatus(ctx context.Context, in *tabletmanagerdata.SlaveStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveStatusResponse, error) {
	out := new(tabletmanagerdata.SlaveStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSlave(ctx context.Context, in *tabletmanagerdata.StopSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSlaveResponse, error) {
	out := new(tabletmanagerdata.StopSlaveResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSlave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSlaveMinimum(ctx context.Context, in *tabletmanagerdata.StopSlaveMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSlaveMinimumResponse, error) {
	out := new(tabletmanagerdata.StopSlaveMinimumResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSlaveMinimum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartSlave(ctx context.Context, in *tabletmanagerdata.StartSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSlaveResponse, error) {
	out := new(tabletmanagerdata.StartSlaveResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartSlave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartSlaveUntilAfter(ctx context.Context, in *tabletmanagerdata.StartSlaveUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSlaveUntilAfterResponse, error) {
	out := new(tabletmanagerdata.StartSlaveUntilAfterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartSlaveUntilAfter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSlaves(ctx context.Context, in *tabletmanagerdata.GetSlavesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSlavesResponse, error) {
	out := new(tabletmanagerdata.GetSlavesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSlaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitSlave(ctx context.Context, in *tabletmanagerdata.InitSlaveRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitSlaveResponse, error) {
	out := new(tabletmanagerdata.InitSlaveResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitSlave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SlaveWasPromoted(ctx context.Context, in *tabletmanagerdata.SlaveWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveWasPromotedResponse, error) {
	out := new(tabletmanagerdata.SlaveWasPromotedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveWasPromoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SlaveWasRestarted(ctx context.Context, in *tabletmanagerdata.SlaveWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SlaveWasRestartedResponse, error) {
	out := new(tabletmanagerdata.SlaveWasRestartedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SlaveWasRestarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabletManagerServer is the server API for TabletManager service.
type TabletManagerServer interface {
	// Ping returns the input payload
	Ping(context.Context, *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(context.Context, *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(context.Context, *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(context.Context, *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(context.Context, *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(context.Context, *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(context.Context, *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(context.Context, *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(context.Context, *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(context.Context, *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(context.Context, *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteFetchAsDba(context.Context, *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(context.Context, *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(context.Context, *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error)
	// MasterStatus returns the current master status.
	MasterStatus(context.Context, *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error)
	// MasterPosition returns the current master position
	MasterPosition(context.Context, *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error)
	// VReplication API
	VReplicationExec(context.Context, *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(context.Context, *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error)
	// InitMaster initializes the tablet as a master
	InitMaster(context.Context, *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	// InitReplica tells the tablet to reparent to the master unconditionally
	InitReplica(context.Context, *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error)
	// DemoteMaster tells the soon-to-be-former master it's gonna change
	DemoteMaster(context.Context, *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error)
	// UndoDemoteMaster reverts all changes made by DemoteMaster
	UndoDemoteMaster(context.Context, *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error)
	// ReplicaWasPromoted tells the remote tablet it is now the master
	ReplicaWasPromoted(context.Context, *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error)
	// SetMaster tells the replica to reparent
	SetMaster(context.Context, *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error)
	// ReplicaWasRestarted tells the remote tablet its master has changed
	ReplicaWasRestarted(context.Context, *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	// PromoteReplica makes the replica the new master
	PromoteReplica(context.Context, *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error)
	Backup(*tabletmanagerdata.BackupRequest, TabletManager_BackupServer) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(*tabletmanagerdata.RestoreFromBackupRequest, TabletManager_RestoreFromBackupServer) error
	// Deprecated - remove after 7.0
	SlaveStatus(context.Context, *tabletmanagerdata.SlaveStatusRequest) (*tabletmanagerdata.SlaveStatusResponse, error)
	// Deprecated
	StopSlave(context.Context, *tabletmanagerdata.StopSlaveRequest) (*tabletmanagerdata.StopSlaveResponse, error)
	// Deprecated
	StopSlaveMinimum(context.Context, *tabletmanagerdata.StopSlaveMinimumRequest) (*tabletmanagerdata.StopSlaveMinimumResponse, error)
	// Deprecated
	StartSlave(context.Context, *tabletmanagerdata.StartSlaveRequest) (*tabletmanagerdata.StartSlaveResponse, error)
	// Deprecated
	StartSlaveUntilAfter(context.Context, *tabletmanagerdata.StartSlaveUntilAfterRequest) (*tabletmanagerdata.StartSlaveUntilAfterResponse, error)
	// Deprecated
	GetSlaves(context.Context, *tabletmanagerdata.GetSlavesRequest) (*tabletmanagerdata.GetSlavesResponse, error)
	// Deprecated
	InitSlave(context.Context, *tabletmanagerdata.InitSlaveRequest) (*tabletmanagerdata.InitSlaveResponse, error)
	// Deprecated
	SlaveWasPromoted(context.Context, *tabletmanagerdata.SlaveWasPromotedRequest) (*tabletmanagerdata.SlaveWasPromotedResponse, error)
	// Deprecated
	SlaveWasRestarted(context.Context, *tabletmanagerdata.SlaveWasRestartedRequest) (*tabletmanagerdata.SlaveWasRestartedResponse, error)
}

// UnimplementedTabletManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTabletManagerServer struct {
}

func (*UnimplementedTabletManagerServer) Ping(ctx context.Context, req *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTabletManagerServer) Sleep(ctx context.Context, req *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteHook(ctx context.Context, req *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteHook not implemented")
}
func (*UnimplementedTabletManagerServer) GetSchema(ctx context.Context, req *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedTabletManagerServer) GetPermissions(ctx context.Context, req *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedTabletManagerServer) SetReadOnly(ctx context.Context, req *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadOnly not implemented")
}
func (*UnimplementedTabletManagerServer) SetReadWrite(ctx context.Context, req *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadWrite not implemented")
}
func (*UnimplementedTabletManagerServer) ChangeType(ctx context.Context, req *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeType not implemented")
}
func (*UnimplementedTabletManagerServer) RefreshState(ctx context.Context, req *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshState not implemented")
}
func (*UnimplementedTabletManagerServer) RunHealthCheck(ctx context.Context, req *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunHealthCheck not implemented")
}
func (*UnimplementedTabletManagerServer) IgnoreHealthError(ctx context.Context, req *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreHealthError not implemented")
}
func (*UnimplementedTabletManagerServer) ReloadSchema(ctx context.Context, req *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadSchema not implemented")
}
func (*UnimplementedTabletManagerServer) PreflightSchema(ctx context.Context, req *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreflightSchema not implemented")
}
func (*UnimplementedTabletManagerServer) ApplySchema(ctx context.Context, req *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySchema not implemented")
}
func (*UnimplementedTabletManagerServer) LockTables(ctx context.Context, req *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockTables not implemented")
}
func (*UnimplementedTabletManagerServer) UnlockTables(ctx context.Context, req *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockTables not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsDba(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsDba not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsAllPrivs(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsAllPrivs not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsApp(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsApp not implemented")
}
func (*UnimplementedTabletManagerServer) ReplicationStatus(ctx context.Context, req *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicationStatus not implemented")
}
func (*UnimplementedTabletManagerServer) MasterStatus(ctx context.Context, req *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterStatus not implemented")
}
func (*UnimplementedTabletManagerServer) MasterPosition(ctx context.Context, req *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterPosition not implemented")
}
func (*UnimplementedTabletManagerServer) WaitForPosition(ctx context.Context, req *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForPosition not implemented")
}
func (*UnimplementedTabletManagerServer) StopReplication(ctx context.Context, req *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplication not implemented")
}
func (*UnimplementedTabletManagerServer) StopReplicationMinimum(ctx context.Context, req *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplicationMinimum not implemented")
}
func (*UnimplementedTabletManagerServer) StartReplication(ctx context.Context, req *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplication not implemented")
}
func (*UnimplementedTabletManagerServer) StartReplicationUntilAfter(ctx context.Context, req *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplicationUntilAfter not implemented")
}
func (*UnimplementedTabletManagerServer) GetReplicas(ctx context.Context, req *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (*UnimplementedTabletManagerServer) VReplicationExec(ctx context.Context, req *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VReplicationExec not implemented")
}
func (*UnimplementedTabletManagerServer) VReplicationWaitForPos(ctx context.Context, req *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VReplicationWaitForPos not implemented")
}
func (*UnimplementedTabletManagerServer) ResetReplication(ctx context.Context, req *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetReplication not implemented")
}
func (*UnimplementedTabletManagerServer) InitMaster(ctx context.Context, req *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMaster not implemented")
}
func (*UnimplementedTabletManagerServer) PopulateReparentJournal(ctx context.Context, req *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateReparentJournal not implemented")
}
func (*UnimplementedTabletManagerServer) InitReplica(ctx context.Context, req *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitReplica not implemented")
}
func (*UnimplementedTabletManagerServer) DemoteMaster(ctx context.Context, req *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteMaster not implemented")
}
func (*UnimplementedTabletManagerServer) UndoDemoteMaster(ctx context.Context, req *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoDemoteMaster not implemented")
}
func (*UnimplementedTabletManagerServer) ReplicaWasPromoted(ctx context.Context, req *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaWasPromoted not implemented")
}
func (*UnimplementedTabletManagerServer) SetMaster(ctx context.Context, req *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaster not implemented")
}
func (*UnimplementedTabletManagerServer) ReplicaWasRestarted(ctx context.Context, req *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaWasRestarted not implemented")
}
func (*UnimplementedTabletManagerServer) StopReplicationAndGetStatus(ctx context.Context, req *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplicationAndGetStatus not implemented")
}
func (*UnimplementedTabletManagerServer) PromoteReplica(ctx context.Context, req *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteReplica not implemented")
}
func (*UnimplementedTabletManagerServer) Backup(req *tabletmanagerdata.BackupRequest, srv TabletManager_BackupServer) error {
	return status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedTabletManagerServer) RestoreFromBackup(req *tabletmanagerdata.RestoreFromBackupRequest, srv TabletManager_RestoreFromBackupServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreFromBackup not implemented")
}
func (*UnimplementedTabletManagerServer) SlaveStatus(ctx context.Context, req *tabletmanagerdata.SlaveStatusRequest) (*tabletmanagerdata.SlaveStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlaveStatus not implemented")
}
func (*UnimplementedTabletManagerServer) StopSlave(ctx context.Context, req *tabletmanagerdata.StopSlaveRequest) (*tabletmanagerdata.StopSlaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSlave not implemented")
}
func (*UnimplementedTabletManagerServer) StopSlaveMinimum(ctx context.Context, req *tabletmanagerdata.StopSlaveMinimumRequest) (*tabletmanagerdata.StopSlaveMinimumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSlaveMinimum not implemented")
}
func (*UnimplementedTabletManagerServer) StartSlave(ctx context.Context, req *tabletmanagerdata.StartSlaveRequest) (*tabletmanagerdata.StartSlaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSlave not implemented")
}
func (*UnimplementedTabletManagerServer) StartSlaveUntilAfter(ctx context.Context, req *tabletmanagerdata.StartSlaveUntilAfterRequest) (*tabletmanagerdata.StartSlaveUntilAfterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSlaveUntilAfter not implemented")
}
func (*UnimplementedTabletManagerServer) GetSlaves(ctx context.Context, req *tabletmanagerdata.GetSlavesRequest) (*tabletmanagerdata.GetSlavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlaves not implemented")
}
func (*UnimplementedTabletManagerServer) InitSlave(ctx context.Context, req *tabletmanagerdata.InitSlaveRequest) (*tabletmanagerdata.InitSlaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSlave not implemented")
}
func (*UnimplementedTabletManagerServer) SlaveWasPromoted(ctx context.Context, req *tabletmanagerdata.SlaveWasPromotedRequest) (*tabletmanagerdata.SlaveWasPromotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlaveWasPromoted not implemented")
}
func (*UnimplementedTabletManagerServer) SlaveWasRestarted(ctx context.Context, req *tabletmanagerdata.SlaveWasRestartedRequest) (*tabletmanagerdata.SlaveWasRestartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlaveWasRestarted not implemented")
}

func RegisterTabletManagerServer(s *grpc.Server, srv TabletManagerServer) {
	s.RegisterService(&_TabletManager_serviceDesc, srv)
}

func _TabletManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).Ping(ctx, req.(*tabletmanagerdata.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).Sleep(ctx, req.(*tabletmanagerdata.SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteHook(ctx, req.(*tabletmanagerdata.ExecuteHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetSchema(ctx, req.(*tabletmanagerdata.GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetPermissions(ctx, req.(*tabletmanagerdata.GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetReadOnly(ctx, req.(*tabletmanagerdata.SetReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetReadWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetReadWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetReadWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetReadWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetReadWrite(ctx, req.(*tabletmanagerdata.SetReadWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ChangeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ChangeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ChangeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ChangeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ChangeType(ctx, req.(*tabletmanagerdata.ChangeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_RefreshState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.RefreshStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).RefreshState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/RefreshState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).RefreshState(ctx, req.(*tabletmanagerdata.RefreshStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_RunHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.RunHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).RunHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/RunHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).RunHealthCheck(ctx, req.(*tabletmanagerdata.RunHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_IgnoreHealthError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.IgnoreHealthErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).IgnoreHealthError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/IgnoreHealthError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).IgnoreHealthError(ctx, req.(*tabletmanagerdata.IgnoreHealthErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ReloadSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ReloadSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ReloadSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ReloadSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ReloadSchema(ctx, req.(*tabletmanagerdata.ReloadSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PreflightSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PreflightSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PreflightSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PreflightSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PreflightSchema(ctx, req.(*tabletmanagerdata.PreflightSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ApplySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ApplySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ApplySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ApplySchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ApplySchema(ctx, req.(*tabletmanagerdata.ApplySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_LockTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.LockTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).LockTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/LockTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).LockTables(ctx, req.(*tabletmanagerdata.LockTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_UnlockTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.UnlockTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).UnlockTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/UnlockTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).UnlockTables(ctx, req.(*tabletmanagerdata.UnlockTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsDba_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsDbaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsDba(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsDba(ctx, req.(*tabletmanagerdata.ExecuteFetchAsDbaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsAllPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsAllPrivsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsAllPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsAllPrivs(ctx, req.(*tabletmanagerdata.ExecuteFetchAsAllPrivsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsApp(ctx, req.(*tabletmanagerdata.ExecuteFetchAsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ReplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ReplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ReplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ReplicationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ReplicationStatus(ctx, req.(*tabletmanagerdata.ReplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_MasterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.MasterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).MasterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/MasterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).MasterStatus(ctx, req.(*tabletmanagerdata.MasterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_MasterPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.MasterPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).MasterPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/MasterPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).MasterPosition(ctx, req.(*tabletmanagerdata.MasterPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_WaitForPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.WaitForPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).WaitForPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/WaitForPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).WaitForPosition(ctx, req.(*tabletmanagerdata.WaitForPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopReplication(ctx, req.(*tabletmanagerdata.StopReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopReplicationMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopReplicationMinimumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopReplicationMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopReplicationMinimum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopReplicationMinimum(ctx, req.(*tabletmanagerdata.StopReplicationMinimumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartReplication(ctx, req.(*tabletmanagerdata.StartReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartReplicationUntilAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartReplicationUntilAfterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartReplicationUntilAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartReplicationUntilAfter(ctx, req.(*tabletmanagerdata.StartReplicationUntilAfterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetReplicas(ctx, req.(*tabletmanagerdata.GetReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_VReplicationExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.VReplicationExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).VReplicationExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/VReplicationExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).VReplicationExec(ctx, req.(*tabletmanagerdata.VReplicationExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_VReplicationWaitForPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.VReplicationWaitForPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).VReplicationWaitForPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/VReplicationWaitForPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).VReplicationWaitForPos(ctx, req.(*tabletmanagerdata.VReplicationWaitForPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ResetReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ResetReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ResetReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ResetReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ResetReplication(ctx, req.(*tabletmanagerdata.ResetReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_InitMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.InitMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).InitMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/InitMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).InitMaster(ctx, req.(*tabletmanagerdata.InitMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PopulateReparentJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PopulateReparentJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PopulateReparentJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PopulateReparentJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PopulateReparentJournal(ctx, req.(*tabletmanagerdata.PopulateReparentJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_InitReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.InitReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).InitReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/InitReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).InitReplica(ctx, req.(*tabletmanagerdata.InitReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_DemoteMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.DemoteMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).DemoteMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/DemoteMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).DemoteMaster(ctx, req.(*tabletmanagerdata.DemoteMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_UndoDemoteMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.UndoDemoteMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).UndoDemoteMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/UndoDemoteMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).UndoDemoteMaster(ctx, req.(*tabletmanagerdata.UndoDemoteMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ReplicaWasPromoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ReplicaWasPromotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ReplicaWasPromoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ReplicaWasPromoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ReplicaWasPromoted(ctx, req.(*tabletmanagerdata.ReplicaWasPromotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetMaster(ctx, req.(*tabletmanagerdata.SetMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ReplicaWasRestarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ReplicaWasRestartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ReplicaWasRestarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ReplicaWasRestarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ReplicaWasRestarted(ctx, req.(*tabletmanagerdata.ReplicaWasRestartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopReplicationAndGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopReplicationAndGetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopReplicationAndGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopReplicationAndGetStatus(ctx, req.(*tabletmanagerdata.StopReplicationAndGetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PromoteReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PromoteReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PromoteReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PromoteReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PromoteReplica(ctx, req.(*tabletmanagerdata.PromoteReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanagerdata.BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).Backup(m, &tabletManagerBackupServer{stream})
}

type TabletManager_BackupServer interface {
	Send(*tabletmanagerdata.BackupResponse) error
	grpc.ServerStream
}

type tabletManagerBackupServer struct {
	grpc.ServerStream
}

func (x *tabletManagerBackupServer) Send(m *tabletmanagerdata.BackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TabletManager_RestoreFromBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanagerdata.RestoreFromBackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).RestoreFromBackup(m, &tabletManagerRestoreFromBackupServer{stream})
}

type TabletManager_RestoreFromBackupServer interface {
	Send(*tabletmanagerdata.RestoreFromBackupResponse) error
	grpc.ServerStream
}

type tabletManagerRestoreFromBackupServer struct {
	grpc.ServerStream
}

func (x *tabletManagerRestoreFromBackupServer) Send(m *tabletmanagerdata.RestoreFromBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TabletManager_SlaveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SlaveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SlaveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SlaveStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SlaveStatus(ctx, req.(*tabletmanagerdata.SlaveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopSlave(ctx, req.(*tabletmanagerdata.StopSlaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopSlaveMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopSlaveMinimumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopSlaveMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopSlaveMinimum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopSlaveMinimum(ctx, req.(*tabletmanagerdata.StopSlaveMinimumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartSlave(ctx, req.(*tabletmanagerdata.StartSlaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartSlaveUntilAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartSlaveUntilAfterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartSlaveUntilAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartSlaveUntilAfter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartSlaveUntilAfter(ctx, req.(*tabletmanagerdata.StartSlaveUntilAfterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetSlaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetSlavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetSlaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetSlaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetSlaves(ctx, req.(*tabletmanagerdata.GetSlavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_InitSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.InitSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).InitSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/InitSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).InitSlave(ctx, req.(*tabletmanagerdata.InitSlaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SlaveWasPromoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SlaveWasPromotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SlaveWasPromoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SlaveWasPromoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SlaveWasPromoted(ctx, req.(*tabletmanagerdata.SlaveWasPromotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SlaveWasRestarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SlaveWasRestartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SlaveWasRestarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SlaveWasRestarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SlaveWasRestarted(ctx, req.(*tabletmanagerdata.SlaveWasRestartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TabletManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabletmanagerservice.TabletManager",
	HandlerType: (*TabletManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TabletManager_Ping_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _TabletManager_Sleep_Handler,
		},
		{
			MethodName: "ExecuteHook",
			Handler:    _TabletManager_ExecuteHook_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _TabletManager_GetSchema_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _TabletManager_GetPermissions_Handler,
		},
		{
			MethodName: "SetReadOnly",
			Handler:    _TabletManager_SetReadOnly_Handler,
		},
		{
			MethodName: "SetReadWrite",
			Handler:    _TabletManager_SetReadWrite_Handler,
		},
		{
			MethodName: "ChangeType",
			Handler:    _TabletManager_ChangeType_Handler,
		},
		{
			MethodName: "RefreshState",
			Handler:    _TabletManager_RefreshState_Handler,
		},
		{
			MethodName: "RunHealthCheck",
			Handler:    _TabletManager_RunHealthCheck_Handler,
		},
		{
			MethodName: "IgnoreHealthError",
			Handler:    _TabletManager_IgnoreHealthError_Handler,
		},
		{
			MethodName: "ReloadSchema",
			Handler:    _TabletManager_ReloadSchema_Handler,
		},
		{
			MethodName: "PreflightSchema",
			Handler:    _TabletManager_PreflightSchema_Handler,
		},
		{
			MethodName: "ApplySchema",
			Handler:    _TabletManager_ApplySchema_Handler,
		},
		{
			MethodName: "LockTables",
			Handler:    _TabletManager_LockTables_Handler,
		},
		{
			MethodName: "UnlockTables",
			Handler:    _TabletManager_UnlockTables_Handler,
		},
		{
			MethodName: "ExecuteFetchAsDba",
			Handler:    _TabletManager_ExecuteFetchAsDba_Handler,
		},
		{
			MethodName: "ExecuteFetchAsAllPrivs",
			Handler:    _TabletManager_ExecuteFetchAsAllPrivs_Handler,
		},
		{
			MethodName: "ExecuteFetchAsApp",
			Handler:    _TabletManager_ExecuteFetchAsApp_Handler,
		},
		{
			MethodName: "ReplicationStatus",
			Handler:    _TabletManager_ReplicationStatus_Handler,
		},
		{
			MethodName: "MasterStatus",
			Handler:    _TabletManager_MasterStatus_Handler,
		},
		{
			MethodName: "MasterPosition",
			Handler:    _TabletManager_MasterPosition_Handler,
		},
		{
			MethodName: "WaitForPosition",
			Handler:    _TabletManager_WaitForPosition_Handler,
		},
		{
			MethodName: "StopReplication",
			Handler:    _TabletManager_StopReplication_Handler,
		},
		{
			MethodName: "StopReplicationMinimum",
			Handler:    _TabletManager_StopReplicationMinimum_Handler,
		},
		{
			MethodName: "StartReplication",
			Handler:    _TabletManager_StartReplication_Handler,
		},
		{
			MethodName: "StartReplicationUntilAfter",
			Handler:    _TabletManager_StartReplicationUntilAfter_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _TabletManager_GetReplicas_Handler,
		},
		{
			MethodName: "VReplicationExec",
			Handler:    _TabletManager_VReplicationExec_Handler,
		},
		{
			MethodName: "VReplicationWaitForPos",
			Handler:    _TabletManager_VReplicationWaitForPos_Handler,
		},
		{
			MethodName: "ResetReplication",
			Handler:    _TabletManager_ResetReplication_Handler,
		},
		{
			MethodName: "InitMaster",
			Handler:    _TabletManager_InitMaster_Handler,
		},
		{
			MethodName: "PopulateReparentJournal",
			Handler:    _TabletManager_PopulateReparentJournal_Handler,
		},
		{
			MethodName: "InitReplica",
			Handler:    _TabletManager_InitReplica_Handler,
		},
		{
			MethodName: "DemoteMaster",
			Handler:    _TabletManager_DemoteMaster_Handler,
		},
		{
			MethodName: "UndoDemoteMaster",
			Handler:    _TabletManager_UndoDemoteMaster_Handler,
		},
		{
			MethodName: "ReplicaWasPromoted",
			Handler:    _TabletManager_ReplicaWasPromoted_Handler,
		},
		{
			MethodName: "SetMaster",
			Handler:    _TabletManager_SetMaster_Handler,
		},
		{
			MethodName: "ReplicaWasRestarted",
			Handler:    _TabletManager_ReplicaWasRestarted_Handler,
		},
		{
			MethodName: "StopReplicationAndGetStatus",
			Handler:    _TabletManager_StopReplicationAndGetStatus_Handler,
		},
		{
			MethodName: "PromoteReplica",
			Handler:    _TabletManager_PromoteReplica_Handler,
		},
		{
			MethodName: "SlaveStatus",
			Handler:    _TabletManager_SlaveStatus_Handler,
		},
		{
			MethodName: "StopSlave",
			Handler:    _TabletManager_StopSlave_Handler,
		},
		{
			MethodName: "StopSlaveMinimum",
			Handler:    _TabletManager_StopSlaveMinimum_Handler,
		},
		{
			MethodName: "StartSlave",
			Handler:    _TabletManager_StartSlave_Handler,
		},
		{
			MethodName: "StartSlaveUntilAfter",
			Handler:    _TabletManager_StartSlaveUntilAfter_Handler,
		},
		{
			MethodName: "GetSlaves",
			Handler:    _TabletManager_GetSlaves_Handler,
		},
		{
			MethodName: "InitSlave",
			Handler:    _TabletManager_InitSlave_Handler,
		},
		{
			MethodName: "SlaveWasPromoted",
			Handler:    _TabletManager_SlaveWasPromoted_Handler,
		},
		{
			MethodName: "SlaveWasRestarted",
			Handler:    _TabletManager_SlaveWasRestarted_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Backup",
			Handler:       _TabletManager_Backup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreFromBackup",
			Handler:       _TabletManager_RestoreFromBackup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tabletmanagerservice.proto",
}
