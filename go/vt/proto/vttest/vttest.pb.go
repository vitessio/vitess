// Code generated by protoc-gen-go.
// source: vttest.proto
// DO NOT EDIT!

/*
Package vttest is a generated protocol buffer package.

It is generated from these files:
	vttest.proto

It has these top-level messages:
	Shard
	Keyspace
	VTTestTopology
*/
package vttest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Shard describes a single shard in a keyspace.
type Shard struct {
	// name has to be unique in a keyspace. For unsharded keyspaces, it
	// should be '0'. For sharded keyspace, it should be derived from
	// the keyrange, like '-80' or '40-80'.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// db_name_override is the mysql db name for this shard. Has to be
	// globally unique. If not specified, we will by default use
	// 'vt_<keyspace>_<shard>'.
	DbNameOverride string `protobuf:"bytes,2,opt,name=db_name_override,json=dbNameOverride" json:"db_name_override,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Shard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shard) GetDbNameOverride() string {
	if m != nil {
		return m.DbNameOverride
	}
	return ""
}

// Keyspace describes a single keyspace.
type Keyspace struct {
	// name has to be unique in a VTTestTopology.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// shards inside this keyspace. Ignored if redirect is set.
	Shards []*Shard `protobuf:"bytes,2,rep,name=shards" json:"shards,omitempty"`
	// sharding_column_name for this keyspace. Used for v2 calls, but not for v3.
	ShardingColumnName string `protobuf:"bytes,3,opt,name=sharding_column_name,json=shardingColumnName" json:"sharding_column_name,omitempty"`
	// sharding_column_type for this keyspace. Used for v2 calls, but not for v3.
	ShardingColumnType string `protobuf:"bytes,4,opt,name=sharding_column_type,json=shardingColumnType" json:"sharding_column_type,omitempty"`
	// redirects all traffic to another keyspace. If set, shards is ignored.
	ServedFrom string `protobuf:"bytes,5,opt,name=served_from,json=servedFrom" json:"served_from,omitempty"`
	// number of replica tablets to instantiate. This includes the master tablet.
	ReplicaCount int32 `protobuf:"varint,6,opt,name=replica_count,json=replicaCount" json:"replica_count,omitempty"`
	// number of rdonly tablets to instantiate.
	RdonlyCount int32 `protobuf:"varint,7,opt,name=rdonly_count,json=rdonlyCount" json:"rdonly_count,omitempty"`
}

func (m *Keyspace) Reset()                    { *m = Keyspace{} }
func (m *Keyspace) String() string            { return proto.CompactTextString(m) }
func (*Keyspace) ProtoMessage()               {}
func (*Keyspace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Keyspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Keyspace) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *Keyspace) GetShardingColumnName() string {
	if m != nil {
		return m.ShardingColumnName
	}
	return ""
}

func (m *Keyspace) GetShardingColumnType() string {
	if m != nil {
		return m.ShardingColumnType
	}
	return ""
}

func (m *Keyspace) GetServedFrom() string {
	if m != nil {
		return m.ServedFrom
	}
	return ""
}

func (m *Keyspace) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *Keyspace) GetRdonlyCount() int32 {
	if m != nil {
		return m.RdonlyCount
	}
	return 0
}

// VTTestTopology describes the keyspaces in the topology.
type VTTestTopology struct {
	// all keyspaces in the topology.
	Keyspaces []*Keyspace `protobuf:"bytes,1,rep,name=keyspaces" json:"keyspaces,omitempty"`
	// list of cells the keyspaces reside in. Vtgate is started in only the first cell.
	Cells []string `protobuf:"bytes,2,rep,name=cells" json:"cells,omitempty"`
}

func (m *VTTestTopology) Reset()                    { *m = VTTestTopology{} }
func (m *VTTestTopology) String() string            { return proto.CompactTextString(m) }
func (*VTTestTopology) ProtoMessage()               {}
func (*VTTestTopology) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VTTestTopology) GetKeyspaces() []*Keyspace {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

func (m *VTTestTopology) GetCells() []string {
	if m != nil {
		return m.Cells
	}
	return nil
}

func init() {
	proto.RegisterType((*Shard)(nil), "vttest.Shard")
	proto.RegisterType((*Keyspace)(nil), "vttest.Keyspace")
	proto.RegisterType((*VTTestTopology)(nil), "vttest.VTTestTopology")
}

func init() { proto.RegisterFile("vttest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x6a, 0xf3, 0x30,
	0x10, 0xc4, 0x49, 0xec, 0xef, 0xcb, 0xe6, 0x87, 0x20, 0x72, 0xd0, 0xad, 0x69, 0x4a, 0xc1, 0xa7,
	0x50, 0xda, 0x47, 0x08, 0xed, 0xa5, 0xd0, 0x82, 0x6b, 0x72, 0x35, 0x8e, 0xb5, 0x4d, 0x4d, 0x65,
	0x4b, 0x48, 0x8a, 0xc1, 0xaf, 0xd1, 0x27, 0x2e, 0x5e, 0xcb, 0xf4, 0xe2, 0xdb, 0x68, 0x66, 0x76,
	0x67, 0x19, 0xc1, 0xb2, 0x71, 0x0e, 0xad, 0x3b, 0x68, 0xa3, 0x9c, 0x62, 0x51, 0xff, 0xda, 0x3f,
	0x43, 0xf8, 0xf1, 0x95, 0x1b, 0xc1, 0x18, 0xcc, 0xea, 0xbc, 0x42, 0x1e, 0xec, 0x82, 0x78, 0x9e,
	0x10, 0x66, 0x31, 0x6c, 0xc4, 0x39, 0xeb, 0x60, 0xa6, 0x1a, 0x34, 0xa6, 0x14, 0xc8, 0x27, 0xa4,
	0xaf, 0xc5, 0xf9, 0x2d, 0xaf, 0xf0, 0xdd, 0xb3, 0xfb, 0x9f, 0x09, 0xfc, 0x7f, 0xc5, 0xd6, 0xea,
	0xbc, 0xc0, 0xd1, 0x55, 0xf7, 0x10, 0xd9, 0x2e, 0xc7, 0xf2, 0xc9, 0x6e, 0x1a, 0x2f, 0x1e, 0x57,
	0x07, 0x7f, 0x0e, 0xa5, 0x27, 0x5e, 0x64, 0x0f, 0xb0, 0x25, 0x54, 0xd6, 0x97, 0xac, 0x50, 0xf2,
	0x5a, 0xd5, 0x14, 0xcf, 0xa7, 0xb4, 0x8a, 0x0d, 0xda, 0x91, 0xa4, 0xee, 0x82, 0xb1, 0x09, 0xd7,
	0x6a, 0xe4, 0xb3, 0xb1, 0x89, 0xb4, 0xd5, 0xc8, 0x6e, 0x60, 0x61, 0xd1, 0x34, 0x28, 0xb2, 0x4f,
	0xa3, 0x2a, 0x1e, 0x92, 0x11, 0x7a, 0xea, 0xc5, 0xa8, 0x8a, 0xdd, 0xc1, 0xca, 0xa0, 0x96, 0x65,
	0x91, 0x67, 0x85, 0xba, 0xd6, 0x8e, 0x47, 0xbb, 0x20, 0x0e, 0x93, 0xa5, 0x27, 0x8f, 0x1d, 0xc7,
	0x6e, 0x61, 0x69, 0x84, 0xaa, 0x65, 0xeb, 0x3d, 0xff, 0xc8, 0xb3, 0xe8, 0x39, 0xb2, 0xec, 0x4f,
	0xb0, 0x3e, 0xa5, 0x29, 0x5a, 0x97, 0x2a, 0xad, 0xa4, 0xba, 0xb4, 0xec, 0x00, 0xf3, 0x6f, 0xdf,
	0x92, 0xe5, 0x01, 0x15, 0xb1, 0x19, 0x8a, 0x18, 0xea, 0x4b, 0xfe, 0x2c, 0x6c, 0x0b, 0x61, 0x81,
	0x52, 0xf6, 0xa5, 0xcd, 0x93, 0xfe, 0x71, 0x8e, 0xe8, 0x0b, 0x9f, 0x7e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x05, 0x4a, 0xea, 0xbc, 0xd2, 0x01, 0x00, 0x00,
}
