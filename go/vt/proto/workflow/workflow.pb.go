// Code generated by protoc-gen-go.
// source: workflow.proto
// DO NOT EDIT!

/*
Package workflow is a generated protocol buffer package.

It is generated from these files:
	workflow.proto

It has these top-level messages:
	Workflow
	TaskAttribute
	Task
	WorkflowCheckpoints
*/
package workflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// WorkflowState describes the state of a workflow.
// This constant should match the Node object described in
// web/vtctld2/src/app/workflows/node.ts as it is exposed as JSON to
// the Angular 2 web app.
type WorkflowState int32

const (
	WorkflowState_NotStarted WorkflowState = 0
	WorkflowState_Running    WorkflowState = 1
	WorkflowState_Done       WorkflowState = 2
)

var WorkflowState_name = map[int32]string{
	0: "NotStarted",
	1: "Running",
	2: "Done",
}
var WorkflowState_value = map[string]int32{
	"NotStarted": 0,
	"Running":    1,
	"Done":       2,
}

func (x WorkflowState) String() string {
	return proto.EnumName(WorkflowState_name, int32(x))
}
func (WorkflowState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Workflow is the persisted state of a long-running workflow.
type Workflow struct {
	// uuid is set when the workflow is created, and immutable after
	// that.
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// factory_name is set with the name of the factory that created the
	// job (and can also restart it). It is set at creation time, and
	// immutable after that.
	FactoryName string `protobuf:"bytes,2,opt,name=factory_name,json=factoryName" json:"factory_name,omitempty"`
	// name is the display name of the workflow.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// state describes the state of the job. A job is created as
	// NotStarted, then the Workflow Manager picks it up and starts it,
	// switching it to Running (and populating 'start_time').  The
	// workflow can then fail over to a new Workflow Manager is
	// necessary, and still be in Running state.  When done, it goes to
	// Done, 'end_time' is populated, and 'error' is set if there was an
	// error.
	State WorkflowState `protobuf:"varint,4,opt,name=state,enum=workflow.WorkflowState" json:"state,omitempty"`
	// data is workflow-specific stored data. It is usually a binary
	// proto-encoded data structure. It can vary throughout the
	// execution of the workflow.  It will not change after the workflow
	// is Done.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// error is set if the job finished with an error. This field only
	// makes sense if 'state' is Done.
	Error string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	// start_time is set when the workflow manager starts a workflow for
	// the first time. This field only makes sense if 'state' is Running
	// or Done.
	StartTime int64 `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// end_time is set when the workflow is finished.
	// This field only makes sense if 'state' is Done.
	EndTime int64 `protobuf:"varint,8,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Workflow) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Workflow) GetFactoryName() string {
	if m != nil {
		return m.FactoryName
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetState() WorkflowState {
	if m != nil {
		return m.State
	}
	return WorkflowState_NotStarted
}

func (m *Workflow) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Workflow) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Workflow) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Workflow) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// TaskArribute includes the parameters the task needs.
// Not all fields are necessary for all tasks.
type TaskAttribute struct {
	SourceShard      string `protobuf:"bytes,1,opt,name=source_shard,json=sourceShard" json:"source_shard,omitempty"`
	DestinationShard string `protobuf:"bytes,2,opt,name=destination_shard,json=destinationShard" json:"destination_shard,omitempty"`
	Vtworker         string `protobuf:"bytes,3,opt,name=vtworker" json:"vtworker,omitempty"`
	Keyspace         string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *TaskAttribute) Reset()                    { *m = TaskAttribute{} }
func (m *TaskAttribute) String() string            { return proto.CompactTextString(m) }
func (*TaskAttribute) ProtoMessage()               {}
func (*TaskAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskAttribute) GetSourceShard() string {
	if m != nil {
		return m.SourceShard
	}
	return ""
}

func (m *TaskAttribute) GetDestinationShard() string {
	if m != nil {
		return m.DestinationShard
	}
	return ""
}

func (m *TaskAttribute) GetVtworker() string {
	if m != nil {
		return m.Vtworker
	}
	return ""
}

func (m *TaskAttribute) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

// Task is the data structure that stores the execution status and the attributes
// of a task.
type Task struct {
	State     WorkflowState  `protobuf:"varint,1,opt,name=state,enum=workflow.WorkflowState" json:"state,omitempty"`
	Attribute *TaskAttribute `protobuf:"bytes,2,opt,name=attribute" json:"attribute,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetState() WorkflowState {
	if m != nil {
		return m.State
	}
	return WorkflowState_NotStarted
}

func (m *Task) GetAttribute() *TaskAttribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

type WorkflowCheckpoints struct {
	// code_version is to distinguish the implementation version of the workflow.
	// This is helpful when restarting the job while the code is changed.
	CodeVersion string `protobuf:"bytes,1,opt,name=code_version,json=codeVersion" json:"code_version,omitempty"`
	// tasks stores all tasks of the workflow in a map. The key is a unique name
	// to identify the task, e.g. clone/-80.
	Tasks map[string]*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// settings includes information like source shards, destination shards for the
	// workflow. The information will be leveraged by the task runner.
	Settings map[string]string `protobuf:"bytes,3,rep,name=settings" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WorkflowCheckpoints) Reset()                    { *m = WorkflowCheckpoints{} }
func (m *WorkflowCheckpoints) String() string            { return proto.CompactTextString(m) }
func (*WorkflowCheckpoints) ProtoMessage()               {}
func (*WorkflowCheckpoints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WorkflowCheckpoints) GetCodeVersion() string {
	if m != nil {
		return m.CodeVersion
	}
	return ""
}

func (m *WorkflowCheckpoints) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowCheckpoints) GetSettings() map[string]string {
	if m != nil {
		return m.Settings
	}
	return nil
}

func init() {
	proto.RegisterType((*Workflow)(nil), "workflow.Workflow")
	proto.RegisterType((*TaskAttribute)(nil), "workflow.TaskAttribute")
	proto.RegisterType((*Task)(nil), "workflow.Task")
	proto.RegisterType((*WorkflowCheckpoints)(nil), "workflow.WorkflowCheckpoints")
	proto.RegisterEnum("workflow.WorkflowState", WorkflowState_name, WorkflowState_value)
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x75, 0xf2, 0xd1, 0x6c, 0x6e, 0x9a, 0x10, 0xc7, 0x82, 0x6b, 0x40, 0x88, 0xc1, 0x87, 0xc5,
	0x62, 0x1f, 0x2a, 0x8a, 0x28, 0x08, 0xa2, 0xa2, 0x4f, 0x7d, 0xd8, 0x14, 0x7d, 0x0c, 0xd3, 0xdd,
	0xdb, 0x76, 0xd8, 0x64, 0x26, 0xcc, 0xdc, 0x4d, 0xc9, 0x2f, 0xf1, 0x2f, 0xf9, 0x53, 0xfc, 0x19,
	0x32, 0x33, 0xbb, 0xc9, 0x06, 0x45, 0xfa, 0x76, 0xef, 0x3d, 0xf7, 0x9c, 0x39, 0xf7, 0x24, 0x0b,
	0xa3, 0x3b, 0x6d, 0x8a, 0xeb, 0xa5, 0xbe, 0x3b, 0x5b, 0x1b, 0x4d, 0x9a, 0x47, 0x75, 0x3f, 0xfb,
	0xcd, 0x20, 0xfa, 0x51, 0x35, 0x9c, 0x43, 0xa7, 0x2c, 0x65, 0x1e, 0xb3, 0x29, 0x4b, 0xfa, 0xa9,
	0xaf, 0xf9, 0x33, 0x38, 0xbe, 0x16, 0x19, 0x69, 0xb3, 0x5d, 0x28, 0xb1, 0xc2, 0xb8, 0xe5, 0xb1,
	0x41, 0x35, 0xbb, 0x10, 0x2b, 0x74, 0x34, 0x0f, 0xb5, 0x03, 0xcd, 0xd5, 0xfc, 0x25, 0x74, 0x2d,
	0x09, 0xc2, 0xb8, 0x33, 0x65, 0xc9, 0xe8, 0xfc, 0xf1, 0xd9, 0xce, 0x41, 0xfd, 0xda, 0xdc, 0xc1,
	0x69, 0xd8, 0x72, 0x12, 0xb9, 0x20, 0x11, 0x77, 0xa7, 0x2c, 0x39, 0x4e, 0x7d, 0xcd, 0x4f, 0xa0,
	0x8b, 0xc6, 0x68, 0x13, 0x1f, 0x79, 0xdd, 0xd0, 0xf0, 0xa7, 0x00, 0x96, 0x84, 0xa1, 0x05, 0xc9,
	0x15, 0xc6, 0xbd, 0x29, 0x4b, 0xda, 0x69, 0xdf, 0x4f, 0x2e, 0xe5, 0x0a, 0xf9, 0x13, 0x88, 0x50,
	0xe5, 0x01, 0x8c, 0x3c, 0xd8, 0x43, 0x95, 0x3b, 0x68, 0xf6, 0x93, 0xc1, 0xf0, 0x52, 0xd8, 0xe2,
	0x23, 0x91, 0x91, 0x57, 0x25, 0xa1, 0xbb, 0xcd, 0xea, 0xd2, 0x64, 0xb8, 0xb0, 0xb7, 0xc2, 0xd4,
	0x77, 0x0f, 0xc2, 0x6c, 0xee, 0x46, 0xfc, 0x14, 0x1e, 0xe6, 0x68, 0x49, 0x2a, 0x41, 0x52, 0xab,
	0x6a, 0x2f, 0x64, 0x30, 0x6e, 0x00, 0x61, 0x79, 0x02, 0xd1, 0x86, 0xdc, 0xa1, 0x68, 0xaa, 0x30,
	0x76, 0xbd, 0xc3, 0x0a, 0xdc, 0xda, 0xb5, 0xc8, 0x42, 0x26, 0xfd, 0x74, 0xd7, 0xcf, 0x96, 0xd0,
	0x71, 0xc6, 0xf6, 0xa1, 0xb1, 0x7b, 0x85, 0xf6, 0x1a, 0xfa, 0xa2, 0xbe, 0xc5, 0x7b, 0x1a, 0x34,
	0x29, 0x07, 0xa7, 0xa6, 0xfb, 0xcd, 0xd9, 0xaf, 0x16, 0x3c, 0xaa, 0xf5, 0x3e, 0xdd, 0x62, 0x56,
	0xac, 0xb5, 0x54, 0x64, 0x5d, 0x1a, 0x99, 0xce, 0x71, 0xb1, 0x41, 0x63, 0xa5, 0x56, 0x75, 0x1a,
	0x6e, 0xf6, 0x3d, 0x8c, 0xf8, 0x07, 0xe8, 0x92, 0xb0, 0x85, 0x8d, 0x5b, 0xd3, 0x76, 0x32, 0x38,
	0x4f, 0xfe, 0x36, 0xd8, 0x10, 0xf4, 0x0e, 0xec, 0x17, 0x45, 0x66, 0x9b, 0x06, 0x1a, 0xff, 0x0a,
	0x91, 0x45, 0x22, 0xa9, 0x6e, 0x6c, 0xdc, 0xf6, 0x12, 0xa7, 0xff, 0x97, 0x98, 0x57, 0xdb, 0x41,
	0x65, 0x47, 0x9e, 0x7c, 0x03, 0xd8, 0xab, 0xf3, 0x31, 0xb4, 0x0b, 0xdc, 0x56, 0x86, 0x5d, 0xc9,
	0x9f, 0x43, 0x77, 0x23, 0x96, 0x65, 0x1d, 0xcb, 0xe8, 0x30, 0x96, 0x34, 0x80, 0xef, 0x5a, 0x6f,
	0xd9, 0xe4, 0x3d, 0x0c, 0x0f, 0x1e, 0xf9, 0x87, 0xd8, 0x49, 0x53, 0xac, 0xdf, 0x20, 0xbf, 0x78,
	0x03, 0xc3, 0x83, 0x5f, 0x86, 0x8f, 0x00, 0x2e, 0x34, 0xcd, 0xdd, 0xdf, 0x11, 0xf3, 0xf1, 0x03,
	0x3e, 0x80, 0x5e, 0x5a, 0x2a, 0x25, 0xd5, 0xcd, 0x98, 0xf1, 0x08, 0x3a, 0x9f, 0xb5, 0xc2, 0x71,
	0xeb, 0xea, 0xc8, 0x7f, 0x86, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xca, 0x6e, 0x5d, 0xa4,
	0x98, 0x03, 0x00, 0x00,
}
