// Code generated by protoc-gen-go.
// source: workflow.proto
// DO NOT EDIT!

/*
Package workflow is a generated protocol buffer package.

It is generated from these files:
	workflow.proto

It has these top-level messages:
	Workflow
	Task
	WorkflowCheckpoint
*/
package workflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// WorkflowState describes the state of a workflow.
// This constant should match the Node object described in
// web/vtctld2/src/app/workflows/node.ts as it is exposed as JSON to
// the Angular 2 web app.
type WorkflowState int32

const (
	WorkflowState_NotStarted WorkflowState = 0
	WorkflowState_Running    WorkflowState = 1
	WorkflowState_Done       WorkflowState = 2
)

var WorkflowState_name = map[int32]string{
	0: "NotStarted",
	1: "Running",
	2: "Done",
}
var WorkflowState_value = map[string]int32{
	"NotStarted": 0,
	"Running":    1,
	"Done":       2,
}

func (x WorkflowState) String() string {
	return proto.EnumName(WorkflowState_name, int32(x))
}
func (WorkflowState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TaskState int32

const (
	TaskState_TaskNotStarted TaskState = 0
	TaskState_TaskRunning    TaskState = 1
	TaskState_TaskDone       TaskState = 2
)

var TaskState_name = map[int32]string{
	0: "TaskNotStarted",
	1: "TaskRunning",
	2: "TaskDone",
}
var TaskState_value = map[string]int32{
	"TaskNotStarted": 0,
	"TaskRunning":    1,
	"TaskDone":       2,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}
func (TaskState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Workflow is the persisted state of a long-running workflow.
type Workflow struct {
	// uuid is set when the workflow is created, and immutable after
	// that.
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// factory_name is set with the name of the factory that created the
	// job (and can also restart it). It is set at creation time, and
	// immutable after that.
	FactoryName string `protobuf:"bytes,2,opt,name=factory_name,json=factoryName" json:"factory_name,omitempty"`
	// name is the display name of the workflow.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// state describes the state of the job. A job is created as
	// NotStarted, then the Workflow Manager picks it up and starts it,
	// switching it to Running (and populating 'start_time').  The
	// workflow can then fail over to a new Workflow Manager is
	// necessary, and still be in Running state.  When done, it goes to
	// Done, 'end_time' is populated, and 'error' is set if there was an
	// error.
	State WorkflowState `protobuf:"varint,4,opt,name=state,enum=workflow.WorkflowState" json:"state,omitempty"`
	// data is workflow-specific stored data. It is usually a binary
	// proto-encoded data structure. It can vary throughout the
	// execution of the workflow.  It will not change after the workflow
	// is Done.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// error is set if the job finished with an error. This field only
	// makes sense if 'state' is Done.
	Error string `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	// start_time is set when the workflow manager starts a workflow for
	// the first time. This field only makes sense if 'state' is Running
	// or Done.
	StartTime int64 `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// end_time is set when the workflow is finished.
	// This field only makes sense if 'state' is Done.
	EndTime int64 `protobuf:"varint,8,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Workflow) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Workflow) GetFactoryName() string {
	if m != nil {
		return m.FactoryName
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetState() WorkflowState {
	if m != nil {
		return m.State
	}
	return WorkflowState_NotStarted
}

func (m *Workflow) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Workflow) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Workflow) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Workflow) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type Task struct {
	TaskId string    `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	State  TaskState `protobuf:"varint,2,opt,name=state,enum=workflow.TaskState" json:"state,omitempty"`
	// attributes includes the parameters the task needs.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error      string            `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Task) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Task) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_TaskNotStarted
}

func (m *Task) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Task) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type WorkflowCheckpoint struct {
	// code_version is used to detect incompabilities between the version of the
	// running workflow and the one which wrote the checkpoint. If they don't
	// match, the workflow must not continue. The author of workflow must update
	// this variable in their implementation when incompabilities are introduced.
	CodeVersion int32 `protobuf:"varint,1,opt,name=code_version,json=codeVersion" json:"code_version,omitempty"`
	// Task is the data structure that stores the execution status and the
	// attributes of a task.
	Tasks map[string]*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// settings includes workflow specific data, e.g. the resharding workflow
	// would store the source shards and destination shards.
	Settings map[string]string `protobuf:"bytes,3,rep,name=settings" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WorkflowCheckpoint) Reset()                    { *m = WorkflowCheckpoint{} }
func (m *WorkflowCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*WorkflowCheckpoint) ProtoMessage()               {}
func (*WorkflowCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WorkflowCheckpoint) GetCodeVersion() int32 {
	if m != nil {
		return m.CodeVersion
	}
	return 0
}

func (m *WorkflowCheckpoint) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowCheckpoint) GetSettings() map[string]string {
	if m != nil {
		return m.Settings
	}
	return nil
}

func init() {
	proto.RegisterType((*Workflow)(nil), "workflow.Workflow")
	proto.RegisterType((*Task)(nil), "workflow.Task")
	proto.RegisterType((*WorkflowCheckpoint)(nil), "workflow.WorkflowCheckpoint")
	proto.RegisterEnum("workflow.WorkflowState", WorkflowState_name, WorkflowState_value)
	proto.RegisterEnum("workflow.TaskState", TaskState_name, TaskState_value)
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x75, 0xd2, 0xa4, 0x4d, 0x6f, 0xba, 0xd9, 0x72, 0x15, 0x36, 0x16, 0x94, 0x58, 0x04, 0x63,
	0xc1, 0x3e, 0x54, 0x10, 0x51, 0x76, 0x41, 0xfc, 0x40, 0x5f, 0xf6, 0x21, 0x5d, 0xf4, 0xb1, 0xcc,
	0x36, 0xb3, 0x6b, 0xc8, 0x76, 0x66, 0x99, 0x4c, 0x76, 0xe9, 0x0f, 0xf4, 0x77, 0xf8, 0xea, 0xcf,
	0x90, 0x99, 0x49, 0xd2, 0x46, 0x45, 0xd8, 0xb7, 0xfb, 0x75, 0x4e, 0xce, 0xb9, 0x73, 0x03, 0xe1,
	0xad, 0x90, 0xc5, 0xc5, 0x95, 0xb8, 0x9d, 0x5f, 0x4b, 0xa1, 0x04, 0xfa, 0x4d, 0x3e, 0xfd, 0x45,
	0xc0, 0xff, 0x56, 0x27, 0x88, 0xe0, 0x56, 0x55, 0x9e, 0x45, 0x24, 0x26, 0xc9, 0x30, 0x35, 0x31,
	0x3e, 0x81, 0xd1, 0x05, 0x5d, 0x2b, 0x21, 0xb7, 0x2b, 0x4e, 0x37, 0x2c, 0x72, 0x4c, 0x2f, 0xa8,
	0x6b, 0xa7, 0x74, 0xc3, 0x34, 0xcc, 0xb4, 0x7a, 0x16, 0xa6, 0x63, 0x7c, 0x01, 0x5e, 0xa9, 0xa8,
	0x62, 0x91, 0x1b, 0x93, 0x24, 0x5c, 0x1c, 0xcd, 0x5b, 0x05, 0xcd, 0xd7, 0x96, 0xba, 0x9d, 0xda,
	0x29, 0x4d, 0x91, 0x51, 0x45, 0x23, 0x2f, 0x26, 0xc9, 0x28, 0x35, 0x31, 0x3e, 0x00, 0x8f, 0x49,
	0x29, 0x64, 0xd4, 0x37, 0xbc, 0x36, 0xc1, 0x47, 0x00, 0xa5, 0xa2, 0x52, 0xad, 0x54, 0xbe, 0x61,
	0xd1, 0x20, 0x26, 0x49, 0x2f, 0x1d, 0x9a, 0xca, 0x59, 0xbe, 0x61, 0xf8, 0x10, 0x7c, 0xc6, 0x33,
	0xdb, 0xf4, 0x4d, 0x73, 0xc0, 0x78, 0xa6, 0x5b, 0xd3, 0x9f, 0x04, 0xdc, 0x33, 0x5a, 0x16, 0x78,
	0x04, 0x03, 0x45, 0xcb, 0x62, 0xd5, 0x3a, 0xed, 0xeb, 0xf4, 0x4b, 0x86, 0xcf, 0x1b, 0xd1, 0x8e,
	0x11, 0x7d, 0x7f, 0x27, 0x5a, 0xe3, 0x3a, 0x82, 0x4f, 0x00, 0xa8, 0x52, 0x32, 0x3f, 0xaf, 0x14,
	0x2b, 0xa3, 0x5e, 0xdc, 0x4b, 0x82, 0xc5, 0xe3, 0xee, 0xfc, 0xfc, 0x5d, 0x3b, 0xf0, 0x91, 0x2b,
	0xb9, 0x4d, 0xf7, 0x10, 0x3b, 0x73, 0xee, 0x9e, 0xb9, 0xc9, 0x31, 0x1c, 0xfe, 0x01, 0xc2, 0x31,
	0xf4, 0x0a, 0xb6, 0xad, 0x85, 0xea, 0x50, 0x43, 0x6f, 0xe8, 0x55, 0xd5, 0x3c, 0x85, 0x4d, 0xde,
	0x38, 0xaf, 0xc9, 0xf4, 0x87, 0x03, 0xd8, 0xac, 0xf7, 0xfd, 0x77, 0xb6, 0x2e, 0xae, 0x45, 0xce,
	0x95, 0x7e, 0xc2, 0xb5, 0xc8, 0xd8, 0xea, 0x86, 0xc9, 0x32, 0x17, 0xdc, 0x70, 0x79, 0x69, 0xa0,
	0x6b, 0x5f, 0x6d, 0x09, 0x8f, 0xc1, 0xd3, 0x3b, 0x28, 0x23, 0xc7, 0x38, 0x79, 0xf6, 0xf7, 0x73,
	0xed, 0xf8, 0x8c, 0xb9, 0xda, 0x92, 0x45, 0xe1, 0x27, 0xf0, 0x4b, 0xa6, 0x54, 0xce, 0x2f, 0x9b,
	0x5d, 0xcc, 0xfe, 0xcb, 0xb0, 0xac, 0x87, 0x2d, 0x49, 0x8b, 0x9d, 0x7c, 0x06, 0xd8, 0x91, 0xff,
	0xc3, 0xfa, 0xd3, 0x7d, 0xeb, 0xc1, 0x22, 0xec, 0x2e, 0x7c, 0x6f, 0x15, 0x93, 0xb7, 0x70, 0xd0,
	0xf9, 0xc8, 0x5d, 0xf6, 0x38, 0x7b, 0x05, 0x07, 0x9d, 0x2b, 0xc5, 0x10, 0xe0, 0x54, 0xa8, 0xa5,
	0xbe, 0x32, 0x96, 0x8d, 0xef, 0x61, 0x00, 0x83, 0xb4, 0xe2, 0x3c, 0xe7, 0x97, 0x63, 0x82, 0x3e,
	0xb8, 0x1f, 0x04, 0x67, 0x63, 0x67, 0x76, 0x02, 0xc3, 0xf6, 0x50, 0x10, 0x21, 0xd4, 0x49, 0x07,
	0x77, 0x08, 0x81, 0x11, 0xda, 0x62, 0x47, 0xe0, 0xeb, 0x82, 0xc5, 0x9f, 0xf7, 0xcd, 0xdf, 0xf9,
	0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xca, 0x5c, 0xae, 0xaf, 0x03, 0x00, 0x00,
}
