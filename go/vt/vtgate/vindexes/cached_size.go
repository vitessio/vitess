/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by Sizegen. DO NOT EDIT.

package vindexes

import (
	"math"
	"reflect"
	"unsafe"

	hack "vitess.io/vitess/go/hack"
)

type cachedObject interface {
	CachedSize(alloc bool) int64
}

func (cached *Binary) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *BinaryMD5) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *CFC) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(16)
	}
	// field cfcCommon *vitess.io/vitess/go/vt/vtgate/vindexes.cfcCommon
	size += cached.cfcCommon.CachedSize(true)
	// field prefixCFC *vitess.io/vitess/go/vt/vtgate/vindexes.prefixCFC
	size += cached.prefixCFC.CachedSize(true)
	return size
}
func (cached *ColumnVindex) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(112)
	}
	// field Columns []vitess.io/vitess/go/vt/sqlparser.IdentifierCI
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.Columns)) * int64(32))
		for _, elem := range cached.Columns {
			size += elem.CachedSize(false)
		}
	}
	// field Type string
	size += hack.RuntimeAllocSize(int64(len(cached.Type)))
	// field Name string
	size += hack.RuntimeAllocSize(int64(len(cached.Name)))
	// field Vindex vitess.io/vitess/go/vt/vtgate/vindexes.Vindex
	if cc, ok := cached.Vindex.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	return size
}
func (cached *ConsistentLookup) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field clCommon *vitess.io/vitess/go/vt/vtgate/vindexes.clCommon
	size += cached.clCommon.CachedSize(true)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *ConsistentLookupUnique) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(32)
	}
	// field clCommon *vitess.io/vitess/go/vt/vtgate/vindexes.clCommon
	size += cached.clCommon.CachedSize(true)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *Hash) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *Keyspace) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(24)
	}
	// field Name string
	size += hack.RuntimeAllocSize(int64(len(cached.Name)))
	return size
}
func (cached *LookupHash) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *LookupHashUnique) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *LookupNonUnique) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *LookupUnicodeLooseMD5Hash) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *LookupUnicodeLooseMD5HashUnique) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *LookupUnique) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(192)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}

//go:nocheckptr
func (cached *MultiCol) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field columnVdx map[int]vitess.io/vitess/go/vt/vtgate/vindexes.Hashing
	if cached.columnVdx != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.columnVdx)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 208))
		if len(cached.columnVdx) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 208))
		}
		for _, v := range cached.columnVdx {
			if cc, ok := v.(cachedObject); ok {
				size += cc.CachedSize(true)
			}
		}
	}
	// field columnBytes map[int]int
	if cached.columnBytes != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.columnBytes)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 144))
		if len(cached.columnBytes) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 144))
		}
	}
	return size
}
func (cached *Null) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *Numeric) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}

//go:nocheckptr
func (cached *NumericStaticMap) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field hashVdx vitess.io/vitess/go/vt/vtgate/vindexes.Hashing
	if cc, ok := cached.hashVdx.(cachedObject); ok {
		size += cc.CachedSize(true)
	}
	// field lookup vitess.io/vitess/go/vt/vtgate/vindexes.NumericLookupTable
	if cached.lookup != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.lookup)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 144))
		if len(cached.lookup) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 144))
		}
	}
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *RegionExperimental) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}

//go:nocheckptr
func (cached *RegionJSON) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(64)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field regionMap vitess.io/vitess/go/vt/vtgate/vindexes.RegionMap
	if cached.regionMap != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.regionMap)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 208))
		if len(cached.regionMap) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 208))
		}
		for k := range cached.regionMap {
			size += hack.RuntimeAllocSize(int64(len(k)))
		}
	}
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *ReverseBits) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *UnicodeLooseMD5) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *UnicodeLooseXXHash) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *XXHash) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *cfcCommon) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(80)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field offsets []int
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.offsets)) * int64(8))
	}
	// field unknownParams []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.unknownParams)) * int64(16))
		for _, elem := range cached.unknownParams {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	return size
}
func (cached *clCommon) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(288)
	}
	// field name string
	size += hack.RuntimeAllocSize(int64(len(cached.name)))
	// field lkp vitess.io/vitess/go/vt/vtgate/vindexes.lookupInternal
	size += cached.lkp.CachedSize(false)
	// field keyspace string
	size += hack.RuntimeAllocSize(int64(len(cached.keyspace)))
	// field ownerTable string
	size += hack.RuntimeAllocSize(int64(len(cached.ownerTable)))
	// field ownerColumns []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.ownerColumns)) * int64(16))
		for _, elem := range cached.ownerColumns {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	// field lockLookupQuery string
	size += hack.RuntimeAllocSize(int64(len(cached.lockLookupQuery)))
	// field lockOwnerQuery string
	size += hack.RuntimeAllocSize(int64(len(cached.lockOwnerQuery)))
	// field insertLookupQuery string
	size += hack.RuntimeAllocSize(int64(len(cached.insertLookupQuery)))
	// field updateLookupQuery string
	size += hack.RuntimeAllocSize(int64(len(cached.updateLookupQuery)))
	return size
}
func (cached *lookupInternal) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(144)
	}
	// field Table string
	size += hack.RuntimeAllocSize(int64(len(cached.Table)))
	// field FromColumns []string
	{
		size += hack.RuntimeAllocSize(int64(cap(cached.FromColumns)) * int64(16))
		for _, elem := range cached.FromColumns {
			size += hack.RuntimeAllocSize(int64(len(elem)))
		}
	}
	// field To string
	size += hack.RuntimeAllocSize(int64(len(cached.To)))
	// field ReadLock string
	size += hack.RuntimeAllocSize(int64(len(cached.ReadLock)))
	// field sel string
	size += hack.RuntimeAllocSize(int64(len(cached.sel)))
	// field selTxDml string
	size += hack.RuntimeAllocSize(int64(len(cached.selTxDml)))
	// field ver string
	size += hack.RuntimeAllocSize(int64(len(cached.ver)))
	// field del string
	size += hack.RuntimeAllocSize(int64(len(cached.del)))
	return size
}
func (cached *prefixCFC) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(8)
	}
	// field cfcCommon *vitess.io/vitess/go/vt/vtgate/vindexes.cfcCommon
	size += cached.cfcCommon.CachedSize(true)
	return size
}
