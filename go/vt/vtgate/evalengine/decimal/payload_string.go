// Code generated by "stringer -type Payload -linecomment"; DO NOT EDIT.

package decimal

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[absvalue-1]
	_ = x[acos-2]
	_ = x[addinfinf-3]
	_ = x[addition-4]
	_ = x[asin-5]
	_ = x[atan-6]
	_ = x[atan2-7]
	_ = x[comparison-8]
	_ = x[cos-9]
	_ = x[division-10]
	_ = x[exp-11]
	_ = x[invctxomode-12]
	_ = x[invctxpgtu-13]
	_ = x[invctxpltz-14]
	_ = x[invctxrmode-15]
	_ = x[invctxsgtu-16]
	_ = x[invctxsltu-17]
	_ = x[log-18]
	_ = x[log10-19]
	_ = x[mul0inf-20]
	_ = x[multiplication-21]
	_ = x[negation-22]
	_ = x[nextminus-23]
	_ = x[nextplus-24]
	_ = x[quantinf-25]
	_ = x[quantization-26]
	_ = x[quantminmax-27]
	_ = x[quantprec-28]
	_ = x[quo00-29]
	_ = x[quoinfinf-30]
	_ = x[quointprec-31]
	_ = x[quorem_-32]
	_ = x[quotermexp-33]
	_ = x[reduction-34]
	_ = x[reminfy-35]
	_ = x[remprec-36]
	_ = x[remx0-37]
	_ = x[sin-38]
	_ = x[subinfinf-39]
	_ = x[subtraction-40]
}

const _Payload_name = "absolute value of NaNacos with NaN as an operandaddition of infinities with opposing signsaddition with NaN as an operandasin with NaN as an operandatan with NaN as an operandatan2 with NaN as an operandcomparison with NaN as an operandcos with NaN as an operanddivision with NaN as an operandexp with NaN as an operandoperation with an invalid OperatingModeoperation with a precision greater than MaxPrecisionoperation with a precision less than zerooperation with an invalid RoundingModeoperation with a scale greater than MaxScaleoperation with a scale lesser than MinScalelog with NaN as an operandlog10 with NaN as an operandmultiplication of zero with infinitymultiplication with NaN as an operandnegation with NaN as an operandnext-minus with NaN as an operandnext-plus with NaN as an operandquantization of an infinityquantization with NaN as an operandquantization exceeds minimum or maximum scalequantization exceeds working precisiondivision of zero by zerodivision of infinity by infinityresult of integer division was larger than the desired precisioninteger division or remainder has too many digitsdivision with unlimited precision has a non-terminating decimal expansionreduction with NaN as an operandremainder of infinityresult of remainder operation was larger than the desired precisionremainder by zerosin with NaN as an operandsubtraction of infinities with opposing signssubtraction with NaN as an operand"

var _Payload_index = [...]uint16{0, 21, 48, 90, 121, 148, 175, 203, 236, 262, 293, 319, 358, 410, 451, 489, 533, 576, 602, 630, 666, 703, 734, 767, 799, 826, 861, 906, 944, 968, 1000, 1064, 1113, 1186, 1218, 1239, 1306, 1323, 1349, 1394, 1428}

func (i Payload) String() string {
	i -= 1
	if i >= Payload(len(_Payload_index)-1) {
		return "Payload(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Payload_name[_Payload_index[i]:_Payload_index[i+1]]
}
