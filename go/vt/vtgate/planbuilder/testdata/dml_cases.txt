# update table not found
"update nouser set val = 1"
"table nouser not found"

# delete table not found
"delete from nouser"
"table nouser not found"

# explicit keyspace reference
"update main.m1 set val = 1"
{
  "Original": "update main.m1 set val = 1",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update m1 set val = 1"
  }
}

# update unsharded
"update unsharded set val = 1"
{
  "Original": "update unsharded set val = 1",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded set val = 1"
  }
}

# subqueries in unsharded update
"update unsharded set col = (select col from unsharded limit 1)"
{
  "Original": "update unsharded set col = (select col from unsharded limit 1)",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded set col = (select col from unsharded limit 1)"
  }
}

# unsharded union in subquery of unsharded update
"update unsharded set col = (select id from unsharded union select id from unsharded)"
{
  "Original": "update unsharded set col = (select id from unsharded union select id from unsharded)",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded set col = (select id from unsharded union select id from unsharded)"
  }
}

# unsharded join in subquery of unsharded update
"update unsharded set col = (select id from unsharded a join unsharded b on a.id = b.id)"
{
  "Original": "update unsharded set col = (select id from unsharded a join unsharded b on a.id = b.id)",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded set col = (select id from unsharded as a join unsharded as b on a.id = b.id)"
  }
}

# update with join subquery
"update unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id set col1 = 'asdf' where keepers.id is null and foo.col is not null and foo.col < 1000"
{
  "Original": "update unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id set col1 = 'asdf' where keepers.id is null and foo.col is not null and foo.col \u003c 1000",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id set col1 = 'asdf' where keepers.id is null and foo.col is not null and foo.col \u003c 1000"
  }
}

# delete unsharded
"delete from unsharded"
{
  "Original": "delete from unsharded",
  "Instructions": {
    "Opcode": "DeleteUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "delete from unsharded"
  }
}

# update by primary keyspace id
"update user set val = 1 where id = 1"
{
  "Original": "update user set val = 1 where id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set val = 1 where id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user"
  }
}


# update by primary keyspace id with alias
"update user as user_alias set val = 1 where user_alias.id = 1"
{
  "Original": "update user as user_alias set val = 1 where user_alias.id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user as user_alias set val = 1 where user_alias.id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user"
  }
}

# update by primary keyspace id with parenthesized expression
"update user set val = 1 where (id = 1)"
{
  "Original": "update user set val = 1 where (id = 1)",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set val = 1 where (id = 1)",
    "Vindex": "user_index",
    "Values": [
      1
    ],
    "Table": "user"
  }
}

# update by primary keyspace id with multi-part where clause with parens
"update user set val = 1 where (name = 'foo' and id = 1)"
{
  "Original": "update user set val = 1 where (name = 'foo' and id = 1)",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set val = 1 where (name = 'foo' and id = 1)",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user"
  }
}

# update by primary keyspace id, changing one vindex column
"update user_metadata set email = 'juan@vitess.io' where user_id = 1"
{
  "Original": "update user_metadata set email = 'juan@vitess.io' where user_id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_metadata set email = 'juan@vitess.io' where user_id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "ChangedVindexValues": {
      "email_user_map": ["juan@vitess.io"]
    },
    "Table": "user_metadata",
    "OwnedVindexQuery": "select email, address from user_metadata where user_id = 1 for update"
  }
}

# update by primary keyspace id, changing same vindex twice
"update user_metadata set email = 'a', email = 'b' where user_id = 1"
"column has duplicate set values: 'email'"

# update by primary keyspace id, changing multiple vindex columns
"update user_metadata set email = 'juan@vitess.io', address = '155 5th street' where user_id = 1"
{
  "Original": "update user_metadata set email = 'juan@vitess.io', address = '155 5th street' where user_id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_metadata set email = 'juan@vitess.io', address = '155 5th street' where user_id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "ChangedVindexValues": {
      "address_user_map": ["155 5th street"],
      "email_user_map": ["juan@vitess.io"]
    },
    "Table": "user_metadata",
    "OwnedVindexQuery": "select email, address from user_metadata where user_id = 1 for update"
  }
}

# update by primary keyspace id, changing one vindex column, using order by and limit
"update user_metadata set email = 'juan@vitess.io' where user_id = 1 order by user_id asc limit 10"
{
  "Original": "update user_metadata set email = 'juan@vitess.io' where user_id = 1 order by user_id asc limit 10",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_metadata set email = 'juan@vitess.io' where user_id = 1 order by user_id asc limit 10",
    "Vindex": "user_index",
    "Values": [
      1
    ],
    "ChangedVindexValues": {
      "email_user_map": ["juan@vitess.io"]
    },
    "Table": "user_metadata",
    "OwnedVindexQuery": "select email, address from user_metadata where user_id = 1 order by user_id asc limit 10 for update"
  }
}

# update by primary keyspace id, stray where clause
"update user set val = 1 where id = id2 and id = 1"
{
  "Original": "update user set val = 1 where id = id2 and id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set val = 1 where id = id2 and id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user"
  }
}

# update by primary keyspace id, stray where clause with conversion error
"update user set val = 1 where id = 18446744073709551616 and id = 1"
{
  "Original": "update user set val = 1 where id = 18446744073709551616 and id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set val = 1 where id = 18446744073709551616 and id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user"
  }
}

# delete from by primary keyspace id
"delete from user where id = 1"
{
  "Original": "delete from user where id = 1",
  "Instructions": {
    "Opcode": "DeleteEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user where id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "user",
    "OwnedVindexQuery": "select Name, Costly from user where id = 1 for update"
  }
}

# multi-table delete with comma join
"delete a from unsharded_a a, unsharded_b b where a.id = b.id and b.val = 1"
{
  "Original": "delete a from unsharded_a a, unsharded_b b where a.id = b.id and b.val = 1",
  "Instructions": {
    "Opcode": "DeleteUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "delete a from unsharded_a as a, unsharded_b as b where a.id = b.id and b.val = 1"
  }
}

# multi-table delete with ansi join
"delete a from unsharded_a a join unsharded_b b on a.id = b.id where b.val = 1"
{
  "Original": "delete a from unsharded_a a join unsharded_b b on a.id = b.id where b.val = 1",
  "Instructions": {
    "Opcode": "DeleteUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "delete a from unsharded_a as a join unsharded_b as b on a.id = b.id where b.val = 1"
  }
}

#delete with join from subquery
"delete foo from unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id where keepers.id is null and foo.col is not null and foo.col < 1000"
{
  "Original": "delete foo from unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id where keepers.id is null and foo.col is not null and foo.col \u003c 1000",
  "Instructions": {
    "Opcode": "DeleteUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "delete foo from unsharded as foo left join (select id from unsharded where col is not null order by col desc limit 10) as keepers on foo.id = keepers.id where keepers.id is null and foo.col is not null and foo.col \u003c 1000"
  }
}

# update by lookup
"update music set val = 1 where id = 1"
{
  "Original": "update music set val = 1 where id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update music set val = 1 where id = 1",
    "Vindex": "music_user_map",
    "Values": [1],
    "Table": "music"
  }
}

# update multi-table ansi join
"update unsharded_a a join unsharded_b b on a.id = b.id set a.val = 'foo' where b.val = 1"
{
  "Original": "update unsharded_a a join unsharded_b b on a.id = b.id set a.val = 'foo' where b.val = 1",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
          "Name": "main",
          "Sharded": false
     },
    "Query": "update unsharded_a as a join unsharded_b as b on a.id = b.id set a.val = 'foo' where b.val = 1"
  }
}

# update multi-table comma join
"update unsharded_a a, unsharded_b b set a.val = 'foo' where a.id = b.id and b.val = 1"
{
  "Original": "update unsharded_a a, unsharded_b b set a.val = 'foo' where a.id = b.id and b.val = 1",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "update unsharded_a as a, unsharded_b as b set a.val = 'foo' where a.id = b.id and b.val = 1"
  }
}

# delete from by lookup
"delete from music where id = 1"
{
  "Original": "delete from music where id = 1",
  "Instructions": {
    "Opcode": "DeleteEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from music where id = 1",
    "Vindex": "music_user_map",
    "Values": [1],
    "Table": "music",
    "OwnedVindexQuery": "select id from music where id = 1 for update"
  }
}

# delete from, no owned vindexes
"delete from music_extra where user_id = 1"
{
  "Original": "delete from music_extra where user_id = 1",
  "Instructions": {
    "Opcode": "DeleteEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from music_extra where user_id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "Table": "music_extra"
  }
}

# simple insert, no values
"insert into unsharded values()"
{
  "Original": "insert into unsharded values()",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded values ()",
    "Table": "unsharded"
  }
}

# simple insert unsharded
"insert into unsharded values(1, 2)"
{
  "Original": "insert into unsharded values(1, 2)",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded values (1, 2)",
    "Table": "unsharded"
  }
}

# simple upsert unsharded
"insert into unsharded values(1, 2) on duplicate key update x = 3"
{
  "Original": "insert into unsharded values(1, 2) on duplicate key update x = 3",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded values (1, 2) on duplicate key update x = 3",
    "Table": "unsharded"
  }
}

# sharded upsert with sharding key set to vindex column
"insert into music(user_id, id) values(1, 2) on duplicate key update user_id = values(user_id)"
{
  "Original": "insert into music(user_id, id) values(1, 2) on duplicate key update user_id = values(user_id)",
  "Instructions": {
    "Opcode": "InsertShardedIgnore",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into music(user_id, id) values (:_user_id0, :_id0) on duplicate key update user_id = values(user_id)",
    "Values": [
      [
        [
          1
        ]
      ],
      [
        [
          2
        ]
      ]
    ],
    "Table": "music",
    "Prefix": "insert into music(user_id, id) values ",
    "Mid": [
      "(:_user_id0, :_id0)"
    ],
    "Suffix": " on duplicate key update user_id = values(user_id)"
  }
}

# sharded bulk upsert with sharding key set to vindex column 
"insert into music(user_id, id) values (1, 2), (3,4) on duplicate key update user_id = values(user_id)"
{
  "Original": "insert into music(user_id, id) values (1, 2), (3,4) on duplicate key update user_id = values(user_id)",
  "Instructions": {
    "Opcode": "InsertShardedIgnore",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into music(user_id, id) values (:_user_id0, :_id0), (:_user_id1, :_id1) on duplicate key update user_id = values(user_id)",
    "Values": [
      [
        [
          1,
          3
        ]
      ],
      [
        [
          2,
          4
        ]
      ]
    ],
    "Table": "music",
    "Prefix": "insert into music(user_id, id) values ",
    "Mid": [
      "(:_user_id0, :_id0)",
      "(:_user_id1, :_id1)"
    ],
    "Suffix": " on duplicate key update user_id = values(user_id)"
  }
}

# insert unsharded with select
"insert into unsharded select id from unsharded_auto"
{
  "Original": "insert into unsharded select id from unsharded_auto",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded select id from unsharded_auto",
    "Table": "unsharded"
  }
}

# insert unsharded with select with join
"insert into unsharded select id from unsharded join unsharded_auto"
{
  "Original": "insert into unsharded select id from unsharded join unsharded_auto",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded select id from unsharded join unsharded_auto",
    "Table": "unsharded"
  }
}

# insert unsharded, invalid value for auto-inc
"insert into unsharded_auto(id, val) values(18446744073709551616, 'aa')"
"could not compute value for vindex or auto-inc column: strconv.ParseUint: parsing "18446744073709551616": value out of range"

# insert unsharded, column present
"insert into unsharded_auto(id, val) values(1, 'aa')"
{
  "Original": "insert into unsharded_auto(id, val) values(1, 'aa')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded_auto(id, val) values (:__seq0, 'aa')",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        1
      ]
    }
  }
}

# insert unsharded, column absent
"insert into unsharded_auto(val) values('aa')"
{
  "Original": "insert into unsharded_auto(val) values('aa')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded_auto(val, id) values ('aa', :__seq0)",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        null
      ]
    }
  }
}

# insert unsharded, column absent
"insert into unsharded_auto(val) values(false)"
{
  "Original": "insert into unsharded_auto(val) values(false)",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded_auto(val, id) values (false, :__seq0)",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        null
      ]
    }
  }
}

# insert unsharded, multi-val
"insert into unsharded_auto(id, val) values(1, 'aa'), (null, 'bb')"
{
  "Original": "insert into unsharded_auto(id, val) values(1, 'aa'), (null, 'bb')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded_auto(id, val) values (:__seq0, 'aa'), (:__seq1, 'bb')",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        1,
        null
      ]
    }
  }
}


# unsharded insert subquery in insert value
"insert into unsharded values((select 1 from dual), 1)"
{
  "Original": "insert into unsharded values((select 1 from dual), 1)",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded values ((select 1 from dual), 1)",
    "Table": "unsharded"
  }
}

# insert no column list
"insert into user values(1, 2, 3)"
"no column list"

# insert with mimatched column list
"insert into user(id) values (1, 2)"
"column list doesn't match values"

# insert sharded, no values
"insert into user values()"
"no column list"

# insert with one vindex
"insert into user(id) values (1)"
{
  "Original": "insert into user(id) values (1)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0)",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [1]
    },
    "Prefix": "insert into user(id, Name, Costly) values ",
    "Mid":["(:_Id0, :_Name0, :_Costly0)"]
  }
}

# insert ignore sharded
"insert ignore into user(id) values (1)"
{
  "Original": "insert ignore into user(id) values (1)",
  "Instructions": {
    "Opcode": "InsertShardedIgnore",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert ignore into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0)",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [1]
    },
    "Prefix": "insert ignore into user(id, Name, Costly) values ",
    "Mid":["(:_Id0, :_Name0, :_Costly0)"]
  }
}

# insert on duplicate key
"insert into user(id) values(1) on duplicate key update col = 2"
{
  "Original": "insert into user(id) values(1) on duplicate key update col = 2",
  "Instructions": {
    "Opcode": "InsertShardedIgnore",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0) on duplicate key update col = 2",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        1
      ]
    },
    "Prefix": "insert into user(id, Name, Costly) values ",
    "Mid": [
      "(:_Id0, :_Name0, :_Costly0)"
    ],
    "Suffix": " on duplicate key update col = 2"
  }
}

# insert with one vindex and bind var
"insert into user(id) values (:aa)"
{
  "Original": "insert into user(id) values (:aa)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0)",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        ":aa"
      ]
    },
    "Prefix": "insert into user(id, Name, Costly) values ",
    "Mid": [
      "(:_Id0, :_Name0, :_Costly0)"
    ]
  }
}

# insert with non vindex
"insert into user(nonid) values (2)"
{
  "Original": "insert into user(nonid) values (2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(nonid, id, Name, Costly) values (2, :_Id0, :_Name0, :_Costly0)",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [null]
    },
    "Prefix": "insert into user(nonid, id, Name, Costly) values ",
    "Mid": ["(2, :_Id0, :_Name0, :_Costly0)"]
  }
}

# insert with non vindex bool value
"insert into user(nonid) values (true)"
{
  "Original": "insert into user(nonid) values (true)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(nonid, id, Name, Costly) values (true, :_Id0, :_Name0, :_Costly0)",
    "Values": [[[":__seq0"]],[[null]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [null]
    },
    "Prefix": "insert into user(nonid, id, Name, Costly) values ",
    "Mid": ["(true, :_Id0, :_Name0, :_Costly0)"]
  }
}

# insert with all vindexes supplied
"insert into user(nonid, name, id) values (2, 'foo', 1)"
{
  "Original": "insert into user(nonid, name, id) values (2, 'foo', 1)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(nonid, name, id, Costly) values (2, :_Name0, :_Id0, :_Costly0)",
    "Values": [[[":__seq0"]],[["foo"]],[[null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [1]
    },
    "Prefix": "insert into user(nonid, name, id, Costly) values ",
    "Mid": ["(2, :_Name0, :_Id0, :_Costly0)"]
  }
}

# insert for non-vindex autoinc
"insert into user_extra(nonid) values (2)"
{
  "Original": "insert into user_extra(nonid) values (2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user_extra(nonid, extra_id, user_id) values (2, :__seq0, :_user_id0)",
    "Values": [[[null]]],
    "Table": "user_extra",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [null]
    },
    "Prefix": "insert into user_extra(nonid, extra_id, user_id) values ",
    "Mid": ["(2, :__seq0, :_user_id0)"]
  }
}

# insert for non-compliant names
"insert into `weird``name`(`a``b*c`, `b*c`) values(1, 2)"
{
  "Original": "insert into `weird``name`(`a``b*c`, `b*c`) values(1, 2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into `weird``name`(`a``b*c`, `b*c`) values (:_a_b_c0, 2)",
    "Values": [[[1]]],
    "Table": "weird`name",
    "Prefix": "insert into `weird``name`(`a``b*c`, `b*c`) values ",
    "Mid": [
      "(:_a_b_c0, 2)"
    ]
  }
}

# unsharded insert from union
"insert into unsharded select 1 from dual union select 1 from dual"
{
  "Original": "insert into unsharded select 1 from dual union select 1 from dual",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "insert into unsharded select 1 from dual union select 1 from dual",
    "Table": "unsharded"
  }
}

# insert for non-vindex autoinc, invalid value
"insert into user_extra(nonid, extra_id) values (2, 18446744073709551616)"
"could not compute value for vindex or auto-inc column: strconv.ParseUint: parsing "18446744073709551616": value out of range"

# insert invalid index value
"insert into music_extra(music_id, user_id) values(1, 18446744073709551616)"
"could not compute value for vindex or auto-inc column: strconv.ParseUint: parsing "18446744073709551616": value out of range"

# insert invalid index value
"insert into music_extra(music_id, user_id) values(1, id)"
"could not compute value for vindex or auto-inc column: expression is too complex 'id'"

# insert invalid table
"insert into noexist(music_id, user_id) values(1, 18446744073709551616)"
"table noexist not found"

# insert with multiple rows
"insert into user(id) values (1), (2)"
{
  "Original": "insert into user(id) values (1), (2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0), (:_Id1, :_Name1, :_Costly1)",
    "Values": [[[":__seq0",":__seq1"]],[[null,null]],[[null,null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [1,2]
    },
    "Prefix": "insert into user(id, Name, Costly) values ",
    "Mid": ["(:_Id0, :_Name0, :_Costly0)","(:_Id1, :_Name1, :_Costly1)"]
  }
}

# insert with multiple rows - multi-shard autocommit
"insert /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ into user(id) values (1), (2)"
{
  "Original": "insert /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ into user(id) values (1), (2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ into user(id, Name, Costly) values (:_Id0, :_Name0, :_Costly0), (:_Id1, :_Name1, :_Costly1)",
    "Values": [[[":__seq0",":__seq1"]],[[null,null]],[[null,null]]],
    "Table": "user",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [1,2]
    },
    "Prefix": "insert /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ into user(id, Name, Costly) values ",
    "Mid": ["(:_Id0, :_Name0, :_Costly0)","(:_Id1, :_Name1, :_Costly1)"],
    "MultiShardAutocommit": true
  }
}

# insert into a vindex not allowed
"insert into user_index(id) values(1)"
"inserting into a vindex not allowed: user_index"

# simple replace unsharded
"replace into unsharded values(1, 2)"
{
  "Original": "replace into unsharded values(1, 2)",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "replace into unsharded values (1, 2)",
    "Table": "unsharded"
  }
}

# replace unsharded with select
"replace into unsharded select id from unsharded_auto"
{
  "Original": "replace into unsharded select id from unsharded_auto",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "replace into unsharded select id from unsharded_auto",
    "Table": "unsharded"
  }
}

# replace unsharded, invalid value for auto-inc
"replace into unsharded_auto(id, val) values(18446744073709551616, 'aa')"
"could not compute value for vindex or auto-inc column: strconv.ParseUint: parsing "18446744073709551616": value out of range"

# replace unsharded, column present
"replace into unsharded_auto(id, val) values(1, 'aa')"
{
  "Original": "replace into unsharded_auto(id, val) values(1, 'aa')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "replace into unsharded_auto(id, val) values (:__seq0, 'aa')",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        1
      ]
    }
  }
}

# replace unsharded, column absent
"replace into unsharded_auto(val) values('aa')"
{
  "Original": "replace into unsharded_auto(val) values('aa')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "replace into unsharded_auto(val, id) values ('aa', :__seq0)",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        null
      ]
    }
  }
}

# replace unsharded, multi-val
"replace into unsharded_auto(id, val) values(1, 'aa'), (null, 'bb')"
{
  "Original": "replace into unsharded_auto(id, val) values(1, 'aa'), (null, 'bb')",
  "Instructions": {
    "Opcode": "InsertUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "replace into unsharded_auto(id, val) values (:__seq0, 'aa'), (:__seq1, 'bb')",
    "Table": "unsharded_auto",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [
        1,
        null
      ]
    }
  }
}

# replace invalid table
"replace into noexist(music_id, user_id) values(1, 18446744073709551616)"
"table noexist not found"

# insert a row in a multi column vindex table
"insert multicolvin (column_a, column_b, column_c, kid) VALUES (1,2,3,4)"
{
  "Original": "insert multicolvin (column_a, column_b, column_c, kid) VALUES (1,2,3,4)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into multicolvin(column_a, column_b, column_c, kid) values (:_column_a0, :_column_b0, :_column_c0, :_kid0)",
    "Values": [
      [
        [
          4
        ]
      ],
      [
        [
          1
        ]
      ],
      [
        [
          2
        ],
        [
          3
        ]
      ]
    ],
    "Table": "multicolvin",
    "Prefix": "insert into multicolvin(column_a, column_b, column_c, kid) values ",
    "Mid": [
      "(:_column_a0, :_column_b0, :_column_c0, :_kid0)"
    ]
  }
}

# insert multiple rows in a multi column vindex table
"insert multicolvin (column_a, column_b, column_c, kid) VALUES (1,2,3,4), (5,6,7,8)"
{
  "Original": "insert multicolvin (column_a, column_b, column_c, kid) VALUES (1,2,3,4), (5,6,7,8)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into multicolvin(column_a, column_b, column_c, kid) values (:_column_a0, :_column_b0, :_column_c0, :_kid0), (:_column_a1, :_column_b1, :_column_c1, :_kid1)",
    "Values": [
      [
        [
          4,
          8
        ]
      ],
      [
        [
          1,
          5
        ]
      ],
      [
        [
          2,
          6
        ],
        [
          3,
          7
        ]
      ]
    ],
    "Table": "multicolvin",
    "Prefix": "insert into multicolvin(column_a, column_b, column_c, kid) values ",
    "Mid": [
      "(:_column_a0, :_column_b0, :_column_c0, :_kid0)",
      "(:_column_a1, :_column_b1, :_column_c1, :_kid1)"
    ]
  }
}

# delete row in a multi column vindex table
"delete from multicolvin where kid=1"
{
  "Original": "delete from multicolvin where kid=1",
  "Instructions": {
    "Opcode": "DeleteEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from multicolvin where kid = 1",
    "Vindex": "kid_index",
    "Values": [
      1
    ],
    "Table": "multicolvin",
    "OwnedVindexQuery": "select column_a, column_b, column_c from multicolvin where kid = 1 for update"
  }
}

# update columns of multi column vindex
"update multicolvin set column_b = 1, column_c = 2 where kid = 1"
{
  "Original": "update multicolvin set column_b = 1, column_c = 2 where kid = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update multicolvin set column_b = 1, column_c = 2 where kid = 1",
    "Vindex": "kid_index",
    "Values": [
      1
    ],
    "ChangedVindexValues": {
      "colb_colc_map": [
        1,
        2
      ]
    },
    "Table": "multicolvin",
    "OwnedVindexQuery": "select column_a, column_b, column_c from multicolvin where kid = 1 for update"
  }
}

# update multiple vindexes, with multi column vindex
"update multicolvin set column_a = 0, column_b = 1, column_c = 2 where kid = 1"
{
  "Original": "update multicolvin set column_a = 0, column_b = 1, column_c = 2 where kid = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update multicolvin set column_a = 0, column_b = 1, column_c = 2 where kid = 1",
    "Vindex": "kid_index",
    "Values": [
      1
    ],
    "ChangedVindexValues": {
      "cola_map": [
        0
      ],
      "colb_colc_map": [
        1,
        2
      ]
    },
    "Table": "multicolvin",
    "OwnedVindexQuery": "select column_a, column_b, column_c from multicolvin where kid = 1 for update"
  }
}

# update with no primary vindex on where clause (scatter update)
"update user_extra set val = 1"
{
  "Original": "update user_extra set val = 1",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1",
    "Table": "user_extra"
  }
}

# update with target destination
"update `user[-]`.user_extra set val = 1"
{
  "Original": "update `user[-]`.user_extra set val = 1",
  "Instructions": {
    "Opcode": "UpdateByDestination",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1",
    "Table": "user_extra"
  }
}

# update with no primary vindex on where clause (scatter update)   - multi shard autocommit
"update /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */  user_extra set val = 1"
{
  "Original": "update /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */  user_extra set val = 1",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ user_extra set val = 1",
    "Table": "user_extra",
      "MultiShardAutocommit": true
  }
}

# update with non-comparison expr
"update user_extra set val = 1 where id between 1 and 2"
{
  "Original": "update user_extra set val = 1 where id between 1 and 2",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1 where id between 1 and 2",
    "Table": "user_extra"
  }
}

# update with primary id through IN clause
"update user_extra set val = 1 where user_id in (1, 2)"
{
  "Original": "update user_extra set val = 1 where user_id in (1, 2)",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1 where user_id in (1, 2)",
    "Table": "user_extra"
  }
}


# update with non-unique key
"update user_extra set val = 1 where name = 'foo'"
{
  "Original": "update user_extra set val = 1 where name = 'foo'",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1 where name = 'foo'",
    "Table": "user_extra"
  }
}

# update by lookup with IN clause
"update user_extra set val = 1 where id in (1, 2)"
{
  "Original": "update user_extra set val = 1 where id in (1, 2)",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1 where id in (1, 2)",
    "Table": "user_extra"
  }
}

# update with where clause with parens
"update user_extra set val = 1 where (name = 'foo' or id = 1)"
{
  "Original": "update user_extra set val = 1 where (name = 'foo' or id = 1)",
  "Instructions": {
    "Opcode": "UpdateScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user_extra set val = 1 where (name = 'foo' or id = 1)",
    "Table": "user_extra"
  }
}

# delete from with no where clause
"delete from user_extra"
{
  "Original": "delete from user_extra",
  "Instructions": {
    "Opcode": "DeleteScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user_extra",
    "Table": "user_extra"
  }
}

# delete with target destination
"delete from `user[-]`.user_extra"
{
  "Original": "delete from `user[-]`.user_extra",
  "Instructions": {
    "Opcode": "DeleteByDestination",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user_extra",
    "Table": "user_extra"
  }
}

# delete with non-comparison expr
"delete from user_extra where user_id between 1 and 2"
{
  "Original": "delete from user_extra where user_id between 1 and 2",
  "Instructions": {
    "Opcode": "DeleteScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user_extra where user_id between 1 and 2",
    "Table": "user_extra"
  }
}

# delete from with no index match
"delete from user_extra where name = 'jose'"
{
  "Original": "delete from user_extra where name = 'jose'",
  "Instructions": {
    "Opcode": "DeleteScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user_extra where name = 'jose'",
    "Table": "user_extra"
  }
}

# delete from with no index match - multi shard autocommit
"delete /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ from user_extra where name = 'jose'"
{
  "Original": "delete /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ from user_extra where name = 'jose'",
  "Instructions": {
    "Opcode": "DeleteScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete /*vt+ MULTI_SHARD_AUTOCOMMIT=1 */ from user_extra where name = 'jose'",
    "Table": "user_extra",
    "MultiShardAutocommit": true
  }
}

# delete from with primary id in through IN clause
"delete from user_extra where user_id in (1, 2)"
{
  "Original": "delete from user_extra where user_id in (1, 2)",
  "Instructions": {
    "Opcode": "DeleteScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "delete from user_extra where user_id in (1, 2)",
    "Table": "user_extra"
  }
}

# unsharded update where inner query references outer query
"update unsharded set col = (select id from unsharded_a where id = unsharded.col) where col = (select id from unsharded_b)"
{
  "Original": "update unsharded set col = (select id from unsharded_a where id = unsharded.col) where col = (select id from unsharded_b)",
  "Instructions": {
    "Opcode": "UpdateUnsharded",
    "Keyspace": {
      "Name":"main",
      "Sharded":false
    },
    "Query": "update unsharded set col = (select id from unsharded_a where id = unsharded.col) where col = (select id from unsharded_b)"
  }
}

# unsharded delete where inner query references outer query
"delete from unsharded where col = (select id from unsharded_a where id = unsharded.col)"
{
  "Original": "delete from unsharded where col = (select id from unsharded_a where id = unsharded.col)",
  "Instructions": {
    "Opcode": "DeleteUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "delete from unsharded where col = (select id from unsharded_a where id = unsharded.col)"
  }
}

# update vindex value to null
"update user set name = null where id = 1"
{
  "Original": "update user set name = null where id = 1",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update user set name = null where id = 1",
    "Vindex": "user_index",
    "Values": [1],
    "ChangedVindexValues": {
      "name_user_map": [null]
    },
    "Table": "user",
    "OwnedVindexQuery": "select Name, Costly from user where id = 1 for update"
  }
}
