# vindex func read all cols
"select id, keyspace_id, range_start, range_end from user_index where id = :id"
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, range_start, range_end from user_index where id = :id",
  "Instructions": {
    "OperatorType": "VindexFunc",
    "Variant": "VindexMap",
    "Columns": [
      0,
      1,
      2,
      3
    ],
    "Fields": {
      "id": "VARBINARY",
      "keyspace_id": "VARBINARY",
      "range_end": "VARBINARY",
      "range_start": "VARBINARY"
    },
    "Value": ":id",
    "Vindex": "user_index"
  }
}

# vindex func select *
"select * from user_index where id = :id"
{
  "QueryType": "SELECT",
  "Original": "select * from user_index where id = :id",
  "Instructions": {
    "OperatorType": "VindexFunc",
    "Variant": "VindexMap",
    "Columns": [
      0,
      1,
      2,
      3
    ],
    "Fields": {
      "id": "VARBINARY",
      "keyspace_id": "VARBINARY",
      "range_end": "VARBINARY",
      "range_start": "VARBINARY"
    },
    "Value": ":id",
    "Vindex": "user_index"
  }
}

# vindex func read with id repeated
"select id, keyspace_id, id from user_index where id = :id"
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, id from user_index where id = :id",
  "Instructions": {
    "OperatorType": "VindexFunc",
    "Variant": "VindexMap",
    "Columns": [
      0,
      1,
      0
    ],
    "Fields": {
      "id": "VARBINARY",
      "keyspace_id": "VARBINARY"
    },
    "Value": ":id",
    "Vindex": "user_index"
  }
}

# ambiguous vindex reference
"select id, keyspace_id, id from hash_dup where id = :id"
"ambiguous vindex reference: hash_dup"

# disambiguated vindex reference
"select id, keyspace_id, id from second_user.hash_dup where id = :id"
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, id from second_user.hash_dup where id = :id",
  "Instructions": {
    "OperatorType": "VindexFunc",
    "Variant": "VindexMap",
    "Columns": [
      0,
      1,
      0
    ],
    "Fields": {
      "id": "VARBINARY",
      "keyspace_id": "VARBINARY"
    },
    "Value": ":id",
    "Vindex": "hash_dup"
  }
}

# You can even join with a vindexFunc primitive
"select user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id"
{
  "QueryType": "SELECT",
  "Original": "select user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "_unsharded",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          1
        ],
        "Fields": {
          "keyspace_id": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# Join vindexFunc on RHS
"select user_index.keyspace_id, unsharded.id from unsharded join user_index where user_index.id = :id"
{
  "QueryType": "SELECT",
  "Original": "select user_index.keyspace_id, unsharded.id from unsharded join user_index where user_index.id = :id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1,-1",
    "TableName": "unsharded_",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded",
        "Table": "unsharded"
      },
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          1
        ],
        "Fields": {
          "keyspace_id": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      }
    ]
  }
}

# Join with vindexFunc on a column of it, already present in select list
"select user_index.id, user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id and unsharded.id = user_index.id"
{
  "QueryType": "SELECT",
  "Original": "select user_index.id, user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id and unsharded.id = user_index.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "TableName": "_unsharded",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          0,
          1
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.id = :user_index_id",
        "Table": "unsharded"
      }
    ]
  }
}

# Join with vindexFunc on a column of it, not present in select list
"select user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id and unsharded.id = user_index.id"
{
  "QueryType": "SELECT",
  "Original": "select user_index.keyspace_id, unsharded.id from user_index join unsharded where user_index.id = :id and unsharded.id = user_index.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "_unsharded",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          1,
          0
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.id = :user_index_id",
        "Table": "unsharded"
      }
    ]
  }
}

# Join with aliased table name
"select ui.keyspace_id, unsharded.id from user_index ui join unsharded where ui.id = :id and unsharded.id = ui.id"
{
  "QueryType": "SELECT",
  "Original": "select ui.keyspace_id, unsharded.id from user_index ui join unsharded where ui.id = :id and unsharded.id = ui.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "_unsharded",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          1,
          0
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.id = :ui_id",
        "Table": "unsharded"
      }
    ]
  }
}

"select none from user_index where id = :id"
"symbol none not found in table or subquery"

"select * from samecolvin where col = :col"
{
  "QueryType": "SELECT",
  "Original": "select * from samecolvin where col = :col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from samecolvin where 1 != 1",
    "Query": "select col from samecolvin where col = :col",
    "Table": "samecolvin",
    "Values": [
      ":col"
    ],
    "Vindex": "vindex1"
  }
}
