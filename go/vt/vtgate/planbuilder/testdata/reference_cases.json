[
  {
    "comment": "select from unqualified ambiguous reference routes to reference source",
    "query": "select * from ambiguous_ref_with_source",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select * from ambiguous_ref_with_source where 1 != 1",
        "Query": "select * from ambiguous_ref_with_source",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "join with unqualified ambiguous reference table routes to optimal keyspace",
    "query": "select user.col from user join ambiguous_ref_with_source",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ambiguous_ref_with_source",
        "Table": "`user`, ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "ambiguous unqualified reference table self-join routes to reference source",
    "query": "select r1.col from ambiguous_ref_with_source r1 join ambiguous_ref_with_source",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select r1.col from ambiguous_ref_with_source r1 join ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select r1.col from ambiguous_ref_with_source as r1 join ambiguous_ref_with_source where 1 != 1",
        "Query": "select r1.col from ambiguous_ref_with_source as r1 join ambiguous_ref_with_source",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "ambiguous unqualified reference table can merge with other opcodes left to right.",
    "query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source, `user` where 1 != 1",
        "Query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source, `user`",
        "Table": "`user`, ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "ambiguous unqualified reference table can merge with other opcodes left to right and vindex value is in the plan",
    "query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join (select aa from user where user.id=1) user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join (select aa from user where user.id=1) user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ambiguous_ref_with_source.col from (select aa from `user` where 1 != 1) as `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select ambiguous_ref_with_source.col from (select aa from `user` where `user`.id = 1) as `user`, ambiguous_ref_with_source",
        "Table": "`user`, ambiguous_ref_with_source",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "qualified join to reference table routes to optimal keyspace",
    "query": "select user.col from user join main.ambiguous_ref_with_source",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join main.ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ambiguous_ref_with_source",
        "Table": "`user`, ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "insert into ambiguous unqualified reference table routes to source",
    "query": "insert into ambiguous_ref_with_source(col) values(1)",
    "plan": {
      "QueryType": "INSERT",
      "Original": "insert into ambiguous_ref_with_source(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "insert into ambiguous_ref_with_source(col) values (1)",
        "TableName": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "Reference tables using left join with a derived table having a limit clause",
    "query": "SELECT u.id FROM ( SELECT a.id, a.u_id FROM user.ref_with_source AS a WHERE a.id IN (3) ORDER BY a.d_at LIMIT 1) as u LEFT JOIN user.ref_with_source AS u0 ON u.u_id = u0.u_uid ORDER BY u.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT u.id FROM ( SELECT a.id, a.u_id FROM user.ref_with_source AS a WHERE a.id IN (3) ORDER BY a.d_at LIMIT 1) as u LEFT JOIN user.ref_with_source AS u0 ON u.u_id = u0.u_uid ORDER BY u.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "u_u_id": 1
        },
        "TableName": "ref_with_source_ref_with_source",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Reference",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.id, u.u_id from (select a.id, a.u_id from ref_with_source as a where 1 != 1) as u where 1 != 1",
            "Query": "select u.id, u.u_id from (select a.id, a.u_id from ref_with_source as a where a.id in (3) order by a.d_at asc limit 1) as u order by u.id asc",
            "Table": "ref_with_source"
          },
          {
            "OperatorType": "Route",
            "Variant": "Reference",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from ref_with_source as u0 where 1 != 1",
            "Query": "select 1 from ref_with_source as u0 where u0.u_uid = :u_u_id",
            "Table": "ref_with_source"
          }
        ]
      },
      "TablesUsed": [
        "user.ref_with_source"
      ]
    }
  },
  {
    "comment": "insert into qualified ambiguous reference table routes to source",
    "query": "insert into user.ambiguous_ref_with_source(col) values(1)",
    "plan": {
      "QueryType": "INSERT",
      "Original": "insert into user.ambiguous_ref_with_source(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "insert into ambiguous_ref_with_source(col) values (1)",
        "TableName": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "update unqualified ambiguous reference table routes to source",
    "query": "update ambiguous_ref_with_source set col = 1",
    "plan": {
      "QueryType": "UPDATE",
      "Original": "update ambiguous_ref_with_source set col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "update ambiguous_ref_with_source set col = 1",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "update qualified ambiguous reference table route to source",
    "query": "update user.ambiguous_ref_with_source set col = 1",
    "plan": {
      "QueryType": "UPDATE",
      "Original": "update user.ambiguous_ref_with_source set col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "update ambiguous_ref_with_source set col = 1",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "delete from unqualified ambiguous reference table routes to source",
    "query": "delete from ambiguous_ref_with_source where col = 1",
    "plan": {
      "QueryType": "DELETE",
      "Original": "delete from ambiguous_ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "delete from ambiguous_ref_with_source where col = 1",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "delete from qualified ambiguous reference table route to source",
    "query": "delete from user.ambiguous_ref_with_source where col = 1",
    "plan": {
      "QueryType": "DELETE",
      "Original": "delete from user.ambiguous_ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "delete from ambiguous_ref_with_source where col = 1",
        "Table": "ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    }
  },
  {
    "comment": "join with unqualified unambiguous ref with source routes to requested table",
    "query": "select user.col from user join ref_with_source",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ref_with_source",
        "Table": "`user`, ref_with_source"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "join with unqualified reference optimize routes when source & reference have different names",
    "query": "select user.col from user join source_of_ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join source_of_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref_with_source as source_of_ref where 1 != 1",
        "Query": "select `user`.col from `user`, ref_with_source as source_of_ref",
        "Table": "`user`, ref_with_source"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    }
  },
  {
    "comment": "join with unqualified reference respects routing rules",
    "query": "select user.col from user join rerouted_ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join rerouted_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref as rerouted_ref where 1 != 1",
        "Query": "select `user`.col from `user`, ref as rerouted_ref",
        "Table": "`user`, ref"
      },
      "TablesUsed": [
        "user.ref",
        "user.user"
      ]
    }
  },
  {
    "comment": "join with reference to unqualified source routes to optimal keyspace",
    "query": "select user.col from user join global_ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join global_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, global_ref where 1 != 1",
        "Query": "select `user`.col from `user`, global_ref",
        "Table": "`user`, global_ref"
      },
      "TablesUsed": [
        "user.global_ref",
        "user.user"
      ]
    }
  },
  {
    "comment": "insert into qualified reference with unqualified source routes to source",
    "query": "insert into user.global_ref(col) values(1)",
    "plan": {
      "QueryType": "INSERT",
      "Original": "insert into user.global_ref(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "TargetTabletType": "PRIMARY",
        "Query": "insert into global_ref(col) values (1)",
        "TableName": "global_ref"
      },
      "TablesUsed": [
        "main.global_ref"
      ]
    }
  }
]
