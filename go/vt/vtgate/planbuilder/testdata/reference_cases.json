[
  {
    "comment": "select from unqualified ambiguous reference routes to reference source",
    "query": "select * from ambiguous_ref_with_source",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "select * from ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select * from ambiguous_ref_with_source where 1 != 1",
        "Query": "select * from ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "join with unqualified ambiguous reference table routes to optimal keyspace",
    "query": "select user.col from user join ambiguous_ref_with_source",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "ambiguous unqualified reference table self-join routes to reference source",
    "query": "select r1.col from ambiguous_ref_with_source r1 join ambiguous_ref_with_source",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "select r1.col from ambiguous_ref_with_source r1 join ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select r1.col from ambiguous_ref_with_source as r1 join ambiguous_ref_with_source where 1 != 1",
        "Query": "select r1.col from ambiguous_ref_with_source as r1 join ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "ambiguous unqualified reference table can merge with other opcodes left to right.",
    "query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join user",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source, `user` where 1 != 1",
        "Query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source, `user`"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "ambiguous unqualified reference table can merge with other opcodes left to right and vindex value is in the plan",
    "query": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join (select aa from user where user.id=1) user",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "select ambiguous_ref_with_source.col from ambiguous_ref_with_source join (select aa from user where user.id=1) user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ambiguous_ref_with_source.col from (select aa from `user` where 1 != 1) as `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select ambiguous_ref_with_source.col from (select aa from `user` where `user`.id = 1) as `user`, ambiguous_ref_with_source",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "qualified join to reference table routes to optimal keyspace",
    "query": "select user.col from user join main.ambiguous_ref_with_source",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join main.ambiguous_ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ambiguous_ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ambiguous_ref_with_source"
      },
      "TablesUsed": [
        "user.ambiguous_ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert into ambiguous unqualified reference table routes to source",
    "query": "insert into ambiguous_ref_with_source(col) values(1)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into ambiguous_ref_with_source(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into ambiguous_ref_with_source(col) values (1)"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "Reference tables using left join with a derived table having a limit clause",
    "query": "SELECT u.id FROM ( SELECT a.id, a.u_id FROM user.ref_with_source AS a WHERE a.id IN (3) ORDER BY a.d_at LIMIT 1) as u LEFT JOIN user.ref_with_source AS u0 ON u.u_id = u0.u_uid ORDER BY u.id",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "SELECT u.id FROM ( SELECT a.id, a.u_id FROM user.ref_with_source AS a WHERE a.id IN (3) ORDER BY a.d_at LIMIT 1) as u LEFT JOIN user.ref_with_source AS u0 ON u.u_id = u0.u_uid ORDER BY u.id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id from (select a.id, a.u_id from ref_with_source as a where 1 != 1) as u left join ref_with_source as u0 on u.u_id = u0.u_uid where 1 != 1",
        "Query": "select u.id from (select a.id, a.u_id from ref_with_source as a where a.id in (3) order by a.d_at asc limit 1) as u left join ref_with_source as u0 on u.u_id = u0.u_uid order by u.id asc"
      },
      "TablesUsed": [
        "user.ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert into qualified ambiguous reference table routes to source",
    "query": "insert into user.ambiguous_ref_with_source(col) values(1)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into user.ambiguous_ref_with_source(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into ambiguous_ref_with_source(col) values (1)"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update unqualified ambiguous reference table routes to source",
    "query": "update ambiguous_ref_with_source set col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update ambiguous_ref_with_source set col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update ambiguous_ref_with_source set col = 1"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update qualified ambiguous reference table route to source",
    "query": "update user.ambiguous_ref_with_source set col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update user.ambiguous_ref_with_source set col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update ambiguous_ref_with_source set col = 1"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from unqualified ambiguous reference table routes to source",
    "query": "delete from ambiguous_ref_with_source where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from ambiguous_ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from ambiguous_ref_with_source where col = 1"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from qualified ambiguous reference table route to source",
    "query": "delete from user.ambiguous_ref_with_source where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from user.ambiguous_ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from ambiguous_ref_with_source where col = 1"
      },
      "TablesUsed": [
        "main.ambiguous_ref_with_source"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "join with unqualified unambiguous ref with source routes to requested table",
    "query": "select user.col from user join ref_with_source",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join ref_with_source",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref_with_source where 1 != 1",
        "Query": "select `user`.col from `user`, ref_with_source"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "join with unqualified reference optimize routes when source & reference have different names",
    "query": "select user.col from user join source_of_ref",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join source_of_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref_with_source as source_of_ref where 1 != 1",
        "Query": "select `user`.col from `user`, ref_with_source as source_of_ref"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "join with unqualified reference respects routing rules",
    "query": "select user.col from user join rerouted_ref",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join rerouted_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref as rerouted_ref where 1 != 1",
        "Query": "select `user`.col from `user`, ref as rerouted_ref"
      },
      "TablesUsed": [
        "user.ref",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "join with reference to unqualified source routes to optimal keyspace",
    "query": "select user.col from user join global_ref",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select user.col from user join global_ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, global_ref where 1 != 1",
        "Query": "select `user`.col from `user`, global_ref"
      },
      "TablesUsed": [
        "user.global_ref",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert into qualified reference with unqualified source routes to source",
    "query": "insert into user.global_ref(col) values(1)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into user.global_ref(col) values(1)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into global_ref(col) values (1)"
      },
      "TablesUsed": [
        "main.global_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from reference table with another name - query send to source table",
    "query": "delete from user.ref_with_source where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from user.ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from source_of_ref where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update from reference table with another name - query send to source table",
    "query": "update user.ref_with_source set x = 4 where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update user.ref_with_source set x = 4 where col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update source_of_ref set x = 4 where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert from reference table with another name - query send to source table",
    "query": "insert into user.ref_with_source(x) values(4)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into user.ref_with_source(x) values(4)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into source_of_ref(x) values (4)"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from reference table - query send to source table",
    "query": "delete from source_of_ref where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from source_of_ref where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from source_of_ref where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update from reference table - query send to source table",
    "query": "update source_of_ref set x = 4 where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update source_of_ref set x = 4 where col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update source_of_ref set x = 4 where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert from reference table - query send to source table",
    "query": "insert into source_of_ref(x) values(4)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into source_of_ref(x) values(4)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into source_of_ref(x) values (4)"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from reference table qualified with unsharded - query send to source table",
    "query": "delete from main.source_of_ref where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from main.source_of_ref where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from source_of_ref where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update from reference table qualified with unsharded - query send to source table",
    "query": "update main.source_of_ref set x = 4 where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update main.source_of_ref set x = 4 where col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update source_of_ref set x = 4 where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert from reference table qualified with unsharded - query send to source table",
    "query": "insert into main.source_of_ref(x) values(4)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into main.source_of_ref(x) values(4)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into source_of_ref(x) values (4)"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "delete from reference table with another name - query send to source table",
    "query": "delete from user.ref_with_source where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "DELETE",
      "Original": "delete from user.ref_with_source where col = 1",
      "Instructions": {
        "OperatorType": "Delete",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "delete from source_of_ref where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update from reference table with another name - query send to source table",
    "query": "update user.ref_with_source set x = 4 where col = 1",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "UPDATE",
      "Original": "update user.ref_with_source set x = 4 where col = 1",
      "Instructions": {
        "OperatorType": "Update",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "update source_of_ref set x = 4 where col = 1"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "insert from reference table with another name - query send to source table",
    "query": "insert into user.ref_with_source(x) values(4)",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "INSERT",
      "Original": "insert into user.ref_with_source(x) values(4)",
      "Instructions": {
        "OperatorType": "Insert",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "Query": "insert into source_of_ref(x) values (4)"
      },
      "TablesUsed": [
        "main.source_of_ref"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "select with join to reference table in sharded keyspace: should route shard-scoped",
    "query": "select * from user.ref_with_source ref, `user`.`user` u where ref.id = u.ref_id and u.id = 2",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "select * from user.ref_with_source ref, `user`.`user` u where ref.id = u.ref_id and u.id = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from ref_with_source as ref, `user` as u where 1 != 1",
        "Query": "select * from ref_with_source as ref, `user` as u where u.id = 2 and ref.id = u.ref_id",
        "Values": [
          "2"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "select with join to reference table in unsharded keyspace: should route shard-scoped",
    "query": "select * from source_of_ref ref, `user`.`user` u where ref.id = u.ref_id and u.id = 2",
    "plan": {
      "Type": "Passthrough",
      "QueryType": "SELECT",
      "Original": "select * from source_of_ref ref, `user`.`user` u where ref.id = u.ref_id and u.id = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from ref_with_source as ref, `user` as u where 1 != 1",
        "Query": "select * from ref_with_source as ref, `user` as u where u.id = 2 and ref.id = u.ref_id",
        "Values": [
          "2"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.ref_with_source",
        "user.user"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "two sharded and two unsharded reference table join - all should be merged into one route",
    "query": "select 1 from user u join user_extra ue on u.id = ue.user_id join main.source_of_ref sr on sr.foo = ue.foo join main.rerouted_ref rr on rr.bar = sr.bar",
    "plan": {
      "Type": "Scatter",
      "QueryType": "SELECT",
      "Original": "select 1 from user u join user_extra ue on u.id = ue.user_id join main.source_of_ref sr on sr.foo = ue.foo join main.rerouted_ref rr on rr.bar = sr.bar",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` as u, user_extra as ue, ref_with_source as sr, ref as rr where 1 != 1",
        "Query": "select 1 from `user` as u, user_extra as ue, ref_with_source as sr, ref as rr where rr.bar = sr.bar and u.id = ue.user_id and sr.foo = ue.foo"
      },
      "TablesUsed": [
        "user.ref",
        "user.ref_with_source",
        "user.user",
        "user.user_extra"
      ]
    },
    "skip_e2e": true
  },
  {
    "comment": "update reference table with join on sharded table",
    "query": "update main.source_of_ref as sr join main.rerouted_ref as rr on sr.id = rr.id inner join user.music as m on sr.col = m.col set sr.tt = 5 where m.user_id = 1",
    "plan": {
      "Type": "Complex",
      "QueryType": "UPDATE",
      "Original": "update main.source_of_ref as sr join main.rerouted_ref as rr on sr.id = rr.id inner join user.music as m on sr.col = m.col set sr.tt = 5 where m.user_id = 1",
      "Instructions": {
        "OperatorType": "DMLWithInput",
        "Offset": [
          "0:[0]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "m_col": 0
            },
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select m.col from music as m where 1 != 1",
                "Query": "select m.col from music as m where m.user_id = 1 lock in share mode",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select sr.id from source_of_ref as sr, rerouted_ref as rr where 1 != 1",
                "Query": "select sr.id from source_of_ref as sr, rerouted_ref as rr where sr.col = :m_col and sr.id = rr.id lock in share mode"
              }
            ]
          },
          {
            "OperatorType": "Update",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "Query": "update source_of_ref as sr set sr.tt = 5 where sr.id in ::dml_vals"
          }
        ]
      },
      "TablesUsed": [
        "main.rerouted_ref",
        "main.source_of_ref",
        "user.music"
      ]
    }
  },
  {
    "comment": "delete from reference table with join on sharded table",
    "query": "delete sr from main.source_of_ref as sr join main.rerouted_ref as rr on sr.id = rr.id inner join user.music as m on sr.col = m.col where m.user_id = 1",
    "plan": {
      "Type": "Complex",
      "QueryType": "DELETE",
      "Original": "delete sr from main.source_of_ref as sr join main.rerouted_ref as rr on sr.id = rr.id inner join user.music as m on sr.col = m.col where m.user_id = 1",
      "Instructions": {
        "OperatorType": "DMLWithInput",
        "Offset": [
          "0:[0]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "m_col": 0
            },
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select m.col from music as m where 1 != 1",
                "Query": "select m.col from music as m where m.user_id = 1",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select sr.id from source_of_ref as sr, rerouted_ref as rr where 1 != 1",
                "Query": "select sr.id from source_of_ref as sr, rerouted_ref as rr where sr.col = :m_col and sr.id = rr.id"
              }
            ]
          },
          {
            "OperatorType": "Delete",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "Query": "delete from source_of_ref as sr where sr.id in ::dml_vals"
          }
        ]
      },
      "TablesUsed": [
        "main.rerouted_ref",
        "main.source_of_ref",
        "user.music"
      ]
    }
  }
]
