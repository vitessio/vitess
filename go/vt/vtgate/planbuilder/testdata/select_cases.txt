# No column referenced
"select 1 from user"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select 1 from `user` where 1 != 1",
    "Query": "select 1 from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# '*' expression for simple route
"select user.* from user"
{
  "QueryType": "SELECT",
  "Original": "select user.* from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}

# unqualified '*' expression for simple route
"select * from user"
{
  "QueryType": "SELECT",
  "Original": "select * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user`",
    "Table": "`user`"
  }
}

# select with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from `user`",
    "Table": "`user`"
  }
}

# select aggregation with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from `user`",
        "Table": "`user`"
      }
    ]
  }
}

# select limit with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from `user` limit :__upper_limit",
        "Table": "`user`"
      }
    ]
  }
}

# select with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from `user`",
    "ScatterErrorsAsWarnings": true,
    "Table": "`user`"
  }
}

# select aggregation with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}

# select aggregation with partial scatter directive - added comments to try to confuse the hint extraction
"/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}

# select limit with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from `user` limit :__upper_limit",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}

# qualified '*' expression for simple route
"select user.* from user"
{
  "QueryType": "SELECT",
  "Original": "select user.* from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}

# fully qualified '*' expression for simple route
"select user.user.* from user.user"
{
  "QueryType": "SELECT",
  "Original": "select user.user.* from user.user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}

# select * from authoritative table
"select * from authoritative"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_id, col1, col2 from authoritative where 1 != 1",
    "Query": "select user_id, col1, col2 from authoritative",
    "Table": "authoritative"
  }
}

# select * from join of authoritative tables
"select * from authoritative a join authoritative b on a.user_id=b.user_id"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative a join authoritative b on a.user_id=b.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id where 1 != 1",
    "Query": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id",
    "Table": "authoritative"
  }
}

# test table lookup failure for authoritative code path
"select a.* from authoritative"
"table a not found"

# select * from qualified authoritative table
"select a.* from authoritative a"
{
  "QueryType": "SELECT",
  "Original": "select a.* from authoritative a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a.user_id, a.col1, a.col2 from authoritative as a where 1 != 1",
    "Query": "select a.user_id, a.col1, a.col2 from authoritative as a",
    "Table": "authoritative"
  }
}

# select * from intermixing of authoritative table with non-authoritative results in no expansion
"select * from authoritative join user on authoritative.user_id=user.id"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative join user on authoritative.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from authoritative join `user` on authoritative.user_id = `user`.id where 1 != 1",
    "Query": "select * from authoritative join `user` on authoritative.user_id = `user`.id",
    "Table": "authoritative"
  }
}

# select authoritative.* with intermixing still expands
"select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id"
{
  "QueryType": "SELECT",
  "Original": "select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.id, a.user_id, a.col1, a.col2, `user`.col1 from authoritative as a join `user` on a.user_id = `user`.id where 1 != 1",
    "Query": "select `user`.id, a.user_id, a.col1, a.col2, `user`.col1 from authoritative as a join `user` on a.user_id = `user`.id",
    "Table": "authoritative"
  }
}

# auto-resolve anonymous columns for simple route
"select col from user join user_extra on user.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select col from `user` join user_extra on `user`.id = user_extra.user_id",
    "Table": "`user`"
  }
}

# Cannot auto-resolve for cross-shard joins
"select col from user join user_extra"
"symbol col not found"

# Auto-resolve should work if unique vindex columns are referenced
"select id, user_id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select id, user_id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id from user_extra where 1 != 1",
        "Query": "select user_id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}

# database calls should be substituted
"select database() from dual"
{
  "QueryType": "SELECT",
  "Original": "select database() from dual",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "database()"
    ],
    "Expressions": [
      ":__vtdbname"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}

# nextval for simple route
"select next value from user"
"NEXT used on a non-sequence table"

# last_insert_id for unsharded route
"select last_insert_id() as x from main.unsharded"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id() as x from main.unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select :__lastInsertId as x from unsharded where 1 != 1",
    "Query": "select :__lastInsertId as x from unsharded",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# select from dual on unqualified keyspace
"select @@session.auto_increment_increment from dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}
Gen4 plan same as above

# select from pinned table
"select * from pin_test"
{
  "QueryType": "SELECT",
  "Original": "select * from pin_test",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from pin_test where 1 != 1",
    "Query": "select * from pin_test",
    "Table": "pin_test",
    "Values": [
      "\ufffd"
    ],
    "Vindex": "binary"
  }
}

# select from dual on sharded keyspace
"select @@session.auto_increment_increment from user.dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from user.dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}
Gen4 plan same as above

# RHS route referenced
"select user_extra.id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` where 1 != 1",
        "Query": "select 1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Both routes referenced
"select user.col, user_extra.id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Expression with single-route reference
"select user.col, user_extra.id + user_extra.col from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id + user_extra.col from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id + user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.id + user_extra.col from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Jumbled references
"select user.col, user_extra.id, user.col2 from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id, user.col2 from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1,-2",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col, `user`.col2 from `user` where 1 != 1",
        "Query": "select `user`.col, `user`.col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Comments
"select /* comment */ user.col from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select /* comment */ user.col from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select /* comment */ `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select /* comment */ 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}

# for update
"select user.col from user join user_extra for update"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra for update",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` for update",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra for update",
        "Table": "user_extra"
      }
    ]
  }
}

# Field query should work for joins select bind vars
"select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm"
{
  "QueryType": "SELECT",
  "Original": "select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select (select :user_id + outm.m + unsharded.m from unsharded where 1 != 1) from unsharded as outm where 1 != 1",
        "Query": "select (select :user_id + outm.m + unsharded.m from unsharded) from unsharded as outm",
        "Table": "unsharded"
      }
    ]
  }
}

# Case preservation
"select user.Col, user_extra.Id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.Col, user_extra.Id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.Col from `user` where 1 != 1",
        "Query": "select `user`.Col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.Id from user_extra where 1 != 1",
        "Query": "select user_extra.Id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# syntax error
"the quick brown fox"
"syntax error at position 4 near 'the'"
Gen4 plan same as above

# Hex number is not treated as a simple value
"select * from user where id = 0x04"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 0x04",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 0x04",
    "Table": "`user`"
  }
}

# sharded limit offset
"select user_id from music order by user_id limit 10, 20"
{
  "QueryType": "SELECT",
  "Original": "select user_id from music order by user_id limit 10, 20",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 20,
    "Offset": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id, weight_string(user_id) from music where 1 != 1",
        "OrderBy": "0 ASC",
        "Query": "select user_id, weight_string(user_id) from music order by user_id asc limit :__upper_limit",
        "ResultColumns": 1,
        "Table": "music"
      }
    ]
  }
}
Gen4 plan same as above

# Sharding Key Condition in Parenthesis
"select * from user where name ='abc' AND (id = 4) limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where name ='abc' AND (id = 4) limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where `name` = 'abc' and id = 4 limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Multiple parenthesized expressions
"select * from user where (id = 4) AND (name ='abc') limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 4) AND (name ='abc') limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 4 and `name` = 'abc' limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Multiple parenthesized expressions
"select * from user where (id = 4 and name ='abc') limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 4 and name ='abc') limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 4 and `name` = 'abc' limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column Aliasing with Table.Column
"select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2"
{
  "QueryType": "SELECT",
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user0_.col as col0_ from `user` as user0_ where 1 != 1",
    "Query": "select user0_.col as col0_ from `user` as user0_ where id = 1 order by user0_.col desc limit 2",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column Aliasing with Column
"select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3"
{
  "QueryType": "SELECT",
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user0_.col as col0_ from `user` as user0_ where 1 != 1",
    "Query": "select user0_.col as col0_ from `user` as user0_ where id = 1 order by col0_ desc limit 3",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Booleans and parenthesis
"select * from user where (id = 1) AND name = true limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 1) AND name = true limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 1 and `name` = true limit 5",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column as boolean-ish
"select * from user where (id = 1) AND name limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 1) AND name limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 1 and `name` limit 5",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# PK as fake boolean, and column as boolean-ish
"select * from user where (id = 5) AND name = true limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 5) AND name = true limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 and `name` = true limit 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# top level subquery in select
"select a, (select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, (select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1",
        "Query": "select a, :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# sub-expression subquery in select
"select a, 1+(select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, 1+(select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1",
        "Query": "select a, 1 + :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# select * from subquery expands specific columns
"select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t"
{
  "QueryType": "SELECT",
  "Original": "select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t",
  "Instructions": {
    "OperatorType": "Subquery",
    "Columns": [
      0,
      1
    ],
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id as id1 from `user` where 1 != 1",
            "Query": "select `user`.id as id1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.id as id2 from user_extra where 1 != 1",
            "Query": "select user_extra.id as id2 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# duplicate columns not allowed in subquery
"select * from (select user.id, user_extra.id from user join user_extra) as t"
"duplicate column names in subquery: id"

# non-existent symbol in cross-shard subquery
"select t.col from (select user.id from user join user_extra) as t"
"symbol t.col not found in table or subquery"

# union of information_schema
"select * from information_schema.a union select * from information_schema.b"
{
  "QueryType": "SELECT",
  "Original": "select * from information_schema.a union select * from information_schema.b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from information_schema.a where 1 != 1 union select * from information_schema.b where 1 != 1",
    "Query": "select * from information_schema.a union select * from information_schema.b"
  }
}
Gen4 plan same as above

# union with the same target shard
"select * from music where user_id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select * from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from music where 1 != 1 union select * from `user` where 1 != 1",
    "Query": "select * from music where user_id = 1 union select * from `user` where id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# union with the same target shard last_insert_id
"select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, :__lastInsertId as `last_insert_id()` from music where 1 != 1 union select * from `user` where 1 != 1",
    "Query": "select *, :__lastInsertId as `last_insert_id()` from music where user_id = 1 union select * from `user` where id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

"select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a"
{
  "QueryType": "SELECT",
  "Original": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from (select col1, col2 from unsharded where 1 != 1 union select col1, col2 from unsharded where 1 != 1) as a where 1 != 1",
    "Query": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) as a",
    "Table": "unsharded"
  }
}

"select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)"
{
  "QueryType": "SELECT",
  "Original": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id, `name` from unsharded where 1 != 1",
    "Query": "select id, `name` from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
    "Table": "unsharded"
  }
}

"(select id from unsharded) union (select id from unsharded_auto) order by id limit 5"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded) union (select id from unsharded_auto) order by id limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded_auto where 1 != 1)",
    "Query": "(select id from unsharded) union (select id from unsharded_auto) order by id asc limit 5",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

"select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)"
{
  "QueryType": "SELECT",
  "Original": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1 union select id from unsharded_auto where 1 != 1",
    "Query": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

"(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "(select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1) union (select id from unsharded_auto where 1 != 1 union select `name` from unsharded where 1 != 1)",
    "Query": "(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select `name` from unsharded)",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

"(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded where 1 != 1)",
    "Query": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# routing rules: ensure directives are not lost
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded as route2 where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from unsharded as route2",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# testing SingleRow Projection
"select 42"
{
  "QueryType": "SELECT",
  "Original": "select 42",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "42"
    ],
    "Expressions": [
      "INT64(42)"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}

# don't filter on the vtgate
"select 42 from dual where false"
{
  "QueryType": "SELECT",
  "Original": "select 42 from dual where false",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select 42 from dual where 1 != 1",
    "Query": "select 42 from dual where false",
    "Table": "dual"
  }
}

# testing SingleRow Projection with arithmetics
"select 42+2"
{
  "QueryType": "SELECT",
  "Original": "select 42+2",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "42 + 2"
    ],
    "Expressions": [
      "INT64(42) + INT64(2)"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}

# sql_calc_found_rows without limit
"select sql_calc_found_rows * from music where user_id = 1"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music where user_id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from music where 1 != 1",
    "Query": "select * from music where user_id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# sql_calc_found_rows with limit
"select sql_calc_found_rows * from music limit 100"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music limit 100",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 100,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from music where 1 != 1",
            "Query": "select * from music limit :__upper_limit",
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from music where 1 != 1",
            "Query": "select count(*) from music",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# sql_calc_found_rows with SelectEqualUnique plans
"select sql_calc_found_rows * from music where user_id = 1 limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music where user_id = 1 limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from music where 1 != 1",
        "Query": "select * from music where user_id = 1 limit 2",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from music where 1 != 1",
        "Query": "select count(*) from music where user_id = 1",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# sql_calc_found_rows with group by and having
"select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_id, count(id), weight_string(user_id) from music where 1 != 1 group by user_id",
            "OrderBy": "0 ASC",
            "Query": "select user_id, count(id), weight_string(user_id) from music group by user_id having count(user_id) = 1 order by user_id asc limit :__upper_limit",
            "ResultColumns": 2,
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select user_id, count(id) from music where 1 != 1 group by user_id) as t where 1 != 1",
            "Query": "select count(*) from (select user_id, count(id) from music group by user_id having count(user_id) = 1) as t",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# sql_calc_found_rows in sub queries
"select * from music where user_id IN (select sql_calc_found_rows * from music limit 10)"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS'"

# sql_calc_found_rows in derived table
"select sql_calc_found_rows * from (select sql_calc_found_rows * from music limit 10) t limit 1"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS'"

# select from unsharded keyspace into dumpfile
"select * from main.unsharded into Dumpfile 'x.txt'"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into Dumpfile 'x.txt'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into dumpfile 'x.txt'",
    "Table": "unsharded"
  }
}

# select from unsharded keyspace into outfile
"select * from main.unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'",
    "Table": "unsharded"
  }
}

# select from unsharded keyspace into outfile s3
"select * from main.unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n' manifest on overwrite off"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n' manifest on overwrite off",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n' manifest on overwrite off",
    "Table": "unsharded"
  }
}

# Union after into outfile is incorrect
"select id from user into outfile 'out_file_name' union all select id from music"
"Incorrect usage/placement of 'INTO'"
Gen4 plan same as above

# Into outfile s3 in sub-query is incorrect
"select id from (select id from user into outfile s3 'inner_outfile') as t2"
"Incorrect usage/placement of 'INTO'"

# Distinct with cross shard query
"select distinct user.a from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select distinct user.a from user join user_extra",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.a from `user` where 1 != 1",
            "Query": "select `user`.a from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# Select from information schema query with two tables that route should be merged
"SELECT DELETE_RULE, UPDATE_RULE FROM  INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ON KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME WHERE KCU.TABLE_SCHEMA = 'test' AND KCU.TABLE_NAME = 'data_type_table' AND KCU.COLUMN_NAME = 'id' AND KCU.REFERENCED_TABLE_SCHEMA = 'test' AND KCU.CONSTRAINT_NAME = 'data_type_table_id_fkey' ORDER BY KCU.CONSTRAINT_NAME, KCU.COLUMN_NAME"
{
  "QueryType": "SELECT",
  "Original": "SELECT DELETE_RULE, UPDATE_RULE FROM  INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ON KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME WHERE KCU.TABLE_SCHEMA = 'test' AND KCU.TABLE_NAME = 'data_type_table' AND KCU.COLUMN_NAME = 'id' AND KCU.REFERENCED_TABLE_SCHEMA = 'test' AND KCU.CONSTRAINT_NAME = 'data_type_table_id_fkey' ORDER BY KCU.CONSTRAINT_NAME, KCU.COLUMN_NAME",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select DELETE_RULE, UPDATE_RULE from INFORMATION_SCHEMA.KEY_COLUMN_USAGE as KCU join INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS as RC on KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME where 1 != 1",
    "Query": "select DELETE_RULE, UPDATE_RULE from INFORMATION_SCHEMA.KEY_COLUMN_USAGE as KCU join INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS as RC on KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME where KCU.TABLE_SCHEMA = :__vtschemaname and KCU.TABLE_NAME = :__vttablename and KCU.COLUMN_NAME = 'id' and KCU.REFERENCED_TABLE_SCHEMA = 'test' and KCU.CONSTRAINT_NAME = 'data_type_table_id_fkey' order by KCU.CONSTRAINT_NAME asc, KCU.COLUMN_NAME asc",
    "SysTableTableName": "[VARBINARY(\"data_type_table\")]",
    "SysTableTableSchema": "[VARBINARY(\"test\")]"
  }
}

# Select from information schema query with three tables such that route for 2 should be merged but not for the last.
"SELECT KCU.DELETE_RULE, S.UPDATE_RULE FROM  INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ON KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME, INFORMATION_SCHEMA.K AS S WHERE KCU.TABLE_SCHEMA = 'test' AND KCU.TABLE_NAME = 'data_type_table' AND KCU.TABLE_NAME = 'data_type_table' AND S.TABLE_SCHEMA = 'test' AND S.TABLE_NAME = 'sc' ORDER BY KCU.CONSTRAINT_NAME, KCU.COLUMN_NAME"
{
  "QueryType": "SELECT",
  "Original": "SELECT KCU.DELETE_RULE, S.UPDATE_RULE FROM  INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ON KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME, INFORMATION_SCHEMA.K AS S WHERE KCU.TABLE_SCHEMA = 'test' AND KCU.TABLE_NAME = 'data_type_table' AND KCU.TABLE_NAME = 'data_type_table' AND S.TABLE_SCHEMA = 'test' AND S.TABLE_NAME = 'sc' ORDER BY KCU.CONSTRAINT_NAME, KCU.COLUMN_NAME",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "_",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectDBA",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select KCU.DELETE_RULE from INFORMATION_SCHEMA.KEY_COLUMN_USAGE as KCU join INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS as RC on KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME where 1 != 1",
        "Query": "select KCU.DELETE_RULE from INFORMATION_SCHEMA.KEY_COLUMN_USAGE as KCU join INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS as RC on KCU.CONSTRAINT_NAME = RC.CONSTRAINT_NAME where KCU.TABLE_SCHEMA = :__vtschemaname and KCU.TABLE_NAME = :__vttablename and KCU.TABLE_NAME = :__vttablename order by KCU.CONSTRAINT_NAME asc, KCU.COLUMN_NAME asc",
        "SysTableTableName": "[VARBINARY(\"data_type_table\"), VARBINARY(\"data_type_table\")]",
        "SysTableTableSchema": "[VARBINARY(\"test\")]"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectDBA",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select S.UPDATE_RULE from INFORMATION_SCHEMA.K as S where 1 != 1",
        "Query": "select S.UPDATE_RULE from INFORMATION_SCHEMA.K as S where S.TABLE_SCHEMA = :__vtschemaname and S.TABLE_NAME = :__vttablename",
        "SysTableTableName": "[VARBINARY(\"sc\")]",
        "SysTableTableSchema": "[VARBINARY(\"test\")]"
      }
    ]
  }
}

#information_schema.routines
"SELECT routine_name AS name, routine_definition AS definition FROM information_schema.routines WHERE ROUTINE_SCHEMA = ? AND ROUTINE_TYPE = 'PROCEDURE'"
{
  "QueryType": "SELECT",
  "Original": "SELECT routine_name AS name, routine_definition AS definition FROM information_schema.routines WHERE ROUTINE_SCHEMA = ? AND ROUTINE_TYPE = 'PROCEDURE'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select routine_name as `name`, routine_definition as definition from information_schema.routines where 1 != 1",
    "Query": "select routine_name as `name`, routine_definition as definition from information_schema.routines where ROUTINE_SCHEMA = :__vtschemaname and ROUTINE_TYPE = 'PROCEDURE'",
    "SysTableTableSchema": "[:v1]"
  }
}

#information_schema table sizes
"SELECT SUM(data_length + index_length) as size FROM information_schema.TABLES WHERE table_schema = ?"
{
  "QueryType": "SELECT",
  "Original": "SELECT SUM(data_length + index_length) as size FROM information_schema.TABLES WHERE table_schema = ?",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select SUM(data_length + index_length) as size from information_schema.`TABLES` where 1 != 1",
    "Query": "select SUM(data_length + index_length) as size from information_schema.`TABLES` where table_schema = :__vtschemaname",
    "SysTableTableSchema": "[:v1]"
  }
}

#information_schema referential contraints
"SELECT kcu.constraint_name constraint_name, kcu.column_name column_name, kcu.referenced_table_name referenced_table_name, kcu.referenced_column_name referenced_column_name, kcu.ordinal_position ordinal_position, kcu.table_name table_name, rc.delete_rule delete_rule, rc.update_rule update_rule FROM information_schema.key_column_usage AS kcu INNER JOIN information_schema.referential_constraints AS rc ON kcu.constraint_name = rc.constraint_name WHERE kcu.table_schema = ? AND rc.constraint_schema = ? AND kcu.referenced_column_name IS NOT NULL ORDER BY ordinal_position"
{
  "QueryType": "SELECT",
  "Original": "SELECT kcu.constraint_name constraint_name, kcu.column_name column_name, kcu.referenced_table_name referenced_table_name, kcu.referenced_column_name referenced_column_name, kcu.ordinal_position ordinal_position, kcu.table_name table_name, rc.delete_rule delete_rule, rc.update_rule update_rule FROM information_schema.key_column_usage AS kcu INNER JOIN information_schema.referential_constraints AS rc ON kcu.constraint_name = rc.constraint_name WHERE kcu.table_schema = ? AND rc.constraint_schema = ? AND kcu.referenced_column_name IS NOT NULL ORDER BY ordinal_position",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select kcu.constraint_name as constraint_name, kcu.column_name as column_name, kcu.referenced_table_name as referenced_table_name, kcu.referenced_column_name as referenced_column_name, kcu.ordinal_position as ordinal_position, kcu.table_name as table_name, rc.delete_rule as delete_rule, rc.update_rule as update_rule from information_schema.key_column_usage as kcu join information_schema.referential_constraints as rc on kcu.constraint_name = rc.constraint_name where 1 != 1",
    "Query": "select kcu.constraint_name as constraint_name, kcu.column_name as column_name, kcu.referenced_table_name as referenced_table_name, kcu.referenced_column_name as referenced_column_name, kcu.ordinal_position as ordinal_position, kcu.table_name as table_name, rc.delete_rule as delete_rule, rc.update_rule as update_rule from information_schema.key_column_usage as kcu join information_schema.referential_constraints as rc on kcu.constraint_name = rc.constraint_name where kcu.table_schema = :__vtschemaname and rc.constraint_schema = :__vtschemaname and kcu.referenced_column_name is not null order by ordinal_position asc",
    "SysTableTableSchema": "[:v1, :v2]"
  }
}
