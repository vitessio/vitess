# No column referenced
"select 1 from user"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select 1 from `user` where 1 != 1",
    "Query": "select 1 from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# '*' expression for simple route
"select user.* from user"
{
  "QueryType": "SELECT",
  "Original": "select user.* from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# unqualified '*' expression for simple route
"select * from user"
{
  "QueryType": "SELECT",
  "Original": "select * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# select with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from `user`",
    "QueryTimeout": 1000,
    "Table": "`user`"
  }
}
Gen4 plan same as above

# select aggregation with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from `user`",
        "QueryTimeout": 1000,
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from `user`",
        "QueryTimeout": 1000,
        "Table": "`user`"
      }
    ]
  }
}

# select limit with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from `user` limit :__upper_limit",
        "QueryTimeout": 1000,
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# select with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS */ * from `user`",
    "ScatterErrorsAsWarnings": true,
    "Table": "`user`"
  }
}
Gen4 plan same as above

# select aggregation with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}

# select aggregation with partial scatter directive - added comments to try to confuse the hint extraction
"/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from `user`",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}

# select limit with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from `user` limit :__upper_limit",
        "ScatterErrorsAsWarnings": true,
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# qualified '*' expression for simple route
"select user.* from user"
{
  "QueryType": "SELECT",
  "Original": "select user.* from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# fully qualified '*' expression for simple route
"select user.user.* from user.user"
{
  "QueryType": "SELECT",
  "Original": "select user.user.* from user.user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# select * from authoritative table
"select * from authoritative"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_id, col1, col2 from authoritative where 1 != 1",
    "Query": "select user_id, col1, col2 from authoritative",
    "Table": "authoritative"
  }
}
Gen4 plan same as above

# select * from join of authoritative tables
"select * from authoritative a join authoritative b on a.user_id=b.user_id"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative a join authoritative b on a.user_id=b.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id where 1 != 1",
    "Query": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id",
    "Table": "authoritative"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative a join authoritative b on a.user_id=b.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a, authoritative as b where 1 != 1",
    "Query": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a, authoritative as b where a.user_id = b.user_id",
    "Table": "authoritative"
  }
}

# test table lookup failure for authoritative code path
"select a.* from authoritative"
"table a not found"
Gen4 error: Unknown table 'a'

# select * from qualified authoritative table
"select a.* from authoritative a"
{
  "QueryType": "SELECT",
  "Original": "select a.* from authoritative a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a.user_id, a.col1, a.col2 from authoritative as a where 1 != 1",
    "Query": "select a.user_id, a.col1, a.col2 from authoritative as a",
    "Table": "authoritative"
  }
}
Gen4 plan same as above

# select * from intermixing of authoritative table with non-authoritative results in no expansion
"select * from authoritative join user on authoritative.user_id=user.id"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative join user on authoritative.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from authoritative join `user` on authoritative.user_id = `user`.id where 1 != 1",
    "Query": "select * from authoritative join `user` on authoritative.user_id = `user`.id",
    "Table": "authoritative, `user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative join user on authoritative.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from authoritative, `user` where 1 != 1",
    "Query": "select * from authoritative, `user` where authoritative.user_id = `user`.id",
    "Table": "`user`, authoritative"
  }
}

# select authoritative.* with intermixing still expands
"select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id"
{
  "QueryType": "SELECT",
  "Original": "select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.id, a.user_id, a.col1, a.col2, `user`.col1 from authoritative as a join `user` on a.user_id = `user`.id where 1 != 1",
    "Query": "select `user`.id, a.user_id, a.col1, a.col2, `user`.col1 from authoritative as a join `user` on a.user_id = `user`.id",
    "Table": "authoritative, `user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.id, a.user_id as user_id, a.col1 as col1, a.col2 as col2, `user`.col1 from authoritative as a, `user` where 1 != 1",
    "Query": "select `user`.id, a.user_id as user_id, a.col1 as col1, a.col2 as col2, `user`.col1 from authoritative as a, `user` where a.user_id = `user`.id",
    "Table": "`user`, authoritative"
  }
}

# auto-resolve anonymous columns for simple route
"select col from user join user_extra on user.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select col from `user` join user_extra on `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user`, user_extra where 1 != 1",
    "Query": "select col from `user`, user_extra where `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}

# Cannot auto-resolve for cross-shard joins
"select col from user join user_extra"
"symbol col not found"
Gen4 error: Column 'col' in field list is ambiguous

# Auto-resolve should work if unique vindex columns are referenced
"select id, user_id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select id, user_id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id from user_extra where 1 != 1",
        "Query": "select user_id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# database calls should be substituted
"select database() from dual"
{
  "QueryType": "SELECT",
  "Original": "select database() from dual",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "database()"
    ],
    "Expressions": [
      ":__vtdbname"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}
Gen4 plan same as above

# last_insert_id for unsharded route
"select last_insert_id() as x from main.unsharded"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id() as x from main.unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select :__lastInsertId as x from unsharded where 1 != 1",
    "Query": "select :__lastInsertId as x from unsharded",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# select from dual on unqualified keyspace
"select @@session.auto_increment_increment from dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}
Gen4 plan same as above

# select from pinned table
"select * from pin_test"
{
  "QueryType": "SELECT",
  "Original": "select * from pin_test",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from pin_test where 1 != 1",
    "Query": "select * from pin_test",
    "Table": "pin_test",
    "Values": [
      "\ufffd"
    ],
    "Vindex": "binary"
  }
}
Gen4 plan same as above

# select from dual on sharded keyspace
"select @@session.auto_increment_increment from user.dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from user.dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}
Gen4 plan same as above

# RHS route referenced
"select user_extra.id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` where 1 != 1",
        "Query": "select 1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Both routes referenced
"select user.col, user_extra.id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Expression with single-route reference
"select user.col, user_extra.id + user_extra.col from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id + user_extra.col from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id + user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.id + user_extra.col from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Jumbled references
"select user.col, user_extra.id, user.col2 from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.col, user_extra.id, user.col2 from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1,-2",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col, `user`.col2 from `user` where 1 != 1",
        "Query": "select `user`.col, `user`.col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Comments
"select /* comment */ user.col from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select /* comment */ user.col from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select /* comment */ `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select /* comment */ 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# for update
"select user.col from user join user_extra for update"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra for update",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` for update",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra for update",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Field query should work for joins select bind vars
"select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm"
{
  "QueryType": "SELECT",
  "Original": "select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select (select :user_id + outm.m + unsharded.m from unsharded where 1 != 1) from unsharded as outm where 1 != 1",
        "Query": "select (select :user_id + outm.m + unsharded.m from unsharded) from unsharded as outm",
        "Table": "unsharded"
      }
    ]
  }
}
Gen4 plan same as above

# Case preservation
"select user.Col, user_extra.Id from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.Col, user_extra.Id from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.Col from `user` where 1 != 1",
        "Query": "select `user`.Col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.Id from user_extra where 1 != 1",
        "Query": "select user_extra.Id from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# syntax error
"the quick brown fox"
"syntax error at position 4 near 'the'"
Gen4 plan same as above

# Hex number is not treated as a simple value
"select * from user where id = 0x04"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 0x04",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 0x04",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# sharded limit offset
"select user_id from music order by user_id limit 10, 20"
{
  "QueryType": "SELECT",
  "Original": "select user_id from music order by user_id limit 10, 20",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 20,
    "Offset": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id, weight_string(user_id) from music where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select user_id, weight_string(user_id) from music order by user_id asc limit :__upper_limit",
        "ResultColumns": 1,
        "Table": "music"
      }
    ]
  }
}
Gen4 plan same as above

# Sharding Key Condition in Parenthesis
"select * from user where name ='abc' AND (id = 4) limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where name ='abc' AND (id = 4) limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where `name` = 'abc' and id = 4 limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Multiple parenthesized expressions
"select * from user where (id = 4) AND (name ='abc') limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 4) AND (name ='abc') limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 4 and `name` = 'abc' limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Multiple parenthesized expressions
"select * from user where (id = 4 and name ='abc') limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 4 and name ='abc') limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 4 and `name` = 'abc' limit 5",
    "Table": "`user`",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column Aliasing with Table.Column
"select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2"
{
  "QueryType": "SELECT",
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user0_.col as col0_ from `user` as user0_ where 1 != 1",
    "Query": "select user0_.col as col0_ from `user` as user0_ where id = 1 order by user0_.col desc limit 2",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column Aliasing with Column
"select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3"
{
  "QueryType": "SELECT",
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user0_.col as col0_ from `user` as user0_ where 1 != 1",
    "Query": "select user0_.col as col0_ from `user` as user0_ where id = 1 order by col0_ desc limit 3",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Booleans and parenthesis
"select * from user where (id = 1) AND name = true limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 1) AND name = true limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 1 and `name` = true limit 5",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Column as boolean-ish
"select * from user where (id = 1) AND name limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 1) AND name limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 1 and `name` limit 5",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# PK as fake boolean, and column as boolean-ish
"select * from user where (id = 5) AND name = true limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id = 5) AND name = true limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 and `name` = true limit 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# top level subquery in select
"select a, (select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, (select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1",
        "Query": "select a, :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, (select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1",
        "Query": "select a, :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# sub-expression subquery in select
"select a, 1+(select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, 1+(select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1",
        "Query": "select a, 1 + :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, 1+(select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1",
        "Query": "select a, 1 + :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# select * from derived table expands specific columns
"select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t"
{
  "QueryType": "SELECT",
  "Original": "select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0,
      1
    ],
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id as id1 from `user` where 1 != 1",
            "Query": "select `user`.id as id1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.id as id2 from user_extra where 1 != 1",
            "Query": "select user_extra.id as id2 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# duplicate columns not allowed in derived table
"select * from (select user.id, user_extra.id from user join user_extra) as t"
"duplicate column names in subquery: id"
Gen4 error: Duplicate column name 'id'

# non-existent symbol in cross-shard derived table
"select t.col from (select user.id from user join user_extra) as t"
"symbol t.col not found in table or subquery"
Gen4 error: symbol t.col not found

# union with the same target shard
"select * from music where user_id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select * from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from music where 1 != 1 union select * from `user` where 1 != 1",
    "Query": "select * from music where user_id = 1 union select * from `user` where id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# union with the same target shard last_insert_id
"select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, :__lastInsertId as `last_insert_id()` from music where 1 != 1 union select * from `user` where 1 != 1",
    "Query": "select *, :__lastInsertId as `last_insert_id()` from music where user_id = 1 union select * from `user` where id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# unsharded union in derived table
"select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a"
{
  "QueryType": "SELECT",
  "Original": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from (select col1, col2 from unsharded where 1 != 1 union select col1, col2 from unsharded where 1 != 1) as a where 1 != 1",
    "Query": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) as a",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select a.col1, a.col2 from (select col1, col2 from unsharded where 1 != 1 union select col1, col2 from unsharded where 1 != 1) as a where 1 != 1",
    "Query": "select a.col1, a.col2 from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) as a",
    "Table": "unsharded"
  }
}

# unsharded union in subquery
"select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)"
{
  "QueryType": "SELECT",
  "Original": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id, `name` from unsharded where 1 != 1",
    "Query": "select id, `name` from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

"(select id from unsharded) union (select id from unsharded_auto) order by id limit 5"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded) union (select id from unsharded_auto) order by id limit 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1",
    "Query": "select id from unsharded union select id from unsharded_auto order by id asc limit 5",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# unsharded union
"select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)"
{
  "QueryType": "SELECT",
  "Original": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1 union select id from unsharded_auto where 1 != 1",
    "Query": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id from unsharded where 1 != 1 union all select id from unsharded_auto where 1 != 1 union select id from unsharded_auto where 1 != 1",
    "Query": "select id from unsharded union all select id from unsharded_auto union select id from unsharded_auto where id in (132)",
    "Table": "unsharded"
  }
}

# unsharded nested union
"(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1 union select id from unsharded_auto where 1 != 1 union select `name` from unsharded where 1 != 1",
    "Query": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto union select `name` from unsharded",
    "Table": "unsharded"
  }
}
Gen4 error: nesting of unions at the right-hand side is not yet supported

# unsharded nested union with limit
"(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded where 1 != 1)",
    "Query": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# routing rules: ensure directives are not lost
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded as route2 where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from unsharded as route2",
    "QueryTimeout": 1000,
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# testing SingleRow Projection
"select 42"
{
  "QueryType": "SELECT",
  "Original": "select 42",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "42"
    ],
    "Expressions": [
      "INT64(42)"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}
Gen4 plan same as above

# don't filter on the vtgate
"select 42 from dual where false"
{
  "QueryType": "SELECT",
  "Original": "select 42 from dual where false",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select 42 from dual where 1 != 1",
    "Query": "select 42 from dual where false",
    "Table": "dual"
  }
}
Gen4 plan same as above

# testing SingleRow Projection with arithmetics
"select 42+2"
{
  "QueryType": "SELECT",
  "Original": "select 42+2",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "42 + 2"
    ],
    "Expressions": [
      "INT64(42) + INT64(2)"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}
Gen4 plan same as above

# sql_calc_found_rows without limit
"select sql_calc_found_rows * from music where user_id = 1"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music where user_id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from music where 1 != 1",
    "Query": "select * from music where user_id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# sql_calc_found_rows with limit
"select sql_calc_found_rows * from music limit 100"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music limit 100",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 100,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from music where 1 != 1",
            "Query": "select * from music limit :__upper_limit",
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from music where 1 != 1",
            "Query": "select count(*) from music",
            "Table": "music"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music limit 100",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 100,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from music where 1 != 1",
            "Query": "select * from music limit :__upper_limit",
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from music where 1 != 1",
            "Query": "select count(*) from music",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# sql_calc_found_rows with SelectEqualUnique plans
"select sql_calc_found_rows * from music where user_id = 1 limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music where user_id = 1 limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from music where 1 != 1",
        "Query": "select * from music where user_id = 1 limit 2",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from music where 1 != 1",
        "Query": "select count(*) from music where user_id = 1",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

# sql_calc_found_rows with group by and having
"select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_id, count(id), weight_string(user_id) from music where 1 != 1 group by user_id",
            "OrderBy": "(0|2) ASC",
            "Query": "select user_id, count(id), weight_string(user_id) from music group by user_id having count(user_id) = 1 order by user_id asc limit :__upper_limit",
            "ResultColumns": 2,
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select user_id, count(id) from music where 1 != 1 group by user_id) as t where 1 != 1",
            "Query": "select count(*) from (select user_id, count(id) from music group by user_id having count(user_id) = 1) as t",
            "Table": "music"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_id, count(id), weight_string(user_id) from music where 1 != 1 group by user_id",
            "OrderBy": "(0|2) ASC",
            "Query": "select user_id, count(id), weight_string(user_id) from music group by user_id having count(user_id) = 1 order by user_id asc limit :__upper_limit",
            "ResultColumns": 2,
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select user_id, count(id) from music where 1 != 1 group by user_id) as t where 1 != 1",
            "Query": "select count(*) from (select user_id, count(id) from music group by user_id having count(user_id) = 1) as t",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# sql_calc_found_rows in sub queries
"select * from music where user_id IN (select sql_calc_found_rows * from music limit 10)"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS'"
Gen4 plan same as above

# sql_calc_found_rows in derived table
"select sql_calc_found_rows * from (select sql_calc_found_rows * from music limit 10) t limit 1"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS'"
Gen4 plan same as above

# select from unsharded keyspace into dumpfile
"select * from main.unsharded into Dumpfile 'x.txt'"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into Dumpfile 'x.txt'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into dumpfile 'x.txt'",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# select from unsharded keyspace into outfile
"select * from main.unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into outfile 'x.txt' character set binary fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n'",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# select from unsharded keyspace into outfile s3
"select * from main.unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\n' manifest on overwrite off"
{
  "QueryType": "SELECT",
  "Original": "select * from main.unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\n' manifest on overwrite off",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded where 1 != 1",
    "Query": "select * from unsharded into outfile s3 'out_file_name' character set binary format csv header fields terminated by 'term' optionally enclosed by 'c' escaped by 'e' lines starting by 'a' terminated by '\\n' manifest on overwrite off",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Union after into outfile is incorrect
"select id from user into outfile 'out_file_name' union all select id from music"
"syntax error at position 55 near 'union'"
Gen4 plan same as above

# Into outfile s3 in derived table is incorrect
"select id from (select id from user into outfile s3 'inner_outfile') as t2"
"syntax error at position 41 near 'into'"
Gen4 plan same as above

# Into outfile s3 in derived table with union incorrect
"select id from (select id from user into outfile s3 'inner_outfile' union select 1) as t2"
"syntax error at position 41 near 'into'"
Gen4 plan same as above

"select (select u.id from user as u where u.id = 1), a.id from user as a where a.id = 1"
{
  "QueryType": "SELECT",
  "Original": "select (select u.id from user as u where u.id = 1), a.id from user as a where a.id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select (select u.id from `user` as u where 1 != 1), a.id from `user` as a where 1 != 1",
    "Query": "select (select u.id from `user` as u where u.id = 1), a.id from `user` as a where a.id = 1",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Add two tables with the same column in a join
"select t.id, s.id from user t join user_extra s on t.id = s.user_id join unsharded"
{
  "QueryType": "SELECT",
  "Original": "select t.id, s.id from user t join user_extra s on t.id = s.user_id join unsharded",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2",
    "TableName": "`user`, user_extra_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id, s.id from `user` as t join user_extra as s on t.id = s.user_id where 1 != 1",
        "Query": "select t.id, s.id from `user` as t join user_extra as s on t.id = s.user_id",
        "Table": "`user`, user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded where 1 != 1",
        "Query": "select 1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.id, s.id from user t join user_extra s on t.id = s.user_id join unsharded",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1,2",
    "TableName": "unsharded_`user`, user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded where 1 != 1",
        "Query": "select 1 from unsharded",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id, s.id from `user` as t, user_extra as s where 1 != 1",
        "Query": "select t.id, s.id from `user` as t, user_extra as s where t.id = s.user_id",
        "Table": "`user`, user_extra"
      }
    ]
  }
}

"((((select 1))))"
{
  "QueryType": "SELECT",
  "Original": "((((select 1))))",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "1"
    ],
    "Expressions": [
      "INT64(1)"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}
Gen4 plan same as above

# Merging dual with user
"select 42, id from dual, user"
{
  "QueryType": "SELECT",
  "Original": "select 42, id from dual, user",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "dual_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectReference",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 42 from dual where 1 != 1",
        "Query": "select 42 from dual",
        "Table": "dual"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select 42, id from dual, user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select 42, id from dual, `user` where 1 != 1",
    "Query": "select 42, id from dual, `user`",
    "Table": "`user`, dual"
  }
}

# Table named "dual" with a qualifier joined on user should not be merged
"select 42, user.id from main.dual, user"
{
  "QueryType": "SELECT",
  "Original": "select 42, user.id from main.dual, user",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "dual_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectReference",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 42 from dual where 1 != 1",
        "Query": "select 42 from dual",
        "Table": "dual"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

"select (select col from user limit 1) as a from user join user_extra order by a"
{
  "QueryType": "SELECT",
  "Original": "select (select col from user limit 1) as a from user join user_extra order by a",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select :__sq1 as a, weight_string(:__sq1) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select :__sq1 as a, weight_string(:__sq1) from `user` order by a asc",
            "ResultColumns": 1,
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select (select col from user limit 1) as a from user join user_extra order by a",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select :__sq1 as a, weight_string(:__sq1) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select :__sq1 as a, weight_string(:__sq1) from `user` order by a asc",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

"select t.a from (select (select col from user limit 1) as a from user join user_extra) t"
{
  "QueryType": "SELECT",
  "Original": "select t.a from (select (select col from user limit 1) as a from user join user_extra) t",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": 1,
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user` limit :__upper_limit",
                "Table": "`user`"
              }
            ]
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select :__sq1 as a from `user` where 1 != 1",
                "Query": "select :__sq1 as a from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.a from (select (select col from user limit 1) as a from user join user_extra) t",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": 1,
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user` limit :__upper_limit",
                "Table": "`user`"
              }
            ]
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select :__sq1 as a from `user` where 1 != 1",
                "Query": "select :__sq1 as a from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

"select (select col from user where user_extra.id = 4 limit 1) as a from user join user_extra"
"unsupported: cross-shard correlated subquery"
Gen4 plan same as above

# plan test for a natural character set string
"select N'string' from dual"
{
  "QueryType": "SELECT",
  "Original": "select N'string' from dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select N'string' from dual where 1 != 1",
    "Query": "select N'string' from dual",
    "Table": "dual"
  }
}
Gen4 plan same as above

# select expression having dependencies on both sides of a join
"select user.id * user_id as amount from user, user_extra"
{
  "QueryType": "SELECT",
  "Original": "select user.id * user_id as amount from user, user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select :user_id * user_id as amount from user_extra where 1 != 1",
        "Query": "select :user_id * user_id as amount from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# correlated subquery in exists clause
"select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id)"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id \u003c user.id)",
  "Instructions": {
    "OperatorType": "SemiJoin",
    "JoinVars": {
      "user_id": 0
    },
    "ProjectedIndexes": "-2",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, col from `user` where 1 != 1",
        "Query": "select `user`.id, col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_id = 3 and user_id \u003c :user_id",
        "Table": "user_extra",
        "Values": [
          3
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# correlated subquery in exists clause with an order by
"select col from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by col"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select col from user where exists(select user_id from user_extra where user_id = 3 and user_id \u003c user.id) order by col",
  "Instructions": {
    "OperatorType": "SemiJoin",
    "JoinVars": {
      "user_id": 0
    },
    "ProjectedIndexes": "-2",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, col, weight_string(col) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select `user`.id, col, weight_string(col) from `user` order by col asc",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_id = 3 and user_id \u003c :user_id",
        "Table": "user_extra",
        "Values": [
          3
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# correlated subquery having dependencies on two tables
"select 1 from user u1, user u2 where exists (select 1 from user_extra ue where ue.col = u1.col and ue.col = u2.col)"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user u1, user u2 where exists (select 1 from user_extra ue where ue.col = u1.col and ue.col = u2.col)",
  "Instructions": {
    "OperatorType": "SemiJoin",
    "JoinVars": {
      "u1_col": 0,
      "u2_col": 1
    },
    "ProjectedIndexes": "-3",
    "TableName": "`user`_`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,1,-2",
        "TableName": "`user`_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u1.col, 1 from `user` as u1 where 1 != 1",
            "Query": "select u1.col, 1 from `user` as u1",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u2.col from `user` as u2 where 1 != 1",
            "Query": "select u2.col from `user` as u2",
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
        "Query": "select 1 from user_extra as ue where ue.col = :u1_col and ue.col = :u2_col",
        "Table": "user_extra"
      }
    ]
  }
}

# correlated subquery using a column twice
"select 1 from user u where exists (select 1 from user_extra ue where ue.col = u.col and u.col = ue.col2)"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user u where exists (select 1 from user_extra ue where ue.col = u.col and u.col = ue.col2)",
  "Instructions": {
    "OperatorType": "SemiJoin",
    "JoinVars": {
      "u_col": 0
    },
    "ProjectedIndexes": "-2",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.col, 1 from `user` as u where 1 != 1",
        "Query": "select u.col, 1 from `user` as u",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
        "Query": "select 1 from user_extra as ue where ue.col = :u_col and ue.col2 = :u_col",
        "Table": "user_extra"
      }
    ]
  }
}

# correlated subquery part of an OR clause
"select 1 from user u where u.col = 6 or exists (select 1 from user_extra ue where ue.col = u.col and u.col = ue.col2)"
"unsupported: cross-shard correlated subquery"
Gen4 error: exists sub-queries are only supported with AND clause
