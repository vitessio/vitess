# No column referenced
"select 1 from user"
{
  "Original": "select 1 from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select 1 from user",
    "FieldQuery": "select 1 from user where 1 != 1"
  }
}

# '*' expression for simple route
"select user.* from user"
{
  "Original": "select user.* from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user.* from user",
    "FieldQuery": "select user.* from user where 1 != 1"
  }
}

# unqualified '*' expression for simple route
"select * from user"
{
  "Original": "select * from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user",
    "FieldQuery": "select * from user where 1 != 1"
  }
}

# select with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user"
{
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
    "FieldQuery": "select * from user where 1 != 1",
    "QueryTimeout": 1000
  }
}

# select aggregation with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user"
{
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
  "Instructions": {
    "Aggregates": [
      {
        "Opcode": "count",
        "Col": 0
      }
    ],
    "Keys": null,
    "Input": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
      "FieldQuery": "select count(*) from user where 1 != 1",
      "QueryTimeout": 1000
    }
  }
}

# select limit with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10"
{
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10",
  "Instructions": {
    "Opcode": "Limit",
    "Count": 10,
    "Offset": null,
    "Input": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit :__upper_limit",
      "FieldQuery": "select * from user where 1 != 1",
      "QueryTimeout": 1000
    }
  }
}

# select with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user"
{
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user",
    "FieldQuery": "select * from user where 1 != 1",
    "ScatterErrorsAsWarnings": true
  }
}

# select aggregation with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "Aggregates": [
      {
        "Opcode": "count",
        "Col": 0
      }
    ],
    "Keys": null,
    "Input": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
      "FieldQuery": "select count(*) from user where 1 != 1",
      "ScatterErrorsAsWarnings": true
    }
  }
}

# select limit with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10"
{
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10",
  "Instructions": {
    "Opcode": "Limit",
    "Count": 10,
    "Offset": null,
    "Input": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit :__upper_limit",
      "FieldQuery": "select * from user where 1 != 1",
      "ScatterErrorsAsWarnings": true
    }
  }
}

# qualified '*' expression for simple route
"select user.* from user"
{
  "Original": "select user.* from user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user.* from user",
    "FieldQuery": "select user.* from user where 1 != 1"
  }
}

# fully qualified '*' expression for simple route
"select user.user.* from user.user"
{
  "Original": "select user.user.* from user.user",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user.* from user",
    "FieldQuery": "select user.* from user where 1 != 1"
  }
}

# select * from authoritative table
"select * from authoritative"
{
  "Original": "select * from authoritative",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user_id, col1, col2 from authoritative",
    "FieldQuery": "select user_id, col1, col2 from authoritative where 1 != 1"
  }
}

# select * from join of authoritative tables
"select * from authoritative a join authoritative b on a.user_id=b.user_id"
{
  "Original": "select * from authoritative a join authoritative b on a.user_id=b.user_id",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id",
    "FieldQuery": "select a.user_id as user_id, a.col1 as col1, a.col2 as col2, b.user_id as user_id, b.col1 as col1, b.col2 as col2 from authoritative as a join authoritative as b on a.user_id = b.user_id where 1 != 1"
  }
}

# test table lookup failure for authoritative code path
"select a.* from authoritative"
"table a not found"

# select * from qualified authoritative table
"select a.* from authoritative a"
{
  "Original": "select a.* from authoritative a",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select a.user_id, a.col1, a.col2 from authoritative as a",
    "FieldQuery": "select a.user_id, a.col1, a.col2 from authoritative as a where 1 != 1"
  }
}

# select * from intermixing of authoritative table with non-authoritative results in no expansion
"select * from authoritative join user on authoritative.user_id=user.id"
{
  "Original": "select * from authoritative join user on authoritative.user_id=user.id",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from authoritative join user on authoritative.user_id = user.id",
    "FieldQuery": "select * from authoritative join user on authoritative.user_id = user.id where 1 != 1"
  }
}

# select authoritative.* with intermixing still expands
"select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id"
{
  "Original": "select user.id, a.*, user.col1 from authoritative a join user on a.user_id=user.id",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user.id, a.user_id, a.col1, a.col2, user.col1 from authoritative as a join user on a.user_id = user.id",
    "FieldQuery": "select user.id, a.user_id, a.col1, a.col2, user.col1 from authoritative as a join user on a.user_id = user.id where 1 != 1"
  }
}

# auto-resolve anonymous columns for simple route
"select col from user join user_extra on user.id = user_extra.user_id"
{
  "Original": "select col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select col from user join user_extra on user.id = user_extra.user_id",
    "FieldQuery": "select col from user join user_extra on user.id = user_extra.user_id where 1 != 1"
  }
}

# Cannot auto-resolve for cross-shard joins
"select col from user join user_extra"
"symbol col not found"

# Auto-resolve should work if unique vindex columns are referenced
"select id, user_id from user join user_extra"
{
  "Original": "select id, user_id from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select id from user",
      "FieldQuery": "select id from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_id from user_extra",
      "FieldQuery": "select user_id from user_extra where 1 != 1"
    },
    "Cols": [
      -1,
      1
    ]
  }
}

# database calls should be substituted
"select database() from dual"
{
  "Original": "select database() from dual",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select database() from dual",
    "FieldQuery": "select database() from dual where 1 != 1"
  }
}


# nextval for simple route
"select next value from user"
"NEXT used on a sharded table"

# next n values for simple route
"select next 2 values from seq"
{
  "Original": "select next 2 values from seq",
  "Instructions": {
    "Opcode": "SelectNext",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select next 2 values from seq",
    "FieldQuery": "select next 2 values from seq where 1 != 1"
  }
}

# last_insert_id for unsharded route
"select last_insert_id() from main.dual"
{
  "Original": "select last_insert_id() from main.dual",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select last_insert_id() from dual",
    "FieldQuery": "select last_insert_id() from dual where 1 != 1"
  }
}

# select from dual on unqualified keyspace
"select @@session.auto_increment_increment from dual"
{
  "Original": "select @@session.auto_increment_increment from dual",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select @@session.auto_increment_increment from dual",
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1"
  }
}

# select from pinned table
"select * from pin_test"
{
  "Original": "select * from pin_test",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from pin_test",
    "FieldQuery": "select * from pin_test where 1 != 1",
    "Vindex": "binary",
    "Values": [
      "\ufffd"
    ]
  }
}


# select from dual on sharded keyspace
"select @@session.auto_increment_increment from user.dual"
{
  "Original": "select @@session.auto_increment_increment from user.dual",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select @@session.auto_increment_increment from dual",
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Vindex": "binary",
    "Values": ["\u0000"]
  }
}

# RHS route referenced
"select user_extra.id from user join user_extra"
{
  "Original": "select user_extra.id from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select 1 from user",
      "FieldQuery": "select 1 from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1"
    },
    "Cols": [
      1
    ]
  }
}

# Both routes referenced
"select user.col, user_extra.id from user join user_extra"
{
  "Original": "select user.col, user_extra.id from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1"
    },
    "Cols": [
      -1,
      1
    ]
  }
}

# Expression with single-route reference
"select user.col, user_extra.id + user_extra.col from user join user_extra"
{
  "Original": "select user.col, user_extra.id + user_extra.col from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id + user_extra.col from user_extra",
      "FieldQuery": "select user_extra.id + user_extra.col from user_extra where 1 != 1"
    },
    "Cols": [
      -1,
      1
    ]
  }
}

# Jumbled references
"select user.col, user_extra.id, user.col2 from user join user_extra"
{
  "Original": "select user.col, user_extra.id, user.col2 from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col, user.col2 from user",
      "FieldQuery": "select user.col, user.col2 from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.id from user_extra",
      "FieldQuery": "select user_extra.id from user_extra where 1 != 1"
    },
    "Cols": [
      -1,
      1,
      -2
    ]
  }
}

# Comments
"select /* comment */ user.col from user join user_extra"
{
  "Original": "select /* comment */ user.col from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /* comment */ user.col from user",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select /* comment */ 1 from user_extra",
      "FieldQuery": "select 1 from user_extra where 1 != 1"
    },
    "Cols": [
      -1
    ]
  }
}

# for update
"select user.col from user join user_extra for update"
{
  "Original": "select user.col from user join user_extra for update",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.col from user for update",
      "FieldQuery": "select user.col from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select 1 from user_extra for update",
      "FieldQuery": "select 1 from user_extra where 1 != 1"
    },
    "Cols": [
      -1
    ]
  }
}

# Field query should work for joins select bind vars
"select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm"
{
  "Original": "select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.id from user",
      "FieldQuery": "select user.id from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectUnsharded",
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select (select :user_id + outm.m + unsharded.m from unsharded) from unsharded as outm",
      "FieldQuery": "select (select :user_id + outm.m + unsharded.m from unsharded where 1 != 1) from unsharded as outm where 1 != 1"
    },
    "Cols": [
      -1,
      1
    ],
    "Vars": {
      "user_id": 0
    }
  }
}

# Case preservation
"select user.Col, user_extra.Id from user join user_extra"
{
  "Original": "select user.Col, user_extra.Id from user join user_extra",
  "Instructions": {
    "Opcode": "Join",
    "Left": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user.Col from user",
      "FieldQuery": "select user.Col from user where 1 != 1"
    },
    "Right": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_extra.Id from user_extra",
      "FieldQuery": "select user_extra.Id from user_extra where 1 != 1"
    },
    "Cols": [
      -1,
      1
    ]
  }
}

# syntax error
"the quick brown fox"
"syntax error at position 4 near 'the'"

# Hex number is not treated as a simple value
"select * from user where id = 0x04"
{
  "Original": "select * from user where id = 0x04",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where id = 0x04",
    "FieldQuery": "select * from user where 1 != 1"
  }
}

# sharded limit offset
"select user_id from music order by user_id limit 10, 20"
{
  "Original": "select user_id from music order by user_id limit 10, 20",
  "Instructions": {
    "Opcode": "Limit",
    "Count": 20,
    "Offset": 10,
    "Input": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select user_id from music order by user_id asc limit :__upper_limit",
      "FieldQuery": "select user_id from music where 1 != 1",
      "OrderBy": [
        {
          "Col": 0,
          "Desc": false
        }
      ]
    }
  }
}

# Sharding Key Condition in Parenthesis
"select * from user where name ='abc' AND (id = 4) limit 5"
{
  "Original": "select * from user where name ='abc' AND (id = 4) limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where name = 'abc' and (id = 4) limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [4]
  }
}

# Multiple parenthesized expressions
"select * from user where (id = 4) AND (name ='abc') limit 5"
{
  "Original": "select * from user where (id = 4) AND (name ='abc') limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where (id = 4) and (name = 'abc') limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [4]
  }
}

# Multiple parenthesized expressions
"select * from user where (id = 4 and name ='abc') limit 5"
{
  "Original": "select * from user where (id = 4 and name ='abc') limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where id = 4 and name = 'abc' limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [
      4
    ]
  }
}

# Column Aliasing with Table.Column
"select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2"
{
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by user0_.col desc limit 2",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user0_.col as col0_ from user as user0_ where id = 1 order by user0_.col desc limit 2",
    "FieldQuery": "select user0_.col as col0_ from user as user0_ where 1 != 1",
    "Vindex": "user_index",
    "Values": [1]
  }
}

# Column Aliasing with Column
"select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3"
{
  "Original": "select user0_.col as col0_ from user user0_ where id = 1 order by col0_ desc limit 3",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select user0_.col as col0_ from user as user0_ where id = 1 order by col0_ desc limit 3",
    "FieldQuery": "select user0_.col as col0_ from user as user0_ where 1 != 1",
    "Vindex": "user_index",
    "Values": [1]
  }
}

# Booleans and parenthesis
"select * from user where (id = 1) AND name = true limit 5"
{
  "Original": "select * from user where (id = 1) AND name = true limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where (id = 1) and name = true limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [1]
  }
}

# Column as boolean-ish
"select * from user where (id = 1) AND name limit 5"
{
  "Original": "select * from user where (id = 1) AND name limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where (id = 1) and name limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [1]
  }
}

# PK as fake boolean, and column as boolean-ish
"select * from user where (id = 5) AND name = true limit 5"
{
  "Original": "select * from user where (id = 5) AND name = true limit 5",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from user where (id = 5) and name = true limit 5",
    "FieldQuery": "select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [5]
  }
}

# top level subquery in select
"select a, (select col from user) from unsharded"
{
  "Original": "select a, (select col from user) from unsharded",
  "Instructions": {
    "Opcode": "PulloutValue",
    "SubqueryResult": "__sq1",
    "HasValues": "__sq_has_values1",
    "Subquery": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select col from user",
      "FieldQuery": "select col from user where 1 != 1"
    },
    "Underlying": {
      "Opcode": "SelectUnsharded",
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select a, :__sq1 from unsharded",
      "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1"
    }
  }
}

# sub-expression subquery in select
"select a, 1+(select col from user) from unsharded"
{
  "Original": "select a, 1+(select col from user) from unsharded",
  "Instructions": {
    "Opcode": "PulloutValue",
    "SubqueryResult": "__sq1",
    "HasValues": "__sq_has_values1",
    "Subquery": {
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
      "Query": "select col from user",
      "FieldQuery": "select col from user where 1 != 1"
    },
    "Underlying": {
      "Opcode": "SelectUnsharded",
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select a, 1 + :__sq1 from unsharded",
      "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1"
    }
  }
}

# select * from subquery expands specific columns
"select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t"
{
  "Original": "select * from (select user.id id1, user_extra.id id2 from user join user_extra) as t",
  "Instructions": {
    "Cols": [
      0,
      1
    ],
    "Subquery": {
      "Opcode": "Join",
      "Left": {
        "Opcode": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Query": "select user.id as id1 from user",
        "FieldQuery": "select user.id as id1 from user where 1 != 1"
      },
      "Right": {
        "Opcode": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Query": "select user_extra.id as id2 from user_extra",
        "FieldQuery": "select user_extra.id as id2 from user_extra where 1 != 1"
      },
      "Cols": [
        -1,
        1
      ]
    }
  }
}

# duplicate columns not allowed in subquery
"select * from (select user.id, user_extra.id from user join user_extra) as t"
"duplicate column names in subquery: id"

# non-existent symbol in cross-shard subquery
"select t.col from (select user.id from user join user_extra) as t"
"symbol t.col not found in table or subquery"

# union of information_schema
"select * from information_schema.a union select * from information_schema.b"
{
  "Original": "select * from information_schema.a union select * from information_schema.b",
  "Instructions": {
    "Opcode": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select * from information_schema.a union select * from information_schema.b",
    "FieldQuery": "select * from information_schema.a where 1 != 1 union select * from information_schema.b where 1 != 1"
  }
}

# union with the same target shard
"select * from music where user_id = 1 union select * from user where id = 1"
{
  "Original": "select * from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from music where user_id = 1 union select * from user where id = 1",
    "FieldQuery": "select * from music where 1 != 1 union select * from user where 1 != 1",
    "Vindex": "user_index",
    "Values": [1]
  }
}

"select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a"
{
  "Original": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) a",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select * from (select col1, col2 from unsharded where id = 1 union select col1, col2 from unsharded where id = 3) as a",
    "FieldQuery": "select * from (select col1, col2 from unsharded where 1 != 1 union select col1, col2 from unsharded where 1 != 1) as a where 1 != 1"
  }
}

"select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)"
{
  "Original": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select id, name from unsharded where id in (select id from unsharded where id = 1 union select id from unsharded where id = 3)",
    "FieldQuery": "select id, name from unsharded where 1 != 1"
  }
}

"(select id from unsharded) union (select id from unsharded_auto) order by id limit 5"
{
  "Original": "(select id from unsharded) union (select id from unsharded_auto) order by id limit 5",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "(select id from unsharded) union (select id from unsharded_auto) order by id asc limit 5",
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded_auto where 1 != 1)"
  }
}

"select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)"
{
  "Original": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "select id from unsharded union select id from unsharded_auto union select id from unsharded_auto where id in (132)",
    "FieldQuery": "select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1 union select id from unsharded_auto where 1 != 1"
  }
}

"(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)"
{
  "Original": "(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "(select id from unsharded union select id from unsharded_auto) union (select id from unsharded_auto union select name from unsharded)",
    "FieldQuery": "(select id from unsharded where 1 != 1 union select id from unsharded_auto where 1 != 1) union (select id from unsharded_auto where 1 != 1 union select name from unsharded where 1 != 1)"
  }
}

"(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1"
{
  "Original": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
  "Instructions": {
    "Opcode": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "Query": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded where 1 != 1)"
  }
}
