[
  {
    "comment": "Test cases in this file follow the code in memory_sort.go.\n# scatter aggregate order by references ungrouped column",
    "query": "select a, b, count(*) from user group by a order by b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from user group by a order by b",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|4) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "any_value(1) AS b, sum_count_star(2) AS count(*), any_value(4)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(`user`.b) from `user` where 1 != 1 group by a, weight_string(a)",
                "OrderBy": "(0|3) ASC",
                "Query": "select a, b, count(*), weight_string(a), weight_string(`user`.b) from `user` group by a, weight_string(a) order by a asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate order by references aggregate expression",
    "query": "select a, b, count(*) k from user group by a order by k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) k from user group by a order by k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "2 ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "any_value(1) AS b, sum_count_star(2) AS k",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a, weight_string(a)",
                "OrderBy": "(0|3) ASC",
                "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a, weight_string(a) order by a asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select a, b, count(*) k from user group by a order by b, a, k",
    "query": "select a, b, count(*) k from user group by a order by b, a, k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) k from user group by a order by b, a, k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|4) ASC, (0|3) ASC, 2 ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "any_value(1) AS b, sum_count_star(2) AS k, any_value(4)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select a, b, count(*) as k, weight_string(a), weight_string(`user`.b) from `user` where 1 != 1 group by a, weight_string(a)",
                "OrderBy": "(0|3) ASC",
                "Query": "select a, b, count(*) as k, weight_string(a), weight_string(`user`.b) from `user` group by a, weight_string(a) order by a asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with memory sort and limit",
    "query": "select a, b, count(*) k from user group by a order by k desc limit 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) k from user group by a order by k desc limit 10",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "10",
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "2 DESC",
            "ResultColumns": 3,
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Ordered",
                "Aggregates": "any_value(1) AS b, sum_count_star(2) AS k",
                "GroupBy": "(0|3)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a, weight_string(a)",
                    "OrderBy": "(0|3) ASC",
                    "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a, weight_string(a) order by a asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with memory sort and order by number",
    "query": "select a, b, count(*) k from user group by a order by 1,3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) k from user group by a order by 1,3",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(0|3) ASC, 2 ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "any_value(1) AS b, sum_count_star(2) AS k",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a, weight_string(a)",
                "OrderBy": "(0|3) ASC",
                "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a, weight_string(a) order by a asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with memory sort and order by number, reuse weight_string\n# we have to use a meaningless construct to test this",
    "query": "select textcol1 as t, count(*) k from user group by textcol1 order by textcol1, k, textcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select textcol1 as t, count(*) k from user group by textcol1 order by textcol1, k, textcol1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "0 ASC COLLATE latin1_swedish_ci, 1 ASC",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS k",
            "GroupBy": "0 COLLATE latin1_swedish_ci",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select textcol1 as t, count(*) as k from `user` where 1 != 1 group by textcol1",
                "OrderBy": "0 ASC COLLATE latin1_swedish_ci",
                "Query": "select textcol1 as t, count(*) as k from `user` group by textcol1 order by textcol1 asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "order by on a cross-shard derived table",
    "query": "select id from (select user.id, user.col from user join user_extra) as t order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select user.id, user.col from user join user_extra) as t order by id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from (select `user`.id, `user`.col from `user` where 1 != 1) as t where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from (select `user`.id, `user`.col from `user`) as t order by t.id asc",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "order by on a cross-shard query. Note: this happens only when an order by column is from the second table",
    "query": "select user.col1 as a, user.col2 b, music.col3 c from user, music where user.id = music.id and user.id = 1 order by c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2 b, music.col3 c from user, music where user.id = music.id and user.id = 1 order by c",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(2|3) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,R:0,R:1",
            "JoinVars": {
              "user_id": 2
            },
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col1 as a, `user`.col2 as b, `user`.id from `user` where 1 != 1",
                "Query": "select `user`.col1 as a, `user`.col2 as b, `user`.id from `user` where `user`.id = 1",
                "Table": "`user`",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select music.col3 as c, weight_string(music.col3) from music where 1 != 1",
                "Query": "select music.col3 as c, weight_string(music.col3) from music where music.id = :user_id",
                "Table": "music",
                "Values": [
                  ":user_id"
                ],
                "Vindex": "music_user_map"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by for join, with mixed cross-shard ordering",
    "query": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by 1 asc, 3 desc, 2 asc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by 1 asc, 3 desc, 2 asc",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(0|3) ASC, (2|4) DESC, (1|5) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,R:0,L:2,R:1,L:3",
            "JoinVars": {
              "user_id": 4
            },
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col1 as a, `user`.col2, weight_string(`user`.col1), weight_string(`user`.col2), `user`.id from `user` where 1 != 1",
                "Query": "select `user`.col1 as a, `user`.col2, weight_string(`user`.col1), weight_string(`user`.col2), `user`.id from `user` where `user`.id = 1",
                "Table": "`user`",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select music.col3, weight_string(music.col3) from music where 1 != 1",
                "Query": "select music.col3, weight_string(music.col3) from music where music.id = :user_id",
                "Table": "music",
                "Values": [
                  ":user_id"
                ],
                "Vindex": "music_user_map"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by for join, on text column in LHS.",
    "query": "select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC COLLATE latin1_swedish_ci, (2|3) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,R:0,R:1",
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.a, u.textcol1 from `user` as u where 1 != 1",
                "Query": "select u.a, u.textcol1 from `user` as u",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
                "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by for join, on text column in RHS.",
    "query": "select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC COLLATE latin1_swedish_ci, (2|3) ASC",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0,R:1,L:0,L:1",
            "TableName": "unsharded_`user`",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
                "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
                "Table": "unsharded"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.a, u.textcol1 from `user` as u where 1 != 1",
                "Query": "select u.a, u.textcol1 from `user` as u",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "order by for vindex func",
    "query": "select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "2 ASC",
        "Inputs": [
          {
            "OperatorType": "VindexFunc",
            "Variant": "VindexMap",
            "Columns": [
              0,
              1,
              2,
              3
            ],
            "Fields": {
              "id": "VARBINARY",
              "keyspace_id": "VARBINARY",
              "range_end": "VARBINARY",
              "range_start": "VARBINARY"
            },
            "Value": ":id",
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user_index"
      ]
    }
  },
  {
    "comment": "unary expression",
    "query": "select a from user order by binary a desc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a from user order by binary a desc",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, convert(`user`.a, binary), weight_string(convert(`user`.a, binary)) from `user` where 1 != 1",
        "OrderBy": "(1|2) DESC",
        "Query": "select a, convert(`user`.a, binary), weight_string(convert(`user`.a, binary)) from `user` order by convert(`user`.a, binary) desc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "unary expression in join query",
    "query": "select u.a from user u join music m on u.a = m.a order by binary a desc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.a from user u join music m on u.a = m.a order by binary a desc",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "u_a": 0
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, convert(u.a, binary), weight_string(convert(u.a, binary)) from `user` as u where 1 != 1",
            "OrderBy": "(1|2) DESC",
            "Query": "select u.a, convert(u.a, binary), weight_string(convert(u.a, binary)) from `user` as u order by convert(u.a, binary) desc",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music as m where 1 != 1",
            "Query": "select 1 from music as m where m.a = :u_a",
            "Table": "music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "intcol order by",
    "query": "select id, intcol from user order by intcol",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, intcol from user order by intcol",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, intcol from `user` where 1 != 1",
        "OrderBy": "1 ASC",
        "Query": "select id, intcol from `user` order by `user`.intcol asc",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter order by with order by column not present",
    "query": "select col from user order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user order by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, id, weight_string(id) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select col, id, weight_string(id) from `user` order by id asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  }
]
