[
  {
    "comment": "HAVING implicitly references table col",
    "query": "select user.col1 from user having col2 = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 from user having col2 = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 from `user` where 1 != 1",
        "Query": "select `user`.col1 from `user` where col2 = 2",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ambiguous symbol reference",
    "query": "select user.col1, user_extra.col1 from user join user_extra having col1 = 2",
    "plan": "Column 'col1' in field list is ambiguous"
  },
  {
    "comment": "TODO: this should be 'Column 'col1' in having clause is ambiguous'\n# non-ambiguous symbol reference",
    "query": "select user.col1, user_extra.col1 from user join user_extra having user_extra.col1 = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1, user_extra.col1 from user join user_extra having user_extra.col1 = 2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,R:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 from `user` where 1 != 1",
            "Query": "select `user`.col1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col1 from user_extra where 1 != 1",
            "Query": "select user_extra.col1 from user_extra where user_extra.col1 = 2",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "HAVING multi-route",
    "query": "select user.col1 as a, user.col2, user_extra.col3 from user join user_extra having 1 = 1 and a = 1 and a = user.col2 and user_extra.col3 = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, user_extra.col3 from user join user_extra having 1 = 1 and a = 1 and a = user.col2 and user_extra.col3 = 1",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2 from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2 from `user` where `user`.col1 = 1 and `user`.col1 = `user`.col2",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col3 from user_extra where 1 != 1",
            "Query": "select user_extra.col3 from user_extra where user_extra.col3 = 1",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "HAVING uses subquery",
    "query": "select id from user having id in (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user having id in (select col from user)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values and `user`.id in ::__vals",
            "Table": "`user`",
            "Values": [
              "::__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY, reference col from local table.",
    "query": "select col from user where id = 5 order by aa",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = 5 order by aa",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id = 5 order by aa asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY uses column numbers",
    "query": "select col from user where id = 1 order by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = 1 order by 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id = 1 order by col asc",
        "Table": "`user`",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY on scatter",
    "query": "select col from user order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "OrderBy": "0 ASC",
        "Query": "select col from `user` order by `user`.col asc",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY works for select * from authoritative table",
    "query": "select * from authoritative order by user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from authoritative order by user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id, col1, col2, weight_string(user_id) from authoritative where 1 != 1",
        "OrderBy": "(0|3) ASC",
        "Query": "select user_id, col1, col2, weight_string(user_id) from authoritative order by authoritative.user_id asc",
        "ResultColumns": 3,
        "Table": "authoritative"
      },
      "TablesUsed": [
        "user.authoritative"
      ]
    }
  },
  {
    "comment": "ORDER BY works for select * from authoritative table",
    "query": "select * from authoritative order by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from authoritative order by col1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_id, col1, col2 from authoritative where 1 != 1",
        "OrderBy": "1 ASC COLLATE latin1_swedish_ci",
        "Query": "select user_id, col1, col2 from authoritative order by authoritative.col1 asc",
        "Table": "authoritative"
      },
      "TablesUsed": [
        "user.authoritative"
      ]
    }
  },
  {
    "comment": "ORDER BY on scatter with text column",
    "query": "select a, textcol1, b from user order by a, textcol1, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, textcol1, b from user order by a, textcol1, b",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, textcol1, b, weight_string(a), weight_string(b) from `user` where 1 != 1",
        "OrderBy": "(0|3) ASC, 1 ASC COLLATE latin1_swedish_ci, (2|4) ASC",
        "Query": "select a, textcol1, b, weight_string(a), weight_string(b) from `user` order by `user`.a asc, `user`.textcol1 asc, `user`.b asc",
        "ResultColumns": 3,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY on scatter with text column, qualified name TODO: can plan better",
    "query": "select a, user.textcol1, b from user order by a, textcol1, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, user.textcol1, b from user order by a, textcol1, b",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, `user`.textcol1, b, weight_string(a), weight_string(b) from `user` where 1 != 1",
        "OrderBy": "(0|3) ASC, 1 ASC COLLATE latin1_swedish_ci, (2|4) ASC",
        "Query": "select a, `user`.textcol1, b, weight_string(a), weight_string(b) from `user` order by `user`.a asc, `user`.textcol1 asc, `user`.b asc",
        "ResultColumns": 3,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY on scatter with multiple text columns",
    "query": "select a, textcol1, b, textcol2 from user order by a, textcol1, b, textcol2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, textcol1, b, textcol2 from user order by a, textcol1, b, textcol2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, textcol1, b, textcol2, weight_string(a), weight_string(b), weight_string(textcol2) from `user` where 1 != 1",
        "OrderBy": "(0|4) ASC, 1 ASC COLLATE latin1_swedish_ci, (2|5) ASC, (3|6) ASC COLLATE ",
        "Query": "select a, textcol1, b, textcol2, weight_string(a), weight_string(b), weight_string(textcol2) from `user` order by `user`.a asc, `user`.textcol1 asc, `user`.b asc, `user`.textcol2 asc",
        "ResultColumns": 4,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY invalid col number on scatter",
    "query": "select col from user order by 2",
    "plan": "Unknown column '2' in 'order clause'"
  },
  {
    "comment": "ORDER BY column offset",
    "query": "select id as foo from music order by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id as foo from music order by 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id as foo, weight_string(id) from music where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select id as foo, weight_string(id) from music order by id asc",
        "ResultColumns": 1,
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "ORDER BY NULL",
    "query": "select col from user order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user order by null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` order by null",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY after pull-out subquery",
    "query": "select col from user where col in (select col2 from user) order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where col in (select col2 from user) order by col",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col2 from `user` where 1 != 1",
            "Query": "select col2 from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "OrderBy": "0 ASC",
            "Query": "select col from `user` where :__sq_has_values and col in ::__sq1 order by `user`.col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY NULL for join",
    "query": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by null",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0",
        "JoinVars": {
          "user_id": 2
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1",
            "Table": "`user`",
            "Values": [
              "1"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3 from music where 1 != 1",
            "Query": "select music.col3 from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY non-key column for join",
    "query": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by a",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0",
        "JoinVars": {
          "user_id": 2
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by `user`.col1 asc",
            "Table": "`user`",
            "Values": [
              "1"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3 from music where 1 != 1",
            "Query": "select music.col3 from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY non-key column for implicit join",
    "query": "select user.col1 as a, user.col2, music.col3 from user, music where user.id = music.id and user.id = 1 order by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, music.col3 from user, music where user.id = music.id and user.id = 1 order by a",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0",
        "JoinVars": {
          "user_id": 2
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by `user`.col1 asc",
            "Table": "`user`",
            "Values": [
              "1"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3 from music where 1 != 1",
            "Query": "select music.col3 from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY NULL after pull-out subquery",
    "query": "select col from user where col in (select col2 from user) order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where col in (select col2 from user) order by null",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col2 from `user` where 1 != 1",
            "Query": "select col2 from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` where :__sq_has_values and col in ::__sq1",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY RAND()",
    "query": "select col from user order by RAND()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user order by RAND()",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` order by RAND()",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY RAND() for join",
    "query": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by RAND()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by RAND()",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0",
        "JoinVars": {
          "user_id": 2
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by RAND()",
            "Table": "`user`",
            "Values": [
              "1"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3 from music where 1 != 1",
            "Query": "select music.col3 from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY RAND() after pull-out subquery",
    "query": "select col from user where col in (select col2 from user) order by rand()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where col in (select col2 from user) order by rand()",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col2 from `user` where 1 != 1",
            "Query": "select col2 from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` where :__sq_has_values and col in ::__sq1 order by rand()",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by, '*' expression",
    "query": "select * from user where id = 5 order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by col asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by, qualified '*' expression",
    "query": "select user.* from user where id = 5 order by user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.* from user where id = 5 order by user.col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.* from `user` where 1 != 1",
        "Query": "select `user`.* from `user` where id = 5 order by `user`.col asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by, '*' expression with qualified reference",
    "query": "select * from user where id = 5 order by user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by user.col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by `user`.col asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by, '*' expression in a subquery",
    "query": "select u.id, e.id from user u join user_extra e where u.col = e.col and u.col in (select * from user where user.id = u.id order by col)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id, e.id from user u join user_extra e where u.col = e.col and u.col in (select * from user where user.id = u.id order by col)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,R:0",
        "JoinVars": {
          "u_col": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.id, u.col from `user` as u where 1 != 1",
            "Query": "select u.id, u.col from `user` as u where u.col in (select * from `user` where `user`.id = u.id order by col asc)",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select e.id from user_extra as e where 1 != 1",
            "Query": "select e.id from user_extra as e where e.col = :u_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Order by, verify outer symtab is searched according to its own context.",
    "query": "select u.id from user u having u.id in (select col2 from user where user.id = u.id order by u.col)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user u having u.id in (select col2 from user where user.id = u.id order by u.col)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id from `user` as u where 1 != 1",
        "Query": "select u.id from `user` as u where u.id in (select col2 from `user` where `user`.id = u.id order by u.col asc)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by, qualified '*' expression, name mismatched.",
    "query": "select user.* from user where id = 5 order by e.col",
    "plan": "column 'e.col' not found"
  },
  {
    "comment": "Order by, invalid column number",
    "query": "select col from user order by 18446744073709551616",
    "plan": "error parsing column number: 18446744073709551616"
  },
  {
    "comment": "Order by, out of range column number",
    "query": "select col from user order by 2",
    "plan": "Unknown column '2' in 'order clause'"
  },
  {
    "comment": "Order by, '*' expression with qualified reference and using collate",
    "query": "select * from user where id = 5 order by user.col collate utf8_general_ci",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by user.col collate utf8_general_ci",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by `user`.col collate utf8_general_ci asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by with math functions",
    "query": "select * from user where id = 5 order by -col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by -col1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by -col1 asc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by with string operations",
    "query": "select * from user where id = 5 order by concat(col,col1) collate utf8_general_ci desc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by concat(col,col1) collate utf8_general_ci desc",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by concat(col, col1) collate utf8_general_ci desc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by with math operations",
    "query": "select * from user where id = 5 order by id+col collate utf8_general_ci desc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where id = 5 order by id+col collate utf8_general_ci desc",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id = 5 order by id + col collate utf8_general_ci desc",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by derived table column",
    "query": "select * from user u join (select user_id from user_extra where user_id = 5) eu on u.id = eu.user_id where u.id = 5 order by eu.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user u join (select user_id from user_extra where user_id = 5) eu on u.id = eu.user_id where u.id = 5 order by eu.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from (select user_id from user_extra where 1 != 1) as eu, `user` as u where 1 != 1",
        "Query": "select * from (select user_id from user_extra where user_id = 5) as eu, `user` as u where u.id = 5 and u.id = eu.user_id order by eu.user_id asc",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "routing rules: order by gets pushed for routes",
    "query": "select col from route1 where id = 1 order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from route1 where id = 1 order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` as route1 where 1 != 1",
        "Query": "select col from `user` as route1 where id = 1 order by route1.col asc",
        "Table": "`user`",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "LIMIT",
    "query": "select col1 from user where id = 1 limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1 from user where id = 1 limit 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1 from `user` where 1 != 1",
        "Query": "select col1 from `user` where id = 1 limit 1",
        "Table": "`user`",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "limit for joins. Can't push down the limit because result\n# counts get multiplied by join operations.",
    "query": "select user.col from user join user_extra limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra limit 1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "1",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col from `user` where 1 != 1",
                "Query": "select `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "limit for scatter",
    "query": "select col from user limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user limit 1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "1",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "limit for scatter with bind var",
    "query": "select col from user limit :a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user limit :a",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": ":a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "cross-shard expression in parenthesis with limit",
    "query": "select * from user where (id1 = 4 AND name1 ='abc') limit 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user where (id1 = 4 AND name1 ='abc') limit 5",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "5",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from `user` where 1 != 1",
            "Query": "select * from `user` where id1 = 4 and name1 = 'abc' limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter limit after pullout subquery",
    "query": "select col from user where col in (select col1 from user) limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where col in (select col1 from user) limit 1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "1",
        "Inputs": [
          {
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutIn",
            "PulloutVars": [
              "__sq_has_values",
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col1 from `user` where 1 != 1",
                "Query": "select col1 from `user`",
                "Table": "`user`"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user` where :__sq_has_values and col in ::__sq1",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "limit on reference table",
    "query": "select col from ref limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from ref limit 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from ref where 1 != 1",
        "Query": "select col from ref limit 1",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "arithmetic limit",
    "query": "select id from user limit 1+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user limit 1+1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "2",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "order by column alias",
    "query": "select id as foo from music order by foo",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id as foo from music order by foo",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id as foo, weight_string(id) from music where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select id as foo, weight_string(id) from music order by music.id asc",
        "ResultColumns": 1,
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "column alias for a table column in order by",
    "query": "select id as foo, id2 as id from music order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id as foo, id2 as id from music order by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id as foo, id2 as id, weight_string(id2) from music where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select id as foo, id2 as id, weight_string(id2) from music order by music.id2 asc",
        "ResultColumns": 2,
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "ordering on the left side of the join",
    "query": "select name from user, music order by name",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select name from user, music order by name",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, weight_string(`name`) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select `name`, weight_string(`name`) from `user` order by `user`.`name` asc",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music where 1 != 1",
            "Query": "select 1 from music",
            "Table": "music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation and non-aggregations column without group by",
    "query": "select count(id), num from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(id), num from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(id), any_value(1) AS num",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(id), num from `user` where 1 != 1",
            "Query": "select count(id), num from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation and non-aggregations column with order by",
    "query": "select count(id), num from user order by 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(id), num from user order by 2",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|2) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count(0) AS count(id), any_value(1) AS num, any_value(2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1",
                "Query": "select count(id), num, weight_string(num) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation and non-aggregations column with group by",
    "query": "select count(id), num from user group by 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(id), num from user group by 2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count(0) AS count(id)",
        "GroupBy": "(1|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by num, weight_string(num)",
            "OrderBy": "(1|2) ASC",
            "Query": "select count(id), num, weight_string(num) from `user` group by num, weight_string(num) order by num asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation and non-aggregations column with group by and order by",
    "query": "select count(id), num from user group by 2 order by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(id), num from user group by 2 order by 1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "0 ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(0) AS count(id)",
            "GroupBy": "(1|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by num, weight_string(num)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(id), num, weight_string(num) from `user` group by num, weight_string(num) order by num asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "join order by with ambiguous column reference ; valid in MySQL",
    "query": "select name, name from user, music order by name",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select name, name from user, music order by name",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0,
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `name`, weight_string(`name`) from `user` where 1 != 1",
                "OrderBy": "(0|1) ASC",
                "Query": "select `name`, weight_string(`name`) from `user` order by `user`.`name` asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music where 1 != 1",
                "Query": "select 1 from music",
                "Table": "music"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "order by with ambiguous column reference ; valid in MySQL",
    "query": "select id, id from user order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, id from user order by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, id, weight_string(id) from `user` where 1 != 1",
        "OrderBy": "(0|2) ASC",
        "Query": "select id, id, weight_string(id) from `user` order by `user`.id asc",
        "ResultColumns": 2,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Scatter order by and aggregation: order by column must reference column from select list",
    "query": "select col, count(*) from user group by col order by c1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from user group by col order by c1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(2|3) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*), any_value(2) AS c1, any_value(3)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*), c1, weight_string(c1) from `user` where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*), c1, weight_string(c1) from `user` group by col order by col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Distinct with cross shard query",
    "query": "select distinct user.a from user join user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct user.a from user join user_extra",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.a, weight_string(`user`.a) from `user` where 1 != 1",
                "Query": "select distinct `user`.a, weight_string(`user`.a) from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select distinct 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Distinct with column alias",
    "query": "select distinct a as c, a from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a as c, a from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:2)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a as c, a, weight_string(a) from `user` where 1 != 1",
            "Query": "select distinct a as c, a, weight_string(a) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Distinct with same column",
    "query": "select distinct a, a from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, a from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:2)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, a, weight_string(a) from `user` where 1 != 1",
            "Query": "select distinct a, a, weight_string(a) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by has subqueries",
    "query": "select id from unsharded order by (select id from unsharded)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from unsharded order by (select id from unsharded)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id from unsharded where 1 != 1",
        "Query": "select id from unsharded order by (select id from unsharded) asc",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Equal filter with hexadecimal value",
    "query": "select count(*) a from user having a = 0x01",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a = 0x01",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 0x01",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by uses cross-shard expression",
    "query": "select id from user order by id+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user order by id+1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, id + 1, weight_string(id + 1) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select id, id + 1, weight_string(id + 1) from `user` order by id + 1 asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by column number with collate",
    "query": "select user.col1 as a from user order by 1 collate utf8_general_ci",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a from user order by 1 collate utf8_general_ci",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col1 collate utf8_general_ci, weight_string(`user`.col1 collate utf8_general_ci) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select `user`.col1 as a, `user`.col1 collate utf8_general_ci, weight_string(`user`.col1 collate utf8_general_ci) from `user` order by `user`.col1 collate utf8_general_ci asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by uses cross-shard expression",
    "query": "select id from user order by id+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user order by id+1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, id + 1, weight_string(id + 1) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select id, id + 1, weight_string(id + 1) from `user` order by id + 1 asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by column number with collate",
    "query": "select user.col1 as a from user order by 1 collate utf8_general_ci",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col1 as a from user order by 1 collate utf8_general_ci",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col1 collate utf8_general_ci, weight_string(`user`.col1 collate utf8_general_ci) from `user` where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select `user`.col1 as a, `user`.col1 collate utf8_general_ci, weight_string(`user`.col1 collate utf8_general_ci) from `user` order by `user`.col1 collate utf8_general_ci asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Order by column number with coalesce with columns from both sides",
    "query": "select id from user, user_extra order by coalesce(user.col, user_extra.col)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user, user_extra order by coalesce(user.col, user_extra.col)",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|2) ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:0,R:1",
            "JoinVars": {
              "user_col": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, `user`.col from `user` where 1 != 1",
                "Query": "select id, `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select coalesce(:user_col, user_extra.col), weight_string(coalesce(:user_col, user_extra.col)) from user_extra where 1 != 1",
                "Query": "select coalesce(:user_col, user_extra.col), weight_string(coalesce(:user_col, user_extra.col)) from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "having filter with %",
    "query": "select a.tcol1 from user a join music b where a.tcol1 = b.tcol2 group by a.tcol1 having repeat(a.tcol1,min(a.id)) like \"A\\%B\" order by a.tcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a.tcol1 from user a join music b where a.tcol1 = b.tcol2 group by a.tcol1 having repeat(a.tcol1,min(a.id)) like \"A\\%B\" order by a.tcol1",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "repeat(a.tcol1, min(a.id)) like 'A\\%B'",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "min(1|3) AS min(a.id)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:1,L:0,L:2,L:3",
                "JoinVars": {
                  "a_tcol1": 1
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select min(a.id), a.tcol1, weight_string(a.tcol1), weight_string(a.id) from `user` as a where 1 != 1 group by a.tcol1, weight_string(a.tcol1), weight_string(a.id)",
                    "OrderBy": "(1|2) ASC",
                    "Query": "select min(a.id), a.tcol1, weight_string(a.tcol1), weight_string(a.id) from `user` as a group by a.tcol1, weight_string(a.tcol1), weight_string(a.id) order by a.tcol1 asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from music as b where 1 != 1 group by .0",
                    "Query": "select 1 from music as b where b.tcol2 = :a_tcol1 group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct with order by using aggregation engine",
    "query": "select distinct col from user where id between :vtg1 and :vtg2 order by col asc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct col from user where id between :vtg1 and :vtg2 order by col asc",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col from `user` where id between :vtg1 and :vtg2 group by col order by `user`.col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct with order by having additional non-order by columns in the selection using aggregation engine",
    "query": "select distinct foo, col from user where id between :vtg1 and :vtg2 order by col asc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct foo, col from user where id between :vtg1 and :vtg2 order by col asc",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "1, (0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select foo, col, weight_string(foo) from `user` where 1 != 1 group by col, foo, weight_string(foo)",
            "OrderBy": "1 ASC, (0|2) ASC",
            "Query": "select foo, col, weight_string(foo) from `user` where id between :vtg1 and :vtg2 group by col, foo, weight_string(foo) order by `user`.col asc, foo asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct with order by having no overalap with the selection columns - using distinct engine",
    "query": "select distinct foo from user where id between :vtg1 and :vtg2 order by col asc",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct foo from user where id between :vtg1 and :vtg2 order by col asc",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:2)",
              "1"
            ],
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, col, weight_string(foo) from `user` where 1 != 1",
                "Query": "select distinct foo, col, weight_string(foo) from `user` where id between :vtg1 and :vtg2",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "DISTINCT on an unsupported collation should fall back on weightstrings",
    "query": "select distinct textcol2 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct textcol2 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1): "
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select textcol2, weight_string(textcol2) from `user` where 1 != 1",
            "Query": "select distinct textcol2, weight_string(textcol2) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "No weightstrings or derived table needed",
    "query": "select textcol1 from user union select textcol1 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select textcol1 from user union select textcol1 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0: latin1_swedish_ci"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select textcol1 from `user` where 1 != 1 union select textcol1 from `user` where 1 != 1",
            "Query": "select textcol1 from `user` union select textcol1 from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ORDER BY literal works fine even when the columns have the same name",
    "query": "select a.id, b.id from user as a, user_extra as b union all select 1, 2 order by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a.id, b.id from user as a, user_extra as b union all select 1, 2 order by 1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(0|2) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select a.id, weight_string(a.id) from `user` as a where 1 != 1",
                    "Query": "select a.id, weight_string(a.id) from `user` as a",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select b.id from user_extra as b where 1 != 1",
                    "Query": "select b.id from user_extra as b",
                    "Table": "user_extra"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Reference",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1, 2, weight_string(1) from dual where 1 != 1",
                "Query": "select 1, 2, weight_string(1) from dual",
                "Table": "dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "ORDER BY literal works fine even when the columns have the same name",
    "query": "select a.id, b.id from user as a, user_extra as b union all select 1, 2 order by 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a.id, b.id from user as a, user_extra as b union all select 1, 2 order by 2",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(1|2) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,R:1",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select a.id from `user` as a where 1 != 1",
                    "Query": "select a.id from `user` as a",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select b.id, weight_string(b.id) from user_extra as b where 1 != 1",
                    "Query": "select b.id, weight_string(b.id) from user_extra as b",
                    "Table": "user_extra"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Reference",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1, 2, weight_string(2) from dual where 1 != 1",
                "Query": "select 1, 2, weight_string(2) from dual",
                "Table": "dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user",
        "user.user_extra"
      ]
    }
  }
]
