[
  {
    "comment": "Single table sharded scatter",
    "query": "select col from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table unsharded",
    "query": "select col from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from unsharded",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select col from unsharded where 1 != 1",
        "Query": "select col from unsharded",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Select from sequence",
    "query": "select next 2 values from seq",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select next 2 values from seq",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Next",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select next 2 values from seq where 1 != 1",
        "Query": "select next 2 values from seq",
        "Table": "seq"
      },
      "TablesUsed": [
        "main.seq"
      ]
    }
  },
  {
    "comment": "select next from non-sequence table",
    "query": "select next value from user",
    "plan": "NEXT used on a non-sequence table `user`"
  },
  {
    "comment": "select next in derived table",
    "query": "select 1 from (select next value from seq) t",
    "plan": "Incorrect usage/placement of 'NEXT'"
  },
  {
    "comment": "select next in derived table",
    "query": "select * from (select next value from seq) t",
    "plan": "Incorrect usage/placement of 'NEXT'"
  },
  {
    "comment": "select next in subquery",
    "query": "select 1 from user where id in (select next value from seq)",
    "plan": "Incorrect usage/placement of 'NEXT'"
  },
  {
    "comment": "select next in projection",
    "query": "select (select next value from seq) from user",
    "plan": "Incorrect usage/placement of 'NEXT'"
  },
  {
    "comment": "Select from reference",
    "query": "select * from ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from ref where 1 != 1",
        "Query": "select * from ref",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "Multi-table unsharded",
    "query": "select m1.col from unsharded as m1 join unsharded as m2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from unsharded as m1 join unsharded as m2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from unsharded as m1 join unsharded as m2 where 1 != 1",
        "Query": "select m1.col from unsharded as m1 join unsharded as m2",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Multi-table, multi-chunk",
    "query": "select music.col from user join music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select music.col from user join music",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col from music where 1 != 1",
            "Query": "select music.col from music",
            "Table": "music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules where table name matches, and there's no alias.",
    "query": "select * from second_user.user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from second_user.user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user`",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules where table name matches, and there's an alias.",
    "query": "select * from second_user.user as a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from second_user.user as a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` as a where 1 != 1",
        "Query": "select * from `user` as a",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules where table name does not match, and there's no alias.",
    "query": "select * from route1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from route1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` as route1 where 1 != 1",
        "Query": "select * from `user` as route1",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules where table name does not match, and there's an alias.",
    "query": "select * from route1 as a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from route1 as a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` as a where 1 != 1",
        "Query": "select * from `user` as a",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules with primary targeting",
    "query": "select * from primary_redirect",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from primary_redirect",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` as primary_redirect where 1 != 1",
        "Query": "select * from `user` as primary_redirect",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules bad table",
    "query": "select * from bad_table",
    "plan": "VT05003: unknown database 'noks' in vschema"
  },
  {
    "comment": "routing rules disabled table",
    "query": "select * from disabled",
    "plan": "table disabled has been disabled"
  },
  {
    "comment": "select second_user.foo.col from second_user.foo join user on second_user.foo.id = user.id where second_user.foo.col = 42",
    "query": "select second_user.foo.col from second_user.foo join user on second_user.foo.id = user.id where second_user.foo.col = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select second_user.foo.col from second_user.foo join user on second_user.foo.id = user.id where second_user.foo.col = 42",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select foo.col from `user` as foo, `user` where 1 != 1",
        "Query": "select foo.col from `user` as foo, `user` where foo.col = 42 and foo.id = `user`.id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select user.music.foo from user.music join user on user.music.id = user.id where user.music.col = 42",
    "query": "select user.music.foo from user.music join user on user.music.id = user.id where user.music.col = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.music.foo from user.music join user on user.music.id = user.id where user.music.col = 42",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "music_id": 1
        },
        "TableName": "music_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.foo, music.id from music where 1 != 1",
            "Query": "select music.foo, music.id from music where music.col = 42",
            "Table": "music"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user` where `user`.id = :music_id",
            "Table": "`user`",
            "Values": [
              ":music_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "',' join",
    "query": "select music.col from user, music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select music.col from user, music",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col from music where 1 != 1",
            "Query": "select music.col from music",
            "Table": "music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "',' join unsharded",
    "query": "select u1.a, u2.a from unsharded u1, unsharded u2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.a, u2.a from unsharded u1, unsharded u2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select u1.a, u2.a from unsharded as u1, unsharded as u2 where 1 != 1",
        "Query": "select u1.a, u2.a from unsharded as u1, unsharded as u2",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "',' 3-way join unsharded",
    "query": "select u1.a, u2.a from unsharded u1, unsharded u2, unsharded u3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.a, u2.a from unsharded u1, unsharded u2, unsharded u3",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select u1.a, u2.a from unsharded as u1, unsharded as u2, unsharded as u3 where 1 != 1",
        "Query": "select u1.a, u2.a from unsharded as u1, unsharded as u2, unsharded as u3",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Left join, single chunk",
    "query": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a=m2.b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a=m2.b",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a = m2.b where 1 != 1",
        "Query": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a = m2.b",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Left join, multi-chunk",
    "query": "select u.col from user u left join unsharded m on u.a = m.b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col from user u left join unsharded m on u.a = m.b",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "u_a": 1
        },
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.col, u.a from `user` as u where 1 != 1",
            "Query": "select u.col, u.a from `user` as u",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m where 1 != 1",
            "Query": "select 1 from unsharded as m where m.b = :u_a",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Three-way left join",
    "query": "select user.col, m2.foo from user left join unsharded as m1 on user.col = m1.col left join unsharded as m2 on m1.col = m2.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col, m2.foo from user left join unsharded as m1 on user.col = m1.col left join unsharded as m2 on m1.col = m2.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "L:0,R:0",
        "JoinVars": {
          "m1_col": 1
        },
        "TableName": "`user`_unsharded_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "L:0,R:0",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col from `user` where 1 != 1",
                "Query": "select `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select m1.col from unsharded as m1 where 1 != 1",
                "Query": "select m1.col from unsharded as m1 where m1.col = :user_col",
                "Table": "unsharded"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select m2.foo from unsharded as m2 where 1 != 1",
            "Query": "select m2.foo from unsharded as m2 where m2.col = :m1_col",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Three-way left join, right-associated",
    "query": "select user.col from user left join user_extra as e left join unsharded as m1 on m1.col = e.col on user.col = e.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user left join user_extra as e left join unsharded as m1 on m1.col = e.col on user.col = e.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_user_extra_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinVars": {
              "e_col": 0
            },
            "TableName": "user_extra_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select e.col from user_extra as e where 1 != 1",
                "Query": "select e.col from user_extra as e where e.col = :user_col",
                "Table": "user_extra"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded as m1 where 1 != 1",
                "Query": "select 1 from unsharded as m1 where m1.col = :e_col",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Right join",
    "query": "select m1.col from unsharded as m1 right join unsharded as m2 on m1.a=m2.b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from unsharded as m1 right join unsharded as m2 on m1.a=m2.b",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from unsharded as m1 right join unsharded as m2 on m1.a = m2.b where 1 != 1",
        "Query": "select m1.col from unsharded as m1 right join unsharded as m2 on m1.a = m2.b",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Right join with a join LHS",
    "query": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a=m2.b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a=m2.b",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a = m2.b where 1 != 1",
        "Query": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a = m2.b",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Straight-join (ignores the straight_join hint)",
    "query": "select m1.col from unsharded as m1 straight_join unsharded as m2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from unsharded as m1 straight_join unsharded as m2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from unsharded as m1 straight_join unsharded as m2 where 1 != 1",
        "Query": "select m1.col from unsharded as m1 straight_join unsharded as m2",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Three-way join",
    "query": "select user.col from user join unsharded as m1 join unsharded as m2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join unsharded as m1 join unsharded as m2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m1, unsharded as m2 where 1 != 1",
            "Query": "select 1 from unsharded as m1, unsharded as m2",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Parenthesized, single chunk",
    "query": "select user.col from user join (unsharded as m1 join unsharded as m2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join (unsharded as m1 join unsharded as m2)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m1, unsharded as m2 where 1 != 1",
            "Query": "select 1 from unsharded as m1, unsharded as m2",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Parenthesized, multi-chunk",
    "query": "select user.col from user join (user as u1 join unsharded)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join (user as u1 join unsharded)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "`user`_`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` as u1 where 1 != 1",
            "Query": "select 1 from `user` as u1",
            "Table": "`user`"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col from `user` where 1 != 1",
                "Query": "select `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded where 1 != 1",
                "Query": "select 1 from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "index hints, make sure they are not stripped.",
    "query": "select user.col from user use index(a)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user use index(a)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` use index (a) where 1 != 1",
        "Query": "select `user`.col from `user` use index (a)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multiple index hints, make sure they are not stripped.",
    "query": "select user.col from user use index(a) use index for group by (b)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user use index(a) use index for group by (b)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` use index (a) use index for group by (b) where 1 != 1",
        "Query": "select `user`.col from `user` use index (a) use index for group by (b)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "mergeable sharded join on unique vindex",
    "query": "select user.col from user join user_extra on user.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "mergeable sharded join on unique vindex (parenthesized ON clause)",
    "query": "select user.col from user join user_extra on (user.id = user_extra.user_id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on (user.id = user_extra.user_id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "mergeable sharded join on unique vindex, with a stray condition",
    "query": "select user.col from user join user_extra on user.col between 1 and 2 and user.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.col between 1 and 2 and user.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where `user`.col between 1 and 2 and `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "mergeable sharded join on unique vindex, swapped operands",
    "query": "select user.col from user join user_extra on user_extra.user_id = user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user_extra.user_id = user.id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where user_extra.user_id = `user`.id",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "mergeable sharded join on unique vindex, and condition",
    "query": "select user.col from user join user_extra on user.id = 5 and user.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.id = 5 and user.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where `user`.id = 5 and `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded join on unique vindex, inequality",
    "query": "select user.col from user join user_extra on user.id < user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.id < user_extra.user_id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_id": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col, `user`.id from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where :user_id < user_extra.user_id",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded join, non-col reference RHS",
    "query": "select user.col from user join user_extra on user.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.id = 5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user` where `user`.id = 5",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded join, non-col reference LHS",
    "query": "select user.col from user join user_extra on 5 = user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on 5 = user.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user` where `user`.id = 5",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded join, non-vindex col",
    "query": "select user.col from user join user_extra on user.id = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.id = user_extra.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_col": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user` where `user`.id = :user_extra_col",
            "Table": "`user`",
            "Values": [
              ":user_extra_col"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded join, non-unique vindex",
    "query": "select user.col from user_extra join user on user_extra.user_id = user.name",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user_extra join user on user_extra.user_id = user.name",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_name": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col, `user`.`name` from `user` where 1 != 1",
            "Query": "select `user`.col, `user`.`name` from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.user_id = :user_name",
            "Table": "user_extra",
            "Values": [
              ":user_name"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join with reference table",
    "query": "select user.col from user join ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, ref where 1 != 1",
        "Query": "select `user`.col from `user`, ref",
        "Table": "`user`, ref"
      },
      "TablesUsed": [
        "user.ref",
        "user.user"
      ]
    }
  },
  {
    "comment": "reference table self-join",
    "query": "select r1.col from ref r1 join ref",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select r1.col from ref r1 join ref",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select r1.col from ref as r1, ref where 1 != 1",
        "Query": "select r1.col from ref as r1, ref",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "reference table can merge with other opcodes left to right.",
    "query": "select ref.col from ref join user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ref.col from ref join user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ref.col from ref, `user` where 1 != 1",
        "Query": "select ref.col from ref, `user`",
        "Table": "`user`, ref"
      },
      "TablesUsed": [
        "user.ref",
        "user.user"
      ]
    }
  },
  {
    "comment": "reference table can merge with other opcodes left to right and vindex value is in the plan.\n# This tests that route.Merge also copies the condition to the LHS.",
    "query": "select ref.col from ref join (select aa from user where user.id=1) user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ref.col from ref join (select aa from user where user.id=1) user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ref.col from (select aa from `user` where 1 != 1) as `user`, ref where 1 != 1",
        "Query": "select ref.col from (select aa from `user` where `user`.id = 1) as `user`, ref",
        "Table": "`user`, ref",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.ref",
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules for join, unsharded route wins if we can't find a merged route",
    "query": "select route2.col from route2 join user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select route2.col from route2 join user_extra",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "unsharded_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select route2.col from unsharded as route2 where 1 != 1",
            "Query": "select route2.col from unsharded as route2",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table",
    "query": "select id from (select id, col from user where id = 5) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select id, col from user where id = 5) as t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "derived table with join",
    "query": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select id from `user` where id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table with join, and aliased references",
    "query": "select t.id from (select user.id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from (select user.id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select `user`.id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select `user`.id from `user` where `user`.id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table with join, duplicate columns",
    "query": "select t.id from (select user.id, id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id",
    "plan": "Duplicate column name 'id'"
  },
  {
    "comment": "derived table in RHS of join",
    "query": "select t.id from user_extra join (select id from user where id = 5) as t on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from user_extra join (select id from user where id = 5) as t on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select id from `user` where id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table in FROM with cross-shard join",
    "query": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_id": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select t.id from (select id from `user` where id = 5) as t",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.col = :t_id",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "routing rules for derived table",
    "query": "select id from (select id, col from route1 where id = 5) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select id, col from route1 where id = 5) as t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "derived table missing columns",
    "query": "select t.id from (select id from user) as t join user_extra on t.id = user_extra.user_id where t.col = 42",
    "plan": "column 't.col' not found"
  },
  {
    "comment": "routing rules for derived table where the constraint is in the outer query",
    "query": "select id from (select id, col from route1) as t where id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select id, col from route1) as t where id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules for derived table where the constraint is in the outer query",
    "query": "select id from (select id+col as foo from route1) as t where foo = 5",
    "plan": "column 'id' not found in table 't'"
  },
  {
    "comment": "push predicate on joined derived tables",
    "query": "select t.id from (select id, textcol1 as baz from route1) as t join (select id, textcol1+textcol1 as baz from user) as s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from (select id, textcol1 as baz from route1) as t join (select id, textcol1+textcol1 as baz from user) as s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id, textcol1 as baz from `user` as route1 where 1 != 1) as t, (select id, textcol1 + textcol1 as baz from `user` where 1 != 1) as s where 1 != 1",
        "Query": "select t.id from (select id, textcol1 as baz from `user` as route1 where textcol1 = '3') as t, (select id, textcol1 + textcol1 as baz from `user` where textcol1 + textcol1 = '3') as s where t.id = s.id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "recursive derived table predicate push down",
    "query": "select bar from (select foo+4 as bar from (select colA+colB as foo from user) as u) as t where bar = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select bar from (select foo+4 as bar from (select colA+colB as foo from user) as u) as t where bar = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
        "Query": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where colA + colB + 4 = 5) as u) as t",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "recursive derived table lookups",
    "query": "select id from (select id from (select id from user) as u) as t where id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select id from (select id from user) as u) as t where id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id from (select id from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id from (select id from `user` where id = 5) as u) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "merge derived tables with single-shard routes",
    "query": "select u.col, e.col from (select col from user where id = 5) as u join (select col from user_extra where user_id = 5) as e",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col, e.col from (select col from user where id = 5) as u join (select col from user_extra where user_id = 5) as e",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.col, e.col from (select col from `user` where 1 != 1) as u, (select col from user_extra where 1 != 1) as e where 1 != 1",
        "Query": "select u.col, e.col from (select col from `user` where id = 5) as u, (select col from user_extra where user_id = 5) as e",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join of information_schema with normal table",
    "query": "select unsharded.foo from information_schema.CHARACTER_SETS join unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.foo from information_schema.CHARACTER_SETS join unsharded",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "information_schema.CHARACTER_SETS_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "DBA",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from information_schema.CHARACTER_SETS where 1 != 1",
            "Query": "select 1 from information_schema.CHARACTER_SETS",
            "Table": "information_schema.CHARACTER_SETS"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.foo from unsharded where 1 != 1",
            "Query": "select unsharded.foo from unsharded",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "join of normal table with information_schema",
    "query": "select unsharded.foo from unsharded join information_schema.CHARACTER_SETS",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.foo from unsharded join information_schema.CHARACTER_SETS",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "unsharded_information_schema.CHARACTER_SETS",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.foo from unsharded where 1 != 1",
            "Query": "select unsharded.foo from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "DBA",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from information_schema.CHARACTER_SETS where 1 != 1",
            "Query": "select 1 from information_schema.CHARACTER_SETS",
            "Table": "information_schema.CHARACTER_SETS"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "wire-up on join with cross-shard derived table",
    "query": "select t.col1 from (select user.id, user.col1 from user join user_extra) as t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.col1 from (select user.id, user.col1 from user join user_extra) as t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_col1": 0,
          "t_id": 1
        },
        "TableName": "`user`_user_extra_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1, t.id from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1, t.id from (select `user`.id, `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded where unsharded.id = :t_id and unsharded.col1 = :t_col1",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "wire-up on within cross-shard derived table",
    "query": "select t.id from (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.id from (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) as t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_col": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select t.id, t.`user.col` from (select `user`.id, `user`.col1, `user`.col as `user.col` from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select t.id, t.`user.col` from (select `user`.id, `user`.col1, `user`.col as `user.col` from `user`) as t",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.col = :user_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Join with cross-shard derived table on rhs",
    "query": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "unsharded_a_`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded_a as ua where 1 != 1",
            "Query": "select 1 from unsharded_a as ua",
            "Table": "unsharded_a"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1 from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1 from (select `user`.id, `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Join with cross-shard derived table on rhs - push down join predicate to derived table",
    "query": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t on t.id = ua.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t on t.id = ua.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "ua_id": 0
        },
        "TableName": "unsharded_a_`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select ua.id from unsharded_a as ua where 1 != 1",
            "Query": "select ua.id from unsharded_a as ua",
            "Table": "unsharded_a"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1 from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1 from (select `user`.id, `user`.col1 from `user` where `user`.id = :ua_id) as t",
                "Table": "`user`",
                "Values": [
                  ":ua_id"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "subquery in ON clause, single route",
    "query": "select unsharded_a.col from unsharded_a join unsharded_b on (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded_a.col from unsharded_a join unsharded_b on (select col from user)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded_a.col from unsharded_a, unsharded_b where 1 != 1",
            "Query": "select unsharded_a.col from unsharded_a, unsharded_b where :__sq1",
            "Table": "unsharded_a, unsharded_b"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b",
        "user.user"
      ]
    }
  },
  {
    "comment": "subquery in ON clause as sub-expression",
    "query": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col+(select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col+(select col from user)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded_a.col from unsharded_a, unsharded_b where 1 != 1",
            "Query": "select unsharded_a.col from unsharded_a, unsharded_b where unsharded_a.col + :__sq1",
            "Table": "unsharded_a, unsharded_b"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b",
        "user.user"
      ]
    }
  },
  {
    "comment": "IN subquery in ON clause, single route",
    "query": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col in (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col in (select col from user)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded_a.col from unsharded_a, unsharded_b where 1 != 1",
            "Query": "select unsharded_a.col from unsharded_a, unsharded_b where :__sq_has_values and unsharded_a.col in ::__sq1",
            "Table": "unsharded_a, unsharded_b"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b",
        "user.user"
      ]
    }
  },
  {
    "comment": "subquery in ON clause, with join primitives",
    "query": "select unsharded.col from unsharded join user on user.col in (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.col from unsharded join user on user.col in (select col from user)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Filter",
            "Predicate": ":__sq_has_values and `user`.col in ::__sq1",
            "ResultColumns": 1,
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "unsharded_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Unsharded",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select unsharded.col from unsharded where 1 != 1",
                    "Query": "select unsharded.col from unsharded",
                    "Table": "unsharded"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.col from `user` where 1 != 1",
                    "Query": "select `user`.col from `user`",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "subquery in ON clause, with join primitives, and join on top\n# The subquery is not pulled all the way out.",
    "query": "select unsharded.col from unsharded join user on user.col in (select col from user) join unsharded_a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.col from unsharded join user on user.col in (select col from user) join unsharded_a",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "unsharded_`user`_unsharded_a",
        "Inputs": [
          {
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutIn",
            "PulloutVars": [
              "__sq_has_values",
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user`",
                "Table": "`user`"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Filter",
                "Predicate": ":__sq_has_values and `user`.col in ::__sq1",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0",
                    "TableName": "unsharded_`user`",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Unsharded",
                        "Keyspace": {
                          "Name": "main",
                          "Sharded": false
                        },
                        "FieldQuery": "select unsharded.col from unsharded where 1 != 1",
                        "Query": "select unsharded.col from unsharded",
                        "Table": "unsharded"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select `user`.col from `user` where 1 != 1",
                        "Query": "select `user`.col from `user`",
                        "Table": "`user`"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded_a where 1 != 1",
            "Query": "select 1 from unsharded_a",
            "Table": "unsharded_a"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "main.unsharded_a",
        "user.user"
      ]
    }
  },
  {
    "comment": "keyspace-qualified queries",
    "query": "select user.user.col1, main.unsharded.col1 from user.user join main.unsharded where main.unsharded.col2 = user.user.col2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.user.col1, main.unsharded.col1 from user.user join main.unsharded where main.unsharded.col2 = user.user.col2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,R:0",
        "JoinVars": {
          "user_col2": 1
        },
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1, `user`.col2 from `user` where 1 != 1",
            "Query": "select `user`.col1, `user`.col2 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.col1 from unsharded where 1 != 1",
            "Query": "select unsharded.col1 from unsharded where unsharded.col2 = :user_col2",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "implicit table reference for unsharded keyspace",
    "query": "select main.foo.col from main.foo",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select main.foo.col from main.foo",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select foo.col from foo where 1 != 1",
        "Query": "select foo.col from foo",
        "Table": "foo"
      },
      "TablesUsed": [
        "main.foo"
      ]
    }
  },
  {
    "comment": "col refs should be case-insensitive",
    "query": "select user.col from user join user_extra on user.ID = user_extra.User_Id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user.ID = user_extra.User_Id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
        "Query": "select `user`.col from `user`, user_extra where `user`.ID = user_extra.User_Id",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table with join primitive (FROM)",
    "query": "select id, t.id from (select user.id from user join user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, t.id from (select user.id from user join user_extra) as t",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0,
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from (select `user`.id from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select id from (select `user`.id from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "database call in ON clause.\n# The on clause is weird because the substitution must even for root expressions.",
    "query": "select u1.a from unsharded u1 join unsharded u2 on database()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.a from unsharded u1 join unsharded u2 on database()",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select u1.a from unsharded as u1 join unsharded as u2 on database() where 1 != 1",
        "Query": "select u1.a from unsharded as u1 join unsharded as u2 on database()",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "last_insert_id for dual",
    "query": "select last_insert_id()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select last_insert_id()",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          ":__lastInsertId as last_insert_id()"
        ],
        "Inputs": [
          {
            "OperatorType": "SingleRow"
          }
        ]
      },
      "TablesUsed": [
        "main.dual"
      ]
    }
  },
  {
    "comment": "last_insert_id for sharded keyspace",
    "query": "select last_insert_id() from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select last_insert_id() from user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select :__lastInsertId as `last_insert_id()` from `user` where 1 != 1",
        "Query": "select :__lastInsertId as `last_insert_id()` from `user`",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "last_insert_id for unsharded route",
    "query": "select last_insert_id() from main.unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select last_insert_id() from main.unsharded",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select :__lastInsertId as `last_insert_id()` from unsharded where 1 != 1",
        "Query": "select :__lastInsertId as `last_insert_id()` from unsharded",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "join with bindvariables",
    "query": "SELECT `user`.`id` FROM `user` INNER JOIN `user_extra` ON `user`.`id` = `user_extra`.`assembly_id` WHERE `user_extra`.`user_id` = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT `user`.`id` FROM `user` INNER JOIN `user_extra` ON `user`.`id` = `user_extra`.`assembly_id` WHERE `user_extra`.`user_id` = 2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_assembly_id": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.assembly_id from user_extra where 1 != 1",
            "Query": "select user_extra.assembly_id from user_extra where user_extra.user_id = 2",
            "Table": "user_extra",
            "Values": [
              "2"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id from `user` where 1 != 1",
            "Query": "select `user`.id from `user` where `user`.id = :user_extra_assembly_id",
            "Table": "`user`",
            "Values": [
              ":user_extra_assembly_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "verify ',' vs JOIN precedence",
    "query": "select u1.a from unsharded u1, unsharded u2 join unsharded u3 on u1.a = u2.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.a from unsharded u1, unsharded u2 join unsharded u3 on u1.a = u2.a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select u1.a from unsharded as u1, unsharded as u2 join unsharded as u3 on u1.a = u2.a where 1 != 1",
        "Query": "select u1.a from unsharded as u1, unsharded as u2 join unsharded as u3 on u1.a = u2.a",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "first expression fails for ',' join (code coverage: ensure error is returned)",
    "query": "select user.foo.col from user.foo, user",
    "plan": "table foo not found"
  },
  {
    "comment": "table names should be case-sensitive",
    "query": "select unsharded.id from unsharded where Unsharded.val = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.id from unsharded where Unsharded.val = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where Unsharded.val = 1",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "implicit table reference for sharded keyspace",
    "query": "select user.foo.col from user.foo",
    "plan": "table foo not found"
  },
  {
    "comment": "duplicate symbols",
    "query": "select user.id from user join user",
    "plan": "VT03013: not unique table/alias: 'user'"
  },
  {
    "comment": "duplicate symbols for merging routes",
    "query": "select user.id from user join user_extra user on user.id = user.user_id",
    "plan": "VT03013: not unique table/alias: 'user'"
  },
  {
    "comment": "non-existent table",
    "query": "select c from t",
    "plan": "table t not found"
  },
  {
    "comment": "non-existent table on left of join",
    "query": "select c from t join user",
    "plan": "table t not found"
  },
  {
    "comment": "non-existent table on right of join",
    "query": "select c from user join t",
    "plan": "table t not found"
  },
  {
    "comment": "query with parens is planned correctly",
    "query": "select m1.col from (unsharded as m1, unsharded as m2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select m1.col from (unsharded as m1, unsharded as m2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m1.col from (unsharded as m1, unsharded as m2) where 1 != 1",
        "Query": "select m1.col from (unsharded as m1, unsharded as m2)",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "optimise plan by merging user_extra and music first, and then querying for user info",
    "query": "select 1 from user u join user_extra ue on ue.id = u.id join music m on m.user_id = ue.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user u join user_extra ue on ue.id = u.id join music m on m.user_id = ue.user_id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "ue_id": 1
        },
        "TableName": "music, user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1, ue.id from user_extra as ue, music as m where 1 != 1",
            "Query": "select 1, ue.id from user_extra as ue, music as m where m.user_id = ue.user_id",
            "Table": "music, user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` as u where 1 != 1",
            "Query": "select 1 from `user` as u where u.id = :ue_id",
            "Table": "`user`",
            "Values": [
              ":ue_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join column selected as alias",
    "query": "SELECT u.id as uid, ue.id as ueid FROM user u join user_extra ue where u.id = ue.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT u.id as uid, ue.id as ueid FROM user u join user_extra ue where u.id = ue.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0,L:0",
        "JoinVars": {
          "ue_id": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select ue.id as ueid from user_extra as ue where 1 != 1",
            "Query": "select ue.id as ueid from user_extra as ue",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.id as uid from `user` as u where 1 != 1",
            "Query": "select u.id as uid from `user` as u where u.id = :ue_id",
            "Table": "`user`",
            "Values": [
              ":ue_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "alias on column from derived table. TODO: to support alias in SimpleProjection engine primitive.",
    "query": "select a as k from (select count(*) as a from user) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a as k from (select count(*) as a from user) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from `user` where 1 != 1",
            "Query": "select count(*) as a from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select star from derived table on expandable and unsharded table",
    "query": "select u.* from (select * from unsharded) u",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.* from (select * from unsharded) u",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select u.* from (select * from unsharded where 1 != 1) as u where 1 != 1",
        "Query": "select u.* from (select * from unsharded) as u",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "filtering on a cross-shard derived table",
    "query": "select id from (select user.id, user.col from user join user_extra) as t where id=5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from (select user.id, user.col from user join user_extra) as t where id=5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from (select `user`.id, `user`.col from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select id from (select `user`.id, `user`.col from `user` where `user`.id = 5) as t",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "expression on a cross-shard derived table",
    "query": "select id+1 from (select user.id, user.col from user join user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id+1 from (select user.id, user.col from user join user_extra) as t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id + 1 from (select `user`.id, `user`.col from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select id + 1 from (select `user`.id, `user`.col from `user`) as t",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table with aliased columns and outer predicate pushed in derived table",
    "query": "select u.a from (select id as b, name from user) u(a, n) where u.n = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.a from (select id as b, name from user) u(a, n) where u.n = 1",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "1"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a from (select id as b, `name` from `user` where 1 != 1) as u(a, n) where 1 != 1",
            "Query": "select u.a from (select id as b, `name` from `user` where `name` = 1) as u(a, n)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "derived table with aliased columns predicate in both the outer and inner",
    "query": "select u.a from (select id as b, name from user where b = 1) u(a, n) where u.n = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.a from (select id as b, name from user where b = 1) u(a, n) where u.n = 1",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "1"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a from (select id as b, `name` from `user` where 1 != 1) as u(a, n) where 1 != 1",
            "Query": "select u.a from (select id as b, `name` from `user` where b = 1 and `name` = 1) as u(a, n)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "derived table with aliased columns and a join that requires pushProjection",
    "query": "select i+1 from (select user.id from user join user_extra) t(i)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select i+1 from (select user.id from user join user_extra) t(i)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select i + 1 from (select `user`.id from `user` where 1 != 1) as t(i) where 1 != 1",
            "Query": "select i + 1 from (select `user`.id from `user`) as t(i)",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "two subqueries with different Select and OpCode",
    "query": "select id from user where id in (select id from user_extra) and col = (select user_id from user_extra limit 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id in (select id from user_extra) and col = (select user_id from user_extra limit 1)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq2"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Limit",
            "Count": "1",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_id from user_extra where 1 != 1",
                "Query": "select user_id from user_extra limit :__upper_limit",
                "Table": "user_extra"
              }
            ]
          },
          {
            "InputName": "Outer",
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutIn",
            "PulloutVars": [
              "__sq_has_values",
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from user_extra where 1 != 1",
                "Query": "select id from user_extra",
                "Table": "user_extra"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "IN",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from `user` where 1 != 1",
                "Query": "select id from `user` where :__sq_has_values and id in ::__vals and col = :__sq2",
                "Table": "`user`",
                "Values": [
                  "::__sq1"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join on int columns",
    "query": "select u.id from user as u join user as uu on u.intcol = uu.intcol",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user as u join user as uu on u.intcol = uu.intcol",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "u_intcol": 1
        },
        "TableName": "`user`_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.id, u.intcol from `user` as u where 1 != 1",
            "Query": "select u.id, u.intcol from `user` as u",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` as uu where 1 != 1",
            "Query": "select 1 from `user` as uu where uu.intcol = :u_intcol",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Duplicate output column from derived table having a join",
    "query": "select 0 from (select `user`.col1 from `user` join unsharded) as t join unsharded on unsharded.col1 = t.col1 and unsharded.a = t.col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 0 from (select `user`.col1 from `user` join unsharded) as t join unsharded on unsharded.col1 = t.col1 and unsharded.a = t.col1",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_col1": 1
        },
        "TableName": "`user`_unsharded_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 0, t.col1 from (select `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select 0, t.col1 from (select `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded where 1 != 1",
                "Query": "select 1 from unsharded",
                "Table": "unsharded"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded where unsharded.a = :t_col1 and unsharded.col1 = :t_col1",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "left join where clauses #2",
    "query": "select user.id from user left join user_extra on user.col = user_extra.col where coalesce(user_extra.col, 4) = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user left join user_extra on user.col = user_extra.col where coalesce(user_extra.col, 4) = 5",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "coalesce(user_extra.col, 4) = 5",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "L:0,R:0",
            "JoinVars": {
              "user_col": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                "Query": "select user_extra.col from user_extra where user_extra.col = :user_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "dont merge unsharded tables from different keyspaces",
    "query": "select 1 from main.unsharded join main_2.unsharded_tab",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from main.unsharded join main_2.unsharded_tab",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "unsharded_unsharded_tab",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main_2",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded_tab where 1 != 1",
            "Query": "select 1 from unsharded_tab",
            "Table": "unsharded_tab"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "main_2.unsharded_tab"
      ]
    }
  },
  {
    "comment": "Unsharded join with using",
    "query": "select * from unsharded_a join unsharded_b using (propertyId);",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from unsharded_a join unsharded_b using (propertyId);",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select * from unsharded_a join unsharded_b using (propertyId) where 1 != 1",
        "Query": "select * from unsharded_a join unsharded_b using (propertyId)",
        "Table": "unsharded_a, unsharded_b"
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b"
      ]
    }
  },
  {
    "comment": "Column aliases in Derived Table",
    "query": "select id2 from (select id from user) as x (id2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id2 from (select id from user) as x (id2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id2 from (select id from `user` where 1 != 1) as x(id2) where 1 != 1",
        "Query": "select id2 from (select id from `user`) as x(id2)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "single unsharded keyspace with derived table",
    "query": "select col from (select col from unsharded join unsharded_b) as u join unsharded_a ua limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from (select col from unsharded join unsharded_b) as u join unsharded_a ua limit 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select col from (select col from unsharded join unsharded_b where 1 != 1) as u join unsharded_a as ua where 1 != 1",
        "Query": "select col from (select col from unsharded join unsharded_b) as u join unsharded_a as ua limit 1",
        "Table": "unsharded, unsharded_a, unsharded_b"
      },
      "TablesUsed": [
        "main.unsharded",
        "main.unsharded_a",
        "main.unsharded_b"
      ]
    }
  },
  {
    "comment": "query builder with derived table having join inside it",
    "query": "select u.col from (select user.col from user join user_extra) as u join user_extra ue limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col from (select user.col from user join user_extra) as u join user_extra ue limit 1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "1",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra_user_extra",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.col from (select `user`.col from `user` where 1 != 1) as u where 1 != 1",
                    "Query": "select u.col from (select `user`.col from `user`) as u",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from user_extra where 1 != 1",
                    "Query": "select 1 from user_extra",
                    "Table": "user_extra"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
                "Query": "select 1 from user_extra as ue",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "left join with expressions",
    "query": "select user_extra.col+1 from user left join user_extra on user.col = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.col+1 from user left join user_extra on user.col = user_extra.col",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "user_extra.col + 1 as user_extra.col + 1"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col from `user` where 1 != 1",
                "Query": "select `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                "Query": "select user_extra.col from user_extra where user_extra.col = :user_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "left join with expressions, with three-way join (different code path)",
    "query": "select user.id, user_extra.col+1 from user left join user_extra on user.col = user_extra.col join user_extra e",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id, user_extra.col+1 from user left join user_extra on user.col = user_extra.col join user_extra e",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1",
        "TableName": "`user`_user_extra_user_extra",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":0 as id",
              "user_extra.col + 1 as user_extra.col + 1"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_col": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
                    "Query": "select `user`.id, `user`.col from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                    "Query": "select user_extra.col from user_extra where user_extra.col = :user_col",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra as e where 1 != 1",
            "Query": "select 1 from user_extra as e",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "left join with expressions coming from both sides",
    "query": "select user.foo+user_extra.col+1 from user left join user_extra on user.col = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.foo+user_extra.col+1 from user left join user_extra on user.col = user_extra.col",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "`user`.foo + user_extra.col + 1 as `user`.foo + user_extra.col + 1"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "L:0,R:0",
            "JoinVars": {
              "user_col": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.foo, `user`.col from `user` where 1 != 1",
                "Query": "select `user`.foo, `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                "Query": "select user_extra.col from user_extra where user_extra.col = :user_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Do not rewrite derived expressions when the derived table is merged with the outer",
    "query": "select col1, count(*) from (select colC+colD as col1 from user) as tbl group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(*) from (select colC+colD as col1 from user) as tbl group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, count(*), weight_string(col1) from (select colC + colD as col1 from `user` where 1 != 1) as tbl where 1 != 1 group by col1, weight_string(col1)",
            "OrderBy": "(0|2) ASC",
            "Query": "select col1, count(*), weight_string(col1) from (select colC + colD as col1 from `user`) as tbl group by col1, weight_string(col1) order by col1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "join with USING construct",
    "query": "select * from authoritative join unsharded_authoritative using(col1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from authoritative join unsharded_authoritative using(col1)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,L:2,R:0",
        "JoinVars": {
          "authoritative_col1": 0
        },
        "TableName": "authoritative_unsharded_authoritative",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select authoritative.col1 as col1, authoritative.user_id as user_id, authoritative.col2 as col2 from authoritative where 1 != 1",
            "Query": "select authoritative.col1 as col1, authoritative.user_id as user_id, authoritative.col2 as col2 from authoritative",
            "Table": "authoritative"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded_authoritative.col2 as col2 from unsharded_authoritative where 1 != 1",
            "Query": "select unsharded_authoritative.col2 as col2 from unsharded_authoritative where unsharded_authoritative.col1 = :authoritative_col1",
            "Table": "unsharded_authoritative"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_authoritative",
        "user.authoritative"
      ]
    }
  },
  {
    "comment": "derived table inside derived table with a where clause depending on columns from the derived table",
    "query": "select * from (select bar as push_it from (select foo as bar from (select id as foo from user) as t1) as t2) as t3 where push_it = 12",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select bar as push_it from (select foo as bar from (select id as foo from user) as t1) as t2) as t3 where push_it = 12",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select push_it from (select bar as push_it from (select foo as bar from (select id as foo from `user` where 1 != 1) as t1 where 1 != 1) as t2 where 1 != 1) as t3 where 1 != 1",
        "Query": "select push_it from (select bar as push_it from (select foo as bar from (select id as foo from `user` where id = 12) as t1) as t2) as t3",
        "Table": "`user`",
        "Values": [
          "12"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "use a view",
    "query": "select * from user.user_details_view",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user.user_details_view",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col from (select `user`.id, user_extra.col from `user`, user_extra where 1 != 1) as user_details_view where 1 != 1",
        "Query": "select id, col from (select `user`.id, user_extra.col from `user`, user_extra where `user`.id = user_extra.user_id) as user_details_view",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "use a view without qualifying the keyspace",
    "query": "select * from user_details_view",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from user_details_view",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, col from (select `user`.id, user_extra.col from `user`, user_extra where 1 != 1) as user_details_view where 1 != 1",
        "Query": "select id, col from (select `user`.id, user_extra.col from `user`, user_extra where `user`.id = user_extra.user_id) as user_details_view",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "left join where clauses #3 - assert that we can evaluate BETWEEN with the evalengine",
    "query": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.col between 10 and 20",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.col between 10 and 20",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "user_extra.col between 10 and 20",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "L:0,R:0",
            "JoinVars": {
              "user_col": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                "Query": "select user_extra.col from user_extra where user_extra.col = :user_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "missing and ambiguous column info is OK as long as we can send the query to a single unsharded keyspace",
    "query": "select missing_column from unsharded, unsharded_a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select missing_column from unsharded, unsharded_a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select missing_column from unsharded, unsharded_a where 1 != 1",
        "Query": "select missing_column from unsharded, unsharded_a",
        "Table": "unsharded, unsharded_a"
      },
      "TablesUsed": [
        "main.unsharded",
        "main.unsharded_a"
      ]
    }
  },
  {
    "comment": "missing and ambiguous column info is not valid when we have two different unsharded keyspaces in the query",
    "query": "select missing_column from unsharded, unsharded_tab",
    "plan": "Column 'missing_column' in field list is ambiguous"
  },
  {
    "comment": "join predicate only depending on the RHS should not turn outer join into inner join",
    "query": "select t1.id1, t2.id1 from t1 left join t1 as t2 on t2.id1 = t2.id2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t1.id1, t2.id1 from t1 left join t1 as t2 on t2.id1 = t2.id2",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "L:0,R:0",
        "TableName": "t1_t1",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "zlookup_unique",
              "Sharded": true
            },
            "FieldQuery": "select t1.id1 from t1 where 1 != 1",
            "Query": "select t1.id1 from t1",
            "Table": "t1"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "zlookup_unique",
              "Sharded": true
            },
            "FieldQuery": "select t2.id1 from t1 as t2 where 1 != 1",
            "Query": "select t2.id1 from t1 as t2 where t2.id1 = t2.id2",
            "Table": "t1"
          }
        ]
      },
      "TablesUsed": [
        "zlookup_unique.t1"
      ]
    }
  },
  {
    "comment": "left join with using has to be transformed into inner join with on condition",
    "query": "SELECT * FROM unsharded_authoritative as A LEFT JOIN unsharded_authoritative as B USING(col1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT * FROM unsharded_authoritative as A LEFT JOIN unsharded_authoritative as B USING(col1)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select * from unsharded_authoritative as A left join unsharded_authoritative as B using (col1) where 1 != 1",
        "Query": "select * from unsharded_authoritative as A left join unsharded_authoritative as B using (col1)",
        "Table": "unsharded_authoritative"
      },
      "TablesUsed": [
        "main.unsharded_authoritative"
      ]
    }
  },
  {
    "comment": "join query using table with muticolumn vindex",
    "query": "select 1 from multicol_tbl m1 join multicol_tbl m2 on m1.cola = m2.cola",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from multicol_tbl m1 join multicol_tbl m2 on m1.cola = m2.cola",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "m1_cola": 1
        },
        "TableName": "multicol_tbl_multicol_tbl",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1, m1.cola from multicol_tbl as m1 where 1 != 1",
            "Query": "select 1, m1.cola from multicol_tbl as m1",
            "Table": "multicol_tbl"
          },
          {
            "OperatorType": "Route",
            "Variant": "SubShard",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from multicol_tbl as m2 where 1 != 1",
            "Query": "select 1 from multicol_tbl as m2 where m2.cola = :m1_cola",
            "Table": "multicol_tbl",
            "Values": [
              ":m1_cola"
            ],
            "Vindex": "multicolIdx"
          }
        ]
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "select with a target destination",
    "query": "select * from `user[-]`.user_metadata",
    "plan": "VT09017: SELECT with a target destination is not allowed"
  },
  {
    "comment": "query that needs a hash join",
    "query": "select id from user left join (select col from user_extra limit 10) ue on user.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user left join (select col from user_extra limit 10) ue on user.col = ue.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "HashLeftJoin",
        "Collation": "binary",
        "ComparisonType": "INT16",
        "JoinColumnIndexes": "-2",
        "Predicate": "`user`.col = ue.col",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col, id from `user` where 1 != 1",
            "Query": "select `user`.col, id from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Limit",
            "Count": "10",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select ue.col from (select col from user_extra where 1 != 1) as ue where 1 != 1",
                "Query": "select ue.col from (select col from user_extra) as ue limit :__upper_limit",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "query that needs a hash join - both sides have limits",
    "query": "select id, user_id from (select id, col from user limit 10) u join (select col, user_id from user_extra limit 10) ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, user_id from (select id, col from user limit 10) u join (select col, user_id from user_extra limit 10) ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "HashJoin",
        "Collation": "binary",
        "ComparisonType": "INT16",
        "JoinColumnIndexes": "-1,2",
        "Predicate": "u.col = ue.col",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "10",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.id, u.col from (select id, col from `user` where 1 != 1) as u where 1 != 1",
                "Query": "select u.id, u.col from (select id, col from `user`) as u limit :__upper_limit",
                "Table": "`user`"
              }
            ]
          },
          {
            "OperatorType": "Limit",
            "Count": "10",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select ue.col, ue.user_id from (select col, user_id from user_extra where 1 != 1) as ue where 1 != 1",
                "Query": "select ue.col, ue.user_id from (select col, user_id from user_extra) as ue limit :__upper_limit",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "query that needs a hash join - both sides have limits. check that it can be merged even with the hash join",
    "query": "select id, user_id from (select id, col from user where id = 17 limit 10) u join (select col, user_id from user_extra where user_id = 17 limit 10) ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, user_id from (select id, col from user where id = 17 limit 10) u join (select col, user_id from user_extra where user_id = 17 limit 10) ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, user_id from (select id, col from `user` where 1 != 1) as u, (select col, user_id from user_extra where 1 != 1) as ue where 1 != 1",
        "Query": "select id, user_id from (select id, col from `user` where id = 17 limit 10) as u, (select col, user_id from user_extra where user_id = 17 limit 10) as ue where u.col = ue.col",
        "Table": "`user`, user_extra",
        "Values": [
          "17"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "query that needs a hash join - outer side has LIMIT. distinct should be pushed down",
    "query": "select distinct id, user_id from (select id, col from user) u left join (select col, user_id from user_extra limit 10) ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct id, user_id from (select id, col from user) u left join (select col, user_id from user_extra limit 10) ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "HashLeftJoin",
            "Collation": "binary",
            "ComparisonType": "INT16",
            "JoinColumnIndexes": "-1,2",
            "Predicate": "u.col = ue.col",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, col from (select id, col from `user` where 1 != 1) as u where 1 != 1",
                "Query": "select distinct id, col from (select id, col from `user`) as u",
                "Table": "`user`"
              },
              {
                "OperatorType": "Limit",
                "Count": "10",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select ue.col, ue.user_id from (select col, user_id from user_extra where 1 != 1) as ue where 1 != 1",
                    "Query": "select ue.col, ue.user_id from (select col, user_id from user_extra) as ue limit :__upper_limit",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "unexpanded columns are fine if we can push down into single route",
    "query": "select x from (select t.*, 1 as x from unsharded t union select t.*, 1 as x from unsharded t) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select x from (select t.*, 1 as x from unsharded t union select t.*, 1 as x from unsharded t) as x",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select x from (select t.*, 1 as x from unsharded as t where 1 != 1 union select t.*, 1 as x from unsharded as t where 1 != 1) as x where 1 != 1",
        "Query": "select x from (select t.*, 1 as x from unsharded as t union select t.*, 1 as x from unsharded as t) as x",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "pushing derived projection under the join should not cause problems",
    "query": "SELECT count(*) FROM (SELECT DISTINCT u.user_id FROM user u JOIN user_extra ue ON u.id = ue.user_id JOIN music m ON m.id = u.id) subquery_for_count",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT count(*) FROM (SELECT DISTINCT u.user_id FROM user u JOIN user_extra ue ON u.id = ue.user_id JOIN music m ON m.id = u.id) subquery_for_count",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1
            ],
            "Inputs": [
              {
                "OperatorType": "Distinct",
                "Collations": [
                  "(0:2)",
                  "1"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "R:0,L:1,R:1",
                    "JoinVars": {
                      "m_id": 0
                    },
                    "TableName": "music_`user`, user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select subquery_for_count.`m.id`, 1 from (select m.id as `m.id` from music as m where 1 != 1) as subquery_for_count where 1 != 1",
                        "Query": "select distinct subquery_for_count.`m.id`, 1 from (select m.id as `m.id` from music as m) as subquery_for_count",
                        "Table": "music"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "EqualUnique",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select subquery_for_count.user_id, weight_string(subquery_for_count.user_id) from (select u.user_id from `user` as u, user_extra as ue where 1 != 1) as subquery_for_count where 1 != 1",
                        "Query": "select distinct subquery_for_count.user_id, weight_string(subquery_for_count.user_id) from (select u.user_id from `user` as u, user_extra as ue where u.id = :m_id and u.id = ue.user_id) as subquery_for_count",
                        "Table": "`user`, user_extra",
                        "Values": [
                          ":m_id"
                        ],
                        "Vindex": "user_index"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "join table influencing vindex selection with ignore and use vindex syntax",
    "query": "select u.intcol, u.id from user u use vindex (name_user_map) join music m ignore vindex(user_index) on u.col = m.col where u.name = 'bb' and u.id = 3 and m.user_id = 5 and m.id = 20",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.intcol, u.id from user u use vindex (name_user_map) join music m ignore vindex(user_index) on u.col = m.col where u.name = 'bb' and u.id = 3 and m.user_id = 5 and m.id = 20",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1",
        "JoinVars": {
          "u_col": 2
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "VindexLookup",
            "Variant": "Equal",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "Values": [
              "'bb'"
            ],
            "Vindex": "name_user_map",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "IN",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
                "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
                "Table": "name_user_vdx",
                "Values": [
                  "::name"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "ByDestination",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.intcol, u.id, u.col from `user` as u where 1 != 1",
                "Query": "select u.intcol, u.id, u.col from `user` as u where u.`name` = 'bb' and u.id = 3",
                "Table": "`user`"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from music as m where 1 != 1",
            "Query": "select 1 from music as m where m.user_id = 5 and m.id = 20 and m.col = :u_col",
            "Table": "music",
            "Values": [
              "20"
            ],
            "Vindex": "music_user_map"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  }
]
