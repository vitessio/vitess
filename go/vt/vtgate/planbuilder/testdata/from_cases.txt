# Single table sharded scatter
"select col from user"
{
  "QueryType": "SELECT",
  "Original": "select col from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Single table unsharded
"select col from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select col from unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select col from unsharded where 1 != 1",
    "Query": "select col from unsharded",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Select from sequence
"select next 2 values from seq"
{
  "QueryType": "SELECT",
  "Original": "select next 2 values from seq",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNext",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select next 2 values from seq where 1 != 1",
    "Query": "select next 2 values from seq",
    "Table": "seq"
  }
}
Gen4 plan same as above

# Select from reference
"select * from ref"
{
  "QueryType": "SELECT",
  "Original": "select * from ref",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from ref where 1 != 1",
    "Query": "select * from ref",
    "Table": "ref"
  }
}
Gen4 plan same as above

# Multi-table unsharded
"select m1.col from unsharded as m1 join unsharded as m2"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 join unsharded as m2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m1 join unsharded as m2 where 1 != 1",
    "Query": "select m1.col from unsharded as m1 join unsharded as m2",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 join unsharded as m2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m1, unsharded as m2 where 1 != 1",
    "Query": "select m1.col from unsharded as m1, unsharded as m2",
    "Table": "unsharded"
  }
}

# Multi-table, multi-chunk
"select music.col from user join music"
{
  "QueryType": "SELECT",
  "Original": "select music.col from user join music",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` where 1 != 1",
        "Query": "select 1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col from music where 1 != 1",
        "Query": "select music.col from music",
        "Table": "music"
      }
    ]
  }
}
Gen4 plan same as above

# routing rules where table name matches, and there's no alias.
"select * from second_user.user"
{
  "QueryType": "SELECT",
  "Original": "select * from second_user.user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user`",
    "Table": "`user`"
  }
}

# routing rules where table name matches, and there's an alias.
"select * from second_user.user as a"
{
  "QueryType": "SELECT",
  "Original": "select * from second_user.user as a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` as a where 1 != 1",
    "Query": "select * from `user` as a",
    "Table": "`user`"
  }
}

# routing rules where table name does not match, and there's no alias.
"select * from route1"
{
  "QueryType": "SELECT",
  "Original": "select * from route1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` as route1 where 1 != 1",
    "Query": "select * from `user` as route1",
    "Table": "`user`"
  }
}

# routing rules where table name does not match, and there's an alias.
"select * from route1 as a"
{
  "QueryType": "SELECT",
  "Original": "select * from route1 as a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` as a where 1 != 1",
    "Query": "select * from `user` as a",
    "Table": "`user`"
  }
}

# routing rules with master targeting
"select * from master_redirect"
{
  "QueryType": "SELECT",
  "Original": "select * from master_redirect",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` as master_redirect where 1 != 1",
    "Query": "select * from `user` as master_redirect",
    "Table": "`user`"
  }
}

# routing rules bad table
"select * from bad_table"
"Unknown database 'noks' in vschema"
Gen4 plan same as above

# routing rules disabled table
"select * from disabled"
"table disabled has been disabled"
Gen4 plan same as above

# ',' join
"select music.col from user, music"
{
  "QueryType": "SELECT",
  "Original": "select music.col from user, music",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` where 1 != 1",
        "Query": "select 1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col from music where 1 != 1",
        "Query": "select music.col from music",
        "Table": "music"
      }
    ]
  }
}
Gen4 plan same as above

# ',' join unsharded
"select u1.a, u2.a from unsharded u1, unsharded u2"
{
  "QueryType": "SELECT",
  "Original": "select u1.a, u2.a from unsharded u1, unsharded u2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select u1.a, u2.a from unsharded as u1, unsharded as u2 where 1 != 1",
    "Query": "select u1.a, u2.a from unsharded as u1, unsharded as u2",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# ',' 3-way join unsharded
"select u1.a, u2.a from unsharded u1, unsharded u2, unsharded u3"
{
  "QueryType": "SELECT",
  "Original": "select u1.a, u2.a from unsharded u1, unsharded u2, unsharded u3",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select u1.a, u2.a from unsharded as u1, unsharded as u2, unsharded as u3 where 1 != 1",
    "Query": "select u1.a, u2.a from unsharded as u1, unsharded as u2, unsharded as u3",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Left join, single chunk
"select m1.col from unsharded as m1 left join unsharded as m2 on m1.a=m2.b"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a=m2.b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a = m2.b where 1 != 1",
    "Query": "select m1.col from unsharded as m1 left join unsharded as m2 on m1.a = m2.b",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Left join, multi-chunk
"select u.col from user u left join unsharded m on u.a = m.b"
{
  "QueryType": "SELECT",
  "Original": "select u.col from user u left join unsharded m on u.a = m.b",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "u_a": 1
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.col, u.a from `user` as u where 1 != 1",
        "Query": "select u.col, u.a from `user` as u",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded as m where 1 != 1",
        "Query": "select 1 from unsharded as m where m.b = :u_a",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.col from user u left join unsharded m on u.a = m.b",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-2",
    "JoinVars": {
      "u_a": 0
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.a, u.col from `user` as u where 1 != 1",
        "Query": "select u.a, u.col from `user` as u",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded as m where 1 != 1",
        "Query": "select 1 from unsharded as m where m.b = :u_a",
        "Table": "unsharded"
      }
    ]
  }
}

# Three-way left join
"select user.col, m2.foo from user left join unsharded as m1 on user.col = m1.col left join unsharded as m2 on m1.col = m2.col"
{
  "QueryType": "SELECT",
  "Original": "select user.col, m2.foo from user left join unsharded as m1 on user.col = m1.col left join unsharded as m2 on m1.col = m2.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-1,1",
    "JoinVars": {
      "m1_col": 1
    },
    "TableName": "`user`_unsharded_unsharded",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "-1,1",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select m1.col from unsharded as m1 where 1 != 1",
            "Query": "select m1.col from unsharded as m1 where m1.col = :user_col",
            "Table": "unsharded"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m2.foo from unsharded as m2 where 1 != 1",
        "Query": "select m2.foo from unsharded as m2 where m2.col = :m1_col",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col, m2.foo from user left join unsharded as m1 on user.col = m1.col left join unsharded as m2 on m1.col = m2.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-2,1",
    "JoinVars": {
      "m1_col": 0
    },
    "TableName": "`user`_unsharded_unsharded",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinColumnIndexes": "1,-1",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select m1.col from unsharded as m1 where 1 != 1",
            "Query": "select m1.col from unsharded as m1 where m1.col = :user_col",
            "Table": "unsharded"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select m2.foo from unsharded as m2 where 1 != 1",
        "Query": "select m2.foo from unsharded as m2 where m2.col = :m1_col",
        "Table": "unsharded"
      }
    ]
  }
}

# Three-way left join, right-associated
"select user.col from user left join user_extra as e left join unsharded as m1 on m1.col = e.col on user.col = e.col"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user left join user_extra as e left join unsharded as m1 on m1.col = e.col on user.col = e.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinVars": {
          "e_col": 0
        },
        "TableName": "user_extra_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select e.col from user_extra as e where 1 != 1",
            "Query": "select e.col from user_extra as e where e.col = :user_col",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m1 where 1 != 1",
            "Query": "select 1 from unsharded as m1 where m1.col = :e_col",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user left join user_extra as e left join unsharded as m1 on m1.col = e.col on user.col = e.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Join",
        "Variant": "LeftJoin",
        "JoinVars": {
          "e_col": 0
        },
        "TableName": "user_extra_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select e.col from user_extra as e where 1 != 1",
            "Query": "select e.col from user_extra as e",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m1 where 1 != 1",
            "Query": "select 1 from unsharded as m1 where m1.col = :e_col and :user_col = :e_col",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}

# Right join
"select m1.col from unsharded as m1 right join unsharded as m2 on m1.a=m2.b"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 right join unsharded as m2 on m1.a=m2.b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m2 left join unsharded as m1 on m1.a = m2.b where 1 != 1",
    "Query": "select m1.col from unsharded as m2 left join unsharded as m1 on m1.a = m2.b",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Right join with a join LHS
"select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a=m2.b"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a=m2.b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m3 left join (unsharded as m1 join unsharded as m2) on m1.a = m2.b where 1 != 1",
    "Query": "select m1.col from unsharded as m3 left join (unsharded as m1 join unsharded as m2) on m1.a = m2.b",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 join unsharded as m2 right join unsharded as m3 on m1.a=m2.b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m3 left join (unsharded as m1, unsharded as m2) on m1.a = m2.b where 1 != 1",
    "Query": "select m1.col from unsharded as m3 left join (unsharded as m1, unsharded as m2) on m1.a = m2.b",
    "Table": "unsharded"
  }
}

# Straight-join
"select m1.col from unsharded as m1 straight_join unsharded as m2"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from unsharded as m1 straight_join unsharded as m2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m1 straight_join unsharded as m2 where 1 != 1",
    "Query": "select m1.col from unsharded as m1 straight_join unsharded as m2",
    "Table": "unsharded"
  }
}

# Three-way join
"select user.col from user join unsharded as m1 join unsharded as m2"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join unsharded as m1 join unsharded as m2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_unsharded_unsharded",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as m1 where 1 != 1",
            "Query": "select 1 from unsharded as m1",
            "Table": "unsharded"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded as m2 where 1 != 1",
        "Query": "select 1 from unsharded as m2",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join unsharded as m1 join unsharded as m2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded as m1, unsharded as m2 where 1 != 1",
        "Query": "select 1 from unsharded as m1, unsharded as m2",
        "Table": "unsharded"
      }
    ]
  }
}

# Parenthesized, single chunk
"select user.col from user join (unsharded as m1 join unsharded as m2)"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join (unsharded as m1 join unsharded as m2)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from (unsharded as m1 join unsharded as m2) where 1 != 1",
        "Query": "select 1 from (unsharded as m1 join unsharded as m2)",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join (unsharded as m1 join unsharded as m2)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded as m1, unsharded as m2 where 1 != 1",
        "Query": "select 1 from unsharded as m1, unsharded as m2",
        "Table": "unsharded"
      }
    ]
  }
}

# Parenthesized, multi-chunk
"select user.col from user join (user as u1 join unsharded)"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join (user as u1 join unsharded)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` as u1 where 1 != 1",
            "Query": "select 1 from `user` as u1",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join (user as u1 join unsharded)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "`user`_`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` as u1 where 1 != 1",
        "Query": "select 1 from `user` as u1",
        "Table": "`user`"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}

# index hints, make sure they are not stripped.
"select user.col from user use index(a)"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user use index(a)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` use index (a) where 1 != 1",
    "Query": "select `user`.col from `user` use index (a)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# mergeable sharded join on unique vindex
"select user.col from user join user_extra on user.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}

# mergeable sharded join on unique vindex (parenthesized ON clause)
"select user.col from user join user_extra on (user.id = user_extra.user_id)"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on (user.id = user_extra.user_id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on (user.id = user_extra.user_id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}

# mergeable sharded join on unique vindex, with a stray condition
"select user.col from user join user_extra on user.col between 1 and 2 and user.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.col between 1 and 2 and user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on `user`.col between 1 and 2 and `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on `user`.col between 1 and 2 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.col between 1 and 2 and user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where `user`.col between 1 and 2 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra"
  }
}

# mergeable sharded join on unique vindex, swapped operands
"select user.col from user join user_extra on user_extra.user_id = user.id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user_extra.user_id = user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on user_extra.user_id = `user`.id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on user_extra.user_id = `user`.id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user_extra.user_id = user.id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where user_extra.user_id = `user`.id",
    "Table": "`user`, user_extra"
  }
}

# mergeable sharded join on unique vindex, and condition
"select user.col from user join user_extra on user.id = 5 and user.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = 5 and user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on `user`.id = 5 and `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on `user`.id = 5 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = 5 and user.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where `user`.id = 5 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# sharded join on unique vindex, inequality
"select user.col from user join user_extra on user.id < user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id \u003c user_extra.user_id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 1
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col, `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where :user_id \u003c user_extra.user_id",
        "Table": "user_extra"
      }
    ]
  }
}

# sharded join, non-col reference RHS
"select user.col from user join user_extra on user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# sharded join, non-col reference LHS
"select user.col from user join user_extra on 5 = user.id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on 5 = user.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# sharded join, non-vindex col
"select user.col from user join user_extra on user.id = user_extra.col"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = user_extra.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 1
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col, `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.col = :user_id",
        "Table": "user_extra"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.id = user_extra.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.id = :user_extra_col",
        "Table": "`user`",
        "Values": [
          ":user_extra_col"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# sharded join, non-unique vindex
"select user.col from user_extra join user on user_extra.user_id = user.name"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user_extra join user on user_extra.user_id = user.name",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_user_id": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.user_id from user_extra where 1 != 1",
        "Query": "select user_extra.user_id from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.`name` = :user_extra_user_id",
        "Table": "`user`",
        "Values": [
          ":user_extra_user_id"
        ],
        "Vindex": "name_user_map"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user_extra join user on user_extra.user_id = user.name",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-2",
    "JoinVars": {
      "user_name": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.`name`, `user`.col from `user` where 1 != 1",
        "Query": "select `user`.`name`, `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.user_id = :user_name",
        "Table": "user_extra",
        "Values": [
          ":user_name"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# join with reference table
"select user.col from user join ref"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join ref",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join ref where 1 != 1",
    "Query": "select `user`.col from `user` join ref",
    "Table": "`user`, ref"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join ref",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, ref where 1 != 1",
    "Query": "select `user`.col from `user`, ref",
    "Table": "`user`, ref"
  }
}

# reference table self-join
"select r1.col from ref r1 join ref"
{
  "QueryType": "SELECT",
  "Original": "select r1.col from ref r1 join ref",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select r1.col from ref as r1 join ref where 1 != 1",
    "Query": "select r1.col from ref as r1 join ref",
    "Table": "ref"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select r1.col from ref r1 join ref",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select r1.col from ref as r1, ref where 1 != 1",
    "Query": "select r1.col from ref as r1, ref",
    "Table": "ref"
  }
}

# reference table can merge with other opcodes left to right.
"select ref.col from ref join user"
{
  "QueryType": "SELECT",
  "Original": "select ref.col from ref join user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select ref.col from ref join `user` where 1 != 1",
    "Query": "select ref.col from ref join `user`",
    "Table": "`user`, ref"
  }
}

# reference table can merge with other opcodes left to right and vindex value is in the plan.
# This tests that route.Merge also copies the condition to the LHS.
"select ref.col from ref join (select aa from user where user.id=1) user"
{
  "QueryType": "SELECT",
  "Original": "select ref.col from ref join (select aa from user where user.id=1) user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select ref.col from ref join (select aa from `user` where 1 != 1) as `user` where 1 != 1",
    "Query": "select ref.col from ref join (select aa from `user` where `user`.id = 1) as `user`",
    "Table": "`user`, ref",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}

# routing rules for join, unsharded route wins if we can't find a merged route
"select route2.col from route2 join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select route2.col from route2 join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "unsharded_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select route2.col from unsharded as route2 where 1 != 1",
        "Query": "select route2.col from unsharded as route2",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# derived table
"select id from (select id, col from user where id = 5) as t"
{
  "QueryType": "SELECT",
  "Original": "select id from (select id, col from user where id = 5) as t",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id, col from `user` where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id, col from `user` where id = 5) as t",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# derived table with join
"select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t join user_extra on t.id = user_extra.user_id where 1 != 1",
    "Query": "select t.id from (select id from `user` where id = 5) as t join user_extra on t.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t, user_extra where 1 != 1",
    "Query": "select t.id from (select id from `user` where id = 5) as t, user_extra where t.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# derived table with join, and aliased references
"select t.id from (select user.id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select user.id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select `user`.id from `user` where 1 != 1) as t join user_extra on t.id = user_extra.user_id where 1 != 1",
    "Query": "select t.id from (select `user`.id from `user` where `user`.id = 5) as t join user_extra on t.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select user.id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select `user`.id from `user` where 1 != 1) as t, user_extra where 1 != 1",
    "Query": "select t.id from (select `user`.id from `user` where `user`.id = 5) as t, user_extra where t.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# derived table with join, duplicate columns
"select t.id from (select user.id, id from user where user.id = 5) as t join user_extra on t.id = user_extra.user_id"
"duplicate column aliases: id"
Gen4 error: Duplicate column name 'id'

# derived table in RHS of join
"select t.id from user_extra join (select id from user where id = 5) as t on t.id = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select t.id from user_extra join (select id from user where id = 5) as t on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from user_extra join (select id from `user` where 1 != 1) as t on t.id = user_extra.user_id where 1 != 1",
    "Query": "select t.id from user_extra join (select id from `user` where id = 5) as t on t.id = user_extra.user_id",
    "Table": "user_extra, `user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.id from user_extra join (select id from user where id = 5) as t on t.id = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from user_extra, (select id from `user` where 1 != 1) as t where 1 != 1",
    "Query": "select t.id from user_extra, (select id from `user` where id = 5) as t where t.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# derived table in FROM with cross-shard join
"select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.col"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id from user where id = 5) as t join user_extra on t.id = user_extra.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "t_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t where 1 != 1",
        "Query": "select t.id from (select id from `user` where id = 5) as t",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.col = :t_id",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# routing rules for derived table
"select id from (select id, col from route1 where id = 5) as t"
{
  "QueryType": "SELECT",
  "Original": "select id from (select id, col from route1 where id = 5) as t",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# derived table missing columns
"select t.id from (select id from user) as t join user_extra on t.id = user_extra.user_id where t.col = 42"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id from user) as t join user_extra on t.id = user_extra.user_id where t.col = 42",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t join user_extra on t.id = user_extra.user_id where 1 != 1",
    "Query": "select t.id from (select id from `user`) as t join user_extra on t.id = user_extra.user_id where t.col = 42",
    "Table": "`user`, user_extra"
  }
}
Gen4 error: symbol t.col not found

# routing rules for derived table where the constraint is in the outer query
"select id from (select id, col from route1) as t where id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from (select id, col from route1) as t where id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id, col from `user` as route1) as t where id = 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from (select id, col from route1) as t where id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# routing rules for derived table where the constraint is in the outer query
"select id from (select id+col as foo from route1) as t where foo = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from (select id+col as foo from route1) as t where foo = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id + col as foo from `user` as route1 where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id + col as foo from `user` as route1) as t where foo = 5",
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from (select id+col as foo from route1) as t where foo = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id + col as foo from `user` as route1 where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id + col as foo from `user` as route1 where id + col = 5) as t",
    "Table": "`user`"
  }
}

# push predicate on joined derived tables
"select t.id from (select id, textcol1 as baz from route1) as t join (select id, textcol1+textcol1 as baz from user) as s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id, textcol1 as baz from route1) as t join (select id, textcol1+textcol1 as baz from user) as s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select id, textcol1 as baz from `user` as route1 where 1 != 1) as t join (select id, textcol1 + textcol1 as baz from `user` where 1 != 1) as s on t.id = s.id where 1 != 1",
    "Query": "select t.id from (select id, textcol1 as baz from `user` as route1) as t join (select id, textcol1 + textcol1 as baz from `user`) as s on t.id = s.id where t.baz = '3' and s.baz = '3'",
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select id, textcol1 as baz from route1) as t join (select id, textcol1+textcol1 as baz from user) as s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.id from (select id, textcol1 as baz from `user` as route1 where 1 != 1) as t, (select id, textcol1 + textcol1 as baz from `user` where 1 != 1) as s where 1 != 1",
    "Query": "select t.id from (select id, textcol1 as baz from `user` as route1 where textcol1 = '3') as t, (select id, textcol1 + textcol1 as baz from `user` where textcol1 + textcol1 = '3') as s where t.id = s.id",
    "Table": "`user`"
  }
}

# recursive derived table predicate push down
"select bar from (select foo+4 as bar from (select colA+colB as foo from user) as u) as t where bar = 5"
{
  "QueryType": "SELECT",
  "Original": "select bar from (select foo+4 as bar from (select colA+colB as foo from user) as u) as t where bar = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
    "Query": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user`) as u) as t where bar = 5",
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select bar from (select foo+4 as bar from (select colA+colB as foo from user) as u) as t where bar = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
    "Query": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where colA + colB + 4 = 5) as u) as t",
    "Table": "`user`"
  }
}

# recursive derived table lookups
"select id from (select id from (select id from user) as u) as t where id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from (select id from (select id from user) as u) as t where id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id from (select id from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id from (select id from `user`) as u) as t where id = 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from (select id from (select id from user) as u) as t where id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from (select id from (select id from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
    "Query": "select id from (select id from (select id from `user` where id = 5) as u) as t",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# merge derived tables with single-shard routes
"select u.col, e.col from (select col from user where id = 5) as u join (select col from user_extra where user_id = 5) as e"
{
  "QueryType": "SELECT",
  "Original": "select u.col, e.col from (select col from user where id = 5) as u join (select col from user_extra where user_id = 5) as e",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u.col, e.col from (select col from `user` where 1 != 1) as u join (select col from user_extra where 1 != 1) as e where 1 != 1",
    "Query": "select u.col, e.col from (select col from `user` where id = 5) as u join (select col from user_extra where user_id = 5) as e",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# join of information_schema with normal table
"select unsharded.foo from information_schema.a join unsharded"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.foo from information_schema.a join unsharded",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "information_schema.a_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectDBA",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from information_schema.a where 1 != 1",
        "Query": "select 1 from information_schema.a",
        "Table": "information_schema.a"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.foo from unsharded where 1 != 1",
        "Query": "select unsharded.foo from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}
Gen4 plan same as above

# join of normal table with information_schema
"select unsharded.foo from unsharded join information_schema.a"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.foo from unsharded join information_schema.a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "unsharded_information_schema.a",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.foo from unsharded where 1 != 1",
        "Query": "select unsharded.foo from unsharded",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectDBA",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from information_schema.a where 1 != 1",
        "Query": "select 1 from information_schema.a",
        "Table": "information_schema.a"
      }
    ]
  }
}
Gen4 plan same as above

# wire-up on join with cross-shard derived table
"select t.col1 from (select user.id, user.col1 from user join user_extra) as t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id"
{
  "QueryType": "SELECT",
  "Original": "select t.col1 from (select user.id, user.col1 from user join user_extra) as t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "t_col1": 0,
      "t_id": 1
    },
    "TableName": "`user`_user_extra_unsharded",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Columns": [
          1,
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col1 from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col1 from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded where 1 != 1",
        "Query": "select 1 from unsharded where unsharded.col1 = :t_col1 and unsharded.id = :t_id",
        "Table": "unsharded"
      }
    ]
  }
}

# wire-up on within cross-shard derived table
"select t.id from (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) as t"
{
  "QueryType": "SELECT",
  "Original": "select t.id from (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) as t",
  "Instructions": {
    "OperatorType": "Subquery",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "JoinVars": {
          "user_col": 2
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col1, `user`.col from `user` where 1 != 1",
            "Query": "select `user`.id, `user`.col1, `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.col = :user_col",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# Join with cross-shard derived table on rhs
"select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t"
{
  "QueryType": "SELECT",
  "Original": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "unsharded_a_`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded_a as ua where 1 != 1",
        "Query": "select 1 from unsharded_a as ua",
        "Table": "unsharded_a"
      },
      {
        "OperatorType": "Subquery",
        "Columns": [
          1
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col1 from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col1 from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "2",
    "TableName": "unsharded_a_`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded_a as ua where 1 != 1",
        "Query": "select 1 from unsharded_a as ua",
        "Table": "unsharded_a"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col1 from `user` where 1 != 1",
            "Query": "select `user`.id, `user`.col1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# Join with cross-shard derived table on rhs - push down join predicate to derived table
"select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t on t.id = ua.id"
"unsupported: filtering on results of cross-shard subquery"
{
  "QueryType": "SELECT",
  "Original": "select t.col1 from unsharded_a ua join (select user.id, user.col1 from user join user_extra) as t on t.id = ua.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "2",
    "JoinVars": {
      "ua_id": 0
    },
    "TableName": "unsharded_a_`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select ua.id from unsharded_a as ua where 1 != 1",
        "Query": "select ua.id from unsharded_a as ua",
        "Table": "unsharded_a"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "JoinVars": {
          "user_id": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col1 from `user` where 1 != 1",
            "Query": "select `user`.id, `user`.col1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where :user_id = :ua_id",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# subquery in ON clause, single route
"select unsharded_a.col from unsharded_a join unsharded_b on (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded_a.col from unsharded_a join unsharded_b on (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded_a.col from unsharded_a join unsharded_b on :__sq1 where 1 != 1",
        "Query": "select unsharded_a.col from unsharded_a join unsharded_b on :__sq1",
        "Table": "unsharded_a, unsharded_b"
      }
    ]
  }
}

# subquery in ON clause as sub-expression
"select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col+(select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col+(select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col + :__sq1 where 1 != 1",
        "Query": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col + :__sq1",
        "Table": "unsharded_a, unsharded_b"
      }
    ]
  }
}

# IN subquery in ON clause, single route
"select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded_a.col from unsharded_a join unsharded_b on unsharded_a.col in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded_a.col from unsharded_a join unsharded_b on :__sq_has_values1 = 1 and unsharded_a.col in ::__sq1 where 1 != 1",
        "Query": "select unsharded_a.col from unsharded_a join unsharded_b on :__sq_has_values1 = 1 and unsharded_a.col in ::__sq1",
        "Table": "unsharded_a, unsharded_b"
      }
    ]
  }
}

# subquery in ON clause, with join primitives
"select unsharded.col from unsharded join user on user.col in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.col from unsharded join user on user.col in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "unsharded_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.col from unsharded where 1 != 1",
            "Query": "select unsharded.col from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# subquery in ON clause, with left join primitives
# The subquery is not pulled all the way out.
"select unsharded.col from unsharded left join user on user.col in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.col from unsharded left join user on user.col in (select col from user)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "LeftJoin",
    "JoinColumnIndexes": "-1",
    "TableName": "unsharded_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.col from unsharded where 1 != 1",
        "Query": "select unsharded.col from unsharded",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# subquery in ON clause, with join primitives, and join on top
# The subquery is not pulled all the way out.
"select unsharded.col from unsharded join user on user.col in (select col from user) join unsharded_a"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.col from unsharded join user on user.col in (select col from user) join unsharded_a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "unsharded_`user`_unsharded_a",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1",
            "TableName": "unsharded_`user`",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectUnsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select unsharded.col from unsharded where 1 != 1",
                "Query": "select unsharded.col from unsharded",
                "Table": "unsharded"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from `user` where 1 != 1",
                "Query": "select 1 from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 1 from unsharded_a where 1 != 1",
        "Query": "select 1 from unsharded_a",
        "Table": "unsharded_a"
      }
    ]
  }
}

# keyspace-qualified queries
"select user.user.col1, main.unsharded.col1 from user.user join main.unsharded where main.unsharded.col2 = user.user.col2"
{
  "QueryType": "SELECT",
  "Original": "select user.user.col1, main.unsharded.col1 from user.user join main.unsharded where main.unsharded.col2 = user.user.col2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "JoinVars": {
      "user_col2": 1
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1, `user`.col2 from `user` where 1 != 1",
        "Query": "select `user`.col1, `user`.col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.col1 from unsharded where 1 != 1",
        "Query": "select unsharded.col1 from unsharded where unsharded.col2 = :user_col2",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.user.col1, main.unsharded.col1 from user.user join main.unsharded where main.unsharded.col2 = user.user.col2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-2,1",
    "JoinVars": {
      "user_col2": 0
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col2, `user`.col1 from `user` where 1 != 1",
        "Query": "select `user`.col2, `user`.col1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.col1 from unsharded where 1 != 1",
        "Query": "select unsharded.col1 from unsharded where unsharded.col2 = :user_col2",
        "Table": "unsharded"
      }
    ]
  }
}

# implicit table reference for unsharded keyspace
"select main.foo.col from main.foo"
{
  "QueryType": "SELECT",
  "Original": "select main.foo.col from main.foo",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select foo.col from foo where 1 != 1",
    "Query": "select foo.col from foo",
    "Table": "foo"
  }
}
Gen4 plan same as above

# col refs should be case-insensitive
"select user.col from user join user_extra on user.ID = user_extra.User_Id"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.ID = user_extra.User_Id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user` join user_extra on `user`.ID = user_extra.User_Id where 1 != 1",
    "Query": "select `user`.col from `user` join user_extra on `user`.ID = user_extra.User_Id",
    "Table": "`user`, user_extra"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user.ID = user_extra.User_Id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col from `user`, user_extra where 1 != 1",
    "Query": "select `user`.col from `user`, user_extra where `user`.ID = user_extra.User_Id",
    "Table": "`user`, user_extra"
  }
}

# derived table with join primitive (FROM)
"select id, t.id from (select user.id from user join user_extra) as t"
{
  "QueryType": "SELECT",
  "Original": "select id, t.id from (select user.id from user join user_extra) as t",
  "Instructions": {
    "OperatorType": "Subquery",
    "Columns": [
      0,
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id from `user` where 1 != 1",
            "Query": "select `user`.id from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# database call in ON clause.
# The on clause is weird because the substitution must even for root expressions.
"select u1.a from unsharded u1 join unsharded u2 on database()"
{
  "QueryType": "SELECT",
  "Original": "select u1.a from unsharded u1 join unsharded u2 on database()",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select u1.a from unsharded as u1 join unsharded as u2 on database() where 1 != 1",
    "Query": "select u1.a from unsharded as u1 join unsharded as u2 on database()",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u1.a from unsharded u1 join unsharded u2 on database()",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select u1.a from unsharded as u1, unsharded as u2 where 1 != 1",
    "Query": "select u1.a from unsharded as u1, unsharded as u2 where database()",
    "Table": "unsharded"
  }
}

# last_insert_id for dual
"select last_insert_id()"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id()",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "last_insert_id()"
    ],
    "Expressions": [
      ":__lastInsertId"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}

# last_insert_id for sharded keyspace
"select last_insert_id() from user"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id() from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select :__lastInsertId as `last_insert_id()` from `user` where 1 != 1",
    "Query": "select :__lastInsertId as `last_insert_id()` from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# last_insert_id for unsharded route
"select last_insert_id() from main.unsharded"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id() from main.unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select :__lastInsertId as `last_insert_id()` from unsharded where 1 != 1",
    "Query": "select :__lastInsertId as `last_insert_id()` from unsharded",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# join with USING construct
"select user.id from user join user_extra using(id)"
{
  "QueryType": "SELECT",
  "Original": "select user.id from user join user_extra using(id)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.id = :user_id",
        "Table": "user_extra"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.id from user join user_extra using(id)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_id": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user` where `user`.id = :user_extra_id",
        "Table": "`user`",
        "Values": [
          ":user_extra_id"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# join with bindvariables
"SELECT `user`.`id` FROM `user` INNER JOIN `user_extra` ON `user`.`id` = `user_extra`.`assembly_id` WHERE `user_extra`.`user_id` = 2"
{
  "QueryType": "SELECT",
  "Original": "SELECT `user`.`id` FROM `user` INNER JOIN `user_extra` ON `user`.`id` = `user_extra`.`assembly_id` WHERE `user_extra`.`user_id` = 2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.assembly_id = :user_id and user_extra.user_id = 2",
        "Table": "user_extra",
        "Values": [
          2
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "SELECT `user`.`id` FROM `user` INNER JOIN `user_extra` ON `user`.`id` = `user_extra`.`assembly_id` WHERE `user_extra`.`user_id` = 2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_assembly_id": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.assembly_id from user_extra where 1 != 1",
        "Query": "select user_extra.assembly_id from user_extra where user_extra.user_id = 2",
        "Table": "user_extra",
        "Values": [
          2
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user` where `user`.id = :user_extra_assembly_id",
        "Table": "`user`",
        "Values": [
          ":user_extra_assembly_id"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# verify ',' vs JOIN precedence
"select u1.a from unsharded u1, unsharded u2 join unsharded u3 on u1.a = u2.a"
"symbol u1.a not found"
Gen4 plan same as above

# first expression fails for ',' join (code coverage: ensure error is returned)
"select user.foo.col from user.foo, user"
"table foo not found"
Gen4 plan same as above

# table names should be case-sensitive
"select unsharded.id from unsharded where Unsharded.val = 1"
"symbol Unsharded.val not found"
Gen4 plan same as above

# implicit table reference for sharded keyspace
"select user.foo.col from user.foo"
"table foo not found"
Gen4 plan same as above

# duplicate symbols
"select user.id from user join user"
"Not unique table/alias: 'user'"
Gen4 plan same as above

# duplicate symbols for merging routes
"select user.id from user join user_extra user on user.id = user.user_id"
"Not unique table/alias: 'user'"
Gen4 plan same as above

# non-existent table
"select c from t"
"table t not found"
Gen4 plan same as above

# non-existent table on left of join
"select c from t join user"
"table t not found"
Gen4 plan same as above

# non-existent table on right of join
"select c from user join t"
"table t not found"
Gen4 plan same as above

# query with parens is planned correctly
"select m1.col from (unsharded as m1, unsharded as m2)"
{
  "QueryType": "SELECT",
  "Original": "select m1.col from (unsharded as m1, unsharded as m2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from (unsharded as m1, unsharded as m2) where 1 != 1",
    "Query": "select m1.col from (unsharded as m1, unsharded as m2)",
    "Table": "unsharded"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select m1.col from (unsharded as m1, unsharded as m2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select m1.col from unsharded as m1, unsharded as m2 where 1 != 1",
    "Query": "select m1.col from unsharded as m1, unsharded as m2",
    "Table": "unsharded"
  }
}
