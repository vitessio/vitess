[
  {
    "comment": "count(*) spread across join",
    "query": "select count(*) from user join user_extra on user.foo = user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user join user_extra on user.foo = user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                    "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra where user_extra.bar = :user_foo group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sum spread across join",
    "query": "select sum(user.col) from user join user_extra on user.foo = user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(user.col) from user join user_extra on user.foo = user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(`user`.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "sum(`user`.col) * count(*) as sum(`user`.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select sum(`user`.col), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                    "Query": "select sum(`user`.col), `user`.foo from `user` group by `user`.foo",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra where user_extra.bar = :user_foo group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "count spread across join",
    "query": "select count(user.col) from user join user_extra on user.foo = user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(user.col) from user join user_extra on user.foo = user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(`user`.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(`user`.col) * count(*) as count(`user`.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(`user`.col), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                    "Query": "select count(`user`.col), `user`.foo from `user` group by `user`.foo",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra where user_extra.bar = :user_foo group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "max spread across join",
    "query": "select max(user.col) from user join user_extra on user.foo = user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max(user.col) from user join user_extra on user.foo = user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0) AS max(`user`.col)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "JoinVars": {
              "user_foo": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select max(`user`.col), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                "Query": "select max(`user`.col), `user`.foo from `user` group by `user`.foo",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1 group by .0",
                "Query": "select 1 from user_extra where user_extra.bar = :user_foo group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "min spread across join RHS",
    "query": "select min(user_extra.col) from user join user_extra on user.foo = user_extra.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select min(user_extra.col) from user join user_extra on user.foo = user_extra.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "min(0) AS min(user_extra.col)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "user_foo": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.foo from `user` where 1 != 1 group by `user`.foo",
                "Query": "select `user`.foo from `user` group by `user`.foo",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select min(user_extra.col) from user_extra where 1 != 1 group by .0",
                "Query": "select min(user_extra.col) from user_extra where user_extra.bar = :user_foo group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "group by a unique vindex should revert to simple route, and having clause should find the correct symbols.",
    "query": "select id, count(*) c from user group by id having max(col) > 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) c from user group by id having max(col) > 10",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) as c from `user` where 1 != 1 group by id",
        "Query": "select id, count(*) as c from `user` group by id having max(col) > 10",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate in a subquery",
    "query": "select a from (select count(*) as a from user) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a from (select count(*) as a from user) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from `user` where 1 != 1",
            "Query": "select count(*) as a from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with non-aggregate expressions.",
    "query": "select id, count(*) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, count(*) from `user` where 1 != 1",
            "Query": "select id, count(*) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate using distinctdistinct",
    "query": "select distinct col from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct col from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select distinct col from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by select col",
    "query": "select col from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col from `user` group by col order by col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count with distinct group by unique vindex",
    "query": "select id, count(distinct col) from user group by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(distinct col) from user group by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(distinct col) from `user` where 1 != 1 group by id",
        "Query": "select id, count(distinct col) from `user` group by id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count with distinct unique vindex",
    "query": "select col, count(distinct id), sum(distinct id) from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(distinct id), sum(distinct id) from user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_distinct(1) AS count(distinct id), sum_sum_distinct(2) AS sum(distinct id)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(distinct id), sum(distinct id) from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(distinct id), sum(distinct id) from `user` group by col order by col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex",
    "query": "select col1, count(distinct col2) from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|3) AS count(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from `user` group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex and no group by",
    "query": "select count(distinct col2) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct col2) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_distinct(0|1) AS count(distinct col2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col2, weight_string(col2) from `user` where 1 != 1 group by col2, weight_string(col2)",
            "OrderBy": "(0|1) ASC",
            "Query": "select col2, weight_string(col2) from `user` group by col2, weight_string(col2) order by col2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count with distinct no unique vindex, count expression aliased",
    "query": "select col1, count(distinct col2) c2 from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) c2 from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|3) AS c2",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from `user` group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "sum with distinct no unique vindex",
    "query": "select col1, sum(distinct col2) from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, sum(distinct col2) from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_distinct(1|3) AS sum(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from `user` group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "min with distinct no unique vindex. distinct is ignored.",
    "query": "select col1, min(distinct col2) from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, min(distinct col2) from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|3) AS min(distinct col2)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, min(col2) as `min(distinct col2)`, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|2) ASC",
            "Query": "select col1, min(col2) as `min(distinct col2)`, weight_string(col1), weight_string(col2) from `user` group by col1, weight_string(col1), weight_string(col2) order by col1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "order by count distinct",
    "query": "select col1, count(distinct col2) k from user group by col1 order by k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2) k from user group by col1 order by k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "count_distinct(1|3) AS k",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
                "OrderBy": "(0|2) ASC, (1|3) ASC",
                "Query": "select col1, col2, weight_string(col1), weight_string(col2) from `user` group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by aggregate function - since we don't have authoratative columns for user, we can't be sure that the user isn't referring a column named b",
    "query": "select count(*) b from user group by b",
    "plan": "VT03005: cannot group on 'count(*)'"
  },
  {
    "comment": "scatter aggregate group by aggregate function with column information",
    "query": "select count(*) b from authoritative group by b",
    "plan": "VT03005: cannot group on 'b'"
  },
  {
    "comment": "scatter aggregate multiple group by (columns)",
    "query": "select a, b, count(*) from user group by a, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from user group by a, b",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(0|3), (1|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(b) from `user` where 1 != 1 group by a, b, weight_string(a), weight_string(b)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select a, b, count(*), weight_string(a), weight_string(b) from `user` group by a, b, weight_string(a), weight_string(b) order by a asc, b asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate multiple group by (numbers)",
    "query": "select a, b, count(*) from user group by 2, 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from user group by 2, 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(1|3), (0|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(b), weight_string(a) from `user` where 1 != 1 group by b, a, weight_string(b), weight_string(a)",
            "OrderBy": "(1|3) ASC, (0|4) ASC",
            "Query": "select a, b, count(*), weight_string(b), weight_string(a) from `user` group by b, a, weight_string(b), weight_string(a) order by b asc, a asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate multiple group by columns inverse order",
    "query": "select a, b, count(*) from user group by b, a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, count(*) from user group by b, a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "(1|3), (0|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(b), weight_string(a) from `user` where 1 != 1 group by b, a, weight_string(b), weight_string(a)",
            "OrderBy": "(1|3) ASC, (0|4) ASC",
            "Query": "select a, b, count(*), weight_string(b), weight_string(a) from `user` group by b, a, weight_string(b), weight_string(a) order by b asc, a asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by column number",
    "query": "select col from user group by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user group by 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col from `user` group by col order by col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate group by invalid column number",
    "query": "select col from user group by 2",
    "plan": "Unknown column '2' in 'group clause'"
  },
  {
    "comment": "scatter aggregate order by null",
    "query": "select count(*) from user order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user order by null",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from `user` where 1 != 1",
            "Query": "select count(*) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with numbered order by columns",
    "query": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1, 2, 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1, 2, 3",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(3) AS d, sum_count_star(4) AS count(*)",
        "GroupBy": "(0|5), (1|6), (2|7)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from `user` where 1 != 1 group by a, b, c, weight_string(a), weight_string(b), weight_string(c)",
            "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from `user` group by a, b, c, weight_string(a), weight_string(b), weight_string(c) order by a asc, b asc, c asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with named order by columns",
    "query": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by a, b, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by a, b, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(3) AS d, sum_count_star(4) AS count(*)",
        "GroupBy": "(0|5), (1|6), (2|7)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from `user` where 1 != 1 group by a, b, c, weight_string(a), weight_string(b), weight_string(c)",
            "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from `user` group by a, b, c, weight_string(a), weight_string(b), weight_string(c) order by `user`.a asc, `user`.b asc, `user`.c asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with jumbled order by columns",
    "query": "select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d, b, a, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d, b, a, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(4) AS count(*)",
        "GroupBy": "(3|5), (1|6), (0|7), (2|8)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from `user` where 1 != 1 group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c)",
            "OrderBy": "(3|5) ASC, (1|6) ASC, (0|7) ASC, (2|8) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from `user` group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c) order by `user`.d asc, `user`.b asc, `user`.a asc, `user`.c asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with jumbled group by and order by columns",
    "query": "select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d, b, a, c",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d, b, a, c",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(4) AS count(*)",
        "GroupBy": "(3|5), (1|6), (0|7), (2|8)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from `user` where 1 != 1 group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c)",
            "OrderBy": "(3|5) ASC, (1|6) ASC, (0|7) ASC, (2|8) ASC",
            "Query": "select a, b, c, d, count(*), weight_string(d), weight_string(b), weight_string(a), weight_string(c) from `user` group by d, b, a, c, weight_string(d), weight_string(b), weight_string(a), weight_string(c) order by `user`.d asc, `user`.b asc, `user`.a asc, `user`.c asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with some descending order by cols",
    "query": "select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(3) AS count(*)",
        "GroupBy": "(0|4), (2|5), (1|6)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, c, count(*), weight_string(a), weight_string(c), weight_string(b) from `user` where 1 != 1 group by a, c, b, weight_string(a), weight_string(c), weight_string(b)",
            "OrderBy": "(0|4) DESC, (2|5) DESC, (1|6) ASC",
            "Query": "select a, b, c, count(*), weight_string(a), weight_string(c), weight_string(b) from `user` group by a, c, b, weight_string(a), weight_string(c), weight_string(b) order by a desc, c desc, `user`.b asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "invalid order by column numner for scatter",
    "query": "select col, count(*) from user group by col order by 5 limit 10",
    "plan": "Unknown column '5' in 'order clause'"
  },
  {
    "comment": "aggregate with limit",
    "query": "select col, count(*) from user group by col limit 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from user group by col limit 10",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*) from `user` where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*) from `user` group by col order by col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules for aggregates",
    "query": "select id, count(*) from route2 group by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from route2 group by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id, count(*) from unsharded as route2 where 1 != 1 group by id",
        "Query": "select id, count(*) from unsharded as route2 group by id",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "order by on a reference table",
    "query": "select col from ref order by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from ref order by col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from ref where 1 != 1",
        "Query": "select col from ref order by ref.col asc",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "distinct and aggregate functions missing group by",
    "query": "select distinct a, count(*) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, count(*) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "any_value(0) AS a, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*) from `user` where 1 != 1",
            "Query": "select a, count(*) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct and aggregate functions",
    "query": "select distinct a, count(*) from user group by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, count(*) from user group by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*), weight_string(a) from `user` where 1 != 1 group by a, weight_string(a)",
            "OrderBy": "(0|2) ASC",
            "Query": "select a, count(*), weight_string(a) from `user` group by a, weight_string(a) order by a asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Group by invalid column number (code is duplicated from symab).",
    "query": "select id from user group by 1.1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user group by 1.1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS id",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, 1.1 from `user` where 1 != 1 group by 1.1",
            "OrderBy": "1 ASC",
            "Query": "select id, 1.1 from `user` group by 1.1 order by 1.1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Group by out of range column number (code is duplicated from symab).",
    "query": "select id from user group by 2",
    "plan": "Unknown column '2' in 'group clause'"
  },
  {
    "comment": "here it is safe to remove the order by on the derived table since it will not influence the output of the count(*)",
    "query": "select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
            "Query": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "order by inside derived tables can be ignored",
    "query": "select col from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
        "Query": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "here we keep the order since the column is visible on the outside, and used by the orderedAggregate",
    "query": "select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a group by col order by col asc",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "optimize group by when using distinct with no aggregation",
    "query": "select distinct col1, col2 from user group by col1, col2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct col1, col2 from user group by col1, col2",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1",
            "Query": "select distinct col1, col2, weight_string(col1), weight_string(col2) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "do not use distinct when using only aggregates and no group by",
    "query": "select distinct count(*) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct count(*) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from `user` where 1 != 1",
            "Query": "select count(*) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Grouping on join",
    "query": "select user.a from user join user_extra group by user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.a from user join user_extra group by user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|1)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.a, weight_string(`user`.a) from `user` where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                "OrderBy": "(0|1) ASC",
                "Query": "select `user`.a, weight_string(`user`.a) from `user` group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1 group by .0",
                "Query": "select 1 from user_extra group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "multiple distinct functions with grouping.",
    "query": "select col1, count(distinct col2), sum(distinct col2) from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(distinct col2), sum(distinct col2) from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct col2), sum_distinct(2|4) AS sum(distinct col2)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, col2, weight_string(col1), weight_string(col2) from `user` where 1 != 1 group by col1, col2, weight_string(col1), weight_string(col2)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select col1, col2, col2, weight_string(col1), weight_string(col2) from `user` group by col1, col2, weight_string(col1), weight_string(col2) order by col1 asc, col2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregate query with order by aggregate column along with NULL",
    "query": "select col, count(*) k from user group by col order by null, k",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) k from user group by col order by null, k",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS k",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*) as k from `user` where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*) as k from `user` group by col order by col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregate query with order by NULL",
    "query": "select col, count(*) k from user group by col order by null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) k from user group by col order by null",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS k",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) as k from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) as k from `user` group by col order by col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "join query on sharding key with group by a unique vindex with having clause.",
    "query": "select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) > 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) > 10",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, count(*) as c from `user`, user_extra where 1 != 1 group by `user`.id",
        "Query": "select `user`.id, count(*) as c from `user`, user_extra where `user`.id = user_extra.user_id group by `user`.id having max(`user`.col) > 10",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery on sharding key with group by a unique vindex with having clause.",
    "query": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from `user` where 1 != 1",
            "Query": "select count(*) from `user` where exists (select 1 from user_extra where user_id = `user`.id group by user_id having max(col) > 10)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation filtering by having on a route",
    "query": "select id from user group by id having count(id) = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user group by id having count(id) = 10",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1 group by id",
        "Query": "select id from `user` group by id having count(id) = 10",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "weight_string addition to group by",
    "query": "select lower(col1) as v, count(*) from authoritative group by v",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select lower(col1) as v, count(*) from authoritative group by v",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select lower(col1) as v, count(*), weight_string(lower(col1)) from authoritative where 1 != 1 group by lower(col1), weight_string(lower(col1))",
            "OrderBy": "(0|2) ASC",
            "Query": "select lower(col1) as v, count(*), weight_string(lower(col1)) from authoritative group by lower(col1), weight_string(lower(col1)) order by lower(col1) asc",
            "Table": "authoritative"
          }
        ]
      },
      "TablesUsed": [
        "user.authoritative"
      ]
    }
  },
  {
    "comment": "weight_string addition to group by when also there in order by",
    "query": "select char_length(col1) as a, count(*) from authoritative group by a order by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select char_length(col1) as a, count(*) from authoritative group by a order by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select char_length(col1) as a, count(*), weight_string(char_length(col1)) from authoritative where 1 != 1 group by char_length(col1), weight_string(char_length(col1))",
            "OrderBy": "(0|2) ASC",
            "Query": "select char_length(col1) as a, count(*), weight_string(char_length(col1)) from authoritative group by char_length(col1), weight_string(char_length(col1)) order by char_length(authoritative.col1) asc",
            "Table": "authoritative"
          }
        ]
      },
      "TablesUsed": [
        "user.authoritative"
      ]
    }
  },
  {
    "comment": "order by inside and outside parenthesis select",
    "query": "(select id from user order by 1 desc) order by 1 asc limit 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user order by 1 desc) order by 1 asc limit 2",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "2",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(0|1) ASC",
            "Query": "select id, weight_string(id) from `user` order by id asc limit :__upper_limit",
            "ResultColumns": 1,
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "correlated subquery in exists clause with an ordering",
    "query": "select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by id",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "user_id": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, id, weight_string(id) from `user` where 1 != 1",
            "OrderBy": "(1|2) ASC",
            "Query": "select col, id, weight_string(id) from `user` order by `user`.id asc",
            "ResultColumns": 2,
            "Table": "`user`"
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_id = 3 and user_id < :user_id",
            "Table": "user_extra",
            "Values": [
              "3"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Column and Literal equality filter on scatter aggregates",
    "query": "select count(*) a from user having a = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a = 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Equality filtering with column and string literal on scatter aggregates",
    "query": "select count(*) a from user having a = '1'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a = '1'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = '1'",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Column and Literal not equal filter on scatter aggregates",
    "query": "select count(*) a from user having a != 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a != 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) != 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Not equal filter with column and string literal on scatter aggregates",
    "query": "select count(*) a from user having a != '1'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a != '1'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) != '1'",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Greater than filter on scatter aggregates",
    "query": "select count(*) a from user having a > 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a > 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) > 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Greater Equal filter on scatter aggregates",
    "query": "select count(*) a from user having a >= 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a >= 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) >= 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Less than filter on scatter aggregates",
    "query": "select count(*) a from user having a < 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a < 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) < 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Less Equal filter on scatter aggregates",
    "query": "select count(*) a from user having a <= 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) a from user having a <= 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) <= 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS a",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a from `user` where 1 != 1",
                "Query": "select count(*) as a from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Less Equal filter on scatter with grouping",
    "query": "select col1, count(*) a from user group by col1 having a <= 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, count(*) a from user group by col1 having a <= 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) <= 10",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS a",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col1, count(*) as a, weight_string(col1) from `user` where 1 != 1 group by col1, weight_string(col1)",
                "OrderBy": "(0|2) ASC",
                "Query": "select col1, count(*) as a, weight_string(col1) from `user` group by col1, weight_string(col1) order by col1 asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "We should be able to find grouping keys on ordered aggregates",
    "query": "select count(*) as a, col2 from user group by col2 having a = 1.00",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) as a, col2 from user group by col2 having a = 1.00",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 1.00",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(0) AS a",
            "GroupBy": "(1|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a, col2, weight_string(col2) from `user` where 1 != 1 group by col2, weight_string(col2)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(*) as a, col2, weight_string(col2) from `user` group by col2, weight_string(col2) order by col2 asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct on text column with collation",
    "query": "select col, count(distinct textcol1) from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(distinct textcol1) from user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, textcol1 from `user` where 1 != 1 group by col, textcol1",
            "OrderBy": "0 ASC, 1 ASC COLLATE latin1_swedish_ci",
            "Query": "select col, textcol1 from `user` group by col, textcol1 order by col asc, textcol1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation filtering by having on a route with no group by with non-unique vindex filter",
    "query": "select 1 from user having count(id) = 10 and name = 'a'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user having count(id) = 10 and name = 'a'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(id) = 10",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(id)",
            "Inputs": [
              {
                "OperatorType": "VindexLookup",
                "Variant": "Equal",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "Values": [
                  "'a'"
                ],
                "Vindex": "name_user_map",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "IN",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
                    "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
                    "Table": "name_user_vdx",
                    "Values": [
                      "::name"
                    ],
                    "Vindex": "user_index"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "ByDestination",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1, count(id) from `user` where 1 != 1",
                    "Query": "select 1, count(id) from `user` where `name` = 'a'",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Aggregates and joins",
    "query": "select count(*) from user join user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user join user_extra",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from `user` where 1 != 1",
                    "Query": "select count(*) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation filtering by having on a route with no group by",
    "query": "select 1 from user having count(id) = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from user having count(id) = 10",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(id) = 10",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS 1, sum_count(1) AS count(id)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(id) from `user` where 1 != 1",
                "Query": "select 1, count(id) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Aggregate on join",
    "query": "select user.a, count(*) from user join user_extra group by user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.a, count(*) from user join user_extra group by user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":2 as a",
              "count(*) * count(*) as count(*)",
              ":3 as weight_string(`user`.a)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1,L:2",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.a, weight_string(`user`.a) from `user` where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                    "OrderBy": "(1|2) ASC",
                    "Query": "select count(*), `user`.a, weight_string(`user`.a) from `user` group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregate on other table in join",
    "query": "select user.a, count(user_extra.a) from user join user_extra group by user.a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.a, count(user_extra.a) from user join user_extra group by user.a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count(1) AS count(user_extra.a)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":2 as a",
              "count(*) * count(user_extra.a) as count(user_extra.a)",
              ":3 as weight_string(`user`.a)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,L:0,L:1,L:2",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.a, weight_string(`user`.a) from `user` where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                    "OrderBy": "(1|2) ASC",
                    "Query": "select count(*), `user`.a, weight_string(`user`.a) from `user` group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(user_extra.a) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(user_extra.a) from user_extra group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation spread out across three routes",
    "query": "select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count(0) AS count(u.textcol1), sum_count(1) AS count(ue.foo)",
        "GroupBy": "(2|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(u.textcol1) * count(*) as count(u.textcol1)",
              "count(*) * count(ue.foo) as count(ue.foo)",
              ":4 as bar",
              ":5 as weight_string(us.bar)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(4|5) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,R:1,L:1,R:2,R:3",
                    "JoinVars": {
                      "u_foo": 2
                    },
                    "TableName": "`user`_user_extra_unsharded",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(u.textcol1), count(*), u.foo from `user` as u where 1 != 1 group by u.foo",
                        "Query": "select count(u.textcol1), count(*), u.foo from `user` as u group by u.foo",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Projection",
                        "Expressions": [
                          "count(*) * count(*) as count(*)",
                          "count(ue.foo) * count(*) as count(ue.foo)",
                          ":3 as bar",
                          ":4 as weight_string(us.bar)"
                        ],
                        "Inputs": [
                          {
                            "OperatorType": "Join",
                            "Variant": "Join",
                            "JoinColumnIndexes": "L:0,R:0,L:1,R:1,R:2",
                            "JoinVars": {
                              "ue_bar": 2
                            },
                            "TableName": "user_extra_unsharded",
                            "Inputs": [
                              {
                                "OperatorType": "Route",
                                "Variant": "Scatter",
                                "Keyspace": {
                                  "Name": "user",
                                  "Sharded": true
                                },
                                "FieldQuery": "select count(*), count(ue.foo), ue.bar from user_extra as ue where 1 != 1 group by ue.bar",
                                "Query": "select count(*), count(ue.foo), ue.bar from user_extra as ue where ue.bar = :u_foo group by ue.bar",
                                "Table": "user_extra"
                              },
                              {
                                "OperatorType": "Route",
                                "Variant": "Unsharded",
                                "Keyspace": {
                                  "Name": "main",
                                  "Sharded": false
                                },
                                "FieldQuery": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where 1 != 1 group by us.bar, weight_string(us.bar)",
                                "Query": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where us.baz = :ue_bar group by us.bar, weight_string(us.bar)",
                                "Table": "unsharded"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "using two distinct columns - min with distinct vindex, sum with distinct without vindex",
    "query": "select col1, min(distinct id), sum(distinct col3) from user group by col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, min(distinct id), sum(distinct col3) from user group by col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|4) AS min(distinct id), sum_distinct(2|5) AS sum(distinct col3)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, min(id) as `min(distinct id)`, col3, weight_string(col1), weight_string(id), weight_string(col3) from `user` where 1 != 1 group by col1, col3, weight_string(col1), weight_string(id), weight_string(col3)",
            "OrderBy": "(0|3) ASC, (2|5) ASC",
            "Query": "select col1, min(id) as `min(distinct id)`, col3, weight_string(col1), weight_string(id), weight_string(col3) from `user` group by col1, col3, weight_string(col1), weight_string(id), weight_string(col3) order by col1 asc, col3 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation on top of semijoin",
    "query": "select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "SemiJoin",
            "JoinVars": {
              "user_apa": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*), `user`.apa from `user` where 1 != 1 group by `user`.apa",
                "Query": "select count(*), `user`.apa from `user` group by `user`.apa",
                "Table": "`user`"
              },
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra where user_extra.bar = :user_apa",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "we have to track the order of distinct aggregation expressions",
    "query": "select val2, count(distinct val1), count(*) from user group by val2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select val2, count(distinct val1), count(*) from user group by val2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct val1), sum_count_star(2) AS count(*)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from `user` where 1 != 1 group by val2, val1, weight_string(val2), weight_string(val1)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from `user` group by val2, val1, weight_string(val2), weight_string(val1) order by val2 asc, val1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "group by column alias",
    "query": "select ascii(col2) as a, count(*) from user group by a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ascii(col2) as a, count(*) from user group by a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select ascii(col2) as a, count(*), weight_string(ascii(col2)) from `user` where 1 != 1 group by ascii(col2), weight_string(ascii(col2))",
            "OrderBy": "(0|2) ASC",
            "Query": "select ascii(col2) as a, count(*), weight_string(ascii(col2)) from `user` group by ascii(col2), weight_string(ascii(col2)) order by ascii(col2) asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multiple distinct aggregations on the same column is allowed",
    "query": "select tcol1, count(distinct tcol2), sum(distinct tcol2) from user group by tcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select tcol1, count(distinct tcol2), sum(distinct tcol2) from user group by tcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|4) AS count(distinct tcol2), sum_distinct(2|4) AS sum(distinct tcol2)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from `user` where 1 != 1 group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2)",
            "OrderBy": "(0|3) ASC, (1|4) ASC",
            "Query": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from `user` group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2) order by tcol1 asc, tcol2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multiple distinct aggregations on the same column in different positions",
    "query": "select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from user group by tcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from user group by tcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(0|5) AS count(distinct tcol2), sum_count_star(2) AS count(*), sum_distinct(3|5) AS sum(distinct tcol2)",
        "GroupBy": "(1|4)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol1), weight_string(tcol2) from `user` where 1 != 1 group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2)",
            "OrderBy": "(1|4) ASC, (0|5) ASC",
            "Query": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol1), weight_string(tcol2) from `user` group by tcol1, tcol2, weight_string(tcol1), weight_string(tcol2) order by tcol1 asc, tcol2 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct aggregation will 3 table join query",
    "query": "select u.textcol1, count(distinct u.val2) from user u join user u2 on u.val2 = u2.id join music m on u2.val2 = m.id group by u.textcol1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.textcol1, count(distinct u.val2) from user u join user u2 on u.val2 = u2.id join music m on u2.val2 = m.id group by u.textcol1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|2) AS count(distinct u.val2)",
        "GroupBy": "0 COLLATE latin1_swedish_ci",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:2",
            "JoinVars": {
              "u2_val2": 3
            },
            "TableName": "`user`_`user`_music",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,R:0",
                "JoinVars": {
                  "u_val2": 1
                },
                "TableName": "`user`_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.textcol1, u.val2, weight_string(u.val2) from `user` as u where 1 != 1",
                    "OrderBy": "0 ASC COLLATE latin1_swedish_ci, (1|2) ASC",
                    "Query": "select u.textcol1, u.val2, weight_string(u.val2) from `user` as u order by u.textcol1 asc, u.val2 asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "EqualUnique",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u2.val2 from `user` as u2 where 1 != 1",
                    "Query": "select u2.val2 from `user` as u2 where u2.id = :u_val2",
                    "Table": "`user`",
                    "Values": [
                      ":u_val2"
                    ],
                    "Vindex": "user_index"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music as m where 1 != 1",
                "Query": "select 1 from music as m where m.id = :u2_val2",
                "Table": "music",
                "Values": [
                  ":u2_val2"
                ],
                "Vindex": "music_user_map"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "group_concat on single shards",
    "query": "select group_concat(user_id order by name), id from user group by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select group_concat(user_id order by name), id from user group by id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select group_concat(user_id order by `name` asc), id from `user` where 1 != 1 group by id",
        "Query": "select group_concat(user_id order by `name` asc), id from `user` group by id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select count(distinct user_id, name) from unsharded",
    "query": "select count(distinct user_id, name) from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct user_id, name) from unsharded",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select count(distinct user_id, `name`) from unsharded where 1 != 1",
        "Query": "select count(distinct user_id, `name`) from unsharded",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
    "query": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(col) from (select user.col as col, 32 from user join user_extra) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "sum(col) * count(*) as sum(col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select sum(col), 32 from (select `user`.col as col, 32 from `user` where 1 != 1) as t where 1 != 1",
                    "Query": "select sum(col), 32 from (select `user`.col as col, 32 from `user`) as t",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter",
    "query": "select foo, count(*) from user group by foo having count(*) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, count(*) from user group by foo having count(*) = 3",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 3",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from `user` where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from `user` group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter times two",
    "query": "select foo, sum(foo), sum(bar) from user group by foo having sum(foo)+sum(bar) = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, sum(foo), sum(bar) from user group by foo having sum(foo)+sum(bar) = 42",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "sum(foo) + sum(bar) = 42",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS sum(foo), sum(2) AS sum(bar)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo), sum(bar), weight_string(foo) from `user` where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo), sum(bar), weight_string(foo) from `user` group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "find aggregation expression and use column offset in filter times three",
    "query": "select foo, sum(foo) as fooSum, sum(bar) as barSum from user group by foo having fooSum+sum(bar) = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, sum(foo) as fooSum, sum(bar) as barSum from user group by foo having fooSum+sum(bar) = 42",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "sum(`user`.foo) + sum(bar) = 42",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS fooSum, sum(2) AS barSum",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from `user` where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from `user` group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "having should be able to add new aggregation expressions in having",
    "query": "select foo from user group by foo having count(*) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo from user group by foo having count(*) = 3",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 3",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from `user` where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from `user` group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(u.name) = 3",
    "query": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(u.name) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(u.name) = 3",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(u.`name`) = 3",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS count(u.`name`)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  ":2 as id",
                  "count(*) * count(u.`name`) as count(u.`name`)",
                  ":3 as weight_string(u.id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Sort",
                    "Variant": "Memory",
                    "OrderBy": "(2|3) ASC",
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "R:0,L:0,R:1,R:2",
                        "JoinVars": {
                          "ue_id": 1
                        },
                        "TableName": "user_extra_`user`",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), ue.id from user_extra as ue where 1 != 1 group by ue.id",
                            "Query": "select count(*), ue.id from user_extra as ue group by ue.id",
                            "Table": "user_extra"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "EqualUnique",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(u.`name`), u.id, weight_string(u.id) from `user` as u where 1 != 1 group by u.id, weight_string(u.id)",
                            "Query": "select count(u.`name`), u.id, weight_string(u.id) from `user` as u where u.id = :ue_id group by u.id, weight_string(u.id)",
                            "Table": "`user`",
                            "Values": [
                              ":ue_id"
                            ],
                            "Vindex": "user_index"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "select u.id from user u join user_extra ue on ue.user_id = u.id group by u.id having count(u.name) = 3",
    "query": "select u.id from user u join user_extra ue on ue.user_id = u.id group by u.id having count(u.name) = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user u join user_extra ue on ue.user_id = u.id group by u.id having count(u.name) = 3",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id from `user` as u, user_extra as ue where 1 != 1 group by u.id",
        "Query": "select u.id from `user` as u, user_extra as ue where ue.user_id = u.id group by u.id having count(u.`name`) = 3",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "only extract the aggregation once, even if used twice",
    "query": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(*) < 3 and count(*) > 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(*) < 3 and count(*) > 5",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) < 3 and count(*) > 5",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  ":2 as id",
                  "count(*) * count(*) as count(*)",
                  ":3 as weight_string(u.id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Sort",
                    "Variant": "Memory",
                    "OrderBy": "(2|3) ASC",
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                        "JoinVars": {
                          "ue_id": 1
                        },
                        "TableName": "user_extra_`user`",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), ue.id from user_extra as ue where 1 != 1 group by ue.id",
                            "Query": "select count(*), ue.id from user_extra as ue group by ue.id",
                            "Table": "user_extra"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "EqualUnique",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), u.id, weight_string(u.id) from `user` as u where 1 != 1 group by u.id, weight_string(u.id)",
                            "Query": "select count(*), u.id, weight_string(u.id) from `user` as u where u.id = :ue_id group by u.id, weight_string(u.id)",
                            "Table": "`user`",
                            "Values": [
                              ":ue_id"
                            ],
                            "Vindex": "user_index"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "group by and ',' joins with condition",
    "query": "select user.col from user join user_extra on user_extra.col = user.col group by user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user join user_extra on user_extra.col = user.col group by user.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS col",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:2",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col, `user`.id, weight_string(`user`.id) from `user` where 1 != 1 group by `user`.id, `user`.col, weight_string(`user`.id)",
                "OrderBy": "(1|2) ASC",
                "Query": "select `user`.col, `user`.id, weight_string(`user`.id) from `user` group by `user`.id, `user`.col, weight_string(`user`.id) order by `user`.id asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1 group by .0",
                "Query": "select 1 from user_extra where user_extra.col = :user_col group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "scatter aggregate symtab lookup error",
    "query": "select id, b as id, count(*) from user order by id",
    "plan": "Column 'id' in field list is ambiguous"
  },
  {
    "comment": "aggr and non-aggr without group by (with query does not give useful result out)",
    "query": "select id, count(*) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, count(*) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, count(*) from `user` where 1 != 1",
            "Query": "select id, count(*) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "group by and ',' joins",
    "query": "select user.id from user, user_extra group by user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user, user_extra group by user.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|1)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, weight_string(`user`.id) from `user` where 1 != 1 group by `user`.id, weight_string(`user`.id)",
                "OrderBy": "(0|1) ASC",
                "Query": "select `user`.id, weight_string(`user`.id) from `user` group by `user`.id, weight_string(`user`.id) order by `user`.id asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1 group by .0",
                "Query": "select 1 from user_extra group by .0",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "count on column from LIMIT",
    "query": "select count(city) from (select phone, id, city from user where id > 12 limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(city) from (select phone, id, city from user where id > 12 limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(city)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              2
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "10",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.phone, x.id, x.city from (select phone, id, city from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.phone, x.id, x.city from (select phone, id, city from `user` where id > 12) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count(*) on column from LIMIT",
    "query": "select count(*) from (select phone, id, city from user where id > 12 limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from (select phone, id, city from user where id > 12 limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              3
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "10",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.phone, x.id, x.city, 1 from (select phone, id, city from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.phone, x.id, x.city, 1 from (select phone, id, city from `user` where id > 12) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "count non-null columns incoming from outer joins should work well",
    "query": "select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(col)",
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "10",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0",
                "JoinVars": {
                  "user_id": 0
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id from `user` where 1 != 1",
                    "Query": "select `user`.id from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                    "Query": "select user_extra.col from user_extra where user_extra.id = :user_id",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "grouping on data from derived table",
    "query": "select val1, count(*)  from (select id, val1 from user where val2 < 4 order by val1 limit 2) as x group by val1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select val1, count(*)  from (select id, val1 from user where val2 < 4 order by val1 limit 2) as x group by val1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1,
              2,
              3
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "2",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.id, x.val1, 1, weight_string(x.val1) from (select id, val1 from `user` where 1 != 1) as x where 1 != 1",
                    "OrderBy": "(1|3) ASC",
                    "Query": "select x.id, x.val1, 1, weight_string(x.val1) from (select id, val1 from `user` where val2 < 4) as x order by `user`.val1 asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Can't inline derived table when it has HAVING with aggregation function",
    "query": "select * from (select id from user having count(*) = 1) s",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select id from user having count(*) = 1) s",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, count(*) from `user` where 1 != 1",
                "Query": "select id, count(*) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Group By X Order By X",
    "query": "SELECT user.intcol FROM user GROUP BY user.intcol ORDER BY COUNT(user.intcol)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT user.intcol FROM user GROUP BY user.intcol ORDER BY COUNT(user.intcol)",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "1 ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS count(`user`.intcol)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.intcol, count(`user`.intcol) from `user` where 1 != 1 group by `user`.intcol",
                "OrderBy": "0 ASC",
                "Query": "select `user`.intcol, count(`user`.intcol) from `user` group by `user`.intcol order by `user`.intcol asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "AggregateAnyValue in non full group by query",
    "query": "select u.id, u.name, count(m.predef1) from user.user as u join user.user_extra as m on u.id = m.order group by u.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id, u.name, count(m.predef1) from user.user as u join user.user_extra as m on u.id = m.order group by u.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(1) AS name, sum_count(2) AS count(m.predef1)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":3 as id",
              ":0 as name",
              "count(m.predef1) * count(*) as count(m.predef1)",
              ":4 as weight_string(u.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(3|4) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "R:0,L:0,R:1,R:2,R:3",
                    "JoinVars": {
                      "m_order": 1
                    },
                    "TableName": "user_extra_`user`",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(m.predef1), m.`order` from user_extra as m where 1 != 1 group by m.`order`",
                        "Query": "select count(m.predef1), m.`order` from user_extra as m group by m.`order`",
                        "Table": "user_extra"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "EqualUnique",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select u.`name`, count(*), u.id, weight_string(u.id) from `user` as u where 1 != 1 group by u.id, weight_string(u.id)",
                        "Query": "select u.`name`, count(*), u.id, weight_string(u.id) from `user` as u where u.id = :m_order group by u.id, weight_string(u.id)",
                        "Table": "`user`",
                        "Values": [
                          ":m_order"
                        ],
                        "Vindex": "user_index"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregation on column from inner side in a left join query",
    "query": "select count (u.id) from user u left join user_extra ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count (u.id) from user u left join user_extra ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(u.id)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(u.id) * coalesce(count(*), 1) as count(u.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "u_col": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(u.id), u.col from `user` as u where 1 != 1 group by u.col",
                    "Query": "select count(u.id), u.col from `user` as u group by u.col",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra as ue where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra as ue where ue.col = :u_col group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregation on outer side in a left join query",
    "query": "select count(ue.id) from user u left join user_extra ue on u.col = ue.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(ue.id) from user u left join user_extra ue on u.col = ue.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(ue.id)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(ue.id) as count(ue.id)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0,L:0",
                "JoinVars": {
                  "u_col": 1
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), u.col from `user` as u where 1 != 1 group by u.col",
                    "Query": "select count(*), u.col from `user` as u group by u.col",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(ue.id) from user_extra as ue where 1 != 1 group by .0",
                    "Query": "select count(ue.id) from user_extra as ue where ue.col = :u_col group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregations from derived table used in arithmetic outside derived table",
    "query": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from user) A",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select A.a, A.b, (A.a / A.b) as d from (select sum(a) as a, sum(b) as b from user) A",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          ":0 as a",
          ":1 as b",
          "A.a / A.b as d"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS a, sum(1) AS b",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(a) as a, sum(b) as b from `user` where 1 != 1",
                "Query": "select sum(a) as a, sum(b) as b from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "when pushing predicates into derived tables, make sure to put them in HAVING when they contain aggregations",
    "query": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as count from user_extra where localDate > :v1 group by user_id, flowId order by null) as t1 where count >= :v2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as count from user_extra where localDate > :v1 group by user_id, flowId order by null) as t1 where count >= :v2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as `count` from user_extra where 1 != 1 group by user_id, flowId) as t1 where 1 != 1",
        "Query": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as `count` from user_extra where localDate > :v1 group by user_id, flowId) as t1 where `count` >= :v2",
        "Table": "user_extra"
      },
      "TablesUsed": [
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregation, where and derived tables - we can push extremums",
    "query": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "bazo between 100 and 200",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "max(1|3) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, max(baz) as bazo, weight_string(foo), weight_string(baz) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo), weight_string(baz)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, max(baz) as bazo, weight_string(foo), weight_string(baz) from (select foo, baz from `user`) as f group by foo, weight_string(foo), weight_string(baz) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation, where and derived tables - we can't push aggregations that might need a second layer of aggregation",
    "query": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT foo FROM (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "bazo between 100 and 200",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user`) as f group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Scatter order by is complex with aggregates in select",
    "query": "select col, count(*) from user group by col order by col+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, count(*) from user group by col order by col+1",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(2|3) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*), any_value(2) AS col + 1, any_value(3)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col, count(*), col + 1, weight_string(col + 1) from `user` where 1 != 1 group by col",
                "OrderBy": "0 ASC",
                "Query": "select col, count(*), col + 1, weight_string(col + 1) from `user` group by col order by col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate complex order by",
    "query": "select id from user group by id order by id+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user group by id order by id+1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, id + 1, weight_string(id + 1) from `user` where 1 != 1 group by id",
        "OrderBy": "(1|2) ASC",
        "Query": "select id, id + 1, weight_string(id + 1) from `user` group by id order by id + 1 asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select expression does not directly depend on grouping expression",
    "query": "select a from user group by a+1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a from user group by a+1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "any_value(0) AS a",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, a + 1, weight_string(a + 1) from `user` where 1 != 1 group by a + 1, weight_string(a + 1)",
            "OrderBy": "(1|2) ASC",
            "Query": "select a, a + 1, weight_string(a + 1) from `user` group by a + 1, weight_string(a + 1) order by a + 1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "inner join with scalar aggregation",
    "query": "select count(*) from user join music on user.foo = music.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user join music on user.foo = music.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                    "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                    "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "left outer join with scalar aggregation",
    "query": "select count(*) from user left join music on user.foo = music.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                    "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                    "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "inner join with left grouping",
    "query": "select count(*) from user left join music on user.foo = music.bar group by user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar group by user.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)",
              ":2 as col"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0,L:1",
                "JoinVars": {
                  "user_foo": 2
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.col, `user`.foo from `user` where 1 != 1 group by `user`.col, `user`.foo",
                    "OrderBy": "1 ASC",
                    "Query": "select count(*), `user`.col, `user`.foo from `user` group by `user`.col, `user`.foo order by `user`.col asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                    "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "inner join with right grouping",
    "query": "select count(*) from user left join music on user.foo = music.bar group by music.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar group by music.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)",
              ":2 as col",
              ":3 as weight_string(music.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(2|3) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                    "JoinVars": {
                      "user_foo": 1
                    },
                    "TableName": "`user`_music",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                        "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), music.col, weight_string(music.col) from music where 1 != 1 group by music.col, weight_string(music.col)",
                        "Query": "select count(*), music.col, weight_string(music.col) from music where music.bar = :user_foo group by music.col, weight_string(music.col)",
                        "Table": "music"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "left outer join with left grouping",
    "query": "select count(*) from user left join music on user.foo = music.bar group by user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar group by user.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)",
              ":2 as col"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "L:0,R:0,L:1",
                "JoinVars": {
                  "user_foo": 2
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), `user`.col, `user`.foo from `user` where 1 != 1 group by `user`.col, `user`.foo",
                    "OrderBy": "1 ASC",
                    "Query": "select count(*), `user`.col, `user`.foo from `user` group by `user`.col, `user`.foo order by `user`.col asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                    "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "left outer join with right grouping",
    "query": "select count(*) from user left join music on user.foo = music.bar group by music.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar group by music.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)",
              ":2 as col",
              ":3 as weight_string(music.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(2|3) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                    "JoinVars": {
                      "user_foo": 1
                    },
                    "TableName": "`user`_music",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                        "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), music.col, weight_string(music.col) from music where 1 != 1 group by music.col, weight_string(music.col)",
                        "Query": "select count(*), music.col, weight_string(music.col) from music where music.bar = :user_foo group by music.col, weight_string(music.col)",
                        "Table": "music"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "3 table inner join with scalar aggregation",
    "query": "select count(*) from user join music on user.foo = music.bar join user_extra on user.foo = user_extra.baz",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user join music on user.foo = music.bar join user_extra on user.foo = user_extra.baz",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_extra_baz": 1
                },
                "TableName": "user_extra_`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), user_extra.baz from user_extra where 1 != 1 group by user_extra.baz",
                    "Query": "select count(*), user_extra.baz from user_extra group by user_extra.baz",
                    "Table": "user_extra"
                  },
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "count(*) * count(*) as count(*)"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "L:0,R:0",
                        "JoinVars": {
                          "user_foo": 1
                        },
                        "TableName": "`user`_music",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                            "Query": "select count(*), `user`.foo from `user` where `user`.foo = :user_extra_baz group by `user`.foo",
                            "Table": "`user`"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                            "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                            "Table": "music"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "3 table with mixed join with scalar aggregation",
    "query": "select count(*) from user left join music on user.foo = music.bar join user_extra on user.foo = user_extra.baz",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join music on user.foo = music.bar join user_extra on user.foo = user_extra.baz",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "JoinVars": {
                  "user_foo": 1
                },
                "TableName": "`user`_music_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "count(*) * coalesce(count(*), 1) as count(*)",
                      ":2 as foo"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "LeftJoin",
                        "JoinColumnIndexes": "L:0,R:0,L:1",
                        "JoinVars": {
                          "user_foo": 1
                        },
                        "TableName": "`user`_music",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), `user`.foo from `user` where 1 != 1 group by `user`.foo",
                            "Query": "select count(*), `user`.foo from `user` group by `user`.foo",
                            "Table": "`user`"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                            "Query": "select count(*) from music where music.bar = :user_foo group by .0",
                            "Table": "music"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra where user_extra.baz = :user_foo group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "ordering have less column than grouping columns, grouping gets rearranged as order by and missing columns gets added to ordering",
    "query": "select u.col, u.intcol, count(*) from user u join music group by 1,2 order by 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col, u.intcol, count(*) from user u join music group by 1,2 order by 2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "1, 0",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":3 as col",
              ":2 as intcol",
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1,L:2",
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), u.intcol, u.col from `user` as u where 1 != 1 group by u.intcol, u.col",
                    "OrderBy": "1 ASC, 2 ASC",
                    "Query": "select count(*), u.intcol, u.col from `user` as u group by u.intcol, u.col order by u.intcol asc, u.col asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from music where 1 != 1 group by .0",
                    "Query": "select count(*) from music group by .0",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "redundant group by columns are not added",
    "query": "select col, val, id from user group by col, val, id, id, val, col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, val, id from user group by col, val, id, id, val, col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, val, id from `user` where 1 != 1 group by col, val, id",
        "Query": "select col, val, id from `user` group by col, val, id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with ambiguous aliases",
    "query": "select distinct a, b as a from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a, b as a from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b as a, weight_string(a), weight_string(b) from `user` where 1 != 1",
            "Query": "select distinct a, b as a, weight_string(a), weight_string(b) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scatter aggregate with complex select list (can't build order by)",
    "query": "select distinct a+1 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct a+1 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a + 1, weight_string(a + 1) from `user` where 1 != 1",
            "Query": "select distinct a + 1, weight_string(a + 1) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "distinct on top of aggregation",
    "query": "select distinct count(*) from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct count(*) from user group by col",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(0) AS count(*)",
            "GroupBy": "1",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*), col from `user` where 1 != 1 group by col",
                "OrderBy": "1 ASC",
                "Query": "select count(*), col from `user` group by col order by col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "scalar aggregates with min, max, sum distinct and count distinct using collations",
    "query": "select min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "min(0 COLLATE latin1_swedish_ci) AS min(textcol1), max(1|4) AS max(textcol2), sum_distinct(2 COLLATE latin1_swedish_ci) AS sum(distinct textcol1), count_distinct(3 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select min(textcol1), max(textcol2), textcol1, textcol1, weight_string(textcol2) from `user` where 1 != 1 group by textcol1, weight_string(textcol2)",
            "OrderBy": "2 ASC COLLATE latin1_swedish_ci",
            "Query": "select min(textcol1), max(textcol2), textcol1, textcol1, weight_string(textcol2) from `user` group by textcol1, weight_string(textcol2) order by textcol1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "grouping aggregates with mi, max, sum distinct and count distinct using collations",
    "query": "select col, min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, min(textcol1), max(textcol2), sum(distinct textcol1), count(distinct textcol1) from user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1 COLLATE latin1_swedish_ci) AS min(textcol1), max(2|5) AS max(textcol2), sum_distinct(3 COLLATE latin1_swedish_ci) AS sum(distinct textcol1), count_distinct(4 COLLATE latin1_swedish_ci) AS count(distinct textcol1)",
        "GroupBy": "0",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, min(textcol1), max(textcol2), textcol1, textcol1, weight_string(textcol2) from `user` where 1 != 1 group by col, textcol1, weight_string(textcol2)",
            "OrderBy": "0 ASC, 3 ASC COLLATE latin1_swedish_ci",
            "Query": "select col, min(textcol1), max(textcol2), textcol1, textcol1, weight_string(textcol2) from `user` group by col, textcol1, weight_string(textcol2) order by col asc, textcol1 asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "using a grouping column multiple times should be OK",
    "query": "select col, col, count(*) from user group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col, col, count(*) from user group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(2) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, col, count(*) from `user` where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, col, count(*) from `user` group by col order by col asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multiple count star and a count with 3 table join",
    "query": "select count(*), count(*), count(u.col) from user u, user u2, user_extra ue",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*), count(*), count(u.col) from user u, user u2, user_extra ue",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*), sum_count_star(1) AS count(*), sum_count(2) AS count(u.col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)",
              "count(*) * count(*) as count(*)",
              "count(*) * count(u.col) as count(u.col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,R:1",
                "TableName": "user_extra_`user`_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra as ue where 1 != 1",
                    "Query": "select count(*) from user_extra as ue",
                    "Table": "user_extra"
                  },
                  {
                    "OperatorType": "Projection",
                    "Expressions": [
                      "count(*) * count(*) as count(*)",
                      "count(u.col) * count(*) as count(u.col)"
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "L:0,R:0,L:1",
                        "TableName": "`user`_`user`",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), count(u.col) from `user` as u where 1 != 1 group by .0",
                            "Query": "select count(*), count(u.col) from `user` as u group by .0",
                            "Table": "`user`"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*) from `user` as u2 where 1 != 1 group by .0",
                            "Query": "select count(*) from `user` as u2 group by .0",
                            "Table": "`user`"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "interleaving grouping, aggregation and join with min, max columns",
    "query": "select user.col, min(user_extra.foo), user.bar, max(user_extra.bar) from user join user_extra on user.col = user_extra.bar group by user.col, user.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col, min(user_extra.foo), user.bar, max(user_extra.bar) from user join user_extra on user.col = user_extra.bar group by user.col, user.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|5) AS min(user_extra.foo), max(3|6) AS max(user_extra.bar)",
        "GroupBy": "0, (2|4)",
        "ResultColumns": 4,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:0,L:1,R:1,L:2,R:2,R:3",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col, `user`.bar, weight_string(`user`.bar) from `user` where 1 != 1 group by `user`.col, `user`.bar, weight_string(`user`.bar)",
                "OrderBy": "0 ASC, (1|2) ASC",
                "Query": "select `user`.col, `user`.bar, weight_string(`user`.bar) from `user` group by `user`.col, `user`.bar, weight_string(`user`.bar) order by `user`.col asc, `user`.bar asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select min(user_extra.foo), max(user_extra.bar), weight_string(user_extra.foo), weight_string(user_extra.bar) from user_extra where 1 != 1 group by .0, weight_string(user_extra.foo), weight_string(user_extra.bar)",
                "Query": "select min(user_extra.foo), max(user_extra.bar), weight_string(user_extra.foo), weight_string(user_extra.bar) from user_extra where user_extra.bar = :user_col group by .0, weight_string(user_extra.foo), weight_string(user_extra.bar)",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "extremum on input from both sides",
    "query": "select max(u.foo*ue.bar) from user u join user_extra ue",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max(u.foo*ue.bar) from user u join user_extra ue",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0|1) AS max(u.foo * ue.bar)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0,R:1",
            "JoinVars": {
              "u_foo": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.foo from `user` as u where 1 != 1",
                "Query": "select u.foo from `user` as u",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select :u_foo * ue.bar, weight_string(:u_foo * ue.bar) from user_extra as ue where 1 != 1",
                "Query": "select :u_foo * ue.bar, weight_string(:u_foo * ue.bar) from user_extra as ue",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "aggregate on input from both sides - TODO optimize more",
    "query": "select sum(user.foo+user_extra.bar) from user, user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(user.foo+user_extra.bar) from user, user_extra",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(`user`.foo + user_extra.bar)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0",
            "JoinVars": {
              "user_foo": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.foo from `user` where 1 != 1",
                "Query": "select `user`.foo from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select :user_foo + user_extra.bar from user_extra where 1 != 1",
                "Query": "select :user_foo + user_extra.bar from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "grouping column could be coming from multiple sides",
    "query": "select count(*) from user, user_extra group by user.id+user_extra.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user, user_extra group by user.id+user_extra.id",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "(1|2) ASC",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "count(*) * count(*) as count(*)",
                  ":2 as `user`.id + user_extra.id",
                  ":3 as weight_string(`user`.id + user_extra.id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,R:1,R:2",
                    "JoinVars": {
                      "user_id": 1
                    },
                    "TableName": "`user`_user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), `user`.id from `user` where 1 != 1 group by `user`.id",
                        "Query": "select count(*), `user`.id from `user` group by `user`.id",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), :user_id + user_extra.id, weight_string(:user_id + user_extra.id) from user_extra where 1 != 1 group by :user_id + user_extra.id",
                        "Query": "select count(*), :user_id + user_extra.id, weight_string(:user_id + user_extra.id) from user_extra group by :user_id + user_extra.id",
                        "Table": "user_extra"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Complex aggregate expression on scatter",
    "query": "select 1+count(*) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1+count(*) from user",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "1 + count(*) as 1 + count(*)"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0), sum_count_star(1) AS count(*)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(*) from `user` where 1 != 1",
                "Query": "select 1, count(*) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "combine the output of two aggregations in the final result",
    "query": "select greatest(sum(user.foo), sum(user_extra.bar)) from user join user_extra on user.col = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select greatest(sum(user.foo), sum(user_extra.bar)) from user join user_extra on user.col = user_extra.col",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "greatest(sum(`user`.foo), sum(user_extra.bar)) as greatest(sum(`user`.foo), sum(user_extra.bar))"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS sum(`user`.foo), sum(1) AS sum(user_extra.bar)",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "sum(`user`.foo) * count(*) as sum(`user`.foo)",
                  "count(*) * sum(user_extra.bar) as sum(user_extra.bar)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,R:1,L:1",
                    "JoinVars": {
                      "user_col": 2
                    },
                    "TableName": "`user`_user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select sum(`user`.foo), count(*), `user`.col from `user` where 1 != 1 group by `user`.col",
                        "Query": "select sum(`user`.foo), count(*), `user`.col from `user` group by `user`.col",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), sum(user_extra.bar) from user_extra where 1 != 1 group by .0",
                        "Query": "select count(*), sum(user_extra.bar) from user_extra where user_extra.col = :user_col group by .0",
                        "Table": "user_extra"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Aggregate detection (group_concat)",
    "query": "select group_concat(user.a) from user join user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select group_concat(user.a) from user join user_extra",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "group_concat(0) AS group_concat(`user`.a)",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.a from `user` where 1 != 1",
                "Query": "select `user`.a from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "plan a query with any_value()",
    "query": "select count(*), any_value(u.name), any_value(ue.title) from user u join user_extra ue on u.bar = ue.foo ",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*), any_value(u.name), any_value(ue.title) from user u join user_extra ue on u.bar = ue.foo ",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*), any_value(1) AS any_value(u.`name`), any_value(2) AS any_value(ue.title)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)",
              ":2 as any_value(u.`name`)",
              ":3 as any_value(ue.title)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0,L:1,R:1",
                "JoinVars": {
                  "u_bar": 2
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), any_value(u.`name`), u.bar from `user` as u where 1 != 1 group by u.bar",
                    "Query": "select count(*), any_value(u.`name`), u.bar from `user` as u group by u.bar",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), any_value(ue.title) from user_extra as ue where 1 != 1 group by .0",
                    "Query": "select count(*), any_value(ue.title) from user_extra as ue where ue.foo = :u_bar group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Rewrite derived expression while pushing order by underneath aggregation",
    "query": "select d.a from music join (select id, count(*) as a from user) as d on music.user_id = d.id group by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select d.a from music join (select id, count(*) as a from user) as d on music.user_id = d.id group by 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "JoinVars": {
              "d_id": 1
            },
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Ordered",
                "GroupBy": "0, (1|2)",
                "Inputs": [
                  {
                    "OperatorType": "SimpleProjection",
                    "Columns": [
                      1,
                      0,
                      2
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Aggregate",
                        "Variant": "Scalar",
                        "Aggregates": "any_value(0) AS id, sum_count_star(1) AS a, any_value(2)",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select id, count(*) as a, weight_string(id) from `user` where 1 != 1",
                            "OrderBy": "1 ASC, (0|2) ASC",
                            "Query": "select id, count(*) as a, weight_string(id) from `user` order by count(*) asc, id asc",
                            "Table": "`user`"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music where 1 != 1 group by .0",
                "Query": "select 1 from music where music.user_id = :d_id group by .0",
                "Table": "music",
                "Values": [
                  ":d_id"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "group_concat with group by without in select list",
    "query": "select group_concat(user.id) from user, music where user.id = music.foo group by user.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select group_concat(user.id) from user, music where user.id = music.foo group by user.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "group_concat(0) AS group_concat(`user`.id)",
        "GroupBy": "(1|2)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "(1|2) ASC",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,R:1,R:2",
                "JoinVars": {
                  "music_foo": 0
                },
                "TableName": "music_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select music.foo from music where 1 != 1",
                    "Query": "select music.foo from music",
                    "Table": "music"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "EqualUnique",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id, `user`.bar, weight_string(`user`.bar) from `user` where 1 != 1",
                    "Query": "select `user`.id, `user`.bar, weight_string(`user`.bar) from `user` where `user`.id = :music_foo",
                    "Table": "`user`",
                    "Values": [
                      ":music_foo"
                    ],
                    "Vindex": "user_index"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "group_concat aggregation on top of route",
    "query": "select intcol, group_concat(foo) from user group by intcol",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select intcol, group_concat(foo) from user group by intcol",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "group_concat(1) AS group_concat(foo)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select intcol, group_concat(foo) from `user` where 1 != 1 group by intcol",
            "OrderBy": "0 ASC",
            "Query": "select intcol, group_concat(foo) from `user` group by intcol order by intcol asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ordering on top of aggregator without pushing the column down during the horizon phase",
    "query": "select u.foo, group_concat(u.bar) from user u, music m where u.col = m.col group by u.foo order by u.baz",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.foo, group_concat(u.bar) from user u, music m where u.col = m.col group by u.foo order by u.baz",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(2|4) ASC",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "group_concat(1) AS group_concat(u.bar), any_value(2) AS baz, any_value(4)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,L:3,L:4",
                "JoinVars": {
                  "u_col": 5
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.foo, u.bar, u.baz, weight_string(u.foo), weight_string(u.baz), u.col from `user` as u where 1 != 1",
                    "OrderBy": "(0|3) ASC",
                    "Query": "select u.foo, u.bar, u.baz, weight_string(u.foo), weight_string(u.baz), u.col from `user` as u order by u.foo asc",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from music as m where 1 != 1",
                    "Query": "select 1 from music as m where m.col = :u_col",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "count distinct and sum distinct on join query pushed down - unique vindex",
    "query": "select u.col1, count(distinct m.user_id), sum(distinct m.user_id) from user u join music m group by u.col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.col1, count(distinct m.user_id), sum(distinct m.user_id) from user u join music m group by u.col1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_distinct(1) AS count(distinct m.user_id), sum_sum_distinct(2) AS sum(distinct m.user_id)",
        "GroupBy": "(0|3)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:0,R:1,L:1",
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.col1, weight_string(u.col1) from `user` as u where 1 != 1 group by u.col1, weight_string(u.col1)",
                "OrderBy": "(0|1) ASC",
                "Query": "select u.col1, weight_string(u.col1) from `user` as u group by u.col1, weight_string(u.col1) order by u.col1 asc",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(distinct m.user_id), sum(distinct m.user_id) from music as m where 1 != 1 group by .0",
                "Query": "select count(distinct m.user_id), sum(distinct m.user_id) from music as m group by .0",
                "Table": "music"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "count and sum distinct with min distinct on different expressions",
    "query": "select foo, min(distinct bar), count(distinct baz), sum(distinct baz), max(distinct toto) from user group by foo",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, min(distinct bar), count(distinct baz), sum(distinct baz), max(distinct toto) from user group by foo",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "min(1|6) AS min(distinct bar), count_distinct(2|7) AS count(distinct baz), sum_distinct(3|7) AS sum(distinct baz), max(4|8) AS max(distinct toto)",
        "GroupBy": "(0|5)",
        "ResultColumns": 5,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select foo, min(bar) as `min(distinct bar)`, baz, baz, max(toto) as `max(distinct toto)`, weight_string(foo), weight_string(bar), weight_string(baz), weight_string(toto) from `user` where 1 != 1 group by foo, baz, weight_string(foo), weight_string(bar), weight_string(baz), weight_string(toto)",
            "OrderBy": "(0|5) ASC, (2|7) ASC",
            "Query": "select foo, min(bar) as `min(distinct bar)`, baz, baz, max(toto) as `max(distinct toto)`, weight_string(foo), weight_string(bar), weight_string(baz), weight_string(toto) from `user` group by foo, baz, weight_string(foo), weight_string(bar), weight_string(baz), weight_string(toto) order by foo asc, baz asc",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation on union",
    "query": "select sum(col) from (select col from user union all select col from unsharded) t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(col) from (select col from user union all select col from unsharded) t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select col from unsharded where 1 != 1",
                "Query": "select col from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation on top of derived table with limit",
    "query": "select count(val2), sum(val2) from (select id, val2 from user where val2 is null limit 2) as x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(val2), sum(val2) from (select id, val2 from user where val2 is null limit 2) as x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(val2), sum(1) AS sum(val2)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1,
              1
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "2",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.id, x.val2 from (select id, val2 from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.id, x.val2 from (select id, val2 from `user` where val2 is null) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "aggregation on top of aggregation works fine",
    "query": "select distinct count(*) from user, (select distinct count(*) from user) X",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct count(*) from user, (select distinct count(*) from user) X",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * count(*) as count(*)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "`user`_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from `user` where 1 != 1",
                    "Query": "select count(*) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Ordered",
                    "Aggregates": "count_star(0)",
                    "GroupBy": "1",
                    "Inputs": [
                      {
                        "OperatorType": "SimpleProjection",
                        "Columns": [
                          2,
                          1
                        ],
                        "Inputs": [
                          {
                            "OperatorType": "Aggregate",
                            "Variant": "Ordered",
                            "Aggregates": "sum_count_star(0) AS count(*), any_value(2)",
                            "GroupBy": "1",
                            "Inputs": [
                              {
                                "OperatorType": "Route",
                                "Variant": "Scatter",
                                "Keyspace": {
                                  "Name": "user",
                                  "Sharded": true
                                },
                                "FieldQuery": "select count(*), .0, 1 from `user` where 1 != 1 group by .0",
                                "Query": "select count(*), .0, 1 from `user` group by .0",
                                "Table": "`user`"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Add two counts together",
    "query": "SELECT (select count(*) from user) + (select count(*) from user_extra)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT (select count(*) from user) + (select count(*) from user_extra)",
      "Instructions": {
        "OperatorType": "UncorrelatedSubquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq2"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum_count_star(0) AS count(*)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) from user_extra where 1 != 1",
                "Query": "select count(*) from user_extra",
                "Table": "user_extra"
              }
            ]
          },
          {
            "InputName": "Outer",
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutValue",
            "PulloutVars": [
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS count(*)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from `user` where 1 != 1",
                    "Query": "select count(*) from `user`",
                    "Table": "`user`"
                  }
                ]
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Reference",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select :__sq1 + :__sq2 as `(select count(*) from ``user``) + (select count(*) from user_extra)` from dual where 1 != 1",
                "Query": "select :__sq1 + :__sq2 as `(select count(*) from ``user``) + (select count(*) from user_extra)` from dual",
                "Table": "dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "avg function on scatter query",
    "query": "select avg(id) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select avg(id) from user",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "sum(id) / count(id) as avg(id)"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS avg(id), sum_count(1) AS count(id)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(id), count(id) from `user` where 1 != 1",
                "Query": "select sum(id), count(id) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "avg function on scatter query deep inside the output expression",
    "query": "select avg(id)+count(foo)+bar from user group by bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select avg(id)+count(foo)+bar from user group by bar",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "avg(id) + count(foo) + bar as avg(id) + count(foo) + bar"
        ],
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":0 as bar",
              "sum(id) / count(id) as avg(id)",
              ":2 as count(foo)"
            ],
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Ordered",
                "Aggregates": "sum(1) AS avg(id), sum_count(2) AS count(foo), sum_count(3) AS count(id)",
                "GroupBy": "(0|4)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select bar, sum(id), count(foo), count(id), weight_string(bar) from `user` where 1 != 1 group by bar, weight_string(bar)",
                    "OrderBy": "(0|4) ASC",
                    "Query": "select bar, sum(id), count(foo), count(id), weight_string(bar) from `user` group by bar, weight_string(bar) order by bar asc",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "avg function on scatter query deep inside the output expression",
    "query": "select avg(id)+count(foo)+bar from user group by bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select avg(id)+count(foo)+bar from user group by bar",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "avg(id) + count(foo) + bar as avg(id) + count(foo) + bar"
        ],
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              ":0 as bar",
              "sum(id) / count(id) as avg(id)",
              ":2 as count(foo)"
            ],
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Ordered",
                "Aggregates": "sum(1) AS avg(id), sum_count(2) AS count(foo), sum_count(3) AS count(id)",
                "GroupBy": "(0|4)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select bar, sum(id), count(foo), count(id), weight_string(bar) from `user` where 1 != 1 group by bar, weight_string(bar)",
                    "OrderBy": "(0|4) ASC",
                    "Query": "select bar, sum(id), count(foo), count(id), weight_string(bar) from `user` group by bar, weight_string(bar) order by bar asc",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "two avg aggregations",
    "query": "select avg(foo), avg(bar) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select avg(foo), avg(bar) from user",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "sum(foo) / count(foo) as avg(foo)",
          "sum(bar) / count(bar) as avg(bar)"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS avg(foo), sum(1) AS avg(bar), sum_count(2) AS count(foo), sum_count(3) AS count(bar)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(foo), sum(bar), count(foo), count(bar) from `user` where 1 != 1",
                "Query": "select sum(foo), sum(bar), count(foo), count(bar) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "avg and count on the same argument",
    "query": "select avg(foo), count(foo) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select avg(foo), count(foo) from user",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "sum(foo) / count(foo) as avg(foo)",
          ":1 as count(foo)"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS avg(foo), sum_count(1) AS count(foo), sum_count(2) AS count(foo)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(foo), count(foo), count(foo) from `user` where 1 != 1",
                "Query": "select sum(foo), count(foo), count(foo) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "GROUP BY inside derived table on the RHS should not be a problem",
    "query": "SELECT c.column_name FROM user c JOIN (SELECT table_name FROM user WHERE id = 143 GROUP BY 1) AS tables ON tables.table_name = c.table_name",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT c.column_name FROM user c JOIN (SELECT table_name FROM user WHERE id = 143 GROUP BY 1) AS tables ON tables.table_name = c.table_name",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "tables_table_name": 0
        },
        "TableName": "`user`_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select table_name from (select table_name from `user` where 1 != 1 group by table_name) as `tables` where 1 != 1",
            "Query": "select table_name from (select table_name from `user` where id = 143 group by table_name) as `tables`",
            "Table": "`user`",
            "Values": [
              "143"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select c.column_name from `user` as c where 1 != 1",
            "Query": "select c.column_name from `user` as c where c.table_name = :tables_table_name",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Group by aggregated column should not be a problem",
    "query": "SELECT b.col FROM music AS b JOIN (SELECT MIN(bb.id) AS min_id, MAX(bb.id) AS max_id FROM user AS bb) AS foobars WHERE b.id > foobars.min_id GROUP BY b.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT b.col FROM music AS b JOIN (SELECT MIN(bb.id) AS min_id, MAX(bb.id) AS max_id FROM user AS bb) AS foobars WHERE b.id > foobars.min_id GROUP BY b.col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|1)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "(0|1) ASC",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,R:1",
                "JoinVars": {
                  "foobars_min_id": 0
                },
                "TableName": "`user`_music",
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Ordered",
                    "GroupBy": "0 COLLATE utf8mb4_0900_ai_ci",
                    "Inputs": [
                      {
                        "OperatorType": "Aggregate",
                        "Variant": "Scalar",
                        "Aggregates": "min(0|2) AS min_id, max(1|2) AS max_id",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select min(bb.id) as min_id, max(bb.id) as max_id, weight_string(bb.id) from `user` as bb where 1 != 1 group by weight_string(bb.id)",
                            "OrderBy": "0 ASC COLLATE utf8mb4_0900_ai_ci",
                            "Query": "select min(bb.id) as min_id, max(bb.id) as max_id, weight_string(bb.id) from `user` as bb group by weight_string(bb.id) order by min(bb.id) asc",
                            "Table": "`user`"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select b.col, weight_string(b.col) from music as b where 1 != 1 group by b.col, weight_string(b.col)",
                    "Query": "select b.col, weight_string(b.col) from music as b where b.id > :foobars_min_id group by b.col, weight_string(b.col)",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Group by aliases on both sides of a join",
    "query": "select count(*), cast(user.foo as datetime) as f1, cast(music.foo as datetime) as f2 from user join music group by f1, f2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*), cast(user.foo as datetime) as f1, cast(music.foo as datetime) as f2 from user join music group by f1, f2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|3), (2|4)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "(1|3) ASC, (2|4) ASC",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "count(*) * count(*) as count(*)",
                  ":2 as f1",
                  ":3 as f2",
                  ":4 as weight_string(cast(`user`.foo as datetime))",
                  ":5 as weight_string(cast(music.foo as datetime))"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,L:1,R:1,L:2,R:2",
                    "TableName": "`user`_music",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), cast(`user`.foo as datetime) as f1, weight_string(cast(`user`.foo as datetime)) from `user` where 1 != 1 group by cast(`user`.foo as datetime), weight_string(cast(`user`.foo as datetime))",
                        "Query": "select count(*), cast(`user`.foo as datetime) as f1, weight_string(cast(`user`.foo as datetime)) from `user` group by cast(`user`.foo as datetime), weight_string(cast(`user`.foo as datetime))",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), cast(music.foo as datetime) as f2, weight_string(cast(music.foo as datetime)) from music where 1 != 1 group by cast(music.foo as datetime), weight_string(cast(music.foo as datetime))",
                        "Query": "select count(*), cast(music.foo as datetime) as f2, weight_string(cast(music.foo as datetime)) from music group by cast(music.foo as datetime), weight_string(cast(music.foo as datetime))",
                        "Table": "music"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "count(*) push down through left hash join",
    "query": "select count(*) from user left join (select col, bar from user_extra limit 10) ue on user.col = ue.col group by user.foo, ue.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join (select col, bar from user_extra limit 10) ue on user.col = ue.col group by user.foo, ue.bar",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "GroupBy": "(1|2), (3|4)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "count(*) * coalesce(count(*), 1) as count(*)",
              ":4 as foo",
              ":6 as weight_string(`user`.foo)",
              ":5 as bar",
              ":7 as weight_string(ue.bar)"
            ],
            "Inputs": [
              {
                "OperatorType": "Sort",
                "Variant": "Memory",
                "OrderBy": "(4|6) ASC, (5|7) ASC",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "HashLeftJoin",
                    "Collation": "binary",
                    "ComparisonType": "INT16",
                    "JoinColumnIndexes": "-1,1,-2,2,-3,3",
                    "Predicate": "`user`.col = ue.col",
                    "TableName": "`user`_user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), `user`.col, `user`.foo from `user` where 1 != 1 group by `user`.col, `user`.foo",
                        "Query": "select count(*), `user`.col, `user`.foo from `user` group by `user`.col, `user`.foo",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Aggregate",
                        "Variant": "Ordered",
                        "Aggregates": "count_star(0)",
                        "GroupBy": "1, (2|3)",
                        "Inputs": [
                          {
                            "OperatorType": "SimpleProjection",
                            "Columns": [
                              2,
                              0,
                              1,
                              3
                            ],
                            "Inputs": [
                              {
                                "OperatorType": "Sort",
                                "Variant": "Memory",
                                "OrderBy": "0 ASC, (1|3) ASC",
                                "Inputs": [
                                  {
                                    "OperatorType": "Limit",
                                    "Count": "10",
                                    "Inputs": [
                                      {
                                        "OperatorType": "Route",
                                        "Variant": "Scatter",
                                        "Keyspace": {
                                          "Name": "user",
                                          "Sharded": true
                                        },
                                        "FieldQuery": "select ue.col, ue.bar, 1, weight_string(ue.bar) from (select col, bar from user_extra where 1 != 1) as ue where 1 != 1",
                                        "Query": "select ue.col, ue.bar, 1, weight_string(ue.bar) from (select col, bar from user_extra) as ue limit :__upper_limit",
                                        "Table": "user_extra"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "sharded subquery inside aggregation function on a dual table",
    "query": "select max((select min(col) from user where id = 1))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select min(col) from user where id = 1))",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select max((select min(col) from `user` where 1 != 1)) from dual where 1 != 1",
        "Query": "select max((select min(col) from `user` where id = 1)) from dual",
        "Table": "dual",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "unsharded subquery inside aggregation function on a sharded table",
    "query": "select max((select min(col) from unsharded)) from user where id = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select min(col) from unsharded)) from user where id = 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0|1) AS max((select min(col) from unsharded))",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutValue",
            "PulloutVars": [
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select min(col) from unsharded where 1 != 1",
                "Query": "select min(col) from unsharded",
                "Table": "unsharded"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select max(:__sq1), weight_string(:__sq1) from `user` where 1 != 1 group by weight_string(:__sq1)",
                "Query": "select max(:__sq1), weight_string(:__sq1) from `user` where id = 1 group by weight_string(:__sq1)",
                "Table": "`user`",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "sharded subquery inside aggregation function on a sharded table on different vindex value",
    "query": "select max((select min(col) from user where id = 1)) from user where id = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select min(col) from user where id = 1)) from user where id = 2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0|1) AS max((select min(col) from `user` where id = 1))",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutValue",
            "PulloutVars": [
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select min(col) from `user` where 1 != 1",
                "Query": "select min(col) from `user` where id = 1",
                "Table": "`user`",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select max(:__sq1), weight_string(:__sq1) from `user` where 1 != 1 group by weight_string(:__sq1)",
                "Query": "select max(:__sq1), weight_string(:__sq1) from `user` where id = 2 group by weight_string(:__sq1)",
                "Table": "`user`",
                "Values": [
                  "2"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "sharded subquery inside group_concat multi-column aggregation function on a dual table",
    "query": "select max((select group_concat(col1, col2) from user where id = 1))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select group_concat(col1, col2) from user where id = 1))",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select max((select group_concat(col1, col2) from `user` where 1 != 1)) from dual where 1 != 1",
        "Query": "select max((select group_concat(col1, col2) from `user` where id = 1)) from dual",
        "Table": "dual",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "sharded subquery inside group_concat multi-column aggregation function on a sharded table on same vindex value",
    "query": "select max((select group_concat(col1, col2) from user where id = 1)) from user where id = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select group_concat(col1, col2) from user where id = 1)) from user where id = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select max((select group_concat(col1, col2) from `user` where 1 != 1)) from `user` where 1 != 1",
        "Query": "select max((select group_concat(col1, col2) from `user` where id = 1)) from `user` where id = 1",
        "Table": "`user`",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "sharded subquery inside group_concat multi-column aggregation function on a sharded table",
    "query": "select max((select group_concat(col1, col2) from user where id = 1)) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select group_concat(col1, col2) from user where id = 1)) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0|1) AS max((select group_concat(col1, col2) from `user` where id = 1))",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "UncorrelatedSubquery",
            "Variant": "PulloutValue",
            "PulloutVars": [
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select group_concat(col1, col2) from `user` where 1 != 1",
                "Query": "select group_concat(col1, col2) from `user` where id = 1",
                "Table": "`user`",
                "Values": [
                  "1"
                ],
                "Vindex": "user_index"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select max(:__sq1), weight_string(:__sq1) from `user` where 1 != 1 group by weight_string(:__sq1)",
                "Query": "select max(:__sq1), weight_string(:__sq1) from `user` group by weight_string(:__sq1)",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "sharded correlated subquery inside aggregation function on a sharded table on same vindex",
    "query": "select max((select max(col2) from user u1 where u1.id = u2.id)) from user u2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select max((select max(col2) from user u1 where u1.id = u2.id)) from user u2",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "max(0|1) AS max((select max(col2) from `user` as u1 where u1.id = u2.id))",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select max((select max(col2) from `user` as u1 where 1 != 1)), weight_string((select max(col2) from `user` as u1 where 1 != 1)) from `user` as u2 where 1 != 1 group by weight_string((select max(col2) from `user` as u1 where 1 != 1))",
            "Query": "select max((select max(col2) from `user` as u1 where u1.id = u2.id)), weight_string((select max(col2) from `user` as u1 where u1.id = u2.id)) from `user` as u2 group by weight_string((select max(col2) from `user` as u1 where u1.id = u2.id))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Multi-value aggregates pushed as function without splitting",
    "query": "select count(a,b) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(a,b) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count(0) AS count(a, b)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(a, b) from `user` where 1 != 1",
            "Query": "select count(a, b) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "group_concat with multi column - pushed without splitting",
    "query": "select group_concat(col1, col2) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select group_concat(col1, col2) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "group_concat(0) AS group_concat(col1, col2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select group_concat(col1, col2) from `user` where 1 != 1",
            "Query": "select group_concat(col1, col2) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select count(distinct name, id) from user",
    "query": "select count(distinct name, id) from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(distinct name, id) from user",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_distinct(0) AS count(distinct `name`, id)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(distinct `name`, id) from `user` where 1 != 1",
            "Query": "select count(distinct `name`, id) from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "valid but slightly confusing query should work - col in the order by should not get expanded to the column alias col",
    "query": "select id, from_unixtime(min(col)) as col from user group by id order by min(col)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, from_unixtime(min(col)) as col from user group by id order by min(col)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, from_unixtime(min(col)) as col, min(col) from `user` where 1 != 1 group by id",
        "OrderBy": "2 ASC COLLATE utf8mb4_0900_ai_ci",
        "Query": "select id, from_unixtime(min(col)) as col, min(col) from `user` group by id order by min(col) asc",
        "ResultColumns": 2,
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "col is a column on user, but the HAVING is referring to an alias",
    "query": "select sum(x) col from user where x > 0 having col = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select sum(x) col from user where x > 0 having col = 2",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "sum(`user`.x) = 2",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS col",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(x) as col from `user` where 1 != 1",
                "Query": "select sum(x) as col from `user` where x > 0",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "baz in the HAVING clause can't be accessed because of the GROUP BY",
    "query": "select foo, count(bar) as x from user group by foo having baz > avg(baz) order by x",
    "plan": "Unknown column 'baz' in 'having clause'"
  }
]
