# join on having clause
"select e.col, u.id uid, e.id eid from user u join user_extra e having uid = eid"
{
  "QueryType": "SELECT",
  "Original": "select e.col, u.id uid, e.id eid from user u join user_extra e having uid = eid",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1,-1,2",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id as uid from user as u where 1 != 1",
        "Query": "select u.id as uid from user as u",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select e.col, e.id as eid from user_extra as e where 1 != 1",
        "Query": "select e.col, e.id as eid from user_extra as e having eid = :uid",
        "Table": "user_extra"
      }
    ]
  }
}

# bind var already in use
"select e.col, u.id uid, e.id eid from user u join user_extra e having uid = eid and e.col = :uid"
{
  "QueryType": "SELECT",
  "Original": "select e.col, u.id uid, e.id eid from user u join user_extra e having uid = eid and e.col = :uid",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1,-1,2",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id as uid from user as u where 1 != 1",
        "Query": "select u.id as uid from user as u",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select e.col, e.id as eid from user_extra as e where 1 != 1",
        "Query": "select e.col, e.id as eid from user_extra as e having eid = :uid1 and e.col = :uid",
        "Table": "user_extra"
      }
    ]
  }
}

# wire-up join with join, going left
"select u1.id from user u1 join user u2 join user u3 where u3.col = u1.col"
{
  "QueryType": "SELECT",
  "Original": "select u1.id from user u1 join user u2 join user u3 where u3.col = u1.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "user_user_user",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "TableName": "user_user",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u1.id, u1.col from user as u1 where 1 != 1",
            "Query": "select u1.id, u1.col from user as u1",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user as u2 where 1 != 1",
            "Query": "select 1 from user as u2",
            "Table": "user"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user as u3 where 1 != 1",
        "Query": "select 1 from user as u3 where u3.col = :u1_col",
        "Table": "user"
      }
    ]
  }
}

# wire-up join with join, going left, then right
"select u1.id from user u1 join user u2 join user u3 where u3.col = u2.col"
{
  "QueryType": "SELECT",
  "Original": "select u1.id from user u1 join user u2 join user u3 where u3.col = u2.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "user_user_user",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,1",
        "TableName": "user_user",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u1.id from user as u1 where 1 != 1",
            "Query": "select u1.id from user as u1",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u2.col from user as u2 where 1 != 1",
            "Query": "select u2.col from user as u2",
            "Table": "user"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user as u3 where 1 != 1",
        "Query": "select 1 from user as u3 where u3.col = :u2_col",
        "Table": "user"
      }
    ]
  }
}

# wire-up join with join, reuse existing result from a lower join
"select u1.id from user u1 join user u2 on u2.col = u1.col join user u3 where u3.col = u1.col"
{
  "QueryType": "SELECT",
  "Original": "select u1.id from user u1 join user u2 on u2.col = u1.col join user u3 where u3.col = u1.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "user_user_user",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "TableName": "user_user",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u1.id, u1.col from user as u1 where 1 != 1",
            "Query": "select u1.id, u1.col from user as u1",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user as u2 where 1 != 1",
            "Query": "select 1 from user as u2 where u2.col = :u1_col",
            "Table": "user"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user as u3 where 1 != 1",
        "Query": "select 1 from user as u3 where u3.col = :u1_col",
        "Table": "user"
      }
    ]
  }
}

# wire-up join with join, reuse existing result from a lower join.
# You need two levels of join nesting to test this: when u3 requests
# col from u1, the u1-u2 joins exports the column to u2-u3. When
# u4 requests it, it should be reused from the u1-u2 join.
"select u1.id from user u1 join user u2 join user u3 on u3.id = u1.col join user u4 where u4.col = u1.col"
{
  "QueryType": "SELECT",
  "Original": "select u1.id from user u1 join user u2 join user u3 on u3.id = u1.col join user u4 where u4.col = u1.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "user_user_user_user",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2",
        "TableName": "user_user_user",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2",
            "TableName": "user_user",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u1.id, u1.col from user as u1 where 1 != 1",
                "Query": "select u1.id, u1.col from user as u1",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user as u2 where 1 != 1",
                "Query": "select 1 from user as u2",
                "Table": "user"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user as u3 where 1 != 1",
            "Query": "select 1 from user as u3 where u3.id = :u1_col",
            "Table": "user",
            "Values": [
              ":u1_col"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user as u4 where 1 != 1",
        "Query": "select 1 from user as u4 where u4.col = :u1_col",
        "Table": "user"
      }
    ]
  }
}

# Test reuse of join var already being supplied to the right of a node.
"select u1.id from user u1 join (user u2 join user u3) where u2.id = u1.col and u3.id = u1.col"
{
  "QueryType": "SELECT",
  "Original": "select u1.id from user u1 join (user u2 join user u3) where u2.id = u1.col and u3.id = u1.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "user_user_user",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.id, u1.col from user as u1 where 1 != 1",
        "Query": "select u1.id, u1.col from user as u1",
        "Table": "user"
      },
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "TableName": "user_user",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user as u2 where 1 != 1",
            "Query": "select 1 from user as u2 where u2.id = :u1_col",
            "Table": "user",
            "Values": [
              ":u1_col"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user as u3 where 1 != 1",
            "Query": "select 1 from user as u3 where u3.id = :u1_col",
            "Table": "user",
            "Values": [
              ":u1_col"
            ],
            "Vindex": "user_index"
          }
        ]
      }
    ]
  }
}

# Join on weird columns.
"select `weird``name`.a, unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id"
{
  "QueryType": "SELECT",
  "Original": "select `weird``name`.a, unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "weird`name_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `weird``name`.a, `weird``name`.`a``b*c` from `weird``name` where 1 != 1",
        "Query": "select `weird``name`.a, `weird``name`.`a``b*c` from `weird``name`",
        "Table": "weird`name"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.b from unsharded where 1 != 1",
        "Query": "select unsharded.b from unsharded where unsharded.id = :weird_name_a_b_c",
        "Table": "unsharded"
      }
    ]
  }
}

# Join on weird column (col is not in select)
"select unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.b from `weird``name` join unsharded on `weird``name`.`a``b*c` = unsharded.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "weird`name_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `weird``name`.`a``b*c` from `weird``name` where 1 != 1",
        "Query": "select `weird``name`.`a``b*c` from `weird``name`",
        "Table": "weird`name"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.b from unsharded where 1 != 1",
        "Query": "select unsharded.b from unsharded where unsharded.id = :weird_name_a_b_c",
        "Table": "unsharded"
      }
    ]
  }
}

# wire-up with limit primitive
"select u.id, e.id from user u join user_extra e where e.id = u.col limit 10"
{
  "QueryType": "SELECT",
  "Original": "select u.id, e.id from user u join user_extra e where e.id = u.col limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,1",
        "TableName": "user_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.id, u.col from user as u where 1 != 1",
            "Query": "select u.id, u.col from user as u",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select e.id from user_extra as e where 1 != 1",
            "Query": "select e.id from user_extra as e where e.id = :u_col",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}

# Wire-up in subquery
"select 1 from user where id in (select u.id, e.id from user u join user_extra e where e.id = u.col limit 10)"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user where id in (select u.id, e.id from user u join user_extra e where e.id = u.col limit 10)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 10,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,1",
            "TableName": "user_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.id, u.col from user as u where 1 != 1",
                "Query": "select u.id, u.col from user as u",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select e.id from user_extra as e where 1 != 1",
                "Query": "select e.id from user_extra as e where e.id = :u_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user where 1 != 1",
        "Query": "select 1 from user where :__sq_has_values1 = 1 and id in ::__vals",
        "Table": "user",
        "Values": [
          "::__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Wire-up in underlying primitive after pullout
"select u.id, e.id, (select col from user) from user u join user_extra e where e.id = u.col limit 10"
{
  "QueryType": "SELECT",
  "Original": "select u.id, e.id, (select col from user) from user u join user_extra e where e.id = u.col limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from user where 1 != 1",
            "Query": "select col from user",
            "Table": "user"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,1,-2",
            "TableName": "user_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u.id, :__sq1, u.col from user as u where 1 != 1",
                "Query": "select u.id, :__sq1, u.col from user as u",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select e.id from user_extra as e where 1 != 1",
                "Query": "select e.id from user_extra as e where e.id = :u_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# Invalid value in IN clause
"select id from user where id in (18446744073709551616, 1)"
"strconv.ParseUint: parsing "18446744073709551616": value out of range"

# Invalid value in IN clause from LHS of join
"select u1.id from user u1 join user u2 where u1.id = 18446744073709551616"
"strconv.ParseUint: parsing "18446744073709551616": value out of range"

# Invalid value in IN clause from RHS of join
"select u1.id from user u1 join user u2 where u2.id = 18446744073709551616"
"strconv.ParseUint: parsing "18446744073709551616": value out of range"
