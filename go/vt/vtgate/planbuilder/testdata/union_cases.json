[
  {
    "comment": "union all between two scatter selects",
    "query": "select id from user union all select id from music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user union all select id from music",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1 union all select id from music where 1 != 1",
        "Query": "select id from `user` union all select id from music",
        "Table": "`user`, music"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "union distinct between two scatter selects",
    "query": "select id from user union select id from music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user union select id from music",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select id from music where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.id, weight_string(dt.id) from (select id from `user` union select id from music) as dt",
            "Table": "`user`, music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "union all between two SelectEqualUnique",
    "query": "select id from user where id = 1 union all select id from user where id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 1 union all select id from user where id = 5",
      "Instructions": {
        "OperatorType": "Concatenate",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where id = 1",
            "Table": "`user`",
            "Values": [
              "1"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where id = 5",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "almost dereks query - two queries with order by and limit being scattered to two different sets of tablets",
    "query": "(SELECT id FROM user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM music ORDER BY id DESC LIMIT 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(SELECT id FROM user ORDER BY id DESC LIMIT 1) UNION ALL (SELECT id FROM music ORDER BY id DESC LIMIT 1)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "1",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "Query": "select id, weight_string(id) from `user` order by `user`.id desc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "1",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from music where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "Query": "select id, weight_string(id) from music order by music.id desc limit :__upper_limit",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Union all",
    "query": "select col1, col2 from user union all select col1, col2 from user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1, col2 from user union all select col1, col2 from user_extra",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from `user` where 1 != 1 union all select col1, col2 from user_extra where 1 != 1",
        "Query": "select col1, col2 from `user` union all select col1, col2 from user_extra",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "union operations in subqueries (FROM)",
    "query": "select * from (select * from user union all select * from user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select * from user union all select * from user_extra) as t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from (select * from `user` where 1 != 1 union all select * from user_extra where 1 != 1) as t where 1 != 1",
        "Query": "select * from (select * from `user` union all select * from user_extra) as t",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "union operations in derived table, without star expression (FROM)ยก",
    "query": "select col1,col2 from (select col1, col2 from user union all select col1, col2 from user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1,col2 from (select col1, col2 from user union all select col1, col2 from user_extra) as t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from (select col1, col2 from `user` where 1 != 1 union all select col1, col2 from user_extra where 1 != 1) as t where 1 != 1",
        "Query": "select col1, col2 from (select col1, col2 from `user` union all select col1, col2 from user_extra) as t",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "union all between two scatter selects, with order by",
    "query": "(select id from user order by id limit 5) union all (select id from music order by id desc limit 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user order by id limit 5) union all (select id from music order by id desc limit 5)",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "5",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
                    "OrderBy": "(0|1) ASC",
                    "Query": "select id, weight_string(id) from `user` order by `user`.id asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "5",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from music where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "Query": "select id, weight_string(id) from music order by music.id desc limit :__upper_limit",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "union all on scatter and single route",
    "query": "select id from user where id = 1 union select id from user where id = 1  union all select id from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 1 union select id from user where id = 1  union all select id from user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1 union select id from `user` where 1 != 1 union all select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 1 union select id from `user` where id = 1 union all select id from `user`",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "union of information_schema with normal table",
    "query": "select CHARACTER_SET_NAME from information_schema.CHARACTER_SETS union select user_name from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select CHARACTER_SET_NAME from information_schema.CHARACTER_SETS union select user_name from unsharded",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0: utf8mb3_general_ci"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "DBA",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select CHARACTER_SET_NAME from information_schema.CHARACTER_SETS where 1 != 1",
                "Query": "select distinct CHARACTER_SET_NAME from information_schema.CHARACTER_SETS",
                "Table": "information_schema.CHARACTER_SETS"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select user_name from unsharded where 1 != 1",
                "Query": "select distinct user_name from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "union of information_schema with normal table",
    "query": "select * from unsharded union select * from information_schema.CHARACTER_SETS",
    "plan": "VT09015: schema tracking required"
  },
  {
    "comment": "multi-shard union",
    "query": "(select id from user union select id from music) union select 1 from dual",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user union select id from music) union select 1 from dual",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select id from music where 1 != 1 union select 1 from dual where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.id, weight_string(dt.id) from (select id from `user` union select id from music union select 1 from dual) as dt",
            "Table": "`user`, dual, music"
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "union with the same target shard because of vindex",
    "query": "select * from music where user_id = 1 union select * from user where id = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from music where user_id = 1 union select * from user where id = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from music where 1 != 1 union select * from `user` where 1 != 1",
        "Query": "select * from music where user_id = 1 union select * from `user` where id = 1",
        "Table": "`user`, music",
        "Values": [
          "1"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "union with the different target shard because of vindex (music -> lookup vindex, user -> hash vindex)",
    "query": "select * from music where id = 1 union select * from user where id = 1",
    "plan": "VT09015: schema tracking required"
  },
  {
    "comment": "union with different target shards",
    "query": "select 1 from music where id = 1 union select 1 from music where id = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from music where id = 1 union select 1 from music where id = 2",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music where 1 != 1",
                "Query": "select distinct 1 from music where id = 1",
                "Table": "music",
                "Values": [
                  "1"
                ],
                "Vindex": "music_user_map"
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music where 1 != 1",
                "Query": "select distinct 1 from music where id = 2",
                "Table": "music",
                "Values": [
                  "2"
                ],
                "Vindex": "music_user_map"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "multiple select statement have inner order by with union - TODO (systay) no need to send down ORDER BY if we are going to loose it with UNION DISTINCT",
    "query": "(select id from user order by 1 desc) union (select id from user order by 1 asc)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user order by 1 desc) union (select id from user order by 1 asc)",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.id, weight_string(dt.id) from ((select id from `user` where 1 != 1) union (select id from `user` where 1 != 1)) as dt where 1 != 1",
            "Query": "select dt.id, weight_string(dt.id) from ((select id from `user` order by id desc) union (select id from `user` order by id asc)) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multiple unions",
    "query": "select 1 union select null union select 1.0 union select '1' union select 2 union select 2.0 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 union select null union select 1.0 union select '1' union select 2 union select 2.0 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from dual where 1 != 1 union select null from dual where 1 != 1 union select 1.0 from dual where 1 != 1 union select '1' from dual where 1 != 1 union select 2 from dual where 1 != 1 union select 2.0 from `user` where 1 != 1",
            "Query": "select 1 from dual union select null from dual union select 1.0 from dual union select '1' from dual union select 2 from dual union select 2.0 from `user`",
            "Table": "`user`, dual"
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "union distinct between a scatter query and a join (other side)",
    "query": "(select user.id, user.name from user join user_extra where user_extra.extra = 'asdf') union select 'b','c' from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select user.id, user.name from user join user_extra where user_extra.extra = 'asdf') union select 'b','c' from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,L:2,L:3",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id, `user`.`name`, weight_string(`user`.id), weight_string(`user`.`name`) from `user` where 1 != 1",
                    "Query": "select distinct `user`.id, `user`.`name`, weight_string(`user`.id), weight_string(`user`.`name`) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from user_extra where 1 != 1",
                    "Query": "select distinct 1 from user_extra where user_extra.extra = 'asdf'",
                    "Table": "user_extra"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 'b', 'c', weight_string('b'), weight_string('c') from `user` where 1 != 1",
                "Query": "select distinct 'b', 'c', weight_string('b'), weight_string('c') from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "union distinct between a scatter query and a join (other side)",
    "query": "select 'b','c' from user union (select user.id, user.name from user join user_extra where user_extra.extra = 'asdf')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 'b','c' from user union (select user.id, user.name from user join user_extra where user_extra.extra = 'asdf')",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0: utf8mb4_0900_ai_ci",
          "1: utf8mb4_0900_ai_ci"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 'b', 'c' from `user` where 1 != 1",
                "Query": "select distinct 'b', 'c' from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id, `user`.`name` from `user` where 1 != 1",
                    "Query": "select distinct `user`.id, `user`.`name` from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from user_extra where 1 != 1",
                    "Query": "select distinct 1 from user_extra where user_extra.extra = 'asdf'",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "unmergable because we are using aggregation",
    "query": "select count(*) as s from user union select count(*) as s from music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) as s from user union select count(*) as s from music",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS s",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) as s from `user` where 1 != 1",
                    "Query": "select count(*) as s from `user`",
                    "Table": "`user`"
                  }
                ]
              },
              {
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS s",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) as s from music where 1 != 1",
                    "Query": "select count(*) as s from music",
                    "Table": "music"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Union in derived table with first SELECT being an UNION",
    "query": "select * from ((select id from user union select id+1 from user) union select user_id from user_extra) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from ((select id from user union select id+1 from user) union select user_id from user_extra) as t",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select id + 1 from `user` where 1 != 1 union select user_id from user_extra where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.id, weight_string(dt.id) from (select id from `user` union select id + 1 from `user` union select user_id from user_extra) as dt",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "gen4 optimises away ORDER BY when it's safe to do",
    "query": "(select id from user union select id from music order by id) union select 1 from unsharded",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select id from user union select id from music order by id) union select 1 from unsharded",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select id from music where 1 != 1) as dt where 1 != 1",
                "Query": "select id, weight_string(dt.id) from (select id from `user` union select id from music) as dt",
                "Table": "`user`, music"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1, weight_string(1) from unsharded where 1 != 1",
                "Query": "select distinct 1, weight_string(1) from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "push down the ::upper_limit to the sources, since we are doing DISTINCT on them, it's safe",
    "query": "select id from user union select 3 limit 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user union select 3 limit 10",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "10",
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:1)"
            ],
            "ResultColumns": 1,
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select 3 from dual where 1 != 1) as dt where 1 != 1",
                "Query": "select id, weight_string(dt.id) from (select id from `user` union select 3 from dual limit :__upper_limit) as dt",
                "Table": "`user`, dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "silly query that should be collapsed into a single unsharded UNION route",
    "query": "(select 1 from unsharded union select 1 from unsharded union all select 1 from unsharded order by 1) union select 1 from unsharded union all select 1 from unsharded order by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(select 1 from unsharded union select 1 from unsharded union all select 1 from unsharded order by 1) union select 1 from unsharded union all select 1 from unsharded order by 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "(select 1 from unsharded where 1 != 1 union select 1 from unsharded where 1 != 1 union all select 1 from unsharded where 1 != 1) union select 1 from unsharded where 1 != 1 union all select 1 from unsharded where 1 != 1",
        "Query": "(select 1 from unsharded union select 1 from unsharded union all select 1 from unsharded order by 1 asc) union select 1 from unsharded union all select 1 from unsharded order by 1 asc",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "UNION that needs to be reordered to be merged more aggressively. Gen4 is able to get it down to 2 routes",
    "query": "select col from unsharded union select id from user union select col2 from unsharded union select col from user_extra",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from unsharded union select id from user union select col2 from unsharded union select col from user_extra",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select dt.col, weight_string(col) from (select col from unsharded where 1 != 1 union select col2 from unsharded where 1 != 1) as dt where 1 != 1",
                "Query": "select dt.col, weight_string(col) from (select col from unsharded union select col2 from unsharded) as dt",
                "Table": "unsharded"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, weight_string(id) from (select id from `user` where 1 != 1 union select col from user_extra where 1 != 1) as dt where 1 != 1",
                "Query": "select id, weight_string(id) from (select id from `user` union select col from user_extra) as dt",
                "Table": "`user`, user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "derived table with union",
    "query": "select tbl2.id FROM ((select id from user order by id limit 5) union all (select id from user order by id desc limit 5)) as tbl1 INNER JOIN user as tbl2  ON tbl1.id = tbl2.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select tbl2.id FROM ((select id from user order by id limit 5) union all (select id from user order by id desc limit 5)) as tbl1 INNER JOIN user as tbl2  ON tbl1.id = tbl2.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "tbl1_id": 0
        },
        "TableName": "`user`_`user`",
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "5",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
                    "OrderBy": "(0|1) ASC",
                    "Query": "select id, weight_string(id) from `user` order by `user`.id asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              },
              {
                "OperatorType": "Limit",
                "Count": "5",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id, weight_string(id) from `user` where 1 != 1",
                    "OrderBy": "(0|1) DESC",
                    "Query": "select id, weight_string(id) from `user` order by `user`.id desc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select tbl2.id from `user` as tbl2 where 1 != 1",
            "Query": "select tbl2.id from `user` as tbl2 where tbl2.id = :tbl1_id",
            "Table": "`user`",
            "Values": [
              ":tbl1_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "ambiguous LIMIT",
    "query": "select id from user limit 1 union all select id from music limit 1",
    "plan": "syntax error at position 34 near 'union'"
  },
  {
    "comment": "ambiguous ORDER BY",
    "query": "select id from user order by id union all select id from music order by id desc",
    "plan": "syntax error at position 38 near 'union'"
  },
  {
    "comment": "different number of columns",
    "query": "select id, 42 from user where id = 1 union all select id from user where id = 5",
    "plan": "The used SELECT statements have a different number of columns: 2, 1"
  },
  {
    "comment": "union with invalid order by clause with table qualifier",
    "query": "select id from user union select 3 order by user.id",
    "plan": "Table `user` from one of the SELECTs cannot be used in global ORDER clause"
  },
  {
    "comment": "union with invalid order by clause with table qualifier",
    "query": "select id from user union select 3 order by id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user union select 3 order by id",
      "Instructions": {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "(0|1) ASC",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:1)",
              "1"
            ],
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select dt.id, weight_string(dt.id) from (select id from `user` where 1 != 1 union select 3 from dual where 1 != 1) as dt where 1 != 1",
                "Query": "select dt.id, weight_string(dt.id) from (select id from `user` union select 3 from dual) as dt",
                "Table": "`user`, dual"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.dual",
        "user.user"
      ]
    }
  },
  {
    "comment": "select 1 from (select id+42 as foo from user union select 1+id as foo from unsharded) as t",
    "query": "select 1 from (select id+42 as foo from user union select 1+id as foo from unsharded) as t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from (select id+42 as foo from user union select 1+id as foo from unsharded) as t",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          "1 as 1"
        ],
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:1)"
            ],
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select id + 42 as foo, weight_string(id + 42) from `user` where 1 != 1",
                    "Query": "select distinct id + 42 as foo, weight_string(id + 42) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Unsharded",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select 1 + id as foo, weight_string(1 + id) from unsharded where 1 != 1",
                    "Query": "select distinct 1 + id as foo, weight_string(1 + id) from unsharded",
                    "Table": "unsharded"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "systable union query in derived table with constraint on outside (without star projection)",
    "query": "select * from (select kcu.`COLUMN_NAME` from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'user_extra' union select kcu.`COLUMN_NAME` from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'music') `kcu` where `COLUMN_NAME` = 'primary'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select kcu.`COLUMN_NAME` from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'user_extra' union select kcu.`COLUMN_NAME` from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'music') `kcu` where `COLUMN_NAME` = 'primary'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "COLUMN_NAME = 'primary'",
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "0: utf8mb3_general_ci"
            ],
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "DBA",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select kcu.COLUMN_NAME from information_schema.key_column_usage as kcu where 1 != 1",
                    "Query": "select distinct kcu.COLUMN_NAME from information_schema.key_column_usage as kcu where kcu.table_schema = :__vtschemaname /* VARCHAR */ and kcu.table_name = :kcu_table_name /* VARCHAR */",
                    "SysTableTableName": "[kcu_table_name:'user_extra']",
                    "SysTableTableSchema": "['user']",
                    "Table": "information_schema.key_column_usage"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "DBA",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select kcu.COLUMN_NAME from information_schema.key_column_usage as kcu where 1 != 1",
                    "Query": "select distinct kcu.COLUMN_NAME from information_schema.key_column_usage as kcu where kcu.table_schema = :__vtschemaname /* VARCHAR */ and kcu.table_name = :kcu_table_name1 /* VARCHAR */",
                    "SysTableTableName": "[kcu_table_name1:'music']",
                    "SysTableTableSchema": "['user']",
                    "Table": "information_schema.key_column_usage"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  {
    "comment": "pushes predicate on both sides of UNION",
    "query": "select * from (select name, id as foo from user union select 'extra', user_id from user_extra) X where X.foo = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select name, id as foo from user union select 'extra', user_id from user_extra) X where X.foo = 3",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `name`, foo from (select `name`, id as foo from `user` where 1 != 1 union select 'extra', user_id from user_extra where 1 != 1) as X where 1 != 1",
        "Query": "select `name`, foo from (select `name`, id as foo from `user` where id = 3 union select 'extra', user_id from user_extra where user_id = 3) as X",
        "Table": "`user`, user_extra",
        "Values": [
          "3"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "systable union query in derived table with constraint on outside (star projection)",
    "query": "select * from (select * from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'user_extra' union select * from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'music') `kcu` where `constraint_name` = 'primary'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select * from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'user_extra' union select * from `information_schema`.`key_column_usage` `kcu` where `kcu`.`table_schema` = 'user' and `kcu`.`table_name` = 'music') `kcu` where `constraint_name` = 'primary'",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "constraint_name = 'primary'",
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "0: utf8mb3_general_ci",
              "1: utf8mb3_general_ci",
              "2: utf8mb3_general_ci",
              "3: utf8mb3_general_ci",
              "4: utf8mb3_general_ci",
              "5: utf8mb3_general_ci",
              "6: utf8mb3_general_ci",
              "7",
              "8",
              "9: utf8mb3_general_ci",
              "10: utf8mb3_general_ci",
              "11: utf8mb3_general_ci"
            ],
            "Inputs": [
              {
                "OperatorType": "Concatenate",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "DBA",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, POSITION_IN_UNIQUE_CONSTRAINT, REFERENCED_TABLE_SCHEMA, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME from information_schema.key_column_usage as kcu where 1 != 1",
                    "Query": "select distinct CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, POSITION_IN_UNIQUE_CONSTRAINT, REFERENCED_TABLE_SCHEMA, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME from information_schema.key_column_usage as kcu where kcu.table_schema = :__vtschemaname /* VARCHAR */ and kcu.table_name = :kcu_table_name /* VARCHAR */",
                    "SysTableTableName": "[kcu_table_name:'user_extra']",
                    "SysTableTableSchema": "['user']",
                    "Table": "information_schema.key_column_usage"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "DBA",
                    "Keyspace": {
                      "Name": "main",
                      "Sharded": false
                    },
                    "FieldQuery": "select CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, POSITION_IN_UNIQUE_CONSTRAINT, REFERENCED_TABLE_SCHEMA, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME from information_schema.key_column_usage as kcu where 1 != 1",
                    "Query": "select distinct CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, POSITION_IN_UNIQUE_CONSTRAINT, REFERENCED_TABLE_SCHEMA, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME from information_schema.key_column_usage as kcu where kcu.table_schema = :__vtschemaname /* VARCHAR */ and kcu.table_name = :kcu_table_name1 /* VARCHAR */",
                    "SysTableTableName": "[kcu_table_name1:'music']",
                    "SysTableTableSchema": "['user']",
                    "Table": "information_schema.key_column_usage"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  {
    "comment": "unknown columns are OK as long as the whole query is unsharded",
    "query": "(SELECT * FROM (SELECT * FROM unsharded WHERE branchId = 203622 AND buildNumber <= 113893 AND state = 'FAILED' ORDER BY buildNumber DESC LIMIT 1) AS last_failed) UNION ALL (SELECT * FROM (SELECT * FROM unsharded WHERE branchId = 203622 AND buildNumber <= 113893 AND state = 'SUCCEEDED' ORDER BY buildNumber DESC LIMIT 1) AS last_succeeded) ORDER BY buildNumber DESC LIMIT 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "(SELECT * FROM (SELECT * FROM unsharded WHERE branchId = 203622 AND buildNumber <= 113893 AND state = 'FAILED' ORDER BY buildNumber DESC LIMIT 1) AS last_failed) UNION ALL (SELECT * FROM (SELECT * FROM unsharded WHERE branchId = 203622 AND buildNumber <= 113893 AND state = 'SUCCEEDED' ORDER BY buildNumber DESC LIMIT 1) AS last_succeeded) ORDER BY buildNumber DESC LIMIT 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select * from (select * from unsharded where 1 != 1) as last_failed where 1 != 1 union all select * from (select * from unsharded where 1 != 1) as last_succeeded where 1 != 1",
        "Query": "select * from (select * from unsharded where branchId = 203622 and buildNumber <= 113893 and state = 'FAILED' order by buildNumber desc limit 1) as last_failed union all select * from (select * from unsharded where branchId = 203622 and buildNumber <= 113893 and state = 'SUCCEEDED' order by buildNumber desc limit 1) as last_succeeded order by buildNumber desc limit 1",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "union of unsharded route with sharded join with involvement of weight string",
    "query": "select id, foo, bar from unsharded union select user.intcol, user.textcol2, authoritative.col2 from user join authoritative",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id, foo, bar from unsharded union select user.intcol, user.textcol2, authoritative.col2 from user join authoritative",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:3)",
          "(1:4)",
          "(2:5)"
        ],
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select id, foo, bar, weight_string(id), weight_string(foo), weight_string(bar) from unsharded where 1 != 1",
                "Query": "select distinct id, foo, bar, weight_string(id), weight_string(foo), weight_string(bar) from unsharded",
                "Table": "unsharded"
              },
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,L:1,R:0,L:2,L:3,R:1",
                "TableName": "`user`_authoritative",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.intcol, `user`.textcol2, weight_string(`user`.intcol), weight_string(`user`.textcol2) from `user` where 1 != 1",
                    "Query": "select distinct `user`.intcol, `user`.textcol2, weight_string(`user`.intcol), weight_string(`user`.textcol2) from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select authoritative.col2, weight_string(authoritative.col2) from authoritative where 1 != 1",
                    "Query": "select distinct authoritative.col2, weight_string(authoritative.col2) from authoritative",
                    "Table": "authoritative"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.authoritative",
        "user.user"
      ]
    }
  },
  {
    "comment": "UNION ALL with repeating column on the LHS",
    "query": "select foo, foo, foo from user union all select bar, baz, toto from music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, foo, foo from user union all select bar, baz, toto from music",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select foo, foo, foo from `user` where 1 != 1 union all select bar, baz, toto from music where 1 != 1",
        "Query": "select foo, foo, foo from `user` union all select bar, baz, toto from music",
        "Table": "`user`, music"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "UNION ALL with repeating column on the RHS",
    "query": "select bar, baz, toto from music union all select foo, foo, foo from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select bar, baz, toto from music union all select foo, foo, foo from user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select bar, baz, toto from music where 1 != 1 union all select foo, foo, foo from `user` where 1 != 1",
        "Query": "select bar, baz, toto from music union all select foo, foo, foo from `user`",
        "Table": "`user`, music"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "UNION with repeating column on the RHS",
    "query": "select bar, baz, toto from music union select foo, foo, foo from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select bar, baz, toto from music union select foo, foo, foo from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:3)",
          "(1:4)",
          "(2:5)"
        ],
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.bar, dt.baz, dt.toto, weight_string(dt.bar), weight_string(dt.baz), weight_string(dt.toto) from (select bar, baz, toto from music where 1 != 1 union select foo, foo, foo from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.bar, dt.baz, dt.toto, weight_string(dt.bar), weight_string(dt.baz), weight_string(dt.toto) from (select bar, baz, toto from music union select foo, foo, foo from `user`) as dt",
            "Table": "`user`, music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "UNION with repeating column on the LHS",
    "query": "select foo, foo, foo from user union select bar, baz, toto from music",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select foo, foo, foo from user union select bar, baz, toto from music",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:3)",
          "(1:3)",
          "(2:3)"
        ],
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.foo, dt.foo, dt.foo, weight_string(dt.foo) from (select foo, foo, foo from `user` where 1 != 1 union select bar, baz, toto from music where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.foo, dt.foo, dt.foo, weight_string(dt.foo) from (select foo, foo, foo from `user` union select bar, baz, toto from music) as dt",
            "Table": "`user`, music"
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "join between two derived tables containing UNION",
    "query": "select * from (select foo from user where bar = 12 union select foo from user where bar = 134) as t1 join (select bar from music where foo = 12 union select bar from music where foo = 1234) as t2 on t1.foo = t2.bar",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from (select foo from user where bar = 12 union select foo from user where bar = 134) as t1 join (select bar from music where foo = 12 union select bar from music where foo = 1234) as t2 on t1.foo = t2.bar",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,R:0",
        "JoinVars": {
          "t1_foo": 0
        },
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:1)"
            ],
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select dt.foo, weight_string(dt.foo) from (select foo from `user` where 1 != 1 union select foo from `user` where 1 != 1) as dt where 1 != 1",
                "Query": "select dt.foo, weight_string(dt.foo) from (select foo from `user` where bar = 12 union select foo from `user` where bar = 134) as dt",
                "Table": "`user`"
              }
            ]
          },
          {
            "OperatorType": "Distinct",
            "Collations": [
              "(0:1)"
            ],
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select dt.bar, weight_string(dt.bar) from (select bar from music where 1 != 1 union select bar from music where 1 != 1) as dt where 1 != 1",
                "Query": "select dt.bar, weight_string(dt.bar) from (select bar from music where foo = 12 and bar = :t1_foo union select bar from music where foo = 1234 and bar = :t1_foo) as dt",
                "Table": "music"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Select literals from table union Select literals from table",
    "query": "SELECT 1 from user UNION SELECT 2 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT 1 from user UNION SELECT 2 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1 union select 2 from `user` where 1 != 1",
            "Query": "select 1 from `user` union select 2 from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select column from table union Select literals from table",
    "query": "select col1 from user union select 3 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col1 from user union select 3 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.col1, weight_string(dt.col1) from (select col1 from `user` where 1 != 1 union select 3 from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.col1, weight_string(dt.col1) from (select col1 from `user` union select 3 from `user`) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select literals from table union Select column from table",
    "query": "select 3 from user union select col1 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 3 from user union select col1 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.`3`, weight_string(dt.`3`) from (select 3 from `user` where 1 != 1 union select col1 from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.`3`, weight_string(dt.`3`) from (select 3 from `user` union select col1 from `user`) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select literals from table union Select now() from table",
    "query": "select 3 from user union select now() from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 3 from user union select now() from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.`3`, weight_string(dt.`3`) from (select 3 from `user` where 1 != 1 union select now() from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.`3`, weight_string(dt.`3`) from (select 3 from `user` union select now() from `user`) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select now() from table union Select literals from table",
    "query": "select now() from user union select 3 from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select now() from user union select 3 from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.`now()`, weight_string(dt.`now()`) from (select now() from `user` where 1 != 1 union select 3 from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.`now()`, weight_string(dt.`now()`) from (select now() from `user` union select 3 from `user`) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select now() from table union Select column from table",
    "query": "select now() from user union select id from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select now() from user union select id from user",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:1)"
        ],
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.`now()`, weight_string(dt.`now()`) from (select now() from `user` where 1 != 1 union select id from `user` where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.`now()`, weight_string(dt.`now()`) from (select now() from `user` union select id from `user`) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  }
]
