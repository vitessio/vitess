[
  {
    "comment": "No where clause",
    "query": "select id from user",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Query that always return empty",
    "query": "select id from user where someColumn = null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where someColumn = null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where someColumn = null",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Null Safe Equality Operator is handled correctly",
    "query": "SELECT id from user where someColumn <=> null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT id from user where someColumn <=> null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where someColumn <=> null",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table unique vindex route",
    "query": "select id from user where user.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id = 5",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table unique vindex route, but complex expr",
    "query": "select id from user where user.id = 5+5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id = 5+5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id = 5 + 5",
        "Table": "`user`",
        "Values": [
          "INT64(10)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table multiple unique vindex match",
    "query": "select id from music where id = 5 and user_id = 4",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id = 5 and user_id = 4",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id = 5 and user_id = 4",
        "Table": "music",
        "Values": [
          "INT64(4)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table multiple non-unique vindex match",
    "query": "select id from user where costly = 'aa' and name = 'bb'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where costly = 'aa' and name = 'bb'",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "VARCHAR(\"bb\")"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where costly = 'aa' and `name` = 'bb'",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table multiple non-unique vindex match for IN clause",
    "query": "select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"aa\"), VARCHAR(\"bb\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where costly in ('aa', 'bb') and `name` in ::__vals",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause",
    "query": "select id from user where (name, col) in (('aa', 'bb'), ('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (name, col) in (('aa', 'bb'), ('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"aa\"), VARCHAR(\"cc\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (`name`, col) in (('aa', 'bb'), ('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause, swapped columns",
    "query": "select id from user where (col, name) in (('aa', 'bb'), ('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (col, name) in (('aa', 'bb'), ('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"bb\"), VARCHAR(\"dd\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (col, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause, choose cost within tuple",
    "query": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"bb\"), VARCHAR(\"dd\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (costly, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause, choose cost within tuple, swapped",
    "query": "select id from user where (name, costly) in (('aa', 'bb'), ('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (name, costly) in (('aa', 'bb'), ('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"aa\"), VARCHAR(\"cc\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (`name`, costly) in (('aa', 'bb'), ('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause, choose cost",
    "query": "select id from user where (col, costly) in (('aa', 'bb')) and (col, name) in (('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (col, costly) in (('aa', 'bb')) and (col, name) in (('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"dd\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (col, costly) in (('aa', 'bb')) and (col, `name`) in (('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN clause vs equality",
    "query": "select id from user where (col, name) in (('aa', 'bb')) and id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (col, name) in (('aa', 'bb')) and id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where (col, `name`) in (('aa', 'bb')) and id = 5",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: multiple vindex matches",
    "query": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"bb\"), VARCHAR(\"dd\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (costly, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: tuple inside tuple",
    "query": "select id from user where ((col1, name), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where ((col1, name), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"bb\"), VARCHAR(\"ee\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where ((col1, `name`), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: tuple inside tuple, but no match in tuple",
    "query": "select id from user where (name, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (name, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(VARCHAR(\"aa\"), VARCHAR(\"dd\"))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (`name`, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: tuple inside tuple, mismiatched values",
    "query": "select id from user where ((col1, name), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where ((col1, name), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where ((col1, `name`), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: RHS not tuple",
    "query": "select id from user where (col1, name) in (select * from music where music.user_id=user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (col1, name) in (select * from music where music.user_id=user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where (col1, `name`) in (select * from music where music.user_id = `user`.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "Composite IN: RHS has no simple values",
    "query": "select id from user where (col1, name) in (('aa', 1+1))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (col1, name) in (('aa', 1+1))",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "(INT64(2))"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (col1, `name`) in (('aa', 1 + 1))",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "IN clause: LHS is neither column nor composite tuple",
    "query": "select Id from user where 1 in ('aa', 'bb')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select Id from user where 1 in ('aa', 'bb')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select Id from `user` where 1 != 1",
        "Query": "select Id from `user` where 1 in ('aa', 'bb')",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table complex in clause",
    "query": "select id from user where name in (col, 'bb')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where name in (col, 'bb')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `name` in (col, 'bb')",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table equality route with val arg",
    "query": "select id from user where name = :a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where name = :a",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          ":a"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where `name` = :a",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table equality route with unsigned value",
    "query": "select id from user where name = 18446744073709551615",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where name = 18446744073709551615",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "UINT64(18446744073709551615)"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where `name` = 18446744073709551615",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table in clause list arg",
    "query": "select id from user where name in ::list",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where name in ::list",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "::list"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where `name` in ::__vals",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Multi-table unique vindex constraint",
    "query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
        "Query": "select user_extra.id from `user`, user_extra where `user`.id = 5 and `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-table unique vindex constraint on right table",
    "query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
        "Query": "select user_extra.id from `user`, user_extra where user_extra.user_id = 5 and `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-table unique vindex constraint on left table of left join",
    "query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where 1 != 1",
        "Query": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where `user`.id = 5",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-table unique vindex constraint on left-joined right table",
    "query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
        "Query": "select user_extra.id from `user`, user_extra where user_extra.user_id = 5 and `user`.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-route unique vindex constraint",
    "query": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user` where `user`.id = 5",
            "Table": "`user`",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
            "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-route unique vindex route on both routes",
    "query": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
        "Query": "select user_extra.id from `user`, user_extra where `user`.id = 5 and user_extra.user_id = 5 and `user`.col = user_extra.col",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-route with cross-route constraint",
    "query": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
            "Query": "select user_extra.id from user_extra where user_extra.user_id = :user_col and user_extra.col = :user_col",
            "Table": "user_extra",
            "Values": [
              ":user_col"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Multi-route with non-route constraint, should use first route.",
    "query": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_col": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user` where 1 = 1",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
            "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and 1 = 1",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints, SelectIN is the best constraint.",
    "query": "select id from user where user.col = 5 and user.id in (1, 2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.col = 5 and user.id in (1, 2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.col = 5 and `user`.id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints and boolean, SelectIN is the best constraint.",
    "query": "select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.col = case `user`.col when 'foo' then true else false end and `user`.id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints and boolean, SelectEqual is the best constraint.",
    "query": "select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "VARCHAR(\"aa\")"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id or col as val from `user` where 1 != 1",
            "Query": "select id or col as val from `user` where `user`.col = 5 and `user`.id in (1, 2) and `user`.`name` = 'aa'",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints, SelectEqual is the best constraint.",
    "query": "select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "VARCHAR(\"aa\")"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where `user`.col = false and `user`.id in (1, 2) and `user`.`name` = 'aa'",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints, SelectEqualUnique is the best constraint.",
    "query": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.col = 5 and `user`.id in (1, 2) and `user`.`name` = 'aa' and `user`.id = 1",
        "Table": "`user`",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with multiple route constraints, SelectEqualUnique is the best constraint, order reversed.",
    "query": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id = 1 and `user`.`name` = 'aa' and `user`.id in (1, 2) and `user`.col = 5",
        "Table": "`user`",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Route with OR and AND clause, must parenthesize correctly.",
    "query": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where (`user`.id = 1 or `user`.`name` = 'aa') and `user`.id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Unsharded route",
    "query": "select unsharded.id from user join unsharded where unsharded.id = user.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.id from user join unsharded where unsharded.id = user.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "unsharded_id": 0
        },
        "TableName": "unsharded_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
            "Query": "select unsharded.id from unsharded",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` where 1 != 1",
            "Query": "select 1 from `user` where `user`.id = :unsharded_id",
            "Table": "`user`",
            "Values": [
              ":unsharded_id"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules: choose the redirected table",
    "query": "select col from route1 where id = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from route1 where id = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` as route1 where 1 != 1",
        "Query": "select col from `user` as route1 where id = 1",
        "Table": "`user`",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "subquery",
    "query": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_col": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.m from `user` as u where 1 != 1",
            "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col /* INT16 */) and u.id in ::__vals",
            "Table": "`user`",
            "Values": [
              "(:user_extra_col, INT64(1))"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "correlated subquery merge-able into a route of a join tree",
    "query": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id) and u.id in (user_extra.col, 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id) and u.id in (user_extra.col, 1)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_col": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.m from `user` as u where 1 != 1",
            "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id) and u.id in ::__vals",
            "Table": "`user`",
            "Values": [
              "(:user_extra_col, INT64(1))"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "ensure subquery reordering gets us a better plan",
    "query": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.m from `user` as u where 1 != 1",
            "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = 5) and u.id = 5",
            "Table": "`user`",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "nested subquery",
    "query": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_col": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.m from `user` as u where 1 != 1",
            "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col /* INT16 */ and `user`.id in (select m3 from user_extra where user_extra.user_id = `user`.id)) and u.id in ::__vals",
            "Table": "`user`",
            "Values": [
              "(:user_extra_col, INT64(1))"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "Correlated subquery in where clause",
    "query": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.col in (select user_extra.col from user_extra where user_extra.user_id = `user`.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "outer and inner subquery route by same int val",
    "query": "select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "outer and inner subquery route by same str val",
    "query": "select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 'aa' and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
        "Table": "`user`",
        "Values": [
          "VARCHAR(\"aa\")"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "outer and inner subquery route by same val arg",
    "query": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = :a and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
        "Table": "`user`",
        "Values": [
          ":a"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "unresolved symbol in inner subquery.",
    "query": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a and foo.id = 1)",
    "plan": "column 'foo.id' not found"
  },
  {
    "comment": "outer and inner subquery route by same outermost column value",
    "query": "select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id2 from `user` as uu where 1 != 1",
        "Query": "select id2 from `user` as uu where id in (select id from `user` where id = uu.id and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "cross-shard subquery in IN clause.\n# Note the improved Underlying plan as SelectIN.",
    "query": "select id from user where id in (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id in (select col from user)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values1 = 1 and id in ::__vals",
            "Table": "`user`",
            "Values": [
              "::__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "cross-shard subquery in NOT IN clause.",
    "query": "select id from user where id not in (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id not in (select col from user)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutNotIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values1 = 0 or id not in ::__sq1",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "cross-shard subquery in EXISTS clause.",
    "query": "select id from user where exists (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where exists (select col from user)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutExists",
        "PulloutVars": [
          "__sq_has_values1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Limit",
            "Count": "INT64(1)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from `user` where 1 != 1",
                "Query": "select 1 from `user` limit :__upper_limit",
                "Table": "`user`"
              }
            ]
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values1",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "cross-shard subquery as expression",
    "query": "select id from user where id = (select col from user)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = (select col from user)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user`",
            "Table": "`user`"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where id = :__sq1",
            "Table": "`user`",
            "Values": [
              ":__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multi-level pullout",
    "query": "select id1 from user where id = (select id2 from user where id2 in (select id3 from user))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id1 from user where id = (select id2 from user where id2 in (select id3 from user))",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Subquery",
            "Variant": "PulloutIn",
            "PulloutVars": [
              "__sq_has_values2",
              "__sq2"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id3 from `user` where 1 != 1",
                "Query": "select id3 from `user`",
                "Table": "`user`"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id2 from `user` where 1 != 1",
                "Query": "select id2 from `user` where :__sq_has_values2 = 1 and id2 in ::__sq2",
                "Table": "`user`"
              }
            ]
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id1 from `user` where 1 != 1",
            "Query": "select id1 from `user` where id = :__sq1",
            "Table": "`user`",
            "Values": [
              ":__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules subquery merge",
    "query": "select col from user where id = (select id from route1 where route1.id = user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = (select id from route1 where route1.id = user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id = (select id from `user` as route1 where route1.id = `user`.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "routing rules subquery pullout",
    "query": "select col from user where id = (select id from route2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = (select id from route2)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutValue",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select id from unsharded as route2 where 1 != 1",
            "Query": "select id from unsharded as route2",
            "Table": "unsharded"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` where id = :__sq1",
            "Table": "`user`",
            "Values": [
              ":__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "Case preservation test",
    "query": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.Id from `user`, user_extra where 1 != 1",
        "Query": "select user_extra.Id from `user`, user_extra where `user`.Id = 5 and `user`.iD = user_extra.User_Id",
        "Table": "`user`, user_extra",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "database() call in where clause.",
    "query": "select id from user where database()",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where database()",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where database()",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Select with equals null",
    "query": "select id from music where id = null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id = null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id = null",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "SELECT with IS NULL",
    "query": "select id from music where id is null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id is null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id is null",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "SELECT with IS NOT NULL",
    "query": "select id from music where id is not null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id is not null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id is not null",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table with unique vindex match and null match",
    "query": "select id from music where user_id = 4 and id = null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where user_id = 4 and id = null",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where user_id = 4 and id = null",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table with unique vindex match and IN (null)",
    "query": "select id from music where user_id = 4 and id IN (null)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where user_id = 4 and id IN (null)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where user_id = 4 and id in (null)",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table with unique vindex match and IN (null, 1, 2)",
    "query": "select id from music where user_id = 4 and id IN (null, 1, 2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where user_id = 4 and id IN (null, 1, 2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where user_id = 4 and id in (null, 1, 2)",
        "Table": "music",
        "Values": [
          "INT64(4)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table with unique vindex match and NOT IN (null, 1, 2)",
    "query": "select id from music where user_id = 4 and id NOT IN (null, 1, 2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where user_id = 4 and id NOT IN (null, 1, 2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where user_id = 4 and id not in (null, 1, 2)",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Single table with unique vindex match and NOT IN (null, 1, 2) predicates inverted",
    "query": "select id from music where id NOT IN (null, 1, 2) and user_id = 4",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id NOT IN (null, 1, 2) and user_id = 4",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "None",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id not in (null, 1, 2) and user_id = 4",
        "Table": "music"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "pullout sq after pullout sq",
    "query": "select id from user where not id in (select user_extra.col from user_extra where user_extra.user_id = 42) and id in (select user_extra.col from user_extra where user_extra.user_id = 411)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where not id in (select user_extra.col from user_extra where user_extra.user_id = 42) and id in (select user_extra.col from user_extra where user_extra.user_id = 411)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values2",
          "__sq2"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.user_id = 411",
            "Table": "user_extra",
            "Values": [
              "INT64(411)"
            ],
            "Vindex": "user_index"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Subquery",
            "Variant": "PulloutNotIn",
            "PulloutVars": [
              "__sq_has_values1",
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                "Query": "select user_extra.col from user_extra where user_extra.user_id = 42",
                "Table": "user_extra",
                "Values": [
                  "INT64(42)"
                ],
                "Vindex": "user_index"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "IN",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from `user` where 1 != 1",
                "Query": "select id from `user` where (:__sq_has_values1 = 0 or id not in ::__sq1) and (:__sq_has_values2 = 1 and id in ::__vals)",
                "Table": "`user`",
                "Values": [
                  "::__sq2"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "solving LIKE query with a CFC prefix vindex",
    "query": "select c2 from cfc_vindex_col where c1 like 'A%'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select c2 from cfc_vindex_col where c1 like 'A%'",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select c2 from cfc_vindex_col where 1 != 1",
        "Query": "select c2 from cfc_vindex_col where c1 like 'A%'",
        "Table": "cfc_vindex_col",
        "Values": [
          "VARCHAR(\"A%\")"
        ],
        "Vindex": "cfc"
      },
      "TablesUsed": [
        "user.cfc_vindex_col"
      ]
    }
  },
  {
    "comment": "select * from samecolvin where col = :col",
    "query": "select * from samecolvin where col = :col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from samecolvin where col = :col",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from samecolvin where 1 != 1",
        "Query": "select col from samecolvin where col = :col",
        "Table": "samecolvin",
        "Values": [
          ":col"
        ],
        "Vindex": "vindex1"
      },
      "TablesUsed": [
        "user.samecolvin"
      ]
    }
  },
  {
    "comment": "non unique predicate on vindex",
    "query": "select id from user where user.id > 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id > 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id > 5",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "select from unsharded keyspace with uncorrelated subquery which should be merged to a single route",
    "query": "select unsharded.id from unsharded where unsharded.name in (select name from unsharded_a)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select unsharded.id from unsharded where unsharded.name in (select name from unsharded_a)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.`name` in (select `name` from unsharded_a)",
        "Table": "unsharded, unsharded_a"
      },
      "TablesUsed": [
        "main.unsharded",
        "main.unsharded_a"
      ]
    }
  },
  {
    "comment": "in subquery the id will be scoped to local table as there is no qualifier associated with it.",
    "query": "select id from user where id in (select col from unsharded where col = id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id in (select col from unsharded where col = id)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select col from unsharded where 1 != 1",
            "Query": "select col from unsharded where col = id",
            "Table": "unsharded"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values1 = 1 and id in ::__vals",
            "Table": "`user`",
            "Values": [
              "::__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "correlated subquery with same keyspace",
    "query": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id from `user` as u where 1 != 1",
        "Query": "select u.id from `user` as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "SelectDBA with uncorrelated subqueries",
    "query": "select t.table_schema from information_schema.tables as t where t.table_schema in (select c.column_name from information_schema.columns as c)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select t.table_schema from information_schema.tables as t where t.table_schema in (select c.column_name from information_schema.columns as c)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "DBA",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select t.table_schema from information_schema.`tables` as t where 1 != 1",
        "Query": "select t.table_schema from information_schema.`tables` as t where t.table_schema in (select c.column_name from information_schema.`columns` as c)",
        "Table": "information_schema.`tables`"
      }
    }
  },
  {
    "comment": "SelectReference with uncorrelated subqueries",
    "query": "select ref.col from ref where ref.col in (select ref.col from ref)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select ref.col from ref where ref.col in (select ref.col from ref)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Reference",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ref.col from ref where 1 != 1",
        "Query": "select ref.col from ref where ref.col in (select ref.col from ref)",
        "Table": "ref"
      },
      "TablesUsed": [
        "user.ref"
      ]
    }
  },
  {
    "comment": "SelectEqualUnique with uncorrelated subqueries",
    "query": "select u1.col from user as u1 where u1.id = 5 and u1.name in (select u2.name from user u2 where u2.id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.col from user as u1 where u1.id = 5 and u1.name in (select u2.name from user u2 where u2.id = 5)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
        "Query": "select u1.col from `user` as u1 where u1.id = 5 and u1.`name` in (select u2.`name` from `user` as u2 where u2.id = 5)",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "SelectEqualUnique with EXISTS uncorrelated subquery",
    "query": "select u1.col from user as u1 where u1.id = 5 and exists (select u2.name from user u2 where u2.id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.col from user as u1 where u1.id = 5 and exists (select u2.name from user u2 where u2.id = 5)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
        "Query": "select u1.col from `user` as u1 where u1.id = 5 and exists (select 1 from `user` as u2 where u2.id = 5 limit 1)",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "SelectEqualUnique with NOT EXISTS uncorrelated subquery",
    "query": "select u1.col from user as u1 where u1.id = 5 and not exists (select u2.name from user u2 where u2.id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.col from user as u1 where u1.id = 5 and not exists (select u2.name from user u2 where u2.id = 5)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
        "Query": "select u1.col from `user` as u1 where u1.id = 5 and not exists (select 1 from `user` as u2 where u2.id = 5 limit 1)",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "SelectScatter with NOT EXISTS uncorrelated subquery",
    "query": "select u1.col from user as u1 where not exists (select u2.name from user u2 where u2.id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u1.col from user as u1 where not exists (select u2.name from user u2 where u2.id = 5)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutExists",
        "PulloutVars": [
          "__sq_has_values1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from `user` as u2 where 1 != 1",
            "Query": "select 1 from `user` as u2 where u2.id = 5 limit 1",
            "Table": "`user`",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
            "Query": "select u1.col from `user` as u1 where not :__sq_has_values1",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "The outer and first inner are SelectEqualUnique with same Vindex value, the second inner has different Vindex value",
    "query": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 5) and id in (select user_extra.col from user_extra where user_extra.user_id = 4)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 5) and id in (select user_extra.col from user_extra where user_extra.user_id = 4)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values2",
          "__sq2"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
            "Table": "user_extra",
            "Values": [
              "INT64(4)"
            ],
            "Vindex": "user_index"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where id = 5 and id not in (select user_extra.col from user_extra where user_extra.user_id = 5) and (:__sq_has_values2 = 1 and id in ::__sq2)",
            "Table": "`user`",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "The outer and second inner are SelectEqualUnique with same Vindex value, the first inner has different Vindex value",
    "query": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 4) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 4) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
      "Instructions": {
        "OperatorType": "Subquery",
        "Variant": "PulloutNotIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
            "Table": "user_extra",
            "Values": [
              "INT64(4)"
            ],
            "Vindex": "user_index"
          },
          {
            "InputName": "Outer",
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where id = 5 and (:__sq_has_values1 = 0 or id not in ::__sq1) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
            "Table": "`user`",
            "Values": [
              "INT64(5)"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "two correlated subqueries that can be merge in a single route",
    "query": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id from `user` as u where 1 != 1",
        "Query": "select u.id from `user` as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "transitive closures for the win",
    "query": "select id from user where user.id = user.col and user.col = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where user.id = user.col and user.col = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id = `user`.col and `user`.col = 5",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "join with transitive closures",
    "query": "select id from user, user_extra where user.id = user_extra.col and user_extra.col = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user, user_extra where user.id = user_extra.col and user_extra.col = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user`, user_extra where 1 != 1",
        "Query": "select id from `user`, user_extra where user_extra.col = user_extra.user_id and `user`.id = user_extra.col",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "not supported transitive closures with equality inside of an OR",
    "query": "select id from user, user_extra where user.id = user_extra.col and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.name)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user, user_extra where user.id = user_extra.col and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.name)",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "user_extra_col": 0
        },
        "TableName": "user_extra_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.`name`",
            "Table": "user_extra"
          },
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where `user`.id = :user_extra_col",
            "Table": "`user`",
            "Values": [
              ":user_extra_col"
            ],
            "Vindex": "user_index"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "routing rules subquery merge with alias",
    "query": "select col from user where id = (select id from route1 as a where a.id = user.id)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = (select id from route1 as a where a.id = user.id)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id = (select id from `user` as a where a.id = `user`.id)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "left join where clauses where we can optimize into an inner join",
    "query": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.foobar = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.foobar = 5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_col": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
            "Query": "select `user`.id, `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.foobar = 5 and user_extra.col = :user_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "this query lead to a nil pointer error",
    "query": "select user.id from user left join user_extra on user.col = user_extra.col where foo(user_extra.foobar)",
    "plan": "expr cannot be translated, not supported: foo(user_extra.foobar)"
  },
  {
    "comment": "filter after outer join",
    "query": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.id is null",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.id is null",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "user_extra.id is null",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "LeftJoin",
            "JoinColumnIndexes": "L:0,R:0",
            "JoinVars": {
              "user_col": 1
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
                "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "subquery on other table",
    "query": "select distinct user.id, user.col from user where user.col in (select id from music where col2 = 'a')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select distinct user.id, user.col from user where user.col in (select id from music where col2 = 'a')",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "(0|2), 1",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Subquery",
            "Variant": "PulloutIn",
            "PulloutVars": [
              "__sq_has_values1",
              "__sq1"
            ],
            "Inputs": [
              {
                "InputName": "SubQuery",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from music where 1 != 1",
                "Query": "select id from music where col2 = 'a'",
                "Table": "music"
              },
              {
                "InputName": "Outer",
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col, weight_string(`user`.id) from `user` where 1 != 1",
                "OrderBy": "(0|2) ASC, 1 ASC",
                "Query": "select `user`.id, `user`.col, weight_string(`user`.id) from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1 order by `user`.id asc, `user`.col asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "should use colb_colc_map as first column of the vindex is present in predicate",
    "query": "select * from multicolvin where column_b = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicolvin where column_b = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicolvin where 1 != 1",
        "Query": "select * from multicolvin where column_b = 1",
        "Table": "multicolvin",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "colb_colc_map"
      },
      "TablesUsed": [
        "user.multicolvin"
      ]
    }
  },
  {
    "comment": "should only use first column of the vindex colb_colc_map",
    "query": "select * from multicolvin where column_b = 1 and column_c = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicolvin where column_b = 1 and column_c = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicolvin where 1 != 1",
        "Query": "select * from multicolvin where column_b = 1 and column_c = 2",
        "Table": "multicolvin",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "colb_colc_map"
      },
      "TablesUsed": [
        "user.multicolvin"
      ]
    }
  },
  {
    "comment": "uses vindex colb_colc_map",
    "query": "select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicolvin where 1 != 1",
        "Query": "select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3",
        "Table": "multicolvin",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "colb_colc_map"
      },
      "TablesUsed": [
        "user.multicolvin"
      ]
    }
  },
  {
    "comment": "colb_colc_map vindex for routing",
    "query": "select * from multicolvin where column_a = 3 and column_b = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicolvin where column_a = 3 and column_b = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicolvin where 1 != 1",
        "Query": "select * from multicolvin where column_a = 3 and column_b = 1",
        "Table": "multicolvin",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "colb_colc_map"
      },
      "TablesUsed": [
        "user.multicolvin"
      ]
    }
  },
  {
    "comment": "multi column vindex produces Equal plan",
    "query": "select * from multicol_tbl where cola = 1 and colb = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where cola = 1 and colb = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where cola = 1 and colb = 2",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(1)",
          "INT64(2)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with different order places the vindex keys in correct order",
    "query": "select * from multicol_tbl where colb = 2 and cola = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb = 2 and cola = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb = 2 and cola = 1",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(1)",
          "INT64(2)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex produces IN plan",
    "query": "select * from multicol_tbl where cola in (1,2) and colb in (3,4)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where cola in (1,2) and colb in (3,4)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where cola in ::__vals0 and colb in ::__vals1",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(1), INT64(2))",
          "(INT64(3), INT64(4))"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with different order places the vindex keys in correct order in IN plan",
    "query": "select * from multicol_tbl where colb in (3,4) and cola in (1,2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb in (3,4) and cola in (1,2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb in ::__vals1 and cola in ::__vals0",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(1), INT64(2))",
          "(INT64(3), INT64(4))"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with different order with one IN predicate and one equality",
    "query": "select * from multicol_tbl where colb = 1 and cola in (3,4)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb = 1 and cola in (3,4)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb = 1 and cola in ::__vals0",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(3), INT64(4))",
          "INT64(1)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "deconstruct tuple equality comparisons",
    "query": "select id from user where (id, name) = (34, 'apa')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (id, name) = (34, 'apa')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 34 and `name` = 'apa'",
        "Table": "`user`",
        "Values": [
          "INT64(34)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "multi column vindex with both IN predicate and equality predicate",
    "query": "select * from multicol_tbl where cola in (1,10) and cola = 4 and colb in (5,6) and colb = 7",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where cola in (1,10) and cola = 4 and colb in (5,6) and colb = 7",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where cola in (1, 10) and cola = 4 and colb in (5, 6) and colb = 7",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(4)",
          "INT64(7)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with one column with equal followed by IN predicate, ordering matters for now",
    "query": "select * from multicol_tbl where colb = 4 and colb in (1,10) and cola in (5,6)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb = 4 and colb in (1,10) and cola in (5,6)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb = 4 and colb in ::__vals1 and cola in ::__vals0",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(5), INT64(6))",
          "(INT64(1), INT64(10))"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with one column with IN followed by equal predicate, ordering matters for now",
    "query": "select * from multicol_tbl where colb in (1,10) and colb = 4 and cola in (5,6)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb in (1,10) and colb = 4 and cola in (5,6)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb in (1, 10) and colb = 4 and cola in ::__vals0",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(5), INT64(6))",
          "INT64(4)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex with better plan selection",
    "query": "select * from multicol_tbl where colb in (1,2) and cola IN (3,4) and cola = 5 and colb = 6",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where colb in (1,2) and cola IN (3,4) and cola = 5 and colb = 6",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where colb in (1, 2) and cola in (3, 4) and cola = 5 and colb = 6",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(5)",
          "INT64(6)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex as tuple",
    "query": "select * from multicol_tbl where (cola,colb) in ((1,2),(3,4))",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where (cola,colb) in ((1,2),(3,4))",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "MultiEqual",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where (cola, colb) in ((1, 2), (3, 4))",
        "Table": "multicol_tbl",
        "Values": [
          "(INT64(1), INT64(3))",
          "(INT64(2), INT64(4))"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex, partial vindex with SelectEqual",
    "query": "select * from multicol_tbl where cola = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where cola = 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "SubShard",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where cola = 1",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(1)"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "multi column vindex, partial vindex with SelectEqual over full vindex with SelectIN",
    "query": "select * from multicol_tbl where cola = 1 and colb in (2,3)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select * from multicol_tbl where cola = 1 and colb in (2,3)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from multicol_tbl where 1 != 1",
        "Query": "select * from multicol_tbl where cola = 1 and colb in ::__vals1",
        "Table": "multicol_tbl",
        "Values": [
          "INT64(1)",
          "(INT64(2), INT64(3))"
        ],
        "Vindex": "multicolIdx"
      },
      "TablesUsed": [
        "user.multicol_tbl"
      ]
    }
  },
  {
    "comment": "left join with where clause",
    "query": "select 0 from unsharded_a left join unsharded_b on unsharded_a.col = unsharded_b.col where coalesce(unsharded_b.col, 4) = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 0 from unsharded_a left join unsharded_b on unsharded_a.col = unsharded_b.col where coalesce(unsharded_b.col, 4) = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 0 from unsharded_a left join unsharded_b on unsharded_a.col = unsharded_b.col where 1 != 1",
        "Query": "select 0 from unsharded_a left join unsharded_b on unsharded_a.col = unsharded_b.col where coalesce(unsharded_b.col, 4) = 5",
        "Table": "unsharded_a, unsharded_b"
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b"
      ]
    }
  },
  {
    "comment": "filter on outer join should not be used for routing",
    "query": "select user.col from user_extra left outer join user on user_extra.user_id = user.id WHERE user.id IS NULL",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col from user_extra left outer join user on user_extra.user_id = user.id WHERE user.id IS NULL",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from user_extra left join `user` on user_extra.user_id = `user`.id where 1 != 1",
        "Query": "select `user`.col from user_extra left join `user` on user_extra.user_id = `user`.id where `user`.id is null",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "conditions following a null safe comparison operator can be used for routing",
    "query": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE user.id <=> NULL AND music.user_id = 10",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE user.id <=> NULL AND music.user_id = 10",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music left join `user` on music.user_id = `user`.id where 1 != 1",
        "Query": "select music.id from music left join `user` on music.user_id = `user`.id where music.user_id = 10 and `user`.id <=> null",
        "Table": "`user`, music",
        "Values": [
          "INT64(10)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "For left joins, where conditions using both sides of the join are not pulled into the join conditions",
    "query": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE (user.name = 'Trent Reznor' OR music.genre = 'pop') AND music.user_id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE (user.name = 'Trent Reznor' OR music.genre = 'pop') AND music.user_id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music left join `user` on music.user_id = `user`.id where 1 != 1",
        "Query": "select music.id from music left join `user` on music.user_id = `user`.id where music.user_id = 5 and (`user`.`name` = 'Trent Reznor' or music.genre = 'pop')",
        "Table": "`user`, music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "For left joins, where conditions using both sides of the join are not pulled into the join conditions (swapped order)",
    "query": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND (user.name = 'Trent Reznor' OR music.genre = 'pop')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND (user.name = 'Trent Reznor' OR music.genre = 'pop')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music left join `user` on music.user_id = `user`.id where 1 != 1",
        "Query": "select music.id from music left join `user` on music.user_id = `user`.id where music.user_id = 5 and (`user`.`name` = 'Trent Reznor' or music.genre = 'pop')",
        "Table": "`user`, music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "For left joins, null intolerant where conditions using both sides of the join are transformed to inner joins",
    "query": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND music.componist = user.name",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music LEFT OUTER JOIN user ON music.user_id = user.id WHERE music.user_id = 5 AND music.componist = user.name",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music, `user` where 1 != 1",
        "Query": "select music.id from music, `user` where music.user_id = 5 and music.user_id = `user`.id and music.componist = `user`.`name`",
        "Table": "`user`, music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "For left joins, null intolerant where conditions using `IS NOT NULL` allow outer join simplification",
    "query": "SELECT music.id FROM music LEFT OUTER JOIN user ON user.id = music.user_id WHERE music.user_id = 5 AND user.id IS NOT NULL",
    "plan": {
      "QueryType": "SELECT",
      "Original": "SELECT music.id FROM music LEFT OUTER JOIN user ON user.id = music.user_id WHERE music.user_id = 5 AND user.id IS NOT NULL",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.id from music, `user` where 1 != 1",
        "Query": "select music.id from music, `user` where music.user_id = 5 and `user`.id is not null and `user`.id = music.user_id",
        "Table": "`user`, music",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "optimize ORs to IN route op codes #1",
    "query": "select col from user where id = 1 or id = 2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = 1 or id = 2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "optimize ORs to IN route op codes #2",
    "query": "select col from user where id = 1 or id = 2 or id = 3",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where id = 1 or id = 2 or id = 3",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2), INT64(3))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "optimize ORs to IN route op codes #3",
    "query": "select col from user where (id = 1 or id = 2) or (id = 3 or id = 4)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col from user where (id = 1 or id = 2) or (id = 3 or id = 4)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id in ::__vals",
        "Table": "`user`",
        "Values": [
          "(INT64(1), INT64(2), INT64(3), INT64(4))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Don't pick a vindex for an IS NULL predicate if it's a lookup vindex",
    "query": "select id from music where id is null and user_id in (1,2)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from music where id is null and user_id in (1,2)",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from music where 1 != 1",
        "Query": "select id from music where id is null and user_id in ::__vals",
        "Table": "music",
        "Values": [
          "(INT64(1), INT64(2))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.music"
      ]
    }
  },
  {
    "comment": "Self referencing columns in HAVING should work",
    "query": "select a+2 as a from user having a = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a+2 as a from user having a = 42",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a + 2 as a from `user` where 1 != 1",
        "Query": "select a + 2 as a from `user` where a + 2 = 42",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "HAVING predicates that use table columns are safe to rewrite if we can move them to the WHERE clause",
    "query": "select user.col + 2 as a from user having a = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select user.col + 2 as a from user having a = 42",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col + 2 as a from `user` where 1 != 1",
        "Query": "select `user`.col + 2 as a from `user` where `user`.col + 2 = 42",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "HAVING predicates that use table columns should not get rewritten on unsharded keyspaces",
    "query": "select col + 2 as a from unsharded having a = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select col + 2 as a from unsharded having a = 42",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select col + 2 as a from unsharded where 1 != 1",
        "Query": "select col + 2 as a from unsharded having a = 42",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "Single table unique vindex route hiding behind a silly OR",
    "query": "select id from user where (id = 5 and name ='apa') or (id = 5 and foo = 'bar')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (id = 5 and name ='apa') or (id = 5 and foo = 'bar')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and (`name` = 'apa' or foo = 'bar')",
        "Table": "`user`",
        "Values": [
          "INT64(5)"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Single table IN vindex route hiding behind OR",
    "query": "select id from user where (id = 5 and name ='foo') or (id = 12 and name = 'bar')",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select id from user where (id = 5 and name ='foo') or (id = 12 and name = 'bar')",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "IN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and `name` = 'foo' or id = 12 and `name` = 'bar'",
        "Table": "`user`",
        "Values": [
          "(INT64(5), INT64(12))"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "Like clause evaluated on the vtgate",
    "query": "select a.textcol1 from user a join user b where a.textcol1 = b.textcol2 group by a.textcol1 having repeat(a.textcol1,sum(a.id)) like \"And%res\"",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select a.textcol1 from user a join user b where a.textcol1 = b.textcol2 group by a.textcol1 having repeat(a.textcol1,sum(a.id)) like \"And%res\"",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "repeat(a.textcol1, sum(a.id)) like 'And%res'",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS sum(a.id)",
            "GroupBy": "0 COLLATE latin1_swedish_ci",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "[COLUMN 2] as textcol1",
                  "[COLUMN 0] * [COLUMN 1] as sum(a.id)"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "L:0,R:0,L:1",
                    "JoinVars": {
                      "a_textcol1": 1
                    },
                    "TableName": "`user`_`user`",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select sum(a.id), a.textcol1 from `user` as a where 1 != 1 group by a.textcol1",
                        "OrderBy": "1 ASC COLLATE latin1_swedish_ci",
                        "Query": "select sum(a.id), a.textcol1 from `user` as a group by a.textcol1 order by a.textcol1 asc",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*) from `user` as b where 1 != 1 group by .0",
                        "Query": "select count(*) from `user` as b where b.textcol2 = :a_textcol1 group by .0",
                        "Table": "`user`"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "two predicates that mean the same thing",
    "query": "select textcol1 from user where foo = 42 and user.foo = 42",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select textcol1 from user where foo = 42 and user.foo = 42",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select textcol1 from `user` where 1 != 1",
        "Query": "select textcol1 from `user` where foo = 42",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "must merge subquery with the right side of the join",
    "query": "select 1 from unsharded join user u1 where exists (select 1 from unsharded u2 where u1.bar = u2.baz)",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select 1 from unsharded join user u1 where exists (select 1 from unsharded u2 where u1.bar = u2.baz)",
      "Instructions": {
        "OperatorType": "SemiJoin",
        "JoinVars": {
          "u1_bar": 0
        },
        "ProjectedIndexes": "-2",
        "TableName": "unsharded_`user`_unsharded",
        "Inputs": [
          {
            "InputName": "Outer",
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "R:0,L:0",
            "TableName": "unsharded_`user`",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded where 1 != 1",
                "Query": "select 1 from unsharded",
                "Table": "unsharded"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select u1.bar from `user` as u1 where 1 != 1",
                "Query": "select u1.bar from `user` as u1",
                "Table": "`user`"
              }
            ]
          },
          {
            "InputName": "SubQuery",
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded as u2 where 1 != 1",
            "Query": "select 1 from unsharded as u2 where u2.baz = :u1_bar",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "push filter under aggregation",
    "query": "select count(*) from user left join user_extra on user.id = user_extra.bar where IFNULL(user_extra.collections_status, 'NOTSET') != 'collections_lock'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "select count(*) from user left join user_extra on user.id = user_extra.bar where IFNULL(user_extra.collections_status, 'NOTSET') != 'collections_lock'",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "[COLUMN 0] * COALESCE([COLUMN 1], INT64(1)) as count(*)",
              "[COLUMN 2] as collections_status"
            ],
            "Inputs": [
              {
                "OperatorType": "Filter",
                "Predicate": "IFNULL(user_extra.collections_status, 'NOTSET') != 'collections_lock'",
                "Inputs": [
                  {
                    "OperatorType": "Join",
                    "Variant": "LeftJoin",
                    "JoinColumnIndexes": "L:0,R:0,R:1",
                    "JoinVars": {
                      "user_id": 1
                    },
                    "TableName": "`user`_user_extra",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), `user`.id from `user` where 1 != 1 group by `user`.id",
                        "Query": "select count(*), `user`.id from `user` group by `user`.id",
                        "Table": "`user`"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(*), user_extra.collections_status from user_extra where 1 != 1 group by user_extra.collections_status",
                        "Query": "select count(*), user_extra.collections_status from user_extra where user_extra.bar = :user_id group by user_extra.collections_status",
                        "Table": "user_extra"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  }
]
