# union operations in subqueries (expressions)
"select * from user where id in (select * from user union select * from user_extra)"
"unsupported: '*' expression in cross-shard query"

# TODO: Implement support for select with a target destination
"select * from `user[-]`.user_metadata"
"unsupported: SELECT with a target destination"

# Unsupported INSERT statement with a target destination
"insert into `user[-]`.user_metadata (a, b) values (1,2)"
"unsupported: INSERT with a target destination"
Gen4 plan same as above

# Unsupported delete statement with a replica target destination
"DELETE FROM `user[-]@replica`.user_metadata limit 1"
"unsupported: delete statement with a replica target"
Gen4 plan same as above

# Unsupported update statement with a replica target destination
"update `user[-]@replica`.user_metadata set id=2"
"unsupported: update statement with a replica target"
Gen4 plan same as above

# scatter order by with * expression
"select * from user order by id"
"unsupported: in scatter query: order by must reference a column in the select list: id asc"

# order by rand on a cross-shard subquery
"select id from (select user.id, user.col from user join user_extra) as t order by rand()"
"unsupported: memory sort: complex order by expression: rand()"

# filtering on a cross-shard subquery
"select id from (select user.id, user.col from user join user_extra) as t where id=5"
"unsupported: filtering on results of cross-shard subquery"

# expression on a cross-shard subquery
"select id+1 from (select user.id, user.col from user join user_extra) as t"
"unsupported: expression on results of a cross-shard subquery"

# natural join
"select * from user natural join user_extra"
"unsupported: natural join"
Gen4 plan same as above

# join with USING construct
"select * from user join user_extra using(id)"
"unsupported: join with USING(column_list) clause for complex queries"
Gen4 plan same as above

# join with USING construct with 3 tables
"select user.id from user join user_extra using(id) join music using(id2)"
"unsupported: join with USING(column_list) clause for complex queries"
Gen4 plan same as above

# natural left join
"select * from user natural left join user_extra"
"unsupported: natural left join"
Gen4 plan same as above

# natural right join
"select * from user natural right join user_extra"
"unsupported: natural right join"
Gen4 plan same as above

# left join with expressions
"select user.id, user_extra.col+1 from user left join user_extra on user.col = user_extra.col"
"unsupported: cross-shard left join and column expressions"
Gen4 plan same as above

# left join with expressions, with three-way join (different code path)
"select user.id, user_extra.col+1 from user left join user_extra on user.col = user_extra.col join user_extra e"
"unsupported: cross-shard left join and column expressions"
Gen4 plan same as above

# left join where clauses
"select user.id from user left join user_extra on user.col = user_extra.col where user_extra.col = 5"
"unsupported: cross-shard left join and where clause"

# * expresson not allowed for cross-shard joins
"select * from user join user_extra"
"unsupported: '*' expression in cross-shard query"

# Group by column number, used with non-aliased expression (duplicated code)
"select * from user group by 1"
"unsupported: '*' expression in cross-shard query"

# Filtering on scatter aggregates
"select count(*) a from user having a >10"
"unsupported: filtering on results of aggregates"

# group by must reference select list
"select a from user group by b"
"unsupported: in scatter query: group by column must reference column in SELECT list"
Gen4 error: Expression of SELECT list is not in GROUP BY clause and contains nonaggregated column 'a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

# complex group by expression
"select a from user group by a+1"
"unsupported: in scatter query: only simple references allowed"
Gen4 error: Expression of SELECT list is not in GROUP BY clause and contains nonaggregated column 'a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

# Complex aggregate expression on scatter
"select 1+count(*) from user"
"unsupported: in scatter query: complex aggregate expression"
Gen4 plan same as above

# Multi-value aggregates not supported
"select count(a,b) from user"
"unsupported: only one expression allowed inside aggregates: count(a, b)"
Gen4 error: aggregate functions take a single argument 'count(a, b)'

# scatter aggregate symtab lookup error
"select id, b as id, count(*) from user order by id"
"ambiguous symbol reference: id"
Gen4 error: In aggregated query without GROUP BY, expression of SELECT list contains nonaggregated column 'id'; this is incompatible with sql_mode=only_full_group_by

# scatter aggregate complex order by
"select id from user group by id order by id+1"
"unsupported: in scatter query: complex order by expression: id + 1"

# Scatter order by is complex with aggregates in select
"select col, count(*) from user group by col order by col+1"
"unsupported: in scatter query: complex order by expression: col + 1"

# Aggregate detection (group_concat)
"select group_concat(user.a) from user join user_extra"
"unsupported: cross-shard query with aggregates"
Gen4 error: unsupported: in scatter query: complex aggregate expression

# group by and ',' joins
"select user.id from user, user_extra group by id"
"unsupported: cross-shard query with aggregates"
Gen4 error: Expression of SELECT list is not in GROUP BY clause and contains nonaggregated column '`user`.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

# if subquery scatter and ordering, then we don't allow outer constructs to be pushed down.
"select count(*) from (select col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a"
"unsupported: cross-shard query with aggregates"

# subqueries not supported in group by
"select id from user group by id, (select id from user_extra)"
"unsupported: subqueries disallowed in GROUP or ORDER BY"

# Order by uses cross-shard expression
"select id from user order by id+1"
"unsupported: in scatter query: complex order by expression: id + 1"

# Order by column number with collate
"select user.col1 as a from user order by 1 collate utf8_general_ci"
"unsupported: in scatter query: complex order by expression: 1 collate utf8_general_ci"

# Order by has subqueries
"select id from unsharded order by (select id from unsharded)"
"unsupported: subqueries disallowed in GROUP or ORDER BY"

# subqueries in update
"update user set col = (select id from unsharded)"
"unsupported: subqueries in sharded DML"
Gen4 plan same as above

# sharded subqueries in unsharded update
"update unsharded set col = (select id from user)"
"unsupported: sharded subqueries in DML"
Gen4 plan same as above

# sharded join unsharded subqueries in unsharded update
"update unsharded set col = (select id from unsharded join user on unsharded.id = user.id)"
"unsupported: sharded subqueries in DML"
Gen4 plan same as above

# subqueries in delete
"delete from user where col = (select id from unsharded)"
"unsupported: subqueries in sharded DML"
Gen4 plan same as above

# sharded subqueries in unsharded delete
"delete from unsharded where col = (select id from user)"
"unsupported: sharded subqueries in DML"
Gen4 plan same as above

# sharded delete with limit clasue
"delete from user_extra limit 10"
"multi shard delete with limit is not supported"
Gen4 plan same as above

# sharded subquery in unsharded subquery in unsharded delete
"delete from unsharded where col = (select id from unsharded where id = (select id from user))"
"unsupported: sharded subqueries in DML"
Gen4 plan same as above

# sharded join unsharded subqueries in unsharded delete
"delete from unsharded where col = (select id from unsharded join user on unsharded.id = user.id)"
"unsupported: sharded subqueries in DML"
Gen4 plan same as above

# scatter update with limit clause
"update user_extra set val = 1 where (name = 'foo' or id = 1) limit 1"
"multi shard update with limit is not supported"
Gen4 plan same as above

# multi delete multi table
"delete user from user join user_extra on user.id = user_extra.id where user.name = 'foo'"
"unsupported: multi-shard or vindex write statement"
Gen4 plan same as above

# update changes primary vindex column
"update user set id = 1 where id = 1"
"unsupported: You can't update primary vindex columns. Invalid update on vindex: user_index"
Gen4 plan same as above

# update changes non owned vindex column
"update music_extra set music_id = 1 where user_id = 1"
"unsupported: You can only update owned vindexes. Invalid update on vindex: music_user_map"
Gen4 plan same as above

# update changes non lookup vindex column
"update user_metadata set md5 = 1 where user_id = 1"
"unsupported: You can only update lookup vindexes. Invalid update on vindex: user_md5_index"
Gen4 plan same as above

# update with complex set clause
"update music set id = id + 1 where id = 1"
"unsupported: Only values are supported. Invalid update on column: id"
Gen4 plan same as above

# update by primary keyspace id, changing one vindex column, limit without order clause
"update user_metadata set email = 'juan@vitess.io' where user_id = 1 limit 10"
"unsupported: Need to provide order by clause when using limit. Invalid update on vindex: email_user_map"
Gen4 plan same as above

# cross-shard update tables
"update (select id from user) as u set id = 4"
"unsupported: subqueries in sharded DML"
Gen4 plan same as above

# join in update tables
"update user join user_extra on user.id = user_extra.id set user.name = 'foo'"
"unsupported: multi-shard or vindex write statement"
Gen4 plan same as above

# multiple tables in update
"update user as u, user_extra as ue set u.name = 'foo' where u.id = ue.id"
"unsupported: multi-shard or vindex write statement"
Gen4 plan same as above

# unsharded insert with cross-shard join"
"insert into unsharded select u.col from user u join user u1"
"unsupported: sharded subquery in insert values"
Gen4 plan same as above

# unsharded insert with mismatched keyspaces"
"insert into unsharded select col from user where id=1"
"unsupported: sharded subquery in insert values"
Gen4 plan same as above

# unsharded insert, unqualified names and auto-inc combined
"insert into unsharded_auto select col from unsharded"
"unsupported: auto-inc and select in insert"
Gen4 plan same as above

# unsharded insert, with sharded subquery in insert value
"insert into unsharded values((select 1 from user), 1)"
"unsupported: sharded subquery in insert values"
Gen4 plan same as above

# unsharded insert, no col list with auto-inc
"insert into unsharded_auto values(1,1)"
"column list required for tables with auto-inc columns"
Gen4 plan same as above

# unsharded insert, col list does not match values
"insert into unsharded_auto(id, val) values(1)"
"column list doesn't match values"
Gen4 plan same as above

# sharded upsert can't change vindex
"insert into user(id) values(1) on duplicate key update id = 3"
"unsupported: DML cannot change vindex column"
Gen4 plan same as above

# sharded upsert can't change vindex using values function
"insert into music(user_id, id) values(1, 2) on duplicate key update user_id = values(id)"
"unsupported: DML cannot change vindex column"
Gen4 plan same as above

# sharded insert from select
"insert into user(id) select 1 from dual"
"unsupported: insert into select"
Gen4 plan same as above

# sharded replace no vindex
"replace into user(val) values(1, 'foo')"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# sharded replace with vindex
"replace into user(id, name) values(1, 'foo')"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace no column list
"replace into user values(1, 2, 3)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace with mimatched column list
"replace into user(id) values (1, 2)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace with one vindex
"replace into user(id) values (1)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace with non vindex on vindex-enabled table
"replace into user(nonid) values (2)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace with all vindexes supplied
"replace into user(nonid, name, id) values (2, 'foo', 1)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace for non-vindex autoinc
"replace into user_extra(nonid) values (2)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

# replace with multiple rows
"replace into user(id) values (1), (2)"
"unsupported: REPLACE INTO with sharded schema"
Gen4 plan same as above

"select keyspace_id from user_index where id = 1 and id = 2"
"unsupported: where clause for vindex function must be of the form id = <val> (multiple filters)"

"select keyspace_id from user_index where func(id)"
"unsupported: where clause for vindex function must be of the form id = <val> (not a comparison)"

"select keyspace_id from user_index where id > 1"
"unsupported: where clause for vindex function must be of the form id = <val> (not equality)"

"select keyspace_id from user_index where 1 = id"
"unsupported: where clause for vindex function must be of the form id = <val> (lhs is not a column)"

"select keyspace_id from user_index where keyspace_id = 1"
"unsupported: where clause for vindex function must be of the form id = <val> (lhs is not id)"

"select keyspace_id from user_index where id = id+1"
"unsupported: where clause for vindex function must be of the form id = <val> (rhs is not a value)"

"select keyspace_id from user_index"
"unsupported: where clause for vindex function must be of the form id = <val> (where clause missing)"

"select func(keyspace_id) from user_index where id = :id"
"unsupported: expression on results of a vindex function"

# delete with multi-table targets
"delete music,user from music inner join user where music.id = user.id"
"unsupported: multi-shard or vindex write statement"
Gen4 plan same as above

# order by inside and outside parenthesis select
"(select 1 from user order by 1 desc) order by 1 asc limit 2"
"can't do ORDER BY on top of ORDER BY"
Gen4 plan same as above

# ambiguous ORDER BY
"select id from user order by id union all select id from music order by id desc"
"Incorrect usage of UNION and ORDER BY - add parens to disambiguate your query (errno 1221) (sqlstate 21000)"
Gen4 plan same as above

# select get_lock with non-dual table
"select get_lock('xyz', 10) from user"
"get_lock('xyz', 10) allowed only with dual"

# select is_free_lock with non-dual table
"select is_free_lock('xyz') from user"
"is_free_lock('xyz') allowed only with dual"

# insert using select get_lock from table
"insert into user(pattern) SELECT GET_LOCK('xyz1', 10)"
"unsupported: insert into select"
Gen4 plan same as above

# union with SQL_CALC_FOUND_ROWS 
"(select sql_calc_found_rows id from user where id = 1 limit 1) union select id from user where id = 1"
"SQL_CALC_FOUND_ROWS not supported with union"
Gen4 plan same as above

# set with DEFAULT - vitess aware
"set workload = default"
"DEFAULT not supported for @@workload"
Gen4 plan same as above

# set with DEFAULT - reserved connection
"set sql_mode = default"
"DEFAULT not supported for @@sql_mode"
Gen4 plan same as above

# Multi shard query using into outfile s3
"select * from user into outfile s3 'out_file_name'"
"INTO is not supported on sharded keyspace"

# create view with Cannot auto-resolve for cross-shard joins
"create view user.view_a as select col from user join user_extra"
"symbol col not found"
Gen4 error: Column 'col' in field list is ambiguous

# create view with join that cannot be served in each shard separately
"create view user.view_a as select user_extra.id from user join user_extra"
"Complex select queries are not supported in create or alter view statements"
Gen4 plan same as above

# create view with sharded limit
"create view user.view_a as select id from user order by id limit 10"
"Complex select queries are not supported in create or alter view statements"
Gen4 plan same as above

# create view with top level subquery in select
"create view user.view_a as select a, (select col from user) from unsharded"
"Complex select queries are not supported in create or alter view statements"

# create view with sql_calc_found_rows with limit
"create view user.view_a as select sql_calc_found_rows * from music limit 100"
"Complex select queries are not supported in create or alter view statements"

# create view with sql_calc_found_rows with group by and having
"create view user.view_a as select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2"
"Complex select queries are not supported in create or alter view statements"

# create view with incompatible keyspaces
"create view main.view_a as select * from user.user_extra"
"Select query does not belong to the same keyspace as the view statement"

# table_schema OR predicate
# It is unsupported because we do not route queries to multiple keyspaces right now
"SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'ks' OR TABLE_SCHEMA = 'main'"
{
  "QueryType": "SELECT",
  "Original": "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'ks' OR TABLE_SCHEMA = 'main'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from INFORMATION_SCHEMA.`TABLES` where 1 != 1",
    "Query": "select * from INFORMATION_SCHEMA.`TABLES` where TABLE_SCHEMA = 'ks' or TABLE_SCHEMA = 'main'",
    "Table": "INFORMATION_SCHEMA.`TABLES`"
  }
}
Gen4 plan same as above

# aggr and non-aggr without group by (with query does not give useful result out)
"select id, count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from `user` where 1 != 1",
        "Query": "select id, count(*) from `user`",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 error: In aggregated query without GROUP BY, expression of SELECT list contains nonaggregated column 'id'; this is incompatible with sql_mode=only_full_group_by
