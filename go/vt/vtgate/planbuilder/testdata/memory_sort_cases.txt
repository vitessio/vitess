# Test cases in this file follow the code in memory_sort.go.
# scatter aggregate order by references ungrouped column
"select a, b, count(*) from user group by a order by b"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by a order by b",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(2)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*), weight_string(b), weight_string(a) from `user` where 1 != 1 group by a",
            "OrderBy": "0 ASC",
            "Query": "select a, b, count(*), weight_string(b), weight_string(a) from `user` group by a order by a asc",
            "ResultColumns": 4,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# scatter aggregate order by references aggregate expression
"select a, b, count(*) k from user group by a order by k"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) k from user group by a order by k",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "2 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(2)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a",
            "OrderBy": "0 ASC",
            "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a order by a asc",
            "ResultColumns": 3,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# scatter aggregate order by references multiple non-group-by expressions
"select a, b, count(*) k from user group by a order by b, a, k"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) k from user group by a order by b, a, k",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC, 0 ASC, 2 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(2)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*) as k, weight_string(b), weight_string(a) from `user` where 1 != 1 group by a",
            "OrderBy": "0 ASC",
            "Query": "select a, b, count(*) as k, weight_string(b), weight_string(a) from `user` group by a order by a asc",
            "ResultColumns": 5,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# scatter aggregate with memory sort and limit
"select a, b, count(*) k from user group by a order by k desc limit 10"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) k from user group by a order by k desc limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Sort",
        "Variant": "Memory",
        "OrderBy": "2 DESC",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "count(2)",
            "GroupBy": "0",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a",
                "OrderBy": "0 ASC",
                "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a order by a asc",
                "ResultColumns": 3,
                "Table": "`user`"
              }
            ]
          }
        ]
      }
    ]
  }
}

# scatter aggregate with memory sort and order by number
"select a, b, count(*) k from user group by a order by 1,3"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) k from user group by a order by 1,3",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC, 2 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(2)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, b, count(*) as k, weight_string(a) from `user` where 1 != 1 group by a",
            "OrderBy": "0 ASC",
            "Query": "select a, b, count(*) as k, weight_string(a) from `user` group by a order by 1 asc",
            "ResultColumns": 4,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# scatter aggregate with memory sort and order by number, reuse weight_string
# we have to use a meaningless construct to test this.
"select textcol1 as t, count(*) k from user group by textcol1 order by textcol1, k, textcol1"
{
  "QueryType": "SELECT",
  "Original": "select textcol1 as t, count(*) k from user group by textcol1 order by textcol1, k, textcol1",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC, 1 ASC, 0 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(1)",
        "GroupBy": "2",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select textcol1 as t, count(*) as k, weight_string(textcol1) from `user` where 1 != 1 group by textcol1",
            "OrderBy": "0 ASC, 0 ASC",
            "Query": "select textcol1 as t, count(*) as k, weight_string(textcol1) from `user` group by textcol1 order by textcol1 asc, textcol1 asc",
            "ResultColumns": 3,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# order by on a cross-shard subquery
"select id from (select user.id, user.col from user join user_extra) as t order by id"
{
  "QueryType": "SELECT",
  "Original": "select id from (select user.id, user.col from user join user_extra) as t order by id",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "-1,-2,-3",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col, weight_string(`user`.id) from `user` where 1 != 1",
                "Query": "select `user`.id, `user`.col, weight_string(`user`.id) from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# order by on a cross-shard query. Note: this happens only when an order by column is from the second table
"select user.col1 as a, user.col2 b, music.col3 c from user, music where user.id = music.id and user.id = 1 order by c"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2 b, music.col3 c from user, music where user.id = music.id and user.id = 1 order by c",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "2 ASC",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2,1,2",
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2 as b, `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2 as b, `user`.id from `user` where `user`.id = 1",
            "Table": "`user`",
            "Values": [
              1
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3 as c, weight_string(music.col3) from music where 1 != 1",
            "Query": "select music.col3 as c, weight_string(music.col3) from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      }
    ]
  }
}

# Order by for join, with mixed cross-shard ordering
"select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by 1 asc, 3 desc, 2 asc"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by 1 asc, 3 desc, 2 asc",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC, 2 DESC, 1 ASC",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2,1,-3,2,-4",
        "TableName": "`user`_music",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col1 as a, `user`.col2, weight_string(`user`.col1), weight_string(`user`.col2), `user`.id from `user` where 1 != 1",
            "Query": "select `user`.col1 as a, `user`.col2, weight_string(`user`.col1), weight_string(`user`.col2), `user`.id from `user` where `user`.id = 1",
            "Table": "`user`",
            "Values": [
              1
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select music.col3, weight_string(music.col3) from music where 1 != 1",
            "Query": "select music.col3, weight_string(music.col3) from music where music.id = :user_id",
            "Table": "music",
            "Values": [
              ":user_id"
            ],
            "Vindex": "music_user_map"
          }
        ]
      }
    ]
  }
}

# Order by for join, on text column in LHS.
"select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2"
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC, 2 ASC",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1,-2,1,-3,2",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from `user` as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from `user` as u",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}

# Order by for join, on text column in RHS.
"select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2"
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC, 2 ASC",
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "1,2,-1,3,-2",
        "TableName": "unsharded_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectUnsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from `user` as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from `user` as u",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# order by for vindex func
"select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start"
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "2 ASC",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          0,
          1,
          2,
          3
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY",
          "range_end": "VARBINARY",
          "range_start": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      }
    ]
  }
}

# unary expression
"select a from user order by binary a desc"
{
  "QueryType": "SELECT",
  "Original": "select a from user order by binary a desc",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, weight_string(a) from `user` where 1 != 1",
    "OrderBy": "0 DESC",
    "Query": "select a, weight_string(a) from `user` order by binary a desc",
    "ResultColumns": 1,
    "Table": "`user`"
  }
}

# unary expression in join query
"select u.a from user u join music m on u.a = m.a order by binary a desc"
{
  "QueryType": "SELECT",
  "Original": "select u.a from user u join music m on u.a = m.a order by binary a desc",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.a, weight_string(u.a) from `user` as u where 1 != 1",
        "OrderBy": "0 DESC",
        "Query": "select u.a, weight_string(u.a) from `user` as u order by binary a desc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from music as m where 1 != 1",
        "Query": "select 1 from music as m where m.a = :u_a",
        "Table": "music"
      }
    ]
  }
}

# intcol order by
"select id, intcol from user order by intcol"
{
  "QueryType": "SELECT",
  "Original": "select id, intcol from user order by intcol",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id, intcol from `user` where 1 != 1",
    "OrderBy": "1 ASC",
    "Query": "select id, intcol from `user` order by intcol asc",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# scatter order by with order by column not present
"select col from user order by id"
"unsupported: in scatter query: order by must reference a column in the select list: id asc"
{
  "QueryType": "SELECT",
  "Original": "select col from user order by id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col, id, weight_string(id) from `user` where 1 != 1",
    "OrderBy": "1 ASC",
    "Query": "select col, id, weight_string(id) from `user` order by id asc",
    "ResultColumns": 1,
    "Table": "`user`"
  }
}
