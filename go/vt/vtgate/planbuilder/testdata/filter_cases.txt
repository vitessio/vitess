# No where clause
"select id from user"
{
  "QueryType": "SELECT",
  "Original": "select id from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user",
    "Table": "user"
  }
}

# Query that always return empty
"select id from user where someColumn = null"
{
  "QueryType": "SELECT",
  "Original": "select id from user where someColumn = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where someColumn = null",
    "Table": "user"
  }
}

# Single table unique vindex route
"select id from user where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Single table unique vindex route, but complex expr
"select id from user where user.id = 5+5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 5+5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.id = 5 + 5",
    "Table": "user"
  }
}

# Single table multiple unique vindex match
"select id from music where id = 5 and user_id = 4"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id = 5 and user_id = 4",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id = 5 and user_id = 4",
    "Table": "music",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}

# Single table multiple non-unique vindex match
"select id from user where costly = 'aa' and name = 'bb'"
{
  "QueryType": "SELECT",
  "Original": "select id from user where costly = 'aa' and name = 'bb'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where costly = 'aa' and name = 'bb'",
    "Table": "user",
    "Values": [
      "bb"
    ],
    "Vindex": "name_user_map"
  }
}

# Single table multiple non-unique vindex match for IN clause
"select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where costly in ('aa', 'bb') and name in ::__vals",
    "Table": "user",
    "Values": [
      [
        "aa",
        "bb"
      ]
    ],
    "Vindex": "name_user_map"
  }
}

# Single table complex in clause
"select id from user where name in (col, 'bb')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name in (col, 'bb')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where name in (col, 'bb')",
    "Table": "user"
  }
}

# Single table equality route with val arg
"select id from user where name = :a"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name = :a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where name = :a",
    "Table": "user",
    "Values": [
      ":a"
    ],
    "Vindex": "name_user_map"
  }
}

# Single table equality route with unsigned value
"select id from user where name = 18446744073709551615"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name = 18446744073709551615",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where name = 18446744073709551615",
    "Table": "user",
    "Values": [
      18446744073709551615
    ],
    "Vindex": "name_user_map"
  }
}

# Single table in clause list arg
"select id from user where name in ::list"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name in ::list",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where name in ::__vals",
    "Table": "user",
    "Values": [
      "::list"
    ],
    "Vindex": "name_user_map"
  }
}

# Multi-table unique vindex constraint
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-table unique vindex constraint on right table
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-table unique vindex constraint on left table of left join
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-table unique vindex constraint on left-joined right table
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-route unique vindex constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.col from user where 1 != 1",
        "Query": "select user.col from user where user.id = 5",
        "Table": "user",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}

# Multi-route unique vindex route on both routes
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.col from user where 1 != 1",
        "Query": "select user.col from user where user.id = 5",
        "Table": "user",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and user_extra.user_id = 5",
        "Table": "user_extra",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Multi-route with cross-route constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.col from user where 1 != 1",
        "Query": "select user.col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and user_extra.user_id = :user_col",
        "Table": "user_extra",
        "Values": [
          ":user_col"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Multi-route with non-route constraint, should use first route.
"select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.col from user where 1 != 1",
        "Query": "select user.col from user where 1 = 1",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}

# Route with multiple route constraints, SelectIN is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = 5 and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.col = 5 and user.id in ::__vals",
    "Table": "user",
    "Values": [
      [
        1,
        2
      ]
    ],
    "Vindex": "user_index"
  }
}

# Route with multiple route constraints and boolean, SelectIN is the best constraint.
"select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.col = case user.col when 'foo' then true else false end and user.id in ::__vals",
    "Table": "user",
    "Values": [
      [
        1,
        2
      ]
    ],
    "Vindex": "user_index"
  }
}

# Route with multiple route constraints and boolean, SelectEqual is the best constraint.
"select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'"
{
  "QueryType": "SELECT",
  "Original": "select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id or col as val from user where 1 != 1",
    "Query": "select id or col as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
    "Table": "user",
    "Values": [
      "aa"
    ],
    "Vindex": "name_user_map"
  }
}

# Route with multiple route constraints, SelectEqual is the best constraint.
"select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'",
    "Table": "user",
    "Values": [
      "aa"
    ],
    "Vindex": "name_user_map"
  }
}

# Route with multiple route constraints, SelectEqualUnique is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
    "Table": "user",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}

# Route with multiple route constraints, SelectEqualUnique is the best constraint, order reversed.
"select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
    "Table": "user",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}

# Route with OR and AND clause, must parenthesize correctly.
"select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
    "Table": "user"
  }
}

# Unsharded route
"select unsharded.id from user join unsharded where unsharded.id = user.id"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.id from user join unsharded where unsharded.id = user.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.id from user where 1 != 1",
        "Query": "select user.id from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.id = :user_id",
        "Table": "unsharded"
      }
    ]
  }
}

# routing rules: choose first table due to better plan
"select col from route1 where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select col from route1 where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from user as route1 where 1 != 1",
    "Query": "select col from user as route1 where id = 1",
    "Table": "user",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}

# routing rules: choose second table due to better plan
"select col from route1 where email = 'aaa'"
{
  "QueryType": "SELECT",
  "Original": "select col from route1 where email = 'aaa'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from user_metadata as route1 where 1 != 1",
    "Query": "select col from user_metadata as route1 where email = 'aaa'",
    "Table": "user_metadata",
    "Values": [
      "aaa"
    ],
    "Vindex": "email_user_map"
  }
}

# subquery of information_schema with itself
"select * from information_schema.a where id in (select * from information_schema.b)"
{
  "QueryType": "SELECT",
  "Original": "select * from information_schema.a where id in (select * from information_schema.b)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from information_schema.a where 1 != 1",
    "Query": "select * from information_schema.a where id in (select * from information_schema.b)"
  }
}

# subquery
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_extra_user",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from user as u where 1 != 1",
        "Query": "select u.m from user as u where u.id in ::__vals and u.id in (select m2 from user where user.id = u.id and user.col = :user_extra_col)",
        "Table": "user",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# ensure subquery reordering gets us a better plan
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_extra_user",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from user as u where 1 != 1",
        "Query": "select u.m from user as u where u.id = 5 and u.id in (select m2 from user where user.id = 5)",
        "Table": "user",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# nested subquery
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_extra_user",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from user as u where 1 != 1",
        "Query": "select u.m from user as u where u.id in ::__vals and u.id in (select m2 from user where user.id = u.id and user.col = :user_extra_col and user.id in (select m3 from user_extra where user_extra.user_id = user.id))",
        "Table": "user",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Correlated subquery in where clause
"select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
    "Table": "user"
  }
}

# outer and inner subquery route by same int val
"select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# outer and inner subquery route by same str val
"select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
    "Table": "user",
    "Values": [
      "aa"
    ],
    "Vindex": "user_index"
  }
}

# outer and inner subquery route by same val arg
"select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
    "Table": "user",
    "Values": [
      ":a"
    ],
    "Vindex": "user_index"
  }
}

# unresolved symbol in inner subquery.
"select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a and foo.id = 1)"
"symbol foo.id not found"

# outer and inner subquery route by same outermost column value
"select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))"
{
  "QueryType": "SELECT",
  "Original": "select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id2 from user as uu where 1 != 1",
    "Query": "select id2 from user as uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
    "Table": "user"
  }
}

# cross-shard subquery in IN clause.
# Note the improved Underlying plan as SelectIN.
"select id from user where id in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from user where 1 != 1",
        "Query": "select id from user where :__sq_has_values1 = 1 and id in ::__vals",
        "Table": "user",
        "Values": [
          "::__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# cross-shard subquery in NOT IN clause.
"select id from user where id not in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id not in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutNotIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from user where 1 != 1",
        "Query": "select id from user where :__sq_has_values1 = 0 or id not in ::__sq1",
        "Table": "user"
      }
    ]
  }
}

# cross-shard subquery in EXISTS clause.
"select id from user where exists (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where exists (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutExists",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from user where 1 != 1",
        "Query": "select id from user where :__sq_has_values1",
        "Table": "user"
      }
    ]
  }
}

# cross-shard subquery as expression
"select id from user where id = (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from user where 1 != 1",
        "Query": "select id from user where id = :__sq1",
        "Table": "user",
        "Values": [
          ":__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# multi-level pullout
"select id1 from user where id = (select id2 from user where id2 in (select id3 from user))"
{
  "QueryType": "SELECT",
  "Original": "select id1 from user where id = (select id2 from user where id2 in (select id3 from user))",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id3 from user where 1 != 1",
            "Query": "select id3 from user",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id2 from user where 1 != 1",
            "Query": "select id2 from user where :__sq_has_values1 = 1 and id2 in ::__sq1",
            "Table": "user"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id1 from user where 1 != 1",
        "Query": "select id1 from user where id = :__sq2",
        "Table": "user",
        "Values": [
          ":__sq2"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# routing rules subquery merge
"select col from user where id = (select id from route2 where route2.id = user.id)"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = (select id from route2 where route2.id = user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from user where 1 != 1",
    "Query": "select col from user where id = (select id from user as route2 where route2.id = user.id)",
    "Table": "user"
  }
}

# routing rules subquery pullout
"select col from user where id = (select id from route2)"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = (select id from route2)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id from unsharded as route2 where 1 != 1",
        "Query": "select id from unsharded as route2",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user where id = :__sq1",
        "Table": "user",
        "Values": [
          ":__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Case preservation test
"select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where 1 != 1",
    "Query": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
    "Table": "user",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# database() call in where clause.
"select id from user where database()"
{
  "QueryType": "SELECT",
  "Original": "select id from user where database()",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from user where 1 != 1",
    "Query": "select id from user where database()",
    "Table": "user"
  }
}

# outer and inner subquery route reference the same "uu.id" name
# but they refer to different things. The first reference is to the outermost query,
# and the second reference is to the innermost 'from' subquery.
"select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select col from (select id from user_extra where user_id = 5) uu where uu.user_id = uu.id))"
"unsupported: cross-shard correlated subquery"

# Select with equals null
"select id from music where id = null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id = null",
    "Table": "music"
  }
}

# SELECT with IS NULL
"select id from music where id is null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id is null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id is null",
    "Table": "music",
    "Values": [
      null
    ],
    "Vindex": "music_user_map"
  }
}

# SELECT with IS NOT NULL
"select id from music where id is not null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id is not null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id is not null",
    "Table": "music"
  }
}

# Single table with unique vindex match and null match
"select id from music where user_id = 4 and id = null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id = null",
    "Table": "music"
  }
}

# Single table with unique vindex match and IN (null)
"select id from music where user_id = 4 and id IN (null)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id IN (null)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id in (null)",
    "Table": "music"
  }
}

# Single table with unique vindex match and IN (null, 1, 2)
"select id from music where user_id = 4 and id IN (null, 1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id IN (null, 1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id in (null, 1, 2)",
    "Table": "music",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}

# Single table with unique vindex match and NOT IN (null, 1, 2)
"select id from music where user_id = 4 and id NOT IN (null, 1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id NOT IN (null, 1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id not in (null, 1, 2)",
    "Table": "music"
  }
}
