# No where clause
"select id from user"
{
  "QueryType": "SELECT",
  "Original": "select id from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user`",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Query that always return empty
"select id from user where someColumn = null"
{
  "QueryType": "SELECT",
  "Original": "select id from user where someColumn = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where someColumn = null",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Single table unique vindex route
"select id from user where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Single table unique vindex route, but complex expr
"select id from user where user.id = 5+5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 5+5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = 5 + 5",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Single table multiple unique vindex match
"select id from music where id = 5 and user_id = 4"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id = 5 and user_id = 4",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id = 5 and user_id = 4",
    "Table": "music",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Single table multiple non-unique vindex match
"select id from user where costly = 'aa' and name = 'bb'"
{
  "QueryType": "SELECT",
  "Original": "select id from user where costly = 'aa' and name = 'bb'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where costly = 'aa' and `name` = 'bb'",
    "Table": "`user`",
    "Values": [
      "bb"
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Single table multiple non-unique vindex match for IN clause
"select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where costly in ('aa', 'bb') and name in ('aa', 'bb')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where costly in ('aa', 'bb') and `name` in ::__vals",
    "Table": "`user`",
    "Values": [
      [
        "aa",
        "bb"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause
"select id from user where (name, col) in (('aa', 'bb'), ('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (name, col) in (('aa', 'bb'), ('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (`name`, col) in (('aa', 'bb'), ('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "aa",
        "cc"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause, swapped columns
"select id from user where (col, name) in (('aa', 'bb'), ('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (col, name) in (('aa', 'bb'), ('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (col, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "bb",
        "dd"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause, choose cost within tuple
"select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (costly, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "bb",
        "dd"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause, choose cost within tuple, swapped
"select id from user where (name, costly) in (('aa', 'bb'), ('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (name, costly) in (('aa', 'bb'), ('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (`name`, costly) in (('aa', 'bb'), ('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "aa",
        "cc"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause, choose cost
"select id from user where (col, costly) in (('aa', 'bb')) and (col, name) in (('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (col, costly) in (('aa', 'bb')) and (col, name) in (('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (col, costly) in (('aa', 'bb')) and (col, `name`) in (('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "dd"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN clause vs equality
"select id from user where (col, name) in (('aa', 'bb')) and id = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (col, name) in (('aa', 'bb')) and id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (col, `name`) in (('aa', 'bb')) and id = 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Composite IN: multiple vindex matches
"select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (costly, name) in (('aa', 'bb'), ('cc', 'dd'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (costly, `name`) in (('aa', 'bb'), ('cc', 'dd'))",
    "Table": "`user`",
    "Values": [
      [
        "bb",
        "dd"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN: tuple inside tuple
"select id from user where ((col1, name), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where ((col1, name), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where ((col1, `name`), col2) in ((('aa', 'bb'), 'cc'), (('dd', 'ee'), 'ff'))",
    "Table": "`user`",
    "Values": [
      [
        "bb",
        "ee"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN: tuple inside tuple, but no match in tuple
"select id from user where (name, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (name, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectMultiEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (`name`, (col1, col2)) in (('aa', ('bb', 'cc')), ('dd', ('ee', 'ff')))",
    "Table": "`user`",
    "Values": [
      [
        "aa",
        "dd"
      ]
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Composite IN: tuple inside tuple, mismiatched values
"select id from user where ((col1, name), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where ((col1, name), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where ((col1, `name`), col2) in (('aa', 'bb', 'cc'), (('dd', 'ee'), 'ff'))",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Composite IN: RHS not tuple
"select id from user where (col1, name) in (select * from music where music.user_id=user.id)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (col1, name) in (select * from music where music.user_id=user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (col1, `name`) in (select * from music where music.user_id = `user`.id)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Composite IN: RHS has no simple values
"select id from user where (col1, name) in (('aa', 1+1))"
{
  "QueryType": "SELECT",
  "Original": "select id from user where (col1, name) in (('aa', 1+1))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where (col1, `name`) in (('aa', 1 + 1))",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# IN clause: LHS is neither column nor composite tuple
"select Id from user where 1 in ('aa', 'bb')"
{
  "QueryType": "SELECT",
  "Original": "select Id from user where 1 in ('aa', 'bb')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select Id from `user` where 1 != 1",
    "Query": "select Id from `user` where 1 in ('aa', 'bb')",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Single table complex in clause
"select id from user where name in (col, 'bb')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name in (col, 'bb')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `name` in (col, 'bb')",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Single table equality route with val arg
"select id from user where name = :a"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name = :a",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `name` = :a",
    "Table": "`user`",
    "Values": [
      ":a"
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Single table equality route with unsigned value
"select id from user where name = 18446744073709551615"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name = 18446744073709551615",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `name` = 18446744073709551615",
    "Table": "`user`",
    "Values": [
      18446744073709551615
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Single table in clause list arg
"select id from user where name in ::list"
{
  "QueryType": "SELECT",
  "Original": "select id from user where name in ::list",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `name` in ::__vals",
    "Table": "`user`",
    "Values": [
      "::list"
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Multi-table unique vindex constraint
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from `user` join user_extra on `user`.id = user_extra.user_id where `user`.id = 5",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
    "Query": "select user_extra.id from `user`, user_extra where `user`.id = 5 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-table unique vindex constraint on right table
"select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user` join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from `user` join user_extra on `user`.id = user_extra.user_id where user_extra.user_id = 5",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
    "Query": "select user_extra.id from `user`, user_extra where user_extra.user_id = 5 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-table unique vindex constraint on left table of left join
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user.id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where `user`.id = 5",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Multi-table unique vindex constraint on left-joined right table
"select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where 1 != 1",
    "Query": "select user_extra.id from `user` left join user_extra on `user`.id = user_extra.user_id where user_extra.user_id = 5",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user left join user_extra on user.id = user_extra.user_id where user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
    "Query": "select user_extra.id from `user`, user_extra where user_extra.user_id = 5 and `user`.id = user_extra.user_id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-route unique vindex constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}
Gen4 plan same as above

# Multi-route unique vindex route on both routes
"select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where `user`.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and user_extra.user_id = 5",
        "Table": "user_extra",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user.id = 5 and user_extra.user_id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.id from `user`, user_extra where 1 != 1",
    "Query": "select user_extra.id from `user`, user_extra where `user`.id = 5 and user_extra.user_id = 5 and `user`.col = user_extra.col",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# Multi-route with cross-route constraint
"select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and user_extra.user_id = :user_col",
        "Table": "user_extra",
        "Values": [
          ":user_col"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where user_extra.user_id = user.col",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 1
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col and user_extra.user_id = :user_col",
        "Table": "user_extra",
        "Values": [
          ":user_col"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Multi-route with non-route constraint, should use first route.
"select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where 1 = 1",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.id from user join user_extra on user.col = user_extra.col where 1 = 1",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col from `user` where 1 != 1",
        "Query": "select `user`.col from `user` where 1 = 1",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.id from user_extra where 1 != 1",
        "Query": "select user_extra.id from user_extra where 1 = 1 and user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}

# Route with multiple route constraints, SelectIN is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = 5 and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.col = 5 and `user`.id in ::__vals",
    "Table": "`user`",
    "Values": [
      [
        1,
        2
      ]
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Route with multiple route constraints and boolean, SelectIN is the best constraint.
"select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = case user.col when 'foo' then true else false end and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectIN",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.col = case `user`.col when 'foo' then true else false end and `user`.id in ::__vals",
    "Table": "`user`",
    "Values": [
      [
        1,
        2
      ]
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Route with multiple route constraints and boolean, SelectEqual is the best constraint.
"select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'"
{
  "QueryType": "SELECT",
  "Original": "select (id or col) as val from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id or col as val from `user` where 1 != 1",
    "Query": "select id or col as val from `user` where `user`.col = 5 and `user`.id in (1, 2) and `user`.`name` = 'aa'",
    "Table": "`user`",
    "Values": [
      "aa"
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Route with multiple route constraints, SelectEqual is the best constraint.
"select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = false and user.id in (1, 2) and user.name = 'aa'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.col = false and `user`.id in (1, 2) and `user`.`name` = 'aa'",
    "Table": "`user`",
    "Values": [
      "aa"
    ],
    "Vindex": "name_user_map"
  }
}
Gen4 plan same as above

# Route with multiple route constraints, SelectEqualUnique is the best constraint.
"select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col = 5 and user.id in (1, 2) and user.name = 'aa' and user.id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.col = 5 and `user`.id in (1, 2) and `user`.`name` = 'aa' and `user`.id = 1",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Route with multiple route constraints, SelectEqualUnique is the best constraint, order reversed.
"select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 1 and user.name = 'aa' and user.id in (1, 2) and user.col = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = 1 and `user`.`name` = 'aa' and `user`.id in (1, 2) and `user`.col = 5",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Route with OR and AND clause, must parenthesize correctly.
"select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = 1 or user.name = 'aa' and user.id in (1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = 1 or `user`.`name` = 'aa' and `user`.id in (1, 2)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Unsharded route
"select unsharded.id from user join unsharded where unsharded.id = user.id"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.id from user join unsharded where unsharded.id = user.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id from `user` where 1 != 1",
        "Query": "select `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded where unsharded.id = :user_id",
        "Table": "unsharded"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select unsharded.id from user join unsharded where unsharded.id = user.id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "unsharded_id": 0
    },
    "TableName": "unsharded_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
        "Query": "select unsharded.id from unsharded",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from `user` where 1 != 1",
        "Query": "select 1 from `user` where `user`.id = :unsharded_id",
        "Table": "`user`",
        "Values": [
          ":unsharded_id"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# routing rules: choose the redirected table
"select col from route1 where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select col from route1 where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` as route1 where 1 != 1",
    "Query": "select col from `user` as route1 where id = 1",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# subquery
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in ::__vals and u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col)",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col) and u.id in ::__vals",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# correlated subquery merge-able into a route of a join tree
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id) and u.id in (user_extra.col, 1)"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in ::__vals and u.id in (select m2 from `user` where `user`.id = u.id)",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id) and u.id in ::__vals",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# ensure subquery reordering gets us a better plan
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id = 5 and u.id in (select m2 from `user` where `user`.id = 5)",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = 5) and u.id = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = 5) and u.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# nested subquery
"select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)"
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in ::__vals and u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col and `user`.id in (select m3 from user_extra where user_extra.user_id = `user`.id))",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.m from user_extra join user u where u.id in (select m2 from user where user.id = u.id and user_extra.col = user.col and user.id in (select m3 from user_extra where user_extra.user_id = user.id)) and u.id in (user_extra.col, 1)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.m from `user` as u where 1 != 1",
        "Query": "select u.m from `user` as u where u.id in (select m2 from `user` where `user`.id = u.id and `user`.col = :user_extra_col and `user`.id in (select m3 from user_extra where user_extra.user_id = `user`.id)) and u.id in ::__vals",
        "Table": "`user`",
        "Values": [
          [
            ":user_extra_col",
            1
          ]
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Correlated subquery in where clause
"select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.col in (select user_extra.col from user_extra where user_extra.user_id = user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.col in (select user_extra.col from user_extra where user_extra.user_id = `user`.id)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# outer and inner subquery route by same int val
"select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and user.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where id = 5 and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = 5)",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# outer and inner subquery route by same str val
"select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 'aa' and user.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where id = 'aa' and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = 'aa')",
    "Table": "`user`",
    "Values": [
      "aa"
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# outer and inner subquery route by same val arg
"select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where id = :a and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = :a)",
    "Table": "`user`",
    "Values": [
      ":a"
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# unresolved symbol in inner subquery.
"select id from user where id = :a and user.col in (select user_extra.col from user_extra where user_extra.user_id = :a and foo.id = 1)"
"symbol foo.id not found"
Gen4 plan same as above

# outer and inner subquery route by same outermost column value
"select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))"
{
  "QueryType": "SELECT",
  "Original": "select id2 from user uu where id in (select id from user where id = uu.id and user.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id2 from `user` as uu where 1 != 1",
    "Query": "select id2 from `user` as uu where id in (select id from `user` where id = uu.id and `user`.col in (select user_extra.col from user_extra where user_extra.user_id = uu.id))",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# cross-shard subquery in IN clause.
# Note the improved Underlying plan as SelectIN.
"select id from user where id in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where :__sq_has_values1 = 1 and id in ::__vals",
        "Table": "`user`",
        "Values": [
          "::__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

# cross-shard subquery in NOT IN clause.
"select id from user where id not in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id not in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutNotIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where :__sq_has_values1 = 0 or id not in ::__sq1",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# cross-shard subquery in EXISTS clause.
"select id from user where exists (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where exists (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutExists",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where :__sq_has_values1",
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user where exists (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutExists",
    "PulloutVars": [
      "__sq_has_values1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where :__sq_has_values1",
        "Table": "`user`"
      }
    ]
  }
}

# cross-shard subquery as expression
"select id from user where id = (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = :__sq1",
        "Table": "`user`",
        "Values": [
          ":__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

# multi-level pullout
"select id1 from user where id = (select id2 from user where id2 in (select id3 from user))"
{
  "QueryType": "SELECT",
  "Original": "select id1 from user where id = (select id2 from user where id2 in (select id3 from user))",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values2",
      "__sq2"
    ],
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id3 from `user` where 1 != 1",
            "Query": "select id3 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id2 from `user` where 1 != 1",
            "Query": "select id2 from `user` where :__sq_has_values1 = 1 and id2 in ::__sq1",
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id1 from `user` where 1 != 1",
        "Query": "select id1 from `user` where id = :__sq2",
        "Table": "`user`",
        "Values": [
          ":__sq2"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id1 from user where id = (select id2 from user where id2 in (select id3 from user))",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values2",
          "__sq2"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id3 from `user` where 1 != 1",
            "Query": "select id3 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id2 from `user` where 1 != 1",
            "Query": "select id2 from `user` where :__sq_has_values2 = 1 and id2 in ::__sq2",
            "Table": "`user`"
          }
        ]
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id1 from `user` where 1 != 1",
        "Query": "select id1 from `user` where id = :__sq1",
        "Table": "`user`",
        "Values": [
          ":__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# routing rules subquery merge
"select col from user where id = (select id from route1 where route1.id = user.id)"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = (select id from route1 where route1.id = user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` where id = (select id from `user` as route1 where route1.id = `user`.id)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# routing rules subquery pullout
"select col from user where id = (select id from route2)"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = (select id from route2)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select id from unsharded as route2 where 1 != 1",
        "Query": "select id from unsharded as route2",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where id = :__sq1",
        "Table": "`user`",
        "Values": [
          ":__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

# Case preservation test
"select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5"
{
  "QueryType": "SELECT",
  "Original": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.Id from `user` join user_extra on `user`.iD = user_extra.User_Id where 1 != 1",
    "Query": "select user_extra.Id from `user` join user_extra on `user`.iD = user_extra.User_Id where `user`.Id = 5",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user_extra.Id from user join user_extra on user.iD = user_extra.User_Id where user.Id = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_extra.Id from `user`, user_extra where 1 != 1",
    "Query": "select user_extra.Id from `user`, user_extra where `user`.Id = 5 and `user`.iD = user_extra.User_Id",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# database() call in where clause.
"select id from user where database()"
{
  "QueryType": "SELECT",
  "Original": "select id from user where database()",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where database()",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# Select with equals null
"select id from music where id = null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id = null",
    "Table": "music"
  }
}
Gen4 plan same as above

# SELECT with IS NULL
"select id from music where id is null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id is null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id is null",
    "Table": "music",
    "Values": [
      null
    ],
    "Vindex": "music_user_map"
  }
}
Gen4 plan same as above

# SELECT with IS NOT NULL
"select id from music where id is not null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id is not null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id is not null",
    "Table": "music"
  }
}
Gen4 plan same as above

# Single table with unique vindex match and null match
"select id from music where user_id = 4 and id = null"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id = null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id = null",
    "Table": "music"
  }
}
Gen4 plan same as above

# Single table with unique vindex match and IN (null)
"select id from music where user_id = 4 and id IN (null)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id IN (null)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id in (null)",
    "Table": "music"
  }
}
Gen4 plan same as above

# Single table with unique vindex match and IN (null, 1, 2)
"select id from music where user_id = 4 and id IN (null, 1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id IN (null, 1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id in (null, 1, 2)",
    "Table": "music",
    "Values": [
      4
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Single table with unique vindex match and NOT IN (null, 1, 2)
"select id from music where user_id = 4 and id NOT IN (null, 1, 2)"
{
  "QueryType": "SELECT",
  "Original": "select id from music where user_id = 4 and id NOT IN (null, 1, 2)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where user_id = 4 and id not in (null, 1, 2)",
    "Table": "music"
  }
}
Gen4 plan same as above

# Single table with unique vindex match and NOT IN (null, 1, 2) predicates inverted
"select id from music where id NOT IN (null, 1, 2) and user_id = 4"
{
  "QueryType": "SELECT",
  "Original": "select id from music where id NOT IN (null, 1, 2) and user_id = 4",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectNone",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from music where 1 != 1",
    "Query": "select id from music where id not in (null, 1, 2) and user_id = 4",
    "Table": "music"
  }
}
Gen4 plan same as above

# pullout sq after pullout sq
"select id from user where not id in (select user_extra.col from user_extra where user_extra.user_id = 42) and id in (select user_extra.col from user_extra where user_extra.user_id = 411)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where not id in (select user_extra.col from user_extra where user_extra.user_id = 42) and id in (select user_extra.col from user_extra where user_extra.user_id = 411)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutNotIn",
    "PulloutVars": [
      "__sq_has_values2",
      "__sq2"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 42",
        "Table": "user_extra",
        "Values": [
          42
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.user_id = 411",
            "Table": "user_extra",
            "Values": [
              411
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectIN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where :__sq_has_values1 = 1 and id in ::__vals and (:__sq_has_values2 = 0 or id not in ::__sq2)",
            "Table": "`user`",
            "Values": [
              "::__sq1"
            ],
            "Vindex": "user_index"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user where not id in (select user_extra.col from user_extra where user_extra.user_id = 42) and id in (select user_extra.col from user_extra where user_extra.user_id = 411)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "PulloutVars": [
      "__sq_has_values2",
      "__sq2"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 411",
        "Table": "user_extra",
        "Values": [
          411
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutNotIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectEqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
            "Query": "select user_extra.col from user_extra where user_extra.user_id = 42",
            "Table": "user_extra",
            "Values": [
              42
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectIN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from `user` where 1 != 1",
            "Query": "select id from `user` where (:__sq_has_values1 = 0 or id not in ::__sq1) and (:__sq_has_values2 = 1 and id in ::__vals)",
            "Table": "`user`",
            "Values": [
              "::__sq2"
            ],
            "Vindex": "user_index"
          }
        ]
      }
    ]
  }
}

# solving LIKE query with a CFC prefix vindex
"select c2 from cfc_vindex_col where c1 like 'A%'"
{
  "QueryType": "SELECT",
  "Original": "select c2 from cfc_vindex_col where c1 like 'A%'",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select c2 from cfc_vindex_col where 1 != 1",
    "Query": "select c2 from cfc_vindex_col where c1 like 'A%'",
    "Table": "cfc_vindex_col",
    "Values": [
      "A%"
    ],
    "Vindex": "cfc"
  }
}
Gen4 plan same as above

"select * from samecolvin where col = :col"
{
  "QueryType": "SELECT",
  "Original": "select * from samecolvin where col = :col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from samecolvin where 1 != 1",
    "Query": "select col from samecolvin where col = :col",
    "Table": "samecolvin",
    "Values": [
      ":col"
    ],
    "Vindex": "vindex1"
  }
}
Gen4 plan same as above

# non unique predicate on vindex
"select id from user where user.id > 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id \u003e 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id \u003e 5",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# select from unsharded keyspace with uncorrelated subquery which should be merged to a single route
"select unsharded.id from unsharded where unsharded.name in (select name from unsharded_a)"
{
  "QueryType": "SELECT",
  "Original": "select unsharded.id from unsharded where unsharded.name in (select name from unsharded_a)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select unsharded.id from unsharded where 1 != 1",
    "Query": "select unsharded.id from unsharded where unsharded.`name` in (select `name` from unsharded_a)",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# in subquery the id will be scoped to local table as there is no qualifier associated with it.
"select id from user where id in (select col from unsharded where col = id)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id in (select col from unsharded where col = id)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select col from unsharded where 1 != 1",
        "Query": "select col from unsharded where col = id",
        "Table": "unsharded"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where :__sq_has_values1 = 1 and id in ::__vals",
        "Table": "`user`",
        "Values": [
          "::__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
Gen4 plan same as above

# correlated subquery with different keyspace tables involved
"select id from user where id in (select col from unsharded where col = user.id)"
"unsupported: cross-shard correlated subquery"
Gen4 plan same as above

# correlated subquery with same keyspace
"select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)"
{
  "QueryType": "SELECT",
  "Original": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u.id from `user` as u where 1 != 1",
    "Query": "select u.id from `user` as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# SelectDBA with uncorrelated subqueries
"select t.table_schema from information_schema.tables as t where t.table_schema in (select c.column_name from information_schema.columns as c)"
{
  "QueryType": "SELECT",
  "Original": "select t.table_schema from information_schema.tables as t where t.table_schema in (select c.column_name from information_schema.columns as c)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectDBA",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select t.table_schema from information_schema.`tables` as t where 1 != 1",
    "Query": "select t.table_schema from information_schema.`tables` as t where t.table_schema in (select c.column_name from information_schema.`columns` as c)",
    "Table": "information_schema.`tables`"
  }
}
Gen4 plan same as above

# SelectReference with uncorrelated subqueries
"select ref.col from ref where ref.col in (select ref.col from ref)"
{
  "QueryType": "SELECT",
  "Original": "select ref.col from ref where ref.col in (select ref.col from ref)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select ref.col from ref where 1 != 1",
    "Query": "select ref.col from ref where ref.col in (select ref.col from ref)",
    "Table": "ref"
  }
}
Gen4 plan same as above

# SelectEqualUnique with uncorrelated subqueries
"select u1.col from user as u1 where u1.id = 5 and u1.name in (select u2.name from user u2 where u2.id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select u1.col from user as u1 where u1.id = 5 and u1.name in (select u2.name from user u2 where u2.id = 5)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
    "Query": "select u1.col from `user` as u1 where u1.id = 5 and u1.`name` in (select u2.`name` from `user` as u2 where u2.id = 5)",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# SelectEqualUnique with EXISTS uncorrelated subquery
"select u1.col from user as u1 where u1.id = 5 and exists (select u2.name from user u2 where u2.id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select u1.col from user as u1 where u1.id = 5 and exists (select u2.name from user u2 where u2.id = 5)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
    "Query": "select u1.col from `user` as u1 where u1.id = 5 and exists (select u2.`name` from `user` as u2 where u2.id = 5)",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# SelectEqualUnique with NOT EXISTS uncorrelated subquery
"select u1.col from user as u1 where u1.id = 5 and not exists (select u2.name from user u2 where u2.id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select u1.col from user as u1 where u1.id = 5 and not exists (select u2.name from user u2 where u2.id = 5)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
    "Query": "select u1.col from `user` as u1 where u1.id = 5 and not exists (select u2.`name` from `user` as u2 where u2.id = 5)",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# SelectScatter with NOT EXISTS uncorrelated subquery
"select u1.col from user as u1 where not exists (select u2.name from user u2 where u2.id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select u1.col from user as u1 where not exists (select u2.name from user u2 where u2.id = 5)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutExists",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u2.`name` from `user` as u2 where 1 != 1",
        "Query": "select u2.`name` from `user` as u2 where u2.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
        "Query": "select u1.col from `user` as u1 where not :__sq_has_values1",
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u1.col from user as u1 where not exists (select u2.name from user u2 where u2.id = 5)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutExists",
    "PulloutVars": [
      "__sq_has_values1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u2.`name` from `user` as u2 where 1 != 1",
        "Query": "select u2.`name` from `user` as u2 where u2.id = 5",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u1.col from `user` as u1 where 1 != 1",
        "Query": "select u1.col from `user` as u1 where not :__sq_has_values1",
        "Table": "`user`"
      }
    ]
  }
}

# The outer and first inner are SelectEqualUnique with same Vindex value, the second inner has different Vindex value
"select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 5) and id in (select user_extra.col from user_extra where user_extra.user_id = 4)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 5) and id in (select user_extra.col from user_extra where user_extra.user_id = 4)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
        "Table": "user_extra",
        "Values": [
          4
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and :__sq_has_values1 = 1 and id in ::__sq1 and id not in (select user_extra.col from user_extra where user_extra.user_id = 5)",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 5) and id in (select user_extra.col from user_extra where user_extra.user_id = 4)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "PulloutVars": [
      "__sq_has_values2",
      "__sq2"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
        "Table": "user_extra",
        "Values": [
          4
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and id not in (select user_extra.col from user_extra where user_extra.user_id = 5) and (:__sq_has_values2 = 1 and id in ::__sq2)",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# The outer and second inner are SelectEqualUnique with same Vindex value, the first inner has different Vindex value
"select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 4) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)"
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 4) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutNotIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
        "Table": "user_extra",
        "Values": [
          4
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and id in (select user_extra.col from user_extra where user_extra.user_id = 5) and (:__sq_has_values1 = 0 or id not in ::__sq1)",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user where id = 5 and not id in (select user_extra.col from user_extra where user_extra.user_id = 4) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutNotIn",
    "PulloutVars": [
      "__sq_has_values1",
      "__sq1"
    ],
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.user_id = 4",
        "Table": "user_extra",
        "Values": [
          4
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where id = 5 and (:__sq_has_values1 = 0 or id not in ::__sq1) and id in (select user_extra.col from user_extra where user_extra.user_id = 5)",
        "Table": "`user`",
        "Values": [
          5
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# two correlated subqueries that can be merge in a single route
"select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)"
{
  "QueryType": "SELECT",
  "Original": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u.id from `user` as u where 1 != 1",
    "Query": "select u.id from `user` as u where u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.id from user as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select u.id from `user` as u where 1 != 1",
    "Query": "select u.id from `user` as u where u.col in (select ue.user_id from user_extra as ue where ue.user_id = u.id) and u.col2 in (select ue.user_id from user_extra as ue where ue.user_id = u.id)",
    "Table": "`user`"
  }
}

# transitive closures for the win
"select id from user where user.id = user.col and user.col = 5"
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = user.col and user.col = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = `user`.col and `user`.col = 5",
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user where user.id = user.col and user.col = 5",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user` where 1 != 1",
    "Query": "select id from `user` where `user`.id = `user`.col and `user`.col = 5",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# join with transitive closures
"select id from user, user_extra where user.id = user_extra.col and user_extra.col = user_extra.user_id"
{
  "QueryType": "SELECT",
  "Original": "select id from user, user_extra where user.id = user_extra.col and user_extra.col = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.col = :user_id and user_extra.col = user_extra.user_id",
        "Table": "user_extra"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user, user_extra where user.id = user_extra.col and user_extra.col = user_extra.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id from `user`, user_extra where 1 != 1",
    "Query": "select id from `user`, user_extra where user_extra.col = user_extra.user_id and `user`.id = user_extra.col",
    "Table": "`user`, user_extra"
  }
}

# not supported transitive closures with equality inside of an OR
"select id from user, user_extra where user.id = user_extra.col and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.name)"
{
  "QueryType": "SELECT",
  "Original": "select id from user, user_extra where user.id = user_extra.col and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.name)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.col = :user_id and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.`name`)",
        "Table": "user_extra"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from user, user_extra where user.id = user_extra.col and (user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.name)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "1",
    "JoinVars": {
      "user_extra_col": 0
    },
    "TableName": "user_extra_`user`",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
        "Query": "select user_extra.col from user_extra where user_extra.col = user_extra.user_id or user_extra.col2 = user_extra.`name`",
        "Table": "user_extra"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` where `user`.id = :user_extra_col",
        "Table": "`user`",
        "Values": [
          ":user_extra_col"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# routing rules subquery merge with alias
"select col from user where id = (select id from route1 as a where a.id = user.id)"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = (select id from route1 as a where a.id = user.id)",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` where id = (select id from `user` as a where a.id = `user`.id)",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# left join where clauses where we can optimize into an inner join
"select user.id from user left join user_extra on user.col = user_extra.col where user_extra.foobar = 5"
"unsupported: cross-shard left join and where clause"
{
  "QueryType": "SELECT",
  "Original": "select user.id from user left join user_extra on user.col = user_extra.col where user_extra.foobar = 5",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-2",
    "JoinVars": {
      "user_col": 0
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col, `user`.id from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_extra.foobar = 5 and user_extra.col = :user_col",
        "Table": "user_extra"
      }
    ]
  }
}

#subquery on other table
"select distinct user.id, user.col from user where user.col in (select id from music where col2 = 'a')"
{
  "QueryType": "SELECT",
  "Original": "select distinct user.id, user.col from user where user.col in (select id from music where col2 = 'a')",
  "Instructions": {
    "OperatorType": "Distinct",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from music where 1 != 1",
            "Query": "select id from music where col2 = 'a'",
            "Table": "music"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col from `user` where 1 != 1",
            "Query": "select `user`.id, `user`.col from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select distinct user.id, user.col from user where user.col in (select id from music where col2 = 'a')",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|2), (1|3)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "PulloutVars": [
          "__sq_has_values1",
          "__sq1"
        ],
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from music where 1 != 1",
            "Query": "select id from music where col2 = 'a'",
            "Table": "music"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.id, `user`.col, weight_string(`user`.id), weight_string(`user`.col) from `user` where 1 != 1",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select `user`.id, `user`.col, weight_string(`user`.id), weight_string(`user`.col) from `user` where :__sq_has_values1 = 1 and `user`.col in ::__sq1 order by `user`.id asc, `user`.col asc",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# should use colb_colc_map as first column of the vindex is present in predicate
"select * from multicolvin where column_b = 1"
{
  "QueryType": "SELECT",
  "Original": "select * from multicolvin where column_b = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicolvin where 1 != 1",
    "Query": "select * from multicolvin where column_b = 1",
    "Table": "multicolvin",
    "Values": [
      1
    ],
    "Vindex": "colb_colc_map"
  }
}
Gen4 plan same as above

# should only use first column of the vindex colb_colc_map
"select * from multicolvin where column_b = 1 and column_c = 2"
{
  "QueryType": "SELECT",
  "Original": "select * from multicolvin where column_b = 1 and column_c = 2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicolvin where 1 != 1",
    "Query": "select * from multicolvin where column_b = 1 and column_c = 2",
    "Table": "multicolvin",
    "Values": [
      1
    ],
    "Vindex": "colb_colc_map"
  }
}
Gen4 plan same as above

# uses vindex colb_colc_map
"select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3"
{
  "QueryType": "SELECT",
  "Original": "select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicolvin where 1 != 1",
    "Query": "select * from multicolvin where column_b = 1 and column_c = 2 and column_a = 3",
    "Table": "multicolvin",
    "Values": [
      1
    ],
    "Vindex": "colb_colc_map"
  }
}
Gen4 plan same as above

# v3 takes cola_map, gen4 takes colb_colc_map, may be based on map key ordering
"select * from multicolvin where column_a = 3 and column_b = 1"
{
  "QueryType": "SELECT",
  "Original": "select * from multicolvin where column_a = 3 and column_b = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicolvin where 1 != 1",
    "Query": "select * from multicolvin where column_a = 3 and column_b = 1",
    "Table": "multicolvin",
    "Values": [
      3
    ],
    "Vindex": "cola_map"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from multicolvin where column_a = 3 and column_b = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicolvin where 1 != 1",
    "Query": "select * from multicolvin where column_a = 3 and column_b = 1",
    "Table": "multicolvin",
    "Values": [
      1
    ],
    "Vindex": "colb_colc_map"
  }
}

# multi column vindexes are not allowed to be selected as vindex option. This will be Scatter
"select * from multicol_tbl where cola = 1 and colb = 2"
{
  "QueryType": "SELECT",
  "Original": "select * from multicol_tbl where cola = 1 and colb = 2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from multicol_tbl where 1 != 1",
    "Query": "select * from multicol_tbl where cola = 1 and colb = 2",
    "Table": "multicol_tbl"
  }
}
Gen4 plan same as above
