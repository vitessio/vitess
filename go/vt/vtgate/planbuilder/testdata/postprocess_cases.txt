# HAVING implicitly references table col
"select user.col1 from user having col2 = 2"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 from user having col2 = 2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.col1 from `user` where 1 != 1",
    "Query": "select `user`.col1 from `user` having col2 = 2",
    "Table": "`user`"
  }
}

# ambiguous symbol reference
"select user.col1, user_extra.col1 from user join user_extra having col1 = 2"
"ambiguous symbol reference: col1"

# non-ambiguous symbol reference
"select user.col1, user_extra.col1 from user join user_extra having user_extra.col1 = 2"
{
  "QueryType": "SELECT",
  "Original": "select user.col1, user_extra.col1 from user join user_extra having user_extra.col1 = 2",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 from `user` where 1 != 1",
        "Query": "select `user`.col1 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col1 from user_extra where 1 != 1",
        "Query": "select user_extra.col1 from user_extra having user_extra.col1 = 2",
        "Table": "user_extra"
      }
    ]
  }
}

# HAVING multi-route
"select user.col1 as a, user.col2, user_extra.col3 from user join user_extra having 1 = 1 and a = 1 and a = user.col2 and user_extra.col3 = 1"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, user_extra.col3 from user join user_extra having 1 = 1 and a = 1 and a = user.col2 and user_extra.col3 = 1",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col2 from `user` where 1 != 1",
        "Query": "select `user`.col1 as a, `user`.col2 from `user` having 1 = 1 and a = 1 and a = `user`.col2",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user_extra.col3 from user_extra where 1 != 1",
        "Query": "select user_extra.col3 from user_extra having user_extra.col3 = 1",
        "Table": "user_extra"
      }
    ]
  }
}

# HAVING uses subquery
"select id from user having id in (select col from user)"
{
  "QueryType": "SELECT",
  "Original": "select id from user having id in (select col from user)",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectIN",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from `user` where 1 != 1",
        "Query": "select id from `user` having :__sq_has_values1 = 1 and id in ::__vals",
        "Table": "`user`",
        "Values": [
          "::__sq1"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# ORDER BY, reference col from local table.
"select col from user where id = 5 order by aa"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = 5 order by aa",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` where id = 5 order by aa asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# ORDER BY uses column numbers
"select col from user where id = 1 order by 1"
{
  "QueryType": "SELECT",
  "Original": "select col from user where id = 1 order by 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` where id = 1 order by 1 asc",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# ORDER BY on scatter
"select col from user order by col"
{
  "QueryType": "SELECT",
  "Original": "select col from user order by col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col, weight_string(col) from `user` where 1 != 1",
    "OrderBy": "(0|1) ASC",
    "Query": "select col, weight_string(col) from `user` order by col asc",
    "ResultColumns": 1,
    "Table": "`user`"
  }
}
Gen4 plan same as above

# ORDER BY on select t.*
"select t.*, t.col from user t order by t.col"
{
  "QueryType": "SELECT",
  "Original": "select t.*, t.col from user t order by t.col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.*, t.col, weight_string(t.col) from `user` as t where 1 != 1",
    "OrderBy": "(9|2) ASC",
    "Query": "select t.*, t.col, weight_string(t.col) from `user` as t order by t.col asc",
    "ResultColumns": 2,
    "Table": "`user`"
  }
}

# ORDER BY on select *
"select *, col from user order by col"
{
  "QueryType": "SELECT",
  "Original": "select *, col from user order by col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, col, weight_string(col) from `user` where 1 != 1",
    "OrderBy": "(9|2) ASC",
    "Query": "select *, col, weight_string(col) from `user` order by col asc",
    "ResultColumns": 2,
    "Table": "`user`"
  }
}

# ORDER BY on select multi t.*
"select t.*, t.name, t.*, t.col from user t order by t.col"
{
  "QueryType": "SELECT",
  "Original": "select t.*, t.name, t.*, t.col from user t order by t.col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select t.*, t.`name`, t.*, t.col, weight_string(t.col) from `user` as t where 1 != 1",
    "OrderBy": "(19|4) ASC",
    "Query": "select t.*, t.`name`, t.*, t.col, weight_string(t.col) from `user` as t order by t.col asc",
    "ResultColumns": 4,
    "Table": "`user`"
  }
}

# ORDER BY on select multi *
"select *, name, *, col from user order by col"
{
  "QueryType": "SELECT",
  "Original": "select *, name, *, col from user order by col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, `name`, *, col, weight_string(col) from `user` where 1 != 1",
    "OrderBy": "(19|4) ASC",
    "Query": "select *, `name`, *, col, weight_string(col) from `user` order by col asc",
    "ResultColumns": 4,
    "Table": "`user`"
  }
}

# ORDER BY works for select * from authoritative table
"select * from authoritative order by user_id"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative order by user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_id, col1, col2, weight_string(user_id) from authoritative where 1 != 1",
    "OrderBy": "(0|3) ASC",
    "Query": "select user_id, col1, col2, weight_string(user_id) from authoritative order by user_id asc",
    "ResultColumns": 3,
    "Table": "authoritative"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative order by user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select authoritative.user_id as user_id, authoritative.col1 as col1, authoritative.col2 as col2, weight_string(authoritative.user_id) from authoritative where 1 != 1",
    "OrderBy": "(0|3) ASC",
    "Query": "select authoritative.user_id as user_id, authoritative.col1 as col1, authoritative.col2 as col2, weight_string(authoritative.user_id) from authoritative order by user_id asc",
    "ResultColumns": 3,
    "Table": "authoritative"
  }
}

# ORDER BY works for select * from authoritative table
"select * from authoritative order by col1"
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative order by col1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user_id, col1, col2, weight_string(col1) from authoritative where 1 != 1",
    "OrderBy": "(1|3) ASC",
    "Query": "select user_id, col1, col2, weight_string(col1) from authoritative order by col1 asc",
    "ResultColumns": 3,
    "Table": "authoritative"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select * from authoritative order by col1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select authoritative.user_id as user_id, authoritative.col1 as col1, authoritative.col2 as col2, weight_string(authoritative.col1) from authoritative where 1 != 1",
    "OrderBy": "(1|3) ASC",
    "Query": "select authoritative.user_id as user_id, authoritative.col1 as col1, authoritative.col2 as col2, weight_string(authoritative.col1) from authoritative order by col1 asc",
    "ResultColumns": 3,
    "Table": "authoritative"
  }
}

# ORDER BY on scatter with text column
"select a, textcol1, b from user order by a, textcol1, b"
{
  "QueryType": "SELECT",
  "Original": "select a, textcol1, b from user order by a, textcol1, b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, textcol1, b, weight_string(a), weight_string(textcol1), weight_string(b) from `user` where 1 != 1",
    "OrderBy": "(0|3) ASC, (1|4) ASC, (2|5) ASC",
    "Query": "select a, textcol1, b, weight_string(a), weight_string(textcol1), weight_string(b) from `user` order by a asc, textcol1 asc, b asc",
    "ResultColumns": 3,
    "Table": "`user`"
  }
}
Gen4 plan same as above

# ORDER BY on scatter with text column, qualified name TODO: can plan better
"select a, user.textcol1, b from user order by a, textcol1, b"
{
  "QueryType": "SELECT",
  "Original": "select a, user.textcol1, b from user order by a, textcol1, b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, `user`.textcol1, b, weight_string(a), weight_string(`user`.textcol1), weight_string(b) from `user` where 1 != 1",
    "OrderBy": "(0|3) ASC, (1|4) ASC, (2|5) ASC",
    "Query": "select a, `user`.textcol1, b, weight_string(a), weight_string(`user`.textcol1), weight_string(b) from `user` order by a asc, textcol1 asc, b asc",
    "ResultColumns": 3,
    "Table": "`user`"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, user.textcol1, b from user order by a, textcol1, b",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, `user`.textcol1, b, weight_string(a), weight_string(textcol1), weight_string(b) from `user` where 1 != 1",
    "OrderBy": "(0|3) ASC, (1|4) ASC, (2|5) ASC",
    "Query": "select a, `user`.textcol1, b, weight_string(a), weight_string(textcol1), weight_string(b) from `user` order by a asc, textcol1 asc, b asc",
    "ResultColumns": 3,
    "Table": "`user`"
  }
}

# ORDER BY on scatter with multiple text columns
"select a, textcol1, b, textcol2 from user order by a, textcol1, b, textcol2"
{
  "QueryType": "SELECT",
  "Original": "select a, textcol1, b, textcol2 from user order by a, textcol1, b, textcol2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, textcol1, b, textcol2, weight_string(a), weight_string(textcol1), weight_string(b), weight_string(textcol2) from `user` where 1 != 1",
    "OrderBy": "(0|4) ASC, (1|5) ASC, (2|6) ASC, (3|7) ASC",
    "Query": "select a, textcol1, b, textcol2, weight_string(a), weight_string(textcol1), weight_string(b), weight_string(textcol2) from `user` order by a asc, textcol1 asc, b asc, textcol2 asc",
    "ResultColumns": 4,
    "Table": "`user`"
  }
}
Gen4 plan same as above

# ORDER BY invalid col number on scatter
"select col from user order by 2"
"Unknown column '2' in 'order clause'"
Gen4 plan same as above

# ORDER BY column offset
"select id as foo from music order by 1"
{
  "QueryType": "SELECT",
  "Original": "select id as foo from music order by 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id as foo, weight_string(id) from music where 1 != 1",
    "OrderBy": "(0|1) ASC",
    "Query": "select id as foo, weight_string(id) from music order by 1 asc",
    "ResultColumns": 1,
    "Table": "music"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id as foo from music order by 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id as foo, weight_string(id) from music where 1 != 1",
    "OrderBy": "(0|1) ASC",
    "Query": "select id as foo, weight_string(id) from music order by foo asc",
    "ResultColumns": 1,
    "Table": "music"
  }
}

# ORDER BY NULL
"select col from user order by null"
{
  "QueryType": "SELECT",
  "Original": "select col from user order by null",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` order by null",
    "Table": "`user`"
  }
}
Gen4 plan same as above

# ORDER BY after pull-out subquery
"select col from user where col in (select col2 from user) order by col"
{
  "QueryType": "SELECT",
  "Original": "select col from user where col in (select col2 from user) order by col",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col2 from `user` where 1 != 1",
        "Query": "select col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, weight_string(col) from `user` where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select col, weight_string(col) from `user` where :__sq_has_values1 = 1 and col in ::__sq1 order by col asc",
        "ResultColumns": 1,
        "Table": "`user`"
      }
    ]
  }
}

# ORDER BY NULL for join
"select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by null"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by null",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "JoinVars": {
      "user_id": 2
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by null",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id order by null",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}

# ORDER BY non-key column for join
"select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by a"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "JoinVars": {
      "user_id": 2
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by a asc",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-2,-3,1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, `user`.col1 as a, `user`.col2, weight_string(`user`.col1) from `user` where 1 != 1",
        "OrderBy": "(1|3) ASC",
        "Query": "select `user`.id, `user`.col1 as a, `user`.col2, weight_string(`user`.col1) from `user` where `user`.id = 1 order by a asc",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}

# ORDER BY non-key column for implicit join
"select user.col1 as a, user.col2, music.col3 from user, music where user.id = music.id and user.id = 1 order by a"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user, music where user.id = music.id and user.id = 1 order by a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "JoinVars": {
      "user_id": 2
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by a asc",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user, music where user.id = music.id and user.id = 1 order by a",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-2,-3,1",
    "JoinVars": {
      "user_id": 0
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, `user`.col1 as a, `user`.col2, weight_string(`user`.col1) from `user` where 1 != 1",
        "OrderBy": "(1|3) ASC",
        "Query": "select `user`.id, `user`.col1 as a, `user`.col2, weight_string(`user`.col1) from `user` where `user`.id = 1 order by a asc",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}

# ORDER BY NULL after pull-out subquery
"select col from user where col in (select col2 from user) order by null"
{
  "QueryType": "SELECT",
  "Original": "select col from user where col in (select col2 from user) order by null",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col2 from `user` where 1 != 1",
        "Query": "select col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where :__sq_has_values1 = 1 and col in ::__sq1 order by null",
        "Table": "`user`"
      }
    ]
  }
}

# ORDER BY RAND()
"select col from user order by RAND()"
{
  "QueryType": "SELECT",
  "Original": "select col from user order by RAND()",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` where 1 != 1",
    "Query": "select col from `user` order by RAND()",
    "Table": "`user`"
  }
}

# ORDER BY RAND() for join
"select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by RAND()"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a, user.col2, music.col3 from user join music on user.id = music.id where user.id = 1 order by RAND()",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-2,1",
    "JoinVars": {
      "user_id": 2
    },
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where 1 != 1",
        "Query": "select `user`.col1 as a, `user`.col2, `user`.id from `user` where `user`.id = 1 order by RAND()",
        "Table": "`user`",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select music.col3 from music where 1 != 1",
        "Query": "select music.col3 from music where music.id = :user_id order by RAND()",
        "Table": "music",
        "Values": [
          ":user_id"
        ],
        "Vindex": "music_user_map"
      }
    ]
  }
}

# ORDER BY RAND() after pull-out subquery
"select col from user where col in (select col2 from user) order by rand()"
{
  "QueryType": "SELECT",
  "Original": "select col from user where col in (select col2 from user) order by rand()",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutIn",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col2 from `user` where 1 != 1",
        "Query": "select col2 from `user`",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` where :__sq_has_values1 = 1 and col in ::__sq1 order by rand()",
        "Table": "`user`"
      }
    ]
  }
}

# Order by, '*' expression
"select * from user where id = 5 order by col"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by col asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Order by, qualified '*' expression
"select user.* from user where id = 5 order by user.col"
{
  "QueryType": "SELECT",
  "Original": "select user.* from user where id = 5 order by user.col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.* from `user` where 1 != 1",
    "Query": "select `user`.* from `user` where id = 5 order by `user`.col asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Order by, '*' expression with qualified reference
"select * from user where id = 5 order by user.col"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by user.col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by `user`.col asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Order by, '*' expression in a subquery
"select u.id, e.id from user u join user_extra e where u.col = e.col and u.col in (select * from user where user.id = u.id order by col)"
{
  "QueryType": "SELECT",
  "Original": "select u.id, e.id from user u join user_extra e where u.col = e.col and u.col in (select * from user where user.id = u.id order by col)",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,1",
    "JoinVars": {
      "u_col": 1
    },
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.id, u.col from `user` as u where 1 != 1",
        "Query": "select u.id, u.col from `user` as u where u.col in (select * from `user` where `user`.id = u.id order by col asc)",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select e.id from user_extra as e where 1 != 1",
        "Query": "select e.id from user_extra as e where e.col = :u_col",
        "Table": "user_extra"
      }
    ]
  }
}

# Order by, verify outer symtab is searched according to its own context.
"select u.id from user u having u.id in (select col2 from user where user.id = u.id order by u.col)"
"symbol u.col not found in subquery"

# Order by, qualified '*' expression, name mismatched.
"select user.* from user where id = 5 order by e.col"
"symbol e.col not found"
Gen4 plan same as above

# Order by, invalid column number
"select col from user order by 18446744073709551616"
"error parsing column number: 18446744073709551616"
Gen4 plan same as above

# Order by, out of range column number
"select col from user order by 2"
"Unknown column '2' in 'order clause'"
Gen4 plan same as above

# Order by, '*' expression with qualified reference and using collate
"select * from user where id = 5 order by user.col collate utf8_general_ci"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by user.col collate utf8_general_ci",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by `user`.col collate utf8_general_ci asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

#Order by with math functions
"select * from user where id = 5 order by -col1"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by -col1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by -col1 asc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

#Order by with string operations
"select * from user where id = 5 order by concat(col,col1) collate utf8_general_ci desc"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by concat(col,col1) collate utf8_general_ci desc",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by concat(col, col1) collate utf8_general_ci desc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

#Order by with math operations
"select * from user where id = 5 order by id+col collate utf8_general_ci desc"
{
  "QueryType": "SELECT",
  "Original": "select * from user where id = 5 order by id+col collate utf8_general_ci desc",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` where 1 != 1",
    "Query": "select * from `user` where id = 5 order by id + col collate utf8_general_ci desc",
    "Table": "`user`",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

#Order by subquery column
"select * from user u join (select user_id from user_extra where user_id = 5) eu on u.id = eu.user_id where u.id = 5 order by eu.user_id"
{
  "QueryType": "SELECT",
  "Original": "select * from user u join (select user_id from user_extra where user_id = 5) eu on u.id = eu.user_id where u.id = 5 order by eu.user_id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from `user` as u join (select user_id from user_extra where 1 != 1) as eu on u.id = eu.user_id where 1 != 1",
    "Query": "select * from `user` as u join (select user_id from user_extra where user_id = 5) as eu on u.id = eu.user_id where u.id = 5 order by eu.user_id asc",
    "Table": "`user`, user_extra",
    "Values": [
      5
    ],
    "Vindex": "user_index"
  }
}

# routing rules: order by gets pushed for routes
"select col from route1 where id = 1 order by col"
{
  "QueryType": "SELECT",
  "Original": "select col from route1 where id = 1 order by col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from `user` as route1 where 1 != 1",
    "Query": "select col from `user` as route1 where id = 1 order by col asc",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# LIMIT
"select col1 from user where id = 1 limit 1"
{
  "QueryType": "SELECT",
  "Original": "select col1 from user where id = 1 limit 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1 from `user` where 1 != 1",
    "Query": "select col1 from `user` where id = 1 limit 1",
    "Table": "`user`",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# limit for joins. Can't push down the limit because result
# counts get multiplied by join operations.
"select user.col from user join user_extra limit 1"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra limit 1",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 1,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "-1",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `user`.col from `user` where 1 != 1",
            "Query": "select `user`.col from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      }
    ]
  }
}
Gen4 plan same as above

# limit for scatter
"select col from user limit 1"
{
  "QueryType": "SELECT",
  "Original": "select col from user limit 1",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 1,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` limit :__upper_limit",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# limit for scatter with bind var
"select col from user limit :a"
{
  "QueryType": "SELECT",
  "Original": "select col from user limit :a",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": null,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from `user` where 1 != 1",
        "Query": "select col from `user` limit :__upper_limit",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 plan same as above

# cross-shard expression in parenthesis with limit
"select * from user where (id1 = 4 AND name1 ='abc') limit 5"
{
  "QueryType": "SELECT",
  "Original": "select * from user where (id1 = 4 AND name1 ='abc') limit 5",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from `user` where 1 != 1",
        "Query": "select * from `user` where id1 = 4 and name1 = 'abc' limit :__upper_limit",
        "Table": "`user`"
      }
    ]
  }
}

# scatter limit after pullout subquery
"select col from user where col in (select col1 from user) limit 1"
{
  "QueryType": "SELECT",
  "Original": "select col from user where col in (select col1 from user) limit 1",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 1,
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Variant": "PulloutIn",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1 from `user` where 1 != 1",
            "Query": "select col1 from `user`",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col from `user` where 1 != 1",
            "Query": "select col from `user` where :__sq_has_values1 = 1 and col in ::__sq1 limit :__upper_limit",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# limit on reference table
"select col from ref limit 1"
{
  "QueryType": "SELECT",
  "Original": "select col from ref limit 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col from ref where 1 != 1",
    "Query": "select col from ref limit 1",
    "Table": "ref"
  }
}
Gen4 plan same as above

# invalid limit expression
"select id from user limit 1+1"
"unexpected expression in LIMIT: expression is too complex '1 + 1'"
Gen4 plan same as above

# order by column alias
"select id as foo from music order by foo"
{
  "QueryType": "SELECT",
  "Original": "select id as foo from music order by foo",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id as foo, weight_string(id) from music where 1 != 1",
    "OrderBy": "(0|1) ASC",
    "Query": "select id as foo, weight_string(id) from music order by foo asc",
    "ResultColumns": 1,
    "Table": "music"
  }
}
Gen4 plan same as above

# column alias for a table column in order by
"select id as foo, id2 as id from music order by id"
{
  "QueryType": "SELECT",
  "Original": "select id as foo, id2 as id from music order by id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id as foo, id2 as id, weight_string(id2) from music where 1 != 1",
    "OrderBy": "(1|2) ASC",
    "Query": "select id as foo, id2 as id, weight_string(id2) from music order by id asc",
    "ResultColumns": 2,
    "Table": "music"
  }
}
Gen4 plan same as above

# ordering on the left side of the join
"select name from user, music order by name"
{
  "QueryType": "SELECT",
  "Original": "select name from user, music order by name",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `name`, weight_string(`name`) from `user` where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select `name`, weight_string(`name`) from `user` order by `name` asc",
        "ResultColumns": 1,
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from music where 1 != 1",
        "Query": "select 1 from music",
        "Table": "music"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select name from user, music order by name",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `name`, weight_string(`name`) from `user` where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select `name`, weight_string(`name`) from `user` order by `name` asc",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from music where 1 != 1",
        "Query": "select 1 from music",
        "Table": "music"
      }
    ]
  }
}

# aggregation and non-aggregations column without group by
"select count(id), num from user"
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(id), num from `user` where 1 != 1",
        "Query": "select count(id), num from `user`",
        "Table": "`user`"
      }
    ]
  }
}
Gen4 error: In aggregated query without GROUP BY, expression of SELECT list contains nonaggregated column 'num'; this is incompatible with sql_mode=only_full_group_by

# aggregation and non-aggregations column with order by
"select count(id), num from user order by 2"
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user order by 2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(1|2) ASC",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "ResultColumns": 3,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1",
            "Query": "select count(id), num, weight_string(num) from `user`",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
Gen4 error: In aggregated query without GROUP BY, expression of SELECT list contains nonaggregated column 'num'; this is incompatible with sql_mode=only_full_group_by

# aggregation and non-aggregations column with group by
"select count(id), num from user group by 2"
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user group by 2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "GroupBy": "1",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by 2",
        "OrderBy": "(1|2) ASC",
        "Query": "select count(id), num, weight_string(num) from `user` group by 2 order by num asc",
        "ResultColumns": 2,
        "Table": "`user`"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user group by 2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "GroupBy": "(1|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by num",
        "OrderBy": "(1|2) ASC",
        "Query": "select count(id), num, weight_string(num) from `user` group by num order by num asc",
        "Table": "`user`"
      }
    ]
  }
}

# aggregation and non-aggregations column with group by and order by
"select count(id), num from user group by 2 order by 1"
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user group by 2 order by 1",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "GroupBy": "1",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by 2",
            "OrderBy": "(1|2) ASC",
            "Query": "select count(id), num, weight_string(num) from `user` group by 2 order by num asc",
            "ResultColumns": 2,
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(id), num from user group by 2 order by 1",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "GroupBy": "(1|2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(id), num, weight_string(num) from `user` where 1 != 1 group by num",
            "OrderBy": "(1|2) ASC",
            "Query": "select count(id), num, weight_string(num) from `user` group by num order by num asc",
            "Table": "`user`"
          }
        ]
      }
    ]
  }
}

# join order by with ambiguous column reference ; valid in MySQL
"select name, name from user, music order by name"
"ambiguous symbol reference: `name`"
{
  "QueryType": "SELECT",
  "Original": "select name, name from user, music order by name",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": "-1,-1",
    "TableName": "`user`_music",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `name`, weight_string(`name`) from `user` where 1 != 1",
        "OrderBy": "(0|1) ASC",
        "Query": "select `name`, weight_string(`name`) from `user` order by `name` asc",
        "Table": "`user`"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from music where 1 != 1",
        "Query": "select 1 from music",
        "Table": "music"
      }
    ]
  }
}

# order by with ambiguous column reference ; valid in MySQL
"select id, id from user order by id"
"ambiguous symbol reference: id"
{
  "QueryType": "SELECT",
  "Original": "select id, id from user order by id",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select id, id, weight_string(id) from `user` where 1 != 1",
    "OrderBy": "(0|2) ASC",
    "Query": "select id, id, weight_string(id) from `user` order by id asc",
    "ResultColumns": 2,
    "Table": "`user`"
  }
}

# Scatter order by and aggregation: order by column must reference column from select list
"select col, count(*) from user group by col order by c1"
"unsupported: memory sort: order by must reference a column in the select list: c1 asc"
Gen4 error: Expression of SELECT list is not in GROUP BY clause and contains nonaggregated column 'c1' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

# scatter aggregate with ambiguous aliases
"select distinct a, b as a from user"
"generating order by clause: ambiguous symbol reference: a"
{
  "QueryType": "SELECT",
  "Original": "select distinct a, b as a from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|2), (1|4)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b as a, weight_string(a), b, weight_string(b) from `user` where 1 != 1",
        "Query": "select distinct a, b as a, weight_string(a), b, weight_string(b) from `user`",
        "Table": "`user`"
      }
    ]
  }
}
