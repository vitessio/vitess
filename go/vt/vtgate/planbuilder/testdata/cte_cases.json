[
  {
    "comment": "with t as (select count(*) as a from user) select a from t",
    "query": "with t as (select count(*) as a from user) select a from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select count(*) as a from user) select a from t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from `user` where 1 != 1",
            "Query": "select count(*) as a from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select count(*) from a",
    "query": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select count(*) from a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select count(*) from a",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
            "Query": "select count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col from a",
    "query": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col from a",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col from a",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1",
        "Query": "select col from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a",
        "Table": "`user`, user_extra"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col, count(*) from a group by col",
    "query": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col, count(*) from a group by col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with a as (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) select col, count(*) from a group by col",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where 1 != 1) as a where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) from (select `user`.col, user_extra.extra from `user`, user_extra where `user`.id = user_extra.user_id) as a group by col order by col asc",
            "Table": "`user`, user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.col as col, 32 from user join user_extra) select sum(col) from t",
    "query": "with t as (select user.col as col, 32 from user join user_extra) select sum(col) from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.col as col, 32 from user join user_extra) select sum(col) from t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Projection",
            "Expressions": [
              "sum(col) * count(*) as sum(col)"
            ],
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0,R:0",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select sum(col), 32 from (select `user`.col as col, 32 from `user` where 1 != 1) as t where 1 != 1",
                    "Query": "select sum(col), 32 from (select `user`.col as col, 32 from `user`) as t",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*) from user_extra where 1 != 1 group by .0",
                    "Query": "select count(*) from user_extra group by .0",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with x as (select phone, id, city from user where id > 12 limit 10) select count(city) from x",
    "query": "with x as (select phone, id, city from user where id > 12 limit 10) select count(city) from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select phone, id, city from user where id > 12 limit 10) select count(city) from x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(city)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              2
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "10",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.phone, x.id, x.city from (select phone, id, city from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.phone, x.id, x.city from (select phone, id, city from `user` where id > 12) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with x as (select phone, id, city from user where id > 12 limit 10) select count(*) from x",
    "query": "with x as (select phone, id, city from user where id > 12 limit 10) select count(*) from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select phone, id, city from user where id > 12 limit 10) select count(*) from x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              3
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "10",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.phone, x.id, x.city, 1 from (select phone, id, city from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.phone, x.id, x.city, 1 from (select phone, id, city from `user` where id > 12) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with x as (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) select count(col) from x",
    "query": "with x as (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) select count(col) from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) select count(col) from x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(col)",
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "10",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0",
                "JoinVars": {
                  "user_id": 0
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id from `user` where 1 != 1",
                    "Query": "select `user`.id from `user`",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select user_extra.col from user_extra where 1 != 1",
                    "Query": "select user_extra.col from user_extra where user_extra.id = :user_id",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with x as (select id, val1 from user where val2 < 4 order by val1 limit 2) select val1, count(*) from x group by val1",
    "query": "with x as (select id, val1 from user where val2 < 4 order by val1 limit 2) select val1, count(*) from x group by val1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select id, val1 from user where val2 < 4 order by val1 limit 2) select val1, count(*) from x group by val1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1,
              2,
              3
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "2",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.id, x.val1, 1, weight_string(x.val1) from (select id, val1 from `user` where 1 != 1) as x where 1 != 1",
                    "OrderBy": "(1|3) ASC",
                    "Query": "select x.id, x.val1, 1, weight_string(x.val1) from (select id, val1 from `user` where val2 < 4) as x order by `user`.val1 asc limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with s as (select id from user having count(*) = 1) select * from s",
    "query": "with s as (select id from user having count(*) = 1) select * from s",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with s as (select id from user having count(*) = 1) select * from s",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "count(*) = 1",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "any_value(0) AS id, sum_count_star(1) AS count(*)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id, count(*) from `user` where 1 != 1",
                "Query": "select id, count(*) from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with A as (select sum(a) as a, sum(b) as b from user) select A.a, A.b, (A.a / A.b) as d from A",
    "query": "with A as (select sum(a) as a, sum(b) as b from user) select A.a, A.b, (A.a / A.b) as d from A",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with A as (select sum(a) as a, sum(b) as b from user) select A.a, A.b, (A.a / A.b) as d from A",
      "Instructions": {
        "OperatorType": "Projection",
        "Expressions": [
          ":0 as a",
          ":1 as b",
          "A.a / A.b as d"
        ],
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "sum(0) AS a, sum(1) AS b",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select sum(a) as a, sum(b) as b from `user` where 1 != 1",
                "Query": "select sum(a) as a, sum(b) as b from `user`",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t1 as (select portalId, flowId, count(*) as count from user_extra where localDate > :v1 group by user_id, flowId order by null) select t1.portalId, t1.flowId from t1 where count >= :v2",
    "query": "with t1 as (select portalId, flowId, count(*) as count from user_extra where localDate > :v1 group by user_id, flowId order by null) select t1.portalId, t1.flowId from t1 where count >= :v2",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t1 as (select portalId, flowId, count(*) as count from user_extra where localDate > :v1 group by user_id, flowId order by null) select t1.portalId, t1.flowId from t1 where count >= :v2",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as `count` from user_extra where 1 != 1 group by user_id, flowId) as t1 where 1 != 1",
        "Query": "select t1.portalId, t1.flowId from (select portalId, flowId, count(*) as `count` from user_extra where localDate > :v1 group by user_id, flowId) as t1 where `count` >= :v2",
        "Table": "user_extra"
      },
      "TablesUsed": [
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with tt as (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
    "query": "with tt as (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with tt as (SELECT foo, max(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "bazo between 100 and 200",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "max(1|3) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, max(baz) as bazo, weight_string(foo), weight_string(baz) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo), weight_string(baz)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, max(baz) as bazo, weight_string(foo), weight_string(baz) from (select foo, baz from `user`) as f group by foo, weight_string(foo), weight_string(baz) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with tt as (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
    "query": "with tt as (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with tt as (SELECT foo, count(baz) as bazo FROM (SELECT foo, baz FROM user) f GROUP BY foo) SELECT foo FROM tt WHERE bazo BETWEEN 100 AND 200",
      "Instructions": {
        "OperatorType": "Filter",
        "Predicate": "bazo between 100 and 200",
        "ResultColumns": 1,
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count(1) AS bazo",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user` where 1 != 1) as f where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(baz) as bazo, weight_string(foo) from (select foo, baz from `user`) as f group by foo, weight_string(foo) order by foo asc",
                "Table": "`user`"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with d as (select id, count(*) as a from user) select d.a from music join d on music.user_id = d.id group by 1",
    "query": "with d as (select id, count(*) as a from user) select d.a from music join d on music.user_id = d.id group by 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with d as (select id, count(*) as a from user) select d.a from music join d on music.user_id = d.id group by 1",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "JoinVars": {
              "d_id": 1
            },
            "TableName": "`user`_music",
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Ordered",
                "GroupBy": "0, (1|2)",
                "Inputs": [
                  {
                    "OperatorType": "SimpleProjection",
                    "Columns": [
                      1,
                      0,
                      2
                    ],
                    "Inputs": [
                      {
                        "OperatorType": "Aggregate",
                        "Variant": "Scalar",
                        "Aggregates": "any_value(0) AS id, sum_count_star(1) AS a, any_value(2)",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "Scatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select id, count(*) as a, weight_string(id) from `user` where 1 != 1",
                            "OrderBy": "1 ASC, (0|2) ASC",
                            "Query": "select id, count(*) as a, weight_string(id) from `user` order by count(*) asc, id asc",
                            "Table": "`user`"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music where 1 != 1 group by .0",
                "Query": "select 1 from music where music.user_id = :d_id group by .0",
                "Table": "music",
                "Values": [
                  ":d_id"
                ],
                "Vindex": "user_index"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.music",
        "user.user"
      ]
    }
  },
  {
    "comment": "with t as (select col from user union all select col from unsharded) select sum(col) from t",
    "query": "with t as (select col from user union all select col from unsharded) select sum(col) from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select col from user union all select col from unsharded) select sum(col) from t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum(0) AS sum(col)",
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select col from `user` where 1 != 1",
                "Query": "select col from `user`",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select col from unsharded where 1 != 1",
                "Query": "select col from unsharded",
                "Table": "unsharded"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "with x as (select id, val2 from user where val2 is null limit 2) select count(val2), sum(val2) from x",
    "query": "with x as (select id, val2 from user where val2 is null limit 2) select count(val2), sum(val2) from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select id, val2 from user where val2 is null limit 2) select count(val2), sum(val2) from x",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count(0) AS count(val2), sum(1) AS sum(val2)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1,
              1
            ],
            "Inputs": [
              {
                "OperatorType": "Limit",
                "Count": "2",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select x.id, x.val2 from (select id, val2 from `user` where 1 != 1) as x where 1 != 1",
                    "Query": "select x.id, x.val2 from (select id, val2 from `user` where val2 is null) as x limit :__upper_limit",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with X as (select distinct count(*) from user) select distinct count(*) from X",
    "query": "with X as (select distinct count(*) from user) select distinct count(*) from X",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with X as (select distinct count(*) from user) select distinct count(*) from X",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "count_star(0) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "SimpleProjection",
            "Columns": [
              1
            ],
            "Inputs": [
              {
                "OperatorType": "Aggregate",
                "Variant": "Scalar",
                "Aggregates": "sum_count_star(0) AS count(*), any_value(1)",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select count(*), 1 from `user` where 1 != 1",
                    "Query": "select count(*), 1 from `user`",
                    "Table": "`user`"
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t as (select id, col from user where id = 5) select id from t",
    "query": "with t as (select id, col from user where id = 5) select id from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id, col from user where id = 5) select id from t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
    "query": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select id from `user` where id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id from user where user.id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
    "query": "with t as (select user.id from user where user.id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id from user where user.id = 5) select t.id from t join user_extra on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select `user`.id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select `user`.id from `user` where `user`.id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select id from user where id = 5) select t.id from user_extra join t on t.id = user_extra.user_id",
    "query": "with t as (select id from user where id = 5) select t.id from user_extra join t on t.id = user_extra.user_id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id from user where id = 5) select t.id from user_extra join t on t.id = user_extra.user_id",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t, user_extra where 1 != 1",
        "Query": "select t.id from (select id from `user` where id = 5) as t, user_extra where t.id = user_extra.user_id",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.col",
    "query": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.col",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id from user where id = 5) select t.id from t join user_extra on t.id = user_extra.col",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_id": 0
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select t.id from (select id from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select t.id from (select id from `user` where id = 5) as t",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.col = :t_id",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select id, col from route1 where id = 5) select id from  t",
    "query": "with t as (select id, col from route1 where id = 5) select id from  t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id, col from route1 where id = 5) select id from  t",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t as (select id, col from route1) select id from  t where id = 5",
    "query": "with t as (select id, col from route1) select id from  t where id = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id, col from route1) select id from  t where id = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id from (select id, col from `user` as route1 where 1 != 1) as t where 1 != 1",
        "Query": "select id from (select id, col from `user` as route1 where id = 5) as t",
        "Table": "`user`",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t as (select id+col as foo from route1) select id from  t where foo = 5",
    "query": "with t as (select id+col as foo from route1) select id from  t where foo = 5",
    "plan": "column 'id' not found in table 't'"
  },
  {
    "comment": "with t as (select id, textcol1 as baz from route1), s as (select id, textcol1+textcol1 as baz from user) select t.id from t join s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
    "query": "with t as (select id, textcol1 as baz from route1), s as (select id, textcol1+textcol1 as baz from user) select t.id from t join s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select id, textcol1 as baz from route1), s as (select id, textcol1+textcol1 as baz from user) select t.id from t join s ON t.id = s.id WHERE t.baz = '3' AND s.baz = '3'",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select t.id from (select id, textcol1 as baz from `user` as route1 where 1 != 1) as t, (select id, textcol1 + textcol1 as baz from `user` where 1 != 1) as s where 1 != 1",
        "Query": "select t.id from (select id, textcol1 as baz from `user` as route1 where textcol1 = '3') as t, (select id, textcol1 + textcol1 as baz from `user` where textcol1 + textcol1 = '3') as s where t.id = s.id",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with u as (select colA+colB as foo from user), t as (select foo+4 as bar from u) select bar from t where bar = 5",
    "query": "with u as (select colA+colB as foo from user), t as (select foo+4 as bar from u) select bar from t where bar = 5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u as (select colA+colB as foo from user), t as (select foo+4 as bar from u) select bar from t where bar = 5",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where 1 != 1) as u where 1 != 1) as t where 1 != 1",
        "Query": "select bar from (select foo + 4 as bar from (select colA + colB as foo from `user` where colA + colB + 4 = 5) as u) as t",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with u as (select col from user where id = 5), e as (select col from user_extra where user_id = 5) select u.col, e.col from u join e",
    "query": "with u as (select col from user where id = 5), e as (select col from user_extra where user_id = 5) select u.col, e.col from u join e",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u as (select col from user where id = 5), e as (select col from user_extra where user_id = 5) select u.col, e.col from u join e",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select u.col, e.col from (select col from `user` where 1 != 1) as u, (select col from user_extra where 1 != 1) as e where 1 != 1",
        "Query": "select u.col, e.col from (select col from `user` where id = 5) as u, (select col from user_extra where user_id = 5) as e",
        "Table": "`user`, user_extra",
        "Values": [
          "5"
        ],
        "Vindex": "user_index"
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
    "query": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from t join unsharded on unsharded.col1 = t.col1 and unsharded.id = t.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_col1": 0,
          "t_id": 1
        },
        "TableName": "`user`_user_extra_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1, t.id from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1, t.id from (select `user`.id, `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded where unsharded.id = :t_id and unsharded.col1 = :t_col1",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) select t.id from t",
    "query": "with t as (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) select t.id from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col1 from user join user_extra on user_extra.col = user.col) select t.id from t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "user_col": 1
        },
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select t.id, t.`user.col` from (select `user`.id, `user`.col1, `user`.col as `user.col` from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select t.id, t.`user.col` from (select `user`.id, `user`.col1, `user`.col as `user.col` from `user`) as t",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra where user_extra.col = :user_col",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t",
    "query": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "TableName": "unsharded_a_`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded_a as ua where 1 != 1",
            "Query": "select 1 from unsharded_a as ua",
            "Table": "unsharded_a"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1 from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1 from (select `user`.id, `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t on t.id = ua.id",
    "query": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t on t.id = ua.id",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col1 from user join user_extra) select t.col1 from unsharded_a ua join t on t.id = ua.id",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0",
        "JoinVars": {
          "ua_id": 0
        },
        "TableName": "unsharded_a_`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select ua.id from unsharded_a as ua where 1 != 1",
            "Query": "select ua.id from unsharded_a as ua",
            "Table": "unsharded_a"
          },
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select t.col1 from (select `user`.id, `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select t.col1 from (select `user`.id, `user`.col1 from `user` where `user`.id = :ua_id) as t",
                "Table": "`user`",
                "Values": [
                  ":ua_id"
                ],
                "Vindex": "user_index"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded_a",
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id from user join user_extra) select id, t.id from  t",
    "query": "with t as (select user.id from user join user_extra) select id, t.id from  t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id from user join user_extra) select id, t.id from  t",
      "Instructions": {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0,
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select id from (select `user`.id from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select id from (select `user`.id from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select count(*) as a from user) select a as k from t",
    "query": "with t as (select count(*) as a from user) select a as k from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select count(*) as a from user) select a as k from t",
      "Instructions": {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from `user` where 1 != 1",
            "Query": "select count(*) as a from `user`",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with u as (select * from unsharded) select u.* from u",
    "query": "with u as (select * from unsharded) select u.* from u",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u as (select * from unsharded) select u.* from u",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "with u as (select * from unsharded where 1 != 1) select u.* from u where 1 != 1",
        "Query": "with u as (select * from unsharded) select u.* from u",
        "Table": "unsharded"
      },
      "TablesUsed": [
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col from user join user_extra) select id from t where id=5",
    "query": "with t as (select user.id, user.col from user join user_extra) select id from t where id=5",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col from user join user_extra) select id from t where id=5",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "EqualUnique",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id from (select `user`.id, `user`.col from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select id from (select `user`.id, `user`.col from `user` where `user`.id = 5) as t",
            "Table": "`user`",
            "Values": [
              "5"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select user.id, user.col from user join user_extra) select id+1 from t",
    "query": "with t as (select user.id, user.col from user join user_extra) select id+1 from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select user.id, user.col from user join user_extra) select id+1 from t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id + 1 from (select `user`.id, `user`.col from `user` where 1 != 1) as t where 1 != 1",
            "Query": "select id + 1 from (select `user`.id, `user`.col from `user`) as t",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with u(a,n) as (select id as b, name from user) select u.a from u where u.n = 1",
    "query": "with u(a,n) as (select id as b, name from user) select u.a from u where u.n = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u(a,n) as (select id as b, name from user) select u.a from u where u.n = 1",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "1"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a from (select id as b, `name` from `user` where 1 != 1) as u(a, n) where 1 != 1",
            "Query": "select u.a from (select id as b, `name` from `user` where `name` = 1) as u(a, n)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with u(a, n) as (select id as b, name from user where b = 1) select u.a from u where u.n = 1",
    "query": "with u(a, n) as (select id as b, name from user where b = 1) select u.a from u where u.n = 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u(a, n) as (select id as b, name from user where b = 1) select u.a from u where u.n = 1",
      "Instructions": {
        "OperatorType": "VindexLookup",
        "Variant": "Equal",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "Values": [
          "1"
        ],
        "Vindex": "name_user_map",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "IN",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select `name`, keyspace_id from name_user_vdx where 1 != 1",
            "Query": "select `name`, keyspace_id from name_user_vdx where `name` in ::__vals",
            "Table": "name_user_vdx",
            "Values": [
              "::name"
            ],
            "Vindex": "user_index"
          },
          {
            "OperatorType": "Route",
            "Variant": "ByDestination",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a from (select id as b, `name` from `user` where 1 != 1) as u(a, n) where 1 != 1",
            "Query": "select u.a from (select id as b, `name` from `user` where b = 1 and `name` = 1) as u(a, n)",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with t(i) as (select user.id from user join user_extra) select i+1 from t",
    "query": "with t(i) as (select user.id from user join user_extra) select i+1 from t",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t(i) as (select user.id from user join user_extra) select i+1 from t",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "TableName": "`user`_user_extra",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select i + 1 from (select `user`.id from `user` where 1 != 1) as t(i) where 1 != 1",
            "Query": "select i + 1 from (select `user`.id from `user`) as t(i)",
            "Table": "`user`"
          },
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select 1 from user_extra where 1 != 1",
            "Query": "select 1 from user_extra",
            "Table": "user_extra"
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "with t as (select `user`.col1 from `user` join unsharded) select 0 from t join unsharded on unsharded.col1 = t.col1 and unsharded.a = t.col1",
    "query": "with t as (select `user`.col1 from `user` join unsharded) select 0 from t join unsharded on unsharded.col1 = t.col1 and unsharded.a = t.col1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with t as (select `user`.col1 from `user` join unsharded) select 0 from t join unsharded on unsharded.col1 = t.col1 and unsharded.a = t.col1",
      "Instructions": {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0",
        "JoinVars": {
          "t_col1": 1
        },
        "TableName": "`user`_unsharded_unsharded",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_unsharded",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 0, t.col1 from (select `user`.col1 from `user` where 1 != 1) as t where 1 != 1",
                "Query": "select 0, t.col1 from (select `user`.col1 from `user`) as t",
                "Table": "`user`"
              },
              {
                "OperatorType": "Route",
                "Variant": "Unsharded",
                "Keyspace": {
                  "Name": "main",
                  "Sharded": false
                },
                "FieldQuery": "select 1 from unsharded where 1 != 1",
                "Query": "select 1 from unsharded",
                "Table": "unsharded"
              }
            ]
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select 1 from unsharded where 1 != 1",
            "Query": "select 1 from unsharded where unsharded.a = :t_col1 and unsharded.col1 = :t_col1",
            "Table": "unsharded"
          }
        ]
      },
      "TablesUsed": [
        "main.unsharded",
        "user.user"
      ]
    }
  },
  {
    "comment": "with x(id2) as (select id from user) select id2 from x",
    "query": "with x(id2) as (select id from user) select id2 from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x(id2) as (select id from user) select id2 from x",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id2 from (select id from `user` where 1 != 1) as x(id2) where 1 != 1",
        "Query": "select id2 from (select id from `user`) as x(id2)",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "with u as (select col from unsharded join unsharded_b) select col from u join unsharded_a ua limit 1",
    "query": "with u as (select col from unsharded join unsharded_b) select col from u join unsharded_a ua limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u as (select col from unsharded join unsharded_b) select col from u join unsharded_a ua limit 1",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "with u as (select col from unsharded join unsharded_b where 1 != 1) select col from u join unsharded_a as ua where 1 != 1",
        "Query": "with u as (select col from unsharded join unsharded_b) select col from u join unsharded_a as ua limit 1",
        "Table": "unsharded, unsharded_a, unsharded_b"
      },
      "TablesUsed": [
        "main.unsharded",
        "main.unsharded_a",
        "main.unsharded_b"
      ]
    }
  },
  {
    "comment": "with u as (select user.col from user join user_extra) select u.col from u join user_extra ue limit 1",
    "query": "with u as (select user.col from user join user_extra) select u.col from u join user_extra ue limit 1",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with u as (select user.col from user join user_extra) select u.col from u join user_extra ue limit 1",
      "Instructions": {
        "OperatorType": "Limit",
        "Count": "1",
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0",
            "TableName": "`user`_user_extra_user_extra",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "L:0",
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.col from (select `user`.col from `user` where 1 != 1) as u where 1 != 1",
                    "Query": "select u.col from (select `user`.col from `user`) as u",
                    "Table": "`user`"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "Scatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select 1 from user_extra where 1 != 1",
                    "Query": "select 1 from user_extra",
                    "Table": "user_extra"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "Scatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra as ue where 1 != 1",
                "Query": "select 1 from user_extra as ue",
                "Table": "user_extra"
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user",
        "user.user_extra"
      ]
    }
  },
  {
    "comment": "simple WITH query",
    "query": "with x as (select * from user) select * from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select * from user) select * from x",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Scatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from (select * from `user` where 1 != 1) as x where 1 != 1",
        "Query": "select * from (select * from `user`) as x",
        "Table": "`user`"
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "UNION with WITH clause",
    "query": "with x as (select id, foo from user) select * from x union select * from x",
    "plan": {
      "QueryType": "SELECT",
      "Original": "with x as (select id, foo from user) select * from x union select * from x",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "(0:2)",
          "(1:3)"
        ],
        "ResultColumns": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Scatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select dt.id, dt.foo, weight_string(dt.id), weight_string(dt.foo) from (select id, foo from (select id, foo from `user` where 1 != 1) as x where 1 != 1 union select id, foo from (select id, foo from `user` where 1 != 1) as x where 1 != 1) as dt where 1 != 1",
            "Query": "select dt.id, dt.foo, weight_string(dt.id), weight_string(dt.foo) from (select id, foo from (select id, foo from `user`) as x union select id, foo from (select id, foo from `user`) as x) as dt",
            "Table": "`user`"
          }
        ]
      },
      "TablesUsed": [
        "user.user"
      ]
    }
  },
  {
    "comment": "recursive WITH against an unsharded database",
    "query": "WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 5 ) SELECT cte.n FROM unsharded join cte on unsharded.id = cte.n ",
    "plan": {
      "QueryType": "SELECT",
      "Original": "WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 5 ) SELECT cte.n FROM unsharded join cte on unsharded.id = cte.n ",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "with recursive cte(n) as (select 1 from dual where 1 != 1 union all select n + 1 from cte where 1 != 1) select cte.n from unsharded join cte on unsharded.id = cte.n where 1 != 1",
        "Query": "with recursive cte(n) as (select 1 from dual union all select n + 1 from cte where n < 5) select cte.n from unsharded join cte on unsharded.id = cte.n",
        "Table": "dual, unsharded"
      },
      "TablesUsed": [
        "main.dual",
        "main.unsharded"
      ]
    }
  },
  {
    "comment": "WITH two common expressions against an unsharded datbase and a SELECT UNION against those expressions",
    "query": "WITH `count_a` AS (SELECT COUNT(`id`) AS `num` FROM `unsharded_a`), `count_b` AS (SELECT COUNT(`id`) AS `num` FROM `unsharded_b`) SELECT 'count_a' AS `tab`, `num` FROM `count_a` UNION SELECT 'count_b' AS `tab`, `num` FROM `count_b`",
    "plan": {
      "QueryType": "SELECT",
      "Original": "WITH `count_a` AS (SELECT COUNT(`id`) AS `num` FROM `unsharded_a`), `count_b` AS (SELECT COUNT(`id`) AS `num` FROM `unsharded_b`) SELECT 'count_a' AS `tab`, `num` FROM `count_a` UNION SELECT 'count_b' AS `tab`, `num` FROM `count_b`",
      "Instructions": {
        "OperatorType": "Route",
        "Variant": "Unsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select 'count_a' as tab, num from count_a where 1 != 1 union select 'count_b' as tab, num from count_b where 1 != 1",
        "Query": "with count_a as (select count(id) as num from unsharded_a) , count_b as (select count(id) as num from unsharded_b) select 'count_a' as tab, num from count_a union select 'count_b' as tab, num from count_b",
        "Table": "unsharded_a, unsharded_b"
      },
      "TablesUsed": [
        "main.unsharded_a",
        "main.unsharded_b"
      ]
    }
  },
  {
    "comment": "WITH two common expressions against a sharded datbase and a SELECT UNION against those expressions",
    "query": "WITH `count_a` AS (SELECT COUNT(`user_id`) AS `num` FROM `user_metadata`), `count_b` AS (SELECT COUNT(`user_id`) AS `num` FROM `user_extra`) SELECT 'count_a' AS `tab`, `num` FROM `count_a` UNION SELECT 'count_b' AS `tab`, `num` FROM `count_b`",
    "plan": {
      "QueryType": "SELECT",
      "Original": "WITH `count_a` AS (SELECT COUNT(`user_id`) AS `num` FROM `user_metadata`), `count_b` AS (SELECT COUNT(`user_id`) AS `num` FROM `user_extra`) SELECT 'count_a' AS `tab`, `num` FROM `count_a` UNION SELECT 'count_b' AS `tab`, `num` FROM `count_b`",
      "Instructions": {
        "OperatorType": "Distinct",
        "Collations": [
          "0: utf8mb4_0900_ai_ci",
          "1"
        ],
        "Inputs": [
          {
            "OperatorType": "Concatenate",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "'count_a' as tab",
                  ":0 as num"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Scalar",
                    "Aggregates": "sum_count(0) AS num",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(user_id) as num from user_metadata where 1 != 1",
                        "Query": "select count(user_id) as num from user_metadata",
                        "Table": "user_metadata"
                      }
                    ]
                  }
                ]
              },
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "'count_b' as tab",
                  ":0 as num"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Aggregate",
                    "Variant": "Scalar",
                    "Aggregates": "sum_count(0) AS num",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "Scatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select count(user_id) as num from user_extra where 1 != 1",
                        "Query": "select count(user_id) as num from user_extra",
                        "Table": "user_extra"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "TablesUsed": [
        "user.user_extra",
        "user.user_metadata"
      ]
    }
  }
]
