/*
Copyright 2022 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package semantics

import (
	"strings"

	"vitess.io/vitess/go/mysql/collations"
	"vitess.io/vitess/go/vt/key"
	"vitess.io/vitess/go/vt/proto/query"
	topodatapb "vitess.io/vitess/go/vt/proto/topodata"
	"vitess.io/vitess/go/vt/servenv"
	"vitess.io/vitess/go/vt/sqlparser"
	"vitess.io/vitess/go/vt/vtgate/vindexes"
)

func createCol(name string, typ int) vindexes.Column {
	return vindexes.Column{Name: sqlparser.NewIdentifierCI(name), Type: query.Type(typ)}
}

// getInfoSchema57 returns a map of all information_schema tables and their columns with types
// To recreate this information from MySQL, you can run the test in info_schema_gen_test.go
func getInfoSchema57() map[string][]vindexes.Column {
	infSchema := map[string][]vindexes.Column{}
	var cols []vindexes.Column
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_COLLATE_NAME", 6165))
	cols = append(cols, createCol("DESCRIPTION", 6165))
	cols = append(cols, createCol("MAXLEN", 265))
	infSchema["CHARACTER_SETS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	infSchema["COLLATION_CHARACTER_SET_APPLICABILITY"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("ID", 265))
	cols = append(cols, createCol("IS_DEFAULT", 6165))
	cols = append(cols, createCol("IS_COMPILED", 6165))
	cols = append(cols, createCol("SORTLEN", 265))
	infSchema["COLLATIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["COLUMN_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 265))
	cols = append(cols, createCol("COLUMN_DEFAULT", 6163))
	cols = append(cols, createCol("IS_NULLABLE", 6165))
	cols = append(cols, createCol("DATA_TYPE", 6165))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 265))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 265))
	cols = append(cols, createCol("NUMERIC_PRECISION", 265))
	cols = append(cols, createCol("NUMERIC_SCALE", 265))
	cols = append(cols, createCol("DATETIME_PRECISION", 265))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("COLUMN_TYPE", 6163))
	cols = append(cols, createCol("COLUMN_KEY", 6165))
	cols = append(cols, createCol("EXTRA", 6165))
	cols = append(cols, createCol("PRIVILEGES", 6165))
	cols = append(cols, createCol("COLUMN_COMMENT", 6165))
	cols = append(cols, createCol("GENERATION_EXPRESSION", 6163))
	infSchema["COLUMNS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("SUPPORT", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	cols = append(cols, createCol("TRANSACTIONS", 6165))
	cols = append(cols, createCol("XA", 6165))
	cols = append(cols, createCol("SAVEPOINTS", 6165))
	infSchema["ENGINES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("EVENT_CATALOG", 6165))
	cols = append(cols, createCol("EVENT_SCHEMA", 6165))
	cols = append(cols, createCol("EVENT_NAME", 6165))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("TIME_ZONE", 6165))
	cols = append(cols, createCol("EVENT_BODY", 6165))
	cols = append(cols, createCol("EVENT_DEFINITION", 6163))
	cols = append(cols, createCol("EVENT_TYPE", 6165))
	cols = append(cols, createCol("EXECUTE_AT", 2064))
	cols = append(cols, createCol("INTERVAL_VALUE", 6165))
	cols = append(cols, createCol("INTERVAL_FIELD", 6165))
	cols = append(cols, createCol("SQL_MODE", 6165))
	cols = append(cols, createCol("STARTS", 2064))
	cols = append(cols, createCol("ENDS", 2064))
	cols = append(cols, createCol("STATUS", 6165))
	cols = append(cols, createCol("ON_COMPLETION", 6165))
	cols = append(cols, createCol("CREATED", 2064))
	cols = append(cols, createCol("LAST_ALTERED", 2064))
	cols = append(cols, createCol("LAST_EXECUTED", 2064))
	cols = append(cols, createCol("EVENT_COMMENT", 6165))
	cols = append(cols, createCol("ORIGINATOR", 265))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["EVENTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("FILE_ID", 265))
	cols = append(cols, createCol("FILE_NAME", 6165))
	cols = append(cols, createCol("FILE_TYPE", 6165))
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("LOGFILE_GROUP_NAME", 6165))
	cols = append(cols, createCol("LOGFILE_GROUP_NUMBER", 265))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("FULLTEXT_KEYS", 6165))
	cols = append(cols, createCol("DELETED_ROWS", 265))
	cols = append(cols, createCol("UPDATE_COUNT", 265))
	cols = append(cols, createCol("FREE_EXTENTS", 265))
	cols = append(cols, createCol("TOTAL_EXTENTS", 265))
	cols = append(cols, createCol("EXTENT_SIZE", 265))
	cols = append(cols, createCol("INITIAL_SIZE", 265))
	cols = append(cols, createCol("MAXIMUM_SIZE", 265))
	cols = append(cols, createCol("AUTOEXTEND_SIZE", 265))
	cols = append(cols, createCol("CREATION_TIME", 2064))
	cols = append(cols, createCol("LAST_UPDATE_TIME", 2064))
	cols = append(cols, createCol("LAST_ACCESS_TIME", 2064))
	cols = append(cols, createCol("RECOVER_TIME", 265))
	cols = append(cols, createCol("TRANSACTION_COUNTER", 265))
	cols = append(cols, createCol("VERSION", 265))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("TABLE_ROWS", 265))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 265))
	cols = append(cols, createCol("DATA_LENGTH", 265))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 265))
	cols = append(cols, createCol("INDEX_LENGTH", 265))
	cols = append(cols, createCol("DATA_FREE", 265))
	cols = append(cols, createCol("CREATE_TIME", 2064))
	cols = append(cols, createCol("UPDATE_TIME", 2064))
	cols = append(cols, createCol("CHECK_TIME", 2064))
	cols = append(cols, createCol("CHECKSUM", 265))
	cols = append(cols, createCol("STATUS", 6165))
	cols = append(cols, createCol("EXTRA", 6165))
	infSchema["FILES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("VARIABLE_NAME", 6165))
	cols = append(cols, createCol("VARIABLE_VALUE", 6165))
	infSchema["GLOBAL_STATUS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("VARIABLE_NAME", 6165))
	cols = append(cols, createCol("VARIABLE_VALUE", 6165))
	infSchema["GLOBAL_VARIABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 265))
	cols = append(cols, createCol("BLOCK_ID", 265))
	cols = append(cols, createCol("SPACE", 265))
	cols = append(cols, createCol("PAGE_NUMBER", 265))
	cols = append(cols, createCol("PAGE_TYPE", 6165))
	cols = append(cols, createCol("FLUSH_TYPE", 265))
	cols = append(cols, createCol("FIX_COUNT", 265))
	cols = append(cols, createCol("IS_HASHED", 6165))
	cols = append(cols, createCol("NEWEST_MODIFICATION", 265))
	cols = append(cols, createCol("OLDEST_MODIFICATION", 265))
	cols = append(cols, createCol("ACCESS_TIME", 265))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("NUMBER_RECORDS", 265))
	cols = append(cols, createCol("DATA_SIZE", 265))
	cols = append(cols, createCol("COMPRESSED_SIZE", 265))
	cols = append(cols, createCol("PAGE_STATE", 6165))
	cols = append(cols, createCol("IO_FIX", 6165))
	cols = append(cols, createCol("IS_OLD", 6165))
	cols = append(cols, createCol("FREE_PAGE_CLOCK", 265))
	infSchema["INNODB_BUFFER_PAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 265))
	cols = append(cols, createCol("LRU_POSITION", 265))
	cols = append(cols, createCol("SPACE", 265))
	cols = append(cols, createCol("PAGE_NUMBER", 265))
	cols = append(cols, createCol("PAGE_TYPE", 6165))
	cols = append(cols, createCol("FLUSH_TYPE", 265))
	cols = append(cols, createCol("FIX_COUNT", 265))
	cols = append(cols, createCol("IS_HASHED", 6165))
	cols = append(cols, createCol("NEWEST_MODIFICATION", 265))
	cols = append(cols, createCol("OLDEST_MODIFICATION", 265))
	cols = append(cols, createCol("ACCESS_TIME", 265))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("NUMBER_RECORDS", 265))
	cols = append(cols, createCol("DATA_SIZE", 265))
	cols = append(cols, createCol("COMPRESSED_SIZE", 265))
	cols = append(cols, createCol("COMPRESSED", 6165))
	cols = append(cols, createCol("IO_FIX", 6165))
	cols = append(cols, createCol("IS_OLD", 6165))
	cols = append(cols, createCol("FREE_PAGE_CLOCK", 265))
	infSchema["INNODB_BUFFER_PAGE_LRU"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 265))
	cols = append(cols, createCol("POOL_SIZE", 265))
	cols = append(cols, createCol("FREE_BUFFERS", 265))
	cols = append(cols, createCol("DATABASE_PAGES", 265))
	cols = append(cols, createCol("OLD_DATABASE_PAGES", 265))
	cols = append(cols, createCol("MODIFIED_DATABASE_PAGES", 265))
	cols = append(cols, createCol("PENDING_DECOMPRESS", 265))
	cols = append(cols, createCol("PENDING_READS", 265))
	cols = append(cols, createCol("PENDING_FLUSH_LRU", 265))
	cols = append(cols, createCol("PENDING_FLUSH_LIST", 265))
	cols = append(cols, createCol("PAGES_MADE_YOUNG", 265))
	cols = append(cols, createCol("PAGES_NOT_MADE_YOUNG", 265))
	cols = append(cols, createCol("PAGES_MADE_YOUNG_RATE", 1036))
	cols = append(cols, createCol("PAGES_MADE_NOT_YOUNG_RATE", 1036))
	cols = append(cols, createCol("NUMBER_PAGES_READ", 265))
	cols = append(cols, createCol("NUMBER_PAGES_CREATED", 265))
	cols = append(cols, createCol("NUMBER_PAGES_WRITTEN", 265))
	cols = append(cols, createCol("PAGES_READ_RATE", 1036))
	cols = append(cols, createCol("PAGES_CREATE_RATE", 1036))
	cols = append(cols, createCol("PAGES_WRITTEN_RATE", 1036))
	cols = append(cols, createCol("NUMBER_PAGES_GET", 265))
	cols = append(cols, createCol("HIT_RATE", 265))
	cols = append(cols, createCol("YOUNG_MAKE_PER_THOUSAND_GETS", 265))
	cols = append(cols, createCol("NOT_YOUNG_MAKE_PER_THOUSAND_GETS", 265))
	cols = append(cols, createCol("NUMBER_PAGES_READ_AHEAD", 265))
	cols = append(cols, createCol("NUMBER_READ_AHEAD_EVICTED", 265))
	cols = append(cols, createCol("READ_AHEAD_RATE", 1036))
	cols = append(cols, createCol("READ_AHEAD_EVICTED_RATE", 1036))
	cols = append(cols, createCol("LRU_IO_TOTAL", 265))
	cols = append(cols, createCol("LRU_IO_CURRENT", 265))
	cols = append(cols, createCol("UNCOMPRESS_TOTAL", 265))
	cols = append(cols, createCol("UNCOMPRESS_CURRENT", 265))
	infSchema["INNODB_BUFFER_POOL_STATS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("database_name", 6165))
	cols = append(cols, createCol("table_name", 6165))
	cols = append(cols, createCol("index_name", 6165))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_PER_INDEX"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("database_name", 6165))
	cols = append(cols, createCol("table_name", 6165))
	cols = append(cols, createCol("index_name", 6165))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_PER_INDEX_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("buffer_pool_instance", 263))
	cols = append(cols, createCol("pages_used", 263))
	cols = append(cols, createCol("pages_free", 263))
	cols = append(cols, createCol("relocation_ops", 265))
	cols = append(cols, createCol("relocation_time", 263))
	infSchema["INNODB_CMPMEM"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("buffer_pool_instance", 263))
	cols = append(cols, createCol("pages_used", 263))
	cols = append(cols, createCol("pages_free", 263))
	cols = append(cols, createCol("relocation_ops", 265))
	cols = append(cols, createCol("relocation_time", 263))
	infSchema["INNODB_CMPMEM_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("DOC_ID", 265))
	infSchema["INNODB_FT_BEING_DELETED"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("KEY", 6165))
	cols = append(cols, createCol("VALUE", 6165))
	infSchema["INNODB_FT_CONFIG"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("value", 6165))
	infSchema["INNODB_FT_DEFAULT_STOPWORD"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("DOC_ID", 265))
	infSchema["INNODB_FT_DELETED"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("WORD", 6165))
	cols = append(cols, createCol("FIRST_DOC_ID", 265))
	cols = append(cols, createCol("LAST_DOC_ID", 265))
	cols = append(cols, createCol("DOC_COUNT", 265))
	cols = append(cols, createCol("DOC_ID", 265))
	cols = append(cols, createCol("POSITION", 265))
	infSchema["INNODB_FT_INDEX_CACHE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("WORD", 6165))
	cols = append(cols, createCol("FIRST_DOC_ID", 265))
	cols = append(cols, createCol("LAST_DOC_ID", 265))
	cols = append(cols, createCol("DOC_COUNT", 265))
	cols = append(cols, createCol("DOC_ID", 265))
	cols = append(cols, createCol("POSITION", 265))
	infSchema["INNODB_FT_INDEX_TABLE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("requesting_trx_id", 6165))
	cols = append(cols, createCol("requested_lock_id", 6165))
	cols = append(cols, createCol("blocking_trx_id", 6165))
	cols = append(cols, createCol("blocking_lock_id", 6165))
	infSchema["INNODB_LOCK_WAITS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("lock_id", 6165))
	cols = append(cols, createCol("lock_trx_id", 6165))
	cols = append(cols, createCol("lock_mode", 6165))
	cols = append(cols, createCol("lock_type", 6165))
	cols = append(cols, createCol("lock_table", 6165))
	cols = append(cols, createCol("lock_index", 6165))
	cols = append(cols, createCol("lock_space", 265))
	cols = append(cols, createCol("lock_page", 265))
	cols = append(cols, createCol("lock_rec", 265))
	cols = append(cols, createCol("lock_data", 6165))
	infSchema["INNODB_LOCKS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("SUBSYSTEM", 6165))
	cols = append(cols, createCol("COUNT", 265))
	cols = append(cols, createCol("MAX_COUNT", 265))
	cols = append(cols, createCol("MIN_COUNT", 265))
	cols = append(cols, createCol("AVG_COUNT", 1036))
	cols = append(cols, createCol("COUNT_RESET", 265))
	cols = append(cols, createCol("MAX_COUNT_RESET", 265))
	cols = append(cols, createCol("MIN_COUNT_RESET", 265))
	cols = append(cols, createCol("AVG_COUNT_RESET", 1036))
	cols = append(cols, createCol("TIME_ENABLED", 2064))
	cols = append(cols, createCol("TIME_DISABLED", 2064))
	cols = append(cols, createCol("TIME_ELAPSED", 265))
	cols = append(cols, createCol("TIME_RESET", 2064))
	cols = append(cols, createCol("STATUS", 6165))
	cols = append(cols, createCol("TYPE", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	infSchema["INNODB_METRICS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("POS", 265))
	cols = append(cols, createCol("MTYPE", 263))
	cols = append(cols, createCol("PRTYPE", 263))
	cols = append(cols, createCol("LEN", 263))
	infSchema["INNODB_SYS_COLUMNS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("PATH", 6165))
	infSchema["INNODB_SYS_DATAFILES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("INDEX_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("POS", 263))
	infSchema["INNODB_SYS_FIELDS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 6165))
	cols = append(cols, createCol("FOR_NAME", 6165))
	cols = append(cols, createCol("REF_NAME", 6165))
	cols = append(cols, createCol("N_COLS", 263))
	cols = append(cols, createCol("TYPE", 263))
	infSchema["INNODB_SYS_FOREIGN"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 6165))
	cols = append(cols, createCol("FOR_COL_NAME", 6165))
	cols = append(cols, createCol("REF_COL_NAME", 6165))
	cols = append(cols, createCol("POS", 263))
	infSchema["INNODB_SYS_FOREIGN_COLS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("INDEX_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("TYPE", 263))
	cols = append(cols, createCol("N_FIELDS", 263))
	cols = append(cols, createCol("PAGE_NO", 263))
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("MERGE_THRESHOLD", 263))
	infSchema["INNODB_SYS_INDEXES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("FLAG", 263))
	cols = append(cols, createCol("N_COLS", 263))
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("FILE_FORMAT", 6165))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("ZIP_PAGE_SIZE", 263))
	cols = append(cols, createCol("SPACE_TYPE", 6165))
	infSchema["INNODB_SYS_TABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("FLAG", 263))
	cols = append(cols, createCol("FILE_FORMAT", 6165))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("PAGE_SIZE", 263))
	cols = append(cols, createCol("ZIP_PAGE_SIZE", 263))
	cols = append(cols, createCol("SPACE_TYPE", 6165))
	cols = append(cols, createCol("FS_BLOCK_SIZE", 263))
	cols = append(cols, createCol("FILE_SIZE", 265))
	cols = append(cols, createCol("ALLOCATED_SIZE", 265))
	infSchema["INNODB_SYS_TABLESPACES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("STATS_INITIALIZED", 6165))
	cols = append(cols, createCol("NUM_ROWS", 265))
	cols = append(cols, createCol("CLUST_INDEX_SIZE", 265))
	cols = append(cols, createCol("OTHER_INDEX_SIZE", 265))
	cols = append(cols, createCol("MODIFIED_COUNTER", 265))
	cols = append(cols, createCol("AUTOINC", 265))
	cols = append(cols, createCol("REF_COUNT", 263))
	infSchema["INNODB_SYS_TABLESTATS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("POS", 263))
	cols = append(cols, createCol("BASE_POS", 263))
	infSchema["INNODB_SYS_VIRTUAL"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 265))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("N_COLS", 263))
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("PER_TABLE_TABLESPACE", 6165))
	cols = append(cols, createCol("IS_COMPRESSED", 6165))
	infSchema["INNODB_TEMP_TABLE_INFO"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("trx_id", 6165))
	cols = append(cols, createCol("trx_state", 6165))
	cols = append(cols, createCol("trx_started", 2064))
	cols = append(cols, createCol("trx_requested_lock_id", 6165))
	cols = append(cols, createCol("trx_wait_started", 2064))
	cols = append(cols, createCol("trx_weight", 265))
	cols = append(cols, createCol("trx_mysql_thread_id", 265))
	cols = append(cols, createCol("trx_query", 6165))
	cols = append(cols, createCol("trx_operation_state", 6165))
	cols = append(cols, createCol("trx_tables_in_use", 265))
	cols = append(cols, createCol("trx_tables_locked", 265))
	cols = append(cols, createCol("trx_lock_structs", 265))
	cols = append(cols, createCol("trx_lock_memory_bytes", 265))
	cols = append(cols, createCol("trx_rows_locked", 265))
	cols = append(cols, createCol("trx_rows_modified", 265))
	cols = append(cols, createCol("trx_concurrency_tickets", 265))
	cols = append(cols, createCol("trx_isolation_level", 6165))
	cols = append(cols, createCol("trx_unique_checks", 263))
	cols = append(cols, createCol("trx_foreign_key_checks", 263))
	cols = append(cols, createCol("trx_last_foreign_key_error", 6165))
	cols = append(cols, createCol("trx_adaptive_hash_latched", 263))
	cols = append(cols, createCol("trx_adaptive_hash_timeout", 265))
	cols = append(cols, createCol("trx_is_read_only", 263))
	cols = append(cols, createCol("trx_autocommit_non_locking", 263))
	infSchema["INNODB_TRX"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 265))
	cols = append(cols, createCol("POSITION_IN_UNIQUE_CONSTRAINT", 265))
	cols = append(cols, createCol("REFERENCED_TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("REFERENCED_TABLE_NAME", 6165))
	cols = append(cols, createCol("REFERENCED_COLUMN_NAME", 6165))
	infSchema["KEY_COLUMN_USAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("QUERY", 6163))
	cols = append(cols, createCol("TRACE", 6163))
	cols = append(cols, createCol("MISSING_BYTES_BEYOND_MAX_MEM_SIZE", 263))
	cols = append(cols, createCol("INSUFFICIENT_PRIVILEGES", 257))
	infSchema["OPTIMIZER_TRACE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPECIFIC_CATALOG", 6165))
	cols = append(cols, createCol("SPECIFIC_SCHEMA", 6165))
	cols = append(cols, createCol("SPECIFIC_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 263))
	cols = append(cols, createCol("PARAMETER_MODE", 6165))
	cols = append(cols, createCol("PARAMETER_NAME", 6165))
	cols = append(cols, createCol("DATA_TYPE", 6165))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 263))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 263))
	cols = append(cols, createCol("NUMERIC_PRECISION", 265))
	cols = append(cols, createCol("NUMERIC_SCALE", 263))
	cols = append(cols, createCol("DATETIME_PRECISION", 265))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("DTD_IDENTIFIER", 6163))
	cols = append(cols, createCol("ROUTINE_TYPE", 6165))
	infSchema["PARAMETERS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("PARTITION_NAME", 6165))
	cols = append(cols, createCol("SUBPARTITION_NAME", 6165))
	cols = append(cols, createCol("PARTITION_ORDINAL_POSITION", 265))
	cols = append(cols, createCol("SUBPARTITION_ORDINAL_POSITION", 265))
	cols = append(cols, createCol("PARTITION_METHOD", 6165))
	cols = append(cols, createCol("SUBPARTITION_METHOD", 6165))
	cols = append(cols, createCol("PARTITION_EXPRESSION", 6163))
	cols = append(cols, createCol("SUBPARTITION_EXPRESSION", 6163))
	cols = append(cols, createCol("PARTITION_DESCRIPTION", 6163))
	cols = append(cols, createCol("TABLE_ROWS", 265))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 265))
	cols = append(cols, createCol("DATA_LENGTH", 265))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 265))
	cols = append(cols, createCol("INDEX_LENGTH", 265))
	cols = append(cols, createCol("DATA_FREE", 265))
	cols = append(cols, createCol("CREATE_TIME", 2064))
	cols = append(cols, createCol("UPDATE_TIME", 2064))
	cols = append(cols, createCol("CHECK_TIME", 2064))
	cols = append(cols, createCol("CHECKSUM", 265))
	cols = append(cols, createCol("PARTITION_COMMENT", 6165))
	cols = append(cols, createCol("NODEGROUP", 6165))
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	infSchema["PARTITIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("PLUGIN_NAME", 6165))
	cols = append(cols, createCol("PLUGIN_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_STATUS", 6165))
	cols = append(cols, createCol("PLUGIN_TYPE", 6165))
	cols = append(cols, createCol("PLUGIN_TYPE_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_LIBRARY", 6165))
	cols = append(cols, createCol("PLUGIN_LIBRARY_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_AUTHOR", 6165))
	cols = append(cols, createCol("PLUGIN_DESCRIPTION", 6163))
	cols = append(cols, createCol("PLUGIN_LICENSE", 6165))
	cols = append(cols, createCol("LOAD_OPTION", 6165))
	infSchema["PLUGINS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 265))
	cols = append(cols, createCol("USER", 6165))
	cols = append(cols, createCol("HOST", 6165))
	cols = append(cols, createCol("DB", 6165))
	cols = append(cols, createCol("COMMAND", 6165))
	cols = append(cols, createCol("TIME", 263))
	cols = append(cols, createCol("STATE", 6165))
	cols = append(cols, createCol("INFO", 6163))
	infSchema["PROCESSLIST"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("QUERY_ID", 263))
	cols = append(cols, createCol("SEQ", 263))
	cols = append(cols, createCol("STATE", 6165))
	cols = append(cols, createCol("DURATION", 18))
	cols = append(cols, createCol("CPU_USER", 18))
	cols = append(cols, createCol("CPU_SYSTEM", 18))
	cols = append(cols, createCol("CONTEXT_VOLUNTARY", 263))
	cols = append(cols, createCol("CONTEXT_INVOLUNTARY", 263))
	cols = append(cols, createCol("BLOCK_OPS_IN", 263))
	cols = append(cols, createCol("BLOCK_OPS_OUT", 263))
	cols = append(cols, createCol("MESSAGES_SENT", 263))
	cols = append(cols, createCol("MESSAGES_RECEIVED", 263))
	cols = append(cols, createCol("PAGE_FAULTS_MAJOR", 263))
	cols = append(cols, createCol("PAGE_FAULTS_MINOR", 263))
	cols = append(cols, createCol("SWAPS", 263))
	cols = append(cols, createCol("SOURCE_FUNCTION", 6165))
	cols = append(cols, createCol("SOURCE_FILE", 6165))
	cols = append(cols, createCol("SOURCE_LINE", 263))
	infSchema["PROFILING"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("MATCH_OPTION", 6165))
	cols = append(cols, createCol("UPDATE_RULE", 6165))
	cols = append(cols, createCol("DELETE_RULE", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("REFERENCED_TABLE_NAME", 6165))
	infSchema["REFERENTIAL_CONSTRAINTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPECIFIC_NAME", 6165))
	cols = append(cols, createCol("ROUTINE_CATALOG", 6165))
	cols = append(cols, createCol("ROUTINE_SCHEMA", 6165))
	cols = append(cols, createCol("ROUTINE_NAME", 6165))
	cols = append(cols, createCol("ROUTINE_TYPE", 6165))
	cols = append(cols, createCol("DATA_TYPE", 6165))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 263))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 263))
	cols = append(cols, createCol("NUMERIC_PRECISION", 265))
	cols = append(cols, createCol("NUMERIC_SCALE", 263))
	cols = append(cols, createCol("DATETIME_PRECISION", 265))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("DTD_IDENTIFIER", 6163))
	cols = append(cols, createCol("ROUTINE_BODY", 6165))
	cols = append(cols, createCol("ROUTINE_DEFINITION", 6163))
	cols = append(cols, createCol("EXTERNAL_NAME", 6165))
	cols = append(cols, createCol("EXTERNAL_LANGUAGE", 6165))
	cols = append(cols, createCol("PARAMETER_STYLE", 6165))
	cols = append(cols, createCol("IS_DETERMINISTIC", 6165))
	cols = append(cols, createCol("SQL_DATA_ACCESS", 6165))
	cols = append(cols, createCol("SQL_PATH", 6165))
	cols = append(cols, createCol("SECURITY_TYPE", 6165))
	cols = append(cols, createCol("CREATED", 2064))
	cols = append(cols, createCol("LAST_ALTERED", 2064))
	cols = append(cols, createCol("SQL_MODE", 6165))
	cols = append(cols, createCol("ROUTINE_COMMENT", 6163))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["ROUTINES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["SCHEMA_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CATALOG_NAME", 6165))
	cols = append(cols, createCol("SCHEMA_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_COLLATION_NAME", 6165))
	cols = append(cols, createCol("SQL_PATH", 6165))
	infSchema["SCHEMATA"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("VARIABLE_NAME", 6165))
	cols = append(cols, createCol("VARIABLE_VALUE", 6165))
	infSchema["SESSION_STATUS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("VARIABLE_NAME", 6165))
	cols = append(cols, createCol("VARIABLE_VALUE", 6165))
	infSchema["SESSION_VARIABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("NON_UNIQUE", 265))
	cols = append(cols, createCol("INDEX_SCHEMA", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("SEQ_IN_INDEX", 265))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("COLLATION", 6165))
	cols = append(cols, createCol("CARDINALITY", 265))
	cols = append(cols, createCol("SUB_PART", 265))
	cols = append(cols, createCol("PACKED", 6165))
	cols = append(cols, createCol("NULLABLE", 6165))
	cols = append(cols, createCol("INDEX_TYPE", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	cols = append(cols, createCol("INDEX_COMMENT", 6165))
	infSchema["STATISTICS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("CONSTRAINT_TYPE", 6165))
	infSchema["TABLE_CONSTRAINTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["TABLE_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("TABLE_TYPE", 6165))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("VERSION", 265))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("TABLE_ROWS", 265))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 265))
	cols = append(cols, createCol("DATA_LENGTH", 265))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 265))
	cols = append(cols, createCol("INDEX_LENGTH", 265))
	cols = append(cols, createCol("DATA_FREE", 265))
	cols = append(cols, createCol("AUTO_INCREMENT", 265))
	cols = append(cols, createCol("CREATE_TIME", 2064))
	cols = append(cols, createCol("UPDATE_TIME", 2064))
	cols = append(cols, createCol("CHECK_TIME", 2064))
	cols = append(cols, createCol("TABLE_COLLATION", 6165))
	cols = append(cols, createCol("CHECKSUM", 265))
	cols = append(cols, createCol("CREATE_OPTIONS", 6165))
	cols = append(cols, createCol("TABLE_COMMENT", 6165))
	infSchema["TABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("TABLESPACE_TYPE", 6165))
	cols = append(cols, createCol("LOGFILE_GROUP_NAME", 6165))
	cols = append(cols, createCol("EXTENT_SIZE", 265))
	cols = append(cols, createCol("AUTOEXTEND_SIZE", 265))
	cols = append(cols, createCol("MAXIMUM_SIZE", 265))
	cols = append(cols, createCol("NODEGROUP_ID", 265))
	cols = append(cols, createCol("TABLESPACE_COMMENT", 6165))
	infSchema["TABLESPACES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TRIGGER_CATALOG", 6165))
	cols = append(cols, createCol("TRIGGER_SCHEMA", 6165))
	cols = append(cols, createCol("TRIGGER_NAME", 6165))
	cols = append(cols, createCol("EVENT_MANIPULATION", 6165))
	cols = append(cols, createCol("EVENT_OBJECT_CATALOG", 6165))
	cols = append(cols, createCol("EVENT_OBJECT_SCHEMA", 6165))
	cols = append(cols, createCol("EVENT_OBJECT_TABLE", 6165))
	cols = append(cols, createCol("ACTION_ORDER", 265))
	cols = append(cols, createCol("ACTION_CONDITION", 6163))
	cols = append(cols, createCol("ACTION_STATEMENT", 6163))
	cols = append(cols, createCol("ACTION_ORIENTATION", 6165))
	cols = append(cols, createCol("ACTION_TIMING", 6165))
	cols = append(cols, createCol("ACTION_REFERENCE_OLD_TABLE", 6165))
	cols = append(cols, createCol("ACTION_REFERENCE_NEW_TABLE", 6165))
	cols = append(cols, createCol("ACTION_REFERENCE_OLD_ROW", 6165))
	cols = append(cols, createCol("ACTION_REFERENCE_NEW_ROW", 6165))
	cols = append(cols, createCol("CREATED", 2064))
	cols = append(cols, createCol("SQL_MODE", 6165))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["TRIGGERS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["USER_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("VIEW_DEFINITION", 6163))
	cols = append(cols, createCol("CHECK_OPTION", 6165))
	cols = append(cols, createCol("IS_UPDATABLE", 6165))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("SECURITY_TYPE", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	infSchema["VIEWS"] = cols

	return infSchema
}

// getInfoSchema80 returns a map of all information_schema tables and their columns with types
// To recreate this information from MySQL, you can run the test in info_schema_gen_test.go
func getInfoSchema80() map[string][]vindexes.Column {
	infSchema := map[string][]vindexes.Column{}
	var cols []vindexes.Column
	cols = append(cols, createCol("USER", 6165))
	cols = append(cols, createCol("HOST", 6165))
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("GRANTEE_HOST", 6165))
	cols = append(cols, createCol("ROLE_NAME", 6165))
	cols = append(cols, createCol("ROLE_HOST", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	cols = append(cols, createCol("IS_DEFAULT", 6165))
	cols = append(cols, createCol("IS_MANDATORY", 6165))
	infSchema["ADMINISTRABLE_ROLE_AUTHORIZATIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("USER", 6165))
	cols = append(cols, createCol("HOST", 6165))
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("GRANTEE_HOST", 6165))
	cols = append(cols, createCol("ROLE_NAME", 6165))
	cols = append(cols, createCol("ROLE_HOST", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	cols = append(cols, createCol("IS_DEFAULT", 6165))
	cols = append(cols, createCol("IS_MANDATORY", 6165))
	infSchema["APPLICABLE_ROLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_COLLATE_NAME", 6165))
	cols = append(cols, createCol("DESCRIPTION", 6165))
	cols = append(cols, createCol("MAXLEN", 776))
	infSchema["CHARACTER_SETS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("CHECK_CLAUSE", 6163))
	infSchema["CHECK_CONSTRAINTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	infSchema["COLLATION_CHARACTER_SET_APPLICABILITY"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("ID", 778))
	cols = append(cols, createCol("IS_DEFAULT", 6165))
	cols = append(cols, createCol("IS_COMPILED", 6165))
	cols = append(cols, createCol("SORTLEN", 776))
	cols = append(cols, createCol("PAD_ATTRIBUTE", 2074))
	infSchema["COLLATIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["COLUMN_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SCHEMA_NAME", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("HISTOGRAM", 2078))
	infSchema["COLUMN_STATISTICS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 776))
	cols = append(cols, createCol("COLUMN_DEFAULT", 6163))
	cols = append(cols, createCol("IS_NULLABLE", 6165))
	cols = append(cols, createCol("DATA_TYPE", 6163))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 265))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 265))
	cols = append(cols, createCol("NUMERIC_PRECISION", 778))
	cols = append(cols, createCol("NUMERIC_SCALE", 778))
	cols = append(cols, createCol("DATETIME_PRECISION", 776))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("COLUMN_TYPE", 6163))
	cols = append(cols, createCol("COLUMN_KEY", 2074))
	cols = append(cols, createCol("EXTRA", 6165))
	cols = append(cols, createCol("PRIVILEGES", 6165))
	cols = append(cols, createCol("COLUMN_COMMENT", 6163))
	cols = append(cols, createCol("GENERATION_EXPRESSION", 6163))
	cols = append(cols, createCol("SRS_ID", 776))
	infSchema["COLUMNS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("ENGINE_ATTRIBUTE", 2078))
	cols = append(cols, createCol("SECONDARY_ENGINE_ATTRIBUTE", 2078))
	infSchema["COLUMNS_EXTENSIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ROLE_NAME", 6165))
	cols = append(cols, createCol("ROLE_HOST", 6165))
	cols = append(cols, createCol("IS_DEFAULT", 6165))
	cols = append(cols, createCol("IS_MANDATORY", 6165))
	infSchema["ENABLED_ROLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("SUPPORT", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	cols = append(cols, createCol("TRANSACTIONS", 6165))
	cols = append(cols, createCol("XA", 6165))
	cols = append(cols, createCol("SAVEPOINTS", 6165))
	infSchema["ENGINES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("EVENT_CATALOG", 6165))
	cols = append(cols, createCol("EVENT_SCHEMA", 6165))
	cols = append(cols, createCol("EVENT_NAME", 6165))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("TIME_ZONE", 6165))
	cols = append(cols, createCol("EVENT_BODY", 6165))
	cols = append(cols, createCol("EVENT_DEFINITION", 6163))
	cols = append(cols, createCol("EVENT_TYPE", 6165))
	cols = append(cols, createCol("EXECUTE_AT", 2064))
	cols = append(cols, createCol("INTERVAL_VALUE", 6165))
	cols = append(cols, createCol("INTERVAL_FIELD", 2074))
	cols = append(cols, createCol("SQL_MODE", 2075))
	cols = append(cols, createCol("STARTS", 2064))
	cols = append(cols, createCol("ENDS", 2064))
	cols = append(cols, createCol("STATUS", 2074))
	cols = append(cols, createCol("ON_COMPLETION", 6165))
	cols = append(cols, createCol("CREATED", 2061))
	cols = append(cols, createCol("LAST_ALTERED", 2061))
	cols = append(cols, createCol("LAST_EXECUTED", 2064))
	cols = append(cols, createCol("EVENT_COMMENT", 6165))
	cols = append(cols, createCol("ORIGINATOR", 776))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["EVENTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("FILE_ID", 265))
	cols = append(cols, createCol("FILE_NAME", 6163))
	cols = append(cols, createCol("FILE_TYPE", 6165))
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6167))
	cols = append(cols, createCol("TABLE_SCHEMA", 10264))
	cols = append(cols, createCol("TABLE_NAME", 10264))
	cols = append(cols, createCol("LOGFILE_GROUP_NAME", 6165))
	cols = append(cols, createCol("LOGFILE_GROUP_NUMBER", 265))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("FULLTEXT_KEYS", 10264))
	cols = append(cols, createCol("DELETED_ROWS", 10264))
	cols = append(cols, createCol("UPDATE_COUNT", 10264))
	cols = append(cols, createCol("FREE_EXTENTS", 265))
	cols = append(cols, createCol("TOTAL_EXTENTS", 265))
	cols = append(cols, createCol("EXTENT_SIZE", 265))
	cols = append(cols, createCol("INITIAL_SIZE", 265))
	cols = append(cols, createCol("MAXIMUM_SIZE", 265))
	cols = append(cols, createCol("AUTOEXTEND_SIZE", 265))
	cols = append(cols, createCol("CREATION_TIME", 10264))
	cols = append(cols, createCol("LAST_UPDATE_TIME", 10264))
	cols = append(cols, createCol("LAST_ACCESS_TIME", 10264))
	cols = append(cols, createCol("RECOVER_TIME", 10264))
	cols = append(cols, createCol("TRANSACTION_COUNTER", 10264))
	cols = append(cols, createCol("VERSION", 265))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("TABLE_ROWS", 10264))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 10264))
	cols = append(cols, createCol("DATA_LENGTH", 10264))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 10264))
	cols = append(cols, createCol("INDEX_LENGTH", 10264))
	cols = append(cols, createCol("DATA_FREE", 265))
	cols = append(cols, createCol("CREATE_TIME", 10264))
	cols = append(cols, createCol("UPDATE_TIME", 10264))
	cols = append(cols, createCol("CHECK_TIME", 10264))
	cols = append(cols, createCol("CHECKSUM", 10264))
	cols = append(cols, createCol("STATUS", 6165))
	cols = append(cols, createCol("EXTRA", 6165))
	infSchema["FILES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 778))
	cols = append(cols, createCol("BLOCK_ID", 778))
	cols = append(cols, createCol("SPACE", 778))
	cols = append(cols, createCol("PAGE_NUMBER", 778))
	cols = append(cols, createCol("PAGE_TYPE", 6165))
	cols = append(cols, createCol("FLUSH_TYPE", 778))
	cols = append(cols, createCol("FIX_COUNT", 778))
	cols = append(cols, createCol("IS_HASHED", 6165))
	cols = append(cols, createCol("NEWEST_MODIFICATION", 778))
	cols = append(cols, createCol("OLDEST_MODIFICATION", 778))
	cols = append(cols, createCol("ACCESS_TIME", 778))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("NUMBER_RECORDS", 778))
	cols = append(cols, createCol("DATA_SIZE", 778))
	cols = append(cols, createCol("COMPRESSED_SIZE", 778))
	cols = append(cols, createCol("PAGE_STATE", 6165))
	cols = append(cols, createCol("IO_FIX", 6165))
	cols = append(cols, createCol("IS_OLD", 6165))
	cols = append(cols, createCol("FREE_PAGE_CLOCK", 778))
	cols = append(cols, createCol("IS_STALE", 6165))
	infSchema["INNODB_BUFFER_PAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 778))
	cols = append(cols, createCol("LRU_POSITION", 778))
	cols = append(cols, createCol("SPACE", 778))
	cols = append(cols, createCol("PAGE_NUMBER", 778))
	cols = append(cols, createCol("PAGE_TYPE", 6165))
	cols = append(cols, createCol("FLUSH_TYPE", 778))
	cols = append(cols, createCol("FIX_COUNT", 778))
	cols = append(cols, createCol("IS_HASHED", 6165))
	cols = append(cols, createCol("NEWEST_MODIFICATION", 778))
	cols = append(cols, createCol("OLDEST_MODIFICATION", 778))
	cols = append(cols, createCol("ACCESS_TIME", 778))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("NUMBER_RECORDS", 778))
	cols = append(cols, createCol("DATA_SIZE", 778))
	cols = append(cols, createCol("COMPRESSED_SIZE", 778))
	cols = append(cols, createCol("COMPRESSED", 6165))
	cols = append(cols, createCol("IO_FIX", 6165))
	cols = append(cols, createCol("IS_OLD", 6165))
	cols = append(cols, createCol("FREE_PAGE_CLOCK", 778))
	infSchema["INNODB_BUFFER_PAGE_LRU"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("POOL_ID", 778))
	cols = append(cols, createCol("POOL_SIZE", 778))
	cols = append(cols, createCol("FREE_BUFFERS", 778))
	cols = append(cols, createCol("DATABASE_PAGES", 778))
	cols = append(cols, createCol("OLD_DATABASE_PAGES", 778))
	cols = append(cols, createCol("MODIFIED_DATABASE_PAGES", 778))
	cols = append(cols, createCol("PENDING_DECOMPRESS", 778))
	cols = append(cols, createCol("PENDING_READS", 778))
	cols = append(cols, createCol("PENDING_FLUSH_LRU", 778))
	cols = append(cols, createCol("PENDING_FLUSH_LIST", 778))
	cols = append(cols, createCol("PAGES_MADE_YOUNG", 778))
	cols = append(cols, createCol("PAGES_NOT_MADE_YOUNG", 778))
	cols = append(cols, createCol("PAGES_MADE_YOUNG_RATE", 1035))
	cols = append(cols, createCol("PAGES_MADE_NOT_YOUNG_RATE", 1035))
	cols = append(cols, createCol("NUMBER_PAGES_READ", 778))
	cols = append(cols, createCol("NUMBER_PAGES_CREATED", 778))
	cols = append(cols, createCol("NUMBER_PAGES_WRITTEN", 778))
	cols = append(cols, createCol("PAGES_READ_RATE", 1035))
	cols = append(cols, createCol("PAGES_CREATE_RATE", 1035))
	cols = append(cols, createCol("PAGES_WRITTEN_RATE", 1035))
	cols = append(cols, createCol("NUMBER_PAGES_GET", 778))
	cols = append(cols, createCol("HIT_RATE", 778))
	cols = append(cols, createCol("YOUNG_MAKE_PER_THOUSAND_GETS", 778))
	cols = append(cols, createCol("NOT_YOUNG_MAKE_PER_THOUSAND_GETS", 778))
	cols = append(cols, createCol("NUMBER_PAGES_READ_AHEAD", 778))
	cols = append(cols, createCol("NUMBER_READ_AHEAD_EVICTED", 778))
	cols = append(cols, createCol("READ_AHEAD_RATE", 1035))
	cols = append(cols, createCol("READ_AHEAD_EVICTED_RATE", 1035))
	cols = append(cols, createCol("LRU_IO_TOTAL", 778))
	cols = append(cols, createCol("LRU_IO_CURRENT", 778))
	cols = append(cols, createCol("UNCOMPRESS_TOTAL", 778))
	cols = append(cols, createCol("UNCOMPRESS_CURRENT", 778))
	infSchema["INNODB_BUFFER_POOL_STATS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE_ID", 776))
	cols = append(cols, createCol("INDEX_ID", 778))
	cols = append(cols, createCol("N_CACHED_PAGES", 778))
	infSchema["INNODB_CACHED_INDEXES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("database_name", 6165))
	cols = append(cols, createCol("table_name", 6165))
	cols = append(cols, createCol("index_name", 6165))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_PER_INDEX"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("database_name", 6165))
	cols = append(cols, createCol("table_name", 6165))
	cols = append(cols, createCol("index_name", 6165))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_PER_INDEX_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("compress_ops", 263))
	cols = append(cols, createCol("compress_ops_ok", 263))
	cols = append(cols, createCol("compress_time", 263))
	cols = append(cols, createCol("uncompress_ops", 263))
	cols = append(cols, createCol("uncompress_time", 263))
	infSchema["INNODB_CMP_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("buffer_pool_instance", 263))
	cols = append(cols, createCol("pages_used", 263))
	cols = append(cols, createCol("pages_free", 263))
	cols = append(cols, createCol("relocation_ops", 265))
	cols = append(cols, createCol("relocation_time", 263))
	infSchema["INNODB_CMPMEM"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("page_size", 263))
	cols = append(cols, createCol("buffer_pool_instance", 263))
	cols = append(cols, createCol("pages_used", 263))
	cols = append(cols, createCol("pages_free", 263))
	cols = append(cols, createCol("relocation_ops", 265))
	cols = append(cols, createCol("relocation_time", 263))
	infSchema["INNODB_CMPMEM_RESET"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("POS", 778))
	cols = append(cols, createCol("MTYPE", 263))
	cols = append(cols, createCol("PRTYPE", 263))
	cols = append(cols, createCol("LEN", 263))
	cols = append(cols, createCol("HAS_DEFAULT", 263))
	cols = append(cols, createCol("DEFAULT_VALUE", 6163))
	infSchema["INNODB_COLUMNS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE", 10262))
	cols = append(cols, createCol("PATH", 6165))
	infSchema["INNODB_DATAFILES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("INDEX_ID", 10262))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("POS", 778))
	infSchema["INNODB_FIELDS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 6165))
	cols = append(cols, createCol("FOR_NAME", 6165))
	cols = append(cols, createCol("REF_NAME", 6165))
	cols = append(cols, createCol("N_COLS", 265))
	cols = append(cols, createCol("TYPE", 778))
	infSchema["INNODB_FOREIGN"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 6165))
	cols = append(cols, createCol("FOR_COL_NAME", 6165))
	cols = append(cols, createCol("REF_COL_NAME", 6165))
	cols = append(cols, createCol("POS", 776))
	infSchema["INNODB_FOREIGN_COLS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("DOC_ID", 778))
	infSchema["INNODB_FT_BEING_DELETED"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("KEY", 6165))
	cols = append(cols, createCol("VALUE", 6165))
	infSchema["INNODB_FT_CONFIG"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("value", 6165))
	infSchema["INNODB_FT_DEFAULT_STOPWORD"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("DOC_ID", 778))
	infSchema["INNODB_FT_DELETED"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("WORD", 6165))
	cols = append(cols, createCol("FIRST_DOC_ID", 778))
	cols = append(cols, createCol("LAST_DOC_ID", 778))
	cols = append(cols, createCol("DOC_COUNT", 778))
	cols = append(cols, createCol("DOC_ID", 778))
	cols = append(cols, createCol("POSITION", 778))
	infSchema["INNODB_FT_INDEX_CACHE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("WORD", 6165))
	cols = append(cols, createCol("FIRST_DOC_ID", 778))
	cols = append(cols, createCol("LAST_DOC_ID", 778))
	cols = append(cols, createCol("DOC_COUNT", 778))
	cols = append(cols, createCol("DOC_ID", 778))
	cols = append(cols, createCol("POSITION", 778))
	infSchema["INNODB_FT_INDEX_TABLE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("INDEX_ID", 778))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("TYPE", 263))
	cols = append(cols, createCol("N_FIELDS", 263))
	cols = append(cols, createCol("PAGE_NO", 263))
	cols = append(cols, createCol("SPACE", 263))
	cols = append(cols, createCol("MERGE_THRESHOLD", 263))
	infSchema["INNODB_INDEXES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("SUBSYSTEM", 6165))
	cols = append(cols, createCol("COUNT", 265))
	cols = append(cols, createCol("MAX_COUNT", 265))
	cols = append(cols, createCol("MIN_COUNT", 265))
	cols = append(cols, createCol("AVG_COUNT", 1035))
	cols = append(cols, createCol("COUNT_RESET", 265))
	cols = append(cols, createCol("MAX_COUNT_RESET", 265))
	cols = append(cols, createCol("MIN_COUNT_RESET", 265))
	cols = append(cols, createCol("AVG_COUNT_RESET", 1035))
	cols = append(cols, createCol("TIME_ENABLED", 2064))
	cols = append(cols, createCol("TIME_DISABLED", 2064))
	cols = append(cols, createCol("TIME_ELAPSED", 265))
	cols = append(cols, createCol("TIME_RESET", 2064))
	cols = append(cols, createCol("STATUS", 6165))
	cols = append(cols, createCol("TYPE", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	infSchema["INNODB_METRICS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 776))
	cols = append(cols, createCol("SPACE", 776))
	cols = append(cols, createCol("PATH", 6165))
	cols = append(cols, createCol("SIZE", 778))
	cols = append(cols, createCol("STATE", 6165))
	cols = append(cols, createCol("PURPOSE", 6165))
	infSchema["INNODB_SESSION_TEMP_TABLESPACES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("FLAG", 263))
	cols = append(cols, createCol("N_COLS", 263))
	cols = append(cols, createCol("SPACE", 265))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("ZIP_PAGE_SIZE", 776))
	cols = append(cols, createCol("SPACE_TYPE", 6165))
	cols = append(cols, createCol("INSTANT_COLS", 263))
	infSchema["INNODB_TABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE", 776))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("FLAG", 776))
	cols = append(cols, createCol("ROW_FORMAT", 6165))
	cols = append(cols, createCol("PAGE_SIZE", 776))
	cols = append(cols, createCol("ZIP_PAGE_SIZE", 776))
	cols = append(cols, createCol("SPACE_TYPE", 6165))
	cols = append(cols, createCol("FS_BLOCK_SIZE", 776))
	cols = append(cols, createCol("FILE_SIZE", 778))
	cols = append(cols, createCol("ALLOCATED_SIZE", 778))
	cols = append(cols, createCol("AUTOEXTEND_SIZE", 778))
	cols = append(cols, createCol("SERVER_VERSION", 6165))
	cols = append(cols, createCol("SPACE_VERSION", 776))
	cols = append(cols, createCol("ENCRYPTION", 6165))
	cols = append(cols, createCol("STATE", 6165))
	infSchema["INNODB_TABLESPACES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPACE", 10262))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("PATH", 6165))
	cols = append(cols, createCol("FLAG", 10262))
	cols = append(cols, createCol("SPACE_TYPE", 6165))
	infSchema["INNODB_TABLESPACES_BRIEF"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("STATS_INITIALIZED", 6165))
	cols = append(cols, createCol("NUM_ROWS", 778))
	cols = append(cols, createCol("CLUST_INDEX_SIZE", 778))
	cols = append(cols, createCol("OTHER_INDEX_SIZE", 778))
	cols = append(cols, createCol("MODIFIED_COUNTER", 778))
	cols = append(cols, createCol("AUTOINC", 778))
	cols = append(cols, createCol("REF_COUNT", 263))
	infSchema["INNODB_TABLESTATS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("NAME", 6165))
	cols = append(cols, createCol("N_COLS", 776))
	cols = append(cols, createCol("SPACE", 776))
	infSchema["INNODB_TEMP_TABLE_INFO"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("trx_id", 778))
	cols = append(cols, createCol("trx_state", 6165))
	cols = append(cols, createCol("trx_started", 2064))
	cols = append(cols, createCol("trx_requested_lock_id", 6165))
	cols = append(cols, createCol("trx_wait_started", 2064))
	cols = append(cols, createCol("trx_weight", 778))
	cols = append(cols, createCol("trx_mysql_thread_id", 778))
	cols = append(cols, createCol("trx_query", 6165))
	cols = append(cols, createCol("trx_operation_state", 6165))
	cols = append(cols, createCol("trx_tables_in_use", 778))
	cols = append(cols, createCol("trx_tables_locked", 778))
	cols = append(cols, createCol("trx_lock_structs", 778))
	cols = append(cols, createCol("trx_lock_memory_bytes", 778))
	cols = append(cols, createCol("trx_rows_locked", 778))
	cols = append(cols, createCol("trx_rows_modified", 778))
	cols = append(cols, createCol("trx_concurrency_tickets", 778))
	cols = append(cols, createCol("trx_isolation_level", 6165))
	cols = append(cols, createCol("trx_unique_checks", 263))
	cols = append(cols, createCol("trx_foreign_key_checks", 263))
	cols = append(cols, createCol("trx_last_foreign_key_error", 6165))
	cols = append(cols, createCol("trx_adaptive_hash_latched", 263))
	cols = append(cols, createCol("trx_adaptive_hash_timeout", 778))
	cols = append(cols, createCol("trx_is_read_only", 263))
	cols = append(cols, createCol("trx_autocommit_non_locking", 263))
	cols = append(cols, createCol("trx_schedule_weight", 778))
	infSchema["INNODB_TRX"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_ID", 778))
	cols = append(cols, createCol("POS", 776))
	cols = append(cols, createCol("BASE_POS", 776))
	infSchema["INNODB_VIRTUAL"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 776))
	cols = append(cols, createCol("POSITION_IN_UNIQUE_CONSTRAINT", 776))
	cols = append(cols, createCol("REFERENCED_TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("REFERENCED_TABLE_NAME", 6165))
	cols = append(cols, createCol("REFERENCED_COLUMN_NAME", 6165))
	infSchema["KEY_COLUMN_USAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("WORD", 6165))
	cols = append(cols, createCol("RESERVED", 263))
	infSchema["KEYWORDS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("QUERY", 6165))
	cols = append(cols, createCol("TRACE", 6165))
	cols = append(cols, createCol("MISSING_BYTES_BEYOND_MAX_MEM_SIZE", 263))
	cols = append(cols, createCol("INSUFFICIENT_PRIVILEGES", 257))
	infSchema["OPTIMIZER_TRACE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPECIFIC_CATALOG", 6165))
	cols = append(cols, createCol("SPECIFIC_SCHEMA", 6165))
	cols = append(cols, createCol("SPECIFIC_NAME", 6165))
	cols = append(cols, createCol("ORDINAL_POSITION", 778))
	cols = append(cols, createCol("PARAMETER_MODE", 6165))
	cols = append(cols, createCol("PARAMETER_NAME", 6165))
	cols = append(cols, createCol("DATA_TYPE", 6163))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 265))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 265))
	cols = append(cols, createCol("NUMERIC_PRECISION", 776))
	cols = append(cols, createCol("NUMERIC_SCALE", 265))
	cols = append(cols, createCol("DATETIME_PRECISION", 776))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("DTD_IDENTIFIER", 6163))
	cols = append(cols, createCol("ROUTINE_TYPE", 2074))
	infSchema["PARAMETERS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("PARTITION_NAME", 6165))
	cols = append(cols, createCol("SUBPARTITION_NAME", 6165))
	cols = append(cols, createCol("PARTITION_ORDINAL_POSITION", 776))
	cols = append(cols, createCol("SUBPARTITION_ORDINAL_POSITION", 776))
	cols = append(cols, createCol("PARTITION_METHOD", 6165))
	cols = append(cols, createCol("SUBPARTITION_METHOD", 6165))
	cols = append(cols, createCol("PARTITION_EXPRESSION", 6165))
	cols = append(cols, createCol("SUBPARTITION_EXPRESSION", 6165))
	cols = append(cols, createCol("PARTITION_DESCRIPTION", 6163))
	cols = append(cols, createCol("TABLE_ROWS", 778))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 778))
	cols = append(cols, createCol("DATA_LENGTH", 778))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 778))
	cols = append(cols, createCol("INDEX_LENGTH", 778))
	cols = append(cols, createCol("DATA_FREE", 778))
	cols = append(cols, createCol("CREATE_TIME", 2061))
	cols = append(cols, createCol("UPDATE_TIME", 2064))
	cols = append(cols, createCol("CHECK_TIME", 2064))
	cols = append(cols, createCol("CHECKSUM", 265))
	cols = append(cols, createCol("PARTITION_COMMENT", 6163))
	cols = append(cols, createCol("NODEGROUP", 6165))
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	infSchema["PARTITIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("PLUGIN_NAME", 6165))
	cols = append(cols, createCol("PLUGIN_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_STATUS", 6165))
	cols = append(cols, createCol("PLUGIN_TYPE", 6165))
	cols = append(cols, createCol("PLUGIN_TYPE_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_LIBRARY", 6165))
	cols = append(cols, createCol("PLUGIN_LIBRARY_VERSION", 6165))
	cols = append(cols, createCol("PLUGIN_AUTHOR", 6165))
	cols = append(cols, createCol("PLUGIN_DESCRIPTION", 6165))
	cols = append(cols, createCol("PLUGIN_LICENSE", 6165))
	cols = append(cols, createCol("LOAD_OPTION", 6165))
	infSchema["PLUGINS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("ID", 778))
	cols = append(cols, createCol("USER", 6165))
	cols = append(cols, createCol("HOST", 6165))
	cols = append(cols, createCol("DB", 6165))
	cols = append(cols, createCol("COMMAND", 6165))
	cols = append(cols, createCol("TIME", 263))
	cols = append(cols, createCol("STATE", 6165))
	cols = append(cols, createCol("INFO", 6165))
	infSchema["PROCESSLIST"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("QUERY_ID", 263))
	cols = append(cols, createCol("SEQ", 263))
	cols = append(cols, createCol("STATE", 6165))
	cols = append(cols, createCol("DURATION", 18))
	cols = append(cols, createCol("CPU_USER", 18))
	cols = append(cols, createCol("CPU_SYSTEM", 18))
	cols = append(cols, createCol("CONTEXT_VOLUNTARY", 263))
	cols = append(cols, createCol("CONTEXT_INVOLUNTARY", 263))
	cols = append(cols, createCol("BLOCK_OPS_IN", 263))
	cols = append(cols, createCol("BLOCK_OPS_OUT", 263))
	cols = append(cols, createCol("MESSAGES_SENT", 263))
	cols = append(cols, createCol("MESSAGES_RECEIVED", 263))
	cols = append(cols, createCol("PAGE_FAULTS_MAJOR", 263))
	cols = append(cols, createCol("PAGE_FAULTS_MINOR", 263))
	cols = append(cols, createCol("SWAPS", 263))
	cols = append(cols, createCol("SOURCE_FUNCTION", 6165))
	cols = append(cols, createCol("SOURCE_FILE", 6165))
	cols = append(cols, createCol("SOURCE_LINE", 263))
	infSchema["PROFILING"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("UNIQUE_CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("MATCH_OPTION", 2074))
	cols = append(cols, createCol("UPDATE_RULE", 2074))
	cols = append(cols, createCol("DELETE_RULE", 2074))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("REFERENCED_TABLE_NAME", 6165))
	infSchema["REFERENTIAL_CONSTRAINTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("RESOURCE_GROUP_NAME", 6165))
	cols = append(cols, createCol("RESOURCE_GROUP_TYPE", 2074))
	cols = append(cols, createCol("RESOURCE_GROUP_ENABLED", 257))
	cols = append(cols, createCol("VCPU_IDS", 10260))
	cols = append(cols, createCol("THREAD_PRIORITY", 263))
	infSchema["RESOURCE_GROUPS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTOR", 6165))
	cols = append(cols, createCol("GRANTOR_HOST", 6165))
	cols = append(cols, createCol("GRANTEE", 6167))
	cols = append(cols, createCol("GRANTEE_HOST", 6167))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6167))
	cols = append(cols, createCol("TABLE_NAME", 6167))
	cols = append(cols, createCol("COLUMN_NAME", 6167))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 2075))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["ROLE_COLUMN_GRANTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTOR", 6165))
	cols = append(cols, createCol("GRANTOR_HOST", 6165))
	cols = append(cols, createCol("GRANTEE", 6167))
	cols = append(cols, createCol("GRANTEE_HOST", 6167))
	cols = append(cols, createCol("SPECIFIC_CATALOG", 6165))
	cols = append(cols, createCol("SPECIFIC_SCHEMA", 6167))
	cols = append(cols, createCol("SPECIFIC_NAME", 6167))
	cols = append(cols, createCol("ROUTINE_CATALOG", 6165))
	cols = append(cols, createCol("ROUTINE_SCHEMA", 6167))
	cols = append(cols, createCol("ROUTINE_NAME", 6167))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 2075))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["ROLE_ROUTINE_GRANTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTOR", 6165))
	cols = append(cols, createCol("GRANTOR_HOST", 6165))
	cols = append(cols, createCol("GRANTEE", 6167))
	cols = append(cols, createCol("GRANTEE_HOST", 6167))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6167))
	cols = append(cols, createCol("TABLE_NAME", 6167))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 2075))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["ROLE_TABLE_GRANTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SPECIFIC_NAME", 6165))
	cols = append(cols, createCol("ROUTINE_CATALOG", 6165))
	cols = append(cols, createCol("ROUTINE_SCHEMA", 6165))
	cols = append(cols, createCol("ROUTINE_NAME", 6165))
	cols = append(cols, createCol("ROUTINE_TYPE", 2074))
	cols = append(cols, createCol("DATA_TYPE", 6163))
	cols = append(cols, createCol("CHARACTER_MAXIMUM_LENGTH", 265))
	cols = append(cols, createCol("CHARACTER_OCTET_LENGTH", 265))
	cols = append(cols, createCol("NUMERIC_PRECISION", 776))
	cols = append(cols, createCol("NUMERIC_SCALE", 776))
	cols = append(cols, createCol("DATETIME_PRECISION", 776))
	cols = append(cols, createCol("CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("COLLATION_NAME", 6165))
	cols = append(cols, createCol("DTD_IDENTIFIER", 6163))
	cols = append(cols, createCol("ROUTINE_BODY", 6165))
	cols = append(cols, createCol("ROUTINE_DEFINITION", 6163))
	cols = append(cols, createCol("EXTERNAL_NAME", 10264))
	cols = append(cols, createCol("EXTERNAL_LANGUAGE", 6165))
	cols = append(cols, createCol("PARAMETER_STYLE", 6165))
	cols = append(cols, createCol("IS_DETERMINISTIC", 6165))
	cols = append(cols, createCol("SQL_DATA_ACCESS", 2074))
	cols = append(cols, createCol("SQL_PATH", 10264))
	cols = append(cols, createCol("SECURITY_TYPE", 2074))
	cols = append(cols, createCol("CREATED", 2061))
	cols = append(cols, createCol("LAST_ALTERED", 2061))
	cols = append(cols, createCol("SQL_MODE", 2075))
	cols = append(cols, createCol("ROUTINE_COMMENT", 6163))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["ROUTINES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["SCHEMA_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CATALOG_NAME", 6165))
	cols = append(cols, createCol("SCHEMA_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_CHARACTER_SET_NAME", 6165))
	cols = append(cols, createCol("DEFAULT_COLLATION_NAME", 6165))
	cols = append(cols, createCol("SQL_PATH", 10264))
	cols = append(cols, createCol("DEFAULT_ENCRYPTION", 2074))
	infSchema["SCHEMATA"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CATALOG_NAME", 6165))
	cols = append(cols, createCol("SCHEMA_NAME", 6165))
	cols = append(cols, createCol("OPTIONS", 6165))
	infSchema["SCHEMATA_EXTENSIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("SRS_NAME", 6165))
	cols = append(cols, createCol("SRS_ID", 776))
	cols = append(cols, createCol("GEOMETRY_TYPE_NAME", 6163))
	infSchema["ST_GEOMETRY_COLUMNS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("SRS_NAME", 6165))
	cols = append(cols, createCol("SRS_ID", 776))
	cols = append(cols, createCol("ORGANIZATION", 6165))
	cols = append(cols, createCol("ORGANIZATION_COORDSYS_ID", 776))
	cols = append(cols, createCol("DEFINITION", 6165))
	cols = append(cols, createCol("DESCRIPTION", 6165))
	infSchema["ST_SPATIAL_REFERENCE_SYSTEMS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("UNIT_NAME", 6165))
	cols = append(cols, createCol("UNIT_TYPE", 6165))
	cols = append(cols, createCol("CONVERSION_FACTOR", 1036))
	cols = append(cols, createCol("DESCRIPTION", 6165))
	infSchema["ST_UNITS_OF_MEASURE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("NON_UNIQUE", 263))
	cols = append(cols, createCol("INDEX_SCHEMA", 6165))
	cols = append(cols, createCol("INDEX_NAME", 6165))
	cols = append(cols, createCol("SEQ_IN_INDEX", 776))
	cols = append(cols, createCol("COLUMN_NAME", 6165))
	cols = append(cols, createCol("COLLATION", 6165))
	cols = append(cols, createCol("CARDINALITY", 265))
	cols = append(cols, createCol("SUB_PART", 265))
	cols = append(cols, createCol("PACKED", 10264))
	cols = append(cols, createCol("NULLABLE", 6165))
	cols = append(cols, createCol("INDEX_TYPE", 6165))
	cols = append(cols, createCol("COMMENT", 6165))
	cols = append(cols, createCol("INDEX_COMMENT", 6165))
	cols = append(cols, createCol("IS_VISIBLE", 6165))
	cols = append(cols, createCol("EXPRESSION", 6163))
	infSchema["STATISTICS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("CONSTRAINT_TYPE", 6165))
	cols = append(cols, createCol("ENFORCED", 6165))
	infSchema["TABLE_CONSTRAINTS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("CONSTRAINT_CATALOG", 6165))
	cols = append(cols, createCol("CONSTRAINT_SCHEMA", 6165))
	cols = append(cols, createCol("CONSTRAINT_NAME", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("ENGINE_ATTRIBUTE", 2078))
	cols = append(cols, createCol("SECONDARY_ENGINE_ATTRIBUTE", 2078))
	infSchema["TABLE_CONSTRAINTS_EXTENSIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["TABLE_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("TABLE_TYPE", 2074))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("VERSION", 263))
	cols = append(cols, createCol("ROW_FORMAT", 2074))
	cols = append(cols, createCol("TABLE_ROWS", 778))
	cols = append(cols, createCol("AVG_ROW_LENGTH", 778))
	cols = append(cols, createCol("DATA_LENGTH", 778))
	cols = append(cols, createCol("MAX_DATA_LENGTH", 778))
	cols = append(cols, createCol("INDEX_LENGTH", 778))
	cols = append(cols, createCol("DATA_FREE", 778))
	cols = append(cols, createCol("AUTO_INCREMENT", 778))
	cols = append(cols, createCol("CREATE_TIME", 2061))
	cols = append(cols, createCol("UPDATE_TIME", 2064))
	cols = append(cols, createCol("CHECK_TIME", 2064))
	cols = append(cols, createCol("TABLE_COLLATION", 6165))
	cols = append(cols, createCol("CHECKSUM", 265))
	cols = append(cols, createCol("CREATE_OPTIONS", 6165))
	cols = append(cols, createCol("TABLE_COMMENT", 6163))
	infSchema["TABLES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("ENGINE_ATTRIBUTE", 2078))
	cols = append(cols, createCol("SECONDARY_ENGINE_ATTRIBUTE", 2078))
	infSchema["TABLES_EXTENSIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	cols = append(cols, createCol("ENGINE", 6165))
	cols = append(cols, createCol("TABLESPACE_TYPE", 6165))
	cols = append(cols, createCol("LOGFILE_GROUP_NAME", 6165))
	cols = append(cols, createCol("EXTENT_SIZE", 778))
	cols = append(cols, createCol("AUTOEXTEND_SIZE", 778))
	cols = append(cols, createCol("MAXIMUM_SIZE", 778))
	cols = append(cols, createCol("NODEGROUP_ID", 778))
	cols = append(cols, createCol("TABLESPACE_COMMENT", 6165))
	infSchema["TABLESPACES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLESPACE_NAME", 6165))
	cols = append(cols, createCol("ENGINE_ATTRIBUTE", 2078))
	infSchema["TABLESPACES_EXTENSIONS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TRIGGER_CATALOG", 6165))
	cols = append(cols, createCol("TRIGGER_SCHEMA", 6165))
	cols = append(cols, createCol("TRIGGER_NAME", 6165))
	cols = append(cols, createCol("EVENT_MANIPULATION", 2074))
	cols = append(cols, createCol("EVENT_OBJECT_CATALOG", 6165))
	cols = append(cols, createCol("EVENT_OBJECT_SCHEMA", 6165))
	cols = append(cols, createCol("EVENT_OBJECT_TABLE", 6165))
	cols = append(cols, createCol("ACTION_ORDER", 776))
	cols = append(cols, createCol("ACTION_CONDITION", 10264))
	cols = append(cols, createCol("ACTION_STATEMENT", 6163))
	cols = append(cols, createCol("ACTION_ORIENTATION", 6165))
	cols = append(cols, createCol("ACTION_TIMING", 2074))
	cols = append(cols, createCol("ACTION_REFERENCE_OLD_TABLE", 10264))
	cols = append(cols, createCol("ACTION_REFERENCE_NEW_TABLE", 10264))
	cols = append(cols, createCol("ACTION_REFERENCE_OLD_ROW", 6165))
	cols = append(cols, createCol("ACTION_REFERENCE_NEW_ROW", 6165))
	cols = append(cols, createCol("CREATED", 2061))
	cols = append(cols, createCol("SQL_MODE", 2075))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	cols = append(cols, createCol("DATABASE_COLLATION", 6165))
	infSchema["TRIGGERS"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("USER", 6167))
	cols = append(cols, createCol("HOST", 6167))
	cols = append(cols, createCol("ATTRIBUTE", 6163))
	infSchema["USER_ATTRIBUTES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("GRANTEE", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("PRIVILEGE_TYPE", 6165))
	cols = append(cols, createCol("IS_GRANTABLE", 6165))
	infSchema["USER_PRIVILEGES"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("SPECIFIC_CATALOG", 6165))
	cols = append(cols, createCol("SPECIFIC_SCHEMA", 6165))
	cols = append(cols, createCol("SPECIFIC_NAME", 6165))
	infSchema["VIEW_ROUTINE_USAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("VIEW_CATALOG", 6165))
	cols = append(cols, createCol("VIEW_SCHEMA", 6165))
	cols = append(cols, createCol("VIEW_NAME", 6165))
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	infSchema["VIEW_TABLE_USAGE"] = cols
	cols = []vindexes.Column{}
	cols = append(cols, createCol("TABLE_CATALOG", 6165))
	cols = append(cols, createCol("TABLE_SCHEMA", 6165))
	cols = append(cols, createCol("TABLE_NAME", 6165))
	cols = append(cols, createCol("VIEW_DEFINITION", 6163))
	cols = append(cols, createCol("CHECK_OPTION", 2074))
	cols = append(cols, createCol("IS_UPDATABLE", 2074))
	cols = append(cols, createCol("DEFINER", 6165))
	cols = append(cols, createCol("SECURITY_TYPE", 6165))
	cols = append(cols, createCol("CHARACTER_SET_CLIENT", 6165))
	cols = append(cols, createCol("COLLATION_CONNECTION", 6165))
	infSchema["VIEWS"] = cols

	return infSchema
}

type infoSchemaWithColumns struct {
	inner          SchemaInformation
	infoSchemaData map[string][]vindexes.Column
}

// newSchemaInfo returns a SchemaInformation that has the column information for all info_schema tables
func newSchemaInfo(inner SchemaInformation) SchemaInformation {
	version := servenv.MySQLServerVersion()
	var infoSchema map[string][]vindexes.Column
	if strings.HasPrefix(version, "5.7") {
		infoSchema = getInfoSchema57()
	} else {
		infoSchema = getInfoSchema80()
	}
	return &infoSchemaWithColumns{inner: inner, infoSchemaData: infoSchema}
}

// FindTableOrVindex implements the SchemaInformation interface
func (i *infoSchemaWithColumns) FindTableOrVindex(tbl sqlparser.TableName) (*vindexes.Table, vindexes.Vindex, string, topodatapb.TabletType, key.Destination, error) {
	if !strings.EqualFold(tbl.Qualifier.String(), "information_schema") {
		return i.inner.FindTableOrVindex(tbl)
	}

	ks := vindexes.Keyspace{
		Name:    "information_schema",
		Sharded: false,
	}
	cols := i.infoSchemaData[strings.ToUpper(tbl.Name.String())]
	vtbl := &vindexes.Table{
		Type:                    "View",
		Name:                    sqlparser.NewIdentifierCS(tbl.Name.String()),
		Keyspace:                &ks,
		Columns:                 cols,
		ColumnListAuthoritative: true,
	}
	return vtbl, nil, "", topodatapb.TabletType_UNKNOWN, nil, nil
}

// ConnCollation implements the SchemaInformation interface
func (i *infoSchemaWithColumns) ConnCollation() collations.ID {
	return i.inner.ConnCollation()
}
