// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package vtgateservice_testing is a generated GoMock package.
package vtgateservice_testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	sqltypes "vitess.io/vitess/go/sqltypes"
	query "vitess.io/vitess/go/vt/proto/query"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vtgate "vitess.io/vitess/go/vt/proto/vtgate"
)

// MockVTGateService is a mock of VTGateService interface
type MockVTGateService struct {
	ctrl     *gomock.Controller
	recorder *MockVTGateServiceMockRecorder
}

// MockVTGateServiceMockRecorder is the mock recorder for MockVTGateService
type MockVTGateServiceMockRecorder struct {
	mock *MockVTGateService
}

// NewMockVTGateService creates a new mock instance
func NewMockVTGateService(ctrl *gomock.Controller) *MockVTGateService {
	mock := &MockVTGateService{ctrl: ctrl}
	mock.recorder = &MockVTGateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVTGateService) EXPECT() *MockVTGateServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockVTGateService) Execute(ctx context.Context, session *vtgate.Session, sql string, bindVariables map[string]*query.BindVariable) (*vtgate.Session, *sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "Execute", ctx, session, sql, bindVariables)
	ret0, _ := ret[0].(*vtgate.Session)
	ret1, _ := ret[1].(*sqltypes.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockVTGateServiceMockRecorder) Execute(ctx, session, sql, bindVariables interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVTGateService)(nil).Execute), ctx, session, sql, bindVariables)
}

// ExecuteBatch mocks base method
func (m *MockVTGateService) ExecuteBatch(ctx context.Context, session *vtgate.Session, sqlList []string, bindVariablesList []map[string]*query.BindVariable) (*vtgate.Session, []sqltypes.QueryResponse, error) {
	ret := m.ctrl.Call(m, "ExecuteBatch", ctx, session, sqlList, bindVariablesList)
	ret0, _ := ret[0].(*vtgate.Session)
	ret1, _ := ret[1].([]sqltypes.QueryResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteBatch indicates an expected call of ExecuteBatch
func (mr *MockVTGateServiceMockRecorder) ExecuteBatch(ctx, session, sqlList, bindVariablesList interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatch", reflect.TypeOf((*MockVTGateService)(nil).ExecuteBatch), ctx, session, sqlList, bindVariablesList)
}

// StreamExecute mocks base method
func (m *MockVTGateService) StreamExecute(ctx context.Context, session *vtgate.Session, sql string, bindVariables map[string]*query.BindVariable, callback func(*sqltypes.Result) error) error {
	ret := m.ctrl.Call(m, "StreamExecute", ctx, session, sql, bindVariables, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamExecute indicates an expected call of StreamExecute
func (mr *MockVTGateServiceMockRecorder) StreamExecute(ctx, session, sql, bindVariables, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecute", reflect.TypeOf((*MockVTGateService)(nil).StreamExecute), ctx, session, sql, bindVariables, callback)
}

// ExecuteShards mocks base method
func (m *MockVTGateService) ExecuteShards(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, shards []string, tabletType topodata.TabletType, session *vtgate.Session, notInTransaction bool, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteShards", ctx, sql, bindVariables, keyspace, shards, tabletType, session, notInTransaction, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteShards indicates an expected call of ExecuteShards
func (mr *MockVTGateServiceMockRecorder) ExecuteShards(ctx, sql, bindVariables, keyspace, shards, tabletType, session, notInTransaction, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteShards", reflect.TypeOf((*MockVTGateService)(nil).ExecuteShards), ctx, sql, bindVariables, keyspace, shards, tabletType, session, notInTransaction, options)
}

// ExecuteKeyspaceIds mocks base method
func (m *MockVTGateService) ExecuteKeyspaceIds(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, keyspaceIds [][]byte, tabletType topodata.TabletType, session *vtgate.Session, notInTransaction bool, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteKeyspaceIds", ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, session, notInTransaction, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteKeyspaceIds indicates an expected call of ExecuteKeyspaceIds
func (mr *MockVTGateServiceMockRecorder) ExecuteKeyspaceIds(ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, session, notInTransaction, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteKeyspaceIds", reflect.TypeOf((*MockVTGateService)(nil).ExecuteKeyspaceIds), ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, session, notInTransaction, options)
}

// ExecuteKeyRanges mocks base method
func (m *MockVTGateService) ExecuteKeyRanges(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, keyRanges []*topodata.KeyRange, tabletType topodata.TabletType, session *vtgate.Session, notInTransaction bool, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteKeyRanges", ctx, sql, bindVariables, keyspace, keyRanges, tabletType, session, notInTransaction, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteKeyRanges indicates an expected call of ExecuteKeyRanges
func (mr *MockVTGateServiceMockRecorder) ExecuteKeyRanges(ctx, sql, bindVariables, keyspace, keyRanges, tabletType, session, notInTransaction, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteKeyRanges", reflect.TypeOf((*MockVTGateService)(nil).ExecuteKeyRanges), ctx, sql, bindVariables, keyspace, keyRanges, tabletType, session, notInTransaction, options)
}

// ExecuteEntityIds mocks base method
func (m *MockVTGateService) ExecuteEntityIds(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace, entityColumnName string, entityKeyspaceIDs []*vtgate.ExecuteEntityIdsRequest_EntityId, tabletType topodata.TabletType, session *vtgate.Session, notInTransaction bool, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteEntityIds", ctx, sql, bindVariables, keyspace, entityColumnName, entityKeyspaceIDs, tabletType, session, notInTransaction, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteEntityIds indicates an expected call of ExecuteEntityIds
func (mr *MockVTGateServiceMockRecorder) ExecuteEntityIds(ctx, sql, bindVariables, keyspace, entityColumnName, entityKeyspaceIDs, tabletType, session, notInTransaction, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteEntityIds", reflect.TypeOf((*MockVTGateService)(nil).ExecuteEntityIds), ctx, sql, bindVariables, keyspace, entityColumnName, entityKeyspaceIDs, tabletType, session, notInTransaction, options)
}

// ExecuteBatchShards mocks base method
func (m *MockVTGateService) ExecuteBatchShards(ctx context.Context, queries []*vtgate.BoundShardQuery, tabletType topodata.TabletType, asTransaction bool, session *vtgate.Session, options *query.ExecuteOptions) ([]sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteBatchShards", ctx, queries, tabletType, asTransaction, session, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBatchShards indicates an expected call of ExecuteBatchShards
func (mr *MockVTGateServiceMockRecorder) ExecuteBatchShards(ctx, queries, tabletType, asTransaction, session, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatchShards", reflect.TypeOf((*MockVTGateService)(nil).ExecuteBatchShards), ctx, queries, tabletType, asTransaction, session, options)
}

// ExecuteBatchKeyspaceIds mocks base method
func (m *MockVTGateService) ExecuteBatchKeyspaceIds(ctx context.Context, queries []*vtgate.BoundKeyspaceIdQuery, tabletType topodata.TabletType, asTransaction bool, session *vtgate.Session, options *query.ExecuteOptions) ([]sqltypes.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteBatchKeyspaceIds", ctx, queries, tabletType, asTransaction, session, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBatchKeyspaceIds indicates an expected call of ExecuteBatchKeyspaceIds
func (mr *MockVTGateServiceMockRecorder) ExecuteBatchKeyspaceIds(ctx, queries, tabletType, asTransaction, session, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatchKeyspaceIds", reflect.TypeOf((*MockVTGateService)(nil).ExecuteBatchKeyspaceIds), ctx, queries, tabletType, asTransaction, session, options)
}

// StreamExecuteShards mocks base method
func (m *MockVTGateService) StreamExecuteShards(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, shards []string, tabletType topodata.TabletType, options *query.ExecuteOptions, callback func(*sqltypes.Result) error) error {
	ret := m.ctrl.Call(m, "StreamExecuteShards", ctx, sql, bindVariables, keyspace, shards, tabletType, options, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamExecuteShards indicates an expected call of StreamExecuteShards
func (mr *MockVTGateServiceMockRecorder) StreamExecuteShards(ctx, sql, bindVariables, keyspace, shards, tabletType, options, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecuteShards", reflect.TypeOf((*MockVTGateService)(nil).StreamExecuteShards), ctx, sql, bindVariables, keyspace, shards, tabletType, options, callback)
}

// StreamExecuteKeyspaceIds mocks base method
func (m *MockVTGateService) StreamExecuteKeyspaceIds(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, keyspaceIds [][]byte, tabletType topodata.TabletType, options *query.ExecuteOptions, callback func(*sqltypes.Result) error) error {
	ret := m.ctrl.Call(m, "StreamExecuteKeyspaceIds", ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, options, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamExecuteKeyspaceIds indicates an expected call of StreamExecuteKeyspaceIds
func (mr *MockVTGateServiceMockRecorder) StreamExecuteKeyspaceIds(ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, options, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecuteKeyspaceIds", reflect.TypeOf((*MockVTGateService)(nil).StreamExecuteKeyspaceIds), ctx, sql, bindVariables, keyspace, keyspaceIds, tabletType, options, callback)
}

// StreamExecuteKeyRanges mocks base method
func (m *MockVTGateService) StreamExecuteKeyRanges(ctx context.Context, sql string, bindVariables map[string]*query.BindVariable, keyspace string, keyRanges []*topodata.KeyRange, tabletType topodata.TabletType, options *query.ExecuteOptions, callback func(*sqltypes.Result) error) error {
	ret := m.ctrl.Call(m, "StreamExecuteKeyRanges", ctx, sql, bindVariables, keyspace, keyRanges, tabletType, options, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamExecuteKeyRanges indicates an expected call of StreamExecuteKeyRanges
func (mr *MockVTGateServiceMockRecorder) StreamExecuteKeyRanges(ctx, sql, bindVariables, keyspace, keyRanges, tabletType, options, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecuteKeyRanges", reflect.TypeOf((*MockVTGateService)(nil).StreamExecuteKeyRanges), ctx, sql, bindVariables, keyspace, keyRanges, tabletType, options, callback)
}

// Begin mocks base method
func (m *MockVTGateService) Begin(ctx context.Context, singledb bool) (*vtgate.Session, error) {
	ret := m.ctrl.Call(m, "Begin", ctx, singledb)
	ret0, _ := ret[0].(*vtgate.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockVTGateServiceMockRecorder) Begin(ctx, singledb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockVTGateService)(nil).Begin), ctx, singledb)
}

// Commit mocks base method
func (m *MockVTGateService) Commit(ctx context.Context, twopc bool, session *vtgate.Session) error {
	ret := m.ctrl.Call(m, "Commit", ctx, twopc, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockVTGateServiceMockRecorder) Commit(ctx, twopc, session interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockVTGateService)(nil).Commit), ctx, twopc, session)
}

// Rollback mocks base method
func (m *MockVTGateService) Rollback(ctx context.Context, session *vtgate.Session) error {
	ret := m.ctrl.Call(m, "Rollback", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockVTGateServiceMockRecorder) Rollback(ctx, session interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockVTGateService)(nil).Rollback), ctx, session)
}

// ResolveTransaction mocks base method
func (m *MockVTGateService) ResolveTransaction(ctx context.Context, dtid string) error {
	ret := m.ctrl.Call(m, "ResolveTransaction", ctx, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveTransaction indicates an expected call of ResolveTransaction
func (mr *MockVTGateServiceMockRecorder) ResolveTransaction(ctx, dtid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTransaction", reflect.TypeOf((*MockVTGateService)(nil).ResolveTransaction), ctx, dtid)
}

// MessageStream mocks base method
func (m *MockVTGateService) MessageStream(ctx context.Context, keyspace, shard string, keyRange *topodata.KeyRange, name string, callback func(*sqltypes.Result) error) error {
	ret := m.ctrl.Call(m, "MessageStream", ctx, keyspace, shard, keyRange, name, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageStream indicates an expected call of MessageStream
func (mr *MockVTGateServiceMockRecorder) MessageStream(ctx, keyspace, shard, keyRange, name, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageStream", reflect.TypeOf((*MockVTGateService)(nil).MessageStream), ctx, keyspace, shard, keyRange, name, callback)
}

// MessageAck mocks base method
func (m *MockVTGateService) MessageAck(ctx context.Context, keyspace, name string, ids []*query.Value) (int64, error) {
	ret := m.ctrl.Call(m, "MessageAck", ctx, keyspace, name, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageAck indicates an expected call of MessageAck
func (mr *MockVTGateServiceMockRecorder) MessageAck(ctx, keyspace, name, ids interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAck", reflect.TypeOf((*MockVTGateService)(nil).MessageAck), ctx, keyspace, name, ids)
}

// MessageAckKeyspaceIds mocks base method
func (m *MockVTGateService) MessageAckKeyspaceIds(ctx context.Context, keyspace, name string, idKeyspaceIDs []*vtgate.IdKeyspaceId) (int64, error) {
	ret := m.ctrl.Call(m, "MessageAckKeyspaceIds", ctx, keyspace, name, idKeyspaceIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageAckKeyspaceIds indicates an expected call of MessageAckKeyspaceIds
func (mr *MockVTGateServiceMockRecorder) MessageAckKeyspaceIds(ctx, keyspace, name, idKeyspaceIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAckKeyspaceIds", reflect.TypeOf((*MockVTGateService)(nil).MessageAckKeyspaceIds), ctx, keyspace, name, idKeyspaceIDs)
}

// SplitQuery mocks base method
func (m *MockVTGateService) SplitQuery(ctx context.Context, keyspace, sql string, bindVariables map[string]*query.BindVariable, splitColumns []string, splitCount, numRowsPerQueryPart int64, algorithm query.SplitQueryRequest_Algorithm) ([]*vtgate.SplitQueryResponse_Part, error) {
	ret := m.ctrl.Call(m, "SplitQuery", ctx, keyspace, sql, bindVariables, splitColumns, splitCount, numRowsPerQueryPart, algorithm)
	ret0, _ := ret[0].([]*vtgate.SplitQueryResponse_Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitQuery indicates an expected call of SplitQuery
func (mr *MockVTGateServiceMockRecorder) SplitQuery(ctx, keyspace, sql, bindVariables, splitColumns, splitCount, numRowsPerQueryPart, algorithm interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitQuery", reflect.TypeOf((*MockVTGateService)(nil).SplitQuery), ctx, keyspace, sql, bindVariables, splitColumns, splitCount, numRowsPerQueryPart, algorithm)
}

// GetSrvKeyspace mocks base method
func (m *MockVTGateService) GetSrvKeyspace(ctx context.Context, keyspace string) (*topodata.SrvKeyspace, error) {
	ret := m.ctrl.Call(m, "GetSrvKeyspace", ctx, keyspace)
	ret0, _ := ret[0].(*topodata.SrvKeyspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSrvKeyspace indicates an expected call of GetSrvKeyspace
func (mr *MockVTGateServiceMockRecorder) GetSrvKeyspace(ctx, keyspace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSrvKeyspace", reflect.TypeOf((*MockVTGateService)(nil).GetSrvKeyspace), ctx, keyspace)
}

// UpdateStream mocks base method
func (m *MockVTGateService) UpdateStream(ctx context.Context, keyspace, shard string, keyRange *topodata.KeyRange, tabletType topodata.TabletType, timestamp int64, event *query.EventToken, callback func(*query.StreamEvent, int64) error) error {
	ret := m.ctrl.Call(m, "UpdateStream", ctx, keyspace, shard, keyRange, tabletType, timestamp, event, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStream indicates an expected call of UpdateStream
func (mr *MockVTGateServiceMockRecorder) UpdateStream(ctx, keyspace, shard, keyRange, tabletType, timestamp, event, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockVTGateService)(nil).UpdateStream), ctx, keyspace, shard, keyRange, tabletType, timestamp, event, callback)
}

// HandlePanic mocks base method
func (m *MockVTGateService) HandlePanic(err *error) {
	m.ctrl.Call(m, "HandlePanic", err)
}

// HandlePanic indicates an expected call of HandlePanic
func (mr *MockVTGateServiceMockRecorder) HandlePanic(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePanic", reflect.TypeOf((*MockVTGateService)(nil).HandlePanic), err)
}
