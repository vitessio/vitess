// Automatically generated by MockGen. DO NOT EDIT!
// Source: sql_executer_interface.go

package splitquery_testing

import (
	gomock "github.com/golang/mock/gomock"
	sqltypes "github.com/youtube/vitess/go/sqltypes"
)

// Mock of SQLExecuter interface
type MockSQLExecuter struct {
	ctrl     *gomock.Controller
	recorder *_MockSQLExecuterRecorder
}

// Recorder for MockSQLExecuter (not exported)
type _MockSQLExecuterRecorder struct {
	mock *MockSQLExecuter
}

func NewMockSQLExecuter(ctrl *gomock.Controller) *MockSQLExecuter {
	mock := &MockSQLExecuter{ctrl: ctrl}
	mock.recorder = &_MockSQLExecuterRecorder{mock}
	return mock
}

func (_m *MockSQLExecuter) EXPECT() *_MockSQLExecuterRecorder {
	return _m.recorder
}

func (_m *MockSQLExecuter) SQLExecute(sql string, bindVariables map[string]interface{}) (*sqltypes.Result, error) {
	ret := _m.ctrl.Call(_m, "SQLExecute", sql, bindVariables)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSQLExecuterRecorder) SQLExecute(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SQLExecute", arg0, arg1)
}
