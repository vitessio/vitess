// Automatically generated by MockGen. DO NOT EDIT!
// Source: queryservice.go

package queryservice_testing

import (
	gomock "github.com/golang/mock/gomock"
	sqltypes "github.com/youtube/vitess/go/sqltypes"
	query "github.com/youtube/vitess/go/vt/proto/query"
	querytypes "github.com/youtube/vitess/go/vt/tabletserver/querytypes"
	context "golang.org/x/net/context"
)

// Mock of QueryService interface
type MockQueryService struct {
	ctrl     *gomock.Controller
	recorder *_MockQueryServiceRecorder
}

// Recorder for MockQueryService (not exported)
type _MockQueryServiceRecorder struct {
	mock *MockQueryService
}

func NewMockQueryService(ctrl *gomock.Controller) *MockQueryService {
	mock := &MockQueryService{ctrl: ctrl}
	mock.recorder = &_MockQueryServiceRecorder{mock}
	return mock
}

func (_m *MockQueryService) EXPECT() *_MockQueryServiceRecorder {
	return _m.recorder
}

func (_m *MockQueryService) Begin(ctx context.Context, target *query.Target) (int64, error) {
	ret := _m.ctrl.Call(_m, "Begin", ctx, target)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin", arg0, arg1)
}

func (_m *MockQueryService) Commit(ctx context.Context, target *query.Target, transactionID int64) error {
	ret := _m.ctrl.Call(_m, "Commit", ctx, target, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) Commit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0, arg1, arg2)
}

func (_m *MockQueryService) Rollback(ctx context.Context, target *query.Target, transactionID int64) error {
	ret := _m.ctrl.Call(_m, "Rollback", ctx, target, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) Rollback(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback", arg0, arg1, arg2)
}

func (_m *MockQueryService) Prepare(ctx context.Context, target *query.Target, transactionID int64, dtid string) error {
	ret := _m.ctrl.Call(_m, "Prepare", ctx, target, transactionID, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) Prepare(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prepare", arg0, arg1, arg2, arg3)
}

func (_m *MockQueryService) CommitPrepared(ctx context.Context, target *query.Target, dtid string) error {
	ret := _m.ctrl.Call(_m, "CommitPrepared", ctx, target, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) CommitPrepared(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CommitPrepared", arg0, arg1, arg2)
}

func (_m *MockQueryService) RollbackPrepared(ctx context.Context, target *query.Target, dtid string, originalID int64) error {
	ret := _m.ctrl.Call(_m, "RollbackPrepared", ctx, target, dtid, originalID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) RollbackPrepared(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RollbackPrepared", arg0, arg1, arg2, arg3)
}

func (_m *MockQueryService) CreateTransaction(ctx context.Context, target *query.Target, dtid string, participants []*query.Target) error {
	ret := _m.ctrl.Call(_m, "CreateTransaction", ctx, target, dtid, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) CreateTransaction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTransaction", arg0, arg1, arg2, arg3)
}

func (_m *MockQueryService) StartCommit(ctx context.Context, target *query.Target, transactionID int64, dtid string) error {
	ret := _m.ctrl.Call(_m, "StartCommit", ctx, target, transactionID, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) StartCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartCommit", arg0, arg1, arg2, arg3)
}

func (_m *MockQueryService) SetRollback(ctx context.Context, target *query.Target, dtid string, transactionID int64) error {
	ret := _m.ctrl.Call(_m, "SetRollback", ctx, target, dtid, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) SetRollback(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRollback", arg0, arg1, arg2, arg3)
}

func (_m *MockQueryService) ResolveTransaction(ctx context.Context, target *query.Target, dtid string) error {
	ret := _m.ctrl.Call(_m, "ResolveTransaction", ctx, target, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) ResolveTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveTransaction", arg0, arg1, arg2)
}

func (_m *MockQueryService) ReadTransaction(ctx context.Context, target *query.Target, dtid string) (*query.TransactionMetadata, error) {
	ret := _m.ctrl.Call(_m, "ReadTransaction", ctx, target, dtid)
	ret0, _ := ret[0].(*query.TransactionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) ReadTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadTransaction", arg0, arg1, arg2)
}

func (_m *MockQueryService) Execute(ctx context.Context, target *query.Target, sql string, bindVariables map[string]interface{}, transactionID int64, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	ret := _m.ctrl.Call(_m, "Execute", ctx, target, sql, bindVariables, transactionID, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) Execute(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Execute", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockQueryService) StreamExecute(ctx context.Context, target *query.Target, sql string, bindVariables map[string]interface{}, options *query.ExecuteOptions, sendReply func(*sqltypes.Result) error) error {
	ret := _m.ctrl.Call(_m, "StreamExecute", ctx, target, sql, bindVariables, options, sendReply)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) StreamExecute(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StreamExecute", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockQueryService) ExecuteBatch(ctx context.Context, target *query.Target, queries []querytypes.BoundQuery, asTransaction bool, transactionID int64, options *query.ExecuteOptions) ([]sqltypes.Result, error) {
	ret := _m.ctrl.Call(_m, "ExecuteBatch", ctx, target, queries, asTransaction, transactionID, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) ExecuteBatch(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteBatch", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockQueryService) BeginExecute(ctx context.Context, target *query.Target, sql string, bindVariables map[string]interface{}, options *query.ExecuteOptions) (*sqltypes.Result, int64, error) {
	ret := _m.ctrl.Call(_m, "BeginExecute", ctx, target, sql, bindVariables, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockQueryServiceRecorder) BeginExecute(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginExecute", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockQueryService) BeginExecuteBatch(ctx context.Context, target *query.Target, queries []querytypes.BoundQuery, asTransaction bool, options *query.ExecuteOptions) ([]sqltypes.Result, int64, error) {
	ret := _m.ctrl.Call(_m, "BeginExecuteBatch", ctx, target, queries, asTransaction, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockQueryServiceRecorder) BeginExecuteBatch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginExecuteBatch", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockQueryService) SplitQuery(ctx context.Context, target *query.Target, sql string, bindVariables map[string]interface{}, splitColumn string, splitCount int64) ([]querytypes.QuerySplit, error) {
	ret := _m.ctrl.Call(_m, "SplitQuery", ctx, target, sql, bindVariables, splitColumn, splitCount)
	ret0, _ := ret[0].([]querytypes.QuerySplit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) SplitQuery(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SplitQuery", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockQueryService) SplitQueryV2(ctx context.Context, target *query.Target, sql string, bindVariables map[string]interface{}, splitColumns []string, splitCount int64, numRowsPerQueryPart int64, algorithm query.SplitQueryRequest_Algorithm) ([]querytypes.QuerySplit, error) {
	ret := _m.ctrl.Call(_m, "SplitQueryV2", ctx, target, sql, bindVariables, splitColumns, splitCount, numRowsPerQueryPart, algorithm)
	ret0, _ := ret[0].([]querytypes.QuerySplit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) SplitQueryV2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SplitQueryV2", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func (_m *MockQueryService) StreamHealthRegister(_param0 chan<- *query.StreamHealthResponse) (int, error) {
	ret := _m.ctrl.Call(_m, "StreamHealthRegister", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryServiceRecorder) StreamHealthRegister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StreamHealthRegister", arg0)
}

func (_m *MockQueryService) StreamHealthUnregister(_param0 int) error {
	ret := _m.ctrl.Call(_m, "StreamHealthUnregister", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) StreamHealthUnregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StreamHealthUnregister", arg0)
}

func (_m *MockQueryService) UpdateStream(ctx context.Context, target *query.Target, position string, timestamp int64, sendReply func(*query.StreamEvent) error) error {
	ret := _m.ctrl.Call(_m, "UpdateStream", ctx, target, position, timestamp, sendReply)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryServiceRecorder) UpdateStream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateStream", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockQueryService) HandlePanic(_param0 *error) {
	_m.ctrl.Call(_m, "HandlePanic", _param0)
}

func (_mr *_MockQueryServiceRecorder) HandlePanic(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandlePanic", arg0)
}
