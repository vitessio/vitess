// Automatically generated by MockGen. DO NOT EDIT!
// Source: wrangler_interface.go

package resharding

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	topodata "github.com/youtube/vitess/go/vt/proto/topodata"
	context "golang.org/x/net/context"
)

// Mock of Wrangler interface
type MockWrangler struct {
	ctrl     *gomock.Controller
	recorder *_MockWranglerRecorder
}

// Recorder for MockWrangler (not exported)
type _MockWranglerRecorder struct {
	mock *MockWrangler
}

func NewMockWrangler(ctrl *gomock.Controller) *MockWrangler {
	mock := &MockWrangler{ctrl: ctrl}
	mock.recorder = &_MockWranglerRecorder{mock}
	return mock
}

func (_m *MockWrangler) EXPECT() *_MockWranglerRecorder {
	return _m.recorder
}

func (_m *MockWrangler) CopySchemaShardFromShard(ctx context.Context, tables []string, excludeTables []string, includeViews bool, sourceKeyspace string, sourceShard string, destKeyspace string, destShard string, waitSlaveTimeout time.Duration) error {
	ret := _m.ctrl.Call(_m, "CopySchemaShardFromShard", ctx, tables, excludeTables, includeViews, sourceKeyspace, sourceShard, destKeyspace, destShard, waitSlaveTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWranglerRecorder) CopySchemaShardFromShard(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopySchemaShardFromShard", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

func (_m *MockWrangler) WaitForFilteredReplication(ctx context.Context, keyspace string, shard string) error {
	ret := _m.ctrl.Call(_m, "WaitForFilteredReplication", ctx, keyspace, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWranglerRecorder) WaitForFilteredReplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitForFilteredReplication", arg0, arg1, arg2)
}

func (_m *MockWrangler) MigrateServedTypes(ctx context.Context, keyspace string, shard string, cells []string, servedType topodata.TabletType, reverse bool, skipReFreshState bool, filteredReplicationWaitTime time.Duration) error {
	ret := _m.ctrl.Call(_m, "MigrateServedTypes", ctx, keyspace, shard, cells, servedType, reverse, skipReFreshState, filteredReplicationWaitTime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWranglerRecorder) MigrateServedTypes(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MigrateServedTypes", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
