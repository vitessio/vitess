# Create tables
CREATE TABLE employees
(
    id         INT PRIMARY KEY,
    name       VARCHAR(100),
    manager_id INT
);

# Simple recursive CTE using a real table. Select everything from empty table
with recursive cte as (select * from employees union all select * from cte)
select *
from cte;

# Insert data into the tables
INSERT INTO employees (id, name, manager_id)
VALUES (1, 'CEO', NULL),
       (2, 'CTO', 1),
       (3, 'CFO', 1),
       (4, 'Engineer1', 2),
       (5, 'Engineer2', 2),
       (6, 'Accountant1', 3),
       (7, 'Accountant2', 3);

# Simple recursive CTE using literal values
WITH RECURSIVE numbers AS (SELECT 1 AS n
                           UNION ALL
                           SELECT n + 1
                           FROM numbers
                           WHERE n < 5)
SELECT *
FROM numbers;

# Simple recursive CTE using literal values, column named in the CTE def
WITH RECURSIVE numbers(n) AS (SELECT 1
                              UNION ALL
                              SELECT n + 1
                              FROM numbers
                              WHERE n < 5)
SELECT *
FROM numbers;

# Recursive CTE joined with a normal table
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT *
FROM emp_cte;

# Recursive CTE used in a derived table outside the CTE definition
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT derived.id, derived.name, derived.manager_id
FROM (SELECT * FROM emp_cte) AS derived;

# Recursive CTE with additional computation
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id, 1 AS level
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id, cte.level + 1
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT *
FROM emp_cte;

# Recursive CTE with filtering in the recursive part
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id
                           WHERE e.name LIKE 'Engineer%')
SELECT *
FROM emp_cte;

# Recursive CTE with limit
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT *
FROM emp_cte
LIMIT 5;

# Recursive CTE using literal values and joined with a real table on the outside
WITH RECURSIVE literal_cte AS (SELECT 1 AS id, 100 AS value, 1 AS manager_id
                               UNION ALL
                               SELECT id + 1, value * 2, id
                               FROM literal_cte
                               WHERE id < 5)
SELECT l.id, l.value, l.manager_id, e.name AS employee_name
FROM literal_cte l
         LEFT JOIN employees e ON l.id = e.id;

# Recursive CTE with aggregation outside the CTE
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT manager_id, COUNT(*) AS employee_count
FROM emp_cte
GROUP BY manager_id;

--error infinite recursion
with recursive cte as (select 1 as n union all select n+1 from cte)
select *
from cte;

# Define recursive CTE and then use it on the RHS of UNION
WITH RECURSIVE foo AS (SELECT id
                       FROM employees
                       WHERE id = 1
                       UNION ALL
                       SELECT id + 1
                       FROM foo
                       WHERE id < 5)
SELECT id
FROM foo;

# Recursive CTE with UNION DISTINCT
WITH RECURSIVE hierarchy AS (SELECT id, name, manager_id
                             FROM employees
                             UNION ALL
                             SELECT id, name, manager_id
                             FROM employees
                             UNION
                             DISTINCT
                             SELECT id * 2, name, manager_id
                             from hierarchy
                             WHERE id < 10)
SELECT *
FROM hierarchy;

# Select with false condition
with recursive cte as (select * from employees where false union all select * from cte)
select *
from cte;

# Select with no matching rows
with recursive cte as (select * from employees where id > 100 union all select * from cte)
select *
from cte;

# Recursive CTE joined with a normal table. Predicate on the outside should not be pushed in
WITH RECURSIVE emp_cte AS (SELECT id, name, manager_id
                           FROM employees
                           WHERE manager_id IS NULL
                           UNION ALL
                           SELECT e.id, e.name, e.manager_id
                           FROM employees e
                                    INNER JOIN emp_cte cte ON e.manager_id = cte.id)
SELECT *
FROM emp_cte
where name = 'Engineer1';

# Query with a recursive CTE in a subquery
SELECT *
FROM (SELECT 1 UNION ALL SELECT 2) AS dt(a)
WHERE EXISTS(WITH RECURSIVE qn AS (SELECT a * 0 AS b UNION ALL SELECT b + 1 FROM qn WHERE b = 0)
             SELECT *
             FROM qn
             WHERE b = a);

# Join with recursive CTE inside a derived table using data from DUAL
SELECT e.id, e.name, e.manager_id, d.id AS cte_id
FROM employees e
         JOIN (WITH RECURSIVE foo AS (SELECT 1 AS id
                                      UNION ALL
                                      SELECT id + 1
                                      FROM foo
                                      WHERE id < 5)
               SELECT id
               FROM foo) d ON e.id = d.id;

# Join with recursive CTE inside a derived table using data from employees table
SELECT e.id, e.name, e.manager_id, d.id AS cte_id
FROM employees e
         JOIN (WITH RECURSIVE foo AS (SELECT id
                                      FROM employees
                                      WHERE manager_id IS NULL
                                      UNION ALL
                                      SELECT e.id
                                      FROM employees e
                                               JOIN foo f ON e.manager_id = f.id)
               SELECT id
               FROM foo) d ON e.id = d.id;

# Recursive CTE within an uncorrelated subquery as a select expression
SELECT e.id,
       e.name,
       e.manager_id,
       (SELECT MAX(cte_id)
        FROM (WITH RECURSIVE foo AS (SELECT 1 AS cte_id
                                     UNION ALL
                                     SELECT cte_id + 1
                                     FROM foo
                                     WHERE cte_id < e.id)
              SELECT cte_id
              FROM foo) AS recursive_result) AS max_cte_id
FROM employees e;

# Recursive CTE used twice in the same query
WITH RECURSIVE employee_hierarchy AS (SELECT id, name, manager_id, 1 AS level
                                      FROM employees
                                      WHERE manager_id IS NULL
                                      UNION ALL
                                      SELECT e.id, e.name, e.manager_id, h.level + 1
                                      FROM employees e
                                               JOIN employee_hierarchy h ON e.manager_id = h.id)
SELECT h1.id    AS employee_id,
       h1.name  AS employee_name,
       h1.level AS employee_level,
       h2.name  AS manager_name,
       h2.level AS manager_level
FROM employee_hierarchy h1
         LEFT JOIN
     employee_hierarchy h2 ON h1.manager_id = h2.id
ORDER BY h1.level, h1.id;