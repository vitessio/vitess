CREATE TABLE `t1`
(
    `id`   int unsigned NOT NULL AUTO_INCREMENT,
    `name` varchar(191) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE InnoDB,
  CHARSET utf8mb4,
  COLLATE utf8mb4_unicode_ci;

CREATE TABLE `t2`
(
    `id`    bigint unsigned NOT NULL AUTO_INCREMENT,
    `t1_id` int unsigned NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE InnoDB,
  CHARSET utf8mb4,
  COLLATE utf8mb4_unicode_ci;

CREATE TABLE `t3`
(
    `id`   bigint unsigned NOT NULL AUTO_INCREMENT,
    `name` varchar(191) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE InnoDB,
  CHARSET utf8mb4,
  COLLATE utf8mb4_unicode_ci;

CREATE TABLE `t4`
(
    `id`  bigint unsigned NOT NULL AUTO_INCREMENT,
    `col` int unsigned NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE InnoDB,
  CHARSET utf8mb4,
  COLLATE utf8mb4_unicode_ci;

insert into t1 (id, name)
values (1, 'A'),
       (2, 'B'),
       (3, 'C'),
       (4, 'D');

insert into t2 (id, t1_id)
values (1, 1),
       (2, 2),
       (3, 3);

insert into t3 (id, name)
values (1, 'A'),
       (2, 'B'),
       (3, 'B'),
       (4, 'B'),
       (5, 'B');

insert into t4 (id, col)
values (1, 1),
       (2, 2),
       (3, 3);

-- wait_authoritative t1
-- wait_authoritative t2
-- wait_authoritative t3
select 42
from t1
         join t2 on t1.id = t2.t1_id
         join t3 on t1.id = t3.id
where t1.name
   or t2.id
   or t3.name;

# Complex query that requires hash join underneath a memory sort and ordered aggregate
select 1
from t1
         join t2 on t1.id = t2.t1_id
         join t4 on t4.col = t2.id
         left join (select t4.col, count(*) as count from t4 group by t4.col) t3 on t3.col = t2.id
where t1.id IN (1, 2)
group by t2.id, t4.col;
