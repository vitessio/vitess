/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package random

import (
	"fmt"
	"math/rand"
	"time"

	"golang.org/x/exp/slices"

	"vitess.io/vitess/go/slices2"
	"vitess.io/vitess/go/vt/log"
	"vitess.io/vitess/go/vt/sqlparser"
)

// this file contains the structs and functions to generate random queries

// if true then known failing query types are still generated by randomQuery()
const testFailingQueries = false

type (
	column struct {
		tableName string
		name      string
		typ       string
	}
	tableT struct {
		// the tableT struct can be used to represent the schema of a table or a derived table
		// in the former case name will be a sqlparser.TableName, in the latter a sqlparser.DerivedTable
		// in order to create a query with a derived table, its AST form is retrieved from name
		// once the derived table is aliased, name is replaced by a sqlparser.TableName with that alias
		name sqlparser.SimpleTableExpr
		cols []column
	}
)

var _ sqlparser.ExprGenerator = (*tableT)(nil)

func (t *tableT) typeExpr(typ string) sqlparser.Expr {
	tableCopy := t.clone()

	for len(tableCopy.cols) > 0 {
		idx := rand.Intn(len(tableCopy.cols))
		randCol := tableCopy.cols[idx]
		if randCol.typ == typ {
			newTableName := ""
			if tName, ok := tableCopy.name.(sqlparser.TableName); ok {
				newTableName = sqlparser.String(tName.Name)
			}
			return sqlparser.NewColNameWithQualifier(randCol.name, sqlparser.NewTableName(newTableName))
		}

		// delete randCol from table.columns
		tableCopy.cols[idx] = tableCopy.cols[len(tableCopy.cols)-1]
		tableCopy.cols = tableCopy.cols[:len(tableCopy.cols)-1]
	}

	return nil
}

func (t *tableT) IntExpr() sqlparser.Expr {
	// TODO: better way to check if int type?
	return t.typeExpr("bigint")
}

func (t *tableT) StringExpr() sqlparser.Expr {
	return t.typeExpr("varchar")
}

// setName sets the alias for t, as well as setting the tableName for all columns in cols
func (t *tableT) setName(newName string) {
	t.name = sqlparser.NewTableName(newName)
	for i := range t.cols {
		t.cols[i].tableName = newName
	}
}

// setColumns sets the columns of t, and automatically assigns tableName
// this makes it unnatural (but still possible as cols is exportable) to modify tableName
func (t *tableT) setColumns(col ...column) {
	t.cols = nil
	t.addColumns(col...)
}

// addColumns adds columns to t, and automatically assigns tableName
// this makes it unnatural (but still possible as cols is exportable) to modify tableName
func (t *tableT) addColumns(col ...column) {
	for i := range col {
		// only change the Col's tableName if t is of type tableName
		if tName, ok := t.name.(sqlparser.TableName); ok {
			col[i].tableName = sqlparser.String(tName.Name)
		}

		t.cols = append(t.cols, col[i])
	}
}

// clone returns a deep copy of t
func (t *tableT) clone() *tableT {
	return &tableT{
		name: t.name,
		cols: slices.Clone(t.cols),
	}
}

// getColumnName returns tableName.name
func (c *column) getColumnName() string {
	return fmt.Sprintf("%s.%s", c.tableName, c.name)
}

func randomQuery(schemaTables []tableT, maxAggrs, maxGroupBy int) *sqlparser.Select {
	sel := &sqlparser.Select{}
	sel.SetComments(sqlparser.Comments{"/*vt+ PLANNER=Gen4 */"})

	// select distinct (fails with group by bigint)
	isDistinct := rand.Intn(2) < 1
	if isDistinct {
		sel.MakeDistinct()
	}

	// create both tables and join at the same time since both occupy the from clause
	tables, isJoin := createTablesAndJoin(schemaTables, sel)

	var (
		groupBy          sqlparser.GroupBy
		groupSelectExprs sqlparser.SelectExprs
		grouping         []column
	)
	// TODO: distinct makes vitess think there is grouping on aggregation columns
	if testFailingQueries || !isDistinct {
		groupBy, groupSelectExprs, grouping = createGroupBy(tables, maxGroupBy)
		sel.AddSelectExprs(groupSelectExprs)
		sel.GroupBy = groupBy

	}

	aggrExprs, aggregates := createAggregations(tables, maxAggrs)
	sel.AddSelectExprs(aggrExprs)

	// can add both aggregate and grouping columns to order by
	// TODO: order fails with distinct and outer joins
	isOrdered := rand.Intn(2) < 1 && (!isDistinct || testFailingQueries) && (!isJoin || testFailingQueries) && testFailingQueries
	// TODO: order by fails a lot; probably related to the previously passing query
	// TODO: should be fixed soon
	if isOrdered {
		sel.OrderBy = createOrderBy(groupBy, aggrExprs)
	}

	// where
	sel.AddWhere(sqlparser.AndExpressions(createWherePredicates(tables, false)...))

	// random predicate expression
	// TODO: random expressions cause a lot of failures
	if rand.Intn(2) < 1 && testFailingQueries {
		predRandomExpr := getRandomExpr(tables)
		sel.AddWhere(predRandomExpr)
	}

	// having
	isHaving := rand.Intn(2) < 1
	if isHaving {
		sel.AddHaving(sqlparser.AndExpressions(createHavingPredicates(tables)...))
		if rand.Intn(2) < 1 && testFailingQueries {
			// TODO: having can only contain aggregate or grouping columns in mysql, works fine in vitess
			// TODO: Can fix this by putting only the table with the grouping and aggregates column (newTable)
			sel.AddHaving(sqlparser.AndExpressions(createWherePredicates(tables, false)...))
		}
	}
	// TODO: use sqlparser.ExprGenerator to generate a random expression with aggregation functions

	// only add a limit if the grouping columns are ordered
	// TODO: limit fails a lot
	if rand.Intn(2) < 1 && (isOrdered || len(groupBy) == 0) && testFailingQueries {
		sel.Limit = createLimit()
	}

	var newTable tableT
	// add random expression to select
	// TODO: random expressions cause a lot of failures
	isRandomExpr := rand.Intn(2) < 1 && testFailingQueries
	var (
		randomExpr sqlparser.Expr
		typ        string
	)
	// TODO: selecting a random expression potentially with columns creates
	// TODO: only_full_group_by related errors in Vitess
	if testFailingQueries {
		randomExpr = getRandomExpr(tables)
	} else {
		randomExpr = getRandomExpr(nil)
	}

	// make sure we have at least one select expression
	if isRandomExpr || len(sel.SelectExprs) == 0 {
		// TODO: select distinct [literal] fails
		sel.Distinct = false

		sel.SelectExprs = append(sel.SelectExprs, sqlparser.NewAliasedExpr(randomExpr, "crandom0"))
		newTable.addColumns(column{
			name: "crandom0",
			typ:  typ,
		})

		// make sure to add the random expression to group by for only_full_group_by
		sel.AddGroupBy(randomExpr)
	}

	// add them to newTable
	newTable.addColumns(grouping...)
	newTable.addColumns(aggregates...)

	// add new table to schemaTables
	newTable.name = sqlparser.NewDerivedTable(false, sel)
	schemaTables = append(schemaTables, newTable)

	// derived tables (partially unsupported)
	// TODO: derived tables fails a lot
	if rand.Intn(10) < 1 && testFailingQueries {
		sel = randomQuery(schemaTables, 3, 3)
	}

	return sel
}

func createTablesAndJoin(schemaTables []tableT, sel *sqlparser.Select) ([]tableT, bool) {
	var tables []tableT
	// add at least one of original emp/dept tables for now because derived tables have nil columns
	tables = append(tables, schemaTables[rand.Intn(2)])

	sel.From = append(sel.From, newAliasedTable(tables[0], "tbl0"))
	tables[0].setName("tbl0")

	numTables := rand.Intn(len(schemaTables))
	for i := 0; i < numTables; i++ {
		tables = append(tables, randomEl(schemaTables))
		sel.From = append(sel.From, newAliasedTable(tables[i+1], fmt.Sprintf("tbl%d", i+1)))
		tables[i+1].setName(fmt.Sprintf("tbl%d", i+1))
	}

	// TODO: outer joins produce mismatched results
	isJoin := rand.Intn(2) < 1 && testFailingQueries
	if isJoin {
		newTable := randomEl(schemaTables)
		tables = append(tables, newTable)

		// create the join before aliasing
		newJoinTableExpr := createJoin(tables, sel)

		// alias
		tables[numTables+1].setName(fmt.Sprintf("tbl%d", numTables+1))

		// create the condition after aliasing
		newJoinTableExpr.Condition = sqlparser.NewJoinCondition(sqlparser.AndExpressions(createWherePredicates(tables, true)...), nil)
		sel.From[numTables] = newJoinTableExpr
	}

	return tables, isJoin
}

// creates a left join (without the condition) between the last table in sel and newTable
// tables should have one more table than sel
func createJoin(tables []tableT, sel *sqlparser.Select) *sqlparser.JoinTableExpr {
	n := len(sel.From)
	if len(tables) != n+1 {
		log.Fatalf("sel has %d tables and tables has %d tables", len(sel.From), n)
	}

	return sqlparser.NewJoinTableExpr(sel.From[n-1], sqlparser.LeftJoinType, newAliasedTable(tables[n], fmt.Sprintf("tbl%d", n)), nil)
}

// returns the grouping columns as three types: sqlparser.GroupBy, sqlparser.SelectExprs, []column
func createGroupBy(tables []tableT, maxGB int) (groupBy sqlparser.GroupBy, groupSelectExprs sqlparser.SelectExprs, grouping []column) {
	numGBs := rand.Intn(maxGB)
	for i := 0; i < numGBs; i++ {
		tblIdx := rand.Intn(len(tables))
		col := randomEl(tables[tblIdx].cols)
		// TODO: grouping by a date column sometimes errors
		if col.typ == "date" && !testFailingQueries {
			continue
		}
		groupBy = append(groupBy, newColumn(col))

		// add to select
		if rand.Intn(2) < 1 {
			groupSelectExprs = append(groupSelectExprs, newAliasedColumn(col, fmt.Sprintf("cgroup%d", i)))
			// TODO: alias in a separate function to properly generate the having clause
			col.name = fmt.Sprintf("cgroup%d", i)
			grouping = append(grouping, col)
		}
	}

	return
}

// returns the aggregation columns as three types: sqlparser.SelectExprs, []column
func createAggregations(tables []tableT, maxAggrs int) (aggrExprs sqlparser.SelectExprs, aggregates []column) {
	aggregations := []func(col column) sqlparser.Expr{
		func(_ column) sqlparser.Expr { return &sqlparser.CountStar{} },
		func(col column) sqlparser.Expr { return &sqlparser.Count{Args: sqlparser.Exprs{newColumn(col)}} },
		func(col column) sqlparser.Expr { return &sqlparser.Sum{Arg: newColumn(col)} },
		// func(col column) sqlparser.Expr { return &sqlparser.Avg{Arg: newAggregateExpr(col)} },
		func(col column) sqlparser.Expr { return &sqlparser.Min{Arg: newColumn(col)} },
		func(col column) sqlparser.Expr { return &sqlparser.Max{Arg: newColumn(col)} },
	}

	numAggrs := rand.Intn(maxAggrs)
	for i := 0; i < numAggrs; i++ {
		tblIdx, aggrIdx := rand.Intn(len(tables)), rand.Intn(len(aggregations))
		col := randomEl(tables[tblIdx].cols)
		// TODO: aggregating on a date column sometimes errors
		if col.typ == "date" && !testFailingQueries {
			i--
			continue
		}

		newAggregate := aggregations[aggrIdx](col)
		// TODO: collating on strings sometimes errors
		if col.typ == "varchar" && !testFailingQueries {
			switch newAggregate.(type) {
			case *sqlparser.Min, *sqlparser.Max:
				i--
				continue
			}
		}

		// TODO: type of sum() is incorrect (int64 vs decimal) in certain queries
		if _, ok := newAggregate.(*sqlparser.Sum); ok && !testFailingQueries {
			i--
			continue
		}

		aggrExprs = append(aggrExprs, sqlparser.NewAliasedExpr(newAggregate, fmt.Sprintf("caggr%d", i)))

		if aggrIdx <= 1 /* CountStar and Count */ {
			col.typ = "bigint"
		} else if _, ok := newAggregate.(*sqlparser.Avg); ok && col.getColumnName() == "bigint" {
			col.typ = "decimal"
		}

		col.name = fmt.Sprintf("caggr%d", i)
		aggregates = append(aggregates, col)
	}
	return
}

// orders on all non-aggregate SelectExprs and independently at random on all aggregate SelectExprs of sel
func createOrderBy(groupBy sqlparser.GroupBy, aggrExprs sqlparser.SelectExprs) (orderBy sqlparser.OrderBy) {
	// always order on grouping columns
	for i := range groupBy {
		orderBy = append(orderBy, sqlparser.NewOrder(groupBy[i], getRandomOrderDirection()))
	}

	// randomly order on aggregation columns
	for i := range aggrExprs {
		if aliasedExpr, ok := aggrExprs[i].(*sqlparser.AliasedExpr); ok && rand.Intn(2) < 1 {
			orderBy = append(orderBy, sqlparser.NewOrder(aliasedExpr.Expr, getRandomOrderDirection()))
		}
	}

	return
}

// compares two random columns (usually of the same type)
// returns a random expression if there are no other predicates and isJoin is true
// returns the predicates as a sqlparser.Exprs (slice of sqlparser.Expr's)
func createWherePredicates(tables []tableT, isJoin bool) (predicates sqlparser.Exprs) {
	// if creating predicates for a join,
	// then make sure predicates are created for the last two tables (which are being joined)
	incr := 0
	if isJoin && len(tables) > 2 {
		incr += len(tables) - 2
	}

	for idx1 := range tables {
		for idx2 := range tables {
			// fmt.Printf("predicate tables:\n%v\n idx1: %d idx2: %d, incr: %d", tables, idx1, idx2, incr)
			if idx1 >= idx2 || idx1 < incr || idx2 < incr {
				continue
			}
			noOfPredicates := rand.Intn(2)
			if isJoin {
				noOfPredicates++
			}

			for i := 0; noOfPredicates > 0; i++ {
				col1 := randomEl(tables[idx1].cols)
				col2 := randomEl(tables[idx2].cols)

				// prevent infinite loops
				if i > 50 {
					predicates = append(predicates, sqlparser.NewComparisonExpr(getRandomComparisonExprOperator(), newColumn(col1), newColumn(col2), nil))
					break
				}

				if col1.typ != col2.typ {
					continue
				}

				predicates = append(predicates, sqlparser.NewComparisonExpr(getRandomComparisonExprOperator(), newColumn(col1), newColumn(col2), nil))
				noOfPredicates--
			}
		}
	}

	// make sure the join predicate is never empty
	if len(predicates) == 0 && isJoin {
		predRandomExpr := getRandomExpr(tables)
		predicates = append(predicates, predRandomExpr)
	}

	return
}

// creates predicates for the having clause comparing a column to a random expression
func createHavingPredicates(tables []tableT) (havingPredicates sqlparser.Exprs) {
	aggrSelectExprs, _ := createAggregations(tables, 2)
	for i := range aggrSelectExprs {
		if lhs, ok := aggrSelectExprs[i].(*sqlparser.AliasedExpr); ok {
			// TODO: HAVING can only contain aggregate or grouping columns in mysql, works fine in vitess
			// TODO: Can fix this by putting only the table with the grouping and aggregates column (newTable)
			// TODO: but random expressions without the columns also fails
			if testFailingQueries {
				predRandomExpr := getRandomExpr(tables)
				havingPredicates = append(havingPredicates, sqlparser.NewComparisonExpr(getRandomComparisonExprOperator(), lhs.Expr, predRandomExpr, nil))
			} else if rhs, ok1 := randomEl(aggrSelectExprs).(*sqlparser.AliasedExpr); ok1 {
				havingPredicates = append(havingPredicates, sqlparser.NewComparisonExpr(getRandomComparisonExprOperator(), lhs.Expr, rhs.Expr, nil))
			}
		}
	}
	return
}

// creates sel.Limit
func createLimit() *sqlparser.Limit {
	limitNum := rand.Intn(10)
	if rand.Intn(2) < 1 {
		offset := rand.Intn(10)
		return sqlparser.NewLimit(offset, limitNum)
	}

	return sqlparser.NewLimitWithoutOffset(limitNum)
}

// returns a random expression and its type
func getRandomExpr(tables []tableT) sqlparser.Expr {
	seed := time.Now().UnixNano()
	g := sqlparser.NewGenerator(seed, 2, slices2.Map(tables, func(t tableT) sqlparser.ExprGenerator { return &t })...)
	return g.Expression()
}

func newAliasedTable(tbl tableT, alias string) *sqlparser.AliasedTableExpr {
	return sqlparser.NewAliasedTableExpr(tbl.name, alias)
}

func newAliasedColumn(col column, alias string) *sqlparser.AliasedExpr {
	return sqlparser.NewAliasedExpr(newColumn(col), alias)
}

func newColumn(col column) *sqlparser.ColName {
	return sqlparser.NewColNameWithQualifier(col.name, sqlparser.NewTableName(col.tableName))
}

func getRandomComparisonExprOperator() sqlparser.ComparisonExprOperator {
	// =, <, >, <=, >=, !=, <=>
	return randomEl([]sqlparser.ComparisonExprOperator{0, 1, 2, 3, 4, 5, 6})
}

func getRandomOrderDirection() sqlparser.OrderDirection {
	// asc, desc
	return randomEl([]sqlparser.OrderDirection{0, 1})
}

func randomEl[K any](in []K) K {
	return in[rand.Intn(len(in))]
}
