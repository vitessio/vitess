/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by Sizegen. DO NOT EDIT.

package collations

import (
	"math"
	"reflect"
	"unsafe"

	hack "vitess.io/vitess/go/hack"
)

//go:nocheckptr
func (cached *Environment) CachedSize(alloc bool) int64 {
	if cached == nil {
		return int64(0)
	}
	size := int64(0)
	if alloc {
		size += int64(48)
	}
	// field byName map[string]vitess.io/vitess/go/mysql/collations.ID
	if cached.byName != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.byName)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 160))
		if len(cached.byName) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 160))
		}
		for k := range cached.byName {
			size += hack.RuntimeAllocSize(int64(len(k)))
		}
	}
	// field byCharset map[string]*vitess.io/vitess/go/mysql/collations.colldefaults
	if cached.byCharset != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.byCharset)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 208))
		if len(cached.byCharset) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 208))
		}
		for k, v := range cached.byCharset {
			size += hack.RuntimeAllocSize(int64(len(k)))
			if v != nil {
				size += hack.RuntimeAllocSize(int64(4))
			}
		}
	}
	// field byCharsetName map[vitess.io/vitess/go/mysql/collations.ID]string
	if cached.byCharsetName != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.byCharsetName)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 160))
		if len(cached.byCharsetName) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 160))
		}
		for _, v := range cached.byCharsetName {
			size += hack.RuntimeAllocSize(int64(len(v)))
		}
	}
	// field unsupported map[string]vitess.io/vitess/go/mysql/collations.ID
	if cached.unsupported != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.unsupported)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 160))
		if len(cached.unsupported) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 160))
		}
		for k := range cached.unsupported {
			size += hack.RuntimeAllocSize(int64(len(k)))
		}
	}
	// field byID map[vitess.io/vitess/go/mysql/collations.ID]string
	if cached.byID != nil {
		size += int64(48)
		hmap := reflect.ValueOf(cached.byID)
		numBuckets := int(math.Pow(2, float64((*(*uint8)(unsafe.Pointer(hmap.Pointer() + uintptr(9)))))))
		numOldBuckets := (*(*uint16)(unsafe.Pointer(hmap.Pointer() + uintptr(10))))
		size += hack.RuntimeAllocSize(int64(numOldBuckets * 160))
		if len(cached.byID) > 0 || numBuckets > 1 {
			size += hack.RuntimeAllocSize(int64(numBuckets * 160))
		}
		for _, v := range cached.byID {
			size += hack.RuntimeAllocSize(int64(len(v)))
		}
	}
	return size
}
