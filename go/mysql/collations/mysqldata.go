// DO NOT MODIFY: this file is autogenerated by makemysqldata.go

package collations

import (
	"vitess.io/vitess/go/mysql/collations/internal/charset"
	"vitess.io/vitess/go/mysql/collations/internal/uca"
)

var sortorder_dec8_swedish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0x41, 0x41, 0x41, 0x41, 0x5C, 0x5B, 0x5C, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0x44, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x5D, 0xD7, 0xD8, 0x55, 0x55, 0x55, 0x59, 0x59, 0xDE, 0xDF,
	0x41, 0x41, 0x41, 0x41, 0x5C, 0x5B, 0x5C, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0x44, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x5D, 0xF7, 0xD8, 0x55, 0x55, 0x55, 0x59, 0x59, 0xDE, 0xFF,
}
var tounicode_dec8_swedish_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x0000, 0x00A5, 0x0000, 0x00A7, 0x00A4, 0x00A9, 0x00AA, 0x00AB, 0x0000, 0x0000, 0x0000, 0x0000,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0000, 0x00B5, 0x00B6, 0x00B7, 0x0000, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x0000, 0x00BF,
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
	0x0000, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0152, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0178, 0x0000, 0x00DF,
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
	0x0000, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0153, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FF, 0x0000, 0x0000,
}
var fromunicode_dec8_swedish_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xff, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa8, 0xa5, 0x0, 0xa7, 0x0, 0xa9, 0xaa, 0xab, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xb1, 0xb2, 0xb3, 0x0, 0xb5, 0xb6, 0xb7, 0x0, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0x0, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0x0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0x0, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0x0, 0x0, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0x0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0x0, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0x0, 0x0, 0xfd}},
	{From: 0x152, To: 0x178, Range: []byte{0xd7, 0xf7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdd}},
}
var sortorder_cp850_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x51, 0x53, 0x55, 0x59, 0x63, 0x65, 0x67, 0x69, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x80,
	0x8E, 0x90, 0x92, 0x94, 0x97, 0x99, 0xA3, 0xA5, 0xA7, 0xA9, 0xAE, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5,
	0xB6, 0x41, 0x51, 0x53, 0x55, 0x59, 0x63, 0x65, 0x67, 0x69, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x80,
	0x8E, 0x90, 0x92, 0x94, 0x97, 0x99, 0xA3, 0xA5, 0xA7, 0xA9, 0xAE, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB,
	0x54, 0xA1, 0x5D, 0x47, 0x4B, 0x43, 0x4D, 0x54, 0x5F, 0x61, 0x5B, 0x71, 0x6F, 0x6B, 0x4B, 0x4D,
	0x5D, 0x4F, 0x4F, 0x86, 0x8A, 0x82, 0x9F, 0x9B, 0xAD, 0x8A, 0xA1, 0x8C, 0xE3, 0x8C, 0xBD, 0xBE,
	0x45, 0x6D, 0x84, 0x9D, 0x7E, 0x7E, 0xEA, 0xFA, 0xFF, 0xEE, 0xEC, 0xFD, 0xFC, 0xCE, 0xEB, 0xFB,
	0xDC, 0xDD, 0xDE, 0xC3, 0xC9, 0x45, 0x47, 0x43, 0xE9, 0xD5, 0xCF, 0xD1, 0xD3, 0xE2, 0xE5, 0xC5,
	0xC6, 0xCB, 0xCA, 0xC8, 0xC2, 0xCC, 0x49, 0x49, 0xD2, 0xD0, 0xD7, 0xD6, 0xD4, 0xCD, 0xD8, 0xE4,
	0x57, 0x57, 0x5F, 0x61, 0x5B, 0x73, 0x6D, 0x6F, 0x71, 0xC7, 0xC4, 0xDB, 0xDA, 0xE6, 0x6B, 0xD9,
	0x84, 0x96, 0x86, 0x82, 0x88, 0x88, 0xF5, 0xB0, 0xB0, 0x9D, 0x9F, 0x9B, 0xAB, 0xAB, 0xEF, 0xF4,
	0xED, 0xF1, 0xC1, 0xFE, 0xF6, 0xE7, 0xBF, 0xBC, 0xF0, 0xE8, 0xF7, 0xF9, 0xF3, 0xF2, 0xDF, 0xE0,
}
var tounicode_cp850_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0, 0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE, 0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE, 0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0,
}
var fromunicode_cp850_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xff, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xad, 0xbd, 0x9c, 0xcf, 0xbe, 0xdd, 0xf5, 0xf9, 0xb8, 0xa6, 0xae, 0xaa, 0xf0, 0xa9, 0xee, 0xf8, 0xf1, 0xfd, 0xfc, 0xef, 0xe6, 0xf4, 0xfa, 0xf7, 0xfb, 0xa7, 0xaf, 0xac, 0xab, 0xf3, 0xa8, 0xb7, 0xb5, 0xb6, 0xc7, 0x8e, 0x8f, 0x92, 0x80, 0xd4, 0x90, 0xd2, 0xd3, 0xde, 0xd6, 0xd7, 0xd8, 0xd1, 0xa5, 0xe3, 0xe0, 0xe2, 0xe5, 0x99, 0x9e, 0x9d, 0xeb, 0xe9, 0xea, 0x9a, 0xed, 0xe8, 0xe1, 0x85, 0xa0, 0x83, 0xc6, 0x84, 0x86, 0x91, 0x87, 0x8a, 0x82, 0x88, 0x89, 0x8d, 0xa1, 0x8c, 0x8b, 0xd0, 0xa4, 0x95, 0xa2, 0x93, 0xe4, 0x94, 0xf6, 0x9b, 0x97, 0xa3, 0x96, 0x81, 0xec, 0xe7, 0x98}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0xc4, 0x0, 0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xba, 0x0, 0x0, 0xc9, 0x0, 0x0, 0xbb, 0x0, 0x0, 0xc8, 0x0, 0x0, 0xbc, 0x0, 0x0, 0xcc, 0x0, 0x0, 0xb9, 0x0, 0x0, 0xcb, 0x0, 0x0, 0xca, 0x0, 0x0, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0x0, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xb1, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe}},
	{From: 0x131, To: 0x192, Range: []byte{0xd5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f}},
	{From: 0x2017, To: 0x2017, Range: []byte{0xf2}},
}
var sortorder_latin1_german1_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0xD0, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0xD7, 0x4F, 0x55, 0x55, 0x55, 0x55, 0x59, 0xDE, 0x53,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0xD0, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0xF7, 0x4F, 0x55, 0x55, 0x55, 0x55, 0x59, 0xDE, 0xFF,
}

var sortorder_hp8_english_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5C, 0x5D, 0x5B, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_hp8_english_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x00C0, 0x00C2, 0x00C8, 0x00CA, 0x00CB, 0x00CE, 0x00CF, 0x00B4, 0x02CB, 0x02C6, 0x00A8, 0x02DC, 0x00D9, 0x00DB, 0x20A4,
	0x00AF, 0x00DD, 0x00FD, 0x00B0, 0x00C7, 0x00E7, 0x00D1, 0x00F1, 0x00A1, 0x00BF, 0x00A4, 0x00A3, 0x00A5, 0x00A7, 0x0192, 0x00A2,
	0x00E2, 0x00EA, 0x00F4, 0x00FB, 0x00E1, 0x00E9, 0x00F3, 0x00FA, 0x00E0, 0x00E8, 0x00F2, 0x00F9, 0x00E4, 0x00EB, 0x00F6, 0x00FC,
	0x00C5, 0x00EE, 0x00D8, 0x00C6, 0x00E5, 0x00ED, 0x00F8, 0x00E6, 0x00C4, 0x00EC, 0x00D6, 0x00DC, 0x00C9, 0x00EF, 0x00DF, 0x00D4,
	0x00C1, 0x00C3, 0x00E3, 0x00D0, 0x00F0, 0x00CD, 0x00CC, 0x00D3, 0x00D2, 0x00D5, 0x00F5, 0x0160, 0x0161, 0x00DA, 0x0178, 0x00FF,
	0x00DE, 0x00FE, 0x00B7, 0x00B5, 0x00B6, 0x00BE, 0x2014, 0x00BC, 0x00BD, 0x00AA, 0x00BA, 0x00AB, 0x25A0, 0x00BB, 0x00B1, 0x0000,
}
var fromunicode_hp8_english_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xff, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xb8, 0xbf, 0xbb, 0xba, 0xbc, 0x0, 0xbd, 0xab, 0x0, 0xf9, 0xfb, 0x0, 0x0, 0x0, 0xb0, 0xb3, 0xfe, 0x0, 0x0, 0xa8, 0xf3, 0xf4, 0xf2, 0x0, 0x0, 0xfa, 0xfd, 0xf7, 0xf8, 0xf5, 0xb9, 0xa1, 0xe0, 0xa2, 0xe1, 0xd8, 0xd0, 0xd3, 0xb4, 0xa3, 0xdc, 0xa4, 0xa5, 0xe6, 0xe5, 0xa6, 0xa7, 0xe3, 0xb6, 0xe8, 0xe7, 0xdf, 0xe9, 0xda, 0x0, 0xd2, 0xad, 0xed, 0xae, 0xdb, 0xb1, 0xf0, 0xde, 0xc8, 0xc4, 0xc0, 0xe2, 0xcc, 0xd4, 0xd7, 0xb5, 0xc9, 0xc5, 0xc1, 0xcd, 0xd9, 0xd5, 0xd1, 0xdd, 0xe4, 0xb7, 0xca, 0xc6, 0xc2, 0xea, 0xce, 0x0, 0xd6, 0xcb, 0xc7, 0xc3, 0xcf, 0xb2, 0xf1, 0xef}},
	{From: 0x160, To: 0x192, Range: []byte{0xeb, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbe}},
	{From: 0x2c6, To: 0x2dc, Range: []byte{0xaa, 0x0, 0x0, 0x0, 0x0, 0xa9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac}},
	{From: 0x2014, To: 0x20a4, Range: []byte{0xf6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaf}},
	{From: 0x25a0, To: 0x25a0, Range: []byte{0xfc}},
}
var sortorder_koi8r_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xE5, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE,
	0xAF, 0xB0, 0xB1, 0xE5, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD,
	0xFE, 0xDF, 0xE0, 0xF6, 0xE3, 0xE4, 0xF4, 0xE2, 0xF5, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE,
	0xEF, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xE6, 0xE1, 0xFC, 0xFB, 0xE7, 0xF8, 0xFD, 0xF9, 0xF7, 0xFA,
	0xFE, 0xDF, 0xE0, 0xF6, 0xE3, 0xE4, 0xF4, 0xE2, 0xF5, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE,
	0xEF, 0xFF, 0xF0, 0xF1, 0xF2, 0xF3, 0xE6, 0xE1, 0xFC, 0xFB, 0xE7, 0xF8, 0xFD, 0xF9, 0xF7, 0xFA,
}
var tounicode_koi8r_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
	0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248, 0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
	0x2550, 0x2551, 0x2552, 0x0451, 0x2553, 0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255D, 0x255E,
	0x255F, 0x2560, 0x2561, 0x0401, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x00A9,
	0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433, 0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
	0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432, 0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
	0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413, 0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
	0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412, 0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A,
}
var fromunicode_koi8r_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xf7, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9c, 0x0, 0x9d, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f}},
	{From: 0x401, To: 0x451, Range: []byte{0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe1, 0xe2, 0xf7, 0xe7, 0xe4, 0xe5, 0xf6, 0xfa, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf2, 0xf3, 0xf4, 0xf5, 0xe6, 0xe8, 0xe3, 0xfe, 0xfb, 0xfd, 0xff, 0xf9, 0xf8, 0xfc, 0xe0, 0xf1, 0xc1, 0xc2, 0xd7, 0xc7, 0xc4, 0xc5, 0xd6, 0xda, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd2, 0xd3, 0xd4, 0xd5, 0xc6, 0xc8, 0xc3, 0xde, 0xdb, 0xdd, 0xdf, 0xd9, 0xd8, 0xdc, 0xc0, 0xd1, 0x0, 0xa3}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0x80, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0x84, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xa1, 0xa2, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x0, 0x8c, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x8f, 0x90, 0x91, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94}},
	{From: 0x2219, To: 0x2265, Range: []byte{0x95, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x97, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x99}},
	{From: 0x2320, To: 0x2321, Range: []byte{0x93, 0x9b}},
}

var sortorder_latin2_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x44, 0x45, 0x48, 0x49, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x53, 0x54, 0x56,
	0x58, 0x59, 0x5A, 0x5B, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x68, 0x69, 0x6A, 0x6B, 0x6C,
	0x6D, 0x41, 0x44, 0x45, 0x48, 0x49, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x53, 0x54, 0x56,
	0x58, 0x59, 0x5A, 0x5B, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x6E, 0x6F, 0x70, 0x71, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x42, 0xFF, 0x52, 0xFF, 0x51, 0x5C, 0xFF, 0xFF, 0x5D, 0x5B, 0x5E, 0x65, 0xFF, 0x67, 0x66,
	0xFF, 0x42, 0xFF, 0x52, 0xFF, 0x51, 0x5C, 0xFF, 0xFF, 0x5D, 0x5B, 0x5E, 0x65, 0xFF, 0x67, 0x66,
	0x5A, 0x43, 0x43, 0x43, 0x43, 0x51, 0x46, 0x45, 0x47, 0x49, 0x4A, 0x49, 0x49, 0x4E, 0x4E, 0x48,
	0xFF, 0x55, 0x54, 0x57, 0x56, 0x56, 0x56, 0xFF, 0x5A, 0x5F, 0x5F, 0x5F, 0x5F, 0x63, 0x5E, 0xFF,
	0x5A, 0x43, 0x43, 0x43, 0x43, 0x51, 0x46, 0x45, 0x47, 0x49, 0x4A, 0x49, 0x49, 0x4E, 0x4E, 0x48,
	0xFF, 0x55, 0x54, 0x57, 0x56, 0x56, 0x56, 0xFF, 0x5A, 0x5F, 0x5F, 0x5F, 0x5F, 0x63, 0x5E, 0xFF,
}
var tounicode_latin2_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7, 0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
	0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7, 0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,
	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7, 0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7, 0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9,
}
var fromunicode_latin2_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0x0, 0x0, 0x0, 0xa4, 0x0, 0x0, 0xa7, 0xa8, 0x0, 0x0, 0x0, 0x0, 0xad, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0xc2, 0x0, 0xc4, 0x0, 0x0, 0xc7, 0x0, 0xc9, 0x0, 0xcb, 0x0, 0xcd, 0xce, 0x0, 0x0, 0x0, 0x0, 0xd3, 0xd4, 0x0, 0xd6, 0xd7, 0x0, 0x0, 0xda, 0x0, 0xdc, 0xdd, 0x0, 0xdf, 0x0, 0xe1, 0xe2, 0x0, 0xe4, 0x0, 0x0, 0xe7, 0x0, 0xe9, 0x0, 0xeb, 0x0, 0xed, 0xee, 0x0, 0x0, 0x0, 0x0, 0xf3, 0xf4, 0x0, 0xf6, 0xf7, 0x0, 0x0, 0xfa, 0x0, 0xfc, 0xfd}},
	{From: 0x102, To: 0x17e, Range: []byte{0xc3, 0xe3, 0xa1, 0xb1, 0xc6, 0xe6, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xe8, 0xcf, 0xef, 0xd0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0xea, 0xcc, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0xe5, 0x0, 0x0, 0xa5, 0xb5, 0x0, 0x0, 0xa3, 0xb3, 0xd1, 0xf1, 0x0, 0x0, 0xd2, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd5, 0xf5, 0x0, 0x0, 0xc0, 0xe0, 0x0, 0x0, 0xd8, 0xf8, 0xa6, 0xb6, 0x0, 0x0, 0xaa, 0xba, 0xa9, 0xb9, 0xde, 0xfe, 0xab, 0xbb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd9, 0xf9, 0xdb, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac, 0xbc, 0xaf, 0xbf, 0xae, 0xbe}},
	{From: 0x2c7, To: 0x2dd, Range: []byte{0xb7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa2, 0xff, 0x0, 0xb2, 0x0, 0xbd}},
}
var sortorder_swe7_swedish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x45, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5C, 0x5D, 0x5B, 0x59, 0x5F,
	0x45, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5C, 0x5D, 0x5B, 0x59, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_swe7_swedish_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x00C9, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x00C4, 0x00D6, 0x00C5, 0x00DC, 0x005F,
	0x00E9, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x00E4, 0x00F6, 0x00E5, 0x00FC, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
}
var fromunicode_swe7_swedish_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfc, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x0, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x0, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5b, 0x5d, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b, 0x7d, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e}},
}
var sortorder_ascii_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_ascii_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
}
var fromunicode_ascii_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0x7f, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f}},
}
var sortorder_cp1251_bulgarian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7C, 0x7D, 0x7E, 0x7F, 0x80,
	0x81, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x82, 0x83, 0x84, 0x85, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B,
	0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B,
	0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B,
	0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B,
}
var tounicode_cp1251_bulgarian_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021, 0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
	0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0000, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
	0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7, 0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
	0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7, 0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
}
var fromunicode_cp1251_bulgarian_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xbb, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x0, 0x0, 0x0, 0xa4, 0x0, 0xa6, 0xa7, 0x0, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0x0, 0xb0, 0xb1, 0x0, 0x0, 0x0, 0xb5, 0xb6, 0xb7, 0x0, 0x0, 0x0, 0xbb}},
	{From: 0x401, To: 0x491, Range: []byte{0xa8, 0x80, 0x81, 0xaa, 0xbd, 0xb2, 0xaf, 0xa3, 0x8a, 0x8c, 0x8e, 0x8d, 0x0, 0xa1, 0x8f, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0xb8, 0x90, 0x83, 0xba, 0xbe, 0xb3, 0xbf, 0xbc, 0x9a, 0x9c, 0x9e, 0x9d, 0x0, 0xa2, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa5, 0xb4}},
	{From: 0x2013, To: 0x20ac, Range: []byte{0x96, 0x97, 0x0, 0x0, 0x0, 0x91, 0x92, 0x82, 0x0, 0x93, 0x94, 0x84, 0x0, 0x86, 0x87, 0x95, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88}},
	{From: 0x2116, To: 0x2122, Range: []byte{0xb9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x99}},
}
var sortorder_latin1_danish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0x41, 0x41, 0x41, 0x41, 0x5B, 0x5D, 0x5B, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0x44, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x5C, 0xD7, 0x5C, 0x55, 0x55, 0x55, 0x59, 0x59, 0xDE, 0xDF,
	0x41, 0x41, 0x41, 0x41, 0x5B, 0x5D, 0x5B, 0x43, 0x45, 0x45, 0x45, 0x45, 0x49, 0x49, 0x49, 0x49,
	0x44, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x5C, 0xF7, 0x5C, 0x55, 0x55, 0x55, 0x59, 0x59, 0xDE, 0xFF,
}

var sortorder_hebrew_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xF7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xFF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_hebrew_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x203E,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2017,
	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x0000, 0x0000, 0x200E, 0x200F, 0x0000,
}
var fromunicode_hebrew_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xf7, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0x0, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0x0, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0x0, 0xbb, 0xbc, 0xbd, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba}},
	{From: 0x5d0, To: 0x5ea, Range: []byte{0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa}},
	{From: 0x200e, To: 0x203e, Range: []byte{0xfd, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaf}},
}
var sortorder_latin7_estonian_cs = [...]byte{
	0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
	0x2C, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x27, 0x39, 0x3A, 0x3B, 0x5D, 0x3C, 0x28, 0x3D, 0x3E,
	0x76, 0x7A, 0x7C, 0x7E, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x3F, 0x40, 0x5E, 0x5F, 0x60, 0x41,
	0x42, 0x86, 0x90, 0x92, 0x98, 0x9A, 0xA4, 0xA6, 0xAA, 0xAC, 0xB2, 0xB4, 0xB8, 0xBE, 0xC0, 0xC6,
	0xCE, 0xD0, 0xD2, 0xD6, 0xE5, 0xE8, 0xEE, 0xF0, 0xFA, 0xFC, 0xDD, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x87, 0x91, 0x93, 0x99, 0x9B, 0xA5, 0xA7, 0xAB, 0xAD, 0xB3, 0xB5, 0xB9, 0xBF, 0xC1, 0xC7,
	0xCF, 0xD1, 0xD3, 0xD7, 0xE6, 0xE9, 0xEF, 0xF1, 0xFB, 0xFD, 0xDE, 0x49, 0x4A, 0x4B, 0x4C, 0x1C,
	0x01, 0x1D, 0x57, 0x1E, 0x5A, 0x74, 0x71, 0x72, 0x1F, 0x75, 0x20, 0x5B, 0x21, 0x4E, 0x52, 0x51,
	0x22, 0x55, 0x56, 0x58, 0x59, 0x73, 0x2A, 0x2B, 0x23, 0xE7, 0x24, 0x5C, 0x25, 0x4F, 0x54, 0x26,
	0x2D, 0xFE, 0x66, 0x67, 0x68, 0xFF, 0x4D, 0x69, 0xCC, 0x6A, 0xD4, 0x62, 0x6B, 0x29, 0x6C, 0x8E,
	0x6D, 0x61, 0x7D, 0x7F, 0x50, 0x6E, 0x6F, 0x70, 0xCD, 0x7B, 0xD5, 0x63, 0x77, 0x78, 0x79, 0x8F,
	0x8C, 0xB0, 0x88, 0x94, 0xF4, 0x8A, 0xA2, 0xA0, 0x96, 0x9C, 0xDF, 0x9E, 0xA8, 0xB6, 0xAE, 0xBA,
	0xDB, 0xC2, 0xC4, 0xC8, 0xCA, 0xF2, 0xF6, 0x64, 0xEC, 0xBC, 0xD8, 0xEA, 0xF8, 0xE1, 0xE3, 0xDA,
	0x8D, 0xB1, 0x89, 0x95, 0xF5, 0x8B, 0xA3, 0xA1, 0x97, 0x9D, 0xE0, 0x9F, 0xA9, 0xB7, 0xAF, 0xBB,
	0xDC, 0xC3, 0xC5, 0xC9, 0xCB, 0xF3, 0xF7, 0x65, 0xED, 0xBD, 0xD9, 0xEB, 0xF9, 0xE2, 0xE4, 0x53,
}
var tounicode_latin7_estonian_cs = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
	0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
	0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
	0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
	0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019,
}
var fromunicode_latin7_estonian_cs = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfc, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0x0, 0xa2, 0xa3, 0xa4, 0x0, 0xa6, 0xa7, 0x0, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0x0, 0xb0, 0xb1, 0xb2, 0xb3, 0x0, 0xb5, 0xb6, 0xb7, 0x0, 0xb9, 0x0, 0xbb, 0xbc, 0xbd, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4, 0xc5, 0xaf, 0x0, 0x0, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd3, 0x0, 0xd5, 0xd6, 0xd7, 0xa8, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0x0, 0xe4, 0xe5, 0xbf, 0x0, 0x0, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf3, 0x0, 0xf5, 0xf6, 0xf7, 0xb8, 0x0, 0x0, 0x0, 0xfc}},
	{From: 0x100, To: 0x17e, Range: []byte{0xc2, 0xe2, 0x0, 0x0, 0xc0, 0xe0, 0xc3, 0xe3, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0xe7, 0x0, 0x0, 0xcb, 0xeb, 0xc6, 0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0xee, 0x0, 0x0, 0xc1, 0xe1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xed, 0x0, 0x0, 0x0, 0xcf, 0xef, 0x0, 0x0, 0x0, 0x0, 0xd9, 0xf9, 0xd1, 0xf1, 0xd2, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0xf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0xba, 0x0, 0x0, 0xda, 0xfa, 0x0, 0x0, 0x0, 0x0, 0xd0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdb, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0xea, 0xdd, 0xfd, 0xde, 0xfe}},
	{From: 0x2019, To: 0x201e, Range: []byte{0xff, 0x0, 0x0, 0xb4, 0xa1, 0xa5}},
}
var sortorder_latin2_hungarian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x47, 0x48, 0x4C, 0x4E, 0x53, 0x54, 0x55, 0x56, 0x5A, 0x5B, 0x5C, 0x60, 0x61, 0x64,
	0x69, 0x6A, 0x6B, 0x6E, 0x72, 0x75, 0x7A, 0x7B, 0x7C, 0x7D, 0x7F, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x41, 0x47, 0x48, 0x4C, 0x4E, 0x53, 0x54, 0x55, 0x56, 0x5A, 0x5B, 0x5C, 0x60, 0x61, 0x64,
	0x69, 0x6A, 0x6B, 0x6E, 0x72, 0x75, 0x7A, 0x7B, 0x7C, 0x7D, 0x7F, 0x89, 0x8A, 0x8B, 0x8C, 0x00,
	0x01, 0x78, 0x4E, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x67, 0x67, 0x56, 0x56, 0x0F, 0x41,
	0x4E, 0x12, 0x13, 0x67, 0x67, 0x64, 0x78, 0x75, 0x78, 0x67, 0x78, 0x1C, 0x1D, 0x1E, 0x1F, 0xFF,
	0x41, 0x56, 0x64, 0x75, 0x5E, 0x6F, 0xFF, 0x67, 0xFF, 0x70, 0x71, 0x73, 0x80, 0xFF, 0x81, 0x82,
	0xFF, 0x42, 0xFF, 0x5D, 0xFF, 0x41, 0x6F, 0xFF, 0xFF, 0x70, 0x71, 0x73, 0x80, 0xFF, 0x81, 0x82,
	0x6C, 0x41, 0x44, 0x45, 0x46, 0x5F, 0x49, 0x4B, 0x4A, 0x4E, 0x51, 0x52, 0x50, 0x56, 0x57, 0x4D,
	0xFF, 0x62, 0x63, 0x64, 0x66, 0x67, 0x67, 0xFF, 0x6D, 0x77, 0x75, 0x78, 0x78, 0x7E, 0x74, 0xFF,
	0x64, 0x41, 0x44, 0x45, 0x46, 0x5F, 0x49, 0x4B, 0x4A, 0x4E, 0x51, 0x78, 0x50, 0x56, 0x58, 0x4D,
	0xFF, 0x62, 0x63, 0x64, 0x66, 0x67, 0x67, 0xFF, 0x6D, 0x77, 0x75, 0x78, 0x78, 0x7E, 0x74, 0xFF,
}

var sortorder_koi8u_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x20, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,
	0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4,
	0xC5, 0xC6, 0xC7, 0x88, 0x87, 0xC8, 0x8C, 0x8D, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0x84, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0x88, 0x87, 0xD3, 0x8C, 0x8D, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0x84, 0xD9, 0xDA,
	0xA3, 0x80, 0x81, 0x9B, 0x85, 0x86, 0x99, 0x83, 0x9A, 0x8B, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93,
	0x94, 0xA4, 0x95, 0x96, 0x97, 0x98, 0x89, 0x82, 0xA1, 0xA0, 0x8A, 0x9D, 0xA2, 0x9E, 0x9C, 0x9F,
	0xA3, 0x80, 0x81, 0x9B, 0x85, 0x86, 0x99, 0x83, 0x9A, 0x8B, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93,
	0x94, 0xA4, 0x95, 0x96, 0x97, 0x98, 0x89, 0x82, 0xA1, 0xA0, 0x8A, 0x9D, 0xA2, 0x9E, 0x9C, 0x9F,
}
var tounicode_koi8u_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
	0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2022, 0x221A, 0x2248, 0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
	0x2550, 0x2551, 0x2552, 0x0451, 0x0454, 0x2554, 0x0456, 0x0457, 0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x0491, 0x255D, 0x255E,
	0x255F, 0x2560, 0x2561, 0x0401, 0x0404, 0x2563, 0x0406, 0x0407, 0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x0490, 0x256C, 0x00A9,
	0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433, 0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
	0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432, 0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
	0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413, 0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
	0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412, 0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A,
}
var fromunicode_koi8u_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xf7, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9c, 0x0, 0x9d, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f}},
	{From: 0x401, To: 0x491, Range: []byte{0xb3, 0x0, 0x0, 0xb4, 0x0, 0xb6, 0xb7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe1, 0xe2, 0xf7, 0xe7, 0xe4, 0xe5, 0xf6, 0xfa, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf2, 0xf3, 0xf4, 0xf5, 0xe6, 0xe8, 0xe3, 0xfe, 0xfb, 0xfd, 0xff, 0xf9, 0xf8, 0xfc, 0xe0, 0xf1, 0xc1, 0xc2, 0xd7, 0xc7, 0xc4, 0xc5, 0xd6, 0xda, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd2, 0xd3, 0xd4, 0xd5, 0xc6, 0xc8, 0xc3, 0xde, 0xdb, 0xdd, 0xdf, 0xd9, 0xd8, 0xdc, 0xc0, 0xd1, 0x0, 0xa3, 0x0, 0x0, 0xa4, 0x0, 0xa6, 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbd, 0xad}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0x80, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0x84, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xa1, 0xa2, 0x0, 0xa5, 0x0, 0x0, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0x0, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0x0, 0xb5, 0x0, 0x0, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0x0, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x0, 0x8c, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x8f, 0x90, 0x91, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94}},
	{From: 0x221a, To: 0x2265, Range: []byte{0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x97, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x99}},
	{From: 0x2320, To: 0x2321, Range: []byte{0x93, 0x9b}},
	{From: 0x2022, To: 0x2022, Range: []byte{0x95}},
}
var sortorder_cp1251_ukrainian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x20, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,
	0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4,
	0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0x84, 0xCA, 0xCB, 0x88, 0xCC, 0x87, 0xCD, 0xCE, 0xCF, 0xD0, 0x8D,
	0xD1, 0xD2, 0x8C, 0x8C, 0x84, 0xD3, 0xD4, 0xD5, 0x88, 0xD6, 0x87, 0xD7, 0xD8, 0xD9, 0xDA, 0x8D,
	0x80, 0x81, 0x82, 0x83, 0x85, 0x86, 0x89, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
	0x80, 0x81, 0x82, 0x83, 0x85, 0x86, 0x89, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
}

var sortorder_gb2312_chinese_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5C, 0x5D, 0x5B, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x59, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var sortorder_greek_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xC1, 0xB7, 0xC5, 0xC7, 0xC9, 0xBB, 0xCF, 0xBD, 0xD5, 0xD9,
	0xC9, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xC9, 0xD5, 0xC1, 0xC5, 0xC7, 0xC9,
	0xD5, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD3, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xC9, 0xD5, 0xCF, 0xD5, 0xD9, 0xFF,
}
var tounicode_greek_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x02BD, 0x02BC, 0x00A3, 0x0000, 0x0000, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x0000, 0x00AB, 0x00AC, 0x00AD, 0x0000, 0x2015,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x0385, 0x0386, 0x00B7, 0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
	0x03A0, 0x03A1, 0x0000, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
	0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
	0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x0000,
}
var fromunicode_greek_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xbd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0x0, 0x0, 0xa3, 0x0, 0x0, 0xa6, 0xa7, 0xa8, 0xa9, 0x0, 0xab, 0xac, 0xad, 0x0, 0x0, 0xb0, 0xb1, 0xb2, 0xb3, 0x0, 0x0, 0x0, 0xb7, 0x0, 0x0, 0x0, 0xbb, 0x0, 0xbd}},
	{From: 0x384, To: 0x3ce, Range: []byte{0xb4, 0xb5, 0xb6, 0x0, 0xb8, 0xb9, 0xba, 0x0, 0xbc, 0x0, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0x0, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe}},
	{From: 0x2bc, To: 0x2bd, Range: []byte{0xa2, 0xa1}},
	{From: 0x2015, To: 0x2015, Range: []byte{0xaf}},
}
var sortorder_cp1250_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x46, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x63, 0x64, 0x65, 0x66, 0x67,
	0x68, 0x41, 0x42, 0x43, 0x46, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x5A, 0x8B, 0x5A, 0x5B, 0x62, 0x62,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x5A, 0x9B, 0x5A, 0x5B, 0x62, 0x62,
	0x20, 0xA1, 0xA2, 0x50, 0xA4, 0x41, 0xA6, 0x59, 0xA8, 0xA9, 0x59, 0xAB, 0xAC, 0xAD, 0xAE, 0x62,
	0xB0, 0xB1, 0xB2, 0x50, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0x41, 0x59, 0xBB, 0x50, 0xBD, 0x50, 0x62,
	0x58, 0x41, 0x41, 0x41, 0x41, 0x50, 0x45, 0x43, 0x44, 0x49, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x46,
	0x47, 0x53, 0x53, 0x55, 0x55, 0x55, 0x55, 0xD7, 0x58, 0x5C, 0x5C, 0x5C, 0x5C, 0x60, 0x5B, 0x59,
	0x58, 0x41, 0x41, 0x41, 0x41, 0x50, 0x45, 0x43, 0x44, 0x49, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x46,
	0x47, 0x53, 0x53, 0x55, 0x55, 0x55, 0x55, 0xF7, 0x58, 0x5C, 0x5C, 0x5C, 0x5C, 0x60, 0x5B, 0xFF,
}
var tounicode_cp1250_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021, 0x0000, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0000, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
	0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
	0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7, 0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7, 0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9,
}
var fromunicode_cp1250_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x0, 0x0, 0x0, 0xa4, 0x0, 0xa6, 0xa7, 0xa8, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0x0, 0xb0, 0xb1, 0x0, 0x0, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0x0, 0x0, 0xbb, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0xc2, 0x0, 0xc4, 0x0, 0x0, 0xc7, 0x0, 0xc9, 0x0, 0xcb, 0x0, 0xcd, 0xce, 0x0, 0x0, 0x0, 0x0, 0xd3, 0xd4, 0x0, 0xd6, 0xd7, 0x0, 0x0, 0xda, 0x0, 0xdc, 0xdd, 0x0, 0xdf, 0x0, 0xe1, 0xe2, 0x0, 0xe4, 0x0, 0x0, 0xe7, 0x0, 0xe9, 0x0, 0xeb, 0x0, 0xed, 0xee, 0x0, 0x0, 0x0, 0x0, 0xf3, 0xf4, 0x0, 0xf6, 0xf7, 0x0, 0x0, 0xfa, 0x0, 0xfc, 0xfd}},
	{From: 0x102, To: 0x17e, Range: []byte{0xc3, 0xe3, 0xa5, 0xb9, 0xc6, 0xe6, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xe8, 0xcf, 0xef, 0xd0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0xea, 0xcc, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0xe5, 0x0, 0x0, 0xbc, 0xbe, 0x0, 0x0, 0xa3, 0xb3, 0xd1, 0xf1, 0x0, 0x0, 0xd2, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd5, 0xf5, 0x0, 0x0, 0xc0, 0xe0, 0x0, 0x0, 0xd8, 0xf8, 0x8c, 0x9c, 0x0, 0x0, 0xaa, 0xba, 0x8a, 0x9a, 0xde, 0xfe, 0x8d, 0x9d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd9, 0xf9, 0xdb, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8f, 0x9f, 0xaf, 0xbf, 0x8e, 0x9e}},
	{From: 0x2013, To: 0x20ac, Range: []byte{0x96, 0x97, 0x0, 0x0, 0x0, 0x91, 0x92, 0x82, 0x0, 0x93, 0x94, 0x84, 0x0, 0x86, 0x87, 0x95, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}},
	{From: 0x2c7, To: 0x2dd, Range: []byte{0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa2, 0xff, 0x0, 0xb2, 0x0, 0xbd}},
	{From: 0x2122, To: 0x2122, Range: []byte{0x99}},
}
var sortorder_latin2_croatian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA,
	0xCB, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0,
	0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0,
	0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0,
	0xF1, 0x41, 0xF2, 0x54, 0xF3, 0x54, 0x5F, 0xF4, 0xF5, 0x61, 0x5F, 0x62, 0x6B, 0xF6, 0x8E, 0x6B,
	0xF7, 0x41, 0xF8, 0x54, 0xF9, 0x54, 0x5F, 0xFA, 0xFB, 0x61, 0x5F, 0x62, 0x6B, 0xFC, 0x8E, 0x6B,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x46, 0x4B, 0x4B, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x4A, 0x57, 0x57, 0x59, 0x59, 0x59, 0x59, 0xFD, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0x5F,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x46, 0x4B, 0x4B, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x4A, 0x57, 0x57, 0x59, 0x59, 0x59, 0x59, 0xFE, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0xFF,
}

var sortorder_cp1257_lithuanian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x44, 0x46, 0x47, 0x4A, 0x4B, 0x4C, 0x4D, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5B, 0x5C, 0x5F, 0x60, 0x61, 0x4E, 0xFF, 0x62, 0x63, 0x64, 0x65, 0x66,
	0x67, 0x41, 0x43, 0x44, 0x46, 0x47, 0x4A, 0x4B, 0x4C, 0x4D, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5B, 0x5C, 0x5F, 0x60, 0x61, 0x4E, 0xFF, 0x68, 0x69, 0x6A, 0x6B, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x42, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0xFF, 0x45, 0xFF, 0xFF, 0x49, 0xFF, 0xFF, 0xFF, 0xFF,
	0x5A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5E, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0xFF, 0x45, 0xFF, 0xFF, 0x49, 0xFF, 0xFF, 0xFF, 0xFF,
	0x5A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5E, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0xFF, 0xFF,
}
var tounicode_cp1257_lithuanian_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021, 0x0000, 0x2030, 0x0000, 0x2039, 0x0000, 0x00A8, 0x02C7, 0x00B8,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x00AF, 0x02DB, 0x0000,
	0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x0000, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
	0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
	0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
	0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
	0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9,
}
var fromunicode_cp1257_lithuanian_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfc, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x0, 0xa2, 0xa3, 0xa4, 0x0, 0xa6, 0xa7, 0x8d, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0x9d, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0x8f, 0xb9, 0x0, 0xbb, 0xbc, 0xbd, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4, 0xc5, 0xaf, 0x0, 0x0, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd3, 0x0, 0xd5, 0xd6, 0xd7, 0xa8, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0x0, 0xe4, 0xe5, 0xbf, 0x0, 0x0, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf3, 0x0, 0xf5, 0xf6, 0xf7, 0xb8, 0x0, 0x0, 0x0, 0xfc}},
	{From: 0x100, To: 0x17e, Range: []byte{0xc2, 0xe2, 0x0, 0x0, 0xc0, 0xe0, 0xc3, 0xe3, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xe8, 0x0, 0x0, 0x0, 0x0, 0xc7, 0xe7, 0x0, 0x0, 0xcb, 0xeb, 0xc6, 0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0xee, 0x0, 0x0, 0xc1, 0xe1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xed, 0x0, 0x0, 0x0, 0xcf, 0xef, 0x0, 0x0, 0x0, 0x0, 0xd9, 0xf9, 0xd1, 0xf1, 0xd2, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0xf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0xba, 0x0, 0x0, 0xda, 0xfa, 0x0, 0x0, 0x0, 0x0, 0xd0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdb, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0xea, 0xdd, 0xfd, 0xde, 0xfe}},
	{From: 0x2013, To: 0x20ac, Range: []byte{0x96, 0x97, 0x0, 0x0, 0x0, 0x91, 0x92, 0x82, 0x0, 0x93, 0x94, 0x84, 0x0, 0x86, 0x87, 0x95, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}},
	{From: 0x2c7, To: 0x2db, Range: []byte{0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x9e}},
	{From: 0x2122, To: 0x2122, Range: []byte{0x99}},
}
var sortorder_latin5_turkish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x45, 0x46, 0x47, 0x48, 0x4A, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52,
	0x54, 0x55, 0x56, 0x57, 0x59, 0x5A, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65,
	0x66, 0x41, 0x42, 0x43, 0x45, 0x46, 0x47, 0x48, 0x4A, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52,
	0x54, 0x55, 0x56, 0x57, 0x59, 0x5A, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x87, 0x88, 0x89, 0x8A, 0x8B,
	0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B,
	0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB,
	0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB,
	0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x44, 0x46, 0x46, 0x46, 0x46, 0x4C, 0x4C, 0x4C, 0x4C,
	0x49, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0xE0, 0x52, 0x5A, 0x5A, 0x5A, 0x5B, 0x4C, 0x58, 0x57,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x44, 0x46, 0x46, 0x46, 0x46, 0x4C, 0x4C, 0x4C, 0x4C,
	0x49, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0xFA, 0x52, 0x5A, 0x5A, 0x5A, 0x5B, 0x4B, 0x58, 0x5F,
}
var tounicode_latin5_turkish_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
	0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
	0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF,
}
var fromunicode_latin5_turkish_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xff, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0x0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0x0, 0x0, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0x0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0x0, 0x0, 0xff}},
	{From: 0x11e, To: 0x15f, Range: []byte{0xd0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdd, 0xfd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xde, 0xfe}},
}
var tounicode_armscii8_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
	0x00A0, 0x2741, 0x00A7, 0x0589, 0x0029, 0x0028, 0x00BB, 0x00AB, 0x2014, 0x002E, 0x055D, 0x002C, 0x002D, 0x055F, 0x2026, 0x055C,
	0x055B, 0x055E, 0x0531, 0x0561, 0x0532, 0x0562, 0x0533, 0x0563, 0x0534, 0x0564, 0x0535, 0x0565, 0x0536, 0x0566, 0x0537, 0x0567,
	0x0538, 0x0568, 0x0539, 0x0569, 0x053A, 0x056A, 0x053B, 0x056B, 0x053C, 0x056C, 0x053D, 0x056D, 0x053E, 0x056E, 0x053F, 0x056F,
	0x0540, 0x0570, 0x0541, 0x0571, 0x0542, 0x0572, 0x0543, 0x0573, 0x0544, 0x0574, 0x0545, 0x0575, 0x0546, 0x0576, 0x0547, 0x0577,
	0x0548, 0x0578, 0x0549, 0x0579, 0x054A, 0x057A, 0x054B, 0x057B, 0x054C, 0x057C, 0x054D, 0x057D, 0x054E, 0x057E, 0x054F, 0x057F,
	0x0550, 0x0580, 0x0551, 0x0581, 0x0552, 0x0582, 0x0553, 0x0583, 0x0554, 0x0584, 0x0555, 0x0585, 0x0556, 0x0586, 0x2019, 0x0027,
}
var fromunicode_armscii8_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xbb, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa2, 0x0, 0x0, 0x0, 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa6}},
	{From: 0x531, To: 0x589, Range: []byte{0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xaf, 0xaa, 0xb1, 0xad, 0x0, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf, 0xc1, 0xc3, 0xc5, 0xc7, 0xc9, 0xcb, 0xcd, 0xcf, 0xd1, 0xd3, 0xd5, 0xd7, 0xd9, 0xdb, 0xdd, 0xdf, 0xe1, 0xe3, 0xe5, 0xe7, 0xe9, 0xeb, 0xed, 0xef, 0xf1, 0xf3, 0xf5, 0xf7, 0xf9, 0xfb, 0xfd, 0x0, 0x0, 0xa3}},
	{From: 0x2014, To: 0x2026, Range: []byte{0xa8, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xae}},
	{From: 0x2741, To: 0x2741, Range: []byte{0xa1}},
}
var sortorder_cp866_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D,
	0x5F, 0x61, 0x63, 0x65, 0x67, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1,
	0xC2, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x54, 0x55, 0x57, 0x59, 0x5B, 0x5D,
	0x5F, 0x61, 0x63, 0x65, 0x67, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
	0x75, 0x77, 0x79, 0x7B, 0x7D, 0x7F, 0x85, 0x87, 0x89, 0x8D, 0x8F, 0x91, 0x93, 0x95, 0x97, 0x99,
	0x9B, 0x9D, 0x9F, 0xA1, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 0xAF, 0xB1, 0xB3, 0xB5, 0xB7, 0xB9, 0xBB,
	0x75, 0x77, 0x79, 0x7B, 0x7D, 0x7F, 0x85, 0x87, 0x89, 0x8D, 0x8F, 0x91, 0x93, 0x95, 0x97, 0x99,
	0xC8, 0xC9, 0xCA, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
	0x9B, 0x9D, 0x9F, 0xA1, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 0xAF, 0xB1, 0xB3, 0xB5, 0xB7, 0xB9, 0xBB,
	0x81, 0x81, 0x83, 0x83, 0x8B, 0x8B, 0xA3, 0xA3, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2,
}
var tounicode_cp866_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
	0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0,
}
var fromunicode_cp866_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xb7, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x0, 0xfd, 0x0, 0x0, 0x0, 0x0, 0xfa}},
	{From: 0x401, To: 0x45e, Range: []byte{0xf0, 0x0, 0x0, 0xf2, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf6, 0x0, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0x0, 0xf1, 0x0, 0x0, 0xf3, 0x0, 0x0, 0xf5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf7}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0xc4, 0x0, 0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xba, 0xd5, 0xd6, 0xc9, 0xb8, 0xb7, 0xbb, 0xd4, 0xd3, 0xc8, 0xbe, 0xbd, 0xbc, 0xc6, 0xc7, 0xcc, 0xb5, 0xb6, 0xb9, 0xd1, 0xd2, 0xcb, 0xcf, 0xd0, 0xca, 0xd8, 0xd7, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0x0, 0xdb, 0x0, 0x0, 0x0, 0xdd, 0x0, 0x0, 0x0, 0xde, 0xb0, 0xb1, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe}},
	{From: 0x2219, To: 0x221a, Range: []byte{0xf9, 0xfb}},
	{From: 0x207f, To: 0x207f, Range: []byte{0xfc}},
}
var sortorder_keybcs2_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x44, 0x45, 0x47, 0x49, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x5A,
	0x5E, 0x5F, 0x60, 0x63, 0x66, 0x68, 0x6C, 0x6D, 0x6E, 0x6F, 0x72, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x41, 0x44, 0x45, 0x47, 0x49, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x5A,
	0x5E, 0x5F, 0x60, 0x63, 0x66, 0x68, 0x6C, 0x6D, 0x6E, 0x6F, 0x72, 0x96, 0x97, 0x98, 0x99, 0x9A,
	0x45, 0x68, 0x49, 0x47, 0x41, 0x47, 0x66, 0x45, 0x49, 0x49, 0x56, 0x53, 0x56, 0x56, 0x41, 0x41,
	0x49, 0x72, 0x72, 0x5A, 0x5A, 0x5A, 0x68, 0x68, 0x6F, 0x5A, 0x68, 0x63, 0x56, 0x6F, 0x60, 0x66,
	0x41, 0x53, 0x5A, 0x68, 0x58, 0x58, 0x68, 0x5A, 0x63, 0x60, 0x60, 0x60, 0xA0, 0xA1, 0xA2, 0xA3,
	0xA4, 0xA5, 0xA6, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC,
	0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC,
	0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC,
	0x80, 0x65, 0x83, 0x87, 0x88, 0x89, 0xDD, 0x8A, 0x85, 0x8B, 0x84, 0x81, 0xDE, 0x85, 0x82, 0xDF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_keybcs2_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x010C, 0x00FC, 0x00E9, 0x010F, 0x00E4, 0x010E, 0x0164, 0x010D, 0x011B, 0x011A, 0x0139, 0x00CD, 0x013E, 0x013A, 0x00C4, 0x00C1,
	0x00C9, 0x017E, 0x017D, 0x00F4, 0x00F6, 0x00D3, 0x016F, 0x00DA, 0x00FD, 0x00D6, 0x00DC, 0x0160, 0x013D, 0x00DD, 0x0158, 0x0165,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0148, 0x0147, 0x016E, 0x00D4, 0x0161, 0x0159, 0x0155, 0x0154, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0,
}
var fromunicode_keybcs2_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xad, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xae, 0x0, 0x0, 0x0, 0x0, 0xf8, 0xf1, 0xfd, 0x0, 0x0, 0xe6, 0x0, 0xfa, 0x0, 0x0, 0x0, 0xaf, 0xac, 0x0, 0x0, 0x0, 0x0, 0x8f, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x95, 0xa7, 0x0, 0x99, 0x0, 0x0, 0x0, 0x97, 0x0, 0x9a, 0x9d, 0x0, 0xe1, 0x0, 0xa0, 0x0, 0x0, 0x84, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa2, 0x93, 0x0, 0x94, 0xf6, 0x0, 0x0, 0xa3, 0x0, 0x81, 0x98}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0xc4, 0x0, 0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xba, 0xd5, 0xd6, 0xc9, 0xb8, 0xb7, 0xbb, 0xd4, 0xd3, 0xc8, 0xbe, 0xbd, 0xbc, 0xc6, 0xc7, 0xcc, 0xb5, 0xb6, 0xb9, 0xd1, 0xd2, 0xcb, 0xcf, 0xd0, 0xca, 0xd8, 0xd7, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0x0, 0xdb, 0x0, 0x0, 0x0, 0xdd, 0x0, 0x0, 0x0, 0xde, 0xb0, 0xb1, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe}},
	{From: 0x10c, To: 0x17e, Range: []byte{0x80, 0x87, 0x85, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x8d, 0x0, 0x0, 0x9c, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa5, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xab, 0xaa, 0x0, 0x0, 0x9e, 0xa9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9b, 0xa8, 0x0, 0x0, 0x86, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa6, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x91}},
	{From: 0x393, To: 0x3c6, Range: []byte{0xe2, 0x0, 0x0, 0x0, 0x0, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0x0, 0x0, 0xe8, 0x0, 0x0, 0xea, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x0, 0xeb, 0xee, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe3, 0x0, 0x0, 0xe5, 0xe7, 0x0, 0xed}},
	{From: 0x2219, To: 0x2265, Range: []byte{0xf9, 0xfb, 0x0, 0x0, 0x0, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xef, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0xf3, 0xf2}},
	{From: 0x2320, To: 0x2321, Range: []byte{0xf4, 0xf5}},
	{From: 0x207f, To: 0x207f, Range: []byte{0xfc}},
}
var sortorder_macce_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x46, 0x47, 0x4A, 0x4C, 0x52, 0x53, 0x55, 0x56, 0x5A, 0x5B, 0x5D, 0x62, 0x62, 0x67,
	0x6F, 0x70, 0x71, 0x75, 0x79, 0x81, 0x88, 0x89, 0x8A, 0x8B, 0x8D, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x41, 0x46, 0x47, 0x4A, 0x4C, 0x52, 0x53, 0x55, 0x56, 0x5A, 0x5B, 0x5D, 0x62, 0x62, 0x67,
	0x6F, 0x70, 0x71, 0x75, 0x79, 0x81, 0x88, 0x89, 0x8A, 0x8B, 0x8D, 0x96, 0x97, 0x98, 0x99, 0x9A,
	0x41, 0x41, 0x41, 0x4C, 0x41, 0x67, 0x81, 0x41, 0x41, 0x47, 0x41, 0x47, 0x47, 0x47, 0x4C, 0x8D,
	0x8D, 0x4A, 0x56, 0x4A, 0x4C, 0x4C, 0x4C, 0x67, 0x4C, 0x67, 0x67, 0x67, 0x81, 0x4C, 0x4C, 0x81,
	0xA0, 0xA1, 0x4C, 0xA3, 0xA4, 0xA5, 0xA6, 0x75, 0xA8, 0xA9, 0xAA, 0x4C, 0xAC, 0xAD, 0x53, 0x56,
	0x56, 0x56, 0xB2, 0xB3, 0x56, 0x5B, 0xB6, 0xB7, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x62,
	0x62, 0x62, 0xC2, 0xC3, 0x62, 0x62, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0x62, 0x67, 0x67, 0x67, 0x67,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0x67, 0x71, 0x71, 0x71, 0xDC, 0xDD, 0x71, 0x71,
	0x71, 0x75, 0xE2, 0xE3, 0x75, 0x75, 0x75, 0x41, 0x79, 0x79, 0x56, 0x8D, 0x8D, 0x81, 0x67, 0x67,
	0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x8B, 0x8B, 0x5B, 0x8D, 0x5D, 0x8D, 0x53, 0xFF,
}
var tounicode_macce_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x00C4, 0x0100, 0x0101, 0x00C9, 0x0104, 0x00D6, 0x00DC, 0x00E1, 0x0105, 0x010C, 0x00E4, 0x010D, 0x0106, 0x0107, 0x00E9, 0x0179,
	0x017A, 0x010E, 0x00ED, 0x010F, 0x0112, 0x0113, 0x0116, 0x00F3, 0x0117, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x011A, 0x011B, 0x00FC,
	0x2020, 0x00B0, 0x0118, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x00A9, 0x2122, 0x0119, 0x00A8, 0x2260, 0x0123, 0x012E,
	0x012F, 0x012A, 0x2264, 0x2265, 0x012B, 0x0136, 0x2202, 0x2211, 0x0142, 0x013B, 0x013C, 0x013D, 0x013E, 0x0139, 0x013A, 0x0145,
	0x0146, 0x0143, 0x00AC, 0x221A, 0x0144, 0x0147, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x0148, 0x0150, 0x00D5, 0x0151, 0x014C,
	0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0x014D, 0x0154, 0x0155, 0x0158, 0x2039, 0x203A, 0x0159, 0x0156,
	0x0157, 0x0160, 0x201A, 0x201E, 0x0161, 0x015A, 0x015B, 0x00C1, 0x0164, 0x0165, 0x00CD, 0x017D, 0x017E, 0x016A, 0x00D3, 0x00D4,
	0x016B, 0x016E, 0x00DA, 0x016F, 0x0170, 0x0171, 0x0172, 0x0173, 0x00DD, 0x00FD, 0x0137, 0x017B, 0x0141, 0x017C, 0x0122, 0x02C7,
}
var fromunicode_macce_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x0, 0x0, 0xa3, 0x0, 0x0, 0x0, 0xa4, 0xac, 0xa9, 0x0, 0xc7, 0xc2, 0x0, 0xa8, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa6, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe7, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0xea, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0xef, 0xcd, 0x85, 0x0, 0x0, 0x0, 0xf2, 0x0, 0x86, 0xf8, 0x0, 0xa7, 0x0, 0x87, 0x0, 0x0, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x97, 0x99, 0x9b, 0x9a, 0xd6, 0x0, 0x0, 0x9c, 0x0, 0x9f, 0xf9}},
	{From: 0x100, To: 0x17e, Range: []byte{0x81, 0x82, 0x0, 0x0, 0x84, 0x88, 0x8c, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x89, 0x8b, 0x91, 0x93, 0x0, 0x0, 0x94, 0x95, 0x0, 0x0, 0x96, 0x98, 0xa2, 0xab, 0x9d, 0x9e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xae, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb1, 0xb4, 0x0, 0x0, 0xaf, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb5, 0xfa, 0x0, 0xbd, 0xbe, 0xb9, 0xba, 0xbb, 0xbc, 0x0, 0x0, 0xfc, 0xb8, 0xc1, 0xc4, 0xbf, 0xc0, 0xc5, 0xcb, 0x0, 0x0, 0x0, 0xcf, 0xd8, 0x0, 0x0, 0xcc, 0xce, 0x0, 0x0, 0xd9, 0xda, 0xdf, 0xe0, 0xdb, 0xde, 0xe5, 0xe6, 0x0, 0x0, 0x0, 0x0, 0xe1, 0xe4, 0x0, 0x0, 0xe8, 0xe9, 0x0, 0x0, 0x0, 0x0, 0xed, 0xf0, 0x0, 0x0, 0xf1, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8f, 0x90, 0xfb, 0xfd, 0xeb, 0xec}},
	{From: 0x2013, To: 0x203a, Range: []byte{0xd0, 0xd1, 0x0, 0x0, 0x0, 0xd4, 0xd5, 0xe2, 0x0, 0xd2, 0xd3, 0xe3, 0x0, 0xa0, 0x0, 0xa5, 0x0, 0x0, 0x0, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xdd}},
	{From: 0x2202, To: 0x2265, Range: []byte{0xb6, 0x0, 0x0, 0x0, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xad, 0x0, 0x0, 0x0, 0xb2, 0xb3}},
	{From: 0x2c7, To: 0x2c7, Range: []byte{0xff}},
	{From: 0x2122, To: 0x2122, Range: []byte{0xaa}},
	{From: 0x25ca, To: 0x25ca, Range: []byte{0xd7}},
}
var sortorder_macroman_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x49, 0x50, 0x52, 0x53, 0x57, 0x59, 0x60, 0x61, 0x67, 0x68, 0x69, 0x70, 0x71, 0x72,
	0x79, 0x80, 0x81, 0x82, 0x84, 0x85, 0x90, 0x91, 0x92, 0x93, 0x95, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
	0xA5, 0x41, 0x49, 0x50, 0x52, 0x53, 0x57, 0x59, 0x60, 0x61, 0x67, 0x68, 0x69, 0x70, 0x71, 0x72,
	0x79, 0x80, 0x81, 0x82, 0x84, 0x85, 0x90, 0x91, 0x92, 0x93, 0x95, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA,
	0x41, 0x41, 0x50, 0x53, 0x71, 0x72, 0x85, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x50, 0x53, 0x53,
	0x53, 0x53, 0x61, 0x61, 0x61, 0x61, 0x71, 0x72, 0x72, 0x72, 0x72, 0x72, 0x85, 0x85, 0x85, 0x85,
	0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0x82, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0x48, 0x72,
	0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0x48, 0x72,
	0xC6, 0xC7, 0xC8, 0xC9, 0x57, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0x41, 0x41, 0x72, 0xD0, 0xD1,
	0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0x93, 0x93, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0x41, 0x53, 0x41, 0x53, 0x53, 0x61, 0x61, 0x61, 0x61, 0x72, 0x72,
	0xF0, 0x72, 0x85, 0x85, 0x85, 0x61, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_macroman_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1, 0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
	0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
	0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,
	0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211, 0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x00E6, 0x00F8,
	0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
	0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0x00FF, 0x0178, 0x2044, 0x20AC, 0x2039, 0x203A, 0xFB01, 0xFB02,
	0x2021, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1, 0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
	0xF8FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC, 0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7,
}
var fromunicode_macroman_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xff, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0xc1, 0xa2, 0xa3, 0x0, 0xb4, 0x0, 0xa4, 0xac, 0xa9, 0xbb, 0xc7, 0xc2, 0x0, 0xa8, 0xf8, 0xa1, 0xb1, 0x0, 0x0, 0xab, 0xb5, 0xa6, 0xe1, 0xfc, 0x0, 0xbc, 0xc8, 0x0, 0x0, 0x0, 0xc0, 0xcb, 0xe7, 0xe5, 0xcc, 0x80, 0x81, 0xae, 0x82, 0xe9, 0x83, 0xe6, 0xe8, 0xed, 0xea, 0xeb, 0xec, 0x0, 0x84, 0xf1, 0xee, 0xef, 0xcd, 0x85, 0x0, 0xaf, 0xf4, 0xf2, 0xf3, 0x86, 0x0, 0x0, 0xa7, 0x88, 0x87, 0x89, 0x8b, 0x8a, 0x8c, 0xbe, 0x8d, 0x8f, 0x8e, 0x90, 0x91, 0x93, 0x92, 0x94, 0x95, 0x0, 0x96, 0x98, 0x97, 0x99, 0x9b, 0x9a, 0xd6, 0xbf, 0x9d, 0x9c, 0x9e, 0x9f, 0x0, 0x0, 0xd8}},
	{From: 0x2013, To: 0x20ac, Range: []byte{0xd0, 0xd1, 0x0, 0x0, 0x0, 0xd4, 0xd5, 0xe2, 0x0, 0xd2, 0xd3, 0xe3, 0x0, 0xa0, 0xe0, 0xa5, 0x0, 0x0, 0x0, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xdd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdb}},
	{From: 0x2202, To: 0x2265, Range: []byte{0xb6, 0x0, 0x0, 0x0, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x0, 0xb7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xad, 0x0, 0x0, 0x0, 0xb2, 0xb3}},
	{From: 0x2c6, To: 0x2dd, Range: []byte{0xf6, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf9, 0xfa, 0xfb, 0xfe, 0xf7, 0xfd}},
	{From: 0x131, To: 0x192, Range: []byte{0xf5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0xcf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4}},
	{From: 0x3a9, To: 0x3c0, Range: []byte{0xbd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb9}},
	{From: 0xfb01, To: 0xfb02, Range: []byte{0xde, 0xdf}},
	{From: 0x2122, To: 0x2122, Range: []byte{0xaa}},
	{From: 0x25ca, To: 0x25ca, Range: []byte{0xd7}},
	{From: 0xf8ff, To: 0xf8ff, Range: []byte{0xf0}},
}
var sortorder_cp852_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x47, 0x48, 0x4C, 0x4F, 0x54, 0x55, 0x56, 0x57, 0x5A, 0x5B, 0x5C, 0x5E, 0x5F, 0x62,
	0x67, 0x68, 0x69, 0x6C, 0x71, 0x74, 0x75, 0x76, 0x77, 0x78, 0x7B, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x41, 0x47, 0x48, 0x4C, 0x4F, 0x54, 0x55, 0x56, 0x57, 0x5A, 0x5B, 0x5C, 0x5E, 0x5F, 0x62,
	0x67, 0x68, 0x69, 0x6C, 0x71, 0x74, 0x75, 0x76, 0x77, 0x78, 0x7B, 0x96, 0x97, 0x98, 0x99, 0x9A,
	0x48, 0x74, 0x4F, 0x41, 0x41, 0x74, 0x48, 0x48, 0x5C, 0x4F, 0x62, 0x62, 0x57, 0x7B, 0x41, 0x48,
	0x4F, 0x5C, 0x5C, 0x62, 0x62, 0x5C, 0x5C, 0x6C, 0x6C, 0x62, 0x74, 0x71, 0x71, 0x5C, 0x9E, 0x48,
	0x41, 0x57, 0x62, 0x74, 0x41, 0x41, 0x7B, 0x7B, 0x4F, 0x4F, 0xAA, 0x7B, 0x48, 0x6C, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0x41, 0x41, 0x4F, 0x6C, 0xB5, 0xBA, 0xBB, 0xBC, 0x7B, 0x7B, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0x41, 0x41, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0x4C, 0x4C, 0x4C, 0x4F, 0x4C, 0x60, 0x57, 0x57, 0x4F, 0xD9, 0xDA, 0xDB, 0xDC, 0x71, 0x74, 0xDF,
	0x62, 0x70, 0x62, 0x60, 0x60, 0x60, 0x6C, 0x6C, 0x69, 0x74, 0x69, 0x74, 0x78, 0x78, 0x71, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0x74, 0x69, 0x69, 0xFE, 0xFF,
}
var tounicode_cp852_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x016F, 0x0107, 0x00E7, 0x0142, 0x00EB, 0x0150, 0x0151, 0x00EE, 0x0179, 0x00C4, 0x0106,
	0x00C9, 0x0139, 0x013A, 0x00F4, 0x00F6, 0x013D, 0x013E, 0x015A, 0x015B, 0x00D6, 0x00DC, 0x0164, 0x0165, 0x0141, 0x00D7, 0x010D,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0104, 0x0105, 0x017D, 0x017E, 0x0118, 0x0119, 0x00AC, 0x017A, 0x010C, 0x015F, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x011A, 0x015E, 0x2563, 0x2551, 0x2557, 0x255D, 0x017B, 0x017C, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0102, 0x0103, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x0111, 0x0110, 0x010E, 0x00CB, 0x010F, 0x0147, 0x00CD, 0x00CE, 0x011B, 0x2518, 0x250C, 0x2588, 0x2584, 0x0162, 0x016E, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x0143, 0x0144, 0x0148, 0x0160, 0x0161, 0x0154, 0x00DA, 0x0155, 0x0170, 0x00FD, 0x00DD, 0x0163, 0x00B4,
	0x00AD, 0x02DD, 0x02DB, 0x02C7, 0x02D8, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x02D9, 0x0171, 0x0158, 0x0159, 0x25A0, 0x00A0,
}
var fromunicode_cp852_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfd, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x0, 0x0, 0xcf, 0x0, 0x0, 0xf5, 0xf9, 0x0, 0x0, 0xae, 0xaa, 0xf0, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x0, 0xef, 0x0, 0x0, 0x0, 0xf7, 0x0, 0x0, 0xaf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb5, 0xb6, 0x0, 0x8e, 0x0, 0x0, 0x80, 0x0, 0x90, 0x0, 0xd3, 0x0, 0xd6, 0xd7, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xe2, 0x0, 0x99, 0x9e, 0x0, 0x0, 0xe9, 0x0, 0x9a, 0xed, 0x0, 0xe1, 0x0, 0xa0, 0x83, 0x0, 0x84, 0x0, 0x0, 0x87, 0x0, 0x82, 0x0, 0x89, 0x0, 0xa1, 0x8c, 0x0, 0x0, 0x0, 0x0, 0xa2, 0x93, 0x0, 0x94, 0xf6, 0x0, 0x0, 0xa3, 0x0, 0x81, 0xec}},
	{From: 0x102, To: 0x17e, Range: []byte{0xc6, 0xc7, 0xa4, 0xa5, 0x8f, 0x86, 0x0, 0x0, 0x0, 0x0, 0xac, 0x9f, 0xd2, 0xd4, 0xd1, 0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xa9, 0xb7, 0xd8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x91, 0x92, 0x0, 0x0, 0x95, 0x96, 0x0, 0x0, 0x9d, 0x88, 0xe3, 0xe4, 0x0, 0x0, 0xd5, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x8b, 0x0, 0x0, 0xe8, 0xea, 0x0, 0x0, 0xfc, 0xfd, 0x97, 0x98, 0x0, 0x0, 0xb8, 0xad, 0xe6, 0xe7, 0xdd, 0xee, 0x9b, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xde, 0x85, 0xeb, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8d, 0xab, 0xbd, 0xbe, 0xa6, 0xa7}},
	{From: 0x2500, To: 0x25a0, Range: []byte{0xc4, 0x0, 0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xba, 0x0, 0x0, 0xc9, 0x0, 0x0, 0xbb, 0x0, 0x0, 0xc8, 0x0, 0x0, 0xbc, 0x0, 0x0, 0xcc, 0x0, 0x0, 0xb9, 0x0, 0x0, 0xcb, 0x0, 0x0, 0xca, 0x0, 0x0, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0x0, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xb1, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe}},
	{From: 0x2c7, To: 0x2dd, Range: []byte{0xf3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xfa, 0x0, 0xf2, 0x0, 0xf1}},
}
var sortorder_latin7_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x30, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x2B, 0x38, 0x39, 0x3A, 0x5C, 0x3B, 0x2C, 0x3C, 0x3D,
	0x76, 0x7A, 0x7C, 0x7E, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x3E, 0x3F, 0x5D, 0x5E, 0x5F, 0x40,
	0x41, 0x86, 0x92, 0x94, 0x9A, 0x9C, 0xA6, 0xA8, 0xAC, 0xAE, 0xB4, 0xB6, 0xBA, 0xC0, 0xC2, 0xC8,
	0xD4, 0xD6, 0xD8, 0xDC, 0xE3, 0xE6, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0x42, 0x43, 0x44, 0x45, 0x46,
	0x47, 0x86, 0x92, 0x94, 0x9A, 0x9C, 0xA6, 0xA8, 0xAC, 0xAE, 0xB4, 0xB6, 0xBA, 0xC0, 0xC2, 0xC8,
	0xD4, 0xD6, 0xD8, 0xDC, 0xE2, 0xE6, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0x48, 0x49, 0x4A, 0x4B, 0x20,
	0x75, 0x21, 0x56, 0x22, 0x59, 0x73, 0x70, 0x71, 0x23, 0x74, 0x24, 0x5A, 0x25, 0x4D, 0x51, 0x50,
	0x26, 0x54, 0x55, 0x57, 0x58, 0x72, 0x2E, 0x2F, 0x27, 0xE5, 0x28, 0x5B, 0x29, 0x4E, 0x53, 0x2A,
	0x31, 0xFE, 0x65, 0x66, 0x67, 0xFF, 0x4C, 0x68, 0x2D, 0x69, 0xDA, 0x61, 0x6A, 0x2D, 0x6B, 0x90,
	0x6C, 0x60, 0x7D, 0x7F, 0x4F, 0x6D, 0x6E, 0x6F, 0xD3, 0x7B, 0xDB, 0x62, 0x77, 0x78, 0x79, 0x90,
	0x8E, 0xB2, 0x8A, 0x96, 0x88, 0x8C, 0xA4, 0xA2, 0x98, 0x9E, 0xF8, 0xA0, 0xAA, 0xB8, 0xB0, 0xBE,
	0xE1, 0xC4, 0xC6, 0xCA, 0xCE, 0xD0, 0xCC, 0x63, 0xEC, 0xBC, 0xDE, 0xEA, 0xE8, 0xFA, 0xFC, 0xE0,
	0x8E, 0xB2, 0x8A, 0x96, 0x88, 0x8C, 0xA4, 0xA2, 0x98, 0x9E, 0xF8, 0xA0, 0xAA, 0xB8, 0xB0, 0xBE,
	0xE1, 0xC4, 0xC6, 0xCA, 0xCE, 0xD0, 0xCC, 0x64, 0xEC, 0xBC, 0xDE, 0xEA, 0xE8, 0xFA, 0xFC, 0x52,
}

var sortorder_latin7_general_cs = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x30, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x2B, 0x38, 0x39, 0x3A, 0x5C, 0x3B, 0x2C, 0x3C, 0x3D,
	0x76, 0x7A, 0x7C, 0x7E, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x3E, 0x3F, 0x5D, 0x5E, 0x5F, 0x40,
	0x41, 0x86, 0x92, 0x94, 0x9A, 0x9C, 0xA6, 0xA8, 0xAC, 0xAE, 0xB4, 0xB6, 0xBA, 0xC0, 0xC2, 0xC8,
	0xD4, 0xD6, 0xD8, 0xDC, 0xE3, 0xE6, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0x42, 0x43, 0x44, 0x45, 0x46,
	0x47, 0x87, 0x93, 0x95, 0x9B, 0x9D, 0xA7, 0xA9, 0xAD, 0xAF, 0xB5, 0xB7, 0xBB, 0xC1, 0xC3, 0xC9,
	0xD5, 0xD7, 0xD9, 0xDD, 0xE4, 0xE7, 0xEF, 0xF1, 0xF3, 0xF5, 0xF7, 0x48, 0x49, 0x4A, 0x4B, 0x20,
	0x75, 0x21, 0x56, 0x22, 0x59, 0x73, 0x70, 0x71, 0x23, 0x74, 0x24, 0x5A, 0x25, 0x4D, 0x51, 0x50,
	0x26, 0x54, 0x55, 0x57, 0x58, 0x72, 0x2E, 0x2F, 0x27, 0xE5, 0x28, 0x5B, 0x29, 0x4E, 0x53, 0x2A,
	0x31, 0xFE, 0x65, 0x66, 0x67, 0xFF, 0x4C, 0x68, 0xD3, 0x69, 0xDA, 0x61, 0x6A, 0x2D, 0x6B, 0x90,
	0x6C, 0x60, 0x7D, 0x7F, 0x4F, 0x6D, 0x6E, 0x6F, 0xD2, 0x7B, 0xDB, 0x62, 0x77, 0x78, 0x79, 0x91,
	0x8E, 0xB2, 0x8A, 0x96, 0x88, 0x8C, 0xA4, 0xA2, 0x98, 0x9E, 0xF8, 0xA0, 0xAA, 0xB8, 0xB0, 0xBE,
	0xE1, 0xC4, 0xC6, 0xCA, 0xCE, 0xD0, 0xCC, 0x63, 0xEC, 0xBC, 0xDE, 0xEA, 0xE8, 0xFA, 0xFC, 0xE0,
	0x8F, 0xB3, 0x8B, 0x97, 0x89, 0x8D, 0xA5, 0xA3, 0x99, 0x9F, 0xF9, 0xA1, 0xAB, 0xB9, 0xB1, 0xBF,
	0xE2, 0xC5, 0xC7, 0xCB, 0xCF, 0xD1, 0xCD, 0x64, 0xED, 0xBD, 0xDF, 0xEB, 0xE9, 0xFB, 0xFD, 0x52,
}

var sortorder_cp1250_croatian_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x96, 0x97, 0x98, 0x99, 0x9A,
	0x9B, 0x9C, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0x60, 0xA6, 0x5F, 0x62, 0x6C, 0x6B,
	0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0x60, 0xB1, 0x5F, 0x62, 0x6C, 0x6B,
	0xB2, 0xB3, 0xB4, 0x54, 0xB5, 0x41, 0xB6, 0xB7, 0xB8, 0xB9, 0x5F, 0xBA, 0xBB, 0xBC, 0xBD, 0x6B,
	0xBE, 0xBF, 0xC0, 0x54, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0x41, 0x5F, 0xC6, 0x54, 0xC7, 0x54, 0x6B,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x46, 0x4B, 0x4B, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x4A, 0x57, 0x57, 0x59, 0x59, 0x59, 0x59, 0xC8, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0x5F,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x46, 0x4B, 0x4B, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x4A, 0x57, 0x57, 0x59, 0x59, 0x59, 0x59, 0xC9, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0xFF,
}

var sortorder_latin1_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x51, 0x53, 0x57, 0x5B, 0x65, 0x67, 0x69, 0x6B, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x81,
	0x8F, 0x91, 0x93, 0x95, 0x98, 0x9A, 0xA4, 0xA6, 0xA8, 0xAA, 0xAF, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xB8, 0x41, 0x51, 0x53, 0x57, 0x5B, 0x65, 0x67, 0x69, 0x6B, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x81,
	0x8F, 0x91, 0x93, 0x95, 0x98, 0x9A, 0xA4, 0xA6, 0xA8, 0xAA, 0xAF, 0xB9, 0xBA, 0xBB, 0xBC, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
	0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x55, 0x5D, 0x5F, 0x61, 0x63, 0x6D, 0x6F, 0x71, 0x73,
	0x59, 0x7F, 0x83, 0x85, 0x87, 0x89, 0x8B, 0xBD, 0x8D, 0x9C, 0x9E, 0xA0, 0xA2, 0xAC, 0xB1, 0x97,
	0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x55, 0x5D, 0x5F, 0x61, 0x63, 0x6D, 0x6F, 0x71, 0x73,
	0x59, 0x7F, 0x83, 0x85, 0x87, 0x89, 0x8B, 0xBE, 0x8D, 0x9C, 0x9E, 0xA0, 0xA2, 0xAC, 0xB1, 0xAE,
}

var sortorder_latin1_general_cs = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x51, 0x53, 0x57, 0x5B, 0x65, 0x67, 0x69, 0x6B, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x81,
	0x8F, 0x91, 0x93, 0x95, 0x98, 0x9A, 0xA4, 0xA6, 0xA8, 0xAA, 0xAF, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xB8, 0x42, 0x52, 0x54, 0x58, 0x5C, 0x66, 0x68, 0x6A, 0x6C, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 0x82,
	0x90, 0x92, 0x94, 0x96, 0x99, 0x9B, 0xA5, 0xA7, 0xA9, 0xAB, 0xB0, 0xB9, 0xBA, 0xBB, 0xBC, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
	0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x55, 0x5D, 0x5F, 0x61, 0x63, 0x6D, 0x6F, 0x71, 0x73,
	0x59, 0x7F, 0x83, 0x85, 0x87, 0x89, 0x8B, 0xBD, 0x8D, 0x9C, 0x9E, 0xA0, 0xA2, 0xAC, 0xB1, 0x97,
	0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x56, 0x5E, 0x60, 0x62, 0x64, 0x6E, 0x70, 0x72, 0x74,
	0x5A, 0x80, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0xBE, 0x8E, 0x9D, 0x9F, 0xA1, 0xA3, 0xAD, 0xB2, 0xAE,
}

var sortorder_cp1251_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D,
	0x5F, 0x61, 0x63, 0x65, 0x67, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
	0xD8, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D,
	0x5F, 0x61, 0x63, 0x65, 0x67, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD,
	0x81, 0x83, 0xDE, 0x83, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xA1, 0xE5, 0xA7, 0x9D, 0xB3, 0xC1,
	0x81, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xA1, 0xEF, 0xA7, 0x9D, 0xB3, 0xC1,
	0xF0, 0xB7, 0xB7, 0x99, 0xF1, 0x7D, 0xF2, 0xF3, 0x87, 0xF4, 0x89, 0xF5, 0xF6, 0xF7, 0xF8, 0x95,
	0xF9, 0xFA, 0x93, 0x93, 0x7D, 0xFB, 0xFC, 0xFD, 0x87, 0xFE, 0x89, 0xFF, 0x99, 0x8F, 0x8F, 0x95,
	0x75, 0x77, 0x79, 0x7B, 0x7F, 0x85, 0x8B, 0x8D, 0x91, 0x97, 0x9B, 0x9F, 0xA3, 0xA5, 0xA9, 0xAB,
	0xAD, 0xAF, 0xB1, 0xB5, 0xB9, 0xBB, 0xBD, 0xBF, 0xC3, 0xC5, 0xC7, 0xC9, 0xCB, 0xCD, 0xCF, 0xD1,
	0x75, 0x77, 0x79, 0x7B, 0x7F, 0x85, 0x8B, 0x8D, 0x91, 0x97, 0x9B, 0x9F, 0xA3, 0xA5, 0xA9, 0xAB,
	0xAD, 0xAF, 0xB1, 0xB5, 0xB9, 0xBB, 0xBD, 0xBF, 0xC3, 0xC5, 0xC7, 0xC9, 0xCB, 0xCD, 0xCF, 0xD1,
}

var sortorder_cp1251_general_cs = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4B, 0x4D, 0x4F, 0x51, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D,
	0x5F, 0x61, 0x63, 0x65, 0x67, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
	0xD8, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD,
	0x81, 0x83, 0xDE, 0x84, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xA1, 0xE5, 0xA7, 0x9D, 0xB3, 0xC1,
	0x82, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xA2, 0xEF, 0xA8, 0x9E, 0xB4, 0xC2,
	0xF0, 0xB7, 0xB8, 0x99, 0xF1, 0x7D, 0xF2, 0xF3, 0x87, 0xF4, 0x89, 0xF5, 0xF6, 0xF7, 0xF8, 0x95,
	0xF9, 0xFA, 0x93, 0x94, 0x7E, 0xFB, 0xFC, 0xFD, 0x88, 0xFE, 0x8A, 0xFF, 0x9A, 0x8F, 0x90, 0x96,
	0x75, 0x77, 0x79, 0x7B, 0x7F, 0x85, 0x8B, 0x8D, 0x91, 0x97, 0x9B, 0x9F, 0xA3, 0xA5, 0xA9, 0xAB,
	0xAD, 0xAF, 0xB1, 0xB5, 0xB9, 0xBB, 0xBD, 0xBF, 0xC3, 0xC5, 0xC7, 0xC9, 0xCB, 0xCD, 0xCF, 0xD1,
	0x76, 0x78, 0x7A, 0x7C, 0x80, 0x86, 0x8C, 0x8E, 0x92, 0x98, 0x9C, 0xA0, 0xA4, 0xA6, 0xAA, 0xAC,
	0xAE, 0xB0, 0xB2, 0xB6, 0xBA, 0xBC, 0xBE, 0xC0, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2,
}

var sortorder_cp1256_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x45, 0x47, 0x4A, 0x4C, 0x52, 0x55, 0x57, 0x59, 0x5D, 0x5F, 0x61, 0x63, 0x65, 0x67,
	0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x7B, 0x7D, 0x7F, 0x81, 0x83, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD,
	0xBE, 0x41, 0x45, 0x47, 0x4A, 0x4C, 0x52, 0x55, 0x57, 0x59, 0x5D, 0x5F, 0x61, 0x63, 0x65, 0x67,
	0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x7B, 0x7D, 0x7F, 0x81, 0x83, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3,
	0xC4, 0x8E, 0xC5, 0x54, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0x6A, 0x92, 0x99, 0xCE,
	0xA5, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0x6A, 0xDA, 0xDB, 0xDC,
	0xDD, 0xB6, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB,
	0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xB7, 0xF6, 0xF7, 0xF8, 0xF9, 0xB8,
	0xFA, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x9F, 0x90, 0x91, 0x93, 0x94, 0x95,
	0x96, 0x97, 0x98, 0x9A, 0x9B, 0x9C, 0x9D, 0xFB, 0x9E, 0x9F, 0xA0, 0xA1, 0xAD, 0xA2, 0xA3, 0xA4,
	0x43, 0xA6, 0x44, 0xA7, 0xA8, 0xA9, 0xAA, 0x49, 0x4E, 0x4F, 0x50, 0x51, 0xAB, 0xAC, 0x5B, 0x5C,
	0xAE, 0xAF, 0xB0, 0xB1, 0x69, 0xB2, 0xB3, 0xFC, 0xB4, 0x78, 0xB5, 0x79, 0x7A, 0xFD, 0xFE, 0xFF,
}
var tounicode_cp1256_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021, 0x02C6, 0x2030, 0x0000, 0x2039, 0x0152, 0x0686, 0x0698, 0x0000,
	0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0000, 0x2122, 0x0000, 0x203A, 0x0153, 0x200C, 0x200D, 0x0000,
	0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x0000, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
	0x0000, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7, 0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643,
	0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
	0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7, 0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x0000,
}
var fromunicode_cp1256_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xfc, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x0, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0x0, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0x0, 0xbb, 0xbc, 0xbd, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0, 0xe2, 0x0, 0x0, 0x0, 0x0, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0x0, 0x0, 0xee, 0xef, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0xf7, 0x0, 0xf9, 0x0, 0xfb, 0xfc}},
	{From: 0x60c, To: 0x6af, Range: []byte{0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x0, 0x0, 0x0, 0xbf, 0x0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd8, 0xd9, 0xda, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xdd, 0xde, 0xdf, 0xe1, 0xe3, 0xe4, 0xe5, 0xe6, 0xec, 0xed, 0xf0, 0xf1, 0xf2, 0xf3, 0xf5, 0xf6, 0xf8, 0xfa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90}},
	{From: 0x200c, To: 0x20ac, Range: []byte{0x9d, 0x9e, 0xfd, 0xfe, 0x0, 0x0, 0x0, 0x96, 0x97, 0x0, 0x0, 0x0, 0x91, 0x92, 0x82, 0x0, 0x93, 0x94, 0x84, 0x0, 0x86, 0x87, 0x95, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}},
	{From: 0x152, To: 0x192, Range: []byte{0x8c, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x83}},
	{From: 0x2c6, To: 0x2c6, Range: []byte{0x88}},
	{From: 0x2122, To: 0x2122, Range: []byte{0x99}},
}

var sortorder_cp1257_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x4D, 0x4F, 0x55, 0x57, 0x61, 0x63, 0x67, 0x69, 0x6F, 0x71, 0x75, 0x7B, 0x7D, 0x83,
	0x8F, 0x91, 0x93, 0x97, 0x9E, 0xA0, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC,
	0xBD, 0x41, 0x4D, 0x4F, 0x55, 0x57, 0x61, 0x63, 0x67, 0x69, 0x6F, 0x71, 0x75, 0x7B, 0x7D, 0x83,
	0x8F, 0x91, 0x93, 0x97, 0x9E, 0xA0, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xBE, 0xBF, 0xC0, 0xC1, 0xC4,
	0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4,
	0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4,
	0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0x83, 0xED, 0x93, 0xEE, 0xEF, 0xF0, 0xF1, 0x41,
	0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0x83, 0xFA, 0x93, 0xFB, 0xFC, 0xFD, 0xFE, 0x41,
	0x41, 0x69, 0x41, 0x4F, 0x41, 0x41, 0x57, 0x57, 0x4F, 0x57, 0xB0, 0x57, 0x63, 0x71, 0x69, 0x75,
	0x97, 0x7D, 0x7D, 0x83, 0x83, 0x83, 0x83, 0xC2, 0xA0, 0x75, 0x97, 0xA0, 0xA0, 0xB0, 0xB0, 0x97,
	0x41, 0x69, 0x41, 0x4F, 0x41, 0x41, 0x57, 0x57, 0x4F, 0x57, 0xB0, 0x57, 0x63, 0x71, 0x69, 0x75,
	0x97, 0x7D, 0x7D, 0x83, 0x83, 0x83, 0x83, 0xC3, 0xA0, 0x75, 0x97, 0xA0, 0xA0, 0xB0, 0xB0, 0xFF,
}

var sortorder_geostd8_general_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}
var tounicode_geostd8_general_ci = [...]uint16{
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021, 0x0000, 0x2030, 0x0000, 0x2039, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0000, 0x0000, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x10D0, 0x10D1, 0x10D2, 0x10D3, 0x10D4, 0x10D5, 0x10D6, 0x10F1, 0x10D7, 0x10D8, 0x10D9, 0x10DA, 0x10DB, 0x10DC, 0x10F2, 0x10DD,
	0x10DE, 0x10DF, 0x10E0, 0x10E1, 0x10E2, 0x10F3, 0x10E3, 0x10E4, 0x10E5, 0x10E6, 0x10E7, 0x10E8, 0x10E9, 0x10EA, 0x10EB, 0x10EC,
	0x10ED, 0x10EE, 0x10F4, 0x10EF, 0x10F0, 0x10F5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2116, 0x0000, 0x0000,
}
var fromunicode_geostd8_general_ci = []charset.UnicodeMapping{
	{From: 0x0, To: 0xbf, Range: []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf}},
	{From: 0x10d0, To: 0x10f5, Range: []byte{0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe3, 0xe4, 0xc7, 0xce, 0xd5, 0xe2, 0xe5}},
	{From: 0x2013, To: 0x20ac, Range: []byte{0x96, 0x97, 0x0, 0x0, 0x0, 0x91, 0x92, 0x82, 0x0, 0x93, 0x94, 0x84, 0x0, 0x86, 0x87, 0x95, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}},
	{From: 0x2116, To: 0x2116, Range: []byte{0xfd}},
}

var sortorder_latin1_spanish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x51, 0x53, 0x57, 0x5B, 0x65, 0x67, 0x69, 0x6B, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x81,
	0x8F, 0x91, 0x93, 0x95, 0x98, 0x9A, 0xA4, 0xA6, 0xA8, 0xAA, 0xAF, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xB8, 0x41, 0x51, 0x53, 0x57, 0x5B, 0x65, 0x67, 0x69, 0x6B, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x81,
	0x8F, 0x91, 0x93, 0x95, 0x98, 0x9A, 0xA4, 0xA6, 0xA8, 0xAA, 0xAF, 0xB9, 0xBA, 0xBB, 0xBC, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x53, 0x5B, 0x5B, 0x5B, 0x5B, 0x6B, 0x6B, 0x6B, 0x6B,
	0x57, 0x7F, 0x81, 0x81, 0x81, 0x81, 0x81, 0xBD, 0x81, 0x9A, 0x9A, 0x9A, 0x9A, 0xAA, 0xB1, 0x97,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x53, 0x5B, 0x5B, 0x5B, 0x5B, 0x6B, 0x6B, 0x6B, 0x6B,
	0x57, 0x7F, 0x81, 0x81, 0x81, 0x81, 0x81, 0xBE, 0x81, 0x9A, 0x9A, 0x9A, 0x9A, 0xAA, 0xB1, 0xAA,
}

var sortorder_cp1250_polish_ci = [...]byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x90, 0x91, 0x92, 0x93, 0x94,
	0x95, 0x41, 0x43, 0x44, 0x48, 0x4B, 0x4D, 0x4E, 0x4F, 0x50, 0x52, 0x53, 0x54, 0x56, 0x57, 0x59,
	0x5B, 0x5C, 0x5D, 0x5F, 0x62, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x96, 0x97, 0x98, 0x99, 0x9A,
	0x9B, 0x9C, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0x5F, 0xA6, 0x60, 0x62, 0x6B, 0x6C,
	0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0x5F, 0xB1, 0x60, 0x62, 0x6B, 0x6C,
	0xB2, 0xB3, 0xB4, 0x55, 0xB5, 0x42, 0xB6, 0xB7, 0xB8, 0xB9, 0x5F, 0xBA, 0xBB, 0xBC, 0xBD, 0x6D,
	0xBE, 0xBF, 0xC0, 0x55, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0x42, 0x5F, 0xC6, 0x54, 0xC7, 0x54, 0x6D,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x44, 0x4B, 0x4C, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x48, 0x58, 0x57, 0x5A, 0x59, 0x59, 0x59, 0xC8, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0x5F,
	0x5D, 0x41, 0x41, 0x41, 0x41, 0x54, 0x47, 0x44, 0x44, 0x4B, 0x4C, 0x4B, 0x4B, 0x50, 0x50, 0x48,
	0x48, 0x58, 0x57, 0x5A, 0x59, 0x59, 0x59, 0xC9, 0x5D, 0x64, 0x64, 0x64, 0x64, 0x69, 0x62, 0xFF,
}

var weightTailoring_utf16_icelandic_ci = []uca.WeightPatch{
	{Codepoint: 193, Patch: []uint16{0xe34}},
	{Codepoint: 196, Patch: []uint16{0x106c}},
	{Codepoint: 197, Patch: []uint16{0x106e}},
	{Codepoint: 198, Patch: []uint16{0x106c}},
	{Codepoint: 201, Patch: []uint16{0xe8c}},
	{Codepoint: 205, Patch: []uint16{0xefc}},
	{Codepoint: 208, Patch: []uint16{0xe6e}},
	{Codepoint: 211, Patch: []uint16{0xf83}},
	{Codepoint: 214, Patch: []uint16{0x106d}},
	{Codepoint: 216, Patch: []uint16{0x106d}},
	{Codepoint: 218, Patch: []uint16{0x1020}},
	{Codepoint: 221, Patch: []uint16{0x105f}},
	{Codepoint: 222, Patch: []uint16{0x106b}},
	{Codepoint: 225, Patch: []uint16{0xe34}},
	{Codepoint: 228, Patch: []uint16{0x106c}},
	{Codepoint: 229, Patch: []uint16{0x106e}},
	{Codepoint: 230, Patch: []uint16{0x106c}},
	{Codepoint: 233, Patch: []uint16{0xe8c}},
	{Codepoint: 237, Patch: []uint16{0xefc}},
	{Codepoint: 240, Patch: []uint16{0xe6e}},
	{Codepoint: 243, Patch: []uint16{0xf83}},
	{Codepoint: 246, Patch: []uint16{0x106d}},
	{Codepoint: 248, Patch: []uint16{0x106d}},
	{Codepoint: 250, Patch: []uint16{0x1020}},
	{Codepoint: 253, Patch: []uint16{0x105f}},
	{Codepoint: 254, Patch: []uint16{0x106b}},
}
var weightTailoring_utf16_latvian_ci = []uca.WeightPatch{
	{Codepoint: 89, Patch: []uint16{0xefc}},
	{Codepoint: 121, Patch: []uint16{0xefc}},
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 290, Patch: []uint16{0xec2}},
	{Codepoint: 291, Patch: []uint16{0xec2}},
	{Codepoint: 310, Patch: []uint16{0xf22}},
	{Codepoint: 311, Patch: []uint16{0xf22}},
	{Codepoint: 315, Patch: []uint16{0xf2f}},
	{Codepoint: 316, Patch: []uint16{0xf2f}},
	{Codepoint: 325, Patch: []uint16{0xf65}},
	{Codepoint: 326, Patch: []uint16{0xf65}},
	{Codepoint: 342, Patch: []uint16{0xfc1}},
	{Codepoint: 343, Patch: []uint16{0xfc1}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
}
var weightTailoring_utf16_romanian_ci = []uca.WeightPatch{
	{Codepoint: 194, Patch: []uint16{0xe35}},
	{Codepoint: 206, Patch: []uint16{0xefc}},
	{Codepoint: 226, Patch: []uint16{0xe35}},
	{Codepoint: 238, Patch: []uint16{0xefc}},
	{Codepoint: 258, Patch: []uint16{0xe34}},
	{Codepoint: 259, Patch: []uint16{0xe34}},
	{Codepoint: 350, Patch: []uint16{0xfeb}},
	{Codepoint: 351, Patch: []uint16{0xfeb}},
	{Codepoint: 354, Patch: []uint16{0x1003}},
	{Codepoint: 355, Patch: []uint16{0x1003}},
	{Codepoint: 536, Patch: []uint16{0xfeb}},
	{Codepoint: 537, Patch: []uint16{0xfeb}},
	{Codepoint: 538, Patch: []uint16{0x1003}},
	{Codepoint: 539, Patch: []uint16{0x1003}},
}
var weightTailoring_utf16_slovenian_ci = []uca.WeightPatch{
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
}
var weightTailoring_utf16_polish_ci = []uca.WeightPatch{
	{Codepoint: 211, Patch: []uint16{0xf83}},
	{Codepoint: 243, Patch: []uint16{0xf83}},
	{Codepoint: 260, Patch: []uint16{0xe34}},
	{Codepoint: 261, Patch: []uint16{0xe34}},
	{Codepoint: 262, Patch: []uint16{0xe61}},
	{Codepoint: 263, Patch: []uint16{0xe61}},
	{Codepoint: 280, Patch: []uint16{0xe8c}},
	{Codepoint: 281, Patch: []uint16{0xe8c}},
	{Codepoint: 321, Patch: []uint16{0xf2f}},
	{Codepoint: 322, Patch: []uint16{0xf2f}},
	{Codepoint: 323, Patch: []uint16{0xf65}},
	{Codepoint: 324, Patch: []uint16{0xf65}},
	{Codepoint: 346, Patch: []uint16{0xfeb}},
	{Codepoint: 347, Patch: []uint16{0xfeb}},
	{Codepoint: 377, Patch: []uint16{0x106b}},
	{Codepoint: 378, Patch: []uint16{0x106b}},
	{Codepoint: 379, Patch: []uint16{0x106c}},
	{Codepoint: 380, Patch: []uint16{0x106c}},
}
var weightTailoring_utf16_estonian_ci = []uca.WeightPatch{
	{Codepoint: 90, Patch: []uint16{0xfec}},
	{Codepoint: 122, Patch: []uint16{0xfec}},
	{Codepoint: 196, Patch: []uint16{0x1053}},
	{Codepoint: 213, Patch: []uint16{0x1052}},
	{Codepoint: 214, Patch: []uint16{0x1054}},
	{Codepoint: 220, Patch: []uint16{0x1055}},
	{Codepoint: 228, Patch: []uint16{0x1053}},
	{Codepoint: 245, Patch: []uint16{0x1052}},
	{Codepoint: 246, Patch: []uint16{0x1054}},
	{Codepoint: 252, Patch: []uint16{0x1055}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0xfed}},
	{Codepoint: 382, Patch: []uint16{0xfed}},
}
var weightTailoring_utf16_spanish_ci = []uca.WeightPatch{
	{Codepoint: 209, Patch: []uint16{0xf65}},
	{Codepoint: 241, Patch: []uint16{0xf65}},
}
var weightTailoring_utf16_swedish_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x106c}},
	{Codepoint: 197, Patch: []uint16{0x106b}},
	{Codepoint: 198, Patch: []uint16{0x106c}},
	{Codepoint: 214, Patch: []uint16{0x106d}},
	{Codepoint: 216, Patch: []uint16{0x106d}},
	{Codepoint: 220, Patch: []uint16{0x105e}},
	{Codepoint: 228, Patch: []uint16{0x106c}},
	{Codepoint: 229, Patch: []uint16{0x106b}},
	{Codepoint: 230, Patch: []uint16{0x106c}},
	{Codepoint: 246, Patch: []uint16{0x106d}},
	{Codepoint: 248, Patch: []uint16{0x106d}},
	{Codepoint: 252, Patch: []uint16{0x105e}},
}
var weightTailoring_utf16_turkish_ci = []uca.WeightPatch{
	{Codepoint: 73, Patch: []uint16{0xee2}},
	{Codepoint: 199, Patch: []uint16{0xe61}},
	{Codepoint: 214, Patch: []uint16{0xf83}},
	{Codepoint: 220, Patch: []uint16{0x1020}},
	{Codepoint: 231, Patch: []uint16{0xe61}},
	{Codepoint: 246, Patch: []uint16{0xf83}},
	{Codepoint: 252, Patch: []uint16{0x1020}},
	{Codepoint: 286, Patch: []uint16{0xec2}},
	{Codepoint: 287, Patch: []uint16{0xec2}},
	{Codepoint: 305, Patch: []uint16{0xee2}},
	{Codepoint: 350, Patch: []uint16{0xfeb}},
	{Codepoint: 351, Patch: []uint16{0xfeb}},
}
var weightTailoring_utf16_czech_ci = []uca.WeightPatch{
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 344, Patch: []uint16{0xfc1}},
	{Codepoint: 345, Patch: []uint16{0xfc1}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
}

type contractor_utf16_czech_ci struct{}

func (contractor_utf16_czech_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf16_czech_ci_weights[0:3], b0[width1:], 2
		case 104:
			return contractor_utf16_czech_ci_weights[3:6], b0[width1:], 2
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 104:
			return contractor_utf16_czech_ci_weights[6:9], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf16_czech_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf16_czech_ci_weights = [...]uint16{0x0ee2, 0x0000, 0x0000, 0x0ee2, 0x0000, 0x0000, 0x0ee2, 0x0000, 0x0000}

var weightTailoring_utf16_danish_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x106b}},
	{Codepoint: 197, Patch: []uint16{0x106d}},
	{Codepoint: 198, Patch: []uint16{0x106b}},
	{Codepoint: 214, Patch: []uint16{0x106c}},
	{Codepoint: 216, Patch: []uint16{0x106c}},
	{Codepoint: 220, Patch: []uint16{0x105e}},
	{Codepoint: 228, Patch: []uint16{0x106b}},
	{Codepoint: 229, Patch: []uint16{0x106d}},
	{Codepoint: 230, Patch: []uint16{0x106b}},
	{Codepoint: 246, Patch: []uint16{0x106c}},
	{Codepoint: 248, Patch: []uint16{0x106c}},
	{Codepoint: 252, Patch: []uint16{0x105e}},
	{Codepoint: 336, Patch: []uint16{0x106c}},
	{Codepoint: 337, Patch: []uint16{0x106c}},
	{Codepoint: 368, Patch: []uint16{0x105e}},
	{Codepoint: 369, Patch: []uint16{0x105e}},
}

type contractor_utf16_danish_ci struct{}

func (contractor_utf16_danish_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 65:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 65:
			return contractor_utf16_danish_ci_weights[0:3], b0[width1:], 2
		case 97:
			return contractor_utf16_danish_ci_weights[3:6], b0[width1:], 2
		}
	case 97:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 97:
			return contractor_utf16_danish_ci_weights[6:9], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf16_danish_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf16_danish_ci_weights = [...]uint16{0x106d, 0x0000, 0x0000, 0x106d, 0x0000, 0x0000, 0x106d, 0x0000, 0x0000}

var weightTailoring_utf16_lithuanian_ci = []uca.WeightPatch{
	{Codepoint: 89, Patch: []uint16{0xefb}},
	{Codepoint: 121, Patch: []uint16{0xefb}},
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
}

type contractor_utf16_lithuanian_ci struct{}

func (contractor_utf16_lithuanian_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf16_lithuanian_ci_weights[0:3], b0[width1:], 2
		case 104:
			return contractor_utf16_lithuanian_ci_weights[3:6], b0[width1:], 2
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 104:
			return contractor_utf16_lithuanian_ci_weights[6:9], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf16_lithuanian_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf16_lithuanian_ci_weights = [...]uint16{0x0e60, 0x0000, 0x0000, 0x0e60, 0x0000, 0x0000, 0x0e60, 0x0000, 0x0000}

var weightTailoring_utf16_slovak_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0xe34}},
	{Codepoint: 212, Patch: []uint16{0xf83}},
	{Codepoint: 228, Patch: []uint16{0xe34}},
	{Codepoint: 244, Patch: []uint16{0xf83}},
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
}

type contractor_utf16_spanish2_ci struct{}

func (contractor_utf16_spanish2_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf16_spanish2_ci_weights[0:3], b0[width1:], 2
		case 104:
			return contractor_utf16_spanish2_ci_weights[3:6], b0[width1:], 2
		}
	case 76:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 76:
			return contractor_utf16_spanish2_ci_weights[6:9], b0[width1:], 2
		case 108:
			return contractor_utf16_spanish2_ci_weights[9:12], b0[width1:], 2
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 104:
			return contractor_utf16_spanish2_ci_weights[12:15], b0[width1:], 2
		}
	case 108:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 108:
			return contractor_utf16_spanish2_ci_weights[15:18], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf16_spanish2_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf16_spanish2_ci_weights = [...]uint16{0x0e61, 0x0000, 0x0000, 0x0e61, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0e61, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000}

var weightTailoring_utf16_roman_ci = []uca.WeightPatch{
	{Codepoint: 74, Patch: []uint16{0xefb}},
	{Codepoint: 85, Patch: []uint16{0x1044}},
	{Codepoint: 106, Patch: []uint16{0xefb}},
	{Codepoint: 117, Patch: []uint16{0x1044}},
}
var weightTailoring_utf16_persian_ci = []uca.WeightPatch{
	{Codepoint: 1569, Patch: []uint16{0xe36}},
	{Codepoint: 1570, Patch: []uint16{0xe33}},
	{Codepoint: 1571, Patch: []uint16{0xe37}},
	{Codepoint: 1572, Patch: []uint16{0xe39}},
	{Codepoint: 1573, Patch: []uint16{0xe38}},
	{Codepoint: 1574, Patch: []uint16{0xe3a}},
	{Codepoint: 1575, Patch: []uint16{0xe34}},
	{Codepoint: 1577, Patch: []uint16{0x13bf}},
	{Codepoint: 1603, Patch: []uint16{0x139d}},
	{Codepoint: 1607, Patch: []uint16{0x13be}},
	{Codepoint: 1609, Patch: []uint16{0x13c2}},
	{Codepoint: 1610, Patch: []uint16{0x13c3}},
	{Codepoint: 1611, Patch: []uint16{0x2d5}},
	{Codepoint: 1612, Patch: []uint16{0x2da}},
	{Codepoint: 1613, Patch: []uint16{0x2d8}},
	{Codepoint: 1614, Patch: []uint16{0x2cc}},
	{Codepoint: 1615, Patch: []uint16{0x2d2}},
	{Codepoint: 1616, Patch: []uint16{0x2cf}},
	{Codepoint: 1619, Patch: []uint16{0x1}},
	{Codepoint: 1620, Patch: []uint16{0x2}},
	{Codepoint: 1621, Patch: []uint16{0x3}},
	{Codepoint: 1648, Patch: []uint16{0x4}},
	{Codepoint: 1649, Patch: []uint16{0xe35}},
	{Codepoint: 1673, Patch: []uint16{0x1355}},
	{Codepoint: 1674, Patch: []uint16{0x1356}},
	{Codepoint: 1705, Patch: []uint16{0x139c}},
	{Codepoint: 1728, Patch: []uint16{0x13c0}},
	{Codepoint: 1740, Patch: []uint16{0x13c1}},
	{Codepoint: 64336, Patch: []uint16{0x134c}},
	{Codepoint: 64337, Patch: []uint16{0x134d}},
	{Codepoint: 64398, Patch: []uint16{0x139c}},
	{Codepoint: 64399, Patch: []uint16{0x139d}},
	{Codepoint: 64400, Patch: []uint16{0x139e}},
	{Codepoint: 64420, Patch: []uint16{0x13c4}},
	{Codepoint: 64421, Patch: []uint16{0x13c5}},
	{Codepoint: 64508, Patch: []uint16{0x13c6}},
	{Codepoint: 64509, Patch: []uint16{0x13c7}},
	{Codepoint: 64510, Patch: []uint16{0x13c8}},
	{Codepoint: 65020, Patch: []uint16{0x1376}},
	{Codepoint: 65136, Patch: []uint16{0x2d6}},
	{Codepoint: 65137, Patch: []uint16{0x2d7}},
	{Codepoint: 65138, Patch: []uint16{0x2db}},
	{Codepoint: 65140, Patch: []uint16{0x2d9}},
	{Codepoint: 65142, Patch: []uint16{0x2cd}},
	{Codepoint: 65143, Patch: []uint16{0x2ce}},
	{Codepoint: 65144, Patch: []uint16{0x2d3}},
	{Codepoint: 65145, Patch: []uint16{0x2d4}},
	{Codepoint: 65146, Patch: []uint16{0x2d0}},
	{Codepoint: 65147, Patch: []uint16{0x2d1}},
	{Codepoint: 65152, Patch: []uint16{0x134e}},
	{Codepoint: 65154, Patch: []uint16{0x1349}},
	{Codepoint: 65155, Patch: []uint16{0x134f}},
	{Codepoint: 65156, Patch: []uint16{0x1350}},
	{Codepoint: 65157, Patch: []uint16{0x1353}},
	{Codepoint: 65158, Patch: []uint16{0x1354}},
	{Codepoint: 65159, Patch: []uint16{0x1351}},
	{Codepoint: 65160, Patch: []uint16{0x1352}},
	{Codepoint: 65165, Patch: []uint16{0x134a}},
	{Codepoint: 65166, Patch: []uint16{0x134b}},
	{Codepoint: 65171, Patch: []uint16{0x13c2}},
	{Codepoint: 65172, Patch: []uint16{0x13c3}},
	{Codepoint: 65241, Patch: []uint16{0x13a0}},
	{Codepoint: 65242, Patch: []uint16{0x13a1}},
	{Codepoint: 65243, Patch: []uint16{0x13a2}},
	{Codepoint: 65244, Patch: []uint16{0x13a3}},
	{Codepoint: 65257, Patch: []uint16{0x13be}},
	{Codepoint: 65258, Patch: []uint16{0x13bf}},
	{Codepoint: 65259, Patch: []uint16{0x13c0}},
	{Codepoint: 65260, Patch: []uint16{0x13c1}},
	{Codepoint: 65263, Patch: []uint16{0x13ca}},
	{Codepoint: 65264, Patch: []uint16{0x13cb}},
	{Codepoint: 65265, Patch: []uint16{0x13cc}},
	{Codepoint: 65266, Patch: []uint16{0x13cd}},
	{Codepoint: 65267, Patch: []uint16{0x13ce}},
	{Codepoint: 65268, Patch: []uint16{0x13cf}},
	{Codepoint: 65269, Patch: []uint16{0x13d0}},
	{Codepoint: 65270, Patch: []uint16{0x13d1}},
	{Codepoint: 65271, Patch: []uint16{0x13d2}},
	{Codepoint: 65272, Patch: []uint16{0x13d3}},
	{Codepoint: 65273, Patch: []uint16{0x13d4}},
	{Codepoint: 65274, Patch: []uint16{0x13d5}},
	{Codepoint: 65275, Patch: []uint16{0x13d6}},
	{Codepoint: 65276, Patch: []uint16{0x13d7}},
}
var weightTailoring_utf16_esperanto_ci = []uca.WeightPatch{
	{Codepoint: 264, Patch: []uint16{0xe61}},
	{Codepoint: 265, Patch: []uint16{0xe61}},
	{Codepoint: 284, Patch: []uint16{0xec2}},
	{Codepoint: 285, Patch: []uint16{0xec2}},
	{Codepoint: 292, Patch: []uint16{0xee2}},
	{Codepoint: 293, Patch: []uint16{0xee2}},
	{Codepoint: 308, Patch: []uint16{0xf11}},
	{Codepoint: 309, Patch: []uint16{0xf11}},
	{Codepoint: 348, Patch: []uint16{0xfeb}},
	{Codepoint: 349, Patch: []uint16{0xfeb}},
	{Codepoint: 364, Patch: []uint16{0x1020}},
	{Codepoint: 365, Patch: []uint16{0x1020}},
}
var weightTailoring_utf16_hungarian_ci = []uca.WeightPatch{
	{Codepoint: 214, Patch: []uint16{0xf83}},
	{Codepoint: 220, Patch: []uint16{0x1020}},
	{Codepoint: 246, Patch: []uint16{0xf83}},
	{Codepoint: 252, Patch: []uint16{0x1020}},
	{Codepoint: 336, Patch: []uint16{0xf83}},
	{Codepoint: 337, Patch: []uint16{0xf83}},
	{Codepoint: 368, Patch: []uint16{0x1020}},
	{Codepoint: 369, Patch: []uint16{0x1020}},
}
var weightTailoring_utf16_sinhala_ci = []uca.WeightPatch{
	{Codepoint: 3458, Patch: []uint16{0x17a9}},
	{Codepoint: 3459, Patch: []uint16{0x17aa}},
	{Codepoint: 3482, Patch: []uint16{0x17ab}},
	{Codepoint: 3483, Patch: []uint16{0x17ac}},
	{Codepoint: 3484, Patch: []uint16{0x17ad}},
	{Codepoint: 3485, Patch: []uint16{0x17ae}},
	{Codepoint: 3486, Patch: []uint16{0x17af}},
	{Codepoint: 3487, Patch: []uint16{0x17b0}},
	{Codepoint: 3488, Patch: []uint16{0x17b1}},
	{Codepoint: 3489, Patch: []uint16{0x17b2}},
	{Codepoint: 3490, Patch: []uint16{0x17b3}},
	{Codepoint: 3491, Patch: []uint16{0x17b4}},
	{Codepoint: 3492, Patch: []uint16{0x17b6}},
	{Codepoint: 3493, Patch: []uint16{0x17b5}},
	{Codepoint: 3494, Patch: []uint16{0x17b7}},
	{Codepoint: 3495, Patch: []uint16{0x17b8}},
	{Codepoint: 3496, Patch: []uint16{0x17b9}},
	{Codepoint: 3497, Patch: []uint16{0x17ba}},
	{Codepoint: 3498, Patch: []uint16{0x17bb}},
	{Codepoint: 3499, Patch: []uint16{0x17bc}},
	{Codepoint: 3500, Patch: []uint16{0x17bd}},
	{Codepoint: 3501, Patch: []uint16{0x17be}},
	{Codepoint: 3502, Patch: []uint16{0x17bf}},
	{Codepoint: 3503, Patch: []uint16{0x17c0}},
	{Codepoint: 3504, Patch: []uint16{0x17c1}},
	{Codepoint: 3505, Patch: []uint16{0x17c2}},
	{Codepoint: 3507, Patch: []uint16{0x17c3}},
	{Codepoint: 3508, Patch: []uint16{0x17c4}},
	{Codepoint: 3509, Patch: []uint16{0x17c5}},
	{Codepoint: 3510, Patch: []uint16{0x17c6}},
	{Codepoint: 3511, Patch: []uint16{0x17c7}},
	{Codepoint: 3512, Patch: []uint16{0x17c8}},
	{Codepoint: 3513, Patch: []uint16{0x17c9}},
	{Codepoint: 3514, Patch: []uint16{0x17ca}},
	{Codepoint: 3515, Patch: []uint16{0x17cb}},
	{Codepoint: 3517, Patch: []uint16{0x17cc}},
	{Codepoint: 3520, Patch: []uint16{0x17cd}},
	{Codepoint: 3521, Patch: []uint16{0x17ce}},
	{Codepoint: 3522, Patch: []uint16{0x17cf}},
	{Codepoint: 3523, Patch: []uint16{0x17d0}},
	{Codepoint: 3524, Patch: []uint16{0x17d1}},
	{Codepoint: 3525, Patch: []uint16{0x17d2}},
	{Codepoint: 3526, Patch: []uint16{0x17d3}},
	{Codepoint: 3530, Patch: []uint16{0x17e5}},
	{Codepoint: 3535, Patch: []uint16{0x17d4}},
	{Codepoint: 3536, Patch: []uint16{0x17d5}},
	{Codepoint: 3537, Patch: []uint16{0x17d6}},
	{Codepoint: 3538, Patch: []uint16{0x17d7}},
	{Codepoint: 3539, Patch: []uint16{0x17d8}},
	{Codepoint: 3540, Patch: []uint16{0x17d9}},
	{Codepoint: 3542, Patch: []uint16{0x17da}},
	{Codepoint: 3544, Patch: []uint16{0x17db}},
	{Codepoint: 3545, Patch: []uint16{0x17df}},
	{Codepoint: 3546, Patch: []uint16{0x17e0}},
	{Codepoint: 3547, Patch: []uint16{0x17e1}},
	{Codepoint: 3548, Patch: []uint16{0x17e2}},
	{Codepoint: 3549, Patch: []uint16{0x17e3}},
	{Codepoint: 3550, Patch: []uint16{0x17e4}},
	{Codepoint: 3551, Patch: []uint16{0x17dd}},
	{Codepoint: 3570, Patch: []uint16{0x17dc}},
	{Codepoint: 3571, Patch: []uint16{0x17de}},
}
var weightTailoring_utf16_german2_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0xe33, 0xe8b}},
	{Codepoint: 198, Patch: []uint16{0xe33, 0xe8b}},
	{Codepoint: 214, Patch: []uint16{0xf82, 0xe8b}},
	{Codepoint: 220, Patch: []uint16{0x101f, 0xe8b}},
	{Codepoint: 228, Patch: []uint16{0xe33, 0xe8b}},
	{Codepoint: 230, Patch: []uint16{0xe33, 0xe8b}},
	{Codepoint: 246, Patch: []uint16{0xf82, 0xe8b}},
	{Codepoint: 252, Patch: []uint16{0x101f, 0xe8b}},
}
var weightTailoring_utf16_croatian_ci = []uca.WeightPatch{
	{Codepoint: 262, Patch: []uint16{0xe62}},
	{Codepoint: 263, Patch: []uint16{0xe62}},
	{Codepoint: 268, Patch: []uint16{0xe61}},
	{Codepoint: 269, Patch: []uint16{0xe61}},
	{Codepoint: 272, Patch: []uint16{0xe6f}},
	{Codepoint: 273, Patch: []uint16{0xe6f}},
	{Codepoint: 352, Patch: []uint16{0xfeb}},
	{Codepoint: 353, Patch: []uint16{0xfeb}},
	{Codepoint: 381, Patch: []uint16{0x106b}},
	{Codepoint: 382, Patch: []uint16{0x106b}},
	{Codepoint: 452, Patch: []uint16{0xe6e}},
	{Codepoint: 453, Patch: []uint16{0xe6e}},
	{Codepoint: 454, Patch: []uint16{0xe6e}},
	{Codepoint: 455, Patch: []uint16{0xf2f}},
	{Codepoint: 456, Patch: []uint16{0xf2f}},
	{Codepoint: 457, Patch: []uint16{0xf2f}},
	{Codepoint: 458, Patch: []uint16{0xf65}},
	{Codepoint: 459, Patch: []uint16{0xf65}},
	{Codepoint: 460, Patch: []uint16{0xf65}},
}

type contractor_utf16_croatian_ci struct{}

func (contractor_utf16_croatian_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 68:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 381:
			return contractor_utf16_croatian_ci_weights[0:3], b0[width1:], 2
		case 382:
			return contractor_utf16_croatian_ci_weights[3:6], b0[width1:], 2
		}
	case 76:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf16_croatian_ci_weights[6:9], b0[width1:], 2
		case 106:
			return contractor_utf16_croatian_ci_weights[9:12], b0[width1:], 2
		}
	case 78:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf16_croatian_ci_weights[12:15], b0[width1:], 2
		case 106:
			return contractor_utf16_croatian_ci_weights[15:18], b0[width1:], 2
		}
	case 100:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 381:
			return contractor_utf16_croatian_ci_weights[18:21], b0[width1:], 2
		case 382:
			return contractor_utf16_croatian_ci_weights[21:24], b0[width1:], 2
		}
	case 108:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf16_croatian_ci_weights[24:27], b0[width1:], 2
		case 106:
			return contractor_utf16_croatian_ci_weights[27:30], b0[width1:], 2
		}
	case 110:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf16_croatian_ci_weights[30:33], b0[width1:], 2
		case 106:
			return contractor_utf16_croatian_ci_weights[33:36], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf16_croatian_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf16_croatian_ci_weights = [...]uint16{0x0e6e, 0x0000, 0x0000, 0x0e6e, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0f65, 0x0000, 0x0000, 0x0f65, 0x0000, 0x0000, 0x0e6e, 0x0000, 0x0000, 0x0e6e, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0f2f, 0x0000, 0x0000, 0x0f65, 0x0000, 0x0000, 0x0f65, 0x0000, 0x0000}

var weightTailoring_utf16_vietnamese_ci = []uca.WeightPatch{
	{Codepoint: 194, Patch: []uint16{0xe35}},
	{Codepoint: 202, Patch: []uint16{0xe8c}},
	{Codepoint: 212, Patch: []uint16{0xf83}},
	{Codepoint: 226, Patch: []uint16{0xe35}},
	{Codepoint: 234, Patch: []uint16{0xe8c}},
	{Codepoint: 244, Patch: []uint16{0xf83}},
	{Codepoint: 258, Patch: []uint16{0xe34}},
	{Codepoint: 259, Patch: []uint16{0xe34}},
	{Codepoint: 272, Patch: []uint16{0xe6e}},
	{Codepoint: 273, Patch: []uint16{0xe6e}},
	{Codepoint: 416, Patch: []uint16{0xf84}},
	{Codepoint: 417, Patch: []uint16{0xf84}},
	{Codepoint: 431, Patch: []uint16{0x1020}},
	{Codepoint: 432, Patch: []uint16{0x1020}},
	{Codepoint: 7844, Patch: []uint16{0xe35}},
	{Codepoint: 7845, Patch: []uint16{0xe35}},
	{Codepoint: 7846, Patch: []uint16{0xe35}},
	{Codepoint: 7847, Patch: []uint16{0xe35}},
	{Codepoint: 7848, Patch: []uint16{0xe35}},
	{Codepoint: 7849, Patch: []uint16{0xe35}},
	{Codepoint: 7850, Patch: []uint16{0xe35}},
	{Codepoint: 7851, Patch: []uint16{0xe35}},
	{Codepoint: 7852, Patch: []uint16{0xe35}},
	{Codepoint: 7853, Patch: []uint16{0xe35}},
	{Codepoint: 7854, Patch: []uint16{0xe34}},
	{Codepoint: 7855, Patch: []uint16{0xe34}},
	{Codepoint: 7856, Patch: []uint16{0xe34}},
	{Codepoint: 7857, Patch: []uint16{0xe34}},
	{Codepoint: 7858, Patch: []uint16{0xe34}},
	{Codepoint: 7859, Patch: []uint16{0xe34}},
	{Codepoint: 7860, Patch: []uint16{0xe34}},
	{Codepoint: 7861, Patch: []uint16{0xe34}},
	{Codepoint: 7862, Patch: []uint16{0xe34}},
	{Codepoint: 7863, Patch: []uint16{0xe34}},
	{Codepoint: 7870, Patch: []uint16{0xe8c}},
	{Codepoint: 7871, Patch: []uint16{0xe8c}},
	{Codepoint: 7872, Patch: []uint16{0xe8c}},
	{Codepoint: 7873, Patch: []uint16{0xe8c}},
	{Codepoint: 7874, Patch: []uint16{0xe8c}},
	{Codepoint: 7875, Patch: []uint16{0xe8c}},
	{Codepoint: 7876, Patch: []uint16{0xe8c}},
	{Codepoint: 7877, Patch: []uint16{0xe8c}},
	{Codepoint: 7878, Patch: []uint16{0xe8c}},
	{Codepoint: 7879, Patch: []uint16{0xe8c}},
	{Codepoint: 7888, Patch: []uint16{0xf83}},
	{Codepoint: 7889, Patch: []uint16{0xf83}},
	{Codepoint: 7890, Patch: []uint16{0xf83}},
	{Codepoint: 7891, Patch: []uint16{0xf83}},
	{Codepoint: 7892, Patch: []uint16{0xf83}},
	{Codepoint: 7893, Patch: []uint16{0xf83}},
	{Codepoint: 7894, Patch: []uint16{0xf83}},
	{Codepoint: 7895, Patch: []uint16{0xf83}},
	{Codepoint: 7896, Patch: []uint16{0xf83}},
	{Codepoint: 7897, Patch: []uint16{0xf83}},
	{Codepoint: 7898, Patch: []uint16{0xf84}},
	{Codepoint: 7899, Patch: []uint16{0xf84}},
	{Codepoint: 7900, Patch: []uint16{0xf84}},
	{Codepoint: 7901, Patch: []uint16{0xf84}},
	{Codepoint: 7902, Patch: []uint16{0xf84}},
	{Codepoint: 7903, Patch: []uint16{0xf84}},
	{Codepoint: 7904, Patch: []uint16{0xf84}},
	{Codepoint: 7905, Patch: []uint16{0xf84}},
	{Codepoint: 7906, Patch: []uint16{0xf84}},
	{Codepoint: 7907, Patch: []uint16{0xf84}},
	{Codepoint: 7912, Patch: []uint16{0x1020}},
	{Codepoint: 7913, Patch: []uint16{0x1020}},
	{Codepoint: 7914, Patch: []uint16{0x1020}},
	{Codepoint: 7915, Patch: []uint16{0x1020}},
	{Codepoint: 7916, Patch: []uint16{0x1020}},
	{Codepoint: 7917, Patch: []uint16{0x1020}},
	{Codepoint: 7918, Patch: []uint16{0x1020}},
	{Codepoint: 7919, Patch: []uint16{0x1020}},
	{Codepoint: 7920, Patch: []uint16{0x1020}},
	{Codepoint: 7921, Patch: []uint16{0x1020}},
}
var weightTailoring_utf8mb4_de_pb_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x1c47, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 214, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 228, Patch: []uint16{0x1c47, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 478, Patch: []uint16{0x1c47, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1c47, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
}
var weightTailoring_utf8mb4_is_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 193, Patch: []uint16{0x1c5f, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 196, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x21}},
	{Codepoint: 197, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21}},
	{Codepoint: 198, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 201, Patch: []uint16{0x1ce4, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 205, Patch: []uint16{0x1d4b, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 208, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 211, Patch: []uint16{0x1e0b, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 214, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 216, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21}},
	{Codepoint: 218, Patch: []uint16{0x1ee2, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 221, Patch: []uint16{0x1f20, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 225, Patch: []uint16{0x1c5f, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 228, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x0}},
	{Codepoint: 229, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0}},
	{Codepoint: 230, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 233, Patch: []uint16{0x1ce4, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 237, Patch: []uint16{0x1d4b, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 240, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 243, Patch: []uint16{0x1e0b, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 248, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0}},
	{Codepoint: 250, Patch: []uint16{0x1ee2, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 253, Patch: []uint16{0x1f20, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x0, 0x116, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 478, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 482, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 483, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 506, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 507, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 508, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 509, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 510, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 511, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7898, Patch: []uint16{0x1e0b, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x3f, 0x2}},
	{Codepoint: 7899, Patch: []uint16{0x1e0b, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x3f, 0x2}},
	{Codepoint: 7912, Patch: []uint16{0x1ee2, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x3f, 0x2}},
	{Codepoint: 7913, Patch: []uint16{0x1ee2, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x3f, 0x2}},
	{Codepoint: 8491, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21}},
}
var weightTailoring_utf8mb4_lv_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 89, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 121, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 221, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 253, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 255, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 268, Patch: []uint16{0x1c8e, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c8e, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 290, Patch: []uint16{0x1d17, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 291, Patch: []uint16{0x1d17, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 310, Patch: []uint16{0x1d76, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 311, Patch: []uint16{0x1d76, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 315, Patch: []uint16{0x1da9, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 316, Patch: []uint16{0x1da9, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 325, Patch: []uint16{0x1ddc, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 326, Patch: []uint16{0x1ddc, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 342, Patch: []uint16{0x1e70, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 343, Patch: []uint16{0x1e70, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 374, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 375, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x27, 0x2}},
	{Codepoint: 376, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 381, Patch: []uint16{0x1f3d, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f3d, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 562, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 563, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7822, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7823, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7833, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x29, 0x2}},
	{Codepoint: 7922, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7923, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7924, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7925, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 7926, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7927, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7928, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7929, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2d, 0x2}},
}
var weightTailoring_utf8mb4_ro_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 194, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 206, Patch: []uint16{0x1d32, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 226, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 238, Patch: []uint16{0x1d32, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 258, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 259, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 350, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 351, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 354, Patch: []uint16{0x1e95, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 355, Patch: []uint16{0x1e95, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 536, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 537, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 538, Patch: []uint16{0x1e95, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 539, Patch: []uint16{0x1e95, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 7844, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7845, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7846, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7847, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7848, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7849, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7850, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7851, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x2d, 0x2}},
	{Codepoint: 7852, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7853, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 7854, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7855, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7856, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7857, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7858, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7859, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7860, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7861, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2d, 0x2}},
	{Codepoint: 7862, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7863, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x42, 0x2}},
}
var weightTailoring_utf8mb4_sl_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 262, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 263, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 268, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 381, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 7688, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x30, 0x2}},
	{Codepoint: 7689, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x30, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
}
var weightTailoring_utf8mb4_pl_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 211, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 243, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 260, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 261, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 262, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 263, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 280, Patch: []uint16{0x1caa, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 281, Patch: []uint16{0x1caa, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 321, Patch: []uint16{0x1d77, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 322, Patch: []uint16{0x1d77, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 323, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 324, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 346, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 347, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 377, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 378, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 379, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 380, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 7688, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x30, 0x2}},
	{Codepoint: 7689, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x30, 0x2}},
	{Codepoint: 7780, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7781, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7898, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x3f, 0x2}},
	{Codepoint: 7899, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x3f, 0x2}},
}
var weightTailoring_utf8mb4_et_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 90, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 122, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 196, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 213, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 214, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a7, 0x0, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x21}},
	{Codepoint: 228, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 245, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a7, 0x0, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 377, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 378, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 379, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 380, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 381, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a7, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a7, 0x0, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a8, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 478, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a7, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a7, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 556, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 557, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7756, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7757, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7758, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 7759, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7824, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 7825, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x27, 0x2}},
	{Codepoint: 7826, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7827, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 7828, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x49, 0x2}},
	{Codepoint: 7829, Patch: []uint16{0x1e94, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x49, 0x2}},
	{Codepoint: 7904, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x3f, 0x2}},
	{Codepoint: 7905, Patch: []uint16{0x1efe, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x3f, 0x2}},
}
var weightTailoring_utf8mb4_es_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 209, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 241, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
}
var weightTailoring_utf8mb4_sv_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 197, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 198, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21}},
	{Codepoint: 208, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 212, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21}},
	{Codepoint: 214, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21}},
	{Codepoint: 216, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x116, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 222, Patch: []uint16{0x1e95, 0x20, 0x8, 0x1d18, 0x20, 0x8, 0x0, 0x0, 0x21}},
	{Codepoint: 228, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 229, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 230, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0}},
	{Codepoint: 240, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 244, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0}},
	{Codepoint: 248, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x116, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 254, Patch: []uint16{0x1e95, 0x20, 0x2, 0x1d18, 0x20, 0x2, 0x0, 0x0, 0x21}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 280, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x117, 0x21}},
	{Codepoint: 281, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x117, 0x0}},
	{Codepoint: 336, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x117, 0x21}},
	{Codepoint: 337, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x117, 0x0}},
	{Codepoint: 338, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x118, 0x21}},
	{Codepoint: 339, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x118, 0x0}},
	{Codepoint: 368, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 369, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 478, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 482, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 483, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 506, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 507, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 508, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 509, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 510, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 511, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7888, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7889, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7890, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7891, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7892, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7893, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7894, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7895, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0, 0x0, 0x2d, 0x2}},
	{Codepoint: 7896, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7897, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x119, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 8491, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
}
var weightTailoring_utf8mb4_tr_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 73, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 199, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 204, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 205, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 206, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 207, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 214, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 231, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 286, Patch: []uint16{0x1cf4, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 287, Patch: []uint16{0x1cf4, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 296, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 298, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 300, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x26, 0x2}},
	{Codepoint: 302, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x31, 0x2}},
	{Codepoint: 304, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x0, 0x21}},
	{Codepoint: 305, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 350, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 351, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 463, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 469, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 520, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x3c, 0x2}},
	{Codepoint: 522, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x3e, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7688, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7689, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7724, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x48, 0x2}},
	{Codepoint: 7726, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x2b, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 7880, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7882, Patch: []uint16{0x1d31, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x42, 0x2}},
}
var weightTailoring_utf8mb4_cs_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 268, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 344, Patch: []uint16{0x1e33, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 345, Patch: []uint16{0x1e33, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 381, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 7782, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
}

type contractor_utf8mb4_cs_0900_ai_ci struct{}

func (contractor_utf8mb4_cs_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf8mb4_cs_0900_ai_ci_weights[0:6], b0[width1:], 2
		case 104:
			return contractor_utf8mb4_cs_0900_ai_ci_weights[6:12], b0[width1:], 2
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf8mb4_cs_0900_ai_ci_weights[12:18], b0[width1:], 2
		case 104:
			return contractor_utf8mb4_cs_0900_ai_ci_weights[18:24], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_cs_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_cs_0900_ai_ci_weights = [...]uint16{0x1d18, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0023, 0x1d18, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1d18, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1d18, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000}

var weightTailoring_utf8mb4_da_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x21}},
	{Codepoint: 197, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21}},
	{Codepoint: 198, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 208, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 214, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21}},
	{Codepoint: 216, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 222, Patch: []uint16{0x1e95, 0x20, 0x8, 0x1d18, 0x20, 0x8, 0x0, 0x0, 0x21}},
	{Codepoint: 228, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x0}},
	{Codepoint: 229, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0}},
	{Codepoint: 230, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 240, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0}},
	{Codepoint: 248, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 254, Patch: []uint16{0x1e95, 0x20, 0x2, 0x1d18, 0x20, 0x2, 0x0, 0x0, 0x21}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 336, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x117, 0x21}},
	{Codepoint: 337, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x117, 0x0}},
	{Codepoint: 338, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x118, 0x21}},
	{Codepoint: 339, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x118, 0x0}},
	{Codepoint: 368, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 369, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 478, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 482, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 483, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 506, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 507, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 508, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 509, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 510, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 511, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a6, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 8491, Patch: []uint16{0x1f98, 0x20, 0x2, 0x54a7, 0x0, 0x21}},
}

type contractor_utf8mb4_da_0900_ai_ci struct{}

func (contractor_utf8mb4_da_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 65:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 65:
			return contractor_utf8mb4_da_0900_ai_ci_weights[0:6], b0[width1:], 2
		case 97:
			return contractor_utf8mb4_da_0900_ai_ci_weights[6:12], b0[width1:], 2
		}
	case 97:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 97:
			return contractor_utf8mb4_da_0900_ai_ci_weights[12:18], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_da_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_da_0900_ai_ci_weights = [...]uint16{0x1f98, 0x0020, 0x0002, 0x54a7, 0x0000, 0x0024, 0x1f98, 0x0020, 0x0002, 0x54a7, 0x0000, 0x0023, 0x1f98, 0x0020, 0x0002, 0x54a7, 0x0000, 0x0022}

var weightTailoring_utf8mb4_lt_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 89, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 121, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 221, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 253, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 255, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 260, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 261, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 268, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 278, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 279, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 280, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 281, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 302, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 303, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 362, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x117, 0x21}},
	{Codepoint: 363, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x117, 0x0}},
	{Codepoint: 370, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 371, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 374, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 375, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x27, 0x2}},
	{Codepoint: 376, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 381, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 562, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 563, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7802, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 7803, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 7822, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7823, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7833, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x29, 0x2}},
	{Codepoint: 7922, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7923, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7924, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7925, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 7926, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7927, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7928, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7929, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x117, 0x0, 0x0, 0x2d, 0x2}},
}

type contractor_utf8mb4_lt_0900_ai_ci struct{}

func (contractor_utf8mb4_lt_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 775:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 768:
			return contractor_utf8mb4_lt_0900_ai_ci_weights[0:3], b0[width1:], 2
		case 769:
			return contractor_utf8mb4_lt_0900_ai_ci_weights[3:6], b0[width1:], 2
		case 771:
			return contractor_utf8mb4_lt_0900_ai_ci_weights[6:9], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_lt_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_lt_0900_ai_ci_weights = [...]uint16{0x0000, 0x0025, 0x0002, 0x0000, 0x0024, 0x0002, 0x0000, 0x002d, 0x0002}

var weightTailoring_utf8mb4_sk_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 212, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 228, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 244, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 268, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 344, Patch: []uint16{0x1e33, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 345, Patch: []uint16{0x1e33, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 381, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 478, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 479, Patch: []uint16{0x1c47, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7888, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 7889, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 7890, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7891, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7892, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7893, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7894, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 7895, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2d, 0x2}},
	{Codepoint: 7896, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7897, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x42, 0x2}},
}

type contractor_utf8mb4_es_trad_0900_ai_ci struct{}

func (contractor_utf8mb4_es_trad_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 72:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[0:6], b0[width1:], 2
		case 104:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[6:12], b0[width1:], 2
		}
	case 76:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 76:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[12:18], b0[width1:], 2
		case 108:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[18:24], b0[width1:], 2
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 104:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[24:30], b0[width1:], 2
		}
	case 108:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 108:
			return contractor_utf8mb4_es_trad_0900_ai_ci_weights[30:36], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_es_trad_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_es_trad_0900_ai_ci_weights = [...]uint16{0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0002, 0x54a5, 0x0000, 0x0022, 0x1d77, 0x0020, 0x0002, 0x54a5, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1d77, 0x0020, 0x0002, 0x54a5, 0x0000, 0x0000}

var weightTailoring_utf8mb4_la_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 74, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 85, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21}},
	{Codepoint: 106, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 117, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0}},
	{Codepoint: 217, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 218, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 219, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 220, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2}},
	{Codepoint: 249, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 250, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 251, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x27, 0x2}},
	{Codepoint: 252, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 308, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x27, 0x2}},
	{Codepoint: 309, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x27, 0x2}},
	{Codepoint: 360, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2d, 0x2}},
	{Codepoint: 361, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2d, 0x2}},
	{Codepoint: 362, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 363, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 364, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x26, 0x2}},
	{Codepoint: 365, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x26, 0x2}},
	{Codepoint: 366, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x29, 0x2}},
	{Codepoint: 367, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x29, 0x2}},
	{Codepoint: 368, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2c, 0x2}},
	{Codepoint: 369, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2c, 0x2}},
	{Codepoint: 370, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x31, 0x2}},
	{Codepoint: 371, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x31, 0x2}},
	{Codepoint: 431, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2}},
	{Codepoint: 432, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2}},
	{Codepoint: 467, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 468, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 469, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2}},
	{Codepoint: 496, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 532, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3c, 0x2}},
	{Codepoint: 533, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3c, 0x2}},
	{Codepoint: 534, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3e, 0x2}},
	{Codepoint: 535, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3e, 0x2}},
	{Codepoint: 7794, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x43, 0x2}},
	{Codepoint: 7795, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x43, 0x2}},
	{Codepoint: 7796, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x48, 0x2}},
	{Codepoint: 7797, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x48, 0x2}},
	{Codepoint: 7798, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x46, 0x2}},
	{Codepoint: 7799, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x46, 0x2}},
	{Codepoint: 7800, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x2d, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 7801, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x2d, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 7802, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x32, 0x2, 0x0, 0x2b, 0x2}},
	{Codepoint: 7803, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x32, 0x2, 0x0, 0x2b, 0x2}},
	{Codepoint: 7908, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x42, 0x2}},
	{Codepoint: 7909, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x42, 0x2}},
	{Codepoint: 7910, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3b, 0x2}},
	{Codepoint: 7911, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3b, 0x2}},
	{Codepoint: 7912, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 7913, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x24, 0x2}},
	{Codepoint: 7914, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2, 0x0, 0x25, 0x2}},
	{Codepoint: 7915, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x25, 0x2}},
	{Codepoint: 7916, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2, 0x0, 0x3b, 0x2}},
	{Codepoint: 7917, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x3b, 0x2}},
	{Codepoint: 7918, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2, 0x0, 0x2d, 0x2}},
	{Codepoint: 7919, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x2d, 0x2}},
	{Codepoint: 7920, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x21, 0x0, 0x3f, 0x2, 0x0, 0x42, 0x2}},
	{Codepoint: 7921, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x116, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x42, 0x2}},
}
var weightTailoring_utf8mb4_eo_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 264, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 265, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 284, Patch: []uint16{0x1cf4, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 285, Patch: []uint16{0x1cf4, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 292, Patch: []uint16{0x1d18, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 293, Patch: []uint16{0x1d18, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 308, Patch: []uint16{0x1d4c, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 309, Patch: []uint16{0x1d4c, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 348, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 349, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 364, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 365, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
}
var weightTailoring_utf8mb4_hu_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 214, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 220, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 246, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 336, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x116, 0x21}},
	{Codepoint: 337, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x116, 0x0}},
	{Codepoint: 368, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x116, 0x21}},
	{Codepoint: 369, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x116, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 470, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 471, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x24, 0x2}},
	{Codepoint: 472, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x2}},
	{Codepoint: 473, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x28, 0x2}},
	{Codepoint: 474, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x28, 0x2}},
	{Codepoint: 475, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 476, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 554, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x32, 0x2}},
	{Codepoint: 555, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x2}},
}

type contractor_utf8mb4_hu_0900_ai_ci struct{}

func (contractor_utf8mb4_hu_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 67:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 67:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 83:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[0:15], b1[width2:], 3
			}
		case 83:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[15:21], b0[width1:], 2
		case 99:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[21:36], b1[width2:], 3
			}
		case 115:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[36:42], b0[width1:], 2
		}
	case 68:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 68:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 90:
				b2 := b1[width2:]
				cp3, width3 := cs.DecodeRune(b2)
				switch cp3 {
				case 83:
					return contractor_utf8mb4_hu_0900_ai_ci_weights[42:63], b2[width3:], 4
				}
				return contractor_utf8mb4_hu_0900_ai_ci_weights[63:78], b2, 3
			}
		case 90:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 83:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[78:87], b1[width2:], 3
			}
			return contractor_utf8mb4_hu_0900_ai_ci_weights[87:93], b1, 2
		case 100:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 122:
				b2 := b1[width2:]
				cp3, width3 := cs.DecodeRune(b2)
				switch cp3 {
				case 115:
					return contractor_utf8mb4_hu_0900_ai_ci_weights[93:114], b2[width3:], 4
				}
				return contractor_utf8mb4_hu_0900_ai_ci_weights[114:129], b2, 3
			}
		case 122:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[129:138], b1[width2:], 3
			}
			return contractor_utf8mb4_hu_0900_ai_ci_weights[138:144], b1, 2
		}
	case 71:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 71:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 89:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[144:159], b1[width2:], 3
			}
		case 89:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[159:165], b0[width1:], 2
		case 103:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[165:180], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[180:186], b0[width1:], 2
		}
	case 76:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 76:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 89:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[186:201], b1[width2:], 3
			}
		case 89:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[201:207], b0[width1:], 2
		case 108:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[207:222], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[222:228], b0[width1:], 2
		}
	case 78:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 78:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 89:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[228:243], b1[width2:], 3
			}
		case 89:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[243:249], b0[width1:], 2
		case 110:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[249:264], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[264:270], b0[width1:], 2
		}
	case 83:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 83:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 90:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[270:285], b1[width2:], 3
			}
		case 90:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[285:291], b0[width1:], 2
		case 115:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 122:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[291:306], b1[width2:], 3
			}
		case 122:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[306:312], b0[width1:], 2
		}
	case 84:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 84:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 89:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[312:327], b1[width2:], 3
			}
		case 89:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[327:333], b0[width1:], 2
		case 116:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[333:348], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[348:354], b0[width1:], 2
		}
	case 90:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 83:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[354:360], b0[width1:], 2
		case 90:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 83:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[360:375], b1[width2:], 3
			}
		case 115:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[375:381], b0[width1:], 2
		case 122:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[381:396], b1[width2:], 3
			}
		}
	case 99:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 99:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[396:411], b1[width2:], 3
			}
		case 115:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[411:417], b0[width1:], 2
		}
	case 100:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 100:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 122:
				b2 := b1[width2:]
				cp3, width3 := cs.DecodeRune(b2)
				switch cp3 {
				case 115:
					return contractor_utf8mb4_hu_0900_ai_ci_weights[417:438], b2[width3:], 4
				}
				return contractor_utf8mb4_hu_0900_ai_ci_weights[438:453], b2, 3
			}
		case 122:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[453:462], b1[width2:], 3
			}
			return contractor_utf8mb4_hu_0900_ai_ci_weights[462:468], b1, 2
		}
	case 103:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 103:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[468:483], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[483:489], b0[width1:], 2
		}
	case 108:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 108:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[489:504], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[504:510], b0[width1:], 2
		}
	case 110:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 110:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[510:525], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[525:531], b0[width1:], 2
		}
	case 115:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 115:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 122:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[531:546], b1[width2:], 3
			}
		case 122:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[546:552], b0[width1:], 2
		}
	case 116:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 116:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 121:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[552:567], b1[width2:], 3
			}
		case 121:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[567:573], b0[width1:], 2
		}
	case 122:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 115:
			return contractor_utf8mb4_hu_0900_ai_ci_weights[573:579], b0[width1:], 2
		case 122:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 115:
				return contractor_utf8mb4_hu_0900_ai_ci_weights[579:594], b1[width2:], 3
			}
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_hu_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_hu_0900_ai_ci_weights = [...]uint16{0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0022, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0022, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x0000, 0x0000, 0x0021, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0021, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c7a, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0000, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x54a5, 0x0000, 0x0000, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1cf4, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1e71, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1e95, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1f21, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021}

var weightTailoring_utf8mb4_hr_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 262, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 263, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 268, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 269, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a6, 0x0, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a6, 0x0, 0x0}},
	{Codepoint: 352, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 353, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 381, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 382, Patch: []uint16{0x1f21, 0x20, 0x8, 0x54a5, 0x0, 0x0}},
	{Codepoint: 452, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a5, 0x0, 0x25}},
	{Codepoint: 453, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a5, 0x0, 0x23}},
	{Codepoint: 454, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 455, Patch: []uint16{0x1d77, 0x20, 0x8, 0x54a5, 0x0, 0x25}},
	{Codepoint: 456, Patch: []uint16{0x1d77, 0x20, 0x8, 0x54a5, 0x0, 0x23}},
	{Codepoint: 457, Patch: []uint16{0x1d77, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 458, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x25}},
	{Codepoint: 459, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x23}},
	{Codepoint: 460, Patch: []uint16{0x1db9, 0x20, 0x8, 0x54a5, 0x0, 0x21}},
	{Codepoint: 7688, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x21, 0x0, 0x30, 0x2}},
	{Codepoint: 7689, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x54a6, 0x0, 0x0, 0x0, 0x30, 0x2}},
	{Codepoint: 7782, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x21, 0x0, 0x2e, 0x2}},
	{Codepoint: 7783, Patch: []uint16{0x1e71, 0x20, 0x8, 0x54a5, 0x0, 0x0, 0x0, 0x2e, 0x2}},
}

type contractor_utf8mb4_hr_0900_ai_ci struct{}

func (contractor_utf8mb4_hr_0900_ai_ci) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 68:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 381:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[0:6], b0[width1:], 2
		case 382:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[6:12], b0[width1:], 2
		}
	case 76:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[12:18], b0[width1:], 2
		case 106:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[18:24], b0[width1:], 2
		}
	case 78:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 74:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[24:30], b0[width1:], 2
		case 106:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[30:36], b0[width1:], 2
		}
	case 100:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 382:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[36:42], b0[width1:], 2
		}
	case 108:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 106:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[42:48], b0[width1:], 2
		}
	case 110:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 106:
			return contractor_utf8mb4_hr_0900_ai_ci_weights[48:54], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_hr_0900_ai_ci) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_hr_0900_ai_ci_weights = [...]uint16{0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0024, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0024, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0024, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0022, 0x1c8f, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1d77, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000, 0x1db9, 0x0020, 0x0008, 0x54a5, 0x0000, 0x0000}

var reorder_utf8mb4_hr_0900_ai_ci = []uca.Reorder{
	{FromMin: 0x1C47, FromMax: 0x1FB5, ToMin: 0x1C47, ToMax: 0x1FB5},
	{FromMin: 0x2022, FromMax: 0x21E1, ToMin: 0x1FB6, ToMax: 0x2175},
	{FromMin: 0x1FB6, FromMax: 0x2021, ToMin: 0x2176, ToMax: 0x21E1},
}
var weightTailoring_utf8mb4_vi_0900_ai_ci = []uca.WeightPatch{
	{Codepoint: 194, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 202, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 212, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 226, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 234, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 244, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 258, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 259, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 416, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 417, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 431, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 432, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 769, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 771, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 777, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 803, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 833, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7844, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7845, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7846, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7847, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7848, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7849, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7850, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7851, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7852, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7853, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7854, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7855, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7856, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7857, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7858, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7859, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7860, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7861, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7862, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7863, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7870, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7871, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7872, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7873, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7874, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7875, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7876, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7877, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7878, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7879, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7888, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7889, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7890, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7891, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7892, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7893, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7894, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7895, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7896, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7897, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7898, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7899, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7900, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7901, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7902, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7903, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7904, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7905, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7906, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7907, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7912, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7913, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7914, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7915, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7916, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7917, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7918, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7919, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7920, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7921, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
}
var weightTailoring_utf8mb4_da_0900_as_cs = []uca.WeightPatch{
	{Codepoint: 196, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a5, 0x116, 0x121}},
	{Codepoint: 197, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a7, 0x0, 0x121}},
	{Codepoint: 198, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a5, 0x0, 0x121}},
	{Codepoint: 208, Patch: []uint16{0x1c8f, 0x20, 0x108, 0x0, 0x117, 0x121}},
	{Codepoint: 214, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x116, 0x121}},
	{Codepoint: 216, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x0, 0x121}},
	{Codepoint: 220, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x116, 0x121}},
	{Codepoint: 222, Patch: []uint16{0x1e95, 0x20, 0x108, 0x1d18, 0x20, 0x0, 0x0, 0x0, 0x121}},
	{Codepoint: 228, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a5, 0x116, 0x0}},
	{Codepoint: 229, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a7, 0x0, 0x0}},
	{Codepoint: 230, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a5, 0x0, 0x0}},
	{Codepoint: 240, Patch: []uint16{0x1c8f, 0x20, 0x308, 0x0, 0x117, 0x0}},
	{Codepoint: 246, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x116, 0x0}},
	{Codepoint: 248, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x0, 0x0}},
	{Codepoint: 252, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x116, 0x0}},
	{Codepoint: 254, Patch: []uint16{0x1e95, 0x20, 0x302, 0x1d18, 0x20, 0x0, 0x0, 0x0, 0x321}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x108, 0x0, 0x116, 0x121}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x308, 0x0, 0x116, 0x0}},
	{Codepoint: 336, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x117, 0x121}},
	{Codepoint: 337, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x117, 0x0}},
	{Codepoint: 338, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x118, 0x121}},
	{Codepoint: 339, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x118, 0x0}},
	{Codepoint: 368, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x117, 0x121}},
	{Codepoint: 369, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x117, 0x0}},
	{Codepoint: 469, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x116, 0x121, 0x0, 0x32, 0x102}},
	{Codepoint: 470, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x116, 0x0, 0x0, 0x32, 0x302}},
	{Codepoint: 471, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x116, 0x121, 0x0, 0x24, 0x102}},
	{Codepoint: 472, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x116, 0x0, 0x0, 0x24, 0x302}},
	{Codepoint: 473, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x116, 0x121, 0x0, 0x28, 0x102}},
	{Codepoint: 474, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x116, 0x0, 0x0, 0x28, 0x302}},
	{Codepoint: 475, Patch: []uint16{0x1f0b, 0x20, 0x108, 0x0, 0x116, 0x121, 0x0, 0x25, 0x102}},
	{Codepoint: 476, Patch: []uint16{0x1f0b, 0x20, 0x308, 0x0, 0x116, 0x0, 0x0, 0x25, 0x302}},
	{Codepoint: 478, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a5, 0x116, 0x121, 0x0, 0x32, 0x102}},
	{Codepoint: 479, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a5, 0x116, 0x0, 0x0, 0x32, 0x302}},
	{Codepoint: 482, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a5, 0x0, 0x121, 0x0, 0x32, 0x102}},
	{Codepoint: 483, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a5, 0x0, 0x0, 0x0, 0x32, 0x302}},
	{Codepoint: 506, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a7, 0x0, 0x121, 0x0, 0x24, 0x102}},
	{Codepoint: 507, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a7, 0x0, 0x0, 0x0, 0x24, 0x302}},
	{Codepoint: 508, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a5, 0x0, 0x121, 0x0, 0x24, 0x102}},
	{Codepoint: 509, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a5, 0x0, 0x0, 0x0, 0x24, 0x302}},
	{Codepoint: 510, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x0, 0x121, 0x0, 0x24, 0x102}},
	{Codepoint: 511, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x0, 0x0, 0x0, 0x24, 0x302}},
	{Codepoint: 554, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a6, 0x116, 0x121, 0x0, 0x32, 0x102}},
	{Codepoint: 555, Patch: []uint16{0x1f98, 0x20, 0x302, 0x54a6, 0x116, 0x0, 0x0, 0x32, 0x302}},
	{Codepoint: 8491, Patch: []uint16{0x1f98, 0x20, 0x102, 0x54a7, 0x0, 0x121}},
}

type contractor_utf8mb4_da_0900_as_cs struct{}

func (contractor_utf8mb4_da_0900_as_cs) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 65:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 65:
			return contractor_utf8mb4_da_0900_as_cs_weights[0:6], b0[width1:], 2
		case 97:
			return contractor_utf8mb4_da_0900_as_cs_weights[6:12], b0[width1:], 2
		}
	case 97:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 97:
			return contractor_utf8mb4_da_0900_as_cs_weights[12:18], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_da_0900_as_cs) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_da_0900_as_cs_weights = [...]uint16{0x1f98, 0x0020, 0x0102, 0x54a7, 0x0000, 0x0124, 0x1f98, 0x0020, 0x0202, 0x54a7, 0x0000, 0x0223, 0x1f98, 0x0020, 0x0302, 0x54a7, 0x0000, 0x0322}

var weightTailoring_utf8mb4_vi_0900_as_cs = []uca.WeightPatch{
	{Codepoint: 193, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 194, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 195, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 201, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 202, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 205, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 209, Patch: []uint16{0x1db9, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 211, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 212, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 213, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 218, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 221, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 225, Patch: []uint16{0x1c47, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 226, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 227, Patch: []uint16{0x1c47, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 233, Patch: []uint16{0x1caa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 234, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 237, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 241, Patch: []uint16{0x1db9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 243, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 244, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 245, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 250, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 253, Patch: []uint16{0x1f0b, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 258, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 259, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 262, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 263, Patch: []uint16{0x1c7a, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 272, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 273, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 296, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 297, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 313, Patch: []uint16{0x1d77, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 314, Patch: []uint16{0x1d77, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 323, Patch: []uint16{0x1db9, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 324, Patch: []uint16{0x1db9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 340, Patch: []uint16{0x1e33, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 341, Patch: []uint16{0x1e33, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 346, Patch: []uint16{0x1e71, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 347, Patch: []uint16{0x1e71, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 360, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 361, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 377, Patch: []uint16{0x1f21, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 378, Patch: []uint16{0x1f21, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 416, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21}},
	{Codepoint: 417, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0}},
	{Codepoint: 431, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21}},
	{Codepoint: 432, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0}},
	{Codepoint: 471, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 472, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 500, Patch: []uint16{0x1cf4, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 501, Patch: []uint16{0x1cf4, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 506, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x29, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 507, Patch: []uint16{0x1c47, 0x20, 0x2, 0x0, 0x29, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 508, Patch: []uint16{0x1c47, 0x20, 0xa, 0x0, 0x110, 0x4, 0x1caa, 0x20, 0xa, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 509, Patch: []uint16{0x1c47, 0x20, 0x4, 0x0, 0x110, 0x4, 0x1caa, 0x20, 0x4, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 510, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x2f, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 511, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x2f, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 556, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 557, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 769, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 771, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 777, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 803, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 833, Patch: []uint16{0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 836, Patch: []uint16{0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 901, Patch: []uint16{0x489, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 902, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 904, Patch: []uint16{0x1fbe, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 905, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 906, Patch: []uint16{0x1fc6, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 908, Patch: []uint16{0x1fce, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 910, Patch: []uint16{0x1fdc, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 911, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 912, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 940, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 941, Patch: []uint16{0x1fbe, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 942, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 943, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 944, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 972, Patch: []uint16{0x1fce, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 973, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 974, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 979, Patch: []uint16{0x1fdc, 0x20, 0xa, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 1027, Patch: []uint16{0x2036, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 1036, Patch: []uint16{0x2096, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 1107, Patch: []uint16{0x2036, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 1116, Patch: []uint16{0x2096, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7684, Patch: []uint16{0x1c60, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7685, Patch: []uint16{0x1c60, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7688, Patch: []uint16{0x1c7a, 0x20, 0x8, 0x0, 0x30, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7689, Patch: []uint16{0x1c7a, 0x20, 0x2, 0x0, 0x30, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7692, Patch: []uint16{0x1c8f, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7693, Patch: []uint16{0x1c8f, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7702, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x32, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7703, Patch: []uint16{0x1caa, 0x20, 0x2, 0x0, 0x32, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7716, Patch: []uint16{0x1d18, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7717, Patch: []uint16{0x1d18, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7726, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7727, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7728, Patch: []uint16{0x1d65, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7729, Patch: []uint16{0x1d65, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7730, Patch: []uint16{0x1d65, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7731, Patch: []uint16{0x1d65, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7734, Patch: []uint16{0x1d77, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7735, Patch: []uint16{0x1d77, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7736, Patch: []uint16{0x1d77, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7737, Patch: []uint16{0x1d77, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7742, Patch: []uint16{0x1daa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7743, Patch: []uint16{0x1daa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7746, Patch: []uint16{0x1daa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7747, Patch: []uint16{0x1daa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7750, Patch: []uint16{0x1db9, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7751, Patch: []uint16{0x1db9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7756, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7757, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7758, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 7759, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x2b, 0x2}},
	{Codepoint: 7762, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x32, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7763, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x32, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7764, Patch: []uint16{0x1e0c, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7765, Patch: []uint16{0x1e0c, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7770, Patch: []uint16{0x1e33, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7771, Patch: []uint16{0x1e33, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7772, Patch: []uint16{0x1e33, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7773, Patch: []uint16{0x1e33, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x32, 0x2}},
	{Codepoint: 7778, Patch: []uint16{0x1e71, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7779, Patch: []uint16{0x1e71, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7780, Patch: []uint16{0x1e71, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7781, Patch: []uint16{0x1e71, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7784, Patch: []uint16{0x1e71, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7785, Patch: []uint16{0x1e71, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0, 0x0, 0x2e, 0x2}},
	{Codepoint: 7788, Patch: []uint16{0x1e95, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7789, Patch: []uint16{0x1e95, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7800, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7801, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7804, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7805, Patch: []uint16{0x1ee3, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7806, Patch: []uint16{0x1ee3, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7807, Patch: []uint16{0x1ee3, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7810, Patch: []uint16{0x1ef5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7811, Patch: []uint16{0x1ef5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7816, Patch: []uint16{0x1ef5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7817, Patch: []uint16{0x1ef5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7826, Patch: []uint16{0x1f21, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7827, Patch: []uint16{0x1f21, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7840, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7841, Patch: []uint16{0x1c47, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7842, Patch: []uint16{0x1c47, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7843, Patch: []uint16{0x1c47, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7844, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7845, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7846, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7847, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7848, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7849, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7850, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7851, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7852, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7853, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7854, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7855, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7856, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7857, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7858, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7859, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7860, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7861, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7862, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7863, Patch: []uint16{0x1c47, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7864, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7865, Patch: []uint16{0x1caa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7866, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7867, Patch: []uint16{0x1caa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7868, Patch: []uint16{0x1caa, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7869, Patch: []uint16{0x1caa, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7870, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7871, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7872, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7873, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7874, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7875, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7876, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7877, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7878, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7879, Patch: []uint16{0x1caa, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7880, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7881, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7882, Patch: []uint16{0x1d32, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7883, Patch: []uint16{0x1d32, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7884, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7885, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7886, Patch: []uint16{0x1ddd, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7887, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7888, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7889, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7890, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7891, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7892, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7893, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7894, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7895, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7896, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7897, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7898, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7899, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7900, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7901, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7902, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7903, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7904, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7905, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7906, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7907, Patch: []uint16{0x1ddd, 0x20, 0x2, 0x54a6, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7908, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7909, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7910, Patch: []uint16{0x1eb5, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7911, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7912, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7913, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7914, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2}},
	{Codepoint: 7915, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2}},
	{Codepoint: 7916, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7917, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7918, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7919, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7920, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x21, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7921, Patch: []uint16{0x1eb5, 0x20, 0x2, 0x54a5, 0x0, 0x0, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7924, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7925, Patch: []uint16{0x1f0b, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x119, 0x0}},
	{Codepoint: 7926, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7927, Patch: []uint16{0x1f0b, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x116, 0x0}},
	{Codepoint: 7928, Patch: []uint16{0x1f0b, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7929, Patch: []uint16{0x1f0b, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x117, 0x0}},
	{Codepoint: 7940, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7941, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7948, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7949, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7956, Patch: []uint16{0x1fbe, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7957, Patch: []uint16{0x1fbe, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7964, Patch: []uint16{0x1fbe, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7965, Patch: []uint16{0x1fbe, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7972, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7973, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7980, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7981, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7988, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7989, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7996, Patch: []uint16{0x1fc6, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 7997, Patch: []uint16{0x1fc6, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8004, Patch: []uint16{0x1fce, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8005, Patch: []uint16{0x1fce, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8012, Patch: []uint16{0x1fce, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8013, Patch: []uint16{0x1fce, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8020, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8021, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8029, Patch: []uint16{0x1fdc, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8036, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8037, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8044, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8045, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8049, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8051, Patch: []uint16{0x1fbe, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8053, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8055, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8057, Patch: []uint16{0x1fce, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8059, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8061, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8068, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8069, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8076, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8077, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8084, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8085, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8092, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8093, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8100, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8101, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8108, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x22, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8109, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x23, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8116, Patch: []uint16{0x1fb9, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8123, Patch: []uint16{0x1fb9, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8132, Patch: []uint16{0x1fc4, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8137, Patch: []uint16{0x1fbe, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8139, Patch: []uint16{0x1fc4, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8142, Patch: []uint16{0x48e, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8147, Patch: []uint16{0x1fc6, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8155, Patch: []uint16{0x1fc6, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8158, Patch: []uint16{0x48f, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8163, Patch: []uint16{0x1fdc, 0x20, 0x2, 0x0, 0x2b, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8171, Patch: []uint16{0x1fdc, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8174, Patch: []uint16{0x489, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8180, Patch: []uint16{0x1fe1, 0x20, 0x2, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0, 0x0, 0x4c, 0x2}},
	{Codepoint: 8185, Patch: []uint16{0x1fce, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
	{Codepoint: 8187, Patch: []uint16{0x1fe1, 0x20, 0x8, 0x0, 0x25, 0x2, 0x0, 0x118, 0x0}},
}

type contractor_utf8mb4_ja_0900_as_cs struct{}

func (contractor_utf8mb4_ja_0900_as_cs) Find(charset.Charset, rune, []byte) ([]uint16, []byte, int) {
	return nil, nil, 0
}

var contractor_utf8mb4_ja_0900_as_cs_weights = map[uint32][]uint16{
	0x309d3041: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3042: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3043: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3044: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3045: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3046: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3047: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3048: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3049: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d304a: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d304b: {0x3d60, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d304c: {0x3d60, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309d304d: {0x3d61, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d304e: {0x3d61, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d304f: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3050: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3051: {0x3d63, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3052: {0x3d63, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309d3053: {0x3d64, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3054: {0x3d64, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3055: {0x3d65, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3056: {0x3d65, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3057: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3058: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3059: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305a: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305b: {0x3d68, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305c: {0x3d68, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305d: {0x3d69, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305e: {0x3d69, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d305f: {0x3d6a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3060: {0x3d6a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3061: {0x3d6b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3062: {0x3d6b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3063: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3064: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3065: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3066: {0x3d6d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3067: {0x3d6d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3068: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3069: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306a: {0x3d6f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306b: {0x3d70, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306c: {0x3d71, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306d: {0x3d72, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306e: {0x3d73, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d306f: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3070: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3071: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3072: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3073: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3074: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3075: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3076: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3077: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3078: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3079: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307a: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307b: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307c: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307d: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307e: {0x3d79, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d307f: {0x3d7a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3080: {0x3d7b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3081: {0x3d7c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3082: {0x3d7d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3083: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3084: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3085: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3086: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3087: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3088: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3089: {0x3d82, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308a: {0x3d83, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308b: {0x3d84, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308c: {0x3d85, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308d: {0x3d86, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308e: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d308f: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3090: {0x3d88, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3091: {0x3d89, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3092: {0x3d8a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3093: {0x3d8b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3094: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3095: {0x3d60, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309d3096: {0x3d63, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x309e3045: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3046: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e304d: {0x3d61, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e304e: {0x3d61, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e304f: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3050: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3053: {0x3d64, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3054: {0x3d64, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3055: {0x3d65, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3056: {0x3d65, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3057: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3058: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3059: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305a: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305b: {0x3d68, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305c: {0x3d68, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305d: {0x3d69, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305e: {0x3d69, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e305f: {0x3d6a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3060: {0x3d6a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3061: {0x3d6b, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3062: {0x3d6b, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3063: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3064: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3065: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3066: {0x3d6d, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3067: {0x3d6d, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3068: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3069: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e306f: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3070: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3071: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3072: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3073: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3074: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3075: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3076: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3077: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3078: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3079: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e307a: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e307b: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e307c: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e307d: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e308e: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e308f: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3090: {0x3d88, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3091: {0x3d89, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3092: {0x3d8a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x309e3094: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fc3041: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3042: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3043: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3044: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3045: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3046: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3047: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3048: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3049: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304a: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304b: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304c: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304d: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304e: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc304f: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3050: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3051: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3052: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3053: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3054: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3055: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3056: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3057: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3058: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3059: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305a: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305b: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305c: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305d: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305e: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc305f: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3060: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3061: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3062: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3063: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3064: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3065: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3066: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3067: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3068: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3069: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306a: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306b: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306c: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306d: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306e: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc306f: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3070: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3071: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3072: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3073: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3074: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3075: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3076: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3077: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3078: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3079: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307a: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307b: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307c: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307d: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307e: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc307f: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3080: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3081: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3082: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3083: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3084: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3085: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3086: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3087: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3088: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3089: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308a: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308b: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308c: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308d: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308e: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc308f: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3090: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3091: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3092: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3094: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3095: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc3096: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a1: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a2: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a3: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a4: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a5: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a6: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a7: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a8: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30a9: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30aa: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ab: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ac: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ad: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ae: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30af: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b0: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b1: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b2: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b3: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b4: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b5: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b6: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b7: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b8: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30b9: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ba: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30bb: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30bc: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30bd: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30be: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30bf: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c0: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c1: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c2: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c3: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c4: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c5: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c6: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c7: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c8: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30c9: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ca: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30cb: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30cc: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30cd: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ce: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30cf: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d0: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d1: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d2: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d3: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d4: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d5: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d6: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d7: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d8: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30d9: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30da: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30db: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30dc: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30dd: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30de: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30df: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e0: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e1: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e2: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e3: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e4: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e5: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e6: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e7: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e8: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30e9: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ea: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30eb: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ec: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ed: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ee: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30ef: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f0: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f1: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f2: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f4: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f5: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f6: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f7: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f8: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30f9: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc30fa: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f0: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f1: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f2: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f3: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f4: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f5: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f6: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f7: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f8: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31f9: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31fa: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31fb: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31fc: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31fd: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31fe: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fc31ff: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff66: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff67: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff68: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff69: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6a: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6b: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6c: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6d: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6e: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff6f: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff71: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff72: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff73: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff74: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff75: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff76: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff77: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff78: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff79: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7a: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7b: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7c: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7d: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7e: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff7f: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff80: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff81: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff82: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff83: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff84: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff85: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff86: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff87: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff88: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff89: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8a: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8b: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8c: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8d: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8e: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff8f: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff90: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff91: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff92: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff93: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff94: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff95: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff96: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff97: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff98: {0x3d5b, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff99: {0x3d5c, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff9a: {0x3d5e, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff9b: {0x3d5f, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fcff9c: {0x3d5a, 0x20, 0xc, 0x0, 0x0, 0x21},
	0x30fd30a1: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a2: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a3: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a4: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a5: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a6: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a7: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a8: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30a9: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30aa: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ab: {0x3d60, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ac: {0x3d60, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fd30ad: {0x3d61, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ae: {0x3d61, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30af: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b0: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b1: {0x3d63, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b2: {0x3d63, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fd30b3: {0x3d64, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b4: {0x3d64, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b5: {0x3d65, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b6: {0x3d65, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b7: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b8: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30b9: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ba: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30bb: {0x3d68, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30bc: {0x3d68, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30bd: {0x3d69, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30be: {0x3d69, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30bf: {0x3d6a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c0: {0x3d6a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c1: {0x3d6b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c2: {0x3d6b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c3: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c4: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c5: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c6: {0x3d6d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c7: {0x3d6d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c8: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30c9: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ca: {0x3d6f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30cb: {0x3d70, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30cc: {0x3d71, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30cd: {0x3d72, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ce: {0x3d73, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30cf: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d0: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d1: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d2: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d3: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d4: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d5: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d6: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d7: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d8: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30d9: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30da: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30db: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30dc: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30dd: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30de: {0x3d79, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30df: {0x3d7a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e0: {0x3d7b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e1: {0x3d7c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e2: {0x3d7d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e3: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e4: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e5: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e6: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e7: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e8: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30e9: {0x3d82, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ea: {0x3d83, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30eb: {0x3d84, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ec: {0x3d85, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ed: {0x3d86, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ee: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30ef: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f0: {0x3d88, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f1: {0x3d89, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f2: {0x3d8a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f3: {0x3d8b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f4: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f5: {0x3d60, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f6: {0x3d63, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f7: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f8: {0x3d88, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30f9: {0x3d89, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd30fa: {0x3d8a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f0: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f1: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f2: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f3: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f4: {0x3d71, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f5: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f6: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f7: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f8: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31f9: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31fa: {0x3d7b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31fb: {0x3d82, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31fc: {0x3d83, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31fd: {0x3d84, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31fe: {0x3d85, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fd31ff: {0x3d86, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff66: {0x3d8a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff67: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff68: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff69: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6a: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6b: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6c: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6d: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6e: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff6f: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff71: {0x3d5a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff72: {0x3d5b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff73: {0x3d5c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff74: {0x3d5e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff75: {0x3d5f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff76: {0x3d60, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff77: {0x3d61, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff78: {0x3d62, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff79: {0x3d63, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7a: {0x3d64, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7b: {0x3d65, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7c: {0x3d66, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7d: {0x3d67, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7e: {0x3d68, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff7f: {0x3d69, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff80: {0x3d6a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff81: {0x3d6b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff82: {0x3d6c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff83: {0x3d6d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff84: {0x3d6e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff85: {0x3d6f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff86: {0x3d70, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff87: {0x3d71, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff88: {0x3d72, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff89: {0x3d73, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8a: {0x3d74, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8b: {0x3d75, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8c: {0x3d76, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8d: {0x3d77, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8e: {0x3d78, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff8f: {0x3d79, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff90: {0x3d7a, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff91: {0x3d7b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff92: {0x3d7c, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff93: {0x3d7d, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff94: {0x3d7e, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff95: {0x3d7f, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff96: {0x3d81, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff97: {0x3d82, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff98: {0x3d83, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff99: {0x3d84, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff9a: {0x3d85, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff9b: {0x3d86, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff9c: {0x3d87, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fdff9d: {0x3d8b, 0x20, 0xd, 0x0, 0x0, 0x21},
	0x30fe30a5: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30a6: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30ad: {0x3d61, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30ae: {0x3d61, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30af: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b0: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b3: {0x3d64, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b4: {0x3d64, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b5: {0x3d65, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b6: {0x3d65, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b7: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b8: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30b9: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30ba: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30bb: {0x3d68, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30bc: {0x3d68, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30bd: {0x3d69, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30be: {0x3d69, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30bf: {0x3d6a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c0: {0x3d6a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c1: {0x3d6b, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c2: {0x3d6b, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c3: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c4: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c5: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c6: {0x3d6d, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c7: {0x3d6d, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c8: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30c9: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30cf: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d0: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d1: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d2: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d3: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d4: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d5: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d6: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d7: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d8: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30d9: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30da: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30db: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30dc: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30dd: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30ee: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30ef: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f0: {0x3d88, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f1: {0x3d89, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f2: {0x3d8a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f4: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f7: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f8: {0x3d88, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30f9: {0x3d89, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe30fa: {0x3d8a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f0: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f1: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f2: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f3: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f5: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f6: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f7: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f8: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30fe31f9: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff66: {0x3d8a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff69: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff6f: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff73: {0x3d5c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff77: {0x3d61, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff78: {0x3d62, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7a: {0x3d64, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7b: {0x3d65, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7c: {0x3d66, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7d: {0x3d67, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7e: {0x3d68, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff7f: {0x3d69, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff80: {0x3d6a, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff81: {0x3d6b, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff82: {0x3d6c, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff83: {0x3d6d, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff84: {0x3d6e, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff8a: {0x3d74, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff8b: {0x3d75, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff8c: {0x3d76, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff8d: {0x3d77, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff8e: {0x3d78, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
	0x30feff9c: {0x3d87, 0x20, 0xe, 0x0, 0x37, 0x1, 0x0, 0x0, 0x21},
}

func (contractor_utf8mb4_ja_0900_as_cs) FindContextual(cp1, cp0 rune) []uint16 {
	if cp0 < 12353 || cp1 < 12445 || cp0 > 0xFFFF || cp1 > 0xFFFF {
		return nil
	}
	return contractor_utf8mb4_ja_0900_as_cs_weights[uint32(cp1)<<16|uint32(cp0)]
}

var reorder_utf8mb4_ja_0900_as_cs = []uca.Reorder{
	{FromMin: 0x1C47, FromMax: 0x1FB5, ToMin: 0x1C47, ToMax: 0x1FB5},
	{FromMin: 0x3D5A, FromMax: 0x3D8B, ToMin: 0x1FB6, ToMax: 0x1FE7},
	{FromMin: 0x1FB6, FromMax: 0x3D59, ToMin: 0x0000, ToMax: 0x0000},
	{FromMin: 0x3D8C, FromMax: 0x54A3, ToMin: 0x0000, ToMax: 0x0000},
}
var reorder_utf8mb4_ru_0900_ai_ci = []uca.Reorder{
	{FromMin: 0x2022, FromMax: 0x21E1, ToMin: 0x1C47, ToMax: 0x1E06},
	{FromMin: 0x1C47, FromMax: 0x2021, ToMin: 0x1E07, ToMax: 0x21E1},
}

type contractor_utf8mb4_zh_0900_as_cs struct{}

func (contractor_utf8mb4_zh_0900_as_cs) Find(cs charset.Charset, cp0 rune, b0 []byte) ([]uint16, []byte, int) {
	switch cp0 {
	case 69:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 770:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 768:
				return contractor_utf8mb4_zh_0900_as_cs_weights[0:6], b1[width2:], 3
			case 769:
				return contractor_utf8mb4_zh_0900_as_cs_weights[6:12], b1[width2:], 3
			case 772:
				return contractor_utf8mb4_zh_0900_as_cs_weights[12:18], b1[width2:], 3
			case 780:
				return contractor_utf8mb4_zh_0900_as_cs_weights[18:24], b1[width2:], 3
			}
		}
	case 77:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 768:
			return contractor_utf8mb4_zh_0900_as_cs_weights[24:30], b0[width1:], 2
		case 772:
			return contractor_utf8mb4_zh_0900_as_cs_weights[30:36], b0[width1:], 2
		case 780:
			return contractor_utf8mb4_zh_0900_as_cs_weights[36:42], b0[width1:], 2
		}
	case 78:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 772:
			return contractor_utf8mb4_zh_0900_as_cs_weights[42:48], b0[width1:], 2
		}
	case 101:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 770:
			b1 := b0[width1:]
			cp2, width2 := cs.DecodeRune(b1)
			switch cp2 {
			case 768:
				return contractor_utf8mb4_zh_0900_as_cs_weights[48:54], b1[width2:], 3
			case 769:
				return contractor_utf8mb4_zh_0900_as_cs_weights[54:60], b1[width2:], 3
			case 772:
				return contractor_utf8mb4_zh_0900_as_cs_weights[60:66], b1[width2:], 3
			case 780:
				return contractor_utf8mb4_zh_0900_as_cs_weights[66:72], b1[width2:], 3
			}
		}
	case 109:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 768:
			return contractor_utf8mb4_zh_0900_as_cs_weights[72:78], b0[width1:], 2
		case 772:
			return contractor_utf8mb4_zh_0900_as_cs_weights[78:84], b0[width1:], 2
		case 780:
			return contractor_utf8mb4_zh_0900_as_cs_weights[84:90], b0[width1:], 2
		}
	case 110:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 772:
			return contractor_utf8mb4_zh_0900_as_cs_weights[90:96], b0[width1:], 2
		}
	case 27784:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 38451:
			return contractor_utf8mb4_zh_0900_as_cs_weights[96:105], b0[width1:], 2
		}
	case 34255:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 25991:
			return contractor_utf8mb4_zh_0900_as_cs_weights[105:114], b0[width1:], 2
		}
	case 37325:
		cp1, width1 := cs.DecodeRune(b0)
		switch cp1 {
		case 24198:
			return contractor_utf8mb4_zh_0900_as_cs_weights[114:123], b0[width1:], 2
		}
	}
	return nil, nil, 0
}

func (contractor_utf8mb4_zh_0900_as_cs) FindContextual(cp1, cp0 rune) []uint16 {
	return nil
}

var contractor_utf8mb4_zh_0900_as_cs_weights = [...]uint16{0xbe27, 0x0020, 0x0002, 0x0000, 0x0119, 0x0021, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0117, 0x0021, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0116, 0x0021, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0118, 0x0021, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0119, 0x0021, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0116, 0x0021, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0118, 0x0021, 0xbf36, 0x001f, 0x0002, 0x0000, 0x0116, 0x0021, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0119, 0x0000, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0117, 0x0000, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0116, 0x0000, 0xbe27, 0x0020, 0x0002, 0x0000, 0x0118, 0x0000, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0119, 0x0000, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0116, 0x0000, 0xbf27, 0x001f, 0x0002, 0x0000, 0x0118, 0x0000, 0xbf36, 0x001f, 0x0002, 0x0000, 0x0116, 0x0000, 0x848c, 0x0020, 0x0002, 0xa41b, 0x0020, 0x0002, 0xf645, 0x0000, 0x0000, 0xb166, 0x0020, 0x0002, 0x9523, 0x0020, 0x0002, 0xf645, 0x0000, 0x0000, 0x2ad7, 0x0020, 0x0002, 0x7bc5, 0x0020, 0x0002, 0xf645, 0x0000, 0x0000}

func init() {
	register(&Collation_8bit_simple_ci{
		id:   3,
		name: "dec8_swedish_ci",
		simpletables: simpletables{
			sort: &sortorder_dec8_swedish_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "dec8",
			ToUnicode:   &tounicode_dec8_swedish_ci,
			FromUnicode: fromunicode_dec8_swedish_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   4,
		name: "cp850_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp850_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp850",
			ToUnicode:   &tounicode_cp850_general_ci,
			FromUnicode: fromunicode_cp850_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   5,
		name: "latin1_german1_ci",
		simpletables: simpletables{
			sort: &sortorder_latin1_german1_ci,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_8bit_simple_ci{
		id:   6,
		name: "hp8_english_ci",
		simpletables: simpletables{
			sort: &sortorder_hp8_english_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "hp8",
			ToUnicode:   &tounicode_hp8_english_ci,
			FromUnicode: fromunicode_hp8_english_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   7,
		name: "koi8r_general_ci",
		simpletables: simpletables{
			sort: &sortorder_koi8r_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "koi8r",
			ToUnicode:   &tounicode_koi8r_general_ci,
			FromUnicode: fromunicode_koi8r_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   8,
		name: "latin1_swedish_ci",
		simpletables: simpletables{
			sort: &sortorder_dec8_swedish_ci,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_8bit_simple_ci{
		id:   9,
		name: "latin2_general_ci",
		simpletables: simpletables{
			sort: &sortorder_latin2_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin2",
			ToUnicode:   &tounicode_latin2_general_ci,
			FromUnicode: fromunicode_latin2_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   10,
		name: "swe7_swedish_ci",
		simpletables: simpletables{
			sort: &sortorder_swe7_swedish_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "swe7",
			ToUnicode:   &tounicode_swe7_swedish_ci,
			FromUnicode: fromunicode_swe7_swedish_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   11,
		name: "ascii_general_ci",
		simpletables: simpletables{
			sort: &sortorder_ascii_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "ascii",
			ToUnicode:   &tounicode_ascii_general_ci,
			FromUnicode: fromunicode_ascii_general_ci,
		},
	})
	register(&Collation_multibyte{
		id:      12,
		name:    "ujis_japanese_ci",
		sort:    &sortorder_ascii_general_ci,
		charset: charset.Charset_ujis{},
	})
	register(&Collation_multibyte{
		id:      13,
		name:    "sjis_japanese_ci",
		sort:    &sortorder_ascii_general_ci,
		charset: charset.Charset_sjis{},
	})
	register(&Collation_8bit_simple_ci{
		id:   14,
		name: "cp1251_bulgarian_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1251_bulgarian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1251",
			ToUnicode:   &tounicode_cp1251_bulgarian_ci,
			FromUnicode: fromunicode_cp1251_bulgarian_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   15,
		name: "latin1_danish_ci",
		simpletables: simpletables{
			sort: &sortorder_latin1_danish_ci,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_8bit_simple_ci{
		id:   16,
		name: "hebrew_general_ci",
		simpletables: simpletables{
			sort: &sortorder_hebrew_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "hebrew",
			ToUnicode:   &tounicode_hebrew_general_ci,
			FromUnicode: fromunicode_hebrew_general_ci,
		},
	})
	register(&Collation_multibyte{
		id:      19,
		name:    "euckr_korean_ci",
		sort:    &sortorder_ascii_general_ci,
		charset: charset.Charset_euckr{},
	})
	register(&Collation_8bit_simple_ci{
		id:   20,
		name: "latin7_estonian_cs",
		simpletables: simpletables{
			sort: &sortorder_latin7_estonian_cs,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin7",
			ToUnicode:   &tounicode_latin7_estonian_cs,
			FromUnicode: fromunicode_latin7_estonian_cs,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   21,
		name: "latin2_hungarian_ci",
		simpletables: simpletables{
			sort: &sortorder_latin2_hungarian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin2",
			ToUnicode:   &tounicode_latin2_general_ci,
			FromUnicode: fromunicode_latin2_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   22,
		name: "koi8u_general_ci",
		simpletables: simpletables{
			sort: &sortorder_koi8u_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "koi8u",
			ToUnicode:   &tounicode_koi8u_general_ci,
			FromUnicode: fromunicode_koi8u_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   23,
		name: "cp1251_ukrainian_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1251_ukrainian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1251",
			ToUnicode:   &tounicode_cp1251_bulgarian_ci,
			FromUnicode: fromunicode_cp1251_bulgarian_ci,
		},
	})
	register(&Collation_multibyte{
		id:      24,
		name:    "gb2312_chinese_ci",
		sort:    &sortorder_gb2312_chinese_ci,
		charset: charset.Charset_gb2312{},
	})
	register(&Collation_8bit_simple_ci{
		id:   25,
		name: "greek_general_ci",
		simpletables: simpletables{
			sort: &sortorder_greek_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "greek",
			ToUnicode:   &tounicode_greek_general_ci,
			FromUnicode: fromunicode_greek_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   26,
		name: "cp1250_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1250_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1250",
			ToUnicode:   &tounicode_cp1250_general_ci,
			FromUnicode: fromunicode_cp1250_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   27,
		name: "latin2_croatian_ci",
		simpletables: simpletables{
			sort: &sortorder_latin2_croatian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin2",
			ToUnicode:   &tounicode_latin2_general_ci,
			FromUnicode: fromunicode_latin2_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   29,
		name: "cp1257_lithuanian_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1257_lithuanian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1257",
			ToUnicode:   &tounicode_cp1257_lithuanian_ci,
			FromUnicode: fromunicode_cp1257_lithuanian_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   30,
		name: "latin5_turkish_ci",
		simpletables: simpletables{
			sort: &sortorder_latin5_turkish_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin5",
			ToUnicode:   &tounicode_latin5_turkish_ci,
			FromUnicode: fromunicode_latin5_turkish_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   32,
		name: "armscii8_general_ci",
		simpletables: simpletables{
			sort: &sortorder_ascii_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "armscii8",
			ToUnicode:   &tounicode_armscii8_general_ci,
			FromUnicode: fromunicode_armscii8_general_ci,
		},
	})
	register(&Collation_unicode_general_ci{
		id:      33,
		name:    "utf8_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_utf8{},
	})
	register(&Collation_unicode_general_ci{
		id:      35,
		name:    "ucs2_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_ucs2{},
	})
	register(&Collation_8bit_simple_ci{
		id:   36,
		name: "cp866_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp866_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp866",
			ToUnicode:   &tounicode_cp866_general_ci,
			FromUnicode: fromunicode_cp866_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   37,
		name: "keybcs2_general_ci",
		simpletables: simpletables{
			sort: &sortorder_keybcs2_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "keybcs2",
			ToUnicode:   &tounicode_keybcs2_general_ci,
			FromUnicode: fromunicode_keybcs2_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   38,
		name: "macce_general_ci",
		simpletables: simpletables{
			sort: &sortorder_macce_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "macce",
			ToUnicode:   &tounicode_macce_general_ci,
			FromUnicode: fromunicode_macce_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   39,
		name: "macroman_general_ci",
		simpletables: simpletables{
			sort: &sortorder_macroman_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "macroman",
			ToUnicode:   &tounicode_macroman_general_ci,
			FromUnicode: fromunicode_macroman_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   40,
		name: "cp852_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp852_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp852",
			ToUnicode:   &tounicode_cp852_general_ci,
			FromUnicode: fromunicode_cp852_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   41,
		name: "latin7_general_ci",
		simpletables: simpletables{
			sort: &sortorder_latin7_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin7",
			ToUnicode:   &tounicode_latin7_estonian_cs,
			FromUnicode: fromunicode_latin7_estonian_cs,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   42,
		name: "latin7_general_cs",
		simpletables: simpletables{
			sort: &sortorder_latin7_general_cs,
		},
		charset: &charset.Charset_8bit{
			Name_:       "latin7",
			ToUnicode:   &tounicode_latin7_estonian_cs,
			FromUnicode: fromunicode_latin7_estonian_cs,
		},
	})
	register(&Collation_8bit_bin{
		id:           43,
		name:         "macce_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "macce",
			ToUnicode:   &tounicode_macce_general_ci,
			FromUnicode: fromunicode_macce_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   44,
		name: "cp1250_croatian_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1250_croatian_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1250",
			ToUnicode:   &tounicode_cp1250_general_ci,
			FromUnicode: fromunicode_cp1250_general_ci,
		},
	})
	register(&Collation_unicode_general_ci{
		id:      45,
		name:    "utf8mb4_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_utf8mb4{},
	})
	register(&Collation_unicode_bin{
		id:      46,
		name:    "utf8mb4_bin",
		charset: charset.Charset_utf8mb4{},
	})
	register(&Collation_8bit_bin{
		id:           47,
		name:         "latin1_bin",
		simpletables: simpletables{},
		charset:      charset.Charset_latin1{},
	})
	register(&Collation_8bit_simple_ci{
		id:   48,
		name: "latin1_general_ci",
		simpletables: simpletables{
			sort: &sortorder_latin1_general_ci,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_8bit_simple_ci{
		id:   49,
		name: "latin1_general_cs",
		simpletables: simpletables{
			sort: &sortorder_latin1_general_cs,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_8bit_bin{
		id:           50,
		name:         "cp1251_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp1251",
			ToUnicode:   &tounicode_cp1251_bulgarian_ci,
			FromUnicode: fromunicode_cp1251_bulgarian_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   51,
		name: "cp1251_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1251_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1251",
			ToUnicode:   &tounicode_cp1251_bulgarian_ci,
			FromUnicode: fromunicode_cp1251_bulgarian_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   52,
		name: "cp1251_general_cs",
		simpletables: simpletables{
			sort: &sortorder_cp1251_general_cs,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1251",
			ToUnicode:   &tounicode_cp1251_bulgarian_ci,
			FromUnicode: fromunicode_cp1251_bulgarian_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           53,
		name:         "macroman_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "macroman",
			ToUnicode:   &tounicode_macroman_general_ci,
			FromUnicode: fromunicode_macroman_general_ci,
		},
	})
	register(&Collation_unicode_general_ci{
		id:      54,
		name:    "utf16_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_utf16{},
	})
	register(&Collation_unicode_bin{
		id:      55,
		name:    "utf16_bin",
		charset: charset.Charset_utf16{},
	})
	register(&Collation_unicode_general_ci{
		id:      56,
		name:    "utf16le_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_utf16le{},
	})
	register(&Collation_8bit_simple_ci{
		id:   57,
		name: "cp1256_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1256_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1256",
			ToUnicode:   &tounicode_cp1256_general_ci,
			FromUnicode: fromunicode_cp1256_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           58,
		name:         "cp1257_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp1257",
			ToUnicode:   &tounicode_cp1257_lithuanian_ci,
			FromUnicode: fromunicode_cp1257_lithuanian_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   59,
		name: "cp1257_general_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1257_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1257",
			ToUnicode:   &tounicode_cp1257_lithuanian_ci,
			FromUnicode: fromunicode_cp1257_lithuanian_ci,
		},
	})
	register(&Collation_unicode_general_ci{
		id:      60,
		name:    "utf32_general_ci",
		unicase: unicaseInfo_default,
		charset: charset.Charset_utf32{},
	})
	register(&Collation_unicode_bin{
		id:      61,
		name:    "utf32_bin",
		charset: charset.Charset_utf32{},
	})
	register(&Collation_unicode_bin{
		id:      62,
		name:    "utf16le_bin",
		charset: charset.Charset_utf16le{},
	})
	register(&Collation_8bit_bin{
		id:           64,
		name:         "armscii8_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "armscii8",
			ToUnicode:   &tounicode_armscii8_general_ci,
			FromUnicode: fromunicode_armscii8_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           65,
		name:         "ascii_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "ascii",
			ToUnicode:   &tounicode_ascii_general_ci,
			FromUnicode: fromunicode_ascii_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           66,
		name:         "cp1250_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp1250",
			ToUnicode:   &tounicode_cp1250_general_ci,
			FromUnicode: fromunicode_cp1250_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           67,
		name:         "cp1256_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp1256",
			ToUnicode:   &tounicode_cp1256_general_ci,
			FromUnicode: fromunicode_cp1256_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           68,
		name:         "cp866_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp866",
			ToUnicode:   &tounicode_cp866_general_ci,
			FromUnicode: fromunicode_cp866_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           69,
		name:         "dec8_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "dec8",
			ToUnicode:   &tounicode_dec8_swedish_ci,
			FromUnicode: fromunicode_dec8_swedish_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           70,
		name:         "greek_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "greek",
			ToUnicode:   &tounicode_greek_general_ci,
			FromUnicode: fromunicode_greek_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           71,
		name:         "hebrew_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "hebrew",
			ToUnicode:   &tounicode_hebrew_general_ci,
			FromUnicode: fromunicode_hebrew_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           72,
		name:         "hp8_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "hp8",
			ToUnicode:   &tounicode_hp8_english_ci,
			FromUnicode: fromunicode_hp8_english_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           73,
		name:         "keybcs2_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "keybcs2",
			ToUnicode:   &tounicode_keybcs2_general_ci,
			FromUnicode: fromunicode_keybcs2_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           74,
		name:         "koi8r_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "koi8r",
			ToUnicode:   &tounicode_koi8r_general_ci,
			FromUnicode: fromunicode_koi8r_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           75,
		name:         "koi8u_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "koi8u",
			ToUnicode:   &tounicode_koi8u_general_ci,
			FromUnicode: fromunicode_koi8u_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           77,
		name:         "latin2_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "latin2",
			ToUnicode:   &tounicode_latin2_general_ci,
			FromUnicode: fromunicode_latin2_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           78,
		name:         "latin5_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "latin5",
			ToUnicode:   &tounicode_latin5_turkish_ci,
			FromUnicode: fromunicode_latin5_turkish_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           79,
		name:         "latin7_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "latin7",
			ToUnicode:   &tounicode_latin7_estonian_cs,
			FromUnicode: fromunicode_latin7_estonian_cs,
		},
	})
	register(&Collation_8bit_bin{
		id:           80,
		name:         "cp850_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp850",
			ToUnicode:   &tounicode_cp850_general_ci,
			FromUnicode: fromunicode_cp850_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           81,
		name:         "cp852_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "cp852",
			ToUnicode:   &tounicode_cp852_general_ci,
			FromUnicode: fromunicode_cp852_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           82,
		name:         "swe7_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "swe7",
			ToUnicode:   &tounicode_swe7_swedish_ci,
			FromUnicode: fromunicode_swe7_swedish_ci,
		},
	})
	register(&Collation_unicode_bin{
		id:      83,
		name:    "utf8_bin",
		charset: charset.Charset_utf8{},
	})
	register(&Collation_multibyte{
		id:      85,
		name:    "euckr_bin",
		charset: charset.Charset_euckr{},
	})
	register(&Collation_multibyte{
		id:      86,
		name:    "gb2312_bin",
		charset: charset.Charset_gb2312{},
	})
	register(&Collation_multibyte{
		id:      88,
		name:    "sjis_bin",
		charset: charset.Charset_sjis{},
	})
	register(&Collation_unicode_bin{
		id:      90,
		name:    "ucs2_bin",
		charset: charset.Charset_ucs2{},
	})
	register(&Collation_multibyte{
		id:      91,
		name:    "ujis_bin",
		charset: charset.Charset_ujis{},
	})
	register(&Collation_8bit_simple_ci{
		id:   92,
		name: "geostd8_general_ci",
		simpletables: simpletables{
			sort: &sortorder_geostd8_general_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "geostd8",
			ToUnicode:   &tounicode_geostd8_general_ci,
			FromUnicode: fromunicode_geostd8_general_ci,
		},
	})
	register(&Collation_8bit_bin{
		id:           93,
		name:         "geostd8_bin",
		simpletables: simpletables{},
		charset: &charset.Charset_8bit{
			Name_:       "geostd8",
			ToUnicode:   &tounicode_geostd8_general_ci,
			FromUnicode: fromunicode_geostd8_general_ci,
		},
	})
	register(&Collation_8bit_simple_ci{
		id:   94,
		name: "latin1_spanish_ci",
		simpletables: simpletables{
			sort: &sortorder_latin1_spanish_ci,
		},
		charset: charset.Charset_latin1{},
	})
	register(&Collation_multibyte{
		id:      95,
		name:    "cp932_japanese_ci",
		sort:    &sortorder_ascii_general_ci,
		charset: charset.Charset_cp932{},
	})
	register(&Collation_multibyte{
		id:      96,
		name:    "cp932_bin",
		charset: charset.Charset_cp932{},
	})
	register(&Collation_multibyte{
		id:      97,
		name:    "eucjpms_japanese_ci",
		sort:    &sortorder_ascii_general_ci,
		charset: charset.Charset_eucjpms{},
	})
	register(&Collation_multibyte{
		id:      98,
		name:    "eucjpms_bin",
		charset: charset.Charset_eucjpms{},
	})
	register(&Collation_8bit_simple_ci{
		id:   99,
		name: "cp1250_polish_ci",
		simpletables: simpletables{
			sort: &sortorder_cp1250_polish_ci,
		},
		charset: &charset.Charset_8bit{
			Name_:       "cp1250",
			ToUnicode:   &tounicode_cp1250_general_ci,
			FromUnicode: fromunicode_cp1250_general_ci,
		},
	})
	register(&Collation_uca_legacy{
		name:         "utf16_unicode_ci",
		id:           101,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_icelandic_ci",
		id:           102,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_icelandic_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_latvian_ci",
		id:           103,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_latvian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_romanian_ci",
		id:           104,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_romanian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_slovenian_ci",
		id:           105,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovenian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_polish_ci",
		id:           106,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_polish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_estonian_ci",
		id:           107,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_estonian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_spanish_ci",
		id:           108,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_swedish_ci",
		id:           109,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_swedish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_turkish_ci",
		id:           110,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_turkish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_czech_ci",
		id:           111,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_czech_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_danish_ci",
		id:           112,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_danish_ci,
		contract:     contractor_utf16_danish_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_lithuanian_ci",
		id:           113,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_lithuanian_ci,
		contract:     contractor_utf16_lithuanian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_slovak_ci",
		id:           114,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovak_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_spanish2_ci",
		id:           115,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		contract:     contractor_utf16_spanish2_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_roman_ci",
		id:           116,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_roman_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_persian_ci",
		id:           117,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_persian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_esperanto_ci",
		id:           118,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_esperanto_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_hungarian_ci",
		id:           119,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_hungarian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_sinhala_ci",
		id:           120,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_sinhala_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_german2_ci",
		id:           121,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_german2_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_croatian_ci",
		id:           122,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_croatian_ci,
		contract:     contractor_utf16_croatian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_unicode_520_ci",
		id:           123,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf16_vietnamese_ci",
		id:           124,
		charset:      charset.Charset_utf16{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_vietnamese_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_unicode_ci",
		id:           128,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_icelandic_ci",
		id:           129,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_icelandic_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_latvian_ci",
		id:           130,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_latvian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_romanian_ci",
		id:           131,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_romanian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_slovenian_ci",
		id:           132,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovenian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_polish_ci",
		id:           133,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_polish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_estonian_ci",
		id:           134,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_estonian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_spanish_ci",
		id:           135,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_swedish_ci",
		id:           136,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_swedish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_turkish_ci",
		id:           137,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_turkish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_czech_ci",
		id:           138,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_czech_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_danish_ci",
		id:           139,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_danish_ci,
		contract:     contractor_utf16_danish_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_lithuanian_ci",
		id:           140,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_lithuanian_ci,
		contract:     contractor_utf16_lithuanian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_slovak_ci",
		id:           141,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovak_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_spanish2_ci",
		id:           142,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		contract:     contractor_utf16_spanish2_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_roman_ci",
		id:           143,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_roman_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_persian_ci",
		id:           144,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_persian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_esperanto_ci",
		id:           145,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_esperanto_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_hungarian_ci",
		id:           146,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_hungarian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_sinhala_ci",
		id:           147,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_sinhala_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_german2_ci",
		id:           148,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_german2_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_croatian_ci",
		id:           149,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_croatian_ci,
		contract:     contractor_utf16_croatian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_unicode_520_ci",
		id:           150,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_uca_legacy{
		name:         "ucs2_vietnamese_ci",
		id:           151,
		charset:      charset.Charset_ucs2{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_vietnamese_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_unicode_ci",
		id:           160,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_icelandic_ci",
		id:           161,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_icelandic_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_latvian_ci",
		id:           162,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_latvian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_romanian_ci",
		id:           163,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_romanian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_slovenian_ci",
		id:           164,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovenian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_polish_ci",
		id:           165,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_polish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_estonian_ci",
		id:           166,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_estonian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_spanish_ci",
		id:           167,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_swedish_ci",
		id:           168,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_swedish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_turkish_ci",
		id:           169,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_turkish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_czech_ci",
		id:           170,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_czech_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_danish_ci",
		id:           171,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_danish_ci,
		contract:     contractor_utf16_danish_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_lithuanian_ci",
		id:           172,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_lithuanian_ci,
		contract:     contractor_utf16_lithuanian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_slovak_ci",
		id:           173,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovak_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_spanish2_ci",
		id:           174,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		contract:     contractor_utf16_spanish2_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_roman_ci",
		id:           175,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_roman_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_persian_ci",
		id:           176,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_persian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_esperanto_ci",
		id:           177,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_esperanto_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_hungarian_ci",
		id:           178,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_hungarian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_sinhala_ci",
		id:           179,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_sinhala_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_german2_ci",
		id:           180,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_german2_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_croatian_ci",
		id:           181,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_croatian_ci,
		contract:     contractor_utf16_croatian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_unicode_520_ci",
		id:           182,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf32_vietnamese_ci",
		id:           183,
		charset:      charset.Charset_utf32{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_vietnamese_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_unicode_ci",
		id:           192,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_icelandic_ci",
		id:           193,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_icelandic_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_latvian_ci",
		id:           194,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_latvian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_romanian_ci",
		id:           195,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_romanian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_slovenian_ci",
		id:           196,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovenian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_polish_ci",
		id:           197,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_polish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_estonian_ci",
		id:           198,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_estonian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_spanish_ci",
		id:           199,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_swedish_ci",
		id:           200,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_swedish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_turkish_ci",
		id:           201,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_turkish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_czech_ci",
		id:           202,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_czech_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_danish_ci",
		id:           203,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_danish_ci,
		contract:     contractor_utf16_danish_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_lithuanian_ci",
		id:           204,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_lithuanian_ci,
		contract:     contractor_utf16_lithuanian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_slovak_ci",
		id:           205,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovak_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_spanish2_ci",
		id:           206,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		contract:     contractor_utf16_spanish2_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_roman_ci",
		id:           207,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_roman_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_persian_ci",
		id:           208,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_persian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_esperanto_ci",
		id:           209,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_esperanto_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_hungarian_ci",
		id:           210,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_hungarian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_sinhala_ci",
		id:           211,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_sinhala_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_german2_ci",
		id:           212,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_german2_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_croatian_ci",
		id:           213,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_croatian_ci,
		contract:     contractor_utf16_croatian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_unicode_520_ci",
		id:           214,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8_vietnamese_ci",
		id:           215,
		charset:      charset.Charset_utf8{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_vietnamese_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_unicode_ci",
		id:           224,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_icelandic_ci",
		id:           225,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_icelandic_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_latvian_ci",
		id:           226,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_latvian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_romanian_ci",
		id:           227,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_romanian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_slovenian_ci",
		id:           228,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovenian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_polish_ci",
		id:           229,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_polish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_estonian_ci",
		id:           230,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_estonian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_spanish_ci",
		id:           231,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_swedish_ci",
		id:           232,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_swedish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_turkish_ci",
		id:           233,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_turkish_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_czech_ci",
		id:           234,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_czech_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_danish_ci",
		id:           235,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_danish_ci,
		contract:     contractor_utf16_danish_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_lithuanian_ci",
		id:           236,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_lithuanian_ci,
		contract:     contractor_utf16_lithuanian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_slovak_ci",
		id:           237,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_slovak_ci,
		contract:     contractor_utf16_czech_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_spanish2_ci",
		id:           238,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_spanish_ci,
		contract:     contractor_utf16_spanish2_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_roman_ci",
		id:           239,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_roman_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_persian_ci",
		id:           240,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_persian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_esperanto_ci",
		id:           241,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_esperanto_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_hungarian_ci",
		id:           242,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_hungarian_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_sinhala_ci",
		id:           243,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_sinhala_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_german2_ci",
		id:           244,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_german2_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_croatian_ci",
		id:           245,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_croatian_ci,
		contract:     contractor_utf16_croatian_ci{},
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_unicode_520_ci",
		id:           246,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_uca_legacy{
		name:         "utf8mb4_vietnamese_ci",
		id:           247,
		charset:      charset.Charset_utf8mb4{},
		weights:      uca.WeightTable_uca400,
		tailoring:    weightTailoring_utf16_vietnamese_ci,
		maxCodepoint: 0xFFFF,
	})
	register(&Collation_uca_legacy{
		name:         "gb18030_unicode_520_ci",
		id:           250,
		charset:      charset.Charset_gb18030{},
		weights:      uca.WeightTable_uca520,
		maxCodepoint: 0x10FFFF,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_0900_ai_ci",
		id:               255,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_de_pb_0900_ai_ci",
		id:               256,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_de_pb_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_is_0900_ai_ci",
		id:               257,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_is_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_lv_0900_ai_ci",
		id:               258,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_lv_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ro_0900_ai_ci",
		id:               259,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_ro_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sl_0900_ai_ci",
		id:               260,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sl_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_pl_0900_ai_ci",
		id:               261,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_pl_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_et_0900_ai_ci",
		id:               262,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_et_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_es_0900_ai_ci",
		id:               263,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_es_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sv_0900_ai_ci",
		id:               264,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sv_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_tr_0900_ai_ci",
		id:               265,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_tr_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_cs_0900_ai_ci",
		id:               266,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_cs_0900_ai_ci,
		contract:         contractor_utf8mb4_cs_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_da_0900_ai_ci",
		id:               267,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_da_0900_ai_ci,
		contract:         contractor_utf8mb4_da_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_lt_0900_ai_ci",
		id:               268,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_lt_0900_ai_ci,
		contract:         contractor_utf8mb4_lt_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sk_0900_ai_ci",
		id:               269,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sk_0900_ai_ci,
		contract:         contractor_utf8mb4_cs_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_es_trad_0900_ai_ci",
		id:               270,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_es_0900_ai_ci,
		contract:         contractor_utf8mb4_es_trad_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_la_0900_ai_ci",
		id:               271,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_la_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_eo_0900_ai_ci",
		id:               273,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_eo_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_hu_0900_ai_ci",
		id:               274,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_hu_0900_ai_ci,
		contract:         contractor_utf8mb4_hu_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_hr_0900_ai_ci",
		id:               275,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_hr_0900_ai_ci,
		contract:         contractor_utf8mb4_hr_0900_ai_ci{},
		reorder:          reorder_utf8mb4_hr_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_vi_0900_ai_ci",
		id:               277,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_vi_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_0900_as_cs",
		id:               278,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_de_pb_0900_as_cs",
		id:               279,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_de_pb_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_is_0900_as_cs",
		id:               280,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_is_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_lv_0900_as_cs",
		id:               281,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_lv_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ro_0900_as_cs",
		id:               282,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_ro_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sl_0900_as_cs",
		id:               283,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sl_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_pl_0900_as_cs",
		id:               284,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_pl_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_et_0900_as_cs",
		id:               285,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_et_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_es_0900_as_cs",
		id:               286,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_es_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sv_0900_as_cs",
		id:               287,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sv_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_tr_0900_as_cs",
		id:               288,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_tr_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_cs_0900_as_cs",
		id:               289,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_cs_0900_ai_ci,
		contract:         contractor_utf8mb4_cs_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_da_0900_as_cs",
		id:               290,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_da_0900_as_cs,
		contract:         contractor_utf8mb4_da_0900_as_cs{},
		upperCaseFirst:   true,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_lt_0900_as_cs",
		id:               291,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_lt_0900_ai_ci,
		contract:         contractor_utf8mb4_lt_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_sk_0900_as_cs",
		id:               292,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_sk_0900_ai_ci,
		contract:         contractor_utf8mb4_cs_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_es_trad_0900_as_cs",
		id:               293,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_es_0900_ai_ci,
		contract:         contractor_utf8mb4_es_trad_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_la_0900_as_cs",
		id:               294,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_la_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_eo_0900_as_cs",
		id:               296,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_eo_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_hu_0900_as_cs",
		id:               297,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_hu_0900_ai_ci,
		contract:         contractor_utf8mb4_hu_0900_ai_ci{},
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_hr_0900_as_cs",
		id:               298,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_hr_0900_ai_ci,
		contract:         contractor_utf8mb4_hr_0900_ai_ci{},
		reorder:          reorder_utf8mb4_hr_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_vi_0900_as_cs",
		id:               300,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		tailoring:        weightTailoring_utf8mb4_vi_0900_as_cs,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ja_0900_as_cs",
		id:               303,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900_ja,
		contract:         contractor_utf8mb4_ja_0900_as_cs{},
		reorder:          reorder_utf8mb4_ja_0900_as_cs,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ja_0900_as_cs_ks",
		id:               304,
		levelsForCompare: 4,
		weights:          uca.WeightTable_uca900_ja,
		contract:         contractor_utf8mb4_ja_0900_as_cs{},
		reorder:          reorder_utf8mb4_ja_0900_as_cs,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_0900_as_ci",
		id:               305,
		levelsForCompare: 2,
		weights:          uca.WeightTable_uca900,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ru_0900_ai_ci",
		id:               306,
		levelsForCompare: 1,
		weights:          uca.WeightTable_uca900,
		reorder:          reorder_utf8mb4_ru_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_ru_0900_as_cs",
		id:               307,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900,
		reorder:          reorder_utf8mb4_ru_0900_ai_ci,
	})
	register(&Collation_utf8mb4_uca_0900{
		name:             "utf8mb4_zh_0900_as_cs",
		id:               308,
		levelsForCompare: 3,
		weights:          uca.WeightTable_uca900_zh,
		contract:         contractor_utf8mb4_zh_0900_as_cs{},
	})
}
