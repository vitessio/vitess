/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"path"
	"strconv"

	"vitess.io/vitess/go/mysql/collations/internal/uca"
	"vitess.io/vitess/go/mysql/collations/internal/uca/tablebuilder"
)

var Output = flag.String("out", "internal/uca", "")

func maketable(w io.Writer, table string, filename string, pages *tablebuilder.EmbeddedPageBuilder, layout uca.TableLayout) {
	var metadata struct {
		Weights map[string][]uint16
	}

	r, err := os.Open(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer r.Close()

	err = json.NewDecoder(r).Decode(&metadata)
	if err != nil {
		log.Fatal(err)
	}

	tb := tablebuilder.NewTableBuilder(table, pages)

	for key, weights := range metadata.Weights {
		r, err := strconv.ParseInt(key[2:], 16, 32)
		if err != nil {
			log.Fatal(err)
		}
		tb.Add(rune(r), weights)
	}

	tb.DumpTables(w, layout)
}

func main() {
	flag.Parse()

	var buf bytes.Buffer
	var pages = tablebuilder.NewPageBuilder()

	fmt.Fprintf(&buf, "// DO NOT MODIFY: this file is autogenerated by maketables.go\n\n")
	fmt.Fprintf(&buf, "package uca\n\n")

	fmt.Fprintf(&buf, "import (\n")
	fmt.Fprintf(&buf, "_ \"embed\"\n")
	fmt.Fprintf(&buf, "\"reflect\"\n")
	fmt.Fprintf(&buf, "\"unsafe\"\n")
	fmt.Fprintf(&buf, ")\n\n")

	maketable(&buf, "uca900", "testdata/mysqldata/utf8mb4_0900_ai_ci.json", pages, uca.TableLayout_uca900{})
	maketable(&buf, "uca900_ja", "testdata/mysqldata/utf8mb4_ja_0900_as_cs.json", pages, uca.TableLayout_uca900{})
	maketable(&buf, "uca900_zh", "testdata/mysqldata/utf8mb4_zh_0900_as_cs.json", pages, uca.TableLayout_uca900{})

	maketable(&buf, "uca400", "testdata/mysqldata/utf8mb4_unicode_ci.json", pages, uca.TableLayout_uca_legacy{})
	maketable(&buf, "uca520", "testdata/mysqldata/utf8mb4_unicode_520_ci.json", pages, uca.TableLayout_uca_legacy{})

	pages.WriteTrailer(&buf, "tables_uca.bin")

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Fprintf(os.Stderr, "source:\n%s\n", buf.String())
		log.Fatalf("failed to format generated code: %v", err)
	}

	output := path.Join(*Output, "tables_uca.go")
	err = os.WriteFile(output, formatted, 0644)
	if err != nil {
		log.Fatalf("failed to generate %q: %v", output, err)
	}

	log.Printf("written %s (%.02fkb)", output, float64(len(formatted))/1024.0)

	output = path.Join(*Output, "tables_uca.bin")
	embed := pages.EmbedData()
	err = os.WriteFile(output, embed, 0644)
	if err != nil {
		log.Fatalf("failed to generate %q: %v", output, err)
	}

	log.Printf("written %s (%.02fkb)", output, float64(len(embed))/1024.0)
}
