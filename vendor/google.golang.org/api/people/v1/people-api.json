{
 "kind": "discovery#restDescription",
 "etag": "\"bRFOOrZKfO9LweMbPqu0kcu6De8/tzwJjoO4XDFgwNQjmiM8lPsFMzA\"",
 "discoveryVersion": "v1",
 "id": "people:v1",
 "name": "people",
 "version": "v1",
 "revision": "20160210",
 "title": "Google People API",
 "description": "The Google People API service gives access to information about profiles and contacts.",
 "ownerDomain": "google.com",
 "ownerName": "Google",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/search-16.gif",
  "x32": "http://www.google.com/images/icons/product/search-32.gif"
 },
 "documentationLink": "https://developers.google.com/people/",
 "protocol": "rest",
 "baseUrl": "https://people.googleapis.com/",
 "basePath": "",
 "rootUrl": "https://people.googleapis.com/",
 "servicePath": "",
 "batchPath": "batch",
 "version_module": true,
 "parameters": {
  "access_token": {
   "type": "string",
   "description": "OAuth access token.",
   "location": "query"
  },
  "alt": {
   "type": "string",
   "description": "Data format for response.",
   "default": "json",
   "enumDescriptions": [
    "Responses with Content-Type of application/json",
    "Media download with context-dependent Content-Type",
    "Responses with Content-Type of application/x-protobuf"
   ],
   "location": "query"
  },
  "bearer_token": {
   "type": "string",
   "description": "OAuth bearer token.",
   "location": "query"
  },
  "callback": {
   "type": "string",
   "description": "JSONP",
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "pp": {
   "type": "boolean",
   "description": "Pretty-print response.",
   "default": "true",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
   "location": "query"
  },
  "upload_protocol": {
   "type": "string",
   "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
   "location": "query"
  },
  "uploadType": {
   "type": "string",
   "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
   "location": "query"
  },
  "$.xgafv": {
   "type": "string",
   "description": "V1 error format.",
   "enumDescriptions": [
    "v1 error format",
    "v2 error format"
   ],
   "location": "query"
  }
 },
 "auth": {
  "oauth2": {
   "scopes": {
    "https://www.googleapis.com/auth/contacts": {
     "description": "Manage your contacts"
    },
    "https://www.googleapis.com/auth/contacts.readonly": {
     "description": "View your contacts"
    },
    "https://www.googleapis.com/auth/plus.login": {
     "description": "Know your basic profile info and list of people in your circles."
    },
    "https://www.googleapis.com/auth/user.addresses.read": {
     "description": "View your street addresses"
    },
    "https://www.googleapis.com/auth/user.birthday.read": {
     "description": "View your complete date of birth"
    },
    "https://www.googleapis.com/auth/user.emails.read": {
     "description": "View your email addresses"
    },
    "https://www.googleapis.com/auth/user.phonenumbers.read": {
     "description": "View your phone numbers"
    },
    "https://www.googleapis.com/auth/userinfo.email": {
     "description": "View your email address"
    },
    "https://www.googleapis.com/auth/userinfo.profile": {
     "description": "View your basic profile info"
    }
   }
  }
 },
 "schemas": {
  "Person": {
   "id": "Person",
   "type": "object",
   "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Fields other than IDs, metadata, and group memberships are user-edited. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
   "properties": {
    "resourceName": {
     "type": "string",
     "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters. Always starts with `people/`."
    },
    "etag": {
     "type": "string",
     "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation."
    },
    "metadata": {
     "$ref": "PersonMetadata",
     "description": "Metadata about the person."
    },
    "locales": {
     "type": "array",
     "description": "The person's locale preferences.",
     "items": {
      "$ref": "Locale"
     }
    },
    "names": {
     "type": "array",
     "description": "The person's names.",
     "items": {
      "$ref": "Name"
     }
    },
    "nicknames": {
     "type": "array",
     "description": "The person's nicknames.",
     "items": {
      "$ref": "Nickname"
     }
    },
    "coverPhotos": {
     "type": "array",
     "description": "The person's cover photos.",
     "items": {
      "$ref": "CoverPhoto"
     }
    },
    "photos": {
     "type": "array",
     "description": "The person's photos.",
     "items": {
      "$ref": "Photo"
     }
    },
    "genders": {
     "type": "array",
     "description": "The person's genders.",
     "items": {
      "$ref": "Gender"
     }
    },
    "ageRange": {
     "type": "string",
     "description": "The person's age range.",
     "enum": [
      "AGE_RANGE_UNSPECIFIED",
      "LESS_THAN_EIGHTEEN",
      "EIGHTEEN_TO_TWENTY",
      "TWENTY_ONE_OR_OLDER"
     ]
    },
    "birthdays": {
     "type": "array",
     "description": "The person's birthdays.",
     "items": {
      "$ref": "Birthday"
     }
    },
    "events": {
     "type": "array",
     "description": "The person's events.",
     "items": {
      "$ref": "Event"
     }
    },
    "addresses": {
     "type": "array",
     "description": "The person's street addresses.",
     "items": {
      "$ref": "Address"
     }
    },
    "residences": {
     "type": "array",
     "description": "The person's residences.",
     "items": {
      "$ref": "Residence"
     }
    },
    "emailAddresses": {
     "type": "array",
     "description": "The person's email addresses.",
     "items": {
      "$ref": "EmailAddress"
     }
    },
    "phoneNumbers": {
     "type": "array",
     "description": "The person's phone numbers.",
     "items": {
      "$ref": "PhoneNumber"
     }
    },
    "imClients": {
     "type": "array",
     "description": "The person's instant messaging clients.",
     "items": {
      "$ref": "ImClient"
     }
    },
    "taglines": {
     "type": "array",
     "description": "The person's taglines.",
     "items": {
      "$ref": "Tagline"
     }
    },
    "biographies": {
     "type": "array",
     "description": "The person's biographies.",
     "items": {
      "$ref": "Biography"
     }
    },
    "urls": {
     "type": "array",
     "description": "The person's associated URLs.",
     "items": {
      "$ref": "Url"
     }
    },
    "organizations": {
     "type": "array",
     "description": "The person's past or current organizations.",
     "items": {
      "$ref": "Organization"
     }
    },
    "occupations": {
     "type": "array",
     "description": "The person's occupations.",
     "items": {
      "$ref": "Occupation"
     }
    },
    "interests": {
     "type": "array",
     "description": "The person's interests.",
     "items": {
      "$ref": "Interest"
     }
    },
    "skills": {
     "type": "array",
     "description": "The person's skills.",
     "items": {
      "$ref": "Skill"
     }
    },
    "braggingRights": {
     "type": "array",
     "description": "The person's bragging rights.",
     "items": {
      "$ref": "BraggingRights"
     }
    },
    "relations": {
     "type": "array",
     "description": "The person's relations.",
     "items": {
      "$ref": "Relation"
     }
    },
    "relationshipInterests": {
     "type": "array",
     "description": "The kind of relationship the person is looking for.",
     "items": {
      "$ref": "RelationshipInterest"
     }
    },
    "relationshipStatuses": {
     "type": "array",
     "description": "The person's relationship statuses.",
     "items": {
      "$ref": "RelationshipStatus"
     }
    },
    "memberships": {
     "type": "array",
     "description": "The person's group memberships.",
     "items": {
      "$ref": "Membership"
     }
    }
   }
  },
  "PersonMetadata": {
   "id": "PersonMetadata",
   "type": "object",
   "description": "Metadata about a person.",
   "properties": {
    "sources": {
     "type": "array",
     "description": "The sources of data for the person.",
     "items": {
      "$ref": "Source"
     }
    },
    "previousResourceNames": {
     "type": "array",
     "description": "Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
     "items": {
      "type": "string"
     }
    },
    "deleted": {
     "type": "boolean",
     "description": "True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token."
    },
    "objectType": {
     "type": "string",
     "description": "The type of the person object.",
     "enum": [
      "OBJECT_TYPE_UNSPECIFIED",
      "PERSON",
      "PAGE"
     ]
    }
   }
  },
  "Source": {
   "id": "Source",
   "type": "object",
   "description": "The source of a field.",
   "properties": {
    "type": {
     "type": "string",
     "description": "The source type.",
     "enum": [
      "OTHER",
      "ACCOUNT",
      "PROFILE",
      "DOMAIN_PROFILE",
      "CONTACT"
     ]
    },
    "id": {
     "type": "string",
     "description": "A unique identifier within the source type generated by the server."
    }
   }
  },
  "Locale": {
   "id": "Locale",
   "type": "object",
   "description": "A person's locale preference.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the locale."
    },
    "value": {
     "type": "string",
     "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale."
    }
   }
  },
  "FieldMetadata": {
   "id": "FieldMetadata",
   "type": "object",
   "description": "Metadata about a field.",
   "properties": {
    "primary": {
     "type": "boolean",
     "description": "True if the field is the primary field; false if the field is a secondary field."
    },
    "verified": {
     "type": "boolean",
     "description": "True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person."
    },
    "source": {
     "$ref": "Source",
     "description": "The source of the field."
    }
   }
  },
  "Name": {
   "id": "Name",
   "type": "object",
   "description": "A person's name. If the name is a mononym, the family name is empty.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the name."
    },
    "displayName": {
     "type": "string",
     "description": "The display name formatted according to the locale specified by the viewer's account or the Accept-Language HTTP header."
    },
    "familyName": {
     "type": "string",
     "description": "The family name."
    },
    "givenName": {
     "type": "string",
     "description": "The given name."
    },
    "middleName": {
     "type": "string",
     "description": "The middle name(s)."
    },
    "honorificPrefix": {
     "type": "string",
     "description": "The honorific prefixes, such as `Mrs.` or `Dr.`"
    },
    "honorificSuffix": {
     "type": "string",
     "description": "The honorific suffixes, such as `Jr.`"
    },
    "phoneticFamilyName": {
     "type": "string",
     "description": "The family name spelled as it sounds."
    },
    "phoneticGivenName": {
     "type": "string",
     "description": "The given name spelled as it sounds."
    },
    "phoneticMiddleName": {
     "type": "string",
     "description": "The middle name(s) spelled as they sound."
    },
    "phoneticHonorificPrefix": {
     "type": "string",
     "description": "The honorific prefixes spelled as they sound."
    },
    "phoneticHonorificSuffix": {
     "type": "string",
     "description": "The honorific suffixes spelled as they sound."
    }
   }
  },
  "Nickname": {
   "id": "Nickname",
   "type": "object",
   "description": "A person's nickname.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the nickname."
    },
    "value": {
     "type": "string",
     "description": "The nickname."
    },
    "type": {
     "type": "string",
     "description": "The type of the nickname.",
     "enum": [
      "DEFAULT",
      "MAIDEN_NAME",
      "INITIALS",
      "GPLUS",
      "OTHER_NAME"
     ]
    }
   }
  },
  "CoverPhoto": {
   "id": "CoverPhoto",
   "type": "object",
   "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the cover photo."
    },
    "url": {
     "type": "string",
     "description": "The URL of the cover photo."
    },
    "default": {
     "type": "boolean",
     "description": "True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo."
    }
   }
  },
  "Photo": {
   "id": "Photo",
   "type": "object",
   "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the photo."
    },
    "url": {
     "type": "string",
     "description": "The URL of the photo."
    }
   }
  },
  "Gender": {
   "id": "Gender",
   "type": "object",
   "description": "A person's gender.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the gender."
    },
    "value": {
     "type": "string",
     "description": "The gender for the person. The gender can be custom or predefined. Possible values include, but are not limited to, the following: * `male` * `female` * `other` * `unknown`"
    },
    "formattedValue": {
     "type": "string",
     "description": "The read-only value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "Birthday": {
   "id": "Birthday",
   "type": "object",
   "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the birthday."
    },
    "date": {
     "$ref": "Date",
     "description": "The date of the birthday."
    },
    "text": {
     "type": "string",
     "description": "A free-form string representing the user's birthday."
    }
   }
  },
  "Date": {
   "id": "Date",
   "type": "object",
   "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The day may be 0 to represent a year and month where the day is not significant. The year may be 0 to represent a month and day independent of year; for example, anniversary date.",
   "properties": {
    "year": {
     "type": "integer",
     "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
     "format": "int32"
    },
    "month": {
     "type": "integer",
     "description": "Month of year. Must be from 1 to 12.",
     "format": "int32"
    },
    "day": {
     "type": "integer",
     "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.",
     "format": "int32"
    }
   }
  },
  "Event": {
   "id": "Event",
   "type": "object",
   "description": "An event related to the person.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the event."
    },
    "date": {
     "$ref": "Date",
     "description": "The date of the event."
    },
    "type": {
     "type": "string",
     "description": "The type of the event. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `anniversary` * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "Address": {
   "id": "Address",
   "type": "object",
   "description": "A person's physical address. May be a P.O. box or street address. All fields are optional.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the address."
    },
    "formattedValue": {
     "type": "string",
     "description": "The read-only value of the address formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    },
    "type": {
     "type": "string",
     "description": "The type of the address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    },
    "poBox": {
     "type": "string",
     "description": "The P.O. box of the address."
    },
    "streetAddress": {
     "type": "string",
     "description": "The street address."
    },
    "extendedAddress": {
     "type": "string",
     "description": "The extended address of the address; for example, the apartment number."
    },
    "city": {
     "type": "string",
     "description": "The city of the address."
    },
    "region": {
     "type": "string",
     "description": "The region of the address; for example, the state or province."
    },
    "postalCode": {
     "type": "string",
     "description": "The postal code of the address."
    },
    "country": {
     "type": "string",
     "description": "The country of the address."
    },
    "countryCode": {
     "type": "string",
     "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address."
    }
   }
  },
  "Residence": {
   "id": "Residence",
   "type": "object",
   "description": "A person's past or current residence.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the residence."
    },
    "value": {
     "type": "string",
     "description": "The address of the residence."
    },
    "current": {
     "type": "boolean",
     "description": "True if the residence is the person's current residence; false if the residence is a past residence."
    }
   }
  },
  "EmailAddress": {
   "id": "EmailAddress",
   "type": "object",
   "description": "A person's email address.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the email address."
    },
    "value": {
     "type": "string",
     "description": "The email address."
    },
    "type": {
     "type": "string",
     "description": "The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "PhoneNumber": {
   "id": "PhoneNumber",
   "type": "object",
   "description": "A person's phone number.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the phone number."
    },
    "value": {
     "type": "string",
     "description": "The phone number."
    },
    "canonicalForm": {
     "type": "string",
     "description": "The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number."
    },
    "type": {
     "type": "string",
     "description": "The type of the phone number. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the phone number translated and formatted in the viewer's account locale or the the `Accept-Language` HTTP header locale."
    }
   }
  },
  "ImClient": {
   "id": "ImClient",
   "type": "object",
   "description": "A person's instant messaging client.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the IM client."
    },
    "username": {
     "type": "string",
     "description": "The user name used in the IM client."
    },
    "type": {
     "type": "string",
     "description": "The type of the IM client. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    },
    "protocol": {
     "type": "string",
     "description": "The protocol of the IM client. The protocol can be custom or predefined. Possible values include, but are not limited to, the following: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`"
    },
    "formattedProtocol": {
     "type": "string",
     "description": "The read-only protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "Tagline": {
   "id": "Tagline",
   "type": "object",
   "description": "A brief one-line description of the person.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the tagline."
    },
    "value": {
     "type": "string",
     "description": "The tagline."
    }
   }
  },
  "Biography": {
   "id": "Biography",
   "type": "object",
   "description": "A person's short biography.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the biography."
    },
    "value": {
     "type": "string",
     "description": "The short biography."
    }
   }
  },
  "Url": {
   "id": "Url",
   "type": "object",
   "description": "A person's associated URLs.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the URL."
    },
    "value": {
     "type": "string",
     "description": "The URL."
    },
    "type": {
     "type": "string",
     "description": "The type of the URL. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Google+ application. * `other`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "Organization": {
   "id": "Organization",
   "type": "object",
   "description": "A person's past or current organization. Overlapping date ranges are permitted.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the organization."
    },
    "type": {
     "type": "string",
     "description": "The type of the organization. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `work` * `school`"
    },
    "formattedType": {
     "type": "string",
     "description": "The read-only type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    },
    "startDate": {
     "$ref": "Date",
     "description": "The start date when the person joined the organization."
    },
    "endDate": {
     "$ref": "Date",
     "description": "The end date when the person left the organization."
    },
    "current": {
     "type": "boolean",
     "description": "True if the organization is the person's current organization; false if the organization is a past organization."
    },
    "name": {
     "type": "string",
     "description": "The name of the organization."
    },
    "phoneticName": {
     "type": "string",
     "description": "The phonetic name of the organization."
    },
    "department": {
     "type": "string",
     "description": "The person's department at the organization."
    },
    "title": {
     "type": "string",
     "description": "The person's job title at the organization."
    },
    "jobDescription": {
     "type": "string",
     "description": "The person's job description at the organization."
    },
    "symbol": {
     "type": "string",
     "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym."
    },
    "domain": {
     "type": "string",
     "description": "The domain name associated with the organization; for example, `google.com`."
    },
    "location": {
     "type": "string",
     "description": "The location of the organization office the person works at."
    }
   }
  },
  "Occupation": {
   "id": "Occupation",
   "type": "object",
   "description": "A person's occupation.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the occupation."
    },
    "value": {
     "type": "string",
     "description": "The occupation; for example, `carpenter`."
    }
   }
  },
  "Interest": {
   "id": "Interest",
   "type": "object",
   "description": "One of the person's interests.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the interest."
    },
    "value": {
     "type": "string",
     "description": "The interest; for example, `stargazing`."
    }
   }
  },
  "Skill": {
   "id": "Skill",
   "type": "object",
   "description": "A skill that the person has.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the skill."
    },
    "value": {
     "type": "string",
     "description": "The skill; for example, `underwater basket weaving`."
    }
   }
  },
  "BraggingRights": {
   "id": "BraggingRights",
   "type": "object",
   "description": "A person's bragging rights.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the bragging rights."
    },
    "value": {
     "type": "string",
     "description": "The bragging rights; for example, `climbed mount everest`."
    }
   }
  },
  "Relation": {
   "id": "Relation",
   "type": "object",
   "description": "A person's relation to another person.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the relation."
    },
    "person": {
     "type": "string",
     "description": "The name of the other person this relation refers to."
    },
    "type": {
     "type": "string",
     "description": "The person's relation to the other person. The type can be custom or predefined. Possible values include, but are not limited to, the following values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`"
    },
    "formattedType": {
     "type": "string",
     "description": "The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header."
    }
   }
  },
  "RelationshipInterest": {
   "id": "RelationshipInterest",
   "type": "object",
   "description": "The kind of relationship the person is looking for.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the relationship interest."
    },
    "value": {
     "type": "string",
     "description": "The kind of relationship the person is looking for. The value can be custom or predefined. Possible values include, but are not limited to, the following values: * `friend` * `date` * `relationship` * `networking`"
    },
    "formattedValue": {
     "type": "string",
     "description": "The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header."
    }
   }
  },
  "RelationshipStatus": {
   "id": "RelationshipStatus",
   "type": "object",
   "description": "A person's relationship status.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the relationship status."
    },
    "value": {
     "type": "string",
     "description": "The relationship status. The value can be custom or predefined. Possible values include, but are not limited to, the following: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`"
    },
    "formattedValue": {
     "type": "string",
     "description": "The read-only value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
    }
   }
  },
  "Membership": {
   "id": "Membership",
   "type": "object",
   "description": "A person's membership in a group.",
   "properties": {
    "metadata": {
     "$ref": "FieldMetadata",
     "description": "Metadata about the membership."
    },
    "contactGroupMembership": {
     "$ref": "ContactGroupMembership",
     "description": "The contact group membership."
    },
    "domainMembership": {
     "$ref": "DomainMembership",
     "description": "The domain membership."
    }
   }
  },
  "ContactGroupMembership": {
   "id": "ContactGroupMembership",
   "type": "object",
   "description": "A Google contact group membership.",
   "properties": {
    "contactGroupId": {
     "type": "string",
     "description": "The contact group ID for the contact group membership. The contact group ID can be custom or predefined. Possible values include, but are not limited to, the following: * `myContacts` * `starred` * A numerical ID for user-created groups."
    }
   }
  },
  "DomainMembership": {
   "id": "DomainMembership",
   "type": "object",
   "description": "A Google Apps Domain membership.",
   "properties": {
    "inViewerDomain": {
     "type": "boolean",
     "description": "True if the person is in the viewer's Google Apps domain."
    }
   }
  },
  "GetPeopleResponse": {
   "id": "GetPeopleResponse",
   "type": "object",
   "properties": {
    "responses": {
     "type": "array",
     "description": "The response for each requested resource name.",
     "items": {
      "$ref": "PersonResponse"
     }
    }
   }
  },
  "PersonResponse": {
   "id": "PersonResponse",
   "type": "object",
   "description": "The response for a single person",
   "properties": {
    "httpStatusCode": {
     "type": "integer",
     "description": "[HTTP 1.1 status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
     "format": "int32"
    },
    "person": {
     "$ref": "Person",
     "description": "The person."
    },
    "requestedResourceName": {
     "type": "string",
     "description": "The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL."
    }
   }
  },
  "ListConnectionsResponse": {
   "id": "ListConnectionsResponse",
   "type": "object",
   "properties": {
    "connections": {
     "type": "array",
     "description": "The list of people that the requestor is connected to.",
     "items": {
      "$ref": "Person"
     }
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used to retrieve the next page of results."
    },
    "nextSyncToken": {
     "type": "string",
     "description": "The token that can be used to retrieve changes since the last request."
    }
   }
  }
 },
 "resources": {
  "people": {
   "methods": {
    "get": {
     "id": "people.people.get",
     "path": "v1/{+resourceName}",
     "httpMethod": "GET",
     "description": "Provides information about a person resource for a resource name. Use `people/me` to indicate the authenticated user.",
     "parameters": {
      "resourceName": {
       "type": "string",
       "description": "The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about any user, specify the resource name that identifies the user, such as the resource names returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
       "required": true,
       "pattern": "^people/[^/]*$",
       "location": "path"
      },
      "requestMask.includeField": {
       "type": "string",
       "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "resourceName"
     ],
     "response": {
      "$ref": "Person"
     },
     "scopes": [
      "https://www.googleapis.com/auth/contacts",
      "https://www.googleapis.com/auth/contacts.readonly",
      "https://www.googleapis.com/auth/plus.login",
      "https://www.googleapis.com/auth/user.addresses.read",
      "https://www.googleapis.com/auth/user.birthday.read",
      "https://www.googleapis.com/auth/user.emails.read",
      "https://www.googleapis.com/auth/user.phonenumbers.read",
      "https://www.googleapis.com/auth/userinfo.email",
      "https://www.googleapis.com/auth/userinfo.profile"
     ]
    },
    "getBatchGet": {
     "id": "people.people.getBatchGet",
     "path": "v1/people:batchGet",
     "httpMethod": "GET",
     "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user.",
     "parameters": {
      "resourceNames": {
       "type": "string",
       "description": "The resource name, such as one returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list), of one of the people to provide information about. You can include this parameter up to 50 times in one request.",
       "repeated": true,
       "location": "query"
      },
      "requestMask.includeField": {
       "type": "string",
       "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
       "location": "query"
      }
     },
     "response": {
      "$ref": "GetPeopleResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/contacts",
      "https://www.googleapis.com/auth/contacts.readonly",
      "https://www.googleapis.com/auth/plus.login",
      "https://www.googleapis.com/auth/user.addresses.read",
      "https://www.googleapis.com/auth/user.birthday.read",
      "https://www.googleapis.com/auth/user.emails.read",
      "https://www.googleapis.com/auth/user.phonenumbers.read",
      "https://www.googleapis.com/auth/userinfo.email",
      "https://www.googleapis.com/auth/userinfo.profile"
     ]
    }
   },
   "resources": {
    "connections": {
     "methods": {
      "list": {
       "id": "people.people.connections.list",
       "path": "v1/{+resourceName}/connections",
       "httpMethod": "GET",
       "description": "Provides a list of the authenticated user's contacts merged with any linked profiles.",
       "parameters": {
        "resourceName": {
         "type": "string",
         "description": "The resource name to return connections for. Only `people/me` is valid.",
         "required": true,
         "pattern": "^people/[^/]*$",
         "location": "path"
        },
        "pageToken": {
         "type": "string",
         "description": "The token of the page to be returned.",
         "location": "query"
        },
        "pageSize": {
         "type": "integer",
         "description": "The number of connections to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100.",
         "format": "int32",
         "location": "query"
        },
        "sortOrder": {
         "type": "string",
         "description": "The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.",
         "enum": [
          "LAST_MODIFIED_ASCENDING",
          "FIRST_NAME_ASCENDING",
          "LAST_NAME_ASCENDING"
         ],
         "location": "query"
        },
        "syncToken": {
         "type": "string",
         "description": "A sync token, returned by a previous call to `people.connections.list`. Only resources changed since the sync token was created are returned.",
         "location": "query"
        },
        "requestMask.includeField": {
         "type": "string",
         "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
         "location": "query"
        }
       },
       "parameterOrder": [
        "resourceName"
       ],
       "response": {
        "$ref": "ListConnectionsResponse"
       },
       "scopes": [
        "https://www.googleapis.com/auth/contacts",
        "https://www.googleapis.com/auth/contacts.readonly"
       ]
      }
     }
    }
   }
  }
 }
}
