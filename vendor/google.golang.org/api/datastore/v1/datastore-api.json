{
  "id": "datastore:v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "description": "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.\n",
  "protocol": "rest",
  "title": "Google Cloud Datastore API",
  "resources": {
    "projects": {
      "methods": {
        "runQuery": {
          "id": "datastore.projects.runQuery",
          "response": {
            "$ref": "RunQueryResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Queries for entities.",
          "request": {
            "$ref": "RunQueryRequest"
          },
          "flatPath": "v1/projects/{projectId}:runQuery",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:runQuery",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "beginTransaction": {
          "id": "datastore.projects.beginTransaction",
          "response": {
            "$ref": "BeginTransactionResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Begins a new transaction.",
          "request": {
            "$ref": "BeginTransactionRequest"
          },
          "flatPath": "v1/projects/{projectId}:beginTransaction",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:beginTransaction",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "allocateIds": {
          "id": "datastore.projects.allocateIds",
          "response": {
            "$ref": "AllocateIdsResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Allocates IDs for the given keys, which is useful for referencing an entity\nbefore it is inserted.",
          "request": {
            "$ref": "AllocateIdsRequest"
          },
          "flatPath": "v1/projects/{projectId}:allocateIds",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:allocateIds",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "lookup": {
          "id": "datastore.projects.lookup",
          "response": {
            "$ref": "LookupResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Looks up entities by key.",
          "request": {
            "$ref": "LookupRequest"
          },
          "flatPath": "v1/projects/{projectId}:lookup",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:lookup",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "commit": {
          "id": "datastore.projects.commit",
          "response": {
            "$ref": "CommitResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Commits a transaction, optionally creating, deleting or modifying some\nentities.",
          "request": {
            "$ref": "CommitRequest"
          },
          "flatPath": "v1/projects/{projectId}:commit",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:commit",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "rollback": {
          "id": "datastore.projects.rollback",
          "response": {
            "$ref": "RollbackResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Rolls back a transaction.",
          "request": {
            "$ref": "RollbackRequest"
          },
          "flatPath": "v1/projects/{projectId}:rollback",
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:rollback",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        }
      }
    }
  },
  "schemas": {
    "Value": {
      "description": "A message that can hold any of the supported value types and associated\nmetadata.",
      "type": "object",
      "properties": {
        "stringValue": {
          "description": "A UTF-8 encoded string value.\nWhen `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.\nOtherwise, may be set to at least 1,000,000 bytes.",
          "type": "string"
        },
        "arrayValue": {
          "description": "An array value.\nCannot contain another array value.\nA `Value` instance that sets field `array_value` must not set fields\n`meaning` or `exclude_from_indexes`.",
          "$ref": "ArrayValue"
        },
        "entityValue": {
          "description": "An entity value.\n\n- May have no key.\n- May have a key with an incomplete key path.\n- May have a reserved/read-only key.",
          "$ref": "Entity"
        },
        "meaning": {
          "description": "The `meaning` field should only be populated for backwards compatibility.",
          "type": "integer",
          "format": "int32"
        },
        "integerValue": {
          "description": "An integer value.",
          "type": "string",
          "format": "int64"
        },
        "doubleValue": {
          "description": "A double value.",
          "type": "number",
          "format": "double"
        },
        "blobValue": {
          "description": "A blob value.\nMay have at most 1,000,000 bytes.\nWhen `exclude_from_indexes` is false, may have at most 1500 bytes.\nIn JSON requests, must be base64-encoded.",
          "type": "string",
          "format": "byte"
        },
        "geoPointValue": {
          "description": "A geo point value representing a point on the surface of Earth.",
          "$ref": "LatLng"
        },
        "nullValue": {
          "description": "A null value.",
          "enum": [
            "NULL_VALUE"
          ],
          "enumDescriptions": [
            "Null value."
          ],
          "type": "string"
        },
        "booleanValue": {
          "description": "A boolean value.",
          "type": "boolean"
        },
        "keyValue": {
          "description": "A key value.",
          "$ref": "Key"
        },
        "excludeFromIndexes": {
          "description": "If the value should be excluded from all indexes including those defined\nexplicitly.",
          "type": "boolean"
        },
        "timestampValue": {
          "description": "A timestamp value.\nWhen stored in the Datastore, precise only to microseconds;\nany additional precision is rounded down.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "Value"
    },
    "ReadOptions": {
      "description": "The options shared by read requests.",
      "type": "object",
      "properties": {
        "transaction": {
          "description": "The identifier of the transaction in which to read. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        },
        "readConsistency": {
          "description": "The non-transactional read consistency to use.\nCannot be set to `STRONG` for global queries.",
          "enum": [
            "READ_CONSISTENCY_UNSPECIFIED",
            "STRONG",
            "EVENTUAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Strong consistency.",
            "Eventual consistency."
          ],
          "type": "string"
        }
      },
      "id": "ReadOptions"
    },
    "PropertyOrder": {
      "description": "The desired order for a specific property.",
      "type": "object",
      "properties": {
        "direction": {
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Ascending.",
            "Descending."
          ],
          "type": "string"
        },
        "property": {
          "description": "The property to order by.",
          "$ref": "PropertyReference"
        }
      },
      "id": "PropertyOrder"
    },
    "CommitRequest": {
      "description": "The request for Datastore.Commit.",
      "type": "object",
      "properties": {
        "transaction": {
          "description": "The identifier of the transaction associated with the commit. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        },
        "mode": {
          "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
          "enum": [
            "MODE_UNSPECIFIED",
            "TRANSACTIONAL",
            "NON_TRANSACTIONAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Transactional: The mutations are either all applied, or none are applied.\nLearn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).",
            "Non-transactional: The mutations may not apply as all or none."
          ],
          "type": "string"
        },
        "mutations": {
          "description": "The mutations to perform.\n\nWhen mode is `TRANSACTIONAL`, mutations affecting a single entity are\napplied in order. The following sequences of mutations affecting a single\nentity are not permitted in a single `Commit` request:\n\n- `insert` followed by `insert`\n- `update` followed by `insert`\n- `upsert` followed by `insert`\n- `delete` followed by `update`\n\nWhen mode is `NON_TRANSACTIONAL`, no two mutations may affect a single\nentity.",
          "type": "array",
          "items": {
            "$ref": "Mutation"
          }
        }
      },
      "id": "CommitRequest"
    },
    "Query": {
      "description": "A query for entities.",
      "type": "object",
      "properties": {
        "limit": {
          "description": "The maximum number of results to return. Applies after all other\nconstraints. Optional.\nUnspecified is interpreted as no limit.\nMust be \u003e= 0 if specified.",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "description": "The filter to apply.",
          "$ref": "Filter"
        },
        "endCursor": {
          "description": "An ending point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "type": "string",
          "format": "byte"
        },
        "distinctOn": {
          "description": "The properties to make distinct. The query results will contain the first\nresult for each distinct combination of values for the given properties\n(if empty, all results are returned).",
          "type": "array",
          "items": {
            "$ref": "PropertyReference"
          }
        },
        "offset": {
          "description": "The number of results to skip. Applies before limit, but after all other\nconstraints. Optional. Must be \u003e= 0 if specified.",
          "type": "integer",
          "format": "int32"
        },
        "projection": {
          "description": "The projection to return. Defaults to returning all properties.",
          "type": "array",
          "items": {
            "$ref": "Projection"
          }
        },
        "order": {
          "description": "The order to apply to the query results (if empty, order is unspecified).",
          "type": "array",
          "items": {
            "$ref": "PropertyOrder"
          }
        },
        "startCursor": {
          "description": "A starting point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "type": "string",
          "format": "byte"
        },
        "kind": {
          "description": "The kinds to query (if empty, returns entities of all kinds).\nCurrently at most 1 kind may be specified.",
          "type": "array",
          "items": {
            "$ref": "KindExpression"
          }
        }
      },
      "id": "Query"
    },
    "RollbackRequest": {
      "description": "The request for Datastore.Rollback.",
      "type": "object",
      "properties": {
        "transaction": {
          "description": "The transaction identifier, returned by a call to\nDatastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "RollbackRequest"
    },
    "EntityResult": {
      "description": "The result of fetching an entity from Datastore.",
      "type": "object",
      "properties": {
        "cursor": {
          "description": "A cursor that points to the position after the result entity.\nSet only when the `EntityResult` is part of a `QueryResultBatch` message.",
          "type": "string",
          "format": "byte"
        },
        "entity": {
          "description": "The resulting entity.",
          "$ref": "Entity"
        },
        "version": {
          "description": "The version of the entity, a strictly positive number that monotonically\nincreases with changes to the entity.\n\nThis field is set for `FULL` entity\nresults.\n\nFor missing entities in `LookupResponse`, this\nis the version of the snapshot that was used to look up the entity, and it\nis always set except for eventually consistent reads.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "EntityResult"
    },
    "GqlQueryParameter": {
      "description": "A binding parameter for a GQL query.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A value parameter.",
          "$ref": "Value"
        },
        "cursor": {
          "description": "A query cursor. Query cursors are returned in query\nresult batches.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "GqlQueryParameter"
    },
    "ArrayValue": {
      "description": "An array value.",
      "type": "object",
      "properties": {
        "values": {
          "description": "Values in the array.\nThe order of this array may not be preserved if it contains a mix of\nindexed and unindexed values.",
          "type": "array",
          "items": {
            "$ref": "Value"
          }
        }
      },
      "id": "ArrayValue"
    },
    "Filter": {
      "description": "A holder for any type of filter.",
      "type": "object",
      "properties": {
        "propertyFilter": {
          "description": "A filter on a property.",
          "$ref": "PropertyFilter"
        },
        "compositeFilter": {
          "description": "A composite filter.",
          "$ref": "CompositeFilter"
        }
      },
      "id": "Filter"
    },
    "BeginTransactionResponse": {
      "description": "The response for Datastore.BeginTransaction.",
      "type": "object",
      "properties": {
        "transaction": {
          "description": "The transaction identifier (always present).",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "BeginTransactionResponse"
    },
    "PartitionId": {
      "description": "A partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty.\n\nA partition ID contains several dimensions:\nproject ID and namespace ID.\n\nPartition dimensions:\n\n- May be `\"\"`.\n- Must be valid UTF-8 bytes.\n- Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`\nIf the value of any dimension matches regex `__.*__`, the partition is\nreserved/read-only.\nA reserved/read-only partition ID is forbidden in certain documented\ncontexts.\n\nForeign partition IDs (in which the project ID does\nnot match the context project ID ) are discouraged.\nReads and writes of foreign partition IDs may fail if the project is not in an active state.",
      "type": "object",
      "properties": {
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        },
        "projectId": {
          "description": "The ID of the project to which the entities belong.",
          "type": "string"
        }
      },
      "id": "PartitionId"
    },
    "QueryResultBatch": {
      "description": "A batch of results produced by a query.",
      "type": "object",
      "properties": {
        "snapshotVersion": {
          "description": "The version number of the snapshot this batch was returned from.\nThis applies to the range of results from the query's `start_cursor` (or\nthe beginning of the query if no cursor was given) to this batch's\n`end_cursor` (not the query's `end_cursor`).\n\nIn a single transaction, subsequent query result batches for the same query\ncan have a greater snapshot version number. Each batch's snapshot version\nis valid for all preceding batches.\nThe value will be zero for eventually consistent queries.",
          "type": "string",
          "format": "int64"
        },
        "endCursor": {
          "description": "A cursor that points to the position after the last result in the batch.",
          "type": "string",
          "format": "byte"
        },
        "skippedCursor": {
          "description": "A cursor that points to the position after the last skipped result.\nWill be set when `skipped_results` != 0.",
          "type": "string",
          "format": "byte"
        },
        "entityResultType": {
          "description": "The result type for every entity in `entity_results`.",
          "enum": [
            "RESULT_TYPE_UNSPECIFIED",
            "FULL",
            "PROJECTION",
            "KEY_ONLY"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "The key and properties.",
            "A projected subset of properties. The entity may have no key.",
            "Only the key."
          ],
          "type": "string"
        },
        "moreResults": {
          "description": "The state of the query after the current batch.",
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end\ncursor.",
            "The query has been exhausted."
          ],
          "type": "string"
        },
        "entityResults": {
          "description": "The results for this batch.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "skippedResults": {
          "description": "The number of results skipped, typically because of an offset.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "QueryResultBatch"
    },
    "AllocateIdsRequest": {
      "description": "The request for Datastore.AllocateIds.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "A list of keys with incomplete key paths for which to allocate IDs.\nNo key may be reserved/read-only.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "id": "AllocateIdsRequest"
    },
    "KindExpression": {
      "description": "A representation of a kind.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the kind.",
          "type": "string"
        }
      },
      "id": "KindExpression"
    },
    "PropertyFilter": {
      "description": "A filter on a specific property.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value to compare the property to.",
          "$ref": "Value"
        },
        "op": {
          "description": "The operator to filter by.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "HAS_ANCESTOR"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Less than.",
            "Less than or equal.",
            "Greater than.",
            "Greater than or equal.",
            "Equal.",
            "Has ancestor."
          ],
          "type": "string"
        },
        "property": {
          "description": "The property to filter by.",
          "$ref": "PropertyReference"
        }
      },
      "id": "PropertyFilter"
    },
    "PathElement": {
      "description": "A (kind, ID/name) pair used to construct a key path.\n\nIf either name or ID is set, the element is complete.\nIf neither is set, the element is incomplete.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of the entity.\nA kind matching regex `__.*__` is reserved/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        },
        "id": {
          "description": "The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.",
          "type": "string",
          "format": "int64"
        },
        "name": {
          "description": "The name of the entity.\nA name matching regex `__.*__` is reserved/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        }
      },
      "id": "PathElement"
    },
    "RollbackResponse": {
      "description": "The response for Datastore.Rollback.\n(an empty message).",
      "type": "object",
      "properties": {},
      "id": "RollbackResponse"
    },
    "PropertyReference": {
      "description": "A reference to a property relative to the kind expressions.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the property.\nIf name includes \".\"s, it may be interpreted as a property name path.",
          "type": "string"
        }
      },
      "id": "PropertyReference"
    },
    "Projection": {
      "description": "A representation of a property in a projection.",
      "type": "object",
      "properties": {
        "property": {
          "description": "The property to project.",
          "$ref": "PropertyReference"
        }
      },
      "id": "Projection"
    },
    "MutationResult": {
      "description": "The result of applying a mutation.",
      "type": "object",
      "properties": {
        "conflictDetected": {
          "description": "Whether a conflict was detected for this mutation. Always false when a\nconflict detection strategy field is not set in the mutation.",
          "type": "boolean"
        },
        "key": {
          "description": "The automatically allocated key.\nSet only when the mutation allocated a key.",
          "$ref": "Key"
        },
        "version": {
          "description": "The version of the entity on the server after processing the mutation. If\nthe mutation doesn't change anything on the server, then the version will\nbe the version of the current entity or, if no entity is present, a version\nthat is strictly greater than the version of any previous entity and less\nthan the version of any possible future entity.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "MutationResult"
    },
    "AllocateIdsResponse": {
      "description": "The response for Datastore.AllocateIds.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "The keys specified in the request (in the same order), each with\nits key path completed with a newly allocated ID.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "id": "AllocateIdsResponse"
    },
    "LookupResponse": {
      "description": "The response for Datastore.Lookup.",
      "type": "object",
      "properties": {
        "found": {
          "description": "Entities found as `ResultType.FULL` entities. The order of results in this\nfield is undefined and has no relation to the order of the keys in the\ninput.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "missing": {
          "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results\nin this field is undefined and has no relation to the order of the keys\nin the input.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "deferred": {
          "description": "A list of keys that were not looked up due to resource constraints. The\norder of results in this field is undefined and has no relation to the\norder of the keys in the input.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "id": "LookupResponse"
    },
    "BeginTransactionRequest": {
      "description": "The request for Datastore.BeginTransaction.",
      "type": "object",
      "properties": {},
      "id": "BeginTransactionRequest"
    },
    "Key": {
      "description": "A unique identifier for an entity.\nIf a key's partition ID or any of its path kinds or names are\nreserved/read-only, the key is reserved/read-only.\nA reserved/read-only key is forbidden in certain documented contexts.",
      "type": "object",
      "properties": {
        "partitionId": {
          "description": "Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition.",
          "$ref": "PartitionId"
        },
        "path": {
          "description": "The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element's _ancestors_.\n\nAn entity path is always fully complete: *all* of the entity's ancestors\nare required to be in the path along with the entity identifier itself.\nThe only exception is that in some documented cases, the identifier in the\nlast path element (for the entity) itself may be omitted. For example,\nthe last path element of the key of `Mutation.insert` may have no\nidentifier.\n\nA path can never be empty, and a path can have at most 100 elements.",
          "type": "array",
          "items": {
            "$ref": "PathElement"
          }
        }
      },
      "id": "Key"
    },
    "RunQueryResponse": {
      "description": "The response for Datastore.RunQuery.",
      "type": "object",
      "properties": {
        "batch": {
          "description": "A batch of query results (always present).",
          "$ref": "QueryResultBatch"
        },
        "query": {
          "description": "The parsed form of the `GqlQuery` from the request, if it was set.",
          "$ref": "Query"
        }
      },
      "id": "RunQueryResponse"
    },
    "Entity": {
      "description": "A Datastore data object.\n\nAn entity is limited to 1 megabyte when stored. That _roughly_\ncorresponds to a limit of 1 megabyte for the serialized form of this\nmessage.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The entity's properties.\nThe map's keys are property names.\nA property name matching regex `__.*__` is reserved.\nA reserved property name is forbidden in certain documented contexts.\nThe name must not contain more than 500 characters.\nThe name cannot be `\"\"`.",
          "additionalProperties": {
            "$ref": "Value"
          },
          "type": "object"
        },
        "key": {
          "description": "The entity's key.\n\nAn entity must have a key, unless otherwise documented (for example,\nan entity in `Value.entity_value` may have no key).\nAn entity's kind is its key path's last element's kind,\nor null if it has no key.",
          "$ref": "Key"
        }
      },
      "id": "Entity"
    },
    "GqlQuery": {
      "description": "A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
      "type": "object",
      "properties": {
        "queryString": {
          "description": "A string of the format described\n[here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
          "type": "string"
        },
        "namedBindings": {
          "description": "For each non-reserved named binding site in the query string, there must be\na named parameter with that name, but not necessarily the inverse.\n\nKey must match regex `A-Za-z_$*`, must not match regex\n`__.*__`, and must not be `\"\"`.",
          "additionalProperties": {
            "$ref": "GqlQueryParameter"
          },
          "type": "object"
        },
        "allowLiterals": {
          "description": "When false, the query string must not contain any literals and instead must\nbind all values. For example,\n`SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while\n`SELECT * FROM Kind WHERE a = @value` is.",
          "type": "boolean"
        },
        "positionalBindings": {
          "description": "Numbered binding site @1 references the first numbered parameter,\neffectively using 1-based indexing, rather than the usual 0.\n\nFor each binding site numbered i in `query_string`, there must be an i-th\nnumbered parameter. The inverse must also be true.",
          "type": "array",
          "items": {
            "$ref": "GqlQueryParameter"
          }
        }
      },
      "id": "GqlQuery"
    },
    "Mutation": {
      "description": "A mutation to apply to an entity.",
      "type": "object",
      "properties": {
        "insert": {
          "description": "The entity to insert. The entity must not already exist.\nThe entity key's final path element may be incomplete.",
          "$ref": "Entity"
        },
        "update": {
          "description": "The entity to update. The entity must already exist.\nMust have a complete key path.",
          "$ref": "Entity"
        },
        "baseVersion": {
          "description": "The version of the entity that this mutation is being applied to. If this\ndoes not match the current version on the server, the mutation conflicts.",
          "type": "string",
          "format": "int64"
        },
        "upsert": {
          "description": "The entity to upsert. The entity may or may not already exist.\nThe entity key's final path element may be incomplete.",
          "$ref": "Entity"
        },
        "delete": {
          "description": "The key of the entity to delete. The entity may or may not already exist.\nMust have a complete key path and must not be reserved/read-only.",
          "$ref": "Key"
        }
      },
      "id": "Mutation"
    },
    "CommitResponse": {
      "description": "The response for Datastore.Commit.",
      "type": "object",
      "properties": {
        "mutationResults": {
          "description": "The result of performing the mutations.\nThe i-th mutation result corresponds to the i-th mutation in the request.",
          "type": "array",
          "items": {
            "$ref": "MutationResult"
          }
        },
        "indexUpdates": {
          "description": "The number of index entries updated during the commit, or zero if none were\nupdated.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "CommitResponse"
    },
    "RunQueryRequest": {
      "description": "The request for Datastore.RunQuery.",
      "type": "object",
      "properties": {
        "partitionId": {
          "description": "Entities are partitioned into subsets, identified by a partition ID.\nQueries are scoped to a single partition.\nThis partition ID is normalized with the standard default context\npartition ID.",
          "$ref": "PartitionId"
        },
        "gqlQuery": {
          "description": "The GQL query to run.",
          "$ref": "GqlQuery"
        },
        "readOptions": {
          "description": "The options for this query.",
          "$ref": "ReadOptions"
        },
        "query": {
          "description": "The query to run.",
          "$ref": "Query"
        }
      },
      "id": "RunQueryRequest"
    },
    "LookupRequest": {
      "description": "The request for Datastore.Lookup.",
      "type": "object",
      "properties": {
        "readOptions": {
          "description": "The options for this lookup request.",
          "$ref": "ReadOptions"
        },
        "keys": {
          "description": "Keys of entities to look up.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "id": "LookupRequest"
    },
    "LatLng": {
      "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n\u003ca href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\"\u003eWGS84\nstandard\u003c/a\u003e. Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n    def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r \u003e 180.0 or (r == 180.0 and q \u003c= -1.0):\n        return r - 360.0\n      return r\n\n    def NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude and longitude to\n      [-90.0, 90.0] and [-180.0, 180.0], respectively.\"\"\"\n      r = latitude % 360.0\n      if r \u003c= 90.0:\n        return r, NormalizeLongitude(longitude)\n      elif r \u003e= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n      else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert 180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n    assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        }
      },
      "id": "LatLng"
    },
    "CompositeFilter": {
      "description": "A filter that merges multiple other filters using the given operator.",
      "type": "object",
      "properties": {
        "op": {
          "description": "The operator for combining multiple filters.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters."
          ],
          "type": "string"
        },
        "filters": {
          "description": "The list of filters to combine.\nMust contain at least one filter.",
          "type": "array",
          "items": {
            "$ref": "Filter"
          }
        }
      },
      "id": "CompositeFilter"
    }
  },
  "revision": "20161108",
  "basePath": "",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "version_module": "True",
  "discoveryVersion": "v1",
  "baseUrl": "https://datastore.googleapis.com/",
  "name": "datastore",
  "parameters": {
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "pp": {
      "description": "Pretty-print response.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    }
  },
  "documentationLink": "https://cloud.google.com/datastore/",
  "ownerDomain": "google.com",
  "batchPath": "batch",
  "servicePath": "",
  "ownerName": "Google",
  "version": "v1",
  "rootUrl": "https://datastore.googleapis.com/",
  "kind": "discovery#restDescription"
}
