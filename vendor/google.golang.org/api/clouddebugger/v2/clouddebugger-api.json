{
 "kind": "discovery#restDescription",
 "etag": "\"C5oy1hgQsABtYOYIOXWcR3BgYqU/QjifI48X3fgI9mRgli3ziT84a8U\"",
 "discoveryVersion": "v1",
 "id": "clouddebugger:v2",
 "name": "clouddebugger",
 "canonicalName": "Cloud Debugger",
 "version": "v2",
 "revision": "20160810",
 "title": "Stackdriver Debugger API",
 "description": "Examines the call stack and variables of a running application without stopping or slowing it down.",
 "ownerDomain": "google.com",
 "ownerName": "Google",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/search-16.gif",
  "x32": "http://www.google.com/images/icons/product/search-32.gif"
 },
 "documentationLink": "http://cloud.google.com/debugger",
 "protocol": "rest",
 "baseUrl": "https://clouddebugger.googleapis.com/",
 "basePath": "",
 "rootUrl": "https://clouddebugger.googleapis.com/",
 "servicePath": "",
 "batchPath": "batch",
 "version_module": true,
 "parameters": {
  "access_token": {
   "type": "string",
   "description": "OAuth access token.",
   "location": "query"
  },
  "alt": {
   "type": "string",
   "description": "Data format for response.",
   "default": "json",
   "enumDescriptions": [
    "Responses with Content-Type of application/json",
    "Media download with context-dependent Content-Type",
    "Responses with Content-Type of application/x-protobuf"
   ],
   "location": "query"
  },
  "bearer_token": {
   "type": "string",
   "description": "OAuth bearer token.",
   "location": "query"
  },
  "callback": {
   "type": "string",
   "description": "JSONP",
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "pp": {
   "type": "boolean",
   "description": "Pretty-print response.",
   "default": "true",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
   "location": "query"
  },
  "upload_protocol": {
   "type": "string",
   "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
   "location": "query"
  },
  "uploadType": {
   "type": "string",
   "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
   "location": "query"
  },
  "$.xgafv": {
   "type": "string",
   "description": "V1 error format.",
   "enumDescriptions": [
    "v1 error format",
    "v2 error format"
   ],
   "location": "query"
  }
 },
 "auth": {
  "oauth2": {
   "scopes": {
    "https://www.googleapis.com/auth/cloud-platform": {
     "description": "View and manage your data across Google Cloud Platform services"
    },
    "https://www.googleapis.com/auth/cloud_debugger": {
     "description": "Manage cloud debugger"
    }
   }
  }
 },
 "schemas": {
  "RegisterDebuggeeRequest": {
   "id": "RegisterDebuggeeRequest",
   "type": "object",
   "description": "Request to register a debuggee.",
   "properties": {
    "debuggee": {
     "$ref": "Debuggee",
     "description": "Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set."
    }
   }
  },
  "Debuggee": {
   "id": "Debuggee",
   "type": "object",
   "description": "Represents the application to debug. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. The agents attached to the same debuggee are identified by using exactly the same field values when registering.",
   "properties": {
    "id": {
     "type": "string",
     "description": "Unique identifier for the debuggee generated by the controller service."
    },
    "project": {
     "type": "string",
     "description": "Project the debuggee is associated with. Use the project number when registering a Google Cloud Platform project."
    },
    "uniquifier": {
     "type": "string",
     "description": "Debuggee uniquifier within the project. Any string that identifies the application within the project can be used. Including environment and version or build IDs is recommended."
    },
    "description": {
     "type": "string",
     "description": "Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended."
    },
    "isInactive": {
     "type": "boolean",
     "description": "If set to `true`, indicates that the debuggee is considered as inactive by the Controller service."
    },
    "agentVersion": {
     "type": "string",
     "description": "Version ID of the agent release. The version ID is structured as following: `domain/type/vmajor.minor` (for example `google.com/gcp-java/v1.1`)."
    },
    "isDisabled": {
     "type": "boolean",
     "description": "If set to `true`, indicates that the agent should disable itself and detach from the debuggee."
    },
    "status": {
     "$ref": "StatusMessage",
     "description": "Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status."
    },
    "sourceContexts": {
     "type": "array",
     "description": "References to the locations and revisions of the source code used in the deployed application. NOTE: This field is deprecated. Consumers should use `ext_source_contexts` if it is not empty. Debug agents should populate both this field and `ext_source_contexts`.",
     "items": {
      "$ref": "SourceContext"
     }
    },
    "extSourceContexts": {
     "type": "array",
     "description": "References to the locations and revisions of the source code used in the deployed application. Contexts describing a remote repo related to the source code have a `category` label of `remote_repo`. Source snapshot source contexts have a `category` of `snapshot`.",
     "items": {
      "$ref": "ExtendedSourceContext"
     }
    },
    "labels": {
     "type": "object",
     "description": "A set of custom debuggee properties, populated by the agent, to be displayed to the user.",
     "additionalProperties": {
      "type": "string"
     }
    }
   }
  },
  "StatusMessage": {
   "id": "StatusMessage",
   "type": "object",
   "description": "Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
   "properties": {
    "isError": {
     "type": "boolean",
     "description": "Distinguishes errors from informational messages."
    },
    "refersTo": {
     "type": "string",
     "description": "Reference to which the message applies.",
     "enum": [
      "UNSPECIFIED",
      "BREAKPOINT_SOURCE_LOCATION",
      "BREAKPOINT_CONDITION",
      "BREAKPOINT_EXPRESSION",
      "VARIABLE_NAME",
      "VARIABLE_VALUE"
     ]
    },
    "description": {
     "$ref": "FormatMessage",
     "description": "Status message text."
    }
   }
  },
  "FormatMessage": {
   "id": "FormatMessage",
   "type": "object",
   "description": "Represents a message with parameters.",
   "properties": {
    "format": {
     "type": "string",
     "description": "Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`"
    },
    "parameters": {
     "type": "array",
     "description": "Optional parameters to be embedded into the message.",
     "items": {
      "type": "string"
     }
    }
   }
  },
  "SourceContext": {
   "id": "SourceContext",
   "type": "object",
   "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
   "properties": {
    "cloudRepo": {
     "$ref": "CloudRepoSourceContext",
     "description": "A SourceContext referring to a revision in a cloud repo."
    },
    "cloudWorkspace": {
     "$ref": "CloudWorkspaceSourceContext",
     "description": "A SourceContext referring to a snapshot in a cloud workspace."
    },
    "gerrit": {
     "$ref": "GerritSourceContext",
     "description": "A SourceContext referring to a Gerrit project."
    },
    "git": {
     "$ref": "GitSourceContext",
     "description": "A SourceContext referring to any third party Git repo (e.g. GitHub)."
    }
   }
  },
  "CloudRepoSourceContext": {
   "id": "CloudRepoSourceContext",
   "type": "object",
   "description": "A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).",
   "properties": {
    "repoId": {
     "$ref": "RepoId",
     "description": "The ID of the repo."
    },
    "revisionId": {
     "type": "string",
     "description": "A revision ID."
    },
    "aliasName": {
     "type": "string",
     "description": "The name of an alias (branch, tag, etc.)."
    },
    "aliasContext": {
     "$ref": "AliasContext",
     "description": "An alias, which may be a branch or tag."
    }
   }
  },
  "RepoId": {
   "id": "RepoId",
   "type": "object",
   "description": "A unique identifier for a cloud repo.",
   "properties": {
    "projectRepoId": {
     "$ref": "ProjectRepoId",
     "description": "A combination of a project ID and a repo name."
    },
    "uid": {
     "type": "string",
     "description": "A server-assigned, globally unique identifier."
    }
   }
  },
  "ProjectRepoId": {
   "id": "ProjectRepoId",
   "type": "object",
   "description": "Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.",
   "properties": {
    "projectId": {
     "type": "string",
     "description": "The ID of the project."
    },
    "repoName": {
     "type": "string",
     "description": "The name of the repo. Leave empty for the default repo."
    }
   }
  },
  "AliasContext": {
   "id": "AliasContext",
   "type": "object",
   "description": "An alias to a repo revision.",
   "properties": {
    "kind": {
     "type": "string",
     "description": "The alias kind.",
     "enum": [
      "ANY",
      "FIXED",
      "MOVABLE",
      "OTHER"
     ]
    },
    "name": {
     "type": "string",
     "description": "The alias name."
    }
   }
  },
  "CloudWorkspaceSourceContext": {
   "id": "CloudWorkspaceSourceContext",
   "type": "object",
   "description": "A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.",
   "properties": {
    "workspaceId": {
     "$ref": "CloudWorkspaceId",
     "description": "The ID of the workspace."
    },
    "snapshotId": {
     "type": "string",
     "description": "The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot."
    }
   }
  },
  "CloudWorkspaceId": {
   "id": "CloudWorkspaceId",
   "type": "object",
   "description": "A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.",
   "properties": {
    "repoId": {
     "$ref": "RepoId",
     "description": "The ID of the repo containing the workspace."
    },
    "name": {
     "type": "string",
     "description": "The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method."
    }
   }
  },
  "GerritSourceContext": {
   "id": "GerritSourceContext",
   "type": "object",
   "description": "A SourceContext referring to a Gerrit project.",
   "properties": {
    "hostUri": {
     "type": "string",
     "description": "The URI of a running Gerrit instance."
    },
    "gerritProject": {
     "type": "string",
     "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is hostURI/project."
    },
    "revisionId": {
     "type": "string",
     "description": "A revision (commit) ID."
    },
    "aliasName": {
     "type": "string",
     "description": "The name of an alias (branch, tag, etc.)."
    },
    "aliasContext": {
     "$ref": "AliasContext",
     "description": "An alias, which may be a branch or tag."
    }
   }
  },
  "GitSourceContext": {
   "id": "GitSourceContext",
   "type": "object",
   "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).",
   "properties": {
    "url": {
     "type": "string",
     "description": "Git repository URL."
    },
    "revisionId": {
     "type": "string",
     "description": "Git commit hash. required."
    }
   }
  },
  "ExtendedSourceContext": {
   "id": "ExtendedSourceContext",
   "type": "object",
   "description": "An ExtendedSourceContext is a SourceContext combined with additional details describing the context.",
   "properties": {
    "context": {
     "$ref": "SourceContext",
     "description": "Any source context."
    },
    "labels": {
     "type": "object",
     "description": "Labels with user defined metadata.",
     "additionalProperties": {
      "type": "string"
     }
    }
   }
  },
  "RegisterDebuggeeResponse": {
   "id": "RegisterDebuggeeResponse",
   "type": "object",
   "description": "Response for registering a debuggee.",
   "properties": {
    "debuggee": {
     "$ref": "Debuggee",
     "description": "Debuggee resource. The field `id` is guranteed to be set (in addition to the echoed fields)."
    }
   }
  },
  "ListActiveBreakpointsResponse": {
   "id": "ListActiveBreakpointsResponse",
   "type": "object",
   "description": "Response for listing active breakpoints.",
   "properties": {
    "breakpoints": {
     "type": "array",
     "description": "List of all active breakpoints. The fields `id` and `location` are guaranteed to be set on each breakpoint.",
     "items": {
      "$ref": "Breakpoint"
     }
    },
    "nextWaitToken": {
     "type": "string",
     "description": "A wait token that can be used in the next method call to block until the list of breakpoints changes."
    },
    "waitExpired": {
     "type": "boolean",
     "description": "The `wait_expired` field is set to true by the server when the request times out and the field `success_on_timeout` is set to true."
    }
   }
  },
  "Breakpoint": {
   "id": "Breakpoint",
   "type": "object",
   "description": "Represents the breakpoint specification, status and results.",
   "properties": {
    "id": {
     "type": "string",
     "description": "Breakpoint identifier, unique in the scope of the debuggee."
    },
    "action": {
     "type": "string",
     "description": "Action that the agent should perform when the code at the breakpoint location is hit.",
     "enum": [
      "CAPTURE",
      "LOG"
     ]
    },
    "location": {
     "$ref": "SourceLocation",
     "description": "Breakpoint source location."
    },
    "condition": {
     "type": "string",
     "description": "Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location."
    },
    "expressions": {
     "type": "array",
     "description": "List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.",
     "items": {
      "type": "string"
     }
    },
    "logMessageFormat": {
     "type": "string",
     "description": "Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`."
    },
    "logLevel": {
     "type": "string",
     "description": "Indicates the severity of the log. Only relevant when action is `LOG`.",
     "enum": [
      "INFO",
      "WARNING",
      "ERROR"
     ]
    },
    "isFinalState": {
     "type": "boolean",
     "description": "When true, indicates that this is a final result and the breakpoint state will not change from here on."
    },
    "createTime": {
     "type": "string",
     "description": "Time this breakpoint was created by the server in seconds resolution."
    },
    "finalTime": {
     "type": "string",
     "description": "Time this breakpoint was finalized as seen by the server in seconds resolution."
    },
    "userEmail": {
     "type": "string",
     "description": "E-mail address of the user that created this breakpoint"
    },
    "status": {
     "$ref": "StatusMessage",
     "description": "Breakpoint status. The status includes an error flag and a human readable message. This field is usually unset. The message can be either informational or an error message. Regardless, clients should always display the text message back to the user. Error status indicates complete failure of the breakpoint. Example (non-final state): `Still loading symbols...` Examples (final state): * `Invalid line number` referring to location * `Field f not found in class C` referring to condition"
    },
    "stackFrames": {
     "type": "array",
     "description": "The stack at breakpoint time.",
     "items": {
      "$ref": "StackFrame"
     }
    },
    "evaluatedExpressions": {
     "type": "array",
     "description": "Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.",
     "items": {
      "$ref": "Variable"
     }
    },
    "variableTable": {
     "type": "array",
     "description": "The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.",
     "items": {
      "$ref": "Variable"
     }
    },
    "labels": {
     "type": "object",
     "description": "A set of custom breakpoint properties, populated by the agent, to be displayed to the user.",
     "additionalProperties": {
      "type": "string"
     }
    }
   }
  },
  "SourceLocation": {
   "id": "SourceLocation",
   "type": "object",
   "description": "Represents a location in the source code.",
   "properties": {
    "path": {
     "type": "string",
     "description": "Path to the source file within the source context of the target binary."
    },
    "line": {
     "type": "integer",
     "description": "Line inside the file. The first line in the file has the value `1`.",
     "format": "int32"
    }
   }
  },
  "StackFrame": {
   "id": "StackFrame",
   "type": "object",
   "description": "Represents a stack frame context.",
   "properties": {
    "function": {
     "type": "string",
     "description": "Demangled function name at the call site."
    },
    "location": {
     "$ref": "SourceLocation",
     "description": "Source location of the call site."
    },
    "arguments": {
     "type": "array",
     "description": "Set of arguments passed to this function. Note that this might not be populated for all stack frames.",
     "items": {
      "$ref": "Variable"
     }
    },
    "locals": {
     "type": "array",
     "description": "Set of local variables at the stack frame location. Note that this might not be populated for all stack frames.",
     "items": {
      "$ref": "Variable"
     }
    }
   }
  },
  "Variable": {
   "id": "Variable",
   "type": "object",
   "description": "Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented: 1) A simple variable: int x = 5 { name: \"x\", value: \"5\", type: \"int\" } // Captured variable 2) A compound object: struct T { int m1; int m2; }; T x = { 3, 7 }; { // Captured variable name: \"x\", type: \"T\", members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } 3) A pointer where the pointee was captured: T x = { 3, 7 }; T* p = &x; { // Captured variable name: \"p\", type: \"T*\", value: \"0x00500500\", members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } 4) A pointer where the pointee was not captured: T* p = new T; { // Captured variable name: \"p\", type: \"T*\", value: \"0x00400400\" status { is_error: true, description { format: \"unavailable\" } } } The status should describe the reason for the missing value, such as ``, ``, `\n`. Note that a null pointer should not have members. 5) An unnamed value: int* p = new int(7); { // Captured variable name: \"p\", value: \"0x00500500\", type: \"int*\", members { value: \"7\", type: \"int\" } } 6) An unnamed pointer where the pointee was not captured: int* p = new int(7); int** pp = &p; { // Captured variable name: \"pp\", value: \"0x00500500\", type: \"int**\", members { value: \"0x00400400\", type: \"int*\" status { is_error: true, description: { format: \"unavailable\" } } } } } To optimize computation, memory and network traffic, variables that repeat in the output multiple times can be stored once in a shared variable table and be referenced using the `var_table_index` field. The variables stored in the shared table are nameless and are essentially a partition of the complete variable. To reconstruct the complete variable, merge the referencing variable with the referenced variable. When using the shared variable table, the following variables: T x = { 3, 7 }; T* p = &x; T& r = x; { name: \"x\", var_table_index: 3, type: \"T\" } // Captured variables { name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index: 3 } { name: \"r\", type=\"T&\", var_table_index: 3 } { // Shared variable table entry #3: members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } Note that the pointer address is stored with the referencing variable and not with the referenced variable. This allows the referenced variable to be shared between pointers and references. The type field is optional. The debugger agent may or may not support it.",
   "properties": {
    "name": {
     "type": "string",
     "description": "Name of the variable, if any."
    },
    "value": {
     "type": "string",
     "description": "Simple value of the variable."
    },
    "type": {
     "type": "string",
     "description": "Variable type (e.g. `MyClass`). If the variable is split with `var_table_index`, `type` goes next to `value`. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object."
    },
    "members": {
     "type": "array",
     "description": "Members contained or pointed to by the variable.",
     "items": {
      "$ref": "Variable"
     }
    },
    "varTableIndex": {
     "type": "integer",
     "description": "Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The `var_table_index` field is an index into `variable_table` in Breakpoint.",
     "format": "int32"
    },
    "status": {
     "$ref": "StatusMessage",
     "description": "Status associated with the variable. This field will usually stay unset. A status of a single variable only applies to that variable or expression. The rest of breakpoint data still remains valid. Variables might be reported in error state even when breakpoint is not in final state. The message may refer to variable name with `refers_to` set to `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`. In either case variable value and members will be unset. Example of error message applied to name: `Invalid expression syntax`. Example of information message applied to value: `Not captured`. Examples of error message applied to value: * `Malformed string`, * `Field f not found in class C` * `Null pointer dereference`"
    }
   }
  },
  "UpdateActiveBreakpointRequest": {
   "id": "UpdateActiveBreakpointRequest",
   "type": "object",
   "description": "Request to update an active breakpoint.",
   "properties": {
    "breakpoint": {
     "$ref": "Breakpoint",
     "description": "Updated breakpoint information. The field 'id' must be set."
    }
   }
  },
  "UpdateActiveBreakpointResponse": {
   "id": "UpdateActiveBreakpointResponse",
   "type": "object",
   "description": "Response for updating an active breakpoint. The message is defined to allow future extensions."
  },
  "SetBreakpointResponse": {
   "id": "SetBreakpointResponse",
   "type": "object",
   "description": "Response for setting a breakpoint.",
   "properties": {
    "breakpoint": {
     "$ref": "Breakpoint",
     "description": "Breakpoint resource. The field `id` is guaranteed to be set (in addition to the echoed fileds)."
    }
   }
  },
  "GetBreakpointResponse": {
   "id": "GetBreakpointResponse",
   "type": "object",
   "description": "Response for getting breakpoint information.",
   "properties": {
    "breakpoint": {
     "$ref": "Breakpoint",
     "description": "Complete breakpoint state. The fields `id` and `location` are guaranteed to be set."
    }
   }
  },
  "Empty": {
   "id": "Empty",
   "type": "object",
   "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
  },
  "ListBreakpointsResponse": {
   "id": "ListBreakpointsResponse",
   "type": "object",
   "description": "Response for listing breakpoints.",
   "properties": {
    "breakpoints": {
     "type": "array",
     "description": "List of all breakpoints with complete state. The fields `id` and `location` are guaranteed to be set on each breakpoint.",
     "items": {
      "$ref": "Breakpoint"
     }
    },
    "nextWaitToken": {
     "type": "string",
     "description": "A wait token that can be used in the next call to `list` (REST) or `ListBreakpoints` (RPC) to block until the list of breakpoints has changes."
    }
   }
  },
  "ListDebuggeesResponse": {
   "id": "ListDebuggeesResponse",
   "type": "object",
   "description": "Response for listing debuggees.",
   "properties": {
    "debuggees": {
     "type": "array",
     "description": "List of debuggees accessible to the calling user. Note that the `description` field is the only human readable field that should be displayed to the user. The fields `debuggee.id` and `description` fields are guaranteed to be set on each debuggee.",
     "items": {
      "$ref": "Debuggee"
     }
    }
   }
  }
 },
 "resources": {
  "controller": {
   "resources": {
    "debuggees": {
     "methods": {
      "register": {
       "id": "clouddebugger.controller.debuggees.register",
       "path": "v2/controller/debuggees/register",
       "httpMethod": "POST",
       "description": "Registers the debuggee with the controller service. All agents attached to the same application should call this method with the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This allows the controller service to disable the agent or recover from any data loss. If the debuggee is disabled by the server, the response will have `is_disabled` set to `true`.",
       "request": {
        "$ref": "RegisterDebuggeeRequest"
       },
       "response": {
        "$ref": "RegisterDebuggeeResponse"
       },
       "scopes": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/cloud_debugger"
       ]
      }
     },
     "resources": {
      "breakpoints": {
       "methods": {
        "list": {
         "id": "clouddebugger.controller.debuggees.breakpoints.list",
         "path": "v2/controller/debuggees/{debuggeeId}/breakpoints",
         "httpMethod": "GET",
         "description": "Returns the list of all active breakpoints for the debuggee. The breakpoint specification (location, condition, and expression fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn't change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "Identifies the debuggee.",
           "required": true,
           "location": "path"
          },
          "waitToken": {
           "type": "string",
           "description": "A wait token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server selected timeout has expired. The value should be set from the last returned response.",
           "location": "query"
          },
          "successOnTimeout": {
           "type": "boolean",
           "description": "If set to `true`, returns `google.rpc.Code.OK` status and sets the `wait_expired` response field to `true` when the server-selected timeout has expired (recommended). If set to `false`, returns `google.rpc.Code.ABORTED` status when the server-selected timeout has expired (deprecated).",
           "location": "query"
          }
         },
         "parameterOrder": [
          "debuggeeId"
         ],
         "response": {
          "$ref": "ListActiveBreakpointsResponse"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        },
        "update": {
         "id": "clouddebugger.controller.debuggees.breakpoints.update",
         "path": "v2/controller/debuggees/{debuggeeId}/breakpoints/{id}",
         "httpMethod": "PUT",
         "description": "Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the `location`, `condition` and `expression` fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "Identifies the debuggee being debugged.",
           "required": true,
           "location": "path"
          },
          "id": {
           "type": "string",
           "description": "Breakpoint identifier, unique in the scope of the debuggee.",
           "required": true,
           "location": "path"
          }
         },
         "parameterOrder": [
          "debuggeeId",
          "id"
         ],
         "request": {
          "$ref": "UpdateActiveBreakpointRequest"
         },
         "response": {
          "$ref": "UpdateActiveBreakpointResponse"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        }
       }
      }
     }
    }
   }
  },
  "debugger": {
   "resources": {
    "debuggees": {
     "methods": {
      "list": {
       "id": "clouddebugger.debugger.debuggees.list",
       "path": "v2/debugger/debuggees",
       "httpMethod": "GET",
       "description": "Lists all the debuggees that the user can set breakpoints to.",
       "parameters": {
        "project": {
         "type": "string",
         "description": "Project number of a Google Cloud project whose debuggees to list.",
         "location": "query"
        },
        "includeInactive": {
         "type": "boolean",
         "description": "When set to `true`, the result includes all debuggees. Otherwise, the result includes only debuggees that are active.",
         "location": "query"
        },
        "clientVersion": {
         "type": "string",
         "description": "The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).",
         "location": "query"
        }
       },
       "response": {
        "$ref": "ListDebuggeesResponse"
       },
       "scopes": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/cloud_debugger"
       ]
      }
     },
     "resources": {
      "breakpoints": {
       "methods": {
        "set": {
         "id": "clouddebugger.debugger.debuggees.breakpoints.set",
         "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/set",
         "httpMethod": "POST",
         "description": "Sets the breakpoint to the debuggee.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "ID of the debuggee where the breakpoint is to be set.",
           "required": true,
           "location": "path"
          },
          "clientVersion": {
           "type": "string",
           "description": "The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).",
           "location": "query"
          }
         },
         "parameterOrder": [
          "debuggeeId"
         ],
         "request": {
          "$ref": "Breakpoint"
         },
         "response": {
          "$ref": "SetBreakpointResponse"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        },
        "get": {
         "id": "clouddebugger.debugger.debuggees.breakpoints.get",
         "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
         "httpMethod": "GET",
         "description": "Gets breakpoint information.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "ID of the debuggee whose breakpoint to get.",
           "required": true,
           "location": "path"
          },
          "breakpointId": {
           "type": "string",
           "description": "ID of the breakpoint to get.",
           "required": true,
           "location": "path"
          },
          "clientVersion": {
           "type": "string",
           "description": "The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).",
           "location": "query"
          }
         },
         "parameterOrder": [
          "debuggeeId",
          "breakpointId"
         ],
         "response": {
          "$ref": "GetBreakpointResponse"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        },
        "delete": {
         "id": "clouddebugger.debugger.debuggees.breakpoints.delete",
         "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
         "httpMethod": "DELETE",
         "description": "Deletes the breakpoint from the debuggee.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "ID of the debuggee whose breakpoint to delete.",
           "required": true,
           "location": "path"
          },
          "breakpointId": {
           "type": "string",
           "description": "ID of the breakpoint to delete.",
           "required": true,
           "location": "path"
          },
          "clientVersion": {
           "type": "string",
           "description": "The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).",
           "location": "query"
          }
         },
         "parameterOrder": [
          "debuggeeId",
          "breakpointId"
         ],
         "response": {
          "$ref": "Empty"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        },
        "list": {
         "id": "clouddebugger.debugger.debuggees.breakpoints.list",
         "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints",
         "httpMethod": "GET",
         "description": "Lists all breakpoints for the debuggee.",
         "parameters": {
          "debuggeeId": {
           "type": "string",
           "description": "ID of the debuggee whose breakpoints to list.",
           "required": true,
           "location": "path"
          },
          "includeAllUsers": {
           "type": "boolean",
           "description": "When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.",
           "location": "query"
          },
          "includeInactive": {
           "type": "boolean",
           "description": "When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.",
           "location": "query"
          },
          "action.value": {
           "type": "string",
           "description": "Only breakpoints with the specified action will pass the filter.",
           "enum": [
            "CAPTURE",
            "LOG"
           ],
           "location": "query"
          },
          "stripResults": {
           "type": "boolean",
           "description": "When set to `true`, the response breakpoints are stripped of the results fields: `stack_frames`, `evaluated_expressions` and `variable_table`.",
           "location": "query"
          },
          "waitToken": {
           "type": "string",
           "description": "A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`.",
           "location": "query"
          },
          "clientVersion": {
           "type": "string",
           "description": "The client version making the call. Following: `domain/type/version` (e.g., `google.com/intellij/v1`).",
           "location": "query"
          }
         },
         "parameterOrder": [
          "debuggeeId"
         ],
         "response": {
          "$ref": "ListBreakpointsResponse"
         },
         "scopes": [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud_debugger"
         ]
        }
       }
      }
     }
    }
   }
  }
 }
}
