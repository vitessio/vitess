# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: queryservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import query_pb2 as query__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='queryservice.proto',
  package='queryservice',
  syntax='proto3',
  serialized_pb=_b('\n\x12queryservice.proto\x12\x0cqueryservice\x1a\x0bquery.proto2\xe9\x04\n\x05Query\x12I\n\x0cGetSessionId\x12\x1a.query.GetSessionIdRequest\x1a\x1b.query.GetSessionIdResponse\"\x00\x12:\n\x07\x45xecute\x12\x15.query.ExecuteRequest\x1a\x16.query.ExecuteResponse\"\x00\x12I\n\x0c\x45xecuteBatch\x12\x1a.query.ExecuteBatchRequest\x1a\x1b.query.ExecuteBatchResponse\"\x00\x12N\n\rStreamExecute\x12\x1b.query.StreamExecuteRequest\x1a\x1c.query.StreamExecuteResponse\"\x00\x30\x01\x12\x34\n\x05\x42\x65gin\x12\x13.query.BeginRequest\x1a\x14.query.BeginResponse\"\x00\x12\x37\n\x06\x43ommit\x12\x14.query.CommitRequest\x1a\x15.query.CommitResponse\"\x00\x12=\n\x08Rollback\x12\x16.query.RollbackRequest\x1a\x17.query.RollbackResponse\"\x00\x12\x43\n\nSplitQuery\x12\x18.query.SplitQueryRequest\x1a\x19.query.SplitQueryResponse\"\x00\x12K\n\x0cStreamHealth\x12\x1a.query.StreamHealthRequest\x1a\x1b.query.StreamHealthResponse\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[query__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterQueryServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetSessionId(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Execute(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteBatch(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecute(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Begin(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Commit(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Rollback(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def SplitQuery(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamHealth(self, request, context):
    raise NotImplementedError()
class EarlyAdopterQueryServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterQueryStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetSessionId(self, request):
    raise NotImplementedError()
  GetSessionId.async = None
  @abc.abstractmethod
  def Execute(self, request):
    raise NotImplementedError()
  Execute.async = None
  @abc.abstractmethod
  def ExecuteBatch(self, request):
    raise NotImplementedError()
  ExecuteBatch.async = None
  @abc.abstractmethod
  def StreamExecute(self, request):
    raise NotImplementedError()
  StreamExecute.async = None
  @abc.abstractmethod
  def Begin(self, request):
    raise NotImplementedError()
  Begin.async = None
  @abc.abstractmethod
  def Commit(self, request):
    raise NotImplementedError()
  Commit.async = None
  @abc.abstractmethod
  def Rollback(self, request):
    raise NotImplementedError()
  Rollback.async = None
  @abc.abstractmethod
  def SplitQuery(self, request):
    raise NotImplementedError()
  SplitQuery.async = None
  @abc.abstractmethod
  def StreamHealth(self, request):
    raise NotImplementedError()
  StreamHealth.async = None
def early_adopter_create_Query_server(servicer, port, private_key=None, certificate_chain=None):
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  method_service_descriptions = {
    "Begin": utilities.unary_unary_service_description(
      servicer.Begin,
      query_pb2.BeginRequest.FromString,
      query_pb2.BeginResponse.SerializeToString,
    ),
    "Commit": utilities.unary_unary_service_description(
      servicer.Commit,
      query_pb2.CommitRequest.FromString,
      query_pb2.CommitResponse.SerializeToString,
    ),
    "Execute": utilities.unary_unary_service_description(
      servicer.Execute,
      query_pb2.ExecuteRequest.FromString,
      query_pb2.ExecuteResponse.SerializeToString,
    ),
    "ExecuteBatch": utilities.unary_unary_service_description(
      servicer.ExecuteBatch,
      query_pb2.ExecuteBatchRequest.FromString,
      query_pb2.ExecuteBatchResponse.SerializeToString,
    ),
    "GetSessionId": utilities.unary_unary_service_description(
      servicer.GetSessionId,
      query_pb2.GetSessionIdRequest.FromString,
      query_pb2.GetSessionIdResponse.SerializeToString,
    ),
    "Rollback": utilities.unary_unary_service_description(
      servicer.Rollback,
      query_pb2.RollbackRequest.FromString,
      query_pb2.RollbackResponse.SerializeToString,
    ),
    "SplitQuery": utilities.unary_unary_service_description(
      servicer.SplitQuery,
      query_pb2.SplitQueryRequest.FromString,
      query_pb2.SplitQueryResponse.SerializeToString,
    ),
    "StreamExecute": utilities.unary_stream_service_description(
      servicer.StreamExecute,
      query_pb2.StreamExecuteRequest.FromString,
      query_pb2.StreamExecuteResponse.SerializeToString,
    ),
    "StreamHealth": utilities.unary_stream_service_description(
      servicer.StreamHealth,
      query_pb2.StreamHealthRequest.FromString,
      query_pb2.StreamHealthResponse.SerializeToString,
    ),
  }
  return implementations.server("queryservice.Query", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_Query_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  import query_pb2
  method_invocation_descriptions = {
    "Begin": utilities.unary_unary_invocation_description(
      query_pb2.BeginRequest.SerializeToString,
      query_pb2.BeginResponse.FromString,
    ),
    "Commit": utilities.unary_unary_invocation_description(
      query_pb2.CommitRequest.SerializeToString,
      query_pb2.CommitResponse.FromString,
    ),
    "Execute": utilities.unary_unary_invocation_description(
      query_pb2.ExecuteRequest.SerializeToString,
      query_pb2.ExecuteResponse.FromString,
    ),
    "ExecuteBatch": utilities.unary_unary_invocation_description(
      query_pb2.ExecuteBatchRequest.SerializeToString,
      query_pb2.ExecuteBatchResponse.FromString,
    ),
    "GetSessionId": utilities.unary_unary_invocation_description(
      query_pb2.GetSessionIdRequest.SerializeToString,
      query_pb2.GetSessionIdResponse.FromString,
    ),
    "Rollback": utilities.unary_unary_invocation_description(
      query_pb2.RollbackRequest.SerializeToString,
      query_pb2.RollbackResponse.FromString,
    ),
    "SplitQuery": utilities.unary_unary_invocation_description(
      query_pb2.SplitQueryRequest.SerializeToString,
      query_pb2.SplitQueryResponse.FromString,
    ),
    "StreamExecute": utilities.unary_stream_invocation_description(
      query_pb2.StreamExecuteRequest.SerializeToString,
      query_pb2.StreamExecuteResponse.FromString,
    ),
    "StreamHealth": utilities.unary_stream_invocation_description(
      query_pb2.StreamHealthRequest.SerializeToString,
      query_pb2.StreamHealthResponse.FromString,
    ),
  }
  return implementations.stub("queryservice.Query", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
