# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vtgateservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import vtgate_pb2 as vtgate__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='vtgateservice.proto',
  package='vtgateservice',
  syntax='proto3',
  serialized_pb=_b('\n\x13vtgateservice.proto\x12\rvtgateservice\x1a\x0cvtgate.proto2\xd8\n\n\x06Vitess\x12<\n\x07\x45xecute\x12\x16.vtgate.ExecuteRequest\x1a\x17.vtgate.ExecuteResponse\"\x00\x12N\n\rExecuteShards\x12\x1c.vtgate.ExecuteShardsRequest\x1a\x1d.vtgate.ExecuteShardsResponse\"\x00\x12]\n\x12\x45xecuteKeyspaceIds\x12!.vtgate.ExecuteKeyspaceIdsRequest\x1a\".vtgate.ExecuteKeyspaceIdsResponse\"\x00\x12W\n\x10\x45xecuteKeyRanges\x12\x1f.vtgate.ExecuteKeyRangesRequest\x1a .vtgate.ExecuteKeyRangesResponse\"\x00\x12W\n\x10\x45xecuteEntityIds\x12\x1f.vtgate.ExecuteEntityIdsRequest\x1a .vtgate.ExecuteEntityIdsResponse\"\x00\x12]\n\x12\x45xecuteBatchShards\x12!.vtgate.ExecuteBatchShardsRequest\x1a\".vtgate.ExecuteBatchShardsResponse\"\x00\x12l\n\x17\x45xecuteBatchKeyspaceIds\x12&.vtgate.ExecuteBatchKeyspaceIdsRequest\x1a\'.vtgate.ExecuteBatchKeyspaceIdsResponse\"\x00\x12P\n\rStreamExecute\x12\x1c.vtgate.StreamExecuteRequest\x1a\x1d.vtgate.StreamExecuteResponse\"\x00\x30\x01\x12\x62\n\x13StreamExecuteShards\x12\".vtgate.StreamExecuteShardsRequest\x1a#.vtgate.StreamExecuteShardsResponse\"\x00\x30\x01\x12q\n\x18StreamExecuteKeyspaceIds\x12\'.vtgate.StreamExecuteKeyspaceIdsRequest\x1a(.vtgate.StreamExecuteKeyspaceIdsResponse\"\x00\x30\x01\x12k\n\x16StreamExecuteKeyRanges\x12%.vtgate.StreamExecuteKeyRangesRequest\x1a&.vtgate.StreamExecuteKeyRangesResponse\"\x00\x30\x01\x12\x36\n\x05\x42\x65gin\x12\x14.vtgate.BeginRequest\x1a\x15.vtgate.BeginResponse\"\x00\x12\x39\n\x06\x43ommit\x12\x15.vtgate.CommitRequest\x1a\x16.vtgate.CommitResponse\"\x00\x12?\n\x08Rollback\x12\x17.vtgate.RollbackRequest\x1a\x18.vtgate.RollbackResponse\"\x00\x12\x45\n\nSplitQuery\x12\x19.vtgate.SplitQueryRequest\x1a\x1a.vtgate.SplitQueryResponse\"\x00\x12Q\n\x0eGetSrvKeyspace\x12\x1d.vtgate.GetSrvKeyspaceRequest\x1a\x1e.vtgate.GetSrvKeyspaceResponse\"\x00\x42\x1f\n\x1d\x63om.youtube.vitess.proto.grpcb\x06proto3')
  ,
  dependencies=[vtgate__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\035com.youtube.vitess.proto.grpc'))
import abc
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaVitessServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Execute(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteShards(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteKeyspaceIds(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteKeyRanges(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteEntityIds(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteBatchShards(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ExecuteBatchKeyspaceIds(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecute(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteShards(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteKeyspaceIds(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteKeyRanges(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Begin(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Commit(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Rollback(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def SplitQuery(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetSrvKeyspace(self, request, context):
    raise NotImplementedError()

class BetaVitessStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Execute(self, request, timeout):
    raise NotImplementedError()
  Execute.future = None
  @abc.abstractmethod
  def ExecuteShards(self, request, timeout):
    raise NotImplementedError()
  ExecuteShards.future = None
  @abc.abstractmethod
  def ExecuteKeyspaceIds(self, request, timeout):
    raise NotImplementedError()
  ExecuteKeyspaceIds.future = None
  @abc.abstractmethod
  def ExecuteKeyRanges(self, request, timeout):
    raise NotImplementedError()
  ExecuteKeyRanges.future = None
  @abc.abstractmethod
  def ExecuteEntityIds(self, request, timeout):
    raise NotImplementedError()
  ExecuteEntityIds.future = None
  @abc.abstractmethod
  def ExecuteBatchShards(self, request, timeout):
    raise NotImplementedError()
  ExecuteBatchShards.future = None
  @abc.abstractmethod
  def ExecuteBatchKeyspaceIds(self, request, timeout):
    raise NotImplementedError()
  ExecuteBatchKeyspaceIds.future = None
  @abc.abstractmethod
  def StreamExecute(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteShards(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteKeyspaceIds(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def StreamExecuteKeyRanges(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def Begin(self, request, timeout):
    raise NotImplementedError()
  Begin.future = None
  @abc.abstractmethod
  def Commit(self, request, timeout):
    raise NotImplementedError()
  Commit.future = None
  @abc.abstractmethod
  def Rollback(self, request, timeout):
    raise NotImplementedError()
  Rollback.future = None
  @abc.abstractmethod
  def SplitQuery(self, request, timeout):
    raise NotImplementedError()
  SplitQuery.future = None
  @abc.abstractmethod
  def GetSrvKeyspace(self, request, timeout):
    raise NotImplementedError()
  GetSrvKeyspace.future = None

def beta_create_Vitess_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  request_deserializers = {
    ('vtgateservice.Vitess', 'Begin'): vtgate_pb2.BeginRequest.FromString,
    ('vtgateservice.Vitess', 'Commit'): vtgate_pb2.CommitRequest.FromString,
    ('vtgateservice.Vitess', 'Execute'): vtgate_pb2.ExecuteRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteBatchKeyspaceIds'): vtgate_pb2.ExecuteBatchKeyspaceIdsRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteBatchShards'): vtgate_pb2.ExecuteBatchShardsRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteEntityIds'): vtgate_pb2.ExecuteEntityIdsRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteKeyRanges'): vtgate_pb2.ExecuteKeyRangesRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteKeyspaceIds'): vtgate_pb2.ExecuteKeyspaceIdsRequest.FromString,
    ('vtgateservice.Vitess', 'ExecuteShards'): vtgate_pb2.ExecuteShardsRequest.FromString,
    ('vtgateservice.Vitess', 'GetSrvKeyspace'): vtgate_pb2.GetSrvKeyspaceRequest.FromString,
    ('vtgateservice.Vitess', 'Rollback'): vtgate_pb2.RollbackRequest.FromString,
    ('vtgateservice.Vitess', 'SplitQuery'): vtgate_pb2.SplitQueryRequest.FromString,
    ('vtgateservice.Vitess', 'StreamExecute'): vtgate_pb2.StreamExecuteRequest.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyRanges'): vtgate_pb2.StreamExecuteKeyRangesRequest.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyspaceIds'): vtgate_pb2.StreamExecuteKeyspaceIdsRequest.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteShards'): vtgate_pb2.StreamExecuteShardsRequest.FromString,
  }
  response_serializers = {
    ('vtgateservice.Vitess', 'Begin'): vtgate_pb2.BeginResponse.SerializeToString,
    ('vtgateservice.Vitess', 'Commit'): vtgate_pb2.CommitResponse.SerializeToString,
    ('vtgateservice.Vitess', 'Execute'): vtgate_pb2.ExecuteResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteBatchKeyspaceIds'): vtgate_pb2.ExecuteBatchKeyspaceIdsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteBatchShards'): vtgate_pb2.ExecuteBatchShardsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteEntityIds'): vtgate_pb2.ExecuteEntityIdsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteKeyRanges'): vtgate_pb2.ExecuteKeyRangesResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteKeyspaceIds'): vtgate_pb2.ExecuteKeyspaceIdsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteShards'): vtgate_pb2.ExecuteShardsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'GetSrvKeyspace'): vtgate_pb2.GetSrvKeyspaceResponse.SerializeToString,
    ('vtgateservice.Vitess', 'Rollback'): vtgate_pb2.RollbackResponse.SerializeToString,
    ('vtgateservice.Vitess', 'SplitQuery'): vtgate_pb2.SplitQueryResponse.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecute'): vtgate_pb2.StreamExecuteResponse.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyRanges'): vtgate_pb2.StreamExecuteKeyRangesResponse.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyspaceIds'): vtgate_pb2.StreamExecuteKeyspaceIdsResponse.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteShards'): vtgate_pb2.StreamExecuteShardsResponse.SerializeToString,
  }
  method_implementations = {
    ('vtgateservice.Vitess', 'Begin'): face_utilities.unary_unary_inline(servicer.Begin),
    ('vtgateservice.Vitess', 'Commit'): face_utilities.unary_unary_inline(servicer.Commit),
    ('vtgateservice.Vitess', 'Execute'): face_utilities.unary_unary_inline(servicer.Execute),
    ('vtgateservice.Vitess', 'ExecuteBatchKeyspaceIds'): face_utilities.unary_unary_inline(servicer.ExecuteBatchKeyspaceIds),
    ('vtgateservice.Vitess', 'ExecuteBatchShards'): face_utilities.unary_unary_inline(servicer.ExecuteBatchShards),
    ('vtgateservice.Vitess', 'ExecuteEntityIds'): face_utilities.unary_unary_inline(servicer.ExecuteEntityIds),
    ('vtgateservice.Vitess', 'ExecuteKeyRanges'): face_utilities.unary_unary_inline(servicer.ExecuteKeyRanges),
    ('vtgateservice.Vitess', 'ExecuteKeyspaceIds'): face_utilities.unary_unary_inline(servicer.ExecuteKeyspaceIds),
    ('vtgateservice.Vitess', 'ExecuteShards'): face_utilities.unary_unary_inline(servicer.ExecuteShards),
    ('vtgateservice.Vitess', 'GetSrvKeyspace'): face_utilities.unary_unary_inline(servicer.GetSrvKeyspace),
    ('vtgateservice.Vitess', 'Rollback'): face_utilities.unary_unary_inline(servicer.Rollback),
    ('vtgateservice.Vitess', 'SplitQuery'): face_utilities.unary_unary_inline(servicer.SplitQuery),
    ('vtgateservice.Vitess', 'StreamExecute'): face_utilities.unary_stream_inline(servicer.StreamExecute),
    ('vtgateservice.Vitess', 'StreamExecuteKeyRanges'): face_utilities.unary_stream_inline(servicer.StreamExecuteKeyRanges),
    ('vtgateservice.Vitess', 'StreamExecuteKeyspaceIds'): face_utilities.unary_stream_inline(servicer.StreamExecuteKeyspaceIds),
    ('vtgateservice.Vitess', 'StreamExecuteShards'): face_utilities.unary_stream_inline(servicer.StreamExecuteShards),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_Vitess_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  import vtgate_pb2
  request_serializers = {
    ('vtgateservice.Vitess', 'Begin'): vtgate_pb2.BeginRequest.SerializeToString,
    ('vtgateservice.Vitess', 'Commit'): vtgate_pb2.CommitRequest.SerializeToString,
    ('vtgateservice.Vitess', 'Execute'): vtgate_pb2.ExecuteRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteBatchKeyspaceIds'): vtgate_pb2.ExecuteBatchKeyspaceIdsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteBatchShards'): vtgate_pb2.ExecuteBatchShardsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteEntityIds'): vtgate_pb2.ExecuteEntityIdsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteKeyRanges'): vtgate_pb2.ExecuteKeyRangesRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteKeyspaceIds'): vtgate_pb2.ExecuteKeyspaceIdsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'ExecuteShards'): vtgate_pb2.ExecuteShardsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'GetSrvKeyspace'): vtgate_pb2.GetSrvKeyspaceRequest.SerializeToString,
    ('vtgateservice.Vitess', 'Rollback'): vtgate_pb2.RollbackRequest.SerializeToString,
    ('vtgateservice.Vitess', 'SplitQuery'): vtgate_pb2.SplitQueryRequest.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecute'): vtgate_pb2.StreamExecuteRequest.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyRanges'): vtgate_pb2.StreamExecuteKeyRangesRequest.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyspaceIds'): vtgate_pb2.StreamExecuteKeyspaceIdsRequest.SerializeToString,
    ('vtgateservice.Vitess', 'StreamExecuteShards'): vtgate_pb2.StreamExecuteShardsRequest.SerializeToString,
  }
  response_deserializers = {
    ('vtgateservice.Vitess', 'Begin'): vtgate_pb2.BeginResponse.FromString,
    ('vtgateservice.Vitess', 'Commit'): vtgate_pb2.CommitResponse.FromString,
    ('vtgateservice.Vitess', 'Execute'): vtgate_pb2.ExecuteResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteBatchKeyspaceIds'): vtgate_pb2.ExecuteBatchKeyspaceIdsResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteBatchShards'): vtgate_pb2.ExecuteBatchShardsResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteEntityIds'): vtgate_pb2.ExecuteEntityIdsResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteKeyRanges'): vtgate_pb2.ExecuteKeyRangesResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteKeyspaceIds'): vtgate_pb2.ExecuteKeyspaceIdsResponse.FromString,
    ('vtgateservice.Vitess', 'ExecuteShards'): vtgate_pb2.ExecuteShardsResponse.FromString,
    ('vtgateservice.Vitess', 'GetSrvKeyspace'): vtgate_pb2.GetSrvKeyspaceResponse.FromString,
    ('vtgateservice.Vitess', 'Rollback'): vtgate_pb2.RollbackResponse.FromString,
    ('vtgateservice.Vitess', 'SplitQuery'): vtgate_pb2.SplitQueryResponse.FromString,
    ('vtgateservice.Vitess', 'StreamExecute'): vtgate_pb2.StreamExecuteResponse.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyRanges'): vtgate_pb2.StreamExecuteKeyRangesResponse.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteKeyspaceIds'): vtgate_pb2.StreamExecuteKeyspaceIdsResponse.FromString,
    ('vtgateservice.Vitess', 'StreamExecuteShards'): vtgate_pb2.StreamExecuteShardsResponse.FromString,
  }
  cardinalities = {
    'Begin': cardinality.Cardinality.UNARY_UNARY,
    'Commit': cardinality.Cardinality.UNARY_UNARY,
    'Execute': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteBatchKeyspaceIds': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteBatchShards': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteEntityIds': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteKeyRanges': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteKeyspaceIds': cardinality.Cardinality.UNARY_UNARY,
    'ExecuteShards': cardinality.Cardinality.UNARY_UNARY,
    'GetSrvKeyspace': cardinality.Cardinality.UNARY_UNARY,
    'Rollback': cardinality.Cardinality.UNARY_UNARY,
    'SplitQuery': cardinality.Cardinality.UNARY_UNARY,
    'StreamExecute': cardinality.Cardinality.UNARY_STREAM,
    'StreamExecuteKeyRanges': cardinality.Cardinality.UNARY_STREAM,
    'StreamExecuteKeyspaceIds': cardinality.Cardinality.UNARY_STREAM,
    'StreamExecuteShards': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'vtgateservice.Vitess', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
