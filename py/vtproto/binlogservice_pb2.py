# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: binlogservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import binlogdata_pb2 as binlogdata__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='binlogservice.proto',
  package='binlogservice',
  syntax='proto3',
  serialized_pb=_b('\n\x13\x62inlogservice.proto\x12\rbinlogservice\x1a\x10\x62inlogdata.proto2\xc2\x01\n\x0cUpdateStream\x12[\n\x0eStreamKeyRange\x12!.binlogdata.StreamKeyRangeRequest\x1a\".binlogdata.StreamKeyRangeResponse\"\x00\x30\x01\x12U\n\x0cStreamTables\x12\x1f.binlogdata.StreamTablesRequest\x1a .binlogdata.StreamTablesResponse\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[binlogdata__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class UpdateStreamStub(object):
  """UpdateStream is the RPC version of binlog.UpdateStream.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamKeyRange = channel.unary_stream(
        '/binlogservice.UpdateStream/StreamKeyRange',
        request_serializer=binlogdata__pb2.StreamKeyRangeRequest.SerializeToString,
        response_deserializer=binlogdata__pb2.StreamKeyRangeResponse.FromString,
        )
    self.StreamTables = channel.unary_stream(
        '/binlogservice.UpdateStream/StreamTables',
        request_serializer=binlogdata__pb2.StreamTablesRequest.SerializeToString,
        response_deserializer=binlogdata__pb2.StreamTablesResponse.FromString,
        )


class UpdateStreamServicer(object):
  """UpdateStream is the RPC version of binlog.UpdateStream.
  """

  def StreamKeyRange(self, request, context):
    """StreamKeyRange returns the binlog transactions related to
    the specified Keyrange.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamTables(self, request, context):
    """StreamTables returns the binlog transactions related to
    the specified Tables.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UpdateStreamServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamKeyRange': grpc.unary_stream_rpc_method_handler(
          servicer.StreamKeyRange,
          request_deserializer=binlogdata__pb2.StreamKeyRangeRequest.FromString,
          response_serializer=binlogdata__pb2.StreamKeyRangeResponse.SerializeToString,
      ),
      'StreamTables': grpc.unary_stream_rpc_method_handler(
          servicer.StreamTables,
          request_deserializer=binlogdata__pb2.StreamTablesRequest.FromString,
          response_serializer=binlogdata__pb2.StreamTablesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binlogservice.UpdateStream', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaUpdateStreamServicer(object):
  """UpdateStream is the RPC version of binlog.UpdateStream.
  """
  def StreamKeyRange(self, request, context):
    """StreamKeyRange returns the binlog transactions related to
    the specified Keyrange.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def StreamTables(self, request, context):
    """StreamTables returns the binlog transactions related to
    the specified Tables.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaUpdateStreamStub(object):
  """UpdateStream is the RPC version of binlog.UpdateStream.
  """
  def StreamKeyRange(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """StreamKeyRange returns the binlog transactions related to
    the specified Keyrange.
    """
    raise NotImplementedError()
  def StreamTables(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """StreamTables returns the binlog transactions related to
    the specified Tables.
    """
    raise NotImplementedError()


def beta_create_UpdateStream_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('binlogservice.UpdateStream', 'StreamKeyRange'): binlogdata__pb2.StreamKeyRangeRequest.FromString,
    ('binlogservice.UpdateStream', 'StreamTables'): binlogdata__pb2.StreamTablesRequest.FromString,
  }
  response_serializers = {
    ('binlogservice.UpdateStream', 'StreamKeyRange'): binlogdata__pb2.StreamKeyRangeResponse.SerializeToString,
    ('binlogservice.UpdateStream', 'StreamTables'): binlogdata__pb2.StreamTablesResponse.SerializeToString,
  }
  method_implementations = {
    ('binlogservice.UpdateStream', 'StreamKeyRange'): face_utilities.unary_stream_inline(servicer.StreamKeyRange),
    ('binlogservice.UpdateStream', 'StreamTables'): face_utilities.unary_stream_inline(servicer.StreamTables),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_UpdateStream_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('binlogservice.UpdateStream', 'StreamKeyRange'): binlogdata__pb2.StreamKeyRangeRequest.SerializeToString,
    ('binlogservice.UpdateStream', 'StreamTables'): binlogdata__pb2.StreamTablesRequest.SerializeToString,
  }
  response_deserializers = {
    ('binlogservice.UpdateStream', 'StreamKeyRange'): binlogdata__pb2.StreamKeyRangeResponse.FromString,
    ('binlogservice.UpdateStream', 'StreamTables'): binlogdata__pb2.StreamTablesResponse.FromString,
  }
  cardinalities = {
    'StreamKeyRange': cardinality.Cardinality.UNARY_STREAM,
    'StreamTables': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'binlogservice.UpdateStream', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
