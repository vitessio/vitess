# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vtworkerservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import vtworkerdata_pb2 as vtworkerdata__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='vtworkerservice.proto',
  package='vtworkerservice',
  syntax='proto3',
  serialized_pb=_b('\n\x15vtworkerservice.proto\x12\x0fvtworkerservice\x1a\x12vtworkerdata.proto2\x83\x01\n\x08Vtworker\x12w\n\x16\x45xecuteVtworkerCommand\x12+.vtworkerdata.ExecuteVtworkerCommandRequest\x1a,.vtworkerdata.ExecuteVtworkerCommandResponse\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[vtworkerdata__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterVtworkerServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def ExecuteVtworkerCommand(self, request, context):
    raise NotImplementedError()
class EarlyAdopterVtworkerServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterVtworkerStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def ExecuteVtworkerCommand(self, request):
    raise NotImplementedError()
  ExecuteVtworkerCommand.async = None
def early_adopter_create_Vtworker_server(servicer, port, private_key=None, certificate_chain=None):
  import vtworkerdata_pb2
  import vtworkerdata_pb2
  method_service_descriptions = {
    "ExecuteVtworkerCommand": utilities.unary_stream_service_description(
      servicer.ExecuteVtworkerCommand,
      vtworkerdata_pb2.ExecuteVtworkerCommandRequest.FromString,
      vtworkerdata_pb2.ExecuteVtworkerCommandResponse.SerializeToString,
    ),
  }
  return implementations.server("vtworkerservice.Vtworker", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_Vtworker_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import vtworkerdata_pb2
  import vtworkerdata_pb2
  method_invocation_descriptions = {
    "ExecuteVtworkerCommand": utilities.unary_stream_invocation_description(
      vtworkerdata_pb2.ExecuteVtworkerCommandRequest.SerializeToString,
      vtworkerdata_pb2.ExecuteVtworkerCommandResponse.FromString,
    ),
  }
  return implementations.stub("vtworkerservice.Vtworker", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
