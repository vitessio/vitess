# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vtctlservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import vtctldata_pb2 as vtctldata__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='vtctlservice.proto',
  package='vtctlservice',
  syntax='proto3',
  serialized_pb=_b('\n\x12vtctlservice.proto\x12\x0cvtctlservice\x1a\x0fvtctldata.proto2q\n\x05Vtctl\x12h\n\x13\x45xecuteVtctlCommand\x12%.vtctldata.ExecuteVtctlCommandRequest\x1a&.vtctldata.ExecuteVtctlCommandResponse\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[vtctldata__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class VtctlStub(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExecuteVtctlCommand = channel.unary_stream(
        '/vtctlservice.Vtctl/ExecuteVtctlCommand',
        request_serializer=vtctldata__pb2.ExecuteVtctlCommandRequest.SerializeToString,
        response_deserializer=vtctldata__pb2.ExecuteVtctlCommandResponse.FromString,
        )


class VtctlServicer(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """

  def ExecuteVtctlCommand(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VtctlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExecuteVtctlCommand': grpc.unary_stream_rpc_method_handler(
          servicer.ExecuteVtctlCommand,
          request_deserializer=vtctldata__pb2.ExecuteVtctlCommandRequest.FromString,
          response_serializer=vtctldata__pb2.ExecuteVtctlCommandResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vtctlservice.Vtctl', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaVtctlServicer(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """
  def ExecuteVtctlCommand(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaVtctlStub(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """
  def ExecuteVtctlCommand(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Vtctl_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('vtctlservice.Vtctl', 'ExecuteVtctlCommand'): vtctldata__pb2.ExecuteVtctlCommandRequest.FromString,
  }
  response_serializers = {
    ('vtctlservice.Vtctl', 'ExecuteVtctlCommand'): vtctldata__pb2.ExecuteVtctlCommandResponse.SerializeToString,
  }
  method_implementations = {
    ('vtctlservice.Vtctl', 'ExecuteVtctlCommand'): face_utilities.unary_stream_inline(servicer.ExecuteVtctlCommand),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Vtctl_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('vtctlservice.Vtctl', 'ExecuteVtctlCommand'): vtctldata__pb2.ExecuteVtctlCommandRequest.SerializeToString,
  }
  response_deserializers = {
    ('vtctlservice.Vtctl', 'ExecuteVtctlCommand'): vtctldata__pb2.ExecuteVtctlCommandResponse.FromString,
  }
  cardinalities = {
    'ExecuteVtctlCommand': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'vtctlservice.Vtctl', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
