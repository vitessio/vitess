# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import binlogdata_pb2 as binlogdata__pb2
import query_pb2 as query__pb2


class QueryStub(object):
  """Query defines the tablet query service, implemented by vttablet.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Execute = channel.unary_unary(
        '/queryservice.Query/Execute',
        request_serializer=query__pb2.ExecuteRequest.SerializeToString,
        response_deserializer=query__pb2.ExecuteResponse.FromString,
        )
    self.ExecuteBatch = channel.unary_unary(
        '/queryservice.Query/ExecuteBatch',
        request_serializer=query__pb2.ExecuteBatchRequest.SerializeToString,
        response_deserializer=query__pb2.ExecuteBatchResponse.FromString,
        )
    self.StreamExecute = channel.unary_stream(
        '/queryservice.Query/StreamExecute',
        request_serializer=query__pb2.StreamExecuteRequest.SerializeToString,
        response_deserializer=query__pb2.StreamExecuteResponse.FromString,
        )
    self.Begin = channel.unary_unary(
        '/queryservice.Query/Begin',
        request_serializer=query__pb2.BeginRequest.SerializeToString,
        response_deserializer=query__pb2.BeginResponse.FromString,
        )
    self.Commit = channel.unary_unary(
        '/queryservice.Query/Commit',
        request_serializer=query__pb2.CommitRequest.SerializeToString,
        response_deserializer=query__pb2.CommitResponse.FromString,
        )
    self.Rollback = channel.unary_unary(
        '/queryservice.Query/Rollback',
        request_serializer=query__pb2.RollbackRequest.SerializeToString,
        response_deserializer=query__pb2.RollbackResponse.FromString,
        )
    self.Prepare = channel.unary_unary(
        '/queryservice.Query/Prepare',
        request_serializer=query__pb2.PrepareRequest.SerializeToString,
        response_deserializer=query__pb2.PrepareResponse.FromString,
        )
    self.CommitPrepared = channel.unary_unary(
        '/queryservice.Query/CommitPrepared',
        request_serializer=query__pb2.CommitPreparedRequest.SerializeToString,
        response_deserializer=query__pb2.CommitPreparedResponse.FromString,
        )
    self.RollbackPrepared = channel.unary_unary(
        '/queryservice.Query/RollbackPrepared',
        request_serializer=query__pb2.RollbackPreparedRequest.SerializeToString,
        response_deserializer=query__pb2.RollbackPreparedResponse.FromString,
        )
    self.CreateTransaction = channel.unary_unary(
        '/queryservice.Query/CreateTransaction',
        request_serializer=query__pb2.CreateTransactionRequest.SerializeToString,
        response_deserializer=query__pb2.CreateTransactionResponse.FromString,
        )
    self.StartCommit = channel.unary_unary(
        '/queryservice.Query/StartCommit',
        request_serializer=query__pb2.StartCommitRequest.SerializeToString,
        response_deserializer=query__pb2.StartCommitResponse.FromString,
        )
    self.SetRollback = channel.unary_unary(
        '/queryservice.Query/SetRollback',
        request_serializer=query__pb2.SetRollbackRequest.SerializeToString,
        response_deserializer=query__pb2.SetRollbackResponse.FromString,
        )
    self.ConcludeTransaction = channel.unary_unary(
        '/queryservice.Query/ConcludeTransaction',
        request_serializer=query__pb2.ConcludeTransactionRequest.SerializeToString,
        response_deserializer=query__pb2.ConcludeTransactionResponse.FromString,
        )
    self.ReadTransaction = channel.unary_unary(
        '/queryservice.Query/ReadTransaction',
        request_serializer=query__pb2.ReadTransactionRequest.SerializeToString,
        response_deserializer=query__pb2.ReadTransactionResponse.FromString,
        )
    self.BeginExecute = channel.unary_unary(
        '/queryservice.Query/BeginExecute',
        request_serializer=query__pb2.BeginExecuteRequest.SerializeToString,
        response_deserializer=query__pb2.BeginExecuteResponse.FromString,
        )
    self.BeginExecuteBatch = channel.unary_unary(
        '/queryservice.Query/BeginExecuteBatch',
        request_serializer=query__pb2.BeginExecuteBatchRequest.SerializeToString,
        response_deserializer=query__pb2.BeginExecuteBatchResponse.FromString,
        )
    self.MessageStream = channel.unary_stream(
        '/queryservice.Query/MessageStream',
        request_serializer=query__pb2.MessageStreamRequest.SerializeToString,
        response_deserializer=query__pb2.MessageStreamResponse.FromString,
        )
    self.MessageAck = channel.unary_unary(
        '/queryservice.Query/MessageAck',
        request_serializer=query__pb2.MessageAckRequest.SerializeToString,
        response_deserializer=query__pb2.MessageAckResponse.FromString,
        )
    self.SplitQuery = channel.unary_unary(
        '/queryservice.Query/SplitQuery',
        request_serializer=query__pb2.SplitQueryRequest.SerializeToString,
        response_deserializer=query__pb2.SplitQueryResponse.FromString,
        )
    self.StreamHealth = channel.unary_stream(
        '/queryservice.Query/StreamHealth',
        request_serializer=query__pb2.StreamHealthRequest.SerializeToString,
        response_deserializer=query__pb2.StreamHealthResponse.FromString,
        )
    self.UpdateStream = channel.unary_stream(
        '/queryservice.Query/UpdateStream',
        request_serializer=query__pb2.UpdateStreamRequest.SerializeToString,
        response_deserializer=query__pb2.UpdateStreamResponse.FromString,
        )
    self.VStream = channel.unary_stream(
        '/queryservice.Query/VStream',
        request_serializer=binlogdata__pb2.VStreamRequest.SerializeToString,
        response_deserializer=binlogdata__pb2.VStreamResponse.FromString,
        )
    self.VStreamRows = channel.unary_stream(
        '/queryservice.Query/VStreamRows',
        request_serializer=binlogdata__pb2.VStreamRowsRequest.SerializeToString,
        response_deserializer=binlogdata__pb2.VStreamRowsResponse.FromString,
        )
    self.VStreamResults = channel.unary_stream(
        '/queryservice.Query/VStreamResults',
        request_serializer=binlogdata__pb2.VStreamResultsRequest.SerializeToString,
        response_deserializer=binlogdata__pb2.VStreamResultsResponse.FromString,
        )


class QueryServicer(object):
  """Query defines the tablet query service, implemented by vttablet.
  """

  def Execute(self, request, context):
    """Execute executes the specified SQL query (might be in a
    transaction context, if Query.transaction_id is set).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExecuteBatch(self, request, context):
    """ExecuteBatch executes a list of queries, and returns the result
    for each query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamExecute(self, request, context):
    """StreamExecute executes a streaming query. Use this method if the
    query returns a large number of rows. The first QueryResult will
    contain the Fields, subsequent QueryResult messages will contain
    the rows.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Begin(self, request, context):
    """Begin a transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Commit(self, request, context):
    """Commit a transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Rollback(self, request, context):
    """Rollback a transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Prepare(self, request, context):
    """Prepare preares a transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitPrepared(self, request, context):
    """CommitPrepared commits a prepared transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RollbackPrepared(self, request, context):
    """RollbackPrepared rolls back a prepared transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateTransaction(self, request, context):
    """CreateTransaction creates the metadata for a 2pc transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartCommit(self, request, context):
    """StartCommit initiates a commit for a 2pc transaction.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetRollback(self, request, context):
    """SetRollback marks the 2pc transaction for rollback.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ConcludeTransaction(self, request, context):
    """ConcludeTransaction marks the 2pc transaction as resolved.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReadTransaction(self, request, context):
    """ReadTransaction returns the 2pc transaction info.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BeginExecute(self, request, context):
    """BeginExecute executes a begin and the specified SQL query.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BeginExecuteBatch(self, request, context):
    """BeginExecuteBatch executes a begin and a list of queries.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MessageStream(self, request, context):
    """MessageStream streams messages from a message table.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MessageAck(self, request, context):
    """MessageAck acks messages for a table.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SplitQuery(self, request, context):
    """SplitQuery is the API to facilitate MapReduce-type iterations
    over large data sets (like full table dumps).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamHealth(self, request, context):
    """StreamHealth runs a streaming RPC to the tablet, that returns the
    current health of the tablet on a regular basis.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateStream(self, request, context):
    """UpdateStream asks the server to return a stream of the updates that have been applied to its database.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VStream(self, request, context):
    """VStream streams vreplication events.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VStreamRows(self, request, context):
    """VStreamRows streams rows from the specified starting point.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VStreamResults(self, request, context):
    """VStreamResults streams results along with the gtid of the snapshot.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Execute': grpc.unary_unary_rpc_method_handler(
          servicer.Execute,
          request_deserializer=query__pb2.ExecuteRequest.FromString,
          response_serializer=query__pb2.ExecuteResponse.SerializeToString,
      ),
      'ExecuteBatch': grpc.unary_unary_rpc_method_handler(
          servicer.ExecuteBatch,
          request_deserializer=query__pb2.ExecuteBatchRequest.FromString,
          response_serializer=query__pb2.ExecuteBatchResponse.SerializeToString,
      ),
      'StreamExecute': grpc.unary_stream_rpc_method_handler(
          servicer.StreamExecute,
          request_deserializer=query__pb2.StreamExecuteRequest.FromString,
          response_serializer=query__pb2.StreamExecuteResponse.SerializeToString,
      ),
      'Begin': grpc.unary_unary_rpc_method_handler(
          servicer.Begin,
          request_deserializer=query__pb2.BeginRequest.FromString,
          response_serializer=query__pb2.BeginResponse.SerializeToString,
      ),
      'Commit': grpc.unary_unary_rpc_method_handler(
          servicer.Commit,
          request_deserializer=query__pb2.CommitRequest.FromString,
          response_serializer=query__pb2.CommitResponse.SerializeToString,
      ),
      'Rollback': grpc.unary_unary_rpc_method_handler(
          servicer.Rollback,
          request_deserializer=query__pb2.RollbackRequest.FromString,
          response_serializer=query__pb2.RollbackResponse.SerializeToString,
      ),
      'Prepare': grpc.unary_unary_rpc_method_handler(
          servicer.Prepare,
          request_deserializer=query__pb2.PrepareRequest.FromString,
          response_serializer=query__pb2.PrepareResponse.SerializeToString,
      ),
      'CommitPrepared': grpc.unary_unary_rpc_method_handler(
          servicer.CommitPrepared,
          request_deserializer=query__pb2.CommitPreparedRequest.FromString,
          response_serializer=query__pb2.CommitPreparedResponse.SerializeToString,
      ),
      'RollbackPrepared': grpc.unary_unary_rpc_method_handler(
          servicer.RollbackPrepared,
          request_deserializer=query__pb2.RollbackPreparedRequest.FromString,
          response_serializer=query__pb2.RollbackPreparedResponse.SerializeToString,
      ),
      'CreateTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.CreateTransaction,
          request_deserializer=query__pb2.CreateTransactionRequest.FromString,
          response_serializer=query__pb2.CreateTransactionResponse.SerializeToString,
      ),
      'StartCommit': grpc.unary_unary_rpc_method_handler(
          servicer.StartCommit,
          request_deserializer=query__pb2.StartCommitRequest.FromString,
          response_serializer=query__pb2.StartCommitResponse.SerializeToString,
      ),
      'SetRollback': grpc.unary_unary_rpc_method_handler(
          servicer.SetRollback,
          request_deserializer=query__pb2.SetRollbackRequest.FromString,
          response_serializer=query__pb2.SetRollbackResponse.SerializeToString,
      ),
      'ConcludeTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.ConcludeTransaction,
          request_deserializer=query__pb2.ConcludeTransactionRequest.FromString,
          response_serializer=query__pb2.ConcludeTransactionResponse.SerializeToString,
      ),
      'ReadTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.ReadTransaction,
          request_deserializer=query__pb2.ReadTransactionRequest.FromString,
          response_serializer=query__pb2.ReadTransactionResponse.SerializeToString,
      ),
      'BeginExecute': grpc.unary_unary_rpc_method_handler(
          servicer.BeginExecute,
          request_deserializer=query__pb2.BeginExecuteRequest.FromString,
          response_serializer=query__pb2.BeginExecuteResponse.SerializeToString,
      ),
      'BeginExecuteBatch': grpc.unary_unary_rpc_method_handler(
          servicer.BeginExecuteBatch,
          request_deserializer=query__pb2.BeginExecuteBatchRequest.FromString,
          response_serializer=query__pb2.BeginExecuteBatchResponse.SerializeToString,
      ),
      'MessageStream': grpc.unary_stream_rpc_method_handler(
          servicer.MessageStream,
          request_deserializer=query__pb2.MessageStreamRequest.FromString,
          response_serializer=query__pb2.MessageStreamResponse.SerializeToString,
      ),
      'MessageAck': grpc.unary_unary_rpc_method_handler(
          servicer.MessageAck,
          request_deserializer=query__pb2.MessageAckRequest.FromString,
          response_serializer=query__pb2.MessageAckResponse.SerializeToString,
      ),
      'SplitQuery': grpc.unary_unary_rpc_method_handler(
          servicer.SplitQuery,
          request_deserializer=query__pb2.SplitQueryRequest.FromString,
          response_serializer=query__pb2.SplitQueryResponse.SerializeToString,
      ),
      'StreamHealth': grpc.unary_stream_rpc_method_handler(
          servicer.StreamHealth,
          request_deserializer=query__pb2.StreamHealthRequest.FromString,
          response_serializer=query__pb2.StreamHealthResponse.SerializeToString,
      ),
      'UpdateStream': grpc.unary_stream_rpc_method_handler(
          servicer.UpdateStream,
          request_deserializer=query__pb2.UpdateStreamRequest.FromString,
          response_serializer=query__pb2.UpdateStreamResponse.SerializeToString,
      ),
      'VStream': grpc.unary_stream_rpc_method_handler(
          servicer.VStream,
          request_deserializer=binlogdata__pb2.VStreamRequest.FromString,
          response_serializer=binlogdata__pb2.VStreamResponse.SerializeToString,
      ),
      'VStreamRows': grpc.unary_stream_rpc_method_handler(
          servicer.VStreamRows,
          request_deserializer=binlogdata__pb2.VStreamRowsRequest.FromString,
          response_serializer=binlogdata__pb2.VStreamRowsResponse.SerializeToString,
      ),
      'VStreamResults': grpc.unary_stream_rpc_method_handler(
          servicer.VStreamResults,
          request_deserializer=binlogdata__pb2.VStreamResultsRequest.FromString,
          response_serializer=binlogdata__pb2.VStreamResultsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'queryservice.Query', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
