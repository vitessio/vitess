# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import vtctldata_pb2 as vtctldata__pb2


class VtctlStub(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExecuteVtctlCommand = channel.unary_stream(
        '/vtctlservice.Vtctl/ExecuteVtctlCommand',
        request_serializer=vtctldata__pb2.ExecuteVtctlCommandRequest.SerializeToString,
        response_deserializer=vtctldata__pb2.ExecuteVtctlCommandResponse.FromString,
        )


class VtctlServicer(object):
  """Service Vtctl allows you to call vt commands through gRPC.
  """

  def ExecuteVtctlCommand(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VtctlServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExecuteVtctlCommand': grpc.unary_stream_rpc_method_handler(
          servicer.ExecuteVtctlCommand,
          request_deserializer=vtctldata__pb2.ExecuteVtctlCommandRequest.FromString,
          response_serializer=vtctldata__pb2.ExecuteVtctlCommandResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vtctlservice.Vtctl', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
