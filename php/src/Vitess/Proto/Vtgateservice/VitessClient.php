<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: vtgateservice.proto

namespace Vitess\Proto\Vtgateservice {

  class VitessClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteRequest $input
     */
    public function Execute(\Vitess\Proto\Vtgate\ExecuteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/Execute', $argument, '\Vitess\Proto\Vtgate\ExecuteResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteShardsRequest $input
     */
    public function ExecuteShards(\Vitess\Proto\Vtgate\ExecuteShardsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteShards', $argument, '\Vitess\Proto\Vtgate\ExecuteShardsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteKeyspaceIdsRequest $input
     */
    public function ExecuteKeyspaceIds(\Vitess\Proto\Vtgate\ExecuteKeyspaceIdsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteKeyspaceIds', $argument, '\Vitess\Proto\Vtgate\ExecuteKeyspaceIdsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteKeyRangesRequest $input
     */
    public function ExecuteKeyRanges(\Vitess\Proto\Vtgate\ExecuteKeyRangesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteKeyRanges', $argument, '\Vitess\Proto\Vtgate\ExecuteKeyRangesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteEntityIdsRequest $input
     */
    public function ExecuteEntityIds(\Vitess\Proto\Vtgate\ExecuteEntityIdsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteEntityIds', $argument, '\Vitess\Proto\Vtgate\ExecuteEntityIdsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteBatchRequest $input
     */
    public function ExecuteBatch(\Vitess\Proto\Vtgate\ExecuteBatchRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteBatch', $argument, '\Vitess\Proto\Vtgate\ExecuteBatchResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteBatchShardsRequest $input
     */
    public function ExecuteBatchShards(\Vitess\Proto\Vtgate\ExecuteBatchShardsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteBatchShards', $argument, '\Vitess\Proto\Vtgate\ExecuteBatchShardsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ExecuteBatchKeyspaceIdsRequest $input
     */
    public function ExecuteBatchKeyspaceIds(\Vitess\Proto\Vtgate\ExecuteBatchKeyspaceIdsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ExecuteBatchKeyspaceIds', $argument, '\Vitess\Proto\Vtgate\ExecuteBatchKeyspaceIdsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\StreamExecuteRequest $input
     */
    public function StreamExecute($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/StreamExecute', $argument, '\Vitess\Proto\Vtgate\StreamExecuteResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\StreamExecuteShardsRequest $input
     */
    public function StreamExecuteShards($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/StreamExecuteShards', $argument, '\Vitess\Proto\Vtgate\StreamExecuteShardsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\StreamExecuteKeyspaceIdsRequest $input
     */
    public function StreamExecuteKeyspaceIds($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/StreamExecuteKeyspaceIds', $argument, '\Vitess\Proto\Vtgate\StreamExecuteKeyspaceIdsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\StreamExecuteKeyRangesRequest $input
     */
    public function StreamExecuteKeyRanges($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/StreamExecuteKeyRanges', $argument, '\Vitess\Proto\Vtgate\StreamExecuteKeyRangesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\BeginRequest $input
     */
    public function Begin(\Vitess\Proto\Vtgate\BeginRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/Begin', $argument, '\Vitess\Proto\Vtgate\BeginResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\CommitRequest $input
     */
    public function Commit(\Vitess\Proto\Vtgate\CommitRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/Commit', $argument, '\Vitess\Proto\Vtgate\CommitResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\RollbackRequest $input
     */
    public function Rollback(\Vitess\Proto\Vtgate\RollbackRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/Rollback', $argument, '\Vitess\Proto\Vtgate\RollbackResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\ResolveTransactionRequest $input
     */
    public function ResolveTransaction(\Vitess\Proto\Vtgate\ResolveTransactionRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/ResolveTransaction', $argument, '\Vitess\Proto\Vtgate\ResolveTransactionResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\MessageStreamRequest $input
     */
    public function MessageStream($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/MessageStream', $argument, '\Vitess\Proto\Query\MessageStreamResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\MessageAckRequest $input
     */
    public function MessageAck(\Vitess\Proto\Vtgate\MessageAckRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/MessageAck', $argument, '\Vitess\Proto\Query\MessageAckResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\SplitQueryRequest $input
     */
    public function SplitQuery(\Vitess\Proto\Vtgate\SplitQueryRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/SplitQuery', $argument, '\Vitess\Proto\Vtgate\SplitQueryResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\GetSrvKeyspaceRequest $input
     */
    public function GetSrvKeyspace(\Vitess\Proto\Vtgate\GetSrvKeyspaceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/vtgateservice.Vitess/GetSrvKeyspace', $argument, '\Vitess\Proto\Vtgate\GetSrvKeyspaceResponse::deserialize', $metadata, $options);
    }
    /**
     * @param Vitess\Proto\Vtgate\UpdateStreamRequest $input
     */
    public function UpdateStream($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/vtgateservice.Vitess/UpdateStream', $argument, '\Vitess\Proto\Vtgate\UpdateStreamResponse::deserialize', $metadata, $options);
    }
  }
}
