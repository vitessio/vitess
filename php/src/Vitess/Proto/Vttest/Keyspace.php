<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: vttest.proto

namespace Vitess\Proto\Vttest {

  class Keyspace extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \Vitess\Proto\Vttest\Shard[]  */
    public $shards = array();
    
    /**  @var string */
    public $sharding_column_name = null;
    
    /**  @var string */
    public $sharding_column_type = null;
    
    /**  @var string */
    public $redirect = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'vttest.Keyspace');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE shards = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "shards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Vttest\Shard';
      $descriptor->addField($f);

      // OPTIONAL STRING sharding_column_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sharding_column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sharding_column_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sharding_column_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING redirect = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "redirect";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <shards> has a value
     *
     * @return boolean
     */
    public function hasShards(){
      return $this->_has(2);
    }
    
    /**
     * Clear <shards> value
     *
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function clearShards(){
      return $this->_clear(2);
    }
    
    /**
     * Get <shards> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Vttest\Shard
     */
    public function getShards($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <shards> value
     *
     * @param \Vitess\Proto\Vttest\Shard $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function setShards(\Vitess\Proto\Vttest\Shard $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <shards>
     *
     * @return \Vitess\Proto\Vttest\Shard[]
     */
    public function getShardsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <shards>
     *
     * @param \Vitess\Proto\Vttest\Shard $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function addShards(\Vitess\Proto\Vttest\Shard $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <sharding_column_name> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sharding_column_name> value
     *
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function clearShardingColumnName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sharding_column_name> value
     *
     * @return string
     */
    public function getShardingColumnName(){
      return $this->_get(3);
    }
    
    /**
     * Set <sharding_column_name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function setShardingColumnName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sharding_column_type> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sharding_column_type> value
     *
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function clearShardingColumnType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sharding_column_type> value
     *
     * @return string
     */
    public function getShardingColumnType(){
      return $this->_get(4);
    }
    
    /**
     * Set <sharding_column_type> value
     *
     * @param string $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function setShardingColumnType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <redirect> has a value
     *
     * @return boolean
     */
    public function hasRedirect(){
      return $this->_has(5);
    }
    
    /**
     * Clear <redirect> value
     *
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function clearRedirect(){
      return $this->_clear(5);
    }
    
    /**
     * Get <redirect> value
     *
     * @return string
     */
    public function getRedirect(){
      return $this->_get(5);
    }
    
    /**
     * Set <redirect> value
     *
     * @param string $value
     * @return \Vitess\Proto\Vttest\Keyspace
     */
    public function setRedirect( $value){
      return $this->_set(5, $value);
    }
  }
}

