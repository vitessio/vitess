<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: automation.proto

namespace Vitess\Proto\Automation {

  class Task extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \Vitess\Proto\Automation\Task\ParametersEntry[]  */
    public $parameters = array();
    
    /**  @var string */
    public $id = null;
    
    /**  @var int - \Vitess\Proto\Automation\TaskState */
    public $state = null;
    
    /**  @var string */
    public $output = null;
    
    /**  @var string */
    public $error = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.Task');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Automation\Task\ParametersEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Automation\TaskState';
      $descriptor->addField($f);

      // OPTIONAL STRING output = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING error = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Automation\Task\ParametersEntry
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \Vitess\Proto\Automation\Task\ParametersEntry $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setParameters(\Vitess\Proto\Automation\Task\ParametersEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \Vitess\Proto\Automation\Task\ParametersEntry[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \Vitess\Proto\Automation\Task\ParametersEntry $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function addParameters(\Vitess\Proto\Automation\Task\ParametersEntry $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \Vitess\Proto\Automation\TaskState
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \Vitess\Proto\Automation\TaskState $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <output> has a value
     *
     * @return boolean
     */
    public function hasOutput(){
      return $this->_has(5);
    }
    
    /**
     * Clear <output> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearOutput(){
      return $this->_clear(5);
    }
    
    /**
     * Get <output> value
     *
     * @return string
     */
    public function getOutput(){
      return $this->_get(5);
    }
    
    /**
     * Set <output> value
     *
     * @param string $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setOutput( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(6);
    }
    
    /**
     * Clear <error> value
     *
     * @return \Vitess\Proto\Automation\Task
     */
    public function clearError(){
      return $this->_clear(6);
    }
    
    /**
     * Get <error> value
     *
     * @return string
     */
    public function getError(){
      return $this->_get(6);
    }
    
    /**
     * Set <error> value
     *
     * @param string $value
     * @return \Vitess\Proto\Automation\Task
     */
    public function setError( $value){
      return $this->_set(6, $value);
    }
  }
}

