<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: automation.proto
//   Date: 2016-01-22 01:34:21

namespace Vitess\Proto\Automation {

  class TaskContainer extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Automation\Task[]  */
    public $parallel_tasks = array();
    
    /**  @var int */
    public $concurrency = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.TaskContainer');

      // REPEATED MESSAGE parallel_tasks = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parallel_tasks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Automation\Task';
      $descriptor->addField($f);

      // OPTIONAL INT32 concurrency = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "concurrency";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parallel_tasks> has a value
     *
     * @return boolean
     */
    public function hasParallelTasks(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parallel_tasks> value
     *
     * @return \Vitess\Proto\Automation\TaskContainer
     */
    public function clearParallelTasks(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parallel_tasks> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Automation\Task
     */
    public function getParallelTasks($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <parallel_tasks> value
     *
     * @param \Vitess\Proto\Automation\Task $value
     * @return \Vitess\Proto\Automation\TaskContainer
     */
    public function setParallelTasks(\Vitess\Proto\Automation\Task $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <parallel_tasks>
     *
     * @return \Vitess\Proto\Automation\Task[]
     */
    public function getParallelTasksList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <parallel_tasks>
     *
     * @param \Vitess\Proto\Automation\Task $value
     * @return \Vitess\Proto\Automation\TaskContainer
     */
    public function addParallelTasks(\Vitess\Proto\Automation\Task $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <concurrency> has a value
     *
     * @return boolean
     */
    public function hasConcurrency(){
      return $this->_has(2);
    }
    
    /**
     * Clear <concurrency> value
     *
     * @return \Vitess\Proto\Automation\TaskContainer
     */
    public function clearConcurrency(){
      return $this->_clear(2);
    }
    
    /**
     * Get <concurrency> value
     *
     * @return int
     */
    public function getConcurrency(){
      return $this->_get(2);
    }
    
    /**
     * Set <concurrency> value
     *
     * @param int $value
     * @return \Vitess\Proto\Automation\TaskContainer
     */
    public function setConcurrency( $value){
      return $this->_set(2, $value);
    }
  }
}

