<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: workflow.proto

namespace Vitess\Proto\Workflow {

  class Task extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var int - \Vitess\Proto\Workflow\TaskState */
    public $state = null;
    
    /**  @var \Vitess\Proto\Workflow\Task\AttributesEntry[]  */
    public $attributes = array();
    
    /**  @var string */
    public $error = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'workflow.Task');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Workflow\TaskState';
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Workflow\Task\AttributesEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING error = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Vitess\Proto\Workflow\Task
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \Vitess\Proto\Workflow\Task
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \Vitess\Proto\Workflow\Task
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \Vitess\Proto\Workflow\TaskState
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \Vitess\Proto\Workflow\TaskState $value
     * @return \Vitess\Proto\Workflow\Task
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \Vitess\Proto\Workflow\Task
     */
    public function clearAttributes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Workflow\Task\AttributesEntry
     */
    public function getAttributes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \Vitess\Proto\Workflow\Task\AttributesEntry $value
     * @return \Vitess\Proto\Workflow\Task
     */
    public function setAttributes(\Vitess\Proto\Workflow\Task\AttributesEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \Vitess\Proto\Workflow\Task\AttributesEntry[]
     */
    public function getAttributesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \Vitess\Proto\Workflow\Task\AttributesEntry $value
     * @return \Vitess\Proto\Workflow\Task
     */
    public function addAttributes(\Vitess\Proto\Workflow\Task\AttributesEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(4);
    }
    
    /**
     * Clear <error> value
     *
     * @return \Vitess\Proto\Workflow\Task
     */
    public function clearError(){
      return $this->_clear(4);
    }
    
    /**
     * Get <error> value
     *
     * @return string
     */
    public function getError(){
      return $this->_get(4);
    }
    
    /**
     * Set <error> value
     *
     * @param string $value
     * @return \Vitess\Proto\Workflow\Task
     */
    public function setError( $value){
      return $this->_set(4, $value);
    }
  }
}

