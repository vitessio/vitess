<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: vtgate.proto
//   Date: 2016-01-22 01:34:42

namespace Vitess\Proto\Vtgate {

  class Session extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $in_transaction = null;
    
    /**  @var \Vitess\Proto\Vtgate\Session\ShardSession[]  */
    public $shard_sessions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'vtgate.Session');

      // OPTIONAL BOOL in_transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "in_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE shard_sessions = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "shard_sessions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Vtgate\Session\ShardSession';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <in_transaction> has a value
     *
     * @return boolean
     */
    public function hasInTransaction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <in_transaction> value
     *
     * @return \Vitess\Proto\Vtgate\Session
     */
    public function clearInTransaction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <in_transaction> value
     *
     * @return boolean
     */
    public function getInTransaction(){
      return $this->_get(1);
    }
    
    /**
     * Set <in_transaction> value
     *
     * @param boolean $value
     * @return \Vitess\Proto\Vtgate\Session
     */
    public function setInTransaction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <shard_sessions> has a value
     *
     * @return boolean
     */
    public function hasShardSessions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <shard_sessions> value
     *
     * @return \Vitess\Proto\Vtgate\Session
     */
    public function clearShardSessions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <shard_sessions> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Vtgate\Session\ShardSession
     */
    public function getShardSessions($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <shard_sessions> value
     *
     * @param \Vitess\Proto\Vtgate\Session\ShardSession $value
     * @return \Vitess\Proto\Vtgate\Session
     */
    public function setShardSessions(\Vitess\Proto\Vtgate\Session\ShardSession $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <shard_sessions>
     *
     * @return \Vitess\Proto\Vtgate\Session\ShardSession[]
     */
    public function getShardSessionsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <shard_sessions>
     *
     * @param \Vitess\Proto\Vtgate\Session\ShardSession $value
     * @return \Vitess\Proto\Vtgate\Session
     */
    public function addShardSessions(\Vitess\Proto\Vtgate\Session\ShardSession $value){
     return $this->_add(2, $value);
    }
  }
}

