<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: binlogdata.proto

namespace Vitess\Proto\Binlogdata\BinlogTransaction {

  class Statement extends \DrSlump\Protobuf\Message {

    /**  @var int - \Vitess\Proto\Binlogdata\BinlogTransaction\Statement\Category */
    public $category = null;
    
    /**  @var \Vitess\Proto\Binlogdata\Charset */
    public $charset = null;
    
    /**  @var string */
    public $sql = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.BinlogTransaction.Statement');

      // OPTIONAL ENUM category = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Binlogdata\BinlogTransaction\Statement\Category';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charset = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Binlogdata\Charset';
      $descriptor->addField($f);

      // OPTIONAL STRING sql = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <category> value
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function clearCategory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <category> value
     *
     * @return int - \Vitess\Proto\Binlogdata\BinlogTransaction\Statement\Category
     */
    public function getCategory(){
      return $this->_get(1);
    }
    
    /**
     * Set <category> value
     *
     * @param int - \Vitess\Proto\Binlogdata\BinlogTransaction\Statement\Category $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function setCategory( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function clearCharset(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charset> value
     *
     * @return \Vitess\Proto\Binlogdata\Charset
     */
    public function getCharset(){
      return $this->_get(2);
    }
    
    /**
     * Set <charset> value
     *
     * @param \Vitess\Proto\Binlogdata\Charset $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function setCharset(\Vitess\Proto\Binlogdata\Charset $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function clearSql(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(3);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \Vitess\Proto\Binlogdata\BinlogTransaction\Statement
     */
    public function setSql( $value){
      return $this->_set(3, $value);
    }
  }
}

