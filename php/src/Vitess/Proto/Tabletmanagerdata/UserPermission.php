<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: tabletmanagerdata.proto

namespace Vitess\Proto\Tabletmanagerdata {

  class UserPermission extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $host = null;
    
    /**  @var string */
    public $user = null;
    
    /**  @var int */
    public $password_checksum = null;
    
    /**  @var \Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry[]  */
    public $privileges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.UserPermission');

      // OPTIONAL STRING host = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING user = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 password_checksum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "password_checksum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE privileges = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "privileges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(1);
    }
    
    /**
     * Clear <host> value
     *
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function clearHost(){
      return $this->_clear(1);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(1);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function setHost( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(2);
    }
    
    /**
     * Clear <user> value
     *
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function clearUser(){
      return $this->_clear(2);
    }
    
    /**
     * Get <user> value
     *
     * @return string
     */
    public function getUser(){
      return $this->_get(2);
    }
    
    /**
     * Set <user> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function setUser( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <password_checksum> has a value
     *
     * @return boolean
     */
    public function hasPasswordChecksum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <password_checksum> value
     *
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function clearPasswordChecksum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <password_checksum> value
     *
     * @return int
     */
    public function getPasswordChecksum(){
      return $this->_get(3);
    }
    
    /**
     * Set <password_checksum> value
     *
     * @param int $value
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function setPasswordChecksum( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <privileges> has a value
     *
     * @return boolean
     */
    public function hasPrivileges(){
      return $this->_has(4);
    }
    
    /**
     * Clear <privileges> value
     *
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function clearPrivileges(){
      return $this->_clear(4);
    }
    
    /**
     * Get <privileges> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function getPrivileges($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <privileges> value
     *
     * @param \Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry $value
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function setPrivileges(\Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <privileges>
     *
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry[]
     */
    public function getPrivilegesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <privileges>
     *
     * @param \Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry $value
     * @return \Vitess\Proto\Tabletmanagerdata\UserPermission
     */
    public function addPrivileges(\Vitess\Proto\Tabletmanagerdata\UserPermission\PrivilegesEntry $value){
     return $this->_add(4, $value);
    }
  }
}

