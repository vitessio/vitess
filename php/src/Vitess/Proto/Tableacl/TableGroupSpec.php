<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: tableacl.proto

namespace Vitess\Proto\Tableacl {

  class TableGroupSpec extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $table_names_or_prefixes = array();
    
    /**  @var string[]  */
    public $readers = array();
    
    /**  @var string[]  */
    public $writers = array();
    
    /**  @var string[]  */
    public $admins = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tableacl.TableGroupSpec');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING table_names_or_prefixes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table_names_or_prefixes";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING readers = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "readers";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING writers = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "writers";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING admins = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "admins";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_names_or_prefixes> has a value
     *
     * @return boolean
     */
    public function hasTableNamesOrPrefixes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table_names_or_prefixes> value
     *
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function clearTableNamesOrPrefixes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table_names_or_prefixes> value
     *
     * @param int $idx
     * @return string
     */
    public function getTableNamesOrPrefixes($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <table_names_or_prefixes> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function setTableNamesOrPrefixes( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <table_names_or_prefixes>
     *
     * @return string[]
     */
    public function getTableNamesOrPrefixesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <table_names_or_prefixes>
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function addTableNamesOrPrefixes( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <readers> has a value
     *
     * @return boolean
     */
    public function hasReaders(){
      return $this->_has(3);
    }
    
    /**
     * Clear <readers> value
     *
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function clearReaders(){
      return $this->_clear(3);
    }
    
    /**
     * Get <readers> value
     *
     * @param int $idx
     * @return string
     */
    public function getReaders($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <readers> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function setReaders( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <readers>
     *
     * @return string[]
     */
    public function getReadersList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <readers>
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function addReaders( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <writers> has a value
     *
     * @return boolean
     */
    public function hasWriters(){
      return $this->_has(4);
    }
    
    /**
     * Clear <writers> value
     *
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function clearWriters(){
      return $this->_clear(4);
    }
    
    /**
     * Get <writers> value
     *
     * @param int $idx
     * @return string
     */
    public function getWriters($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <writers> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function setWriters( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <writers>
     *
     * @return string[]
     */
    public function getWritersList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <writers>
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function addWriters( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <admins> has a value
     *
     * @return boolean
     */
    public function hasAdmins(){
      return $this->_has(5);
    }
    
    /**
     * Clear <admins> value
     *
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function clearAdmins(){
      return $this->_clear(5);
    }
    
    /**
     * Get <admins> value
     *
     * @param int $idx
     * @return string
     */
    public function getAdmins($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <admins> value
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function setAdmins( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <admins>
     *
     * @return string[]
     */
    public function getAdminsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <admins>
     *
     * @param string $value
     * @return \Vitess\Proto\Tableacl\TableGroupSpec
     */
    public function addAdmins( $value){
     return $this->_add(5, $value);
    }
  }
}

