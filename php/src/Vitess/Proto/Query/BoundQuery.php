<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto
//   Date: 2016-01-22 01:34:42

namespace Vitess\Proto\Query {

  class BoundQuery extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sql = null;
    
    /**  @var \Vitess\Proto\Query\BoundQuery\BindVariablesEntry[]  */
    public $bind_variables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BoundQuery');

      // OPTIONAL STRING sql = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE bind_variables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bind_variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Query\BoundQuery\BindVariablesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function clearSql(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(1);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function setSql( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bind_variables> has a value
     *
     * @return boolean
     */
    public function hasBindVariables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bind_variables> value
     *
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function clearBindVariables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bind_variables> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Query\BoundQuery\BindVariablesEntry
     */
    public function getBindVariables($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <bind_variables> value
     *
     * @param \Vitess\Proto\Query\BoundQuery\BindVariablesEntry $value
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function setBindVariables(\Vitess\Proto\Query\BoundQuery\BindVariablesEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <bind_variables>
     *
     * @return \Vitess\Proto\Query\BoundQuery\BindVariablesEntry[]
     */
    public function getBindVariablesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <bind_variables>
     *
     * @param \Vitess\Proto\Query\BoundQuery\BindVariablesEntry $value
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function addBindVariables(\Vitess\Proto\Query\BoundQuery\BindVariablesEntry $value){
     return $this->_add(2, $value);
    }
  }
}

