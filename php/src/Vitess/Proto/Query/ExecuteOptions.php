<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto

namespace Vitess\Proto\Query {

  class ExecuteOptions extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $exclude_field_names = null;
    
    /**  @var boolean */
    public $include_event_token = null;
    
    /**  @var \Vitess\Proto\Query\EventToken */
    public $compare_event_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.ExecuteOptions');

      // OPTIONAL BOOL exclude_field_names = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "exclude_field_names";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_event_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "include_event_token";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE compare_event_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "compare_event_token";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\EventToken';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <exclude_field_names> has a value
     *
     * @return boolean
     */
    public function hasExcludeFieldNames(){
      return $this->_has(1);
    }
    
    /**
     * Clear <exclude_field_names> value
     *
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function clearExcludeFieldNames(){
      return $this->_clear(1);
    }
    
    /**
     * Get <exclude_field_names> value
     *
     * @return boolean
     */
    public function getExcludeFieldNames(){
      return $this->_get(1);
    }
    
    /**
     * Set <exclude_field_names> value
     *
     * @param boolean $value
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function setExcludeFieldNames( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <include_event_token> has a value
     *
     * @return boolean
     */
    public function hasIncludeEventToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <include_event_token> value
     *
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function clearIncludeEventToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <include_event_token> value
     *
     * @return boolean
     */
    public function getIncludeEventToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <include_event_token> value
     *
     * @param boolean $value
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function setIncludeEventToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <compare_event_token> has a value
     *
     * @return boolean
     */
    public function hasCompareEventToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <compare_event_token> value
     *
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function clearCompareEventToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <compare_event_token> value
     *
     * @return \Vitess\Proto\Query\EventToken
     */
    public function getCompareEventToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <compare_event_token> value
     *
     * @param \Vitess\Proto\Query\EventToken $value
     * @return \Vitess\Proto\Query\ExecuteOptions
     */
    public function setCompareEventToken(\Vitess\Proto\Query\EventToken $value){
      return $this->_set(3, $value);
    }
  }
}

