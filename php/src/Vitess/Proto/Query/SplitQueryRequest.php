<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto

namespace Vitess\Proto\Query {

  class SplitQueryRequest extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \Vitess\Proto\Query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \Vitess\Proto\Query\Target */
    public $target = null;
    
    /**  @var \Vitess\Proto\Query\BoundQuery */
    public $query = null;
    
    /**  @var string[]  */
    public $split_column = array();
    
    /**  @var int */
    public $split_count = null;
    
    /**  @var int */
    public $num_rows_per_query_part = null;
    
    /**  @var int - \Vitess\Proto\Query\SplitQueryRequest\Algorithm */
    public $algorithm = null;
    
    /**  @var boolean */
    public $use_split_query_v2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.SplitQueryRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\Target';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\BoundQuery';
      $descriptor->addField($f);

      // REPEATED STRING split_column = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "split_column";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT64 split_count = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "split_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 num_rows_per_query_part = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "num_rows_per_query_part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM algorithm = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "algorithm";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\SplitQueryRequest\Algorithm';
      $descriptor->addField($f);

      // OPTIONAL BOOL use_split_query_v2 = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "use_split_query_v2";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \Vitess\Proto\Vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \Vitess\Proto\Vtrpc\CallerID $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setEffectiveCallerId(\Vitess\Proto\Vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \Vitess\Proto\Query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \Vitess\Proto\Query\VTGateCallerID $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setImmediateCallerId(\Vitess\Proto\Query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \Vitess\Proto\Query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \Vitess\Proto\Query\Target $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setTarget(\Vitess\Proto\Query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <query> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <query> value
     *
     * @return \Vitess\Proto\Query\BoundQuery
     */
    public function getQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <query> value
     *
     * @param \Vitess\Proto\Query\BoundQuery $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setQuery(\Vitess\Proto\Query\BoundQuery $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <split_column> has a value
     *
     * @return boolean
     */
    public function hasSplitColumn(){
      return $this->_has(5);
    }
    
    /**
     * Clear <split_column> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearSplitColumn(){
      return $this->_clear(5);
    }
    
    /**
     * Get <split_column> value
     *
     * @param int $idx
     * @return string
     */
    public function getSplitColumn($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <split_column> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setSplitColumn( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <split_column>
     *
     * @return string[]
     */
    public function getSplitColumnList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <split_column>
     *
     * @param string $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function addSplitColumn( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <split_count> has a value
     *
     * @return boolean
     */
    public function hasSplitCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <split_count> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearSplitCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <split_count> value
     *
     * @return int
     */
    public function getSplitCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <split_count> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setSplitCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <num_rows_per_query_part> has a value
     *
     * @return boolean
     */
    public function hasNumRowsPerQueryPart(){
      return $this->_has(8);
    }
    
    /**
     * Clear <num_rows_per_query_part> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearNumRowsPerQueryPart(){
      return $this->_clear(8);
    }
    
    /**
     * Get <num_rows_per_query_part> value
     *
     * @return int
     */
    public function getNumRowsPerQueryPart(){
      return $this->_get(8);
    }
    
    /**
     * Set <num_rows_per_query_part> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setNumRowsPerQueryPart( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <algorithm> has a value
     *
     * @return boolean
     */
    public function hasAlgorithm(){
      return $this->_has(9);
    }
    
    /**
     * Clear <algorithm> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearAlgorithm(){
      return $this->_clear(9);
    }
    
    /**
     * Get <algorithm> value
     *
     * @return int - \Vitess\Proto\Query\SplitQueryRequest\Algorithm
     */
    public function getAlgorithm(){
      return $this->_get(9);
    }
    
    /**
     * Set <algorithm> value
     *
     * @param int - \Vitess\Proto\Query\SplitQueryRequest\Algorithm $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setAlgorithm( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <use_split_query_v2> has a value
     *
     * @return boolean
     */
    public function hasUseSplitQueryV2(){
      return $this->_has(10);
    }
    
    /**
     * Clear <use_split_query_v2> value
     *
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function clearUseSplitQueryV2(){
      return $this->_clear(10);
    }
    
    /**
     * Get <use_split_query_v2> value
     *
     * @return boolean
     */
    public function getUseSplitQueryV2(){
      return $this->_get(10);
    }
    
    /**
     * Set <use_split_query_v2> value
     *
     * @param boolean $value
     * @return \Vitess\Proto\Query\SplitQueryRequest
     */
    public function setUseSplitQueryV2( $value){
      return $this->_set(10, $value);
    }
  }
}

