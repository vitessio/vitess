<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto

namespace Vitess\Proto\Query {

  class QueryResult extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Query\Field[]  */
    public $fields = array();
    
    /**  @var int */
    public $rows_affected = null;
    
    /**  @var int */
    public $insert_id = null;
    
    /**  @var \Vitess\Proto\Query\Row[]  */
    public $rows = array();
    
    /**  @var \Vitess\Proto\Query\ResultExtras */
    public $extras = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.QueryResult');

      // REPEATED MESSAGE fields = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Query\Field';
      $descriptor->addField($f);

      // OPTIONAL UINT64 rows_affected = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rows_affected";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 insert_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "insert_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE rows = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rows";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Query\Row';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE extras = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "extras";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Query\ResultExtras';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function clearFields(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Query\Field
     */
    public function getFields($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \Vitess\Proto\Query\Field $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function setFields(\Vitess\Proto\Query\Field $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \Vitess\Proto\Query\Field[]
     */
    public function getFieldsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \Vitess\Proto\Query\Field $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function addFields(\Vitess\Proto\Query\Field $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <rows_affected> has a value
     *
     * @return boolean
     */
    public function hasRowsAffected(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rows_affected> value
     *
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function clearRowsAffected(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rows_affected> value
     *
     * @return int
     */
    public function getRowsAffected(){
      return $this->_get(2);
    }
    
    /**
     * Set <rows_affected> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function setRowsAffected( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <insert_id> has a value
     *
     * @return boolean
     */
    public function hasInsertId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <insert_id> value
     *
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function clearInsertId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <insert_id> value
     *
     * @return int
     */
    public function getInsertId(){
      return $this->_get(3);
    }
    
    /**
     * Set <insert_id> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function setInsertId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rows> has a value
     *
     * @return boolean
     */
    public function hasRows(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rows> value
     *
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function clearRows(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rows> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Query\Row
     */
    public function getRows($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <rows> value
     *
     * @param \Vitess\Proto\Query\Row $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function setRows(\Vitess\Proto\Query\Row $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <rows>
     *
     * @return \Vitess\Proto\Query\Row[]
     */
    public function getRowsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <rows>
     *
     * @param \Vitess\Proto\Query\Row $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function addRows(\Vitess\Proto\Query\Row $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <extras> has a value
     *
     * @return boolean
     */
    public function hasExtras(){
      return $this->_has(5);
    }
    
    /**
     * Clear <extras> value
     *
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function clearExtras(){
      return $this->_clear(5);
    }
    
    /**
     * Get <extras> value
     *
     * @return \Vitess\Proto\Query\ResultExtras
     */
    public function getExtras(){
      return $this->_get(5);
    }
    
    /**
     * Set <extras> value
     *
     * @param \Vitess\Proto\Query\ResultExtras $value
     * @return \Vitess\Proto\Query\QueryResult
     */
    public function setExtras(\Vitess\Proto\Query\ResultExtras $value){
      return $this->_set(5, $value);
    }
  }
}

