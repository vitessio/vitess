<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto
//   Date: 2016-01-22 01:34:42

namespace Vitess\Proto\Query {

  class RealtimeStats extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $health_error = null;
    
    /**  @var int */
    public $seconds_behind_master = null;
    
    /**  @var int */
    public $binlog_players_count = null;
    
    /**  @var int */
    public $seconds_behind_master_filtered_replication = null;
    
    /**  @var float */
    public $cpu_usage = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.RealtimeStats');

      // OPTIONAL STRING health_error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "health_error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 seconds_behind_master = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "seconds_behind_master";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 binlog_players_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "binlog_players_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 seconds_behind_master_filtered_replication = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "seconds_behind_master_filtered_replication";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE cpu_usage = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cpu_usage";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <health_error> has a value
     *
     * @return boolean
     */
    public function hasHealthError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <health_error> value
     *
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function clearHealthError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <health_error> value
     *
     * @return string
     */
    public function getHealthError(){
      return $this->_get(1);
    }
    
    /**
     * Set <health_error> value
     *
     * @param string $value
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function setHealthError( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <seconds_behind_master> has a value
     *
     * @return boolean
     */
    public function hasSecondsBehindMaster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <seconds_behind_master> value
     *
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function clearSecondsBehindMaster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <seconds_behind_master> value
     *
     * @return int
     */
    public function getSecondsBehindMaster(){
      return $this->_get(2);
    }
    
    /**
     * Set <seconds_behind_master> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function setSecondsBehindMaster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <binlog_players_count> has a value
     *
     * @return boolean
     */
    public function hasBinlogPlayersCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <binlog_players_count> value
     *
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function clearBinlogPlayersCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <binlog_players_count> value
     *
     * @return int
     */
    public function getBinlogPlayersCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <binlog_players_count> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function setBinlogPlayersCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <seconds_behind_master_filtered_replication> has a value
     *
     * @return boolean
     */
    public function hasSecondsBehindMasterFilteredReplication(){
      return $this->_has(4);
    }
    
    /**
     * Clear <seconds_behind_master_filtered_replication> value
     *
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function clearSecondsBehindMasterFilteredReplication(){
      return $this->_clear(4);
    }
    
    /**
     * Get <seconds_behind_master_filtered_replication> value
     *
     * @return int
     */
    public function getSecondsBehindMasterFilteredReplication(){
      return $this->_get(4);
    }
    
    /**
     * Set <seconds_behind_master_filtered_replication> value
     *
     * @param int $value
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function setSecondsBehindMasterFilteredReplication( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cpu_usage> has a value
     *
     * @return boolean
     */
    public function hasCpuUsage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cpu_usage> value
     *
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function clearCpuUsage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cpu_usage> value
     *
     * @return float
     */
    public function getCpuUsage(){
      return $this->_get(5);
    }
    
    /**
     * Set <cpu_usage> value
     *
     * @param float $value
     * @return \Vitess\Proto\Query\RealtimeStats
     */
    public function setCpuUsage( $value){
      return $this->_set(5, $value);
    }
  }
}

