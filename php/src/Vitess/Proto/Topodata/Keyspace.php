<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: topodata.proto

namespace Vitess\Proto\Topodata {

  class Keyspace extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sharding_column_name = null;
    
    /**  @var int - \Vitess\Proto\Topodata\KeyspaceIdType */
    public $sharding_column_type = null;
    
    /**  @var int */
    public $split_shard_count = null;
    
    /**  @var \Vitess\Proto\Topodata\Keyspace\ServedFrom[]  */
    public $served_froms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Keyspace');

      // OPTIONAL STRING sharding_column_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sharding_column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM sharding_column_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sharding_column_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\KeyspaceIdType';
      $descriptor->addField($f);

      // OPTIONAL INT32 split_shard_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "split_shard_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE served_froms = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "served_froms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Keyspace\ServedFrom';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sharding_column_name> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sharding_column_name> value
     *
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function clearShardingColumnName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sharding_column_name> value
     *
     * @return string
     */
    public function getShardingColumnName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sharding_column_name> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function setShardingColumnName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sharding_column_type> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sharding_column_type> value
     *
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function clearShardingColumnType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sharding_column_type> value
     *
     * @return int - \Vitess\Proto\Topodata\KeyspaceIdType
     */
    public function getShardingColumnType(){
      return $this->_get(2);
    }
    
    /**
     * Set <sharding_column_type> value
     *
     * @param int - \Vitess\Proto\Topodata\KeyspaceIdType $value
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function setShardingColumnType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <split_shard_count> has a value
     *
     * @return boolean
     */
    public function hasSplitShardCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <split_shard_count> value
     *
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function clearSplitShardCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <split_shard_count> value
     *
     * @return int
     */
    public function getSplitShardCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <split_shard_count> value
     *
     * @param int $value
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function setSplitShardCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <served_froms> has a value
     *
     * @return boolean
     */
    public function hasServedFroms(){
      return $this->_has(4);
    }
    
    /**
     * Clear <served_froms> value
     *
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function clearServedFroms(){
      return $this->_clear(4);
    }
    
    /**
     * Get <served_froms> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Keyspace\ServedFrom
     */
    public function getServedFroms($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <served_froms> value
     *
     * @param \Vitess\Proto\Topodata\Keyspace\ServedFrom $value
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function setServedFroms(\Vitess\Proto\Topodata\Keyspace\ServedFrom $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <served_froms>
     *
     * @return \Vitess\Proto\Topodata\Keyspace\ServedFrom[]
     */
    public function getServedFromsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <served_froms>
     *
     * @param \Vitess\Proto\Topodata\Keyspace\ServedFrom $value
     * @return \Vitess\Proto\Topodata\Keyspace
     */
    public function addServedFroms(\Vitess\Proto\Topodata\Keyspace\ServedFrom $value){
     return $this->_add(4, $value);
    }
  }
}

