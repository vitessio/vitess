<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: topodata.proto
//   Date: 2016-01-22 01:34:42

namespace Vitess\Proto\Topodata {

  class Shard extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Topodata\TabletAlias */
    public $master_alias = null;
    
    /**  @var \Vitess\Proto\Topodata\KeyRange */
    public $key_range = null;
    
    /**  @var \Vitess\Proto\Topodata\Shard\ServedType[]  */
    public $served_types = array();
    
    /**  @var \Vitess\Proto\Topodata\Shard\SourceShard[]  */
    public $source_shards = array();
    
    /**  @var string[]  */
    public $cells = array();
    
    /**  @var \Vitess\Proto\Topodata\Shard\TabletControl[]  */
    public $tablet_controls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Shard');

      // OPTIONAL MESSAGE master_alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "master_alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\KeyRange';
      $descriptor->addField($f);

      // REPEATED MESSAGE served_types = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "served_types";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Shard\ServedType';
      $descriptor->addField($f);

      // REPEATED MESSAGE source_shards = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_shards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Shard\SourceShard';
      $descriptor->addField($f);

      // REPEATED STRING cells = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE tablet_controls = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "tablet_controls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Shard\TabletControl';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <master_alias> has a value
     *
     * @return boolean
     */
    public function hasMasterAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <master_alias> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearMasterAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <master_alias> value
     *
     * @return \Vitess\Proto\Topodata\TabletAlias
     */
    public function getMasterAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <master_alias> value
     *
     * @param \Vitess\Proto\Topodata\TabletAlias $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setMasterAlias(\Vitess\Proto\Topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearKeyRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \Vitess\Proto\Topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \Vitess\Proto\Topodata\KeyRange $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setKeyRange(\Vitess\Proto\Topodata\KeyRange $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <served_types> has a value
     *
     * @return boolean
     */
    public function hasServedTypes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <served_types> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearServedTypes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <served_types> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Shard\ServedType
     */
    public function getServedTypes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <served_types> value
     *
     * @param \Vitess\Proto\Topodata\Shard\ServedType $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setServedTypes(\Vitess\Proto\Topodata\Shard\ServedType $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <served_types>
     *
     * @return \Vitess\Proto\Topodata\Shard\ServedType[]
     */
    public function getServedTypesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <served_types>
     *
     * @param \Vitess\Proto\Topodata\Shard\ServedType $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function addServedTypes(\Vitess\Proto\Topodata\Shard\ServedType $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <source_shards> has a value
     *
     * @return boolean
     */
    public function hasSourceShards(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_shards> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearSourceShards(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_shards> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Shard\SourceShard
     */
    public function getSourceShards($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <source_shards> value
     *
     * @param \Vitess\Proto\Topodata\Shard\SourceShard $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setSourceShards(\Vitess\Proto\Topodata\Shard\SourceShard $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <source_shards>
     *
     * @return \Vitess\Proto\Topodata\Shard\SourceShard[]
     */
    public function getSourceShardsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <source_shards>
     *
     * @param \Vitess\Proto\Topodata\Shard\SourceShard $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function addSourceShards(\Vitess\Proto\Topodata\Shard\SourceShard $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearCells(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return string
     */
    public function getCells($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setCells( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return string[]
     */
    public function getCellsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function addCells( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <tablet_controls> has a value
     *
     * @return boolean
     */
    public function hasTabletControls(){
      return $this->_has(6);
    }
    
    /**
     * Clear <tablet_controls> value
     *
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function clearTabletControls(){
      return $this->_clear(6);
    }
    
    /**
     * Get <tablet_controls> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Shard\TabletControl
     */
    public function getTabletControls($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <tablet_controls> value
     *
     * @param \Vitess\Proto\Topodata\Shard\TabletControl $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function setTabletControls(\Vitess\Proto\Topodata\Shard\TabletControl $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <tablet_controls>
     *
     * @return \Vitess\Proto\Topodata\Shard\TabletControl[]
     */
    public function getTabletControlsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <tablet_controls>
     *
     * @param \Vitess\Proto\Topodata\Shard\TabletControl $value
     * @return \Vitess\Proto\Topodata\Shard
     */
    public function addTabletControls(\Vitess\Proto\Topodata\Shard\TabletControl $value){
     return $this->_add(6, $value);
    }
  }
}

