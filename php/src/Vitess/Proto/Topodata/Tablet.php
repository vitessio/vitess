<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: topodata.proto

namespace Vitess\Proto\Topodata {

  class Tablet extends \DrSlump\Protobuf\Message {

    /**  @var \Vitess\Proto\Topodata\TabletAlias */
    public $alias = null;
    
    /**  @var string */
    public $hostname = null;
    
    /**  @var string */
    public $ip = null;
    
    /**  @var \Vitess\Proto\Topodata\Tablet\PortMapEntry[]  */
    public $port_map = array();
    
    /**  @var string */
    public $keyspace = null;
    
    /**  @var string */
    public $shard = null;
    
    /**  @var \Vitess\Proto\Topodata\KeyRange */
    public $key_range = null;
    
    /**  @var int - \Vitess\Proto\Topodata\TabletType */
    public $type = null;
    
    /**  @var string */
    public $db_name_override = null;
    
    /**  @var \Vitess\Proto\Topodata\Tablet\TagsEntry[]  */
    public $tags = array();
    
    /**  @var \Vitess\Proto\Topodata\Tablet\HealthMapEntry[]  */
    public $health_map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Tablet');

      // OPTIONAL MESSAGE alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL STRING hostname = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hostname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ip = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE port_map = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "port_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Tablet\PortMapEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shard = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\KeyRange';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Vitess\Proto\Topodata\TabletType';
      $descriptor->addField($f);

      // OPTIONAL STRING db_name_override = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "db_name_override";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE tags = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Tablet\TagsEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE health_map = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "health_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\Tablet\HealthMapEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return \Vitess\Proto\Topodata\TabletAlias
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param \Vitess\Proto\Topodata\TabletAlias $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setAlias(\Vitess\Proto\Topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hostname> has a value
     *
     * @return boolean
     */
    public function hasHostname(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hostname> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearHostname(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hostname> value
     *
     * @return string
     */
    public function getHostname(){
      return $this->_get(2);
    }
    
    /**
     * Set <hostname> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setHostname( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ip> has a value
     *
     * @return boolean
     */
    public function hasIp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ip> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearIp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ip> value
     *
     * @return string
     */
    public function getIp(){
      return $this->_get(3);
    }
    
    /**
     * Set <ip> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setIp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <port_map> has a value
     *
     * @return boolean
     */
    public function hasPortMap(){
      return $this->_has(4);
    }
    
    /**
     * Clear <port_map> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearPortMap(){
      return $this->_clear(4);
    }
    
    /**
     * Get <port_map> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Tablet\PortMapEntry
     */
    public function getPortMap($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <port_map> value
     *
     * @param \Vitess\Proto\Topodata\Tablet\PortMapEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setPortMap(\Vitess\Proto\Topodata\Tablet\PortMapEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <port_map>
     *
     * @return \Vitess\Proto\Topodata\Tablet\PortMapEntry[]
     */
    public function getPortMapList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <port_map>
     *
     * @param \Vitess\Proto\Topodata\Tablet\PortMapEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function addPortMap(\Vitess\Proto\Topodata\Tablet\PortMapEntry $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(5);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearKeyspace(){
      return $this->_clear(5);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(5);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setKeyspace( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(6);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearShard(){
      return $this->_clear(6);
    }
    
    /**
     * Get <shard> value
     *
     * @return string
     */
    public function getShard(){
      return $this->_get(6);
    }
    
    /**
     * Set <shard> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setShard( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(7);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearKeyRange(){
      return $this->_clear(7);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \Vitess\Proto\Topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(7);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \Vitess\Proto\Topodata\KeyRange $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setKeyRange(\Vitess\Proto\Topodata\KeyRange $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \Vitess\Proto\Topodata\TabletType
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \Vitess\Proto\Topodata\TabletType $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <db_name_override> has a value
     *
     * @return boolean
     */
    public function hasDbNameOverride(){
      return $this->_has(9);
    }
    
    /**
     * Clear <db_name_override> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearDbNameOverride(){
      return $this->_clear(9);
    }
    
    /**
     * Get <db_name_override> value
     *
     * @return string
     */
    public function getDbNameOverride(){
      return $this->_get(9);
    }
    
    /**
     * Set <db_name_override> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setDbNameOverride( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(10);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearTags(){
      return $this->_clear(10);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Tablet\TagsEntry
     */
    public function getTags($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param \Vitess\Proto\Topodata\Tablet\TagsEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setTags(\Vitess\Proto\Topodata\Tablet\TagsEntry $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return \Vitess\Proto\Topodata\Tablet\TagsEntry[]
     */
    public function getTagsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param \Vitess\Proto\Topodata\Tablet\TagsEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function addTags(\Vitess\Proto\Topodata\Tablet\TagsEntry $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <health_map> has a value
     *
     * @return boolean
     */
    public function hasHealthMap(){
      return $this->_has(11);
    }
    
    /**
     * Clear <health_map> value
     *
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function clearHealthMap(){
      return $this->_clear(11);
    }
    
    /**
     * Get <health_map> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\Tablet\HealthMapEntry
     */
    public function getHealthMap($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <health_map> value
     *
     * @param \Vitess\Proto\Topodata\Tablet\HealthMapEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function setHealthMap(\Vitess\Proto\Topodata\Tablet\HealthMapEntry $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <health_map>
     *
     * @return \Vitess\Proto\Topodata\Tablet\HealthMapEntry[]
     */
    public function getHealthMapList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <health_map>
     *
     * @param \Vitess\Proto\Topodata\Tablet\HealthMapEntry $value
     * @return \Vitess\Proto\Topodata\Tablet
     */
    public function addHealthMap(\Vitess\Proto\Topodata\Tablet\HealthMapEntry $value){
     return $this->_add(11, $value);
    }
  }
}

