<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: topodata.proto
//   Date: 2016-01-22 01:34:42

namespace Vitess\Proto\Topodata {

  class EndPoint extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $uid = null;
    
    /**  @var string */
    public $host = null;
    
    /**  @var \Vitess\Proto\Topodata\EndPoint\PortMapEntry[]  */
    public $port_map = array();
    
    /**  @var \Vitess\Proto\Topodata\EndPoint\HealthMapEntry[]  */
    public $health_map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.EndPoint');

      // OPTIONAL UINT32 uid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE port_map = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "port_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\EndPoint\PortMapEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE health_map = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "health_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Vitess\Proto\Topodata\EndPoint\HealthMapEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function clearUid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uid> value
     *
     * @return int
     */
    public function getUid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uid> value
     *
     * @param int $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function setUid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(2);
    }
    
    /**
     * Clear <host> value
     *
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function clearHost(){
      return $this->_clear(2);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(2);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function setHost( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <port_map> has a value
     *
     * @return boolean
     */
    public function hasPortMap(){
      return $this->_has(3);
    }
    
    /**
     * Clear <port_map> value
     *
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function clearPortMap(){
      return $this->_clear(3);
    }
    
    /**
     * Get <port_map> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\EndPoint\PortMapEntry
     */
    public function getPortMap($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <port_map> value
     *
     * @param \Vitess\Proto\Topodata\EndPoint\PortMapEntry $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function setPortMap(\Vitess\Proto\Topodata\EndPoint\PortMapEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <port_map>
     *
     * @return \Vitess\Proto\Topodata\EndPoint\PortMapEntry[]
     */
    public function getPortMapList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <port_map>
     *
     * @param \Vitess\Proto\Topodata\EndPoint\PortMapEntry $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function addPortMap(\Vitess\Proto\Topodata\EndPoint\PortMapEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <health_map> has a value
     *
     * @return boolean
     */
    public function hasHealthMap(){
      return $this->_has(4);
    }
    
    /**
     * Clear <health_map> value
     *
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function clearHealthMap(){
      return $this->_clear(4);
    }
    
    /**
     * Get <health_map> value
     *
     * @param int $idx
     * @return \Vitess\Proto\Topodata\EndPoint\HealthMapEntry
     */
    public function getHealthMap($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <health_map> value
     *
     * @param \Vitess\Proto\Topodata\EndPoint\HealthMapEntry $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function setHealthMap(\Vitess\Proto\Topodata\EndPoint\HealthMapEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <health_map>
     *
     * @return \Vitess\Proto\Topodata\EndPoint\HealthMapEntry[]
     */
    public function getHealthMapList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <health_map>
     *
     * @param \Vitess\Proto\Topodata\EndPoint\HealthMapEntry $value
     * @return \Vitess\Proto\Topodata\EndPoint
     */
    public function addHealthMap(\Vitess\Proto\Topodata\EndPoint\HealthMapEntry $value){
     return $this->_add(4, $value);
    }
  }
}

