<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: binlogdata.proto
//   Date: 2015-10-27 20:47:03

namespace binlogdata {

  class Charset extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $client = null;
    
    /**  @var int */
    public $conn = null;
    
    /**  @var int */
    public $server = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.Charset');

      // OPTIONAL INT32 client = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 conn = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "conn";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 server = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "server";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client> has a value
     *
     * @return boolean
     */
    public function hasClient(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client> value
     *
     * @return \binlogdata\Charset
     */
    public function clearClient(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client> value
     *
     * @return int
     */
    public function getClient(){
      return $this->_get(1);
    }
    
    /**
     * Set <client> value
     *
     * @param int $value
     * @return \binlogdata\Charset
     */
    public function setClient( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <conn> has a value
     *
     * @return boolean
     */
    public function hasConn(){
      return $this->_has(2);
    }
    
    /**
     * Clear <conn> value
     *
     * @return \binlogdata\Charset
     */
    public function clearConn(){
      return $this->_clear(2);
    }
    
    /**
     * Get <conn> value
     *
     * @return int
     */
    public function getConn(){
      return $this->_get(2);
    }
    
    /**
     * Set <conn> value
     *
     * @param int $value
     * @return \binlogdata\Charset
     */
    public function setConn( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <server> has a value
     *
     * @return boolean
     */
    public function hasServer(){
      return $this->_has(3);
    }
    
    /**
     * Clear <server> value
     *
     * @return \binlogdata\Charset
     */
    public function clearServer(){
      return $this->_clear(3);
    }
    
    /**
     * Get <server> value
     *
     * @return int
     */
    public function getServer(){
      return $this->_get(3);
    }
    
    /**
     * Set <server> value
     *
     * @param int $value
     * @return \binlogdata\Charset
     */
    public function setServer( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace binlogdata\BinlogTransaction\Statement {

  class Category extends \DrSlump\Protobuf\Enum {
    const BL_UNRECOGNIZED = 0;
    const BL_BEGIN = 1;
    const BL_COMMIT = 2;
    const BL_ROLLBACK = 3;
    const BL_DML = 4;
    const BL_DDL = 5;
    const BL_SET = 6;
  }
}
namespace binlogdata\BinlogTransaction {

  class Statement extends \DrSlump\Protobuf\Message {

    /**  @var int - \binlogdata\BinlogTransaction\Statement\Category */
    public $category = null;
    
    /**  @var \binlogdata\Charset */
    public $charset = null;
    
    /**  @var string */
    public $sql = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.BinlogTransaction.Statement');

      // OPTIONAL ENUM category = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\BinlogTransaction\Statement\Category';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charset = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\Charset';
      $descriptor->addField($f);

      // OPTIONAL STRING sql = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <category> value
     *
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function clearCategory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <category> value
     *
     * @return int - \binlogdata\BinlogTransaction\Statement\Category
     */
    public function getCategory(){
      return $this->_get(1);
    }
    
    /**
     * Set <category> value
     *
     * @param int - \binlogdata\BinlogTransaction\Statement\Category $value
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function setCategory( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function clearCharset(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charset> value
     *
     * @return \binlogdata\Charset
     */
    public function getCharset(){
      return $this->_get(2);
    }
    
    /**
     * Set <charset> value
     *
     * @param \binlogdata\Charset $value
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function setCharset(\binlogdata\Charset $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function clearSql(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(3);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function setSql( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace binlogdata {

  class BinlogTransaction extends \DrSlump\Protobuf\Message {

    /**  @var \binlogdata\BinlogTransaction\Statement[]  */
    public $statements = array();
    
    /**  @var int */
    public $timestamp = null;
    
    /**  @var string */
    public $transaction_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.BinlogTransaction');

      // REPEATED MESSAGE statements = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "statements";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\binlogdata\BinlogTransaction\Statement';
      $descriptor->addField($f);

      // OPTIONAL INT64 timestamp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING transaction_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <statements> has a value
     *
     * @return boolean
     */
    public function hasStatements(){
      return $this->_has(1);
    }
    
    /**
     * Clear <statements> value
     *
     * @return \binlogdata\BinlogTransaction
     */
    public function clearStatements(){
      return $this->_clear(1);
    }
    
    /**
     * Get <statements> value
     *
     * @param int $idx
     * @return \binlogdata\BinlogTransaction\Statement
     */
    public function getStatements($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <statements> value
     *
     * @param \binlogdata\BinlogTransaction\Statement $value
     * @return \binlogdata\BinlogTransaction
     */
    public function setStatements(\binlogdata\BinlogTransaction\Statement $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <statements>
     *
     * @return \binlogdata\BinlogTransaction\Statement[]
     */
    public function getStatementsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <statements>
     *
     * @param \binlogdata\BinlogTransaction\Statement $value
     * @return \binlogdata\BinlogTransaction
     */
    public function addStatements(\binlogdata\BinlogTransaction\Statement $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \binlogdata\BinlogTransaction
     */
    public function clearTimestamp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \binlogdata\BinlogTransaction
     */
    public function setTimestamp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \binlogdata\BinlogTransaction
     */
    public function clearTransactionId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return string
     */
    public function getTransactionId(){
      return $this->_get(3);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param string $value
     * @return \binlogdata\BinlogTransaction
     */
    public function setTransactionId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace binlogdata\StreamEvent {

  class Category extends \DrSlump\Protobuf\Enum {
    const SE_ERR = 0;
    const SE_DML = 1;
    const SE_DDL = 2;
    const SE_POS = 3;
  }
}
namespace binlogdata {

  class StreamEvent extends \DrSlump\Protobuf\Message {

    /**  @var int - \binlogdata\StreamEvent\Category */
    public $category = null;
    
    /**  @var string */
    public $table_name = null;
    
    /**  @var \query\Field[]  */
    public $primary_key_fields = array();
    
    /**  @var \query\Row[]  */
    public $primary_key_values = array();
    
    /**  @var string */
    public $sql = null;
    
    /**  @var int */
    public $timestamp = null;
    
    /**  @var string */
    public $transaction_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamEvent');

      // OPTIONAL ENUM category = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\StreamEvent\Category';
      $descriptor->addField($f);

      // OPTIONAL STRING table_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE primary_key_fields = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "primary_key_fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\Field';
      $descriptor->addField($f);

      // REPEATED MESSAGE primary_key_values = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "primary_key_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\Row';
      $descriptor->addField($f);

      // OPTIONAL STRING sql = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 timestamp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING transaction_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <category> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearCategory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <category> value
     *
     * @return int - \binlogdata\StreamEvent\Category
     */
    public function getCategory(){
      return $this->_get(1);
    }
    
    /**
     * Set <category> value
     *
     * @param int - \binlogdata\StreamEvent\Category $value
     * @return \binlogdata\StreamEvent
     */
    public function setCategory( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearTableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \binlogdata\StreamEvent
     */
    public function setTableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <primary_key_fields> has a value
     *
     * @return boolean
     */
    public function hasPrimaryKeyFields(){
      return $this->_has(3);
    }
    
    /**
     * Clear <primary_key_fields> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearPrimaryKeyFields(){
      return $this->_clear(3);
    }
    
    /**
     * Get <primary_key_fields> value
     *
     * @param int $idx
     * @return \query\Field
     */
    public function getPrimaryKeyFields($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <primary_key_fields> value
     *
     * @param \query\Field $value
     * @return \binlogdata\StreamEvent
     */
    public function setPrimaryKeyFields(\query\Field $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <primary_key_fields>
     *
     * @return \query\Field[]
     */
    public function getPrimaryKeyFieldsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <primary_key_fields>
     *
     * @param \query\Field $value
     * @return \binlogdata\StreamEvent
     */
    public function addPrimaryKeyFields(\query\Field $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <primary_key_values> has a value
     *
     * @return boolean
     */
    public function hasPrimaryKeyValues(){
      return $this->_has(4);
    }
    
    /**
     * Clear <primary_key_values> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearPrimaryKeyValues(){
      return $this->_clear(4);
    }
    
    /**
     * Get <primary_key_values> value
     *
     * @param int $idx
     * @return \query\Row
     */
    public function getPrimaryKeyValues($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <primary_key_values> value
     *
     * @param \query\Row $value
     * @return \binlogdata\StreamEvent
     */
    public function setPrimaryKeyValues(\query\Row $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <primary_key_values>
     *
     * @return \query\Row[]
     */
    public function getPrimaryKeyValuesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <primary_key_values>
     *
     * @param \query\Row $value
     * @return \binlogdata\StreamEvent
     */
    public function addPrimaryKeyValues(\query\Row $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearSql(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(5);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \binlogdata\StreamEvent
     */
    public function setSql( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearTimestamp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(6);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \binlogdata\StreamEvent
     */
    public function setTimestamp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function clearTransactionId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return string
     */
    public function getTransactionId(){
      return $this->_get(7);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param string $value
     * @return \binlogdata\StreamEvent
     */
    public function setTransactionId( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace binlogdata {

  class StreamUpdateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamUpdateRequest');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \binlogdata\StreamUpdateRequest
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \binlogdata\StreamUpdateRequest
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace binlogdata {

  class StreamUpdateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \binlogdata\StreamEvent */
    public $stream_event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamUpdateResponse');

      // OPTIONAL MESSAGE stream_event = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stream_event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\StreamEvent';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stream_event> has a value
     *
     * @return boolean
     */
    public function hasStreamEvent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stream_event> value
     *
     * @return \binlogdata\StreamUpdateResponse
     */
    public function clearStreamEvent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stream_event> value
     *
     * @return \binlogdata\StreamEvent
     */
    public function getStreamEvent(){
      return $this->_get(1);
    }
    
    /**
     * Set <stream_event> value
     *
     * @param \binlogdata\StreamEvent $value
     * @return \binlogdata\StreamUpdateResponse
     */
    public function setStreamEvent(\binlogdata\StreamEvent $value){
      return $this->_set(1, $value);
    }
  }
}

namespace binlogdata {

  class StreamKeyRangeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    
    /**  @var \binlogdata\Charset */
    public $charset = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamKeyRangeRequest');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charset = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\Charset';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function clearKeyRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function clearCharset(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charset> value
     *
     * @return \binlogdata\Charset
     */
    public function getCharset(){
      return $this->_get(3);
    }
    
    /**
     * Set <charset> value
     *
     * @param \binlogdata\Charset $value
     * @return \binlogdata\StreamKeyRangeRequest
     */
    public function setCharset(\binlogdata\Charset $value){
      return $this->_set(3, $value);
    }
  }
}

namespace binlogdata {

  class StreamKeyRangeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \binlogdata\BinlogTransaction */
    public $binlog_transaction = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamKeyRangeResponse');

      // OPTIONAL MESSAGE binlog_transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "binlog_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\BinlogTransaction';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <binlog_transaction> has a value
     *
     * @return boolean
     */
    public function hasBinlogTransaction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <binlog_transaction> value
     *
     * @return \binlogdata\StreamKeyRangeResponse
     */
    public function clearBinlogTransaction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <binlog_transaction> value
     *
     * @return \binlogdata\BinlogTransaction
     */
    public function getBinlogTransaction(){
      return $this->_get(1);
    }
    
    /**
     * Set <binlog_transaction> value
     *
     * @param \binlogdata\BinlogTransaction $value
     * @return \binlogdata\StreamKeyRangeResponse
     */
    public function setBinlogTransaction(\binlogdata\BinlogTransaction $value){
      return $this->_set(1, $value);
    }
  }
}

namespace binlogdata {

  class StreamTablesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    
    /**  @var string[]  */
    public $tables = array();
    
    /**  @var \binlogdata\Charset */
    public $charset = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamTablesRequest');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING tables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charset = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charset";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\Charset';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \binlogdata\StreamTablesRequest
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \binlogdata\StreamTablesRequest
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \binlogdata\StreamTablesRequest
     */
    public function clearTables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return string
     */
    public function getTables($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param string $value
     * @return \binlogdata\StreamTablesRequest
     */
    public function setTables( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return string[]
     */
    public function getTablesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param string $value
     * @return \binlogdata\StreamTablesRequest
     */
    public function addTables( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \binlogdata\StreamTablesRequest
     */
    public function clearCharset(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charset> value
     *
     * @return \binlogdata\Charset
     */
    public function getCharset(){
      return $this->_get(3);
    }
    
    /**
     * Set <charset> value
     *
     * @param \binlogdata\Charset $value
     * @return \binlogdata\StreamTablesRequest
     */
    public function setCharset(\binlogdata\Charset $value){
      return $this->_set(3, $value);
    }
  }
}

namespace binlogdata {

  class StreamTablesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \binlogdata\BinlogTransaction */
    public $binlog_transaction = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'binlogdata.StreamTablesResponse');

      // OPTIONAL MESSAGE binlog_transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "binlog_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\binlogdata\BinlogTransaction';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <binlog_transaction> has a value
     *
     * @return boolean
     */
    public function hasBinlogTransaction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <binlog_transaction> value
     *
     * @return \binlogdata\StreamTablesResponse
     */
    public function clearBinlogTransaction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <binlog_transaction> value
     *
     * @return \binlogdata\BinlogTransaction
     */
    public function getBinlogTransaction(){
      return $this->_get(1);
    }
    
    /**
     * Set <binlog_transaction> value
     *
     * @param \binlogdata\BinlogTransaction $value
     * @return \binlogdata\StreamTablesResponse
     */
    public function setBinlogTransaction(\binlogdata\BinlogTransaction $value){
      return $this->_set(1, $value);
    }
  }
}

