<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: topodata.proto
//   Date: 2015-10-27 20:47:13

namespace topodata {

  class KeyspaceIdType extends \DrSlump\Protobuf\Enum {
    const UNSET_ = 0;
    const UINT64 = 1;
    const BYTES = 2;
  }
}
namespace topodata {

  class TabletType extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const MASTER = 1;
    const REPLICA = 2;
    const RDONLY = 3;
    const BATCH = 3;
    const SPARE = 4;
    const EXPERIMENTAL = 5;
    const BACKUP = 6;
    const RESTORE = 7;
    const WORKER = 8;
  }
}
namespace topodata {

  class KeyRange extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $start = null;
    
    /**  @var string */
    public $end = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.KeyRange');

      // OPTIONAL BYTES start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \topodata\KeyRange
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return string
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param string $value
     * @return \topodata\KeyRange
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \topodata\KeyRange
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return string
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param string $value
     * @return \topodata\KeyRange
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata {

  class TabletAlias extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cell = null;
    
    /**  @var int */
    public $uid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.TabletAlias');

      // OPTIONAL STRING cell = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cell";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 uid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cell> has a value
     *
     * @return boolean
     */
    public function hasCell(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cell> value
     *
     * @return \topodata\TabletAlias
     */
    public function clearCell(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cell> value
     *
     * @return string
     */
    public function getCell(){
      return $this->_get(1);
    }
    
    /**
     * Set <cell> value
     *
     * @param string $value
     * @return \topodata\TabletAlias
     */
    public function setCell( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \topodata\TabletAlias
     */
    public function clearUid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uid> value
     *
     * @return int
     */
    public function getUid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uid> value
     *
     * @param int $value
     * @return \topodata\TabletAlias
     */
    public function setUid( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata\Tablet {

  class PortMapEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Tablet.PortMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \topodata\Tablet\PortMapEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \topodata\Tablet\PortMapEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \topodata\Tablet\PortMapEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \topodata\Tablet\PortMapEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata\Tablet {

  class TagsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Tablet.TagsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \topodata\Tablet\TagsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \topodata\Tablet\TagsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \topodata\Tablet\TagsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \topodata\Tablet\TagsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata\Tablet {

  class HealthMapEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Tablet.HealthMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \topodata\Tablet\HealthMapEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \topodata\Tablet\HealthMapEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \topodata\Tablet\HealthMapEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \topodata\Tablet\HealthMapEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata {

  class Tablet extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $alias = null;
    
    /**  @var string */
    public $hostname = null;
    
    /**  @var string */
    public $ip = null;
    
    /**  @var \topodata\Tablet\PortMapEntry[]  */
    public $port_map = array();
    
    /**  @var string */
    public $keyspace = null;
    
    /**  @var string */
    public $shard = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    
    /**  @var int - \topodata\TabletType */
    public $type = null;
    
    /**  @var string */
    public $db_name_override = null;
    
    /**  @var \topodata\Tablet\TagsEntry[]  */
    public $tags = array();
    
    /**  @var \topodata\Tablet\HealthMapEntry[]  */
    public $health_map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Tablet');

      // OPTIONAL MESSAGE alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL STRING hostname = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hostname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ip = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE port_map = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "port_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Tablet\PortMapEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shard = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // OPTIONAL STRING db_name_override = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "db_name_override";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE tags = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Tablet\TagsEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE health_map = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "health_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Tablet\HealthMapEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <alias> has a value
     *
     * @return boolean
     */
    public function hasAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <alias> value
     *
     * @return \topodata\Tablet
     */
    public function clearAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <alias> value
     *
     * @return \topodata\TabletAlias
     */
    public function getAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <alias> value
     *
     * @param \topodata\TabletAlias $value
     * @return \topodata\Tablet
     */
    public function setAlias(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hostname> has a value
     *
     * @return boolean
     */
    public function hasHostname(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hostname> value
     *
     * @return \topodata\Tablet
     */
    public function clearHostname(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hostname> value
     *
     * @return string
     */
    public function getHostname(){
      return $this->_get(2);
    }
    
    /**
     * Set <hostname> value
     *
     * @param string $value
     * @return \topodata\Tablet
     */
    public function setHostname( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ip> has a value
     *
     * @return boolean
     */
    public function hasIp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ip> value
     *
     * @return \topodata\Tablet
     */
    public function clearIp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ip> value
     *
     * @return string
     */
    public function getIp(){
      return $this->_get(3);
    }
    
    /**
     * Set <ip> value
     *
     * @param string $value
     * @return \topodata\Tablet
     */
    public function setIp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <port_map> has a value
     *
     * @return boolean
     */
    public function hasPortMap(){
      return $this->_has(4);
    }
    
    /**
     * Clear <port_map> value
     *
     * @return \topodata\Tablet
     */
    public function clearPortMap(){
      return $this->_clear(4);
    }
    
    /**
     * Get <port_map> value
     *
     * @param int $idx
     * @return \topodata\Tablet\PortMapEntry
     */
    public function getPortMap($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <port_map> value
     *
     * @param \topodata\Tablet\PortMapEntry $value
     * @return \topodata\Tablet
     */
    public function setPortMap(\topodata\Tablet\PortMapEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <port_map>
     *
     * @return \topodata\Tablet\PortMapEntry[]
     */
    public function getPortMapList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <port_map>
     *
     * @param \topodata\Tablet\PortMapEntry $value
     * @return \topodata\Tablet
     */
    public function addPortMap(\topodata\Tablet\PortMapEntry $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(5);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \topodata\Tablet
     */
    public function clearKeyspace(){
      return $this->_clear(5);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(5);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \topodata\Tablet
     */
    public function setKeyspace( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(6);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \topodata\Tablet
     */
    public function clearShard(){
      return $this->_clear(6);
    }
    
    /**
     * Get <shard> value
     *
     * @return string
     */
    public function getShard(){
      return $this->_get(6);
    }
    
    /**
     * Set <shard> value
     *
     * @param string $value
     * @return \topodata\Tablet
     */
    public function setShard( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(7);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \topodata\Tablet
     */
    public function clearKeyRange(){
      return $this->_clear(7);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(7);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \topodata\Tablet
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \topodata\Tablet
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\Tablet
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <db_name_override> has a value
     *
     * @return boolean
     */
    public function hasDbNameOverride(){
      return $this->_has(9);
    }
    
    /**
     * Clear <db_name_override> value
     *
     * @return \topodata\Tablet
     */
    public function clearDbNameOverride(){
      return $this->_clear(9);
    }
    
    /**
     * Get <db_name_override> value
     *
     * @return string
     */
    public function getDbNameOverride(){
      return $this->_get(9);
    }
    
    /**
     * Set <db_name_override> value
     *
     * @param string $value
     * @return \topodata\Tablet
     */
    public function setDbNameOverride( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(10);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \topodata\Tablet
     */
    public function clearTags(){
      return $this->_clear(10);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return \topodata\Tablet\TagsEntry
     */
    public function getTags($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param \topodata\Tablet\TagsEntry $value
     * @return \topodata\Tablet
     */
    public function setTags(\topodata\Tablet\TagsEntry $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return \topodata\Tablet\TagsEntry[]
     */
    public function getTagsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param \topodata\Tablet\TagsEntry $value
     * @return \topodata\Tablet
     */
    public function addTags(\topodata\Tablet\TagsEntry $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <health_map> has a value
     *
     * @return boolean
     */
    public function hasHealthMap(){
      return $this->_has(11);
    }
    
    /**
     * Clear <health_map> value
     *
     * @return \topodata\Tablet
     */
    public function clearHealthMap(){
      return $this->_clear(11);
    }
    
    /**
     * Get <health_map> value
     *
     * @param int $idx
     * @return \topodata\Tablet\HealthMapEntry
     */
    public function getHealthMap($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <health_map> value
     *
     * @param \topodata\Tablet\HealthMapEntry $value
     * @return \topodata\Tablet
     */
    public function setHealthMap(\topodata\Tablet\HealthMapEntry $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <health_map>
     *
     * @return \topodata\Tablet\HealthMapEntry[]
     */
    public function getHealthMapList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <health_map>
     *
     * @param \topodata\Tablet\HealthMapEntry $value
     * @return \topodata\Tablet
     */
    public function addHealthMap(\topodata\Tablet\HealthMapEntry $value){
     return $this->_add(11, $value);
    }
  }
}

namespace topodata\Shard {

  class ServedType extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    
    /**  @var string[]  */
    public $cells = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Shard.ServedType');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // REPEATED STRING cells = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \topodata\Shard\ServedType
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\Shard\ServedType
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \topodata\Shard\ServedType
     */
    public function clearCells(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return string
     */
    public function getCells($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param string $value
     * @return \topodata\Shard\ServedType
     */
    public function setCells( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return string[]
     */
    public function getCellsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param string $value
     * @return \topodata\Shard\ServedType
     */
    public function addCells( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace topodata\Shard {

  class SourceShard extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $uid = null;
    
    /**  @var string */
    public $keyspace = null;
    
    /**  @var string */
    public $shard = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    
    /**  @var string[]  */
    public $tables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Shard.SourceShard');

      // OPTIONAL UINT32 uid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shard = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      // REPEATED STRING tables = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \topodata\Shard\SourceShard
     */
    public function clearUid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uid> value
     *
     * @return int
     */
    public function getUid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uid> value
     *
     * @param int $value
     * @return \topodata\Shard\SourceShard
     */
    public function setUid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \topodata\Shard\SourceShard
     */
    public function clearKeyspace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(2);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \topodata\Shard\SourceShard
     */
    public function setKeyspace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(3);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \topodata\Shard\SourceShard
     */
    public function clearShard(){
      return $this->_clear(3);
    }
    
    /**
     * Get <shard> value
     *
     * @return string
     */
    public function getShard(){
      return $this->_get(3);
    }
    
    /**
     * Set <shard> value
     *
     * @param string $value
     * @return \topodata\Shard\SourceShard
     */
    public function setShard( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(4);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \topodata\Shard\SourceShard
     */
    public function clearKeyRange(){
      return $this->_clear(4);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(4);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \topodata\Shard\SourceShard
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(5);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \topodata\Shard\SourceShard
     */
    public function clearTables(){
      return $this->_clear(5);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return string
     */
    public function getTables($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param string $value
     * @return \topodata\Shard\SourceShard
     */
    public function setTables( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return string[]
     */
    public function getTablesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param string $value
     * @return \topodata\Shard\SourceShard
     */
    public function addTables( $value){
     return $this->_add(5, $value);
    }
  }
}

namespace topodata\Shard {

  class TabletControl extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    
    /**  @var string[]  */
    public $cells = array();
    
    /**  @var boolean */
    public $disable_query_service = null;
    
    /**  @var string[]  */
    public $blacklisted_tables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Shard.TabletControl');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // REPEATED STRING cells = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL disable_query_service = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "disable_query_service";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING blacklisted_tables = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "blacklisted_tables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \topodata\Shard\TabletControl
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\Shard\TabletControl
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \topodata\Shard\TabletControl
     */
    public function clearCells(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return string
     */
    public function getCells($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param string $value
     * @return \topodata\Shard\TabletControl
     */
    public function setCells( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return string[]
     */
    public function getCellsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param string $value
     * @return \topodata\Shard\TabletControl
     */
    public function addCells( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <disable_query_service> has a value
     *
     * @return boolean
     */
    public function hasDisableQueryService(){
      return $this->_has(3);
    }
    
    /**
     * Clear <disable_query_service> value
     *
     * @return \topodata\Shard\TabletControl
     */
    public function clearDisableQueryService(){
      return $this->_clear(3);
    }
    
    /**
     * Get <disable_query_service> value
     *
     * @return boolean
     */
    public function getDisableQueryService(){
      return $this->_get(3);
    }
    
    /**
     * Set <disable_query_service> value
     *
     * @param boolean $value
     * @return \topodata\Shard\TabletControl
     */
    public function setDisableQueryService( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <blacklisted_tables> has a value
     *
     * @return boolean
     */
    public function hasBlacklistedTables(){
      return $this->_has(4);
    }
    
    /**
     * Clear <blacklisted_tables> value
     *
     * @return \topodata\Shard\TabletControl
     */
    public function clearBlacklistedTables(){
      return $this->_clear(4);
    }
    
    /**
     * Get <blacklisted_tables> value
     *
     * @param int $idx
     * @return string
     */
    public function getBlacklistedTables($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <blacklisted_tables> value
     *
     * @param string $value
     * @return \topodata\Shard\TabletControl
     */
    public function setBlacklistedTables( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <blacklisted_tables>
     *
     * @return string[]
     */
    public function getBlacklistedTablesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <blacklisted_tables>
     *
     * @param string $value
     * @return \topodata\Shard\TabletControl
     */
    public function addBlacklistedTables( $value){
     return $this->_add(4, $value);
    }
  }
}

namespace topodata {

  class Shard extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $master_alias = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    
    /**  @var \topodata\Shard\ServedType[]  */
    public $served_types = array();
    
    /**  @var \topodata\Shard\SourceShard[]  */
    public $source_shards = array();
    
    /**  @var string[]  */
    public $cells = array();
    
    /**  @var \topodata\Shard\TabletControl[]  */
    public $tablet_controls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Shard');

      // OPTIONAL MESSAGE master_alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "master_alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      // REPEATED MESSAGE served_types = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "served_types";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Shard\ServedType';
      $descriptor->addField($f);

      // REPEATED MESSAGE source_shards = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_shards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Shard\SourceShard';
      $descriptor->addField($f);

      // REPEATED STRING cells = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE tablet_controls = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "tablet_controls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Shard\TabletControl';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <master_alias> has a value
     *
     * @return boolean
     */
    public function hasMasterAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <master_alias> value
     *
     * @return \topodata\Shard
     */
    public function clearMasterAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <master_alias> value
     *
     * @return \topodata\TabletAlias
     */
    public function getMasterAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <master_alias> value
     *
     * @param \topodata\TabletAlias $value
     * @return \topodata\Shard
     */
    public function setMasterAlias(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \topodata\Shard
     */
    public function clearKeyRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \topodata\Shard
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <served_types> has a value
     *
     * @return boolean
     */
    public function hasServedTypes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <served_types> value
     *
     * @return \topodata\Shard
     */
    public function clearServedTypes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <served_types> value
     *
     * @param int $idx
     * @return \topodata\Shard\ServedType
     */
    public function getServedTypes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <served_types> value
     *
     * @param \topodata\Shard\ServedType $value
     * @return \topodata\Shard
     */
    public function setServedTypes(\topodata\Shard\ServedType $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <served_types>
     *
     * @return \topodata\Shard\ServedType[]
     */
    public function getServedTypesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <served_types>
     *
     * @param \topodata\Shard\ServedType $value
     * @return \topodata\Shard
     */
    public function addServedTypes(\topodata\Shard\ServedType $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <source_shards> has a value
     *
     * @return boolean
     */
    public function hasSourceShards(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_shards> value
     *
     * @return \topodata\Shard
     */
    public function clearSourceShards(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_shards> value
     *
     * @param int $idx
     * @return \topodata\Shard\SourceShard
     */
    public function getSourceShards($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <source_shards> value
     *
     * @param \topodata\Shard\SourceShard $value
     * @return \topodata\Shard
     */
    public function setSourceShards(\topodata\Shard\SourceShard $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <source_shards>
     *
     * @return \topodata\Shard\SourceShard[]
     */
    public function getSourceShardsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <source_shards>
     *
     * @param \topodata\Shard\SourceShard $value
     * @return \topodata\Shard
     */
    public function addSourceShards(\topodata\Shard\SourceShard $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \topodata\Shard
     */
    public function clearCells(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return string
     */
    public function getCells($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param string $value
     * @return \topodata\Shard
     */
    public function setCells( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return string[]
     */
    public function getCellsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param string $value
     * @return \topodata\Shard
     */
    public function addCells( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <tablet_controls> has a value
     *
     * @return boolean
     */
    public function hasTabletControls(){
      return $this->_has(6);
    }
    
    /**
     * Clear <tablet_controls> value
     *
     * @return \topodata\Shard
     */
    public function clearTabletControls(){
      return $this->_clear(6);
    }
    
    /**
     * Get <tablet_controls> value
     *
     * @param int $idx
     * @return \topodata\Shard\TabletControl
     */
    public function getTabletControls($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <tablet_controls> value
     *
     * @param \topodata\Shard\TabletControl $value
     * @return \topodata\Shard
     */
    public function setTabletControls(\topodata\Shard\TabletControl $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <tablet_controls>
     *
     * @return \topodata\Shard\TabletControl[]
     */
    public function getTabletControlsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <tablet_controls>
     *
     * @param \topodata\Shard\TabletControl $value
     * @return \topodata\Shard
     */
    public function addTabletControls(\topodata\Shard\TabletControl $value){
     return $this->_add(6, $value);
    }
  }
}

namespace topodata\Keyspace {

  class ServedFrom extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    
    /**  @var string[]  */
    public $cells = array();
    
    /**  @var string */
    public $keyspace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Keyspace.ServedFrom');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // REPEATED STRING cells = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \topodata\Keyspace\ServedFrom
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\Keyspace\ServedFrom
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \topodata\Keyspace\ServedFrom
     */
    public function clearCells(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return string
     */
    public function getCells($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param string $value
     * @return \topodata\Keyspace\ServedFrom
     */
    public function setCells( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return string[]
     */
    public function getCellsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param string $value
     * @return \topodata\Keyspace\ServedFrom
     */
    public function addCells( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \topodata\Keyspace\ServedFrom
     */
    public function clearKeyspace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(3);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \topodata\Keyspace\ServedFrom
     */
    public function setKeyspace( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace topodata {

  class Keyspace extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sharding_column_name = null;
    
    /**  @var int - \topodata\KeyspaceIdType */
    public $sharding_column_type = null;
    
    /**  @var int */
    public $split_shard_count = null;
    
    /**  @var \topodata\Keyspace\ServedFrom[]  */
    public $served_froms = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.Keyspace');

      // OPTIONAL STRING sharding_column_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sharding_column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM sharding_column_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sharding_column_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyspaceIdType';
      $descriptor->addField($f);

      // OPTIONAL INT32 split_shard_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "split_shard_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE served_froms = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "served_froms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\Keyspace\ServedFrom';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sharding_column_name> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sharding_column_name> value
     *
     * @return \topodata\Keyspace
     */
    public function clearShardingColumnName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sharding_column_name> value
     *
     * @return string
     */
    public function getShardingColumnName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sharding_column_name> value
     *
     * @param string $value
     * @return \topodata\Keyspace
     */
    public function setShardingColumnName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sharding_column_type> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sharding_column_type> value
     *
     * @return \topodata\Keyspace
     */
    public function clearShardingColumnType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sharding_column_type> value
     *
     * @return int - \topodata\KeyspaceIdType
     */
    public function getShardingColumnType(){
      return $this->_get(2);
    }
    
    /**
     * Set <sharding_column_type> value
     *
     * @param int - \topodata\KeyspaceIdType $value
     * @return \topodata\Keyspace
     */
    public function setShardingColumnType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <split_shard_count> has a value
     *
     * @return boolean
     */
    public function hasSplitShardCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <split_shard_count> value
     *
     * @return \topodata\Keyspace
     */
    public function clearSplitShardCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <split_shard_count> value
     *
     * @return int
     */
    public function getSplitShardCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <split_shard_count> value
     *
     * @param int $value
     * @return \topodata\Keyspace
     */
    public function setSplitShardCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <served_froms> has a value
     *
     * @return boolean
     */
    public function hasServedFroms(){
      return $this->_has(4);
    }
    
    /**
     * Clear <served_froms> value
     *
     * @return \topodata\Keyspace
     */
    public function clearServedFroms(){
      return $this->_clear(4);
    }
    
    /**
     * Get <served_froms> value
     *
     * @param int $idx
     * @return \topodata\Keyspace\ServedFrom
     */
    public function getServedFroms($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <served_froms> value
     *
     * @param \topodata\Keyspace\ServedFrom $value
     * @return \topodata\Keyspace
     */
    public function setServedFroms(\topodata\Keyspace\ServedFrom $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <served_froms>
     *
     * @return \topodata\Keyspace\ServedFrom[]
     */
    public function getServedFromsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <served_froms>
     *
     * @param \topodata\Keyspace\ServedFrom $value
     * @return \topodata\Keyspace
     */
    public function addServedFroms(\topodata\Keyspace\ServedFrom $value){
     return $this->_add(4, $value);
    }
  }
}

namespace topodata\ShardReplication {

  class Node extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $tablet_alias = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.ShardReplication.Node');

      // OPTIONAL MESSAGE tablet_alias = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_alias> has a value
     *
     * @return boolean
     */
    public function hasTabletAlias(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_alias> value
     *
     * @return \topodata\ShardReplication\Node
     */
    public function clearTabletAlias(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_alias> value
     *
     * @return \topodata\TabletAlias
     */
    public function getTabletAlias(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_alias> value
     *
     * @param \topodata\TabletAlias $value
     * @return \topodata\ShardReplication\Node
     */
    public function setTabletAlias(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
  }
}

namespace topodata {

  class ShardReplication extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\ShardReplication\Node[]  */
    public $nodes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.ShardReplication');

      // REPEATED MESSAGE nodes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\ShardReplication\Node';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <nodes> has a value
     *
     * @return boolean
     */
    public function hasNodes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <nodes> value
     *
     * @return \topodata\ShardReplication
     */
    public function clearNodes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <nodes> value
     *
     * @param int $idx
     * @return \topodata\ShardReplication\Node
     */
    public function getNodes($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <nodes> value
     *
     * @param \topodata\ShardReplication\Node $value
     * @return \topodata\ShardReplication
     */
    public function setNodes(\topodata\ShardReplication\Node $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <nodes>
     *
     * @return \topodata\ShardReplication\Node[]
     */
    public function getNodesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <nodes>
     *
     * @param \topodata\ShardReplication\Node $value
     * @return \topodata\ShardReplication
     */
    public function addNodes(\topodata\ShardReplication\Node $value){
     return $this->_add(1, $value);
    }
  }
}

namespace topodata\EndPoint {

  class PortMapEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.EndPoint.PortMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \topodata\EndPoint\PortMapEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \topodata\EndPoint\PortMapEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \topodata\EndPoint\PortMapEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \topodata\EndPoint\PortMapEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata\EndPoint {

  class HealthMapEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.EndPoint.HealthMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \topodata\EndPoint\HealthMapEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \topodata\EndPoint\HealthMapEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \topodata\EndPoint\HealthMapEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \topodata\EndPoint\HealthMapEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata {

  class EndPoint extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $uid = null;
    
    /**  @var string */
    public $host = null;
    
    /**  @var \topodata\EndPoint\PortMapEntry[]  */
    public $port_map = array();
    
    /**  @var \topodata\EndPoint\HealthMapEntry[]  */
    public $health_map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.EndPoint');

      // OPTIONAL UINT32 uid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE port_map = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "port_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\EndPoint\PortMapEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE health_map = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "health_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\EndPoint\HealthMapEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \topodata\EndPoint
     */
    public function clearUid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uid> value
     *
     * @return int
     */
    public function getUid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uid> value
     *
     * @param int $value
     * @return \topodata\EndPoint
     */
    public function setUid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(2);
    }
    
    /**
     * Clear <host> value
     *
     * @return \topodata\EndPoint
     */
    public function clearHost(){
      return $this->_clear(2);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(2);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \topodata\EndPoint
     */
    public function setHost( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <port_map> has a value
     *
     * @return boolean
     */
    public function hasPortMap(){
      return $this->_has(3);
    }
    
    /**
     * Clear <port_map> value
     *
     * @return \topodata\EndPoint
     */
    public function clearPortMap(){
      return $this->_clear(3);
    }
    
    /**
     * Get <port_map> value
     *
     * @param int $idx
     * @return \topodata\EndPoint\PortMapEntry
     */
    public function getPortMap($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <port_map> value
     *
     * @param \topodata\EndPoint\PortMapEntry $value
     * @return \topodata\EndPoint
     */
    public function setPortMap(\topodata\EndPoint\PortMapEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <port_map>
     *
     * @return \topodata\EndPoint\PortMapEntry[]
     */
    public function getPortMapList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <port_map>
     *
     * @param \topodata\EndPoint\PortMapEntry $value
     * @return \topodata\EndPoint
     */
    public function addPortMap(\topodata\EndPoint\PortMapEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <health_map> has a value
     *
     * @return boolean
     */
    public function hasHealthMap(){
      return $this->_has(4);
    }
    
    /**
     * Clear <health_map> value
     *
     * @return \topodata\EndPoint
     */
    public function clearHealthMap(){
      return $this->_clear(4);
    }
    
    /**
     * Get <health_map> value
     *
     * @param int $idx
     * @return \topodata\EndPoint\HealthMapEntry
     */
    public function getHealthMap($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <health_map> value
     *
     * @param \topodata\EndPoint\HealthMapEntry $value
     * @return \topodata\EndPoint
     */
    public function setHealthMap(\topodata\EndPoint\HealthMapEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <health_map>
     *
     * @return \topodata\EndPoint\HealthMapEntry[]
     */
    public function getHealthMapList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <health_map>
     *
     * @param \topodata\EndPoint\HealthMapEntry $value
     * @return \topodata\EndPoint
     */
    public function addHealthMap(\topodata\EndPoint\HealthMapEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace topodata {

  class EndPoints extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\EndPoint[]  */
    public $entries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.EndPoints');

      // REPEATED MESSAGE entries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\EndPoint';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \topodata\EndPoints
     */
    public function clearEntries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \topodata\EndPoint
     */
    public function getEntries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \topodata\EndPoint $value
     * @return \topodata\EndPoints
     */
    public function setEntries(\topodata\EndPoint $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \topodata\EndPoint[]
     */
    public function getEntriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \topodata\EndPoint $value
     * @return \topodata\EndPoints
     */
    public function addEntries(\topodata\EndPoint $value){
     return $this->_add(1, $value);
    }
  }
}

namespace topodata {

  class SrvShard extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    
    /**  @var string */
    public $master_cell = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.SrvShard');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      // OPTIONAL STRING master_cell = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "master_cell";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \topodata\SrvShard
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \topodata\SrvShard
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \topodata\SrvShard
     */
    public function clearKeyRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \topodata\SrvShard
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <master_cell> has a value
     *
     * @return boolean
     */
    public function hasMasterCell(){
      return $this->_has(3);
    }
    
    /**
     * Clear <master_cell> value
     *
     * @return \topodata\SrvShard
     */
    public function clearMasterCell(){
      return $this->_clear(3);
    }
    
    /**
     * Get <master_cell> value
     *
     * @return string
     */
    public function getMasterCell(){
      return $this->_get(3);
    }
    
    /**
     * Set <master_cell> value
     *
     * @param string $value
     * @return \topodata\SrvShard
     */
    public function setMasterCell( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace topodata {

  class ShardReference extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \topodata\KeyRange */
    public $key_range = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.ShardReference');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \topodata\ShardReference
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \topodata\ShardReference
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_range> has a value
     *
     * @return boolean
     */
    public function hasKeyRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_range> value
     *
     * @return \topodata\ShardReference
     */
    public function clearKeyRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_range> value
     *
     * @return \topodata\KeyRange
     */
    public function getKeyRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <key_range> value
     *
     * @param \topodata\KeyRange $value
     * @return \topodata\ShardReference
     */
    public function setKeyRange(\topodata\KeyRange $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata\SrvKeyspace {

  class KeyspacePartition extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $served_type = null;
    
    /**  @var \topodata\ShardReference[]  */
    public $shard_references = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.SrvKeyspace.KeyspacePartition');

      // OPTIONAL ENUM served_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "served_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // REPEATED MESSAGE shard_references = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "shard_references";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\ShardReference';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <served_type> has a value
     *
     * @return boolean
     */
    public function hasServedType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <served_type> value
     *
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function clearServedType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <served_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getServedType(){
      return $this->_get(1);
    }
    
    /**
     * Set <served_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function setServedType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <shard_references> has a value
     *
     * @return boolean
     */
    public function hasShardReferences(){
      return $this->_has(2);
    }
    
    /**
     * Clear <shard_references> value
     *
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function clearShardReferences(){
      return $this->_clear(2);
    }
    
    /**
     * Get <shard_references> value
     *
     * @param int $idx
     * @return \topodata\ShardReference
     */
    public function getShardReferences($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <shard_references> value
     *
     * @param \topodata\ShardReference $value
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function setShardReferences(\topodata\ShardReference $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <shard_references>
     *
     * @return \topodata\ShardReference[]
     */
    public function getShardReferencesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <shard_references>
     *
     * @param \topodata\ShardReference $value
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function addShardReferences(\topodata\ShardReference $value){
     return $this->_add(2, $value);
    }
  }
}

namespace topodata\SrvKeyspace {

  class ServedFrom extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    
    /**  @var string */
    public $keyspace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.SrvKeyspace.ServedFrom');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \topodata\SrvKeyspace\ServedFrom
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \topodata\SrvKeyspace\ServedFrom
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \topodata\SrvKeyspace\ServedFrom
     */
    public function clearKeyspace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(2);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \topodata\SrvKeyspace\ServedFrom
     */
    public function setKeyspace( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace topodata {

  class SrvKeyspace extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\SrvKeyspace\KeyspacePartition[]  */
    public $partitions = array();
    
    /**  @var string */
    public $sharding_column_name = null;
    
    /**  @var int - \topodata\KeyspaceIdType */
    public $sharding_column_type = null;
    
    /**  @var \topodata\SrvKeyspace\ServedFrom[]  */
    public $served_from = array();
    
    /**  @var int */
    public $split_shard_count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'topodata.SrvKeyspace');

      // REPEATED MESSAGE partitions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partitions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\SrvKeyspace\KeyspacePartition';
      $descriptor->addField($f);

      // OPTIONAL STRING sharding_column_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sharding_column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM sharding_column_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sharding_column_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\KeyspaceIdType';
      $descriptor->addField($f);

      // REPEATED MESSAGE served_from = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "served_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\topodata\SrvKeyspace\ServedFrom';
      $descriptor->addField($f);

      // OPTIONAL INT32 split_shard_count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "split_shard_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partitions> has a value
     *
     * @return boolean
     */
    public function hasPartitions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <partitions> value
     *
     * @return \topodata\SrvKeyspace
     */
    public function clearPartitions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <partitions> value
     *
     * @param int $idx
     * @return \topodata\SrvKeyspace\KeyspacePartition
     */
    public function getPartitions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <partitions> value
     *
     * @param \topodata\SrvKeyspace\KeyspacePartition $value
     * @return \topodata\SrvKeyspace
     */
    public function setPartitions(\topodata\SrvKeyspace\KeyspacePartition $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <partitions>
     *
     * @return \topodata\SrvKeyspace\KeyspacePartition[]
     */
    public function getPartitionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <partitions>
     *
     * @param \topodata\SrvKeyspace\KeyspacePartition $value
     * @return \topodata\SrvKeyspace
     */
    public function addPartitions(\topodata\SrvKeyspace\KeyspacePartition $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <sharding_column_name> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sharding_column_name> value
     *
     * @return \topodata\SrvKeyspace
     */
    public function clearShardingColumnName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sharding_column_name> value
     *
     * @return string
     */
    public function getShardingColumnName(){
      return $this->_get(2);
    }
    
    /**
     * Set <sharding_column_name> value
     *
     * @param string $value
     * @return \topodata\SrvKeyspace
     */
    public function setShardingColumnName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sharding_column_type> has a value
     *
     * @return boolean
     */
    public function hasShardingColumnType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sharding_column_type> value
     *
     * @return \topodata\SrvKeyspace
     */
    public function clearShardingColumnType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sharding_column_type> value
     *
     * @return int - \topodata\KeyspaceIdType
     */
    public function getShardingColumnType(){
      return $this->_get(3);
    }
    
    /**
     * Set <sharding_column_type> value
     *
     * @param int - \topodata\KeyspaceIdType $value
     * @return \topodata\SrvKeyspace
     */
    public function setShardingColumnType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <served_from> has a value
     *
     * @return boolean
     */
    public function hasServedFrom(){
      return $this->_has(4);
    }
    
    /**
     * Clear <served_from> value
     *
     * @return \topodata\SrvKeyspace
     */
    public function clearServedFrom(){
      return $this->_clear(4);
    }
    
    /**
     * Get <served_from> value
     *
     * @param int $idx
     * @return \topodata\SrvKeyspace\ServedFrom
     */
    public function getServedFrom($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <served_from> value
     *
     * @param \topodata\SrvKeyspace\ServedFrom $value
     * @return \topodata\SrvKeyspace
     */
    public function setServedFrom(\topodata\SrvKeyspace\ServedFrom $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <served_from>
     *
     * @return \topodata\SrvKeyspace\ServedFrom[]
     */
    public function getServedFromList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <served_from>
     *
     * @param \topodata\SrvKeyspace\ServedFrom $value
     * @return \topodata\SrvKeyspace
     */
    public function addServedFrom(\topodata\SrvKeyspace\ServedFrom $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <split_shard_count> has a value
     *
     * @return boolean
     */
    public function hasSplitShardCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <split_shard_count> value
     *
     * @return \topodata\SrvKeyspace
     */
    public function clearSplitShardCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <split_shard_count> value
     *
     * @return int
     */
    public function getSplitShardCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <split_shard_count> value
     *
     * @param int $value
     * @return \topodata\SrvKeyspace
     */
    public function setSplitShardCount( $value){
      return $this->_set(5, $value);
    }
  }
}

