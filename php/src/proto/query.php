<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: query.proto
//   Date: 2015-10-27 20:47:13

namespace query {

  class Flag extends \DrSlump\Protobuf\Enum {
    const NONE = 0;
    const ISINTEGRAL = 256;
    const ISUNSIGNED = 512;
    const ISFLOAT = 1024;
    const ISQUOTED = 2048;
    const ISTEXT = 4096;
    const ISBINARY = 8192;
  }
}
namespace query {

  class Type extends \DrSlump\Protobuf\Enum {
    const NULL_TYPE = 0;
    const INT8 = 257;
    const UINT8 = 770;
    const INT16 = 259;
    const UINT16 = 772;
    const INT24 = 261;
    const UINT24 = 774;
    const INT32 = 263;
    const UINT32 = 776;
    const INT64 = 265;
    const UINT64 = 778;
    const FLOAT32 = 1035;
    const FLOAT64 = 1036;
    const TIMESTAMP = 2061;
    const DATE = 2062;
    const TIME = 2063;
    const DATETIME = 2064;
    const YEAR = 785;
    const DECIMAL = 18;
    const TEXT = 6163;
    const BLOB = 10260;
    const VARCHAR = 6165;
    const VARBINARY = 10262;
    const CHAR = 6167;
    const BINARY = 10264;
    const BIT = 2073;
    const ENUM = 2074;
    const SET = 2075;
    const TUPLE = 28;
  }
}
namespace query {

  class Target extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $keyspace = null;
    
    /**  @var string */
    public $shard = null;
    
    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.Target');

      // OPTIONAL STRING keyspace = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shard = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM tablet_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \query\Target
     */
    public function clearKeyspace(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(1);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \query\Target
     */
    public function setKeyspace( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(2);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \query\Target
     */
    public function clearShard(){
      return $this->_clear(2);
    }
    
    /**
     * Get <shard> value
     *
     * @return string
     */
    public function getShard(){
      return $this->_get(2);
    }
    
    /**
     * Set <shard> value
     *
     * @param string $value
     * @return \query\Target
     */
    public function setShard( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \query\Target
     */
    public function clearTabletType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(3);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \query\Target
     */
    public function setTabletType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace query {

  class VTGateCallerID extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $username = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.VTGateCallerID');

      // OPTIONAL STRING username = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(1);
    }
    
    /**
     * Clear <username> value
     *
     * @return \query\VTGateCallerID
     */
    public function clearUsername(){
      return $this->_clear(1);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(1);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \query\VTGateCallerID
     */
    public function setUsername( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace query {

  class Value extends \DrSlump\Protobuf\Message {

    /**  @var int - \query\Type */
    public $type = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.Value');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Type';
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \query\Value
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \query\Type
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \query\Type $value
     * @return \query\Value
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \query\Value
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \query\Value
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace query {

  class BindVariable extends \DrSlump\Protobuf\Message {

    /**  @var int - \query\Type */
    public $type = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var \query\Value[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BindVariable');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Type';
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \query\BindVariable
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \query\Type
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \query\Type $value
     * @return \query\BindVariable
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \query\BindVariable
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \query\BindVariable
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(3);
    }
    
    /**
     * Clear <values> value
     *
     * @return \query\BindVariable
     */
    public function clearValues(){
      return $this->_clear(3);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \query\Value
     */
    public function getValues($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \query\Value $value
     * @return \query\BindVariable
     */
    public function setValues(\query\Value $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \query\Value[]
     */
    public function getValuesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \query\Value $value
     * @return \query\BindVariable
     */
    public function addValues(\query\Value $value){
     return $this->_add(3, $value);
    }
  }
}

namespace query\BoundQuery {

  class BindVariablesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \query\BindVariable */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BoundQuery.BindVariablesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\BindVariable';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \query\BoundQuery\BindVariablesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \query\BoundQuery\BindVariablesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \query\BoundQuery\BindVariablesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \query\BindVariable
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \query\BindVariable $value
     * @return \query\BoundQuery\BindVariablesEntry
     */
    public function setValue(\query\BindVariable $value){
      return $this->_set(2, $value);
    }
  }
}

namespace query {

  class BoundQuery extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sql = null;
    
    /**  @var \query\BoundQuery\BindVariablesEntry[]  */
    public $bind_variables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BoundQuery');

      // OPTIONAL STRING sql = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE bind_variables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bind_variables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\BoundQuery\BindVariablesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \query\BoundQuery
     */
    public function clearSql(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(1);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \query\BoundQuery
     */
    public function setSql( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bind_variables> has a value
     *
     * @return boolean
     */
    public function hasBindVariables(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bind_variables> value
     *
     * @return \query\BoundQuery
     */
    public function clearBindVariables(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bind_variables> value
     *
     * @param int $idx
     * @return \query\BoundQuery\BindVariablesEntry
     */
    public function getBindVariables($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <bind_variables> value
     *
     * @param \query\BoundQuery\BindVariablesEntry $value
     * @return \query\BoundQuery
     */
    public function setBindVariables(\query\BoundQuery\BindVariablesEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <bind_variables>
     *
     * @return \query\BoundQuery\BindVariablesEntry[]
     */
    public function getBindVariablesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <bind_variables>
     *
     * @param \query\BoundQuery\BindVariablesEntry $value
     * @return \query\BoundQuery
     */
    public function addBindVariables(\query\BoundQuery\BindVariablesEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace query {

  class Field extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \query\Type */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.Field');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \query\Field
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \query\Field
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \query\Field
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \query\Type
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \query\Type $value
     * @return \query\Field
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace query {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $lengths = array();
    
    /**  @var string */
    public $values = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.Row');

      // REPEATED SINT64 lengths = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lengths";
      $f->type      = \DrSlump\Protobuf::TYPE_SINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BYTES values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lengths> has a value
     *
     * @return boolean
     */
    public function hasLengths(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lengths> value
     *
     * @return \query\Row
     */
    public function clearLengths(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lengths> value
     *
     * @param int $idx
     * @return int
     */
    public function getLengths($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <lengths> value
     *
     * @param int $value
     * @return \query\Row
     */
    public function setLengths( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <lengths>
     *
     * @return int[]
     */
    public function getLengthsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <lengths>
     *
     * @param int $value
     * @return \query\Row
     */
    public function addLengths( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <values> value
     *
     * @return \query\Row
     */
    public function clearValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <values> value
     *
     * @return string
     */
    public function getValues(){
      return $this->_get(2);
    }
    
    /**
     * Set <values> value
     *
     * @param string $value
     * @return \query\Row
     */
    public function setValues( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace query {

  class QueryResult extends \DrSlump\Protobuf\Message {

    /**  @var \query\Field[]  */
    public $fields = array();
    
    /**  @var int */
    public $rows_affected = null;
    
    /**  @var int */
    public $insert_id = null;
    
    /**  @var \query\Row[]  */
    public $rows = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.QueryResult');

      // REPEATED MESSAGE fields = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\Field';
      $descriptor->addField($f);

      // OPTIONAL UINT64 rows_affected = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rows_affected";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 insert_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "insert_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE rows = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rows";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\Row';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \query\QueryResult
     */
    public function clearFields(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \query\Field
     */
    public function getFields($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \query\Field $value
     * @return \query\QueryResult
     */
    public function setFields(\query\Field $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \query\Field[]
     */
    public function getFieldsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \query\Field $value
     * @return \query\QueryResult
     */
    public function addFields(\query\Field $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <rows_affected> has a value
     *
     * @return boolean
     */
    public function hasRowsAffected(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rows_affected> value
     *
     * @return \query\QueryResult
     */
    public function clearRowsAffected(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rows_affected> value
     *
     * @return int
     */
    public function getRowsAffected(){
      return $this->_get(2);
    }
    
    /**
     * Set <rows_affected> value
     *
     * @param int $value
     * @return \query\QueryResult
     */
    public function setRowsAffected( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <insert_id> has a value
     *
     * @return boolean
     */
    public function hasInsertId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <insert_id> value
     *
     * @return \query\QueryResult
     */
    public function clearInsertId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <insert_id> value
     *
     * @return int
     */
    public function getInsertId(){
      return $this->_get(3);
    }
    
    /**
     * Set <insert_id> value
     *
     * @param int $value
     * @return \query\QueryResult
     */
    public function setInsertId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rows> has a value
     *
     * @return boolean
     */
    public function hasRows(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rows> value
     *
     * @return \query\QueryResult
     */
    public function clearRows(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rows> value
     *
     * @param int $idx
     * @return \query\Row
     */
    public function getRows($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <rows> value
     *
     * @param \query\Row $value
     * @return \query\QueryResult
     */
    public function setRows(\query\Row $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <rows>
     *
     * @return \query\Row[]
     */
    public function getRowsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <rows>
     *
     * @param \query\Row $value
     * @return \query\QueryResult
     */
    public function addRows(\query\Row $value){
     return $this->_add(4, $value);
    }
  }
}

namespace query {

  class GetSessionIdRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var string */
    public $keyspace = null;
    
    /**  @var string */
    public $shard = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.GetSessionIdRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL STRING keyspace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keyspace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shard = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "shard";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\GetSessionIdRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\GetSessionIdRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\GetSessionIdRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\GetSessionIdRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keyspace> has a value
     *
     * @return boolean
     */
    public function hasKeyspace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keyspace> value
     *
     * @return \query\GetSessionIdRequest
     */
    public function clearKeyspace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keyspace> value
     *
     * @return string
     */
    public function getKeyspace(){
      return $this->_get(3);
    }
    
    /**
     * Set <keyspace> value
     *
     * @param string $value
     * @return \query\GetSessionIdRequest
     */
    public function setKeyspace( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <shard> has a value
     *
     * @return boolean
     */
    public function hasShard(){
      return $this->_has(4);
    }
    
    /**
     * Clear <shard> value
     *
     * @return \query\GetSessionIdRequest
     */
    public function clearShard(){
      return $this->_clear(4);
    }
    
    /**
     * Get <shard> value
     *
     * @return string
     */
    public function getShard(){
      return $this->_get(4);
    }
    
    /**
     * Set <shard> value
     *
     * @param string $value
     * @return \query\GetSessionIdRequest
     */
    public function setShard( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace query {

  class GetSessionIdResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.GetSessionIdResponse');

      // OPTIONAL INT64 session_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\GetSessionIdResponse
     */
    public function clearSessionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\GetSessionIdResponse
     */
    public function setSessionId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace query {

  class ExecuteRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var \query\BoundQuery */
    public $query = null;
    
    /**  @var int */
    public $transaction_id = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.ExecuteRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\BoundQuery';
      $descriptor->addField($f);

      // OPTIONAL INT64 transaction_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\ExecuteRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\ExecuteRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\ExecuteRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <query> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <query> value
     *
     * @return \query\BoundQuery
     */
    public function getQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <query> value
     *
     * @param \query\BoundQuery $value
     * @return \query\ExecuteRequest
     */
    public function setQuery(\query\BoundQuery $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearTransactionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return int
     */
    public function getTransactionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param int $value
     * @return \query\ExecuteRequest
     */
    public function setTransactionId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\ExecuteRequest
     */
    public function clearSessionId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(6);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\ExecuteRequest
     */
    public function setSessionId( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace query {

  class ExecuteResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QueryResult */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.ExecuteResponse');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\QueryResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \query\ExecuteResponse
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \query\QueryResult
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \query\QueryResult $value
     * @return \query\ExecuteResponse
     */
    public function setResult(\query\QueryResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace query {

  class ExecuteBatchRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var \query\BoundQuery[]  */
    public $queries = array();
    
    /**  @var boolean */
    public $as_transaction = null;
    
    /**  @var int */
    public $transaction_id = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.ExecuteBatchRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // REPEATED MESSAGE queries = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "queries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\BoundQuery';
      $descriptor->addField($f);

      // OPTIONAL BOOL as_transaction = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "as_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 transaction_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\ExecuteBatchRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\ExecuteBatchRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\ExecuteBatchRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <queries> has a value
     *
     * @return boolean
     */
    public function hasQueries(){
      return $this->_has(4);
    }
    
    /**
     * Clear <queries> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearQueries(){
      return $this->_clear(4);
    }
    
    /**
     * Get <queries> value
     *
     * @param int $idx
     * @return \query\BoundQuery
     */
    public function getQueries($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <queries> value
     *
     * @param \query\BoundQuery $value
     * @return \query\ExecuteBatchRequest
     */
    public function setQueries(\query\BoundQuery $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <queries>
     *
     * @return \query\BoundQuery[]
     */
    public function getQueriesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <queries>
     *
     * @param \query\BoundQuery $value
     * @return \query\ExecuteBatchRequest
     */
    public function addQueries(\query\BoundQuery $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <as_transaction> has a value
     *
     * @return boolean
     */
    public function hasAsTransaction(){
      return $this->_has(5);
    }
    
    /**
     * Clear <as_transaction> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearAsTransaction(){
      return $this->_clear(5);
    }
    
    /**
     * Get <as_transaction> value
     *
     * @return boolean
     */
    public function getAsTransaction(){
      return $this->_get(5);
    }
    
    /**
     * Set <as_transaction> value
     *
     * @param boolean $value
     * @return \query\ExecuteBatchRequest
     */
    public function setAsTransaction( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearTransactionId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return int
     */
    public function getTransactionId(){
      return $this->_get(6);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param int $value
     * @return \query\ExecuteBatchRequest
     */
    public function setTransactionId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\ExecuteBatchRequest
     */
    public function clearSessionId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(7);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\ExecuteBatchRequest
     */
    public function setSessionId( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace query {

  class ExecuteBatchResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QueryResult[]  */
    public $results = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.ExecuteBatchResponse');

      // REPEATED MESSAGE results = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\QueryResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(1);
    }
    
    /**
     * Clear <results> value
     *
     * @return \query\ExecuteBatchResponse
     */
    public function clearResults(){
      return $this->_clear(1);
    }
    
    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \query\QueryResult
     */
    public function getResults($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <results> value
     *
     * @param \query\QueryResult $value
     * @return \query\ExecuteBatchResponse
     */
    public function setResults(\query\QueryResult $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <results>
     *
     * @return \query\QueryResult[]
     */
    public function getResultsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <results>
     *
     * @param \query\QueryResult $value
     * @return \query\ExecuteBatchResponse
     */
    public function addResults(\query\QueryResult $value){
     return $this->_add(1, $value);
    }
  }
}

namespace query {

  class StreamExecuteRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var \query\BoundQuery */
    public $query = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.StreamExecuteRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\BoundQuery';
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\StreamExecuteRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\StreamExecuteRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\StreamExecuteRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\StreamExecuteRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\StreamExecuteRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\StreamExecuteRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <query> value
     *
     * @return \query\StreamExecuteRequest
     */
    public function clearQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <query> value
     *
     * @return \query\BoundQuery
     */
    public function getQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <query> value
     *
     * @param \query\BoundQuery $value
     * @return \query\StreamExecuteRequest
     */
    public function setQuery(\query\BoundQuery $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\StreamExecuteRequest
     */
    public function clearSessionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\StreamExecuteRequest
     */
    public function setSessionId( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace query {

  class StreamExecuteResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QueryResult */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.StreamExecuteResponse');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\QueryResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \query\StreamExecuteResponse
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \query\QueryResult
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \query\QueryResult $value
     * @return \query\StreamExecuteResponse
     */
    public function setResult(\query\QueryResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace query {

  class BeginRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BeginRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\BeginRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\BeginRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\BeginRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\BeginRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\BeginRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\BeginRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\BeginRequest
     */
    public function clearSessionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\BeginRequest
     */
    public function setSessionId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace query {

  class BeginResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $transaction_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.BeginResponse');

      // OPTIONAL INT64 transaction_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \query\BeginResponse
     */
    public function clearTransactionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return int
     */
    public function getTransactionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param int $value
     * @return \query\BeginResponse
     */
    public function setTransactionId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace query {

  class CommitRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var int */
    public $transaction_id = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.CommitRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL INT64 transaction_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\CommitRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\CommitRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\CommitRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\CommitRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\CommitRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\CommitRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \query\CommitRequest
     */
    public function clearTransactionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return int
     */
    public function getTransactionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param int $value
     * @return \query\CommitRequest
     */
    public function setTransactionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\CommitRequest
     */
    public function clearSessionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\CommitRequest
     */
    public function setSessionId( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace query {

  class CommitResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.CommitResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace query {

  class RollbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var int */
    public $transaction_id = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.RollbackRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL INT64 transaction_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\RollbackRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\RollbackRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\RollbackRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\RollbackRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\RollbackRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\RollbackRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <transaction_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <transaction_id> value
     *
     * @return \query\RollbackRequest
     */
    public function clearTransactionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <transaction_id> value
     *
     * @return int
     */
    public function getTransactionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <transaction_id> value
     *
     * @param int $value
     * @return \query\RollbackRequest
     */
    public function setTransactionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\RollbackRequest
     */
    public function clearSessionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\RollbackRequest
     */
    public function setSessionId( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace query {

  class RollbackResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.RollbackResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace query {

  class SplitQueryRequest extends \DrSlump\Protobuf\Message {

    /**  @var \vtrpc\CallerID */
    public $effective_caller_id = null;
    
    /**  @var \query\VTGateCallerID */
    public $immediate_caller_id = null;
    
    /**  @var \query\Target */
    public $target = null;
    
    /**  @var \query\BoundQuery */
    public $query = null;
    
    /**  @var string */
    public $split_column = null;
    
    /**  @var int */
    public $split_count = null;
    
    /**  @var int */
    public $session_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.SplitQueryRequest');

      // OPTIONAL MESSAGE effective_caller_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "effective_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\vtrpc\CallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE immediate_caller_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "immediate_caller_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\VTGateCallerID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE target = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\BoundQuery';
      $descriptor->addField($f);

      // OPTIONAL STRING split_column = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "split_column";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 split_count = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "split_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 session_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <effective_caller_id> has a value
     *
     * @return boolean
     */
    public function hasEffectiveCallerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <effective_caller_id> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearEffectiveCallerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <effective_caller_id> value
     *
     * @return \vtrpc\CallerID
     */
    public function getEffectiveCallerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <effective_caller_id> value
     *
     * @param \vtrpc\CallerID $value
     * @return \query\SplitQueryRequest
     */
    public function setEffectiveCallerId(\vtrpc\CallerID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <immediate_caller_id> has a value
     *
     * @return boolean
     */
    public function hasImmediateCallerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <immediate_caller_id> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearImmediateCallerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <immediate_caller_id> value
     *
     * @return \query\VTGateCallerID
     */
    public function getImmediateCallerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <immediate_caller_id> value
     *
     * @param \query\VTGateCallerID $value
     * @return \query\SplitQueryRequest
     */
    public function setImmediateCallerId(\query\VTGateCallerID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(3);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearTarget(){
      return $this->_clear(3);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(3);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\SplitQueryRequest
     */
    public function setTarget(\query\Target $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <query> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <query> value
     *
     * @return \query\BoundQuery
     */
    public function getQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <query> value
     *
     * @param \query\BoundQuery $value
     * @return \query\SplitQueryRequest
     */
    public function setQuery(\query\BoundQuery $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <split_column> has a value
     *
     * @return boolean
     */
    public function hasSplitColumn(){
      return $this->_has(5);
    }
    
    /**
     * Clear <split_column> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearSplitColumn(){
      return $this->_clear(5);
    }
    
    /**
     * Get <split_column> value
     *
     * @return string
     */
    public function getSplitColumn(){
      return $this->_get(5);
    }
    
    /**
     * Set <split_column> value
     *
     * @param string $value
     * @return \query\SplitQueryRequest
     */
    public function setSplitColumn( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <split_count> has a value
     *
     * @return boolean
     */
    public function hasSplitCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <split_count> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearSplitCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <split_count> value
     *
     * @return int
     */
    public function getSplitCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <split_count> value
     *
     * @param int $value
     * @return \query\SplitQueryRequest
     */
    public function setSplitCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <session_id> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <session_id> value
     *
     * @return \query\SplitQueryRequest
     */
    public function clearSessionId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <session_id> value
     *
     * @return int
     */
    public function getSessionId(){
      return $this->_get(7);
    }
    
    /**
     * Set <session_id> value
     *
     * @param int $value
     * @return \query\SplitQueryRequest
     */
    public function setSessionId( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace query {

  class QuerySplit extends \DrSlump\Protobuf\Message {

    /**  @var \query\BoundQuery */
    public $query = null;
    
    /**  @var int */
    public $row_count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.QuerySplit');

      // OPTIONAL MESSAGE query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\BoundQuery';
      $descriptor->addField($f);

      // OPTIONAL INT64 row_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <query> value
     *
     * @return \query\QuerySplit
     */
    public function clearQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <query> value
     *
     * @return \query\BoundQuery
     */
    public function getQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <query> value
     *
     * @param \query\BoundQuery $value
     * @return \query\QuerySplit
     */
    public function setQuery(\query\BoundQuery $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_count> has a value
     *
     * @return boolean
     */
    public function hasRowCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_count> value
     *
     * @return \query\QuerySplit
     */
    public function clearRowCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_count> value
     *
     * @return int
     */
    public function getRowCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_count> value
     *
     * @param int $value
     * @return \query\QuerySplit
     */
    public function setRowCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace query {

  class SplitQueryResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QuerySplit[]  */
    public $queries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.SplitQueryResponse');

      // REPEATED MESSAGE queries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "queries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\query\QuerySplit';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <queries> has a value
     *
     * @return boolean
     */
    public function hasQueries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <queries> value
     *
     * @return \query\SplitQueryResponse
     */
    public function clearQueries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <queries> value
     *
     * @param int $idx
     * @return \query\QuerySplit
     */
    public function getQueries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <queries> value
     *
     * @param \query\QuerySplit $value
     * @return \query\SplitQueryResponse
     */
    public function setQueries(\query\QuerySplit $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <queries>
     *
     * @return \query\QuerySplit[]
     */
    public function getQueriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <queries>
     *
     * @param \query\QuerySplit $value
     * @return \query\SplitQueryResponse
     */
    public function addQueries(\query\QuerySplit $value){
     return $this->_add(1, $value);
    }
  }
}

namespace query {

  class StreamHealthRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.StreamHealthRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace query {

  class RealtimeStats extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $health_error = null;
    
    /**  @var int */
    public $seconds_behind_master = null;
    
    /**  @var int */
    public $binlog_players_count = null;
    
    /**  @var int */
    public $seconds_behind_master_filtered_replication = null;
    
    /**  @var float */
    public $cpu_usage = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.RealtimeStats');

      // OPTIONAL STRING health_error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "health_error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 seconds_behind_master = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "seconds_behind_master";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 binlog_players_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "binlog_players_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 seconds_behind_master_filtered_replication = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "seconds_behind_master_filtered_replication";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE cpu_usage = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cpu_usage";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <health_error> has a value
     *
     * @return boolean
     */
    public function hasHealthError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <health_error> value
     *
     * @return \query\RealtimeStats
     */
    public function clearHealthError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <health_error> value
     *
     * @return string
     */
    public function getHealthError(){
      return $this->_get(1);
    }
    
    /**
     * Set <health_error> value
     *
     * @param string $value
     * @return \query\RealtimeStats
     */
    public function setHealthError( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <seconds_behind_master> has a value
     *
     * @return boolean
     */
    public function hasSecondsBehindMaster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <seconds_behind_master> value
     *
     * @return \query\RealtimeStats
     */
    public function clearSecondsBehindMaster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <seconds_behind_master> value
     *
     * @return int
     */
    public function getSecondsBehindMaster(){
      return $this->_get(2);
    }
    
    /**
     * Set <seconds_behind_master> value
     *
     * @param int $value
     * @return \query\RealtimeStats
     */
    public function setSecondsBehindMaster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <binlog_players_count> has a value
     *
     * @return boolean
     */
    public function hasBinlogPlayersCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <binlog_players_count> value
     *
     * @return \query\RealtimeStats
     */
    public function clearBinlogPlayersCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <binlog_players_count> value
     *
     * @return int
     */
    public function getBinlogPlayersCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <binlog_players_count> value
     *
     * @param int $value
     * @return \query\RealtimeStats
     */
    public function setBinlogPlayersCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <seconds_behind_master_filtered_replication> has a value
     *
     * @return boolean
     */
    public function hasSecondsBehindMasterFilteredReplication(){
      return $this->_has(4);
    }
    
    /**
     * Clear <seconds_behind_master_filtered_replication> value
     *
     * @return \query\RealtimeStats
     */
    public function clearSecondsBehindMasterFilteredReplication(){
      return $this->_clear(4);
    }
    
    /**
     * Get <seconds_behind_master_filtered_replication> value
     *
     * @return int
     */
    public function getSecondsBehindMasterFilteredReplication(){
      return $this->_get(4);
    }
    
    /**
     * Set <seconds_behind_master_filtered_replication> value
     *
     * @param int $value
     * @return \query\RealtimeStats
     */
    public function setSecondsBehindMasterFilteredReplication( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cpu_usage> has a value
     *
     * @return boolean
     */
    public function hasCpuUsage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cpu_usage> value
     *
     * @return \query\RealtimeStats
     */
    public function clearCpuUsage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cpu_usage> value
     *
     * @return float
     */
    public function getCpuUsage(){
      return $this->_get(5);
    }
    
    /**
     * Set <cpu_usage> value
     *
     * @param float $value
     * @return \query\RealtimeStats
     */
    public function setCpuUsage( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace query {

  class StreamHealthResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\Target */
    public $target = null;
    
    /**  @var boolean */
    public $serving = null;
    
    /**  @var int */
    public $tablet_externally_reparented_timestamp = null;
    
    /**  @var \query\RealtimeStats */
    public $realtime_stats = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'query.StreamHealthResponse');

      // OPTIONAL MESSAGE target = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\Target';
      $descriptor->addField($f);

      // OPTIONAL BOOL serving = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serving";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 tablet_externally_reparented_timestamp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tablet_externally_reparented_timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE realtime_stats = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "realtime_stats";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\RealtimeStats';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(1);
    }
    
    /**
     * Clear <target> value
     *
     * @return \query\StreamHealthResponse
     */
    public function clearTarget(){
      return $this->_clear(1);
    }
    
    /**
     * Get <target> value
     *
     * @return \query\Target
     */
    public function getTarget(){
      return $this->_get(1);
    }
    
    /**
     * Set <target> value
     *
     * @param \query\Target $value
     * @return \query\StreamHealthResponse
     */
    public function setTarget(\query\Target $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serving> has a value
     *
     * @return boolean
     */
    public function hasServing(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serving> value
     *
     * @return \query\StreamHealthResponse
     */
    public function clearServing(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serving> value
     *
     * @return boolean
     */
    public function getServing(){
      return $this->_get(2);
    }
    
    /**
     * Set <serving> value
     *
     * @param boolean $value
     * @return \query\StreamHealthResponse
     */
    public function setServing( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tablet_externally_reparented_timestamp> has a value
     *
     * @return boolean
     */
    public function hasTabletExternallyReparentedTimestamp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tablet_externally_reparented_timestamp> value
     *
     * @return \query\StreamHealthResponse
     */
    public function clearTabletExternallyReparentedTimestamp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tablet_externally_reparented_timestamp> value
     *
     * @return int
     */
    public function getTabletExternallyReparentedTimestamp(){
      return $this->_get(3);
    }
    
    /**
     * Set <tablet_externally_reparented_timestamp> value
     *
     * @param int $value
     * @return \query\StreamHealthResponse
     */
    public function setTabletExternallyReparentedTimestamp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <realtime_stats> has a value
     *
     * @return boolean
     */
    public function hasRealtimeStats(){
      return $this->_has(4);
    }
    
    /**
     * Clear <realtime_stats> value
     *
     * @return \query\StreamHealthResponse
     */
    public function clearRealtimeStats(){
      return $this->_clear(4);
    }
    
    /**
     * Get <realtime_stats> value
     *
     * @return \query\RealtimeStats
     */
    public function getRealtimeStats(){
      return $this->_get(4);
    }
    
    /**
     * Set <realtime_stats> value
     *
     * @param \query\RealtimeStats $value
     * @return \query\StreamHealthResponse
     */
    public function setRealtimeStats(\query\RealtimeStats $value){
      return $this->_set(4, $value);
    }
  }
}

