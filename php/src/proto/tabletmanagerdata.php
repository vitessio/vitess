<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: tabletmanagerdata.proto
//   Date: 2015-11-10 01:14:06

namespace tabletmanagerdata {

  class TableDefinition extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $schema = null;
    
    /**  @var string[]  */
    public $columns = array();
    
    /**  @var string[]  */
    public $primary_key_columns = array();
    
    /**  @var string */
    public $type = null;
    
    /**  @var int */
    public $data_length = null;
    
    /**  @var int */
    public $row_count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.TableDefinition');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING schema = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "schema";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING columns = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "columns";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING primary_key_columns = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "primary_key_columns";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 data_length = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "data_length";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 row_count = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "row_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <schema> has a value
     *
     * @return boolean
     */
    public function hasSchema(){
      return $this->_has(2);
    }
    
    /**
     * Clear <schema> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearSchema(){
      return $this->_clear(2);
    }
    
    /**
     * Get <schema> value
     *
     * @return string
     */
    public function getSchema(){
      return $this->_get(2);
    }
    
    /**
     * Set <schema> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setSchema( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <columns> has a value
     *
     * @return boolean
     */
    public function hasColumns(){
      return $this->_has(3);
    }
    
    /**
     * Clear <columns> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearColumns(){
      return $this->_clear(3);
    }
    
    /**
     * Get <columns> value
     *
     * @param int $idx
     * @return string
     */
    public function getColumns($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <columns> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setColumns( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <columns>
     *
     * @return string[]
     */
    public function getColumnsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <columns>
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function addColumns( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <primary_key_columns> has a value
     *
     * @return boolean
     */
    public function hasPrimaryKeyColumns(){
      return $this->_has(4);
    }
    
    /**
     * Clear <primary_key_columns> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearPrimaryKeyColumns(){
      return $this->_clear(4);
    }
    
    /**
     * Get <primary_key_columns> value
     *
     * @param int $idx
     * @return string
     */
    public function getPrimaryKeyColumns($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <primary_key_columns> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setPrimaryKeyColumns( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <primary_key_columns>
     *
     * @return string[]
     */
    public function getPrimaryKeyColumnsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <primary_key_columns>
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function addPrimaryKeyColumns( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <data_length> has a value
     *
     * @return boolean
     */
    public function hasDataLength(){
      return $this->_has(6);
    }
    
    /**
     * Clear <data_length> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearDataLength(){
      return $this->_clear(6);
    }
    
    /**
     * Get <data_length> value
     *
     * @return int
     */
    public function getDataLength(){
      return $this->_get(6);
    }
    
    /**
     * Set <data_length> value
     *
     * @param int $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setDataLength( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <row_count> has a value
     *
     * @return boolean
     */
    public function hasRowCount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <row_count> value
     *
     * @return \tabletmanagerdata\TableDefinition
     */
    public function clearRowCount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <row_count> value
     *
     * @return int
     */
    public function getRowCount(){
      return $this->_get(7);
    }
    
    /**
     * Set <row_count> value
     *
     * @param int $value
     * @return \tabletmanagerdata\TableDefinition
     */
    public function setRowCount( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SchemaDefinition extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $database_schema = null;
    
    /**  @var \tabletmanagerdata\TableDefinition[]  */
    public $table_definitions = array();
    
    /**  @var string */
    public $version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SchemaDefinition');

      // OPTIONAL STRING database_schema = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE table_definitions = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table_definitions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\TableDefinition';
      $descriptor->addField($f);

      // OPTIONAL STRING version = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database_schema> has a value
     *
     * @return boolean
     */
    public function hasDatabaseSchema(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function clearDatabaseSchema(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database_schema> value
     *
     * @return string
     */
    public function getDatabaseSchema(){
      return $this->_get(1);
    }
    
    /**
     * Set <database_schema> value
     *
     * @param string $value
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function setDatabaseSchema( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_definitions> has a value
     *
     * @return boolean
     */
    public function hasTableDefinitions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table_definitions> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function clearTableDefinitions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table_definitions> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\TableDefinition
     */
    public function getTableDefinitions($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <table_definitions> value
     *
     * @param \tabletmanagerdata\TableDefinition $value
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function setTableDefinitions(\tabletmanagerdata\TableDefinition $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <table_definitions>
     *
     * @return \tabletmanagerdata\TableDefinition[]
     */
    public function getTableDefinitionsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <table_definitions>
     *
     * @param \tabletmanagerdata\TableDefinition $value
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function addTableDefinitions(\tabletmanagerdata\TableDefinition $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <version> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function clearVersion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(3);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function setVersion( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace tabletmanagerdata\UserPermission {

  class PrivilegesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.UserPermission.PrivilegesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class UserPermission extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $host = null;
    
    /**  @var string */
    public $user = null;
    
    /**  @var int */
    public $password_checksum = null;
    
    /**  @var \tabletmanagerdata\UserPermission\PrivilegesEntry[]  */
    public $privileges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.UserPermission');

      // OPTIONAL STRING host = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING user = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 password_checksum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "password_checksum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE privileges = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "privileges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\UserPermission\PrivilegesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(1);
    }
    
    /**
     * Clear <host> value
     *
     * @return \tabletmanagerdata\UserPermission
     */
    public function clearHost(){
      return $this->_clear(1);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(1);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \tabletmanagerdata\UserPermission
     */
    public function setHost( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(2);
    }
    
    /**
     * Clear <user> value
     *
     * @return \tabletmanagerdata\UserPermission
     */
    public function clearUser(){
      return $this->_clear(2);
    }
    
    /**
     * Get <user> value
     *
     * @return string
     */
    public function getUser(){
      return $this->_get(2);
    }
    
    /**
     * Set <user> value
     *
     * @param string $value
     * @return \tabletmanagerdata\UserPermission
     */
    public function setUser( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <password_checksum> has a value
     *
     * @return boolean
     */
    public function hasPasswordChecksum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <password_checksum> value
     *
     * @return \tabletmanagerdata\UserPermission
     */
    public function clearPasswordChecksum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <password_checksum> value
     *
     * @return int
     */
    public function getPasswordChecksum(){
      return $this->_get(3);
    }
    
    /**
     * Set <password_checksum> value
     *
     * @param int $value
     * @return \tabletmanagerdata\UserPermission
     */
    public function setPasswordChecksum( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <privileges> has a value
     *
     * @return boolean
     */
    public function hasPrivileges(){
      return $this->_has(4);
    }
    
    /**
     * Clear <privileges> value
     *
     * @return \tabletmanagerdata\UserPermission
     */
    public function clearPrivileges(){
      return $this->_clear(4);
    }
    
    /**
     * Get <privileges> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry
     */
    public function getPrivileges($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <privileges> value
     *
     * @param \tabletmanagerdata\UserPermission\PrivilegesEntry $value
     * @return \tabletmanagerdata\UserPermission
     */
    public function setPrivileges(\tabletmanagerdata\UserPermission\PrivilegesEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <privileges>
     *
     * @return \tabletmanagerdata\UserPermission\PrivilegesEntry[]
     */
    public function getPrivilegesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <privileges>
     *
     * @param \tabletmanagerdata\UserPermission\PrivilegesEntry $value
     * @return \tabletmanagerdata\UserPermission
     */
    public function addPrivileges(\tabletmanagerdata\UserPermission\PrivilegesEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace tabletmanagerdata\DbPermission {

  class PrivilegesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.DbPermission.PrivilegesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class DbPermission extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $host = null;
    
    /**  @var string */
    public $db = null;
    
    /**  @var string */
    public $user = null;
    
    /**  @var \tabletmanagerdata\DbPermission\PrivilegesEntry[]  */
    public $privileges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.DbPermission');

      // OPTIONAL STRING host = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING db = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "db";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING user = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE privileges = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "privileges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\DbPermission\PrivilegesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(1);
    }
    
    /**
     * Clear <host> value
     *
     * @return \tabletmanagerdata\DbPermission
     */
    public function clearHost(){
      return $this->_clear(1);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(1);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DbPermission
     */
    public function setHost( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <db> has a value
     *
     * @return boolean
     */
    public function hasDb(){
      return $this->_has(2);
    }
    
    /**
     * Clear <db> value
     *
     * @return \tabletmanagerdata\DbPermission
     */
    public function clearDb(){
      return $this->_clear(2);
    }
    
    /**
     * Get <db> value
     *
     * @return string
     */
    public function getDb(){
      return $this->_get(2);
    }
    
    /**
     * Set <db> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DbPermission
     */
    public function setDb( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(3);
    }
    
    /**
     * Clear <user> value
     *
     * @return \tabletmanagerdata\DbPermission
     */
    public function clearUser(){
      return $this->_clear(3);
    }
    
    /**
     * Get <user> value
     *
     * @return string
     */
    public function getUser(){
      return $this->_get(3);
    }
    
    /**
     * Set <user> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DbPermission
     */
    public function setUser( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <privileges> has a value
     *
     * @return boolean
     */
    public function hasPrivileges(){
      return $this->_has(4);
    }
    
    /**
     * Clear <privileges> value
     *
     * @return \tabletmanagerdata\DbPermission
     */
    public function clearPrivileges(){
      return $this->_clear(4);
    }
    
    /**
     * Get <privileges> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry
     */
    public function getPrivileges($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <privileges> value
     *
     * @param \tabletmanagerdata\DbPermission\PrivilegesEntry $value
     * @return \tabletmanagerdata\DbPermission
     */
    public function setPrivileges(\tabletmanagerdata\DbPermission\PrivilegesEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <privileges>
     *
     * @return \tabletmanagerdata\DbPermission\PrivilegesEntry[]
     */
    public function getPrivilegesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <privileges>
     *
     * @param \tabletmanagerdata\DbPermission\PrivilegesEntry $value
     * @return \tabletmanagerdata\DbPermission
     */
    public function addPrivileges(\tabletmanagerdata\DbPermission\PrivilegesEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace tabletmanagerdata {

  class Permissions extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\UserPermission[]  */
    public $user_permissions = array();
    
    /**  @var \tabletmanagerdata\DbPermission[]  */
    public $db_permissions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.Permissions');

      // REPEATED MESSAGE user_permissions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user_permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\UserPermission';
      $descriptor->addField($f);

      // REPEATED MESSAGE db_permissions = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "db_permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\DbPermission';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user_permissions> has a value
     *
     * @return boolean
     */
    public function hasUserPermissions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user_permissions> value
     *
     * @return \tabletmanagerdata\Permissions
     */
    public function clearUserPermissions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user_permissions> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\UserPermission
     */
    public function getUserPermissions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <user_permissions> value
     *
     * @param \tabletmanagerdata\UserPermission $value
     * @return \tabletmanagerdata\Permissions
     */
    public function setUserPermissions(\tabletmanagerdata\UserPermission $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <user_permissions>
     *
     * @return \tabletmanagerdata\UserPermission[]
     */
    public function getUserPermissionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <user_permissions>
     *
     * @param \tabletmanagerdata\UserPermission $value
     * @return \tabletmanagerdata\Permissions
     */
    public function addUserPermissions(\tabletmanagerdata\UserPermission $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <db_permissions> has a value
     *
     * @return boolean
     */
    public function hasDbPermissions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <db_permissions> value
     *
     * @return \tabletmanagerdata\Permissions
     */
    public function clearDbPermissions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <db_permissions> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\DbPermission
     */
    public function getDbPermissions($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <db_permissions> value
     *
     * @param \tabletmanagerdata\DbPermission $value
     * @return \tabletmanagerdata\Permissions
     */
    public function setDbPermissions(\tabletmanagerdata\DbPermission $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <db_permissions>
     *
     * @return \tabletmanagerdata\DbPermission[]
     */
    public function getDbPermissionsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <db_permissions>
     *
     * @param \tabletmanagerdata\DbPermission $value
     * @return \tabletmanagerdata\Permissions
     */
    public function addDbPermissions(\tabletmanagerdata\DbPermission $value){
     return $this->_add(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class BlpPosition extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $uid = null;
    
    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.BlpPosition');

      // OPTIONAL UINT32 uid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING position = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \tabletmanagerdata\BlpPosition
     */
    public function clearUid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uid> value
     *
     * @return int
     */
    public function getUid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uid> value
     *
     * @param int $value
     * @return \tabletmanagerdata\BlpPosition
     */
    public function setUid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\BlpPosition
     */
    public function clearPosition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(2);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\BlpPosition
     */
    public function setPosition( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PingRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $payload = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PingRequest');

      // OPTIONAL STRING payload = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "payload";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <payload> has a value
     *
     * @return boolean
     */
    public function hasPayload(){
      return $this->_has(1);
    }
    
    /**
     * Clear <payload> value
     *
     * @return \tabletmanagerdata\PingRequest
     */
    public function clearPayload(){
      return $this->_clear(1);
    }
    
    /**
     * Get <payload> value
     *
     * @return string
     */
    public function getPayload(){
      return $this->_get(1);
    }
    
    /**
     * Set <payload> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PingRequest
     */
    public function setPayload( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PingResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $payload = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PingResponse');

      // OPTIONAL STRING payload = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "payload";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <payload> has a value
     *
     * @return boolean
     */
    public function hasPayload(){
      return $this->_has(1);
    }
    
    /**
     * Clear <payload> value
     *
     * @return \tabletmanagerdata\PingResponse
     */
    public function clearPayload(){
      return $this->_clear(1);
    }
    
    /**
     * Get <payload> value
     *
     * @return string
     */
    public function getPayload(){
      return $this->_get(1);
    }
    
    /**
     * Set <payload> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PingResponse
     */
    public function setPayload( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SleepRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $duration = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SleepRequest');

      // OPTIONAL INT64 duration = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(1);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \tabletmanagerdata\SleepRequest
     */
    public function clearDuration(){
      return $this->_clear(1);
    }
    
    /**
     * Get <duration> value
     *
     * @return int
     */
    public function getDuration(){
      return $this->_get(1);
    }
    
    /**
     * Set <duration> value
     *
     * @param int $value
     * @return \tabletmanagerdata\SleepRequest
     */
    public function setDuration( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SleepResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SleepResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata\ExecuteHookRequest {

  class ExtraEnvEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteHookRequest.ExtraEnvEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteHookRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $parameters = array();
    
    /**  @var \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry[]  */
    public $extra_env = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteHookRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE extra_env = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "extra_env";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return string
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function setParameters( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return string[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function addParameters( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <extra_env> has a value
     *
     * @return boolean
     */
    public function hasExtraEnv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <extra_env> value
     *
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function clearExtraEnv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <extra_env> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry
     */
    public function getExtraEnv($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <extra_env> value
     *
     * @param \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry $value
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function setExtraEnv(\tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <extra_env>
     *
     * @return \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry[]
     */
    public function getExtraEnvList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <extra_env>
     *
     * @param \tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry $value
     * @return \tabletmanagerdata\ExecuteHookRequest
     */
    public function addExtraEnv(\tabletmanagerdata\ExecuteHookRequest\ExtraEnvEntry $value){
     return $this->_add(3, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteHookResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $exit_status = null;
    
    /**  @var string */
    public $stdout = null;
    
    /**  @var string */
    public $stderr = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteHookResponse');

      // OPTIONAL INT64 exit_status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "exit_status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING stdout = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stdout";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING stderr = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stderr";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <exit_status> has a value
     *
     * @return boolean
     */
    public function hasExitStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <exit_status> value
     *
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function clearExitStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <exit_status> value
     *
     * @return int
     */
    public function getExitStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <exit_status> value
     *
     * @param int $value
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function setExitStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <stdout> has a value
     *
     * @return boolean
     */
    public function hasStdout(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stdout> value
     *
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function clearStdout(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stdout> value
     *
     * @return string
     */
    public function getStdout(){
      return $this->_get(2);
    }
    
    /**
     * Set <stdout> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function setStdout( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stderr> has a value
     *
     * @return boolean
     */
    public function hasStderr(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stderr> value
     *
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function clearStderr(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stderr> value
     *
     * @return string
     */
    public function getStderr(){
      return $this->_get(3);
    }
    
    /**
     * Set <stderr> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteHookResponse
     */
    public function setStderr( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace tabletmanagerdata {

  class GetSchemaRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $tables = array();
    
    /**  @var boolean */
    public $include_views = null;
    
    /**  @var string[]  */
    public $exclude_tables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetSchemaRequest');

      // REPEATED STRING tables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_views = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "include_views";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING exclude_tables = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "exclude_tables";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function clearTables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return string
     */
    public function getTables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function setTables( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return string[]
     */
    public function getTablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function addTables( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <include_views> has a value
     *
     * @return boolean
     */
    public function hasIncludeViews(){
      return $this->_has(2);
    }
    
    /**
     * Clear <include_views> value
     *
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function clearIncludeViews(){
      return $this->_clear(2);
    }
    
    /**
     * Get <include_views> value
     *
     * @return boolean
     */
    public function getIncludeViews(){
      return $this->_get(2);
    }
    
    /**
     * Set <include_views> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function setIncludeViews( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <exclude_tables> has a value
     *
     * @return boolean
     */
    public function hasExcludeTables(){
      return $this->_has(3);
    }
    
    /**
     * Clear <exclude_tables> value
     *
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function clearExcludeTables(){
      return $this->_clear(3);
    }
    
    /**
     * Get <exclude_tables> value
     *
     * @param int $idx
     * @return string
     */
    public function getExcludeTables($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <exclude_tables> value
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function setExcludeTables( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <exclude_tables>
     *
     * @return string[]
     */
    public function getExcludeTablesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <exclude_tables>
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSchemaRequest
     */
    public function addExcludeTables( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace tabletmanagerdata {

  class GetSchemaResponse extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $schema_definition = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetSchemaResponse');

      // OPTIONAL MESSAGE schema_definition = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "schema_definition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <schema_definition> has a value
     *
     * @return boolean
     */
    public function hasSchemaDefinition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <schema_definition> value
     *
     * @return \tabletmanagerdata\GetSchemaResponse
     */
    public function clearSchemaDefinition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <schema_definition> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getSchemaDefinition(){
      return $this->_get(1);
    }
    
    /**
     * Set <schema_definition> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\GetSchemaResponse
     */
    public function setSchemaDefinition(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class GetPermissionsRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetPermissionsRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class GetPermissionsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\Permissions */
    public $permissions = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetPermissionsResponse');

      // OPTIONAL MESSAGE permissions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "permissions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\Permissions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <permissions> has a value
     *
     * @return boolean
     */
    public function hasPermissions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <permissions> value
     *
     * @return \tabletmanagerdata\GetPermissionsResponse
     */
    public function clearPermissions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <permissions> value
     *
     * @return \tabletmanagerdata\Permissions
     */
    public function getPermissions(){
      return $this->_get(1);
    }
    
    /**
     * Set <permissions> value
     *
     * @param \tabletmanagerdata\Permissions $value
     * @return \tabletmanagerdata\GetPermissionsResponse
     */
    public function setPermissions(\tabletmanagerdata\Permissions $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SetReadOnlyRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetReadOnlyRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SetReadOnlyResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetReadOnlyResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SetReadWriteRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetReadWriteRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SetReadWriteResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetReadWriteResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class ChangeTypeRequest extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ChangeTypeRequest');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \tabletmanagerdata\ChangeTypeRequest
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \tabletmanagerdata\ChangeTypeRequest
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ChangeTypeResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ChangeTypeResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class RefreshStateRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RefreshStateRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class RefreshStateResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RefreshStateResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class RunHealthCheckRequest extends \DrSlump\Protobuf\Message {

    /**  @var int - \topodata\TabletType */
    public $tablet_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RunHealthCheckRequest');

      // OPTIONAL ENUM tablet_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tablet_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tablet_type> has a value
     *
     * @return boolean
     */
    public function hasTabletType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tablet_type> value
     *
     * @return \tabletmanagerdata\RunHealthCheckRequest
     */
    public function clearTabletType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tablet_type> value
     *
     * @return int - \topodata\TabletType
     */
    public function getTabletType(){
      return $this->_get(1);
    }
    
    /**
     * Set <tablet_type> value
     *
     * @param int - \topodata\TabletType $value
     * @return \tabletmanagerdata\RunHealthCheckRequest
     */
    public function setTabletType( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class RunHealthCheckResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RunHealthCheckResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class ReloadSchemaRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ReloadSchemaRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class ReloadSchemaResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ReloadSchemaResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class PreflightSchemaRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $change = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PreflightSchemaRequest');

      // OPTIONAL STRING change = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "change";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <change> has a value
     *
     * @return boolean
     */
    public function hasChange(){
      return $this->_has(1);
    }
    
    /**
     * Clear <change> value
     *
     * @return \tabletmanagerdata\PreflightSchemaRequest
     */
    public function clearChange(){
      return $this->_clear(1);
    }
    
    /**
     * Get <change> value
     *
     * @return string
     */
    public function getChange(){
      return $this->_get(1);
    }
    
    /**
     * Set <change> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PreflightSchemaRequest
     */
    public function setChange( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PreflightSchemaResponse extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $before_schema = null;
    
    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $after_schema = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PreflightSchemaResponse');

      // OPTIONAL MESSAGE before_schema = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "before_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE after_schema = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "after_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <before_schema> has a value
     *
     * @return boolean
     */
    public function hasBeforeSchema(){
      return $this->_has(1);
    }
    
    /**
     * Clear <before_schema> value
     *
     * @return \tabletmanagerdata\PreflightSchemaResponse
     */
    public function clearBeforeSchema(){
      return $this->_clear(1);
    }
    
    /**
     * Get <before_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getBeforeSchema(){
      return $this->_get(1);
    }
    
    /**
     * Set <before_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\PreflightSchemaResponse
     */
    public function setBeforeSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <after_schema> has a value
     *
     * @return boolean
     */
    public function hasAfterSchema(){
      return $this->_has(2);
    }
    
    /**
     * Clear <after_schema> value
     *
     * @return \tabletmanagerdata\PreflightSchemaResponse
     */
    public function clearAfterSchema(){
      return $this->_clear(2);
    }
    
    /**
     * Get <after_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getAfterSchema(){
      return $this->_get(2);
    }
    
    /**
     * Set <after_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\PreflightSchemaResponse
     */
    public function setAfterSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ApplySchemaRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sql = null;
    
    /**  @var boolean */
    public $force = null;
    
    /**  @var boolean */
    public $allow_replication = null;
    
    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $before_schema = null;
    
    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $after_schema = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ApplySchemaRequest');

      // OPTIONAL STRING sql = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sql";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL force = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "force";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_replication = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "allow_replication";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE before_schema = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "before_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE after_schema = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "after_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sql> has a value
     *
     * @return boolean
     */
    public function hasSql(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sql> value
     *
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function clearSql(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sql> value
     *
     * @return string
     */
    public function getSql(){
      return $this->_get(1);
    }
    
    /**
     * Set <sql> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function setSql( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <force> has a value
     *
     * @return boolean
     */
    public function hasForce(){
      return $this->_has(2);
    }
    
    /**
     * Clear <force> value
     *
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function clearForce(){
      return $this->_clear(2);
    }
    
    /**
     * Get <force> value
     *
     * @return boolean
     */
    public function getForce(){
      return $this->_get(2);
    }
    
    /**
     * Set <force> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function setForce( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <allow_replication> has a value
     *
     * @return boolean
     */
    public function hasAllowReplication(){
      return $this->_has(3);
    }
    
    /**
     * Clear <allow_replication> value
     *
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function clearAllowReplication(){
      return $this->_clear(3);
    }
    
    /**
     * Get <allow_replication> value
     *
     * @return boolean
     */
    public function getAllowReplication(){
      return $this->_get(3);
    }
    
    /**
     * Set <allow_replication> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function setAllowReplication( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <before_schema> has a value
     *
     * @return boolean
     */
    public function hasBeforeSchema(){
      return $this->_has(4);
    }
    
    /**
     * Clear <before_schema> value
     *
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function clearBeforeSchema(){
      return $this->_clear(4);
    }
    
    /**
     * Get <before_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getBeforeSchema(){
      return $this->_get(4);
    }
    
    /**
     * Set <before_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function setBeforeSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <after_schema> has a value
     *
     * @return boolean
     */
    public function hasAfterSchema(){
      return $this->_has(5);
    }
    
    /**
     * Clear <after_schema> value
     *
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function clearAfterSchema(){
      return $this->_clear(5);
    }
    
    /**
     * Get <after_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getAfterSchema(){
      return $this->_get(5);
    }
    
    /**
     * Set <after_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\ApplySchemaRequest
     */
    public function setAfterSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(5, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ApplySchemaResponse extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $before_schema = null;
    
    /**  @var \tabletmanagerdata\SchemaDefinition */
    public $after_schema = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ApplySchemaResponse');

      // OPTIONAL MESSAGE before_schema = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "before_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE after_schema = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "after_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\SchemaDefinition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <before_schema> has a value
     *
     * @return boolean
     */
    public function hasBeforeSchema(){
      return $this->_has(1);
    }
    
    /**
     * Clear <before_schema> value
     *
     * @return \tabletmanagerdata\ApplySchemaResponse
     */
    public function clearBeforeSchema(){
      return $this->_clear(1);
    }
    
    /**
     * Get <before_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getBeforeSchema(){
      return $this->_get(1);
    }
    
    /**
     * Set <before_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\ApplySchemaResponse
     */
    public function setBeforeSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <after_schema> has a value
     *
     * @return boolean
     */
    public function hasAfterSchema(){
      return $this->_has(2);
    }
    
    /**
     * Clear <after_schema> value
     *
     * @return \tabletmanagerdata\ApplySchemaResponse
     */
    public function clearAfterSchema(){
      return $this->_clear(2);
    }
    
    /**
     * Get <after_schema> value
     *
     * @return \tabletmanagerdata\SchemaDefinition
     */
    public function getAfterSchema(){
      return $this->_get(2);
    }
    
    /**
     * Set <after_schema> value
     *
     * @param \tabletmanagerdata\SchemaDefinition $value
     * @return \tabletmanagerdata\ApplySchemaResponse
     */
    public function setAfterSchema(\tabletmanagerdata\SchemaDefinition $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteFetchAsDbaRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $query = null;
    
    /**  @var string */
    public $db_name = null;
    
    /**  @var int */
    public $max_rows = null;
    
    /**  @var boolean */
    public $disable_binlogs = null;
    
    /**  @var boolean */
    public $reload_schema = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteFetchAsDbaRequest');

      // OPTIONAL STRING query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING db_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "db_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 max_rows = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max_rows";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL disable_binlogs = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "disable_binlogs";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL reload_schema = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reload_schema";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <query> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function clearQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <query> value
     *
     * @return string
     */
    public function getQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <query> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function setQuery( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <db_name> has a value
     *
     * @return boolean
     */
    public function hasDbName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <db_name> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function clearDbName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <db_name> value
     *
     * @return string
     */
    public function getDbName(){
      return $this->_get(2);
    }
    
    /**
     * Set <db_name> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function setDbName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <max_rows> has a value
     *
     * @return boolean
     */
    public function hasMaxRows(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max_rows> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function clearMaxRows(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max_rows> value
     *
     * @return int
     */
    public function getMaxRows(){
      return $this->_get(3);
    }
    
    /**
     * Set <max_rows> value
     *
     * @param int $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function setMaxRows( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <disable_binlogs> has a value
     *
     * @return boolean
     */
    public function hasDisableBinlogs(){
      return $this->_has(4);
    }
    
    /**
     * Clear <disable_binlogs> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function clearDisableBinlogs(){
      return $this->_clear(4);
    }
    
    /**
     * Get <disable_binlogs> value
     *
     * @return boolean
     */
    public function getDisableBinlogs(){
      return $this->_get(4);
    }
    
    /**
     * Set <disable_binlogs> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function setDisableBinlogs( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <reload_schema> has a value
     *
     * @return boolean
     */
    public function hasReloadSchema(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reload_schema> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function clearReloadSchema(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reload_schema> value
     *
     * @return boolean
     */
    public function getReloadSchema(){
      return $this->_get(5);
    }
    
    /**
     * Set <reload_schema> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaRequest
     */
    public function setReloadSchema( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteFetchAsDbaResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QueryResult */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteFetchAsDbaResponse');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\QueryResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsDbaResponse
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \query\QueryResult
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \query\QueryResult $value
     * @return \tabletmanagerdata\ExecuteFetchAsDbaResponse
     */
    public function setResult(\query\QueryResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteFetchAsAppRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $query = null;
    
    /**  @var int */
    public $max_rows = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteFetchAsAppRequest');

      // OPTIONAL STRING query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 max_rows = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_rows";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <query> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsAppRequest
     */
    public function clearQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <query> value
     *
     * @return string
     */
    public function getQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <query> value
     *
     * @param string $value
     * @return \tabletmanagerdata\ExecuteFetchAsAppRequest
     */
    public function setQuery( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max_rows> has a value
     *
     * @return boolean
     */
    public function hasMaxRows(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_rows> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsAppRequest
     */
    public function clearMaxRows(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_rows> value
     *
     * @return int
     */
    public function getMaxRows(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_rows> value
     *
     * @param int $value
     * @return \tabletmanagerdata\ExecuteFetchAsAppRequest
     */
    public function setMaxRows( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ExecuteFetchAsAppResponse extends \DrSlump\Protobuf\Message {

    /**  @var \query\QueryResult */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ExecuteFetchAsAppResponse');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\query\QueryResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \tabletmanagerdata\ExecuteFetchAsAppResponse
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \query\QueryResult
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \query\QueryResult $value
     * @return \tabletmanagerdata\ExecuteFetchAsAppResponse
     */
    public function setResult(\query\QueryResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SlaveStatusRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveStatusRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SlaveStatusResponse extends \DrSlump\Protobuf\Message {

    /**  @var \replicationdata\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveStatusResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\replicationdata\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \tabletmanagerdata\SlaveStatusResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \replicationdata\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \replicationdata\Status $value
     * @return \tabletmanagerdata\SlaveStatusResponse
     */
    public function setStatus(\replicationdata\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class MasterPositionRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.MasterPositionRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class MasterPositionResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.MasterPositionResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\MasterPositionResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\MasterPositionResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class StopSlaveRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopSlaveRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopSlaveResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopSlaveResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopSlaveMinimumRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    
    /**  @var int */
    public $wait_timeout = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopSlaveMinimumRequest');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 wait_timeout = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wait_timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\StopSlaveMinimumRequest
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\StopSlaveMinimumRequest
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wait_timeout> has a value
     *
     * @return boolean
     */
    public function hasWaitTimeout(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wait_timeout> value
     *
     * @return \tabletmanagerdata\StopSlaveMinimumRequest
     */
    public function clearWaitTimeout(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wait_timeout> value
     *
     * @return int
     */
    public function getWaitTimeout(){
      return $this->_get(2);
    }
    
    /**
     * Set <wait_timeout> value
     *
     * @param int $value
     * @return \tabletmanagerdata\StopSlaveMinimumRequest
     */
    public function setWaitTimeout( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class StopSlaveMinimumResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopSlaveMinimumResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\StopSlaveMinimumResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\StopSlaveMinimumResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class StartSlaveRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StartSlaveRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StartSlaveResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StartSlaveResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class TabletExternallyReparentedRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $external_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.TabletExternallyReparentedRequest');

      // OPTIONAL STRING external_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "external_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <external_id> has a value
     *
     * @return boolean
     */
    public function hasExternalId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <external_id> value
     *
     * @return \tabletmanagerdata\TabletExternallyReparentedRequest
     */
    public function clearExternalId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <external_id> value
     *
     * @return string
     */
    public function getExternalId(){
      return $this->_get(1);
    }
    
    /**
     * Set <external_id> value
     *
     * @param string $value
     * @return \tabletmanagerdata\TabletExternallyReparentedRequest
     */
    public function setExternalId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class TabletExternallyReparentedResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.TabletExternallyReparentedResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class TabletExternallyElectedRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.TabletExternallyElectedRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class TabletExternallyElectedResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.TabletExternallyElectedResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class GetSlavesRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetSlavesRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class GetSlavesResponse extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $addrs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.GetSlavesResponse');

      // REPEATED STRING addrs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "addrs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <addrs> has a value
     *
     * @return boolean
     */
    public function hasAddrs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <addrs> value
     *
     * @return \tabletmanagerdata\GetSlavesResponse
     */
    public function clearAddrs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <addrs> value
     *
     * @param int $idx
     * @return string
     */
    public function getAddrs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <addrs> value
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSlavesResponse
     */
    public function setAddrs( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <addrs>
     *
     * @return string[]
     */
    public function getAddrsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <addrs>
     *
     * @param string $value
     * @return \tabletmanagerdata\GetSlavesResponse
     */
    public function addAddrs( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class WaitBlpPositionRequest extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\BlpPosition */
    public $blp_position = null;
    
    /**  @var int */
    public $wait_timeout = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.WaitBlpPositionRequest');

      // OPTIONAL MESSAGE blp_position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "blp_position";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\tabletmanagerdata\BlpPosition';
      $descriptor->addField($f);

      // OPTIONAL INT64 wait_timeout = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wait_timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <blp_position> has a value
     *
     * @return boolean
     */
    public function hasBlpPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <blp_position> value
     *
     * @return \tabletmanagerdata\WaitBlpPositionRequest
     */
    public function clearBlpPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <blp_position> value
     *
     * @return \tabletmanagerdata\BlpPosition
     */
    public function getBlpPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <blp_position> value
     *
     * @param \tabletmanagerdata\BlpPosition $value
     * @return \tabletmanagerdata\WaitBlpPositionRequest
     */
    public function setBlpPosition(\tabletmanagerdata\BlpPosition $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wait_timeout> has a value
     *
     * @return boolean
     */
    public function hasWaitTimeout(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wait_timeout> value
     *
     * @return \tabletmanagerdata\WaitBlpPositionRequest
     */
    public function clearWaitTimeout(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wait_timeout> value
     *
     * @return int
     */
    public function getWaitTimeout(){
      return $this->_get(2);
    }
    
    /**
     * Set <wait_timeout> value
     *
     * @param int $value
     * @return \tabletmanagerdata\WaitBlpPositionRequest
     */
    public function setWaitTimeout( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class WaitBlpPositionResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.WaitBlpPositionResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopBlpRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopBlpRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopBlpResponse extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\BlpPosition[]  */
    public $blp_positions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopBlpResponse');

      // REPEATED MESSAGE blp_positions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "blp_positions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\BlpPosition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <blp_positions> has a value
     *
     * @return boolean
     */
    public function hasBlpPositions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <blp_positions> value
     *
     * @return \tabletmanagerdata\StopBlpResponse
     */
    public function clearBlpPositions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <blp_positions> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\BlpPosition
     */
    public function getBlpPositions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <blp_positions> value
     *
     * @param \tabletmanagerdata\BlpPosition $value
     * @return \tabletmanagerdata\StopBlpResponse
     */
    public function setBlpPositions(\tabletmanagerdata\BlpPosition $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <blp_positions>
     *
     * @return \tabletmanagerdata\BlpPosition[]
     */
    public function getBlpPositionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <blp_positions>
     *
     * @param \tabletmanagerdata\BlpPosition $value
     * @return \tabletmanagerdata\StopBlpResponse
     */
    public function addBlpPositions(\tabletmanagerdata\BlpPosition $value){
     return $this->_add(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class StartBlpRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StartBlpRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StartBlpResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StartBlpResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class RunBlpUntilRequest extends \DrSlump\Protobuf\Message {

    /**  @var \tabletmanagerdata\BlpPosition[]  */
    public $blp_positions = array();
    
    /**  @var int */
    public $wait_timeout = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RunBlpUntilRequest');

      // REPEATED MESSAGE blp_positions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "blp_positions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\tabletmanagerdata\BlpPosition';
      $descriptor->addField($f);

      // OPTIONAL INT64 wait_timeout = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wait_timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <blp_positions> has a value
     *
     * @return boolean
     */
    public function hasBlpPositions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <blp_positions> value
     *
     * @return \tabletmanagerdata\RunBlpUntilRequest
     */
    public function clearBlpPositions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <blp_positions> value
     *
     * @param int $idx
     * @return \tabletmanagerdata\BlpPosition
     */
    public function getBlpPositions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <blp_positions> value
     *
     * @param \tabletmanagerdata\BlpPosition $value
     * @return \tabletmanagerdata\RunBlpUntilRequest
     */
    public function setBlpPositions(\tabletmanagerdata\BlpPosition $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <blp_positions>
     *
     * @return \tabletmanagerdata\BlpPosition[]
     */
    public function getBlpPositionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <blp_positions>
     *
     * @param \tabletmanagerdata\BlpPosition $value
     * @return \tabletmanagerdata\RunBlpUntilRequest
     */
    public function addBlpPositions(\tabletmanagerdata\BlpPosition $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <wait_timeout> has a value
     *
     * @return boolean
     */
    public function hasWaitTimeout(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wait_timeout> value
     *
     * @return \tabletmanagerdata\RunBlpUntilRequest
     */
    public function clearWaitTimeout(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wait_timeout> value
     *
     * @return int
     */
    public function getWaitTimeout(){
      return $this->_get(2);
    }
    
    /**
     * Set <wait_timeout> value
     *
     * @param int $value
     * @return \tabletmanagerdata\RunBlpUntilRequest
     */
    public function setWaitTimeout( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace tabletmanagerdata {

  class RunBlpUntilResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.RunBlpUntilResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\RunBlpUntilResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\RunBlpUntilResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class ResetReplicationRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ResetReplicationRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class ResetReplicationResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.ResetReplicationResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class InitMasterRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.InitMasterRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class InitMasterResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.InitMasterResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\InitMasterResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\InitMasterResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PopulateReparentJournalRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $time_created_ns = null;
    
    /**  @var string */
    public $action_name = null;
    
    /**  @var \topodata\TabletAlias */
    public $master_alias = null;
    
    /**  @var string */
    public $replication_position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PopulateReparentJournalRequest');

      // OPTIONAL INT64 time_created_ns = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time_created_ns";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING action_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "action_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE master_alias = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "master_alias";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL STRING replication_position = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "replication_position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time_created_ns> has a value
     *
     * @return boolean
     */
    public function hasTimeCreatedNs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time_created_ns> value
     *
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function clearTimeCreatedNs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time_created_ns> value
     *
     * @return int
     */
    public function getTimeCreatedNs(){
      return $this->_get(1);
    }
    
    /**
     * Set <time_created_ns> value
     *
     * @param int $value
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function setTimeCreatedNs( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <action_name> has a value
     *
     * @return boolean
     */
    public function hasActionName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <action_name> value
     *
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function clearActionName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <action_name> value
     *
     * @return string
     */
    public function getActionName(){
      return $this->_get(2);
    }
    
    /**
     * Set <action_name> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function setActionName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <master_alias> has a value
     *
     * @return boolean
     */
    public function hasMasterAlias(){
      return $this->_has(3);
    }
    
    /**
     * Clear <master_alias> value
     *
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function clearMasterAlias(){
      return $this->_clear(3);
    }
    
    /**
     * Get <master_alias> value
     *
     * @return \topodata\TabletAlias
     */
    public function getMasterAlias(){
      return $this->_get(3);
    }
    
    /**
     * Set <master_alias> value
     *
     * @param \topodata\TabletAlias $value
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function setMasterAlias(\topodata\TabletAlias $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <replication_position> has a value
     *
     * @return boolean
     */
    public function hasReplicationPosition(){
      return $this->_has(4);
    }
    
    /**
     * Clear <replication_position> value
     *
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function clearReplicationPosition(){
      return $this->_clear(4);
    }
    
    /**
     * Get <replication_position> value
     *
     * @return string
     */
    public function getReplicationPosition(){
      return $this->_get(4);
    }
    
    /**
     * Set <replication_position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PopulateReparentJournalRequest
     */
    public function setReplicationPosition( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PopulateReparentJournalResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PopulateReparentJournalResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class InitSlaveRequest extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $parent = null;
    
    /**  @var string */
    public $replication_position = null;
    
    /**  @var int */
    public $time_created_ns = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.InitSlaveRequest');

      // OPTIONAL MESSAGE parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL STRING replication_position = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "replication_position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 time_created_ns = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time_created_ns";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return \topodata\TabletAlias
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param \topodata\TabletAlias $value
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function setParent(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <replication_position> has a value
     *
     * @return boolean
     */
    public function hasReplicationPosition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <replication_position> value
     *
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function clearReplicationPosition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <replication_position> value
     *
     * @return string
     */
    public function getReplicationPosition(){
      return $this->_get(2);
    }
    
    /**
     * Set <replication_position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function setReplicationPosition( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time_created_ns> has a value
     *
     * @return boolean
     */
    public function hasTimeCreatedNs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time_created_ns> value
     *
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function clearTimeCreatedNs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time_created_ns> value
     *
     * @return int
     */
    public function getTimeCreatedNs(){
      return $this->_get(3);
    }
    
    /**
     * Set <time_created_ns> value
     *
     * @param int $value
     * @return \tabletmanagerdata\InitSlaveRequest
     */
    public function setTimeCreatedNs( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace tabletmanagerdata {

  class InitSlaveResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.InitSlaveResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class DemoteMasterRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.DemoteMasterRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class DemoteMasterResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.DemoteMasterResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\DemoteMasterResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\DemoteMasterResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PromoteSlaveWhenCaughtUpRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PromoteSlaveWhenCaughtUpRequest');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\PromoteSlaveWhenCaughtUpRequest
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PromoteSlaveWhenCaughtUpRequest
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PromoteSlaveWhenCaughtUpResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PromoteSlaveWhenCaughtUpResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\PromoteSlaveWhenCaughtUpResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PromoteSlaveWhenCaughtUpResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SlaveWasPromotedRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveWasPromotedRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SlaveWasPromotedResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveWasPromotedResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SetMasterRequest extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $parent = null;
    
    /**  @var int */
    public $time_created_ns = null;
    
    /**  @var boolean */
    public $force_start_slave = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetMasterRequest');

      // OPTIONAL MESSAGE parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      // OPTIONAL INT64 time_created_ns = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time_created_ns";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL force_start_slave = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "force_start_slave";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return \topodata\TabletAlias
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param \topodata\TabletAlias $value
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function setParent(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <time_created_ns> has a value
     *
     * @return boolean
     */
    public function hasTimeCreatedNs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time_created_ns> value
     *
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function clearTimeCreatedNs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time_created_ns> value
     *
     * @return int
     */
    public function getTimeCreatedNs(){
      return $this->_get(2);
    }
    
    /**
     * Set <time_created_ns> value
     *
     * @param int $value
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function setTimeCreatedNs( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <force_start_slave> has a value
     *
     * @return boolean
     */
    public function hasForceStartSlave(){
      return $this->_has(3);
    }
    
    /**
     * Clear <force_start_slave> value
     *
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function clearForceStartSlave(){
      return $this->_clear(3);
    }
    
    /**
     * Get <force_start_slave> value
     *
     * @return boolean
     */
    public function getForceStartSlave(){
      return $this->_get(3);
    }
    
    /**
     * Set <force_start_slave> value
     *
     * @param boolean $value
     * @return \tabletmanagerdata\SetMasterRequest
     */
    public function setForceStartSlave( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SetMasterResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SetMasterResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class SlaveWasRestartedRequest extends \DrSlump\Protobuf\Message {

    /**  @var \topodata\TabletAlias */
    public $parent = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveWasRestartedRequest');

      // OPTIONAL MESSAGE parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\topodata\TabletAlias';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \tabletmanagerdata\SlaveWasRestartedRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return \topodata\TabletAlias
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param \topodata\TabletAlias $value
     * @return \tabletmanagerdata\SlaveWasRestartedRequest
     */
    public function setParent(\topodata\TabletAlias $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class SlaveWasRestartedResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.SlaveWasRestartedResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopReplicationAndGetStatusRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopReplicationAndGetStatusRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class StopReplicationAndGetStatusResponse extends \DrSlump\Protobuf\Message {

    /**  @var \replicationdata\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.StopReplicationAndGetStatusResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\replicationdata\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \tabletmanagerdata\StopReplicationAndGetStatusResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \replicationdata\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \replicationdata\Status $value
     * @return \tabletmanagerdata\StopReplicationAndGetStatusResponse
     */
    public function setStatus(\replicationdata\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class PromoteSlaveRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PromoteSlaveRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace tabletmanagerdata {

  class PromoteSlaveResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.PromoteSlaveResponse');

      // OPTIONAL STRING position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \tabletmanagerdata\PromoteSlaveResponse
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return string
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param string $value
     * @return \tabletmanagerdata\PromoteSlaveResponse
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class BackupRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $concurrency = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.BackupRequest');

      // OPTIONAL INT64 concurrency = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "concurrency";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <concurrency> has a value
     *
     * @return boolean
     */
    public function hasConcurrency(){
      return $this->_has(1);
    }
    
    /**
     * Clear <concurrency> value
     *
     * @return \tabletmanagerdata\BackupRequest
     */
    public function clearConcurrency(){
      return $this->_clear(1);
    }
    
    /**
     * Get <concurrency> value
     *
     * @return int
     */
    public function getConcurrency(){
      return $this->_get(1);
    }
    
    /**
     * Set <concurrency> value
     *
     * @param int $value
     * @return \tabletmanagerdata\BackupRequest
     */
    public function setConcurrency( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace tabletmanagerdata {

  class BackupResponse extends \DrSlump\Protobuf\Message {

    /**  @var \logutil\Event */
    public $event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'tabletmanagerdata.BackupResponse');

      // OPTIONAL MESSAGE event = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\logutil\Event';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event> has a value
     *
     * @return boolean
     */
    public function hasEvent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event> value
     *
     * @return \tabletmanagerdata\BackupResponse
     */
    public function clearEvent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event> value
     *
     * @return \logutil\Event
     */
    public function getEvent(){
      return $this->_get(1);
    }
    
    /**
     * Set <event> value
     *
     * @param \logutil\Event $value
     * @return \tabletmanagerdata\BackupResponse
     */
    public function setEvent(\logutil\Event $value){
      return $this->_set(1, $value);
    }
  }
}

