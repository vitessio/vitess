<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: automation.proto
//   Date: 2015-10-27 20:47:01

namespace automation {

  class ClusterOperationState extends \DrSlump\Protobuf\Enum {
    const UNKNOWN_CLUSTER_OPERATION_STATE = 0;
    const CLUSTER_OPERATION_NOT_STARTED = 1;
    const CLUSTER_OPERATION_RUNNING = 2;
    const CLUSTER_OPERATION_DONE = 3;
  }
}
namespace automation {

  class TaskState extends \DrSlump\Protobuf\Enum {
    const UNKNOWN_TASK_STATE = 0;
    const NOT_STARTED = 1;
    const RUNNING = 2;
    const DONE = 3;
  }
}
namespace automation {

  class ClusterOperation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \automation\TaskContainer[]  */
    public $serial_tasks = array();
    
    /**  @var int - \automation\ClusterOperationState */
    public $state = null;
    
    /**  @var string */
    public $error = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.ClusterOperation');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE serial_tasks = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serial_tasks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\automation\TaskContainer';
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\automation\ClusterOperationState';
      $descriptor->addField($f);

      // OPTIONAL STRING error = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \automation\ClusterOperation
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \automation\ClusterOperation
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serial_tasks> has a value
     *
     * @return boolean
     */
    public function hasSerialTasks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serial_tasks> value
     *
     * @return \automation\ClusterOperation
     */
    public function clearSerialTasks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serial_tasks> value
     *
     * @param int $idx
     * @return \automation\TaskContainer
     */
    public function getSerialTasks($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <serial_tasks> value
     *
     * @param \automation\TaskContainer $value
     * @return \automation\ClusterOperation
     */
    public function setSerialTasks(\automation\TaskContainer $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <serial_tasks>
     *
     * @return \automation\TaskContainer[]
     */
    public function getSerialTasksList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <serial_tasks>
     *
     * @param \automation\TaskContainer $value
     * @return \automation\ClusterOperation
     */
    public function addSerialTasks(\automation\TaskContainer $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <state> value
     *
     * @return \automation\ClusterOperation
     */
    public function clearState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \automation\ClusterOperationState
     */
    public function getState(){
      return $this->_get(3);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \automation\ClusterOperationState $value
     * @return \automation\ClusterOperation
     */
    public function setState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(4);
    }
    
    /**
     * Clear <error> value
     *
     * @return \automation\ClusterOperation
     */
    public function clearError(){
      return $this->_clear(4);
    }
    
    /**
     * Get <error> value
     *
     * @return string
     */
    public function getError(){
      return $this->_get(4);
    }
    
    /**
     * Set <error> value
     *
     * @param string $value
     * @return \automation\ClusterOperation
     */
    public function setError( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace automation {

  class TaskContainer extends \DrSlump\Protobuf\Message {

    /**  @var \automation\Task[]  */
    public $parallel_tasks = array();
    
    /**  @var int */
    public $concurrency = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.TaskContainer');

      // REPEATED MESSAGE parallel_tasks = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parallel_tasks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\automation\Task';
      $descriptor->addField($f);

      // OPTIONAL INT32 concurrency = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "concurrency";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parallel_tasks> has a value
     *
     * @return boolean
     */
    public function hasParallelTasks(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parallel_tasks> value
     *
     * @return \automation\TaskContainer
     */
    public function clearParallelTasks(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parallel_tasks> value
     *
     * @param int $idx
     * @return \automation\Task
     */
    public function getParallelTasks($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <parallel_tasks> value
     *
     * @param \automation\Task $value
     * @return \automation\TaskContainer
     */
    public function setParallelTasks(\automation\Task $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <parallel_tasks>
     *
     * @return \automation\Task[]
     */
    public function getParallelTasksList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <parallel_tasks>
     *
     * @param \automation\Task $value
     * @return \automation\TaskContainer
     */
    public function addParallelTasks(\automation\Task $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <concurrency> has a value
     *
     * @return boolean
     */
    public function hasConcurrency(){
      return $this->_has(2);
    }
    
    /**
     * Clear <concurrency> value
     *
     * @return \automation\TaskContainer
     */
    public function clearConcurrency(){
      return $this->_clear(2);
    }
    
    /**
     * Get <concurrency> value
     *
     * @return int
     */
    public function getConcurrency(){
      return $this->_get(2);
    }
    
    /**
     * Set <concurrency> value
     *
     * @param int $value
     * @return \automation\TaskContainer
     */
    public function setConcurrency( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace automation\Task {

  class ParametersEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.Task.ParametersEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \automation\Task\ParametersEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \automation\Task\ParametersEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \automation\Task\ParametersEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \automation\Task\ParametersEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace automation {

  class Task extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \automation\Task\ParametersEntry[]  */
    public $parameters = array();
    
    /**  @var string */
    public $id = null;
    
    /**  @var int - \automation\TaskState */
    public $state = null;
    
    /**  @var string */
    public $output = null;
    
    /**  @var string */
    public $error = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.Task');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\automation\Task\ParametersEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\automation\TaskState';
      $descriptor->addField($f);

      // OPTIONAL STRING output = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING error = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \automation\Task
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \automation\Task
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \automation\Task
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \automation\Task\ParametersEntry
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \automation\Task\ParametersEntry $value
     * @return \automation\Task
     */
    public function setParameters(\automation\Task\ParametersEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \automation\Task\ParametersEntry[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \automation\Task\ParametersEntry $value
     * @return \automation\Task
     */
    public function addParameters(\automation\Task\ParametersEntry $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \automation\Task
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \automation\Task
     */
    public function setId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \automation\Task
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \automation\TaskState
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \automation\TaskState $value
     * @return \automation\Task
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <output> has a value
     *
     * @return boolean
     */
    public function hasOutput(){
      return $this->_has(5);
    }
    
    /**
     * Clear <output> value
     *
     * @return \automation\Task
     */
    public function clearOutput(){
      return $this->_clear(5);
    }
    
    /**
     * Get <output> value
     *
     * @return string
     */
    public function getOutput(){
      return $this->_get(5);
    }
    
    /**
     * Set <output> value
     *
     * @param string $value
     * @return \automation\Task
     */
    public function setOutput( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(6);
    }
    
    /**
     * Clear <error> value
     *
     * @return \automation\Task
     */
    public function clearError(){
      return $this->_clear(6);
    }
    
    /**
     * Get <error> value
     *
     * @return string
     */
    public function getError(){
      return $this->_get(6);
    }
    
    /**
     * Set <error> value
     *
     * @param string $value
     * @return \automation\Task
     */
    public function setError( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace automation\EnqueueClusterOperationRequest {

  class ParametersEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.EnqueueClusterOperationRequest.ParametersEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace automation {

  class EnqueueClusterOperationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \automation\EnqueueClusterOperationRequest\ParametersEntry[]  */
    public $parameters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.EnqueueClusterOperationRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\automation\EnqueueClusterOperationRequest\ParametersEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \automation\EnqueueClusterOperationRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \automation\EnqueueClusterOperationRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \automation\EnqueueClusterOperationRequest
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \automation\EnqueueClusterOperationRequest\ParametersEntry $value
     * @return \automation\EnqueueClusterOperationRequest
     */
    public function setParameters(\automation\EnqueueClusterOperationRequest\ParametersEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \automation\EnqueueClusterOperationRequest\ParametersEntry[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \automation\EnqueueClusterOperationRequest\ParametersEntry $value
     * @return \automation\EnqueueClusterOperationRequest
     */
    public function addParameters(\automation\EnqueueClusterOperationRequest\ParametersEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace automation {

  class EnqueueClusterOperationResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.EnqueueClusterOperationResponse');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \automation\EnqueueClusterOperationResponse
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \automation\EnqueueClusterOperationResponse
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace automation {

  class GetClusterOperationStateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.GetClusterOperationStateRequest');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \automation\GetClusterOperationStateRequest
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \automation\GetClusterOperationStateRequest
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace automation {

  class GetClusterOperationStateResponse extends \DrSlump\Protobuf\Message {

    /**  @var int - \automation\ClusterOperationState */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.GetClusterOperationStateResponse');

      // OPTIONAL ENUM state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\automation\ClusterOperationState';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \automation\GetClusterOperationStateResponse
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \automation\ClusterOperationState
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \automation\ClusterOperationState $value
     * @return \automation\GetClusterOperationStateResponse
     */
    public function setState( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace automation {

  class GetClusterOperationDetailsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.GetClusterOperationDetailsRequest');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \automation\GetClusterOperationDetailsRequest
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \automation\GetClusterOperationDetailsRequest
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace automation {

  class GetClusterOperationDetailsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \automation\ClusterOperation */
    public $cluster_op = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'automation.GetClusterOperationDetailsResponse');

      // OPTIONAL MESSAGE cluster_op = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster_op";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\automation\ClusterOperation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster_op> has a value
     *
     * @return boolean
     */
    public function hasClusterOp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster_op> value
     *
     * @return \automation\GetClusterOperationDetailsResponse
     */
    public function clearClusterOp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster_op> value
     *
     * @return \automation\ClusterOperation
     */
    public function getClusterOp(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster_op> value
     *
     * @param \automation\ClusterOperation $value
     * @return \automation\GetClusterOperationDetailsResponse
     */
    public function setClusterOp(\automation\ClusterOperation $value){
      return $this->_set(2, $value);
    }
  }
}

