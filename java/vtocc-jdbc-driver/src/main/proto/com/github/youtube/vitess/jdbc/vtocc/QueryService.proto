package com.github.youtube.vitess.jdbc.vtocc;

option java_generic_services = true;

message SessionInfo {
    optional int64 session_id = 1;
}

message Session {
    optional int64 session_id = 1;
    optional int64 transaction_id = 2;
}

message SessionParams {
    optional string keyspace = 1;
    optional string shard = 2;
}

message BindVariable {
    optional string name = 1;

    enum Type {
        NULL = 0;
        BYTES = 1;
        INT = 2;
        UINT = 3;
        FLOAT = 4;
    }

    optional Type type = 2;
    optional bytes value_bytes = 3;
    optional int64 value_int = 4;
    optional uint64 value_uint = 5;
    optional double value_float = 6;
}

message Query {
    optional bytes sql = 1;
    repeated BindVariable bind_variables = 2;
    optional Session session = 3;
}

message BoundQuery {
    optional bytes sql = 1;
    repeated BindVariable bind_variables = 2;
}

message QueryList {
    repeated BoundQuery queries = 1;
    optional Session session = 2;
}

message Field {
    optional string name = 1;
    // Type follows enum_field_types from mysql.h.
    enum Type {
        DECIMAL = 0;
        TINY = 1;
        SHORT = 2;
        LONG = 3;
        FLOAT = 4;
        DOUBLE = 5;
        NULL = 6;
        TIMESTAMP = 7;
        LONGLONG = 8;
        INT24 = 9;
        DATE = 10;
        TIME = 11;
        DATETIME = 12;
        YEAR = 13;
        NEWDATE = 14;
        VARCHAR = 15;
        BIT = 16;
        NEWDECIMAL = 246;
        ENUM = 247;
        SET = 248;
        TINY_BLOB = 249;
        MEDIUM_BLOB = 250;
        LONG_BLOB = 251;
        BLOB = 252;
        VAR_STRING = 253;
        STRING = 254;
        GEOMETRY = 255;
    }

    optional Type type = 2;
}

message Cell {
    optional bytes value = 1;
}

message Row {
    repeated Cell values = 1;
}

message QueryResult {
    repeated Field fields = 1;
    optional uint64 rows_affected = 2;
    optional uint64 insert_id = 3;
    repeated Row rows = 4;
}

message QueryResultList {
    repeated QueryResult list = 1;
}

message TransactionInfo {
    optional int64 transaction_id = 1;
}

message CommitResponse {
}

message RollbackResponse {
}

service SqlQuery {

    // GetSessionId returns a valid session id to be used for
    // subsequent calls.
    rpc GetSessionId (SessionParams) returns (SessionInfo);

    // Execute executes the specified SQL query (might be in a transaction context).
    rpc Execute (Query) returns (QueryResult);

    // ExecuteBatch executes a list of queries
    rpc ExecuteBatch (QueryList) returns (QueryResultList);

    // Begin a transaction.
    rpc Begin (Session) returns (TransactionInfo);

    // Commit a transaction.
    rpc Commit (Session) returns (CommitResponse);

    // Rollback a transaction.
    rpc Rollback (Session) returns (RollbackResponse);
}
